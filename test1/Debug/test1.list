
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024f44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003be8  08025118  08025118  00035118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028d00  08028d00  000401e8  2**0
                  CONTENTS
  4 .ARM          00000008  08028d00  08028d00  00038d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028d08  08028d08  000401e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08028d08  08028d08  00038d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08028d10  08028d10  00038d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08028d18  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a8  08028dc0  000400a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000148  08028e60  00040148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000bfc8  200001e8  08028f00  000401e8  2**2
                  ALLOC
 12 ._user_heap_stack 00006000  2000c1b0  08028f00  0004c1b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000401e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000a5f8b  00000000  00000000  00040218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000e5e9  00000000  00000000  000e61a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004920  00000000  00000000  000f4790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000046d0  00000000  00000000  000f90b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00036ba3  00000000  00000000  000fd780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000322a6  00000000  00000000  00134323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001665c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000151b0  00000000  00000000  0016661c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080250fc 	.word	0x080250fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	080250fc 	.word	0x080250fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <_Z6vprintPKcSt9__va_list>:

static uint8_t str1_;
static uint8_t str3_;

void vprint(const char *fmt, va_list argp)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0b4      	sub	sp, #208	; 0xd0
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f023 f98e 	bl	8024220 <vsiprintf>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bfcc      	ite	gt
 8000f0a:	2301      	movgt	r3, #1
 8000f0c:	2300      	movle	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00c      	beq.n	8000f2e <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	  HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 10); // send message via UART
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff f979 	bl	8000210 <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f107 0108 	add.w	r1, r7, #8
 8000f26:	230a      	movs	r3, #10
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <_Z6vprintPKcSt9__va_list+0x4c>)
 8000f2a:	f00e f959 	bl	800f1e0 <HAL_UART_Transmit>
    }
}
 8000f2e:	bf00      	nop
 8000f30:	37d0      	adds	r7, #208	; 0xd0
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000694 	.word	0x20000694

08000f3c <_Z7DprintfPKcz>:

void Dprintf(const char *fmt, ...) // custom printf() function
{
 8000f3c:	b40f      	push	{r0, r1, r2, r3}
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	6938      	ldr	r0, [r7, #16]
 8000f4e:	f7ff ffcd 	bl	8000eec <_Z6vprintPKcSt9__va_list>
    va_end(argp);
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f5c:	b004      	add	sp, #16
 8000f5e:	4770      	bx	lr

08000f60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_UART_RxCpltCallback+0x50>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d110      	bne.n	8000f94 <HAL_UART_RxCpltCallback+0x34>
	{
		HAL_NVIC_DisableIRQ(USART1_IRQn); //Rx Callback 함수 Disable
 8000f72:	2025      	movs	r0, #37	; 0x25
 8000f74:	f00a ff92 	bl	800be9c <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit_IT(&huart1, &str1_, sizeof(str1_));
 8000f78:	2201      	movs	r2, #1
 8000f7a:	490e      	ldr	r1, [pc, #56]	; (8000fb4 <HAL_UART_RxCpltCallback+0x54>)
 8000f7c:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <HAL_UART_RxCpltCallback+0x58>)
 8000f7e:	f00e fa77 	bl	800f470 <HAL_UART_Transmit_IT>
		HAL_NVIC_EnableIRQ(USART1_IRQn);  //Rx callback 함수 enable
 8000f82:	2025      	movs	r0, #37	; 0x25
 8000f84:	f00a ff7c 	bl	800be80 <HAL_NVIC_EnableIRQ>
		HAL_UART_Receive_IT(&huart1, &str1_, sizeof(str1_));
 8000f88:	2201      	movs	r2, #1
 8000f8a:	490a      	ldr	r1, [pc, #40]	; (8000fb4 <HAL_UART_RxCpltCallback+0x54>)
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <HAL_UART_RxCpltCallback+0x58>)
 8000f8e:	f00e facd 	bl	800f52c <HAL_UART_Receive_IT>
	{
		//HAL_NVIC_DisableIRQ(USART3_IRQn); //Rx Callback 함수 Disable
		//HAL_NVIC_EnableIRQ(USART3_IRQn);  //Rx callback 함수 enable
		HAL_UART_Receive_IT(&huart3, &str3_, 1);
	}
}
 8000f92:	e009      	b.n	8000fa8 <HAL_UART_RxCpltCallback+0x48>
	else if(huart->Instance == USART3)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <HAL_UART_RxCpltCallback+0x5c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d104      	bne.n	8000fa8 <HAL_UART_RxCpltCallback+0x48>
		HAL_UART_Receive_IT(&huart3, &str3_, 1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <HAL_UART_RxCpltCallback+0x60>)
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <HAL_UART_RxCpltCallback+0x64>)
 8000fa4:	f00e fac2 	bl	800f52c <HAL_UART_Receive_IT>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40011000 	.word	0x40011000
 8000fb4:	20000204 	.word	0x20000204
 8000fb8:	20000694 	.word	0x20000694
 8000fbc:	40004800 	.word	0x40004800
 8000fc0:	20000205 	.word	0x20000205
 8000fc4:	2000071c 	.word	0x2000071c

08000fc8 <_Z15Debug_Uart_Initv>:




void Debug_Uart_Init()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &str1_, 1); 	//for debugging
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4905      	ldr	r1, [pc, #20]	; (8000fe4 <_Z15Debug_Uart_Initv+0x1c>)
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <_Z15Debug_Uart_Initv+0x20>)
 8000fd2:	f00e faab 	bl	800f52c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &str3_, 1);	//for Controlling
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4904      	ldr	r1, [pc, #16]	; (8000fec <_Z15Debug_Uart_Initv+0x24>)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <_Z15Debug_Uart_Initv+0x28>)
 8000fdc:	f00e faa6 	bl	800f52c <HAL_UART_Receive_IT>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000204 	.word	0x20000204
 8000fe8:	20000694 	.word	0x20000694
 8000fec:	20000205 	.word	0x20000205
 8000ff0:	2000071c 	.word	0x2000071c

08000ff4 <_Z10DebugDrivev>:
int a_= 2000;
int testpos= 100000;

//for uart1 debug
void DebugDrive()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
	int cmd = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
	int cmd1 = str1_;
 8000ffe:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <_Z10DebugDrivev+0xe0>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	60bb      	str	r3, [r7, #8]
	int cmd2 = str3_;
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <_Z10DebugDrivev+0xe4>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	607b      	str	r3, [r7, #4]
	int cmd3 = char_ethernet;
 800100a:	4b34      	ldr	r3, [pc, #208]	; (80010dc <_Z10DebugDrivev+0xe8>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	603b      	str	r3, [r7, #0]

	if (cmd1 != 0) cmd = cmd1;
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <_Z10DebugDrivev+0x28>
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e00a      	b.n	8001032 <_Z10DebugDrivev+0x3e>
	else if (cmd2 !=0) cmd = cmd2;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <_Z10DebugDrivev+0x34>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e004      	b.n	8001032 <_Z10DebugDrivev+0x3e>
	else if (cmd3 !=0) cmd = cmd3;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <_Z10DebugDrivev+0x3e>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	60fb      	str	r3, [r7, #12]

	switch(cmd)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3b31      	subs	r3, #49	; 0x31
 8001036:	2b08      	cmp	r3, #8
 8001038:	d83d      	bhi.n	80010b6 <_Z10DebugDrivev+0xc2>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <_Z10DebugDrivev+0x4c>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	08001065 	.word	0x08001065
 8001044:	0800106f 	.word	0x0800106f
 8001048:	08001079 	.word	0x08001079
 800104c:	08001081 	.word	0x08001081
 8001050:	08001089 	.word	0x08001089
 8001054:	08001091 	.word	0x08001091
 8001058:	0800109f 	.word	0x0800109f
 800105c:	080010a7 	.word	0x080010a7
 8001060:	080010af 	.word	0x080010af
		//case '2': SensorManager::GetInstance().PGV100DirLeft();/*function 2*/ break;
		//case '3': SensorManager::GetInstance().PGV100DirRight();/*function 2*/ break;
		//case '4': SensorManager::GetInstance().PGV100Drive(); break;
		//case '5': SensorManager::GetInstance().CommonSensorDrive(); break;
		//can test
		case '1': bg95test.AbsPosCommand(&testpos); break;
 8001064:	491e      	ldr	r1, [pc, #120]	; (80010e0 <_Z10DebugDrivev+0xec>)
 8001066:	481f      	ldr	r0, [pc, #124]	; (80010e4 <_Z10DebugDrivev+0xf0>)
 8001068:	f003 fe7e 	bl	8004d68 <_ZN4BG9513AbsPosCommandEPi>
 800106c:	e024      	b.n	80010b8 <_Z10DebugDrivev+0xc4>
		case '2': bg95test.RelPosCommand(&testpos); break;
 800106e:	491c      	ldr	r1, [pc, #112]	; (80010e0 <_Z10DebugDrivev+0xec>)
 8001070:	481c      	ldr	r0, [pc, #112]	; (80010e4 <_Z10DebugDrivev+0xf0>)
 8001072:	f003 fe89 	bl	8004d88 <_ZN4BG9513RelPosCommandEPi>
 8001076:	e01f      	b.n	80010b8 <_Z10DebugDrivev+0xc4>
		case '3': bg95test.VelClockCommand(); break;
 8001078:	481a      	ldr	r0, [pc, #104]	; (80010e4 <_Z10DebugDrivev+0xf0>)
 800107a:	f003 fe95 	bl	8004da8 <_ZN4BG9515VelClockCommandEv>
 800107e:	e01b      	b.n	80010b8 <_Z10DebugDrivev+0xc4>
		case '4': bg95test.VelCClockCommand(); break;
 8001080:	4818      	ldr	r0, [pc, #96]	; (80010e4 <_Z10DebugDrivev+0xf0>)
 8001082:	f003 fe9d 	bl	8004dc0 <_ZN4BG9516VelCClockCommandEv>
 8001086:	e017      	b.n	80010b8 <_Z10DebugDrivev+0xc4>
		case '5': bg95test.SetPositionMaxLimitCommand(); break;
 8001088:	4816      	ldr	r0, [pc, #88]	; (80010e4 <_Z10DebugDrivev+0xf0>)
 800108a:	f003 feea 	bl	8004e62 <_ZN4BG9526SetPositionMaxLimitCommandEv>
 800108e:	e013      	b.n	80010b8 <_Z10DebugDrivev+0xc4>
		case '6': bg95test.SetMaxVelocityCommand(a_); break;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <_Z10DebugDrivev+0xf4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	4813      	ldr	r0, [pc, #76]	; (80010e4 <_Z10DebugDrivev+0xf0>)
 8001098:	f003 febc 	bl	8004e14 <_ZN4BG9521SetMaxVelocityCommandEl>
 800109c:	e00c      	b.n	80010b8 <_Z10DebugDrivev+0xc4>
		case '7': bg95test.Initialization(); break;
 800109e:	4811      	ldr	r0, [pc, #68]	; (80010e4 <_Z10DebugDrivev+0xf0>)
 80010a0:	f001 fc22 	bl	80028e8 <_ZN4BG9514InitializationEv>
 80010a4:	e008      	b.n	80010b8 <_Z10DebugDrivev+0xc4>
		case '8': bg95test.ClearParamCommand(); break;
 80010a6:	480f      	ldr	r0, [pc, #60]	; (80010e4 <_Z10DebugDrivev+0xf0>)
 80010a8:	f003 fe96 	bl	8004dd8 <_ZN4BG9517ClearParamCommandEv>
 80010ac:	e004      	b.n	80010b8 <_Z10DebugDrivev+0xc4>
		case '9': bg95test.StopMotorCommand(); break;
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <_Z10DebugDrivev+0xf0>)
 80010b0:	f003 fea1 	bl	8004df6 <_ZN4BG9516StopMotorCommandEv>
 80010b4:	e000      	b.n	80010b8 <_Z10DebugDrivev+0xc4>

		default: break;
 80010b6:	bf00      	nop
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <_Z10DebugDrivev+0xe0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <_Z10DebugDrivev+0xe4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <_Z10DebugDrivev+0xe8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
	}
	memset(&str1_, '\0', sizeof(str1_));
	memset(&str3_, '\0', sizeof(str3_));
	memset(&char_ethernet, '\0', sizeof(char_ethernet));
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000204 	.word	0x20000204
 80010d8:	20000205 	.word	0x20000205
 80010dc:	2000034c 	.word	0x2000034c
 80010e0:	20000004 	.word	0x20000004
 80010e4:	20001964 	.word	0x20001964
 80010e8:	20000000 	.word	0x20000000

080010ec <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>:
#include "common_sensor.h"


CommonSensor::CommonSensor(){}

CommonSensor::CommonSensor(uint16_t index, bool active_type, uint8_t max_filter_cnt,
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	4608      	mov	r0, r1
 80010f6:	4611      	mov	r1, r2
 80010f8:	461a      	mov	r2, r3
 80010fa:	4603      	mov	r3, r0
 80010fc:	807b      	strh	r3, [r7, #2]
 80010fe:	460b      	mov	r3, r1
 8001100:	707b      	strb	r3, [r7, #1]
 8001102:	4613      	mov	r3, r2
 8001104:	703b      	strb	r3, [r7, #0]
		GPIO_TypeDef* GPIOx, uint32_t PinMask)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2205      	movs	r2, #5
 8001110:	731a      	strb	r2, [r3, #12]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	735a      	strb	r2, [r3, #13]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	739a      	strb	r2, [r3, #14]
{
	this->index_ = index;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	887a      	ldrh	r2, [r7, #2]
 8001122:	801a      	strh	r2, [r3, #0]
	this->active_type_ = active_type;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	787a      	ldrb	r2, [r7, #1]
 8001128:	709a      	strb	r2, [r3, #2]
	this->max_filter_cnt_ = max_filter_cnt;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	783a      	ldrb	r2, [r7, #0]
 800112e:	731a      	strb	r2, [r3, #12]
	this->GPIOx_ = GPIOx;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	605a      	str	r2, [r3, #4]
	this->PinMask_ = PinMask;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	609a      	str	r2, [r3, #8]
}
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_ZN12CommonSensorD1Ev>:

CommonSensor::~CommonSensor(){}
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_ZNK12CommonSensor13GetSensorDataEv>:


bool CommonSensor::GetSensorData() const {return this->output_;}
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	78db      	ldrb	r3, [r3, #3]
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_ZNK12CommonSensor14GetSensorIndexEv>:

uint16_t CommonSensor::GetSensorIndex() const {return this->index_;}
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <_ZN12CommonSensor16CheckSensorValueEv>:


//use hal or ll function
bool CommonSensor::CheckSensorValue()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(this->GPIOx_, this->PinMask_) == 1) (this->state) = 1;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	4619      	mov	r1, r3
 80011a4:	4610      	mov	r0, r2
 80011a6:	f00c faf3 	bl	800d790 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	bf0c      	ite	eq
 80011b0:	2301      	moveq	r3, #1
 80011b2:	2300      	movne	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <_ZN12CommonSensor16CheckSensorValueEv+0x32>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	739a      	strb	r2, [r3, #14]
 80011c0:	e002      	b.n	80011c8 <_ZN12CommonSensor16CheckSensorValueEv+0x38>
	else (this->state) = 0;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	739a      	strb	r2, [r3, #14]

	if(!active_type_) this->state = !(this->state);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	789b      	ldrb	r3, [r3, #2]
 80011cc:	f083 0301 	eor.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <_ZN12CommonSensor16CheckSensorValueEv+0x54>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7b9b      	ldrb	r3, [r3, #14]
 80011da:	f083 0301 	eor.w	r3, r3, #1
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	739a      	strb	r2, [r3, #14]
	return this->state;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	7b9b      	ldrb	r3, [r3, #14]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_ZN12CommonSensor14IsInfoFilteredEv>:

bool CommonSensor::IsInfoFiltered()
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	return (this->now_filter_cnt_>= this->max_filter_cnt_);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7b5a      	ldrb	r2, [r3, #13]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7b1b      	ldrb	r3, [r3, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	bf2c      	ite	cs
 8001204:	2301      	movcs	r3, #1
 8001206:	2300      	movcc	r3, #0
 8001208:	b2db      	uxtb	r3, r3
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_ZN12CommonSensor13FilterCountUpEv>:

void CommonSensor::FilterCountUp()
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
	if(this->now_filter_cnt_< this->max_filter_cnt_) this->now_filter_cnt_++;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7b5a      	ldrb	r2, [r3, #13]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7b1b      	ldrb	r3, [r3, #12]
 8001226:	429a      	cmp	r2, r3
 8001228:	d205      	bcs.n	8001236 <_ZN12CommonSensor13FilterCountUpEv+0x20>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7b5b      	ldrb	r3, [r3, #13]
 800122e:	3301      	adds	r3, #1
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	735a      	strb	r2, [r3, #13]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <_ZN12CommonSensor19FilterStatusChangedEv>:

void CommonSensor::FilterStatusChanged(){this->now_filter_cnt_ = 0;}
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	735a      	strb	r2, [r3, #13]
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <_ZN12CommonSensor5DriveEv>:


bool CommonSensor::Drive()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	bool prev_val = this->state;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7b9b      	ldrb	r3, [r3, #14]
 8001268:	73fb      	strb	r3, [r7, #15]
	bool now_val = CheckSensorValue();
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ff90 	bl	8001190 <_ZN12CommonSensor16CheckSensorValueEv>
 8001270:	4603      	mov	r3, r0
 8001272:	73bb      	strb	r3, [r7, #14]


	//1. Check Error status
	if(prev_val != now_val)
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	7bbb      	ldrb	r3, [r7, #14]
 8001278:	429a      	cmp	r2, r3
 800127a:	d008      	beq.n	800128e <_ZN12CommonSensor5DriveEv+0x32>
	{
		FilterStatusChanged();
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ffe0 	bl	8001242 <_ZN12CommonSensor19FilterStatusChangedEv>
		this->output_ = prev_val;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	70da      	strb	r2, [r3, #3]
		return this->output_;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	78db      	ldrb	r3, [r3, #3]
 800128c:	e016      	b.n	80012bc <_ZN12CommonSensor5DriveEv+0x60>
	}

	//2. wait until state is stabled(normal or error)
	if(!IsInfoFiltered())
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffae 	bl	80011f0 <_ZN12CommonSensor14IsInfoFilteredEv>
 8001294:	4603      	mov	r3, r0
 8001296:	f083 0301 	eor.w	r3, r3, #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <_ZN12CommonSensor5DriveEv+0x56>
	{
		FilterCountUp();
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ffb8 	bl	8001216 <_ZN12CommonSensor13FilterCountUpEv>
		this->output_ = prev_val;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	70da      	strb	r2, [r3, #3]
		return this->output_;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	78db      	ldrb	r3, [r3, #3]
 80012b0:	e004      	b.n	80012bc <_ZN12CommonSensor5DriveEv+0x60>
	}

	this->output_ = now_val;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7bba      	ldrb	r2, [r7, #14]
 80012b6:	70da      	strb	r2, [r3, #3]
	return this->output_;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	78db      	ldrb	r3, [r3, #3]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_sbrk_r>:
    static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit;  // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <_sbrk_r+0x9c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10e      	bne.n	80012f4 <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 80012d6:	4a23      	ldr	r2, [pc, #140]	; (8001364 <_sbrk_r+0xa0>)
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <_sbrk_r+0xa4>)
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80012e0:	4a22      	ldr	r2, [pc, #136]	; (800136c <_sbrk_r+0xa8>)
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <_sbrk_r+0xa0>)
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <_sbrk_r+0xa4>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <_sbrk_r+0x9c>)
 80012f2:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 80012f4:	f012 fe3c 	bl	8013f70 <xTaskGetSchedulerState>
 80012f8:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d101      	bne.n	8001302 <_sbrk_r+0x3e>
 80012fe:	466b      	mov	r3, sp
 8001300:	e000      	b.n	8001304 <_sbrk_r+0x40>
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 8001304:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 8001306:	f012 fa59 	bl	80137bc <vTaskSuspendAll>
    char *previousHeapEnd = currentHeapEnd;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <_sbrk_r+0xb0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	60bb      	str	r3, [r7, #8]
    if (currentHeapEnd + incr > limit) {
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <_sbrk_r+0xb0>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	4413      	add	r3, r2
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	429a      	cmp	r2, r3
 800131c:	d207      	bcs.n	800132e <_sbrk_r+0x6a>
            // If you want to alert debugger or halt...
            // WARNING: brkpt instruction may prevent watchdog operation...
            while(1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	220c      	movs	r2, #12
 8001322:	601a      	str	r2, [r3, #0]
            DRN_EXIT_CRITICAL_SECTION(usis);
 8001324:	f012 fa58 	bl	80137d8 <xTaskResumeAll>
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 8001328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132c:	e014      	b.n	8001358 <_sbrk_r+0x94>
    }
    // 'incr' of memory is available: update accounting and return it.
    currentHeapEnd += incr;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <_sbrk_r+0xb0>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	4413      	add	r3, r2
 8001336:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <_sbrk_r+0xb0>)
 8001338:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <_sbrk_r+0xa8>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <_sbrk_r+0xa8>)
 8001344:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <_sbrk_r+0xb4>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	4413      	add	r3, r2
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <_sbrk_r+0xb4>)
 8001350:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 8001352:	f012 fa41 	bl	80137d8 <xTaskResumeAll>
    return (char *) previousHeapEnd;
 8001356:	68bb      	ldr	r3, [r7, #8]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2000020c 	.word	0x2000020c
 8001364:	20050000 	.word	0x20050000
 8001368:	2000c1b0 	.word	0x2000c1b0
 800136c:	20000208 	.word	0x20000208
 8001370:	2004fe00 	.word	0x2004fe00
 8001374:	20000008 	.word	0x20000008
 8001378:	20000210 	.word	0x20000210

0800137c <__malloc_lock>:
char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)     {
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
{
uint32_t ulCurrentInterrupt;
BaseType_t xReturn;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001384:	f3ef 8305 	mrs	r3, IPSR
 8001388:	613b      	str	r3, [r7, #16]

	if( ulCurrentInterrupt == 0 )
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <__malloc_lock+0x1a>
	{
		xReturn = pdFALSE;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e001      	b.n	800139a <__malloc_lock+0x1e>
	}
	else
	{
		xReturn = pdTRUE;
 8001396:	2301      	movs	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800139a:	68fb      	ldr	r3, [r7, #12]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 800139c:	2b00      	cmp	r3, #0
 800139e:	bf14      	ite	ne
 80013a0:	2301      	movne	r3, #1
 80013a2:	2300      	moveq	r3, #0
 80013a4:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 80013a6:	7dfb      	ldrb	r3, [r7, #23]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00c      	beq.n	80013c6 <__malloc_lock+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80013ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b0:	b672      	cpsid	i
 80013b2:	f383 8811 	msr	BASEPRI, r3
 80013b6:	f3bf 8f6f 	isb	sy
 80013ba:	f3bf 8f4f 	dsb	sy
 80013be:	b662      	cpsie	i
 80013c0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80013c2:	bf00      	nop
 80013c4:	e7fe      	b.n	80013c4 <__malloc_lock+0x48>
    vTaskSuspendAll();
 80013c6:	f012 f9f9 	bl	80137bc <vTaskSuspendAll>
  #endif
};
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <__malloc_unlock>:
void __malloc_unlock(struct _reent *r)   {
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    (void)xTaskResumeAll();
 80013da:	f012 f9fd 	bl	80137d8 <xTaskResumeAll>
  #endif
};
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f022 fc56 	bl	8023ca0 <malloc>
 80013f4:	4603      	mov	r3, r0
 80013f6:	60fb      	str	r3, [r7, #12]
    return p;
 80013f8:	68fb      	ldr	r3, [r7, #12]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
    free(pv);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f022 fc50 	bl	8023cb0 <free>
};
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_ZL16TcpServerInitSeqv>:

/**** Send RESPONSE every time the client sends some data ******/


static int TcpServerInitSeq()
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
	err_t err;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2010      	movs	r0, #16
 8001424:	f013 fa3c 	bl	80148a0 <netconn_new_with_proto_and_callback>
 8001428:	4603      	mov	r3, r0
 800142a:	4a14      	ldr	r2, [pc, #80]	; (800147c <_ZL16TcpServerInitSeqv+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

	if (conn == NULL)
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <_ZL16TcpServerInitSeqv+0x64>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d107      	bne.n	8001446 <_ZL16TcpServerInitSeqv+0x2e>
	{
		netconn_delete(conn);
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <_ZL16TcpServerInitSeqv+0x64>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f013 face 	bl	80149dc <netconn_delete>
		return -1;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001444:	e016      	b.n	8001474 <_ZL16TcpServerInitSeqv+0x5c>
	}

	/* Bind connection to the port number 8. */
	err = netconn_bind(conn, IP_ADDR_ANY, ServerPort);
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <_ZL16TcpServerInitSeqv+0x64>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	220a      	movs	r2, #10
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <_ZL16TcpServerInitSeqv+0x68>)
 800144e:	4618      	mov	r0, r3
 8001450:	f013 fae0 	bl	8014a14 <netconn_bind>
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]

	if (err != ERR_OK) return -1;
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <_ZL16TcpServerInitSeqv+0x4e>
 8001460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001464:	e006      	b.n	8001474 <_ZL16TcpServerInitSeqv+0x5c>

	/* Tell connection to go into listening mode. */
	netconn_listen(conn);
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <_ZL16TcpServerInitSeqv+0x64>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	21ff      	movs	r1, #255	; 0xff
 800146c:	4618      	mov	r0, r3
 800146e:	f013 fb41 	bl	8014af4 <netconn_listen_with_backlog>

	/*Successfully Initialized*/
	return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000214 	.word	0x20000214
 8001480:	08028af8 	.word	0x08028af8

08001484 <_ZL17TcpServerDriveSeqv>:

static int TcpServerDriveSeq()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af02      	add	r7, sp, #8
	err_t accept_err;

	/* Grab new connection. */
	accept_err = netconn_accept(conn, &newconn);
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <_ZL17TcpServerDriveSeqv+0xd8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4934      	ldr	r1, [pc, #208]	; (8001560 <_ZL17TcpServerDriveSeqv+0xdc>)
 8001490:	4618      	mov	r0, r3
 8001492:	f013 fb5b 	bl	8014b4c <netconn_accept>
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]

	/* Process the new connection. */
	if(accept_err == ERR_OK)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d157      	bne.n	8001552 <_ZL17TcpServerDriveSeqv+0xce>
	{
		/* receive the data from the client */
		while (netconn_recv(newconn, &buf) == ERR_OK)
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <_ZL17TcpServerDriveSeqv+0xdc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	492f      	ldr	r1, [pc, #188]	; (8001564 <_ZL17TcpServerDriveSeqv+0xe0>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f013 fd57 	bl	8014f5c <netconn_recv>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf0c      	ite	eq
 80014b4:	2301      	moveq	r3, #1
 80014b6:	2300      	movne	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d03f      	beq.n	800153e <_ZL17TcpServerDriveSeqv+0xba>
		{
			/* If there is some data remaining to be sent, the following process will continue */
			do
			{
				strncpy (msg, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 80014be:	4b29      	ldr	r3, [pc, #164]	; (8001564 <_ZL17TcpServerDriveSeqv+0xe0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6859      	ldr	r1, [r3, #4]
 80014c6:	4b27      	ldr	r3, [pc, #156]	; (8001564 <_ZL17TcpServerDriveSeqv+0xe0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	895b      	ldrh	r3, [r3, #10]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4825      	ldr	r0, [pc, #148]	; (8001568 <_ZL17TcpServerDriveSeqv+0xe4>)
 80014d2:	f022 fe7c 	bl	80241ce <strncpy>

				//for test debug
				strncpy (char_ethernet, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <_ZL17TcpServerDriveSeqv+0xe0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6859      	ldr	r1, [r3, #4]
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <_ZL17TcpServerDriveSeqv+0xe0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	895b      	ldrh	r3, [r3, #10]
 80014e6:	461a      	mov	r2, r3
 80014e8:	4820      	ldr	r0, [pc, #128]	; (800156c <_ZL17TcpServerDriveSeqv+0xe8>)
 80014ea:	f022 fe70 	bl	80241ce <strncpy>


				*/
				// Or modify the message received, so that we can send it back to the client
				//response
				int len = sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 80014ee:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <_ZL17TcpServerDriveSeqv+0xe4>)
 80014f0:	491f      	ldr	r1, [pc, #124]	; (8001570 <_ZL17TcpServerDriveSeqv+0xec>)
 80014f2:	4820      	ldr	r0, [pc, #128]	; (8001574 <_ZL17TcpServerDriveSeqv+0xf0>)
 80014f4:	f022 fe08 	bl	8024108 <siprintf>
 80014f8:	6038      	str	r0, [r7, #0]

				netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <_ZL17TcpServerDriveSeqv+0xdc>)
 80014fc:	6818      	ldr	r0, [r3, #0]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	2300      	movs	r3, #0
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	491b      	ldr	r1, [pc, #108]	; (8001574 <_ZL17TcpServerDriveSeqv+0xf0>)
 8001508:	f013 fdd0 	bl	80150ac <netconn_write_partly>
				memset (msg, '\0', 100);  // clear the buffer
 800150c:	2264      	movs	r2, #100	; 0x64
 800150e:	2100      	movs	r1, #0
 8001510:	4815      	ldr	r0, [pc, #84]	; (8001568 <_ZL17TcpServerDriveSeqv+0xe4>)
 8001512:	f022 fc0d 	bl	8023d30 <memset>
			}
			while (netbuf_next(buf) >0);
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <_ZL17TcpServerDriveSeqv+0xe0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f015 fcde 	bl	8016edc <netbuf_next>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	bfcc      	ite	gt
 8001526:	2301      	movgt	r3, #1
 8001528:	2300      	movle	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d000      	beq.n	8001532 <_ZL17TcpServerDriveSeqv+0xae>
			do
 8001530:	e7c5      	b.n	80014be <_ZL17TcpServerDriveSeqv+0x3a>

			netbuf_delete(buf);
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <_ZL17TcpServerDriveSeqv+0xe0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f015 fc66 	bl	8016e08 <netbuf_delete>
		while (netconn_recv(newconn, &buf) == ERR_OK)
 800153c:	e7b1      	b.n	80014a2 <_ZL17TcpServerDriveSeqv+0x1e>
		}
		/* Close connection and discard connection identifier. */
		netconn_close(newconn);
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <_ZL17TcpServerDriveSeqv+0xdc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f013 feb4 	bl	80152b0 <netconn_close>
		netconn_delete(newconn);
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <_ZL17TcpServerDriveSeqv+0xdc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f013 fa45 	bl	80149dc <netconn_delete>
	}
}
 8001552:	bf00      	nop
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000214 	.word	0x20000214
 8001560:	20000218 	.word	0x20000218
 8001564:	2000021c 	.word	0x2000021c
 8001568:	20000220 	.word	0x20000220
 800156c:	2000034c 	.word	0x2000034c
 8001570:	08025118 	.word	0x08025118
 8001574:	20000284 	.word	0x20000284

08001578 <_ZL15TcpServerThreadPv>:




static void TcpServerThread(void *arg)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	TcpServerInitSeq();
 8001580:	f7ff ff4a 	bl	8001418 <_ZL16TcpServerInitSeqv>

	TcpServerDriveSeq();
 8001584:	f7ff ff7e 	bl	8001484 <_ZL17TcpServerDriveSeqv>

	//if out of TcpServerDriveSeq(); it means error occur
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_Z13TcpServerInitv>:



void TcpServerInit(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af02      	add	r7, sp, #8
  sys_thread_new("TcpServerThread", TcpServerThread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001596:	2300      	movs	r3, #0
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800159e:	2200      	movs	r2, #0
 80015a0:	4903      	ldr	r1, [pc, #12]	; (80015b0 <_Z13TcpServerInitv+0x20>)
 80015a2:	4804      	ldr	r0, [pc, #16]	; (80015b4 <_Z13TcpServerInitv+0x24>)
 80015a4:	f021 f9f2 	bl	802298c <sys_thread_new>
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	08001579 	.word	0x08001579
 80015b4:	08025138 	.word	0x08025138

080015b8 <_Z7udpsendPc>:
/*------------------------------------Client-----------------------------------------*/
/*-----------------------------------------------------------------------------------*/

/*-------UDP Send function to send the data to the server-------------*/
void udpsend (char *data)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	buf = netbuf_new();   // Create a new netbuf
 80015c0:	f015 fc0e 	bl	8016de0 <netbuf_new>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a0f      	ldr	r2, [pc, #60]	; (8001604 <_Z7udpsendPc+0x4c>)
 80015c8:	6013      	str	r3, [r2, #0]
	netbuf_ref(buf, data, strlen(data));  // refer the netbuf to the data to be sent
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <_Z7udpsendPc+0x4c>)
 80015cc:	681c      	ldr	r4, [r3, #0]
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7fe fe1e 	bl	8000210 <strlen>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4620      	mov	r0, r4
 80015de:	f015 fc33 	bl	8016e48 <netbuf_ref>
	netconn_send(conn,buf);  // send the netbuf to the client
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <_Z7udpsendPc+0x50>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a07      	ldr	r2, [pc, #28]	; (8001604 <_Z7udpsendPc+0x4c>)
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f013 fd2f 	bl	8015050 <netconn_send>
	netbuf_delete(buf);  // delete the netbuf
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <_Z7udpsendPc+0x4c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f015 fc06 	bl	8016e08 <netbuf_delete>
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	200003b4 	.word	0x200003b4
 8001608:	200003b0 	.word	0x200003b0

0800160c <_ZL15UdpClientThreadPv>:



static void UdpClientThread(void *arg)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	err_t err, recv_err;
	ip_addr_t dest_addr;
	/* Create a new connection identifier */
	conn = netconn_new(NETCONN_UDP);
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	2020      	movs	r0, #32
 800161a:	f013 f941 	bl	80148a0 <netconn_new_with_proto_and_callback>
 800161e:	4603      	mov	r3, r0
 8001620:	4a2d      	ldr	r2, [pc, #180]	; (80016d8 <_ZL15UdpClientThreadPv+0xcc>)
 8001622:	6013      	str	r3, [r2, #0]

	if (conn!= NULL)
 8001624:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <_ZL15UdpClientThreadPv+0xcc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d04c      	beq.n	80016c6 <_ZL15UdpClientThreadPv+0xba>
	{
		/* Bind connection to the port 7 */
		err = netconn_bind(conn, IP_ADDR_ANY, ClientPort);
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <_ZL15UdpClientThreadPv+0xcc>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2208      	movs	r2, #8
 8001632:	492a      	ldr	r1, [pc, #168]	; (80016dc <_ZL15UdpClientThreadPv+0xd0>)
 8001634:	4618      	mov	r0, r3
 8001636:	f013 f9ed 	bl	8014a14 <netconn_bind>
 800163a:	4603      	mov	r3, r0
 800163c:	73fb      	strb	r3, [r7, #15]
		if (err == ERR_OK)
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d144      	bne.n	80016d0 <_ZL15UdpClientThreadPv+0xc4>
		{
			/* The desination IP adress of the computer */
			IP_ADDR4(&dest_addr, 192, 168, 1, 25);
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <_ZL15UdpClientThreadPv+0xd4>)
 8001648:	60bb      	str	r3, [r7, #8]
			/* connect to the destination (server) at port 8 */
			err = netconn_connect(conn, &dest_addr, ServerPort);
 800164a:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <_ZL15UdpClientThreadPv+0xcc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f107 0108 	add.w	r1, r7, #8
 8001652:	2207      	movs	r2, #7
 8001654:	4618      	mov	r0, r3
 8001656:	f013 fa15 	bl	8014a84 <netconn_connect>
 800165a:	4603      	mov	r3, r0
 800165c:	73fb      	strb	r3, [r7, #15]
			if (err == ERR_OK)
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d134      	bne.n	80016d0 <_ZL15UdpClientThreadPv+0xc4>
			{
				/* Got into infinite loop after initialisation */
				for (;;)
				{
						/* Receive data from the server */
						recv_err = netconn_recv(conn, &rxbuf);
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <_ZL15UdpClientThreadPv+0xcc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	491e      	ldr	r1, [pc, #120]	; (80016e4 <_ZL15UdpClientThreadPv+0xd8>)
 800166c:	4618      	mov	r0, r3
 800166e:	f013 fc75 	bl	8014f5c <netconn_recv>
 8001672:	4603      	mov	r3, r0
 8001674:	73bb      	strb	r3, [r7, #14]
						if (recv_err == ERR_OK)
 8001676:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f3      	bne.n	8001666 <_ZL15UdpClientThreadPv+0x5a>
						{
							strncpy (msg, (char *) rxbuf->p->payload, rxbuf->p->len);  // get the message from the client
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <_ZL15UdpClientThreadPv+0xd8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6859      	ldr	r1, [r3, #4]
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <_ZL15UdpClientThreadPv+0xd8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	895b      	ldrh	r3, [r3, #10]
 800168e:	461a      	mov	r2, r3
 8001690:	4815      	ldr	r0, [pc, #84]	; (80016e8 <_ZL15UdpClientThreadPv+0xdc>)
 8001692:	f022 fd9c 	bl	80241ce <strncpy>
							/* copy the data into our buffer (smsg) */
							sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 8001696:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <_ZL15UdpClientThreadPv+0xdc>)
 8001698:	4914      	ldr	r1, [pc, #80]	; (80016ec <_ZL15UdpClientThreadPv+0xe0>)
 800169a:	4815      	ldr	r0, [pc, #84]	; (80016f0 <_ZL15UdpClientThreadPv+0xe4>)
 800169c:	f022 fd34 	bl	8024108 <siprintf>
							udpsend(smsg);  // send the message to the server
 80016a0:	4813      	ldr	r0, [pc, #76]	; (80016f0 <_ZL15UdpClientThreadPv+0xe4>)
 80016a2:	f7ff ff89 	bl	80015b8 <_Z7udpsendPc>
							netbuf_delete(rxbuf);  // delete the netbuf
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <_ZL15UdpClientThreadPv+0xd8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f015 fbac 	bl	8016e08 <netbuf_delete>
							memset(msg, '\0', sizeof(msg));
 80016b0:	2264      	movs	r2, #100	; 0x64
 80016b2:	2100      	movs	r1, #0
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <_ZL15UdpClientThreadPv+0xdc>)
 80016b6:	f022 fb3b 	bl	8023d30 <memset>
							memset(msg, '\0', sizeof(smsg));
 80016ba:	22c8      	movs	r2, #200	; 0xc8
 80016bc:	2100      	movs	r1, #0
 80016be:	480a      	ldr	r0, [pc, #40]	; (80016e8 <_ZL15UdpClientThreadPv+0xdc>)
 80016c0:	f022 fb36 	bl	8023d30 <memset>
						recv_err = netconn_recv(conn, &rxbuf);
 80016c4:	e7cf      	b.n	8001666 <_ZL15UdpClientThreadPv+0x5a>
		}
	}

	else
	{
		netconn_delete(conn);
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <_ZL15UdpClientThreadPv+0xcc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f013 f986 	bl	80149dc <netconn_delete>
	}
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200003b0 	.word	0x200003b0
 80016dc:	08028af8 	.word	0x08028af8
 80016e0:	1901a8c0 	.word	0x1901a8c0
 80016e4:	200003b8 	.word	0x200003b8
 80016e8:	200003bc 	.word	0x200003bc
 80016ec:	080251a8 	.word	0x080251a8
 80016f0:	20000420 	.word	0x20000420

080016f4 <_Z13UdpClientInitv>:
	}
}
*/

void UdpClientInit(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af02      	add	r7, sp, #8
	//sys_thread_new("udpsend_thread", udpsend_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
	sys_thread_new("UdpClientThread", UdpClientThread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 80016fa:	2300      	movs	r3, #0
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001702:	2200      	movs	r2, #0
 8001704:	4903      	ldr	r1, [pc, #12]	; (8001714 <_Z13UdpClientInitv+0x20>)
 8001706:	4804      	ldr	r0, [pc, #16]	; (8001718 <_Z13UdpClientInitv+0x24>)
 8001708:	f021 f940 	bl	802298c <sys_thread_new>
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	0800160d 	.word	0x0800160d
 8001718:	080251c8 	.word	0x080251c8

0800171c <init_stm32f746>:




void init_stm32f746()
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8001720:	f000 faaa 	bl	8001c78 <MX_GPIO_Init>
	MX_CAN1_Init();
 8001724:	f000 f88c 	bl	8001840 <MX_CAN1_Init>
	MX_FMC_Init();
 8001728:	f000 fa3e 	bl	8001ba8 <MX_FMC_Init>
	MX_UART4_Init();
 800172c:	f000 f934 	bl	8001998 <MX_UART4_Init>
	MX_USART1_UART_Init();
 8001730:	f000 f99c 	bl	8001a6c <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8001734:	f000 f9ce 	bl	8001ad4 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8001738:	f000 fa00 	bl	8001b3c <MX_USART6_UART_Init>
	MX_UART5_Init();
 800173c:	f000 f960 	bl	8001a00 <MX_UART5_Init>
	MX_TIM7_Init();
 8001740:	f000 f8ea 	bl	8001918 <MX_TIM7_Init>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b094      	sub	sp, #80	; 0x50
 800174c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174e:	f107 0320 	add.w	r3, r7, #32
 8001752:	2230      	movs	r2, #48	; 0x30
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f022 faea 	bl	8023d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800176c:	4b32      	ldr	r3, [pc, #200]	; (8001838 <SystemClock_Config+0xf0>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	4a31      	ldr	r2, [pc, #196]	; (8001838 <SystemClock_Config+0xf0>)
 8001772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001776:	6413      	str	r3, [r2, #64]	; 0x40
 8001778:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <SystemClock_Config+0xf0>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001784:	4b2d      	ldr	r3, [pc, #180]	; (800183c <SystemClock_Config+0xf4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a2c      	ldr	r2, [pc, #176]	; (800183c <SystemClock_Config+0xf4>)
 800178a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b2a      	ldr	r3, [pc, #168]	; (800183c <SystemClock_Config+0xf4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800179c:	2301      	movs	r3, #1
 800179e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a6:	2302      	movs	r3, #2
 80017a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017b0:	2319      	movs	r3, #25
 80017b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80017b4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80017b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017be:	2302      	movs	r3, #2
 80017c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c2:	f107 0320 	add.w	r3, r7, #32
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00c f864 	bl	800d894 <HAL_RCC_OscConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	bf14      	ite	ne
 80017d2:	2301      	movne	r3, #1
 80017d4:	2300      	moveq	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017dc:	f000 fb4c 	bl	8001e78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017e0:	f00c f808 	bl	800d7f4 <HAL_PWREx_EnableOverDrive>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf14      	ite	ne
 80017ea:	2301      	movne	r3, #1
 80017ec:	2300      	moveq	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80017f4:	f000 fb40 	bl	8001e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f8:	230f      	movs	r3, #15
 80017fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fc:	2302      	movs	r3, #2
 80017fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001804:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800180a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	2107      	movs	r1, #7
 8001816:	4618      	mov	r0, r3
 8001818:	f00c fae0 	bl	800dddc <HAL_RCC_ClockConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800182c:	f000 fb24 	bl	8001e78 <Error_Handler>
  }
}
 8001830:	bf00      	nop
 8001832:	3750      	adds	r7, #80	; 0x50
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	40007000 	.word	0x40007000

08001840 <MX_CAN1_Init>:
/**
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN1_Init(void){
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001844:	4b31      	ldr	r3, [pc, #196]	; (800190c <MX_CAN1_Init+0xcc>)
 8001846:	4a32      	ldr	r2, [pc, #200]	; (8001910 <MX_CAN1_Init+0xd0>)
 8001848:	601a      	str	r2, [r3, #0]

  //125 ~ 500khz
  //hcan1.Init.Prescaler = 3;//1000khz -> 3, 15, 2
  //hcan1.Init.Prescaler = 6;//500khz -> 6, 15, 2
  hcan1.Init.Prescaler = 12;//250khz -> 12, 15, 2
 800184a:	4b30      	ldr	r3, [pc, #192]	; (800190c <MX_CAN1_Init+0xcc>)
 800184c:	220c      	movs	r2, #12
 800184e:	605a      	str	r2, [r3, #4]
  //hcan1.Init.Prescaler = 27;//125khz -> 27,16,13
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001850:	4b2e      	ldr	r3, [pc, #184]	; (800190c <MX_CAN1_Init+0xcc>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <MX_CAN1_Init+0xcc>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <MX_CAN1_Init+0xcc>)
 800185e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001862:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001864:	4b29      	ldr	r3, [pc, #164]	; (800190c <MX_CAN1_Init+0xcc>)
 8001866:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800186a:	615a      	str	r2, [r3, #20]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
*/

  hcan1.Init.TimeTriggeredMode = DISABLE;
 800186c:	4b27      	ldr	r3, [pc, #156]	; (800190c <MX_CAN1_Init+0xcc>)
 800186e:	2200      	movs	r2, #0
 8001870:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <MX_CAN1_Init+0xcc>)
 8001874:	2200      	movs	r2, #0
 8001876:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001878:	4b24      	ldr	r3, [pc, #144]	; (800190c <MX_CAN1_Init+0xcc>)
 800187a:	2200      	movs	r2, #0
 800187c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <MX_CAN1_Init+0xcc>)
 8001880:	2200      	movs	r2, #0
 8001882:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <MX_CAN1_Init+0xcc>)
 8001886:	2200      	movs	r2, #0
 8001888:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <MX_CAN1_Init+0xcc>)
 800188c:	2200      	movs	r2, #0
 800188e:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan1) != HAL_OK){
 8001890:	481e      	ldr	r0, [pc, #120]	; (800190c <MX_CAN1_Init+0xcc>)
 8001892:	f009 fb29 	bl	800aee8 <HAL_CAN_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_CAN1_Init+0x6a>
    Error_Handler();
 80018a6:	f000 fae7 	bl	8001e78 <Error_Handler>
  }


  sFilterConfig.FilterBank = 0;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <MX_CAN1_Init+0xd4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <MX_CAN1_Init+0xd4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MX_CAN1_Init+0xd4>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x1fff;
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <MX_CAN1_Init+0xd4>)
 80018be:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80018c2:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0xffff;
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <MX_CAN1_Init+0xd4>)
 80018c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ca:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;             //maximum range of accepting id
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <MX_CAN1_Init+0xd4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;				//minimum range of accepting id
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <MX_CAN1_Init+0xd4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_CAN1_Init+0xd4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <MX_CAN1_Init+0xd4>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;   //14
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <MX_CAN1_Init+0xd4>)
 80018e6:	220e      	movs	r2, #14
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24


  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80018ea:	490a      	ldr	r1, [pc, #40]	; (8001914 <MX_CAN1_Init+0xd4>)
 80018ec:	4807      	ldr	r0, [pc, #28]	; (800190c <MX_CAN1_Init+0xcc>)
 80018ee:	f009 fbf7 	bl	800b0e0 <HAL_CAN_ConfigFilter>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf14      	ite	ne
 80018f8:	2301      	movne	r3, #1
 80018fa:	2300      	moveq	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_CAN1_Init+0xc6>
  {
    /*Filter configuration Error*/
    Error_Handler();
 8001902:	f000 fab9 	bl	8001e78 <Error_Handler>

  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200004e8 	.word	0x200004e8
 8001910:	40006400 	.word	0x40006400
 8001914:	20000510 	.word	0x20000510

08001918 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM7_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <MX_TIM7_Init+0x78>)
 800192a:	4a1a      	ldr	r2, [pc, #104]	; (8001994 <MX_TIM7_Init+0x7c>)
 800192c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <MX_TIM7_Init+0x78>)
 8001930:	226b      	movs	r2, #107	; 0x6b
 8001932:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b16      	ldr	r3, [pc, #88]	; (8001990 <MX_TIM7_Init+0x78>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <MX_TIM7_Init+0x78>)
 800193c:	2263      	movs	r2, #99	; 0x63
 800193e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <MX_TIM7_Init+0x78>)
 8001942:	2280      	movs	r2, #128	; 0x80
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001946:	4812      	ldr	r0, [pc, #72]	; (8001990 <MX_TIM7_Init+0x78>)
 8001948:	f00d f898 	bl	800ea7c <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	bf14      	ite	ne
 8001952:	2301      	movne	r3, #1
 8001954:	2300      	moveq	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM7_Init+0x48>
  {
    Error_Handler();
 800195c:	f000 fa8c 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	4619      	mov	r1, r3
 800196c:	4808      	ldr	r0, [pc, #32]	; (8001990 <MX_TIM7_Init+0x78>)
 800196e:	f00d fb3d 	bl	800efec <HAL_TIMEx_MasterConfigSynchronization>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	bf14      	ite	ne
 8001978:	2301      	movne	r3, #1
 800197a:	2300      	moveq	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 8001982:	f000 fa79 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000538 	.word	0x20000538
 8001994:	40001400 	.word	0x40001400

08001998 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART4_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <MX_UART4_Init+0x60>)
 800199e:	4a17      	ldr	r2, [pc, #92]	; (80019fc <MX_UART4_Init+0x64>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <MX_UART4_Init+0x60>)
 80019a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <MX_UART4_Init+0x60>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_UART4_Init+0x60>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <MX_UART4_Init+0x60>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_UART4_Init+0x60>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <MX_UART4_Init+0x60>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <MX_UART4_Init+0x60>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <MX_UART4_Init+0x60>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <MX_UART4_Init+0x60>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019da:	4807      	ldr	r0, [pc, #28]	; (80019f8 <MX_UART4_Init+0x60>)
 80019dc:	f00d fbb2 	bl	800f144 <HAL_UART_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf14      	ite	ne
 80019e6:	2301      	movne	r3, #1
 80019e8:	2300      	moveq	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 80019f0:	f000 fa42 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000584 	.word	0x20000584
 80019fc:	40004c00 	.word	0x40004c00

08001a00 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART5_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_UART5_Init+0x64>)
 8001a06:	4a18      	ldr	r2, [pc, #96]	; (8001a68 <MX_UART5_Init+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <MX_UART5_Init+0x64>)
 8001a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a10:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_UART5_Init+0x64>)
 8001a14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a18:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_UART5_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <MX_UART5_Init+0x64>)
 8001a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a26:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_UART5_Init+0x64>)
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <MX_UART5_Init+0x64>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <MX_UART5_Init+0x64>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <MX_UART5_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <MX_UART5_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a46:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_UART5_Init+0x64>)
 8001a48:	f00d fb7c 	bl	800f144 <HAL_UART_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_UART5_Init+0x60>
  {
    Error_Handler();
 8001a5c:	f000 fa0c 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000060c 	.word	0x2000060c
 8001a68:	40005000 	.word	0x40005000

08001a6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <MX_USART1_UART_Init+0x60>)
 8001a72:	4a17      	ldr	r2, [pc, #92]	; (8001ad0 <MX_USART1_UART_Init+0x64>)
 8001a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_USART1_UART_Init+0x60>)
 8001a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_USART1_UART_Init+0x60>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_USART1_UART_Init+0x60>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <MX_USART1_UART_Init+0x60>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_USART1_UART_Init+0x60>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <MX_USART1_UART_Init+0x60>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_USART1_UART_Init+0x60>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <MX_USART1_UART_Init+0x60>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_USART1_UART_Init+0x60>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aae:	4807      	ldr	r0, [pc, #28]	; (8001acc <MX_USART1_UART_Init+0x60>)
 8001ab0:	f00d fb48 	bl	800f144 <HAL_UART_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bf14      	ite	ne
 8001aba:	2301      	movne	r3, #1
 8001abc:	2300      	moveq	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001ac4:	f000 f9d8 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000694 	.word	0x20000694
 8001ad0:	40011000 	.word	0x40011000

08001ad4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <MX_USART3_UART_Init+0x60>)
 8001ada:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <MX_USART3_UART_Init+0x64>)
 8001adc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <MX_USART3_UART_Init+0x60>)
 8001ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_USART3_UART_Init+0x60>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_USART3_UART_Init+0x60>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <MX_USART3_UART_Init+0x60>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_USART3_UART_Init+0x60>)
 8001afa:	220c      	movs	r2, #12
 8001afc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <MX_USART3_UART_Init+0x60>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_USART3_UART_Init+0x60>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <MX_USART3_UART_Init+0x60>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_USART3_UART_Init+0x60>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b16:	4807      	ldr	r0, [pc, #28]	; (8001b34 <MX_USART3_UART_Init+0x60>)
 8001b18:	f00d fb14 	bl	800f144 <HAL_UART_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8001b2c:	f000 f9a4 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	2000071c 	.word	0x2000071c
 8001b38:	40004800 	.word	0x40004800

08001b3c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART6_UART_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <MX_USART6_UART_Init+0x64>)
 8001b42:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <MX_USART6_UART_Init+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_USART6_UART_Init+0x64>)
 8001b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_USART6_UART_Init+0x64>)
 8001b50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b54:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_USART6_UART_Init+0x64>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <MX_USART6_UART_Init+0x64>)
 8001b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_USART6_UART_Init+0x64>)
 8001b66:	220c      	movs	r2, #12
 8001b68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <MX_USART6_UART_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_USART6_UART_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <MX_USART6_UART_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_USART6_UART_Init+0x64>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b82:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <MX_USART6_UART_Init+0x64>)
 8001b84:	f00d fade 	bl	800f144 <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf14      	ite	ne
 8001b8e:	2301      	movne	r3, #1
 8001b90:	2300      	moveq	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_USART6_UART_Init+0x60>
  {
    Error_Handler();
 8001b98:	f000 f96e 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200007a4 	.word	0x200007a4
 8001ba4:	40011400 	.word	0x40011400

08001ba8 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	615a      	str	r2, [r3, #20]
 8001bbe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001bc2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001bc6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001bca:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <MX_FMC_Init+0xcc>)
 8001bcc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001bce:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001bdc:	2204      	movs	r2, #4
 8001bde:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001be0:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001be2:	2210      	movs	r2, #16
 8001be4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001be6:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001bec:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001c1e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c22:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001c2e:	230f      	movs	r3, #15
 8001c30:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8001c32:	2304      	movs	r3, #4
 8001c34:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 4;
 8001c36:	2304      	movs	r3, #4
 8001c38:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001c3a:	2310      	movs	r3, #16
 8001c3c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001c3e:	2311      	movs	r3, #17
 8001c40:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4808      	ldr	r0, [pc, #32]	; (8001c70 <MX_FMC_Init+0xc8>)
 8001c4e:	f00c fecd 	bl	800e9ec <HAL_SRAM_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf14      	ite	ne
 8001c58:	2301      	movne	r3, #1
 8001c5a:	2300      	moveq	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_FMC_Init+0xbe>
  {
    Error_Handler( );
 8001c62:	f000 f909 	bl	8001e78 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001c66:	bf00      	nop
 8001c68:	3720      	adds	r7, #32
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	2000082c 	.word	0x2000082c
 8001c74:	a0000104 	.word	0xa0000104

08001c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08e      	sub	sp, #56	; 0x38
 8001c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
 8001c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c8e:	4b6b      	ldr	r3, [pc, #428]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a6a      	ldr	r2, [pc, #424]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001c94:	f043 0310 	orr.w	r3, r3, #16
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b68      	ldr	r3, [pc, #416]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	623b      	str	r3, [r7, #32]
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca6:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a64      	ldr	r2, [pc, #400]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b62      	ldr	r3, [pc, #392]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a5e      	ldr	r2, [pc, #376]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001cc4:	f043 0320 	orr.w	r3, r3, #32
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b5c      	ldr	r3, [pc, #368]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd6:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a58      	ldr	r2, [pc, #352]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a52      	ldr	r2, [pc, #328]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	4b4d      	ldr	r3, [pc, #308]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a4c      	ldr	r2, [pc, #304]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d1e:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a46      	ldr	r2, [pc, #280]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d36:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a40      	ldr	r2, [pc, #256]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <MX_GPIO_Init+0x1c4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8001d54:	483a      	ldr	r0, [pc, #232]	; (8001e40 <MX_GPIO_Init+0x1c8>)
 8001d56:	f00b fd33 	bl	800d7c0 <HAL_GPIO_WritePin>
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|BUZZER_Pin
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001d60:	4838      	ldr	r0, [pc, #224]	; (8001e44 <MX_GPIO_Init+0x1cc>)
 8001d62:	f00b fd2d 	bl	800d7c0 <HAL_GPIO_WritePin>
                          |SLED1_Pin|SLED2_Pin|SLED3_Pin|SLED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCX512_RST_Pin|MCX512_EMG_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001d6c:	4836      	ldr	r0, [pc, #216]	; (8001e48 <MX_GPIO_Init+0x1d0>)
 8001d6e:	f00b fd27 	bl	800d7c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI18_Pin DI19_Pin DI20_Pin DI_EMG1_Pin
                           DI_EMG2_Pin DI16_Pin DI17_Pin */
  GPIO_InitStruct.Pin = DI18_Pin|DI19_Pin|DI20_Pin|DI_EMG1_Pin
 8001d72:	237f      	movs	r3, #127	; 0x7f
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI_EMG2_Pin|DI16_Pin|DI17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d82:	4619      	mov	r1, r3
 8001d84:	4831      	ldr	r0, [pc, #196]	; (8001e4c <MX_GPIO_Init+0x1d4>)
 8001d86:	f00b fb57 	bl	800d438 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_INT0_Pin MCX512_INT1_Pin */
  GPIO_InitStruct.Pin = MCX512_INT0_Pin|MCX512_INT1_Pin;
 8001d8a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	482a      	ldr	r0, [pc, #168]	; (8001e48 <MX_GPIO_Init+0x1d0>)
 8001da0:	f00b fb4a 	bl	800d438 <HAL_GPIO_Init>

  /*Configure GPIO pins : CO1_Pin CO2_Pin LED1_R_Pin LED1_G_Pin
                           LED1_B_Pin LED2_R_Pin LED2_G_Pin LED2_B_Pin
                           DO1_Pin DO2_Pin DO3_Pin DO4_Pin */
  GPIO_InitStruct.Pin = CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 8001da4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4820      	ldr	r0, [pc, #128]	; (8001e40 <MX_GPIO_Init+0x1c8>)
 8001dbe:	f00b fb3b 	bl	800d438 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART5_DIR_Pin UART6_DIR_Pin UART4_DIR_Pin SLED1_Pin
                           SLED2_Pin SLED3_Pin SLED4_Pin */
  GPIO_InitStruct.Pin = UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|SLED1_Pin
 8001dc2:	f240 33c7 	movw	r3, #967	; 0x3c7
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SLED2_Pin|SLED3_Pin|SLED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd8:	4619      	mov	r1, r3
 8001dda:	481a      	ldr	r0, [pc, #104]	; (8001e44 <MX_GPIO_Init+0x1cc>)
 8001ddc:	f00b fb2c 	bl	800d438 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI5_Pin DI6_Pin DI7_Pin DI8_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin
                           DI13_Pin DI14_Pin DI15_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8001de0:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin
                          |DI13_Pin|DI14_Pin|DI15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df2:	4619      	mov	r1, r3
 8001df4:	4816      	ldr	r0, [pc, #88]	; (8001e50 <MX_GPIO_Init+0x1d8>)
 8001df6:	f00b fb1f 	bl	800d438 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_RST_Pin MCX512_EMG_Pin */
  GPIO_InitStruct.Pin = MCX512_RST_Pin|MCX512_EMG_Pin;
 8001dfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e10:	4619      	mov	r1, r3
 8001e12:	480d      	ldr	r0, [pc, #52]	; (8001e48 <MX_GPIO_Init+0x1d0>)
 8001e14:	f00b fb10 	bl	800d438 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001e18:	2320      	movs	r3, #32
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e24:	2302      	movs	r3, #2
 8001e26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_GPIO_Init+0x1cc>)
 8001e30:	f00b fb02 	bl	800d438 <HAL_GPIO_Init>

}
 8001e34:	bf00      	nop
 8001e36:	3738      	adds	r7, #56	; 0x38
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40021400 	.word	0x40021400
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40021800 	.word	0x40021800

08001e54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e66:	f008 fffb 	bl	800ae60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40001000 	.word	0x40001000

08001e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
}
 8001e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <Error_Handler+0x8>

08001e82 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fd4f 	bl	8002946 <_ZNSaI23CAN_WData_HandleTypeDefED1Ev>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fd32 	bl	8002926 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ffeb 	bl	8001eb2 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fd79 	bl	80029e6 <_ZNSaI23CAN_RData_HandleTypeDefED1Ev>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>:
      _Vector_base() = default;
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fd5c 	bl	80029c6 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>:
      vector() = default;
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ffeb 	bl	8001efe <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <_ZN4BG95C1EP19__CAN_HandleTypeDef>:

#include <lift_motor/bg95.h>

// TODO Auto-generated constructor stub

BG95::BG95(CAN_HandleTypeDef *hcanx)
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <_ZN4BG95C1EP19__CAN_HandleTypeDef+0x88>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	227f      	movs	r2, #127	; 0x7f
 8001f4e:	811a      	strh	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	615a      	str	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f5c:	619a      	str	r2, [r3, #24]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f64:	61da      	str	r2, [r3, #28]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f6c:	621a      	str	r2, [r3, #32]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3350      	adds	r3, #80	; 0x50
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff9a 	bl	8001ecc <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	335c      	adds	r3, #92	; 0x5c
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff95 	bl	8001ecc <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3368      	adds	r3, #104	; 0x68
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ffb6 	bl	8001f18 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>
{
	this->hcanx_ = hcanx;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
}
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	08028978 	.word	0x08028978

08001fc0 <_ZN4BG95D1Ev>:
	//this->Txid_ = Txid;
	//this->Rxid_ = Rxid;
}

// TODO Auto-generated destructor stub.
BG95::~BG95()
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <_ZN4BG95D1Ev+0x3c>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	601a      	str	r2, [r3, #0]
{
	//if you using heap memory, delete all in this function
	HAL_CAN_DeInitialization();
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fc28 	bl	8002824 <_ZN4BG9524HAL_CAN_DeInitializationEv>
BG95::~BG95()
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3368      	adds	r3, #104	; 0x68
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fd29 	bl	8002a30 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	335c      	adds	r3, #92	; 0x5c
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fcd4 	bl	8002990 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3350      	adds	r3, #80	; 0x50
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fccf 	bl	8002990 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
}
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	08028978 	.word	0x08028978

08002000 <_ZN4BG95D0Ev>:
BG95::~BG95()
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
}
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ffd9 	bl	8001fc0 <_ZN4BG95D1Ev>
 800200e:	2174      	movs	r1, #116	; 0x74
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f020 fcff 	bl	8022a14 <_ZdlPvj>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <_ZN4BG9519TransmitSendRequestEv>:


//--------------------------------------------------------------------send or read function
uint16_t BG95::TransmitSendRequest()
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b091      	sub	sp, #68	; 0x44
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	CAN_WData_HandleTypeDef temp_DATA = {0};
 8002028:	4b4f      	ldr	r3, [pc, #316]	; (8002168 <_ZN4BG9519TransmitSendRequestEv+0x148>)
 800202a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800202e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002030:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = {0,};
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox;
	uint8_t state = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if(!(AsyncRequestQueue.empty())) {temp_DATA =  AsyncRequestQueue.front();}
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3350      	adds	r3, #80	; 0x50
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fd0d 	bl	8002a66 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 800204c:	4603      	mov	r3, r0
 800204e:	f083 0301 	eor.w	r3, r3, #1
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00b      	beq.n	8002070 <_ZN4BG9519TransmitSendRequestEv+0x50>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3350      	adds	r3, #80	; 0x50
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fd1d 	bl	8002a9c <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>
 8002062:	4603      	mov	r3, r0
 8002064:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002068:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800206a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800206e:	e015      	b.n	800209c <_ZN4BG9519TransmitSendRequestEv+0x7c>
	else if(!(RequestQueue.empty())) {temp_DATA =  RequestQueue.front();}
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	335c      	adds	r3, #92	; 0x5c
 8002074:	4618      	mov	r0, r3
 8002076:	f000 fcf6 	bl	8002a66 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 800207a:	4603      	mov	r3, r0
 800207c:	f083 0301 	eor.w	r3, r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <_ZN4BG9519TransmitSendRequestEv+0x7c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	335c      	adds	r3, #92	; 0x5c
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fd06 	bl	8002a9c <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>
 8002090:	4603      	mov	r3, r0
 8002092:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002096:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Configure Transmission process */
	TxHeader.StdId = this->nodeid_ + temp_DATA.txid_;                 // Standard Identifier, 0 ~ 0x7FF
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	891b      	ldrh	r3, [r3, #8]
 80020a0:	461a      	mov	r2, r3
 80020a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a4:	4413      	add	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]
	TxHeader.ExtId = 0x01;                							  // Extended Identifier, 0 ~ 0x1FFFFFFF
 80020a8:	2301      	movs	r3, #1
 80020aa:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;          							  // frame type, DATA or REMOTE
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
	TxHeader.IDE = CAN_ID_STD;            							  // identifier type, STD or EXT
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
	TxHeader.DLC = temp_DATA.data_length_;                   	      // data length, 0 ~ 8 byte
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.TransmitGlobalTime = DISABLE;  					      // timestamp counter capture.
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	/* Set the data to be transmitted */
	std::copy(temp_DATA.write_Data_Byte_, temp_DATA.write_Data_Byte_ + temp_DATA.data_length_, TxData);
 80020be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c0:	461a      	mov	r2, r3
 80020c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020c6:	3308      	adds	r3, #8
 80020c8:	1899      	adds	r1, r3, r2
 80020ca:	f107 020c 	add.w	r2, r7, #12
 80020ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d2:	3308      	adds	r3, #8
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fcf4 	bl	8002ac2 <_ZSt4copyIPhS0_ET0_T_S2_S1_>

	/*request transmission of a message*/
	state = HAL_CANTransmit(this->hcanx_, &TxHeader, (unsigned char*)TxData,  &TxMailbox);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6858      	ldr	r0, [r3, #4]
 80020de:	f107 0308 	add.w	r3, r7, #8
 80020e2:	f107 020c 	add.w	r2, r7, #12
 80020e6:	f107 0114 	add.w	r1, r7, #20
 80020ea:	f007 fef1 	bl	8009ed0 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* Monitor the Tx mailboxes availability until at least one Tx mailbox is free*/
	while(HAL_CAN_GetTxMailboxesFreeLevel(this->hcanx_) != 3);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f009 fa2e 	bl	800b55a <HAL_CAN_GetTxMailboxesFreeLevel>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b03      	cmp	r3, #3
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d000      	beq.n	8002110 <_ZN4BG9519TransmitSendRequestEv+0xf0>
 800210e:	e7f1      	b.n	80020f4 <_ZN4BG9519TransmitSendRequestEv+0xd4>

	//waiting for message to leave
	while((HAL_CAN_IsTxMessagePending((this->hcanx_) , TxMailbox)));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f009 fa53 	bl	800b5c4 <HAL_CAN_IsTxMessagePending>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d000      	beq.n	8002130 <_ZN4BG9519TransmitSendRequestEv+0x110>
 800212e:	e7ef      	b.n	8002110 <_ZN4BG9519TransmitSendRequestEv+0xf0>

	//waiting for transmission request to be completed by checking RQCPx
	while( !(hcanx_->Instance->TSR & ( 0x1 << (7 * ( TxMailbox - 1 )))));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6899      	ldr	r1, [r3, #8]
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	1a9b      	subs	r3, r3, r2
 8002140:	3b07      	subs	r3, #7
 8002142:	2201      	movs	r2, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	400b      	ands	r3, r1
 800214a:	2b00      	cmp	r3, #0
 800214c:	bf0c      	ite	eq
 800214e:	2301      	moveq	r3, #1
 8002150:	2300      	movne	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d000      	beq.n	800215a <_ZN4BG9519TransmitSendRequestEv+0x13a>
 8002158:	e7ea      	b.n	8002130 <_ZN4BG9519TransmitSendRequestEv+0x110>

	return state;
 800215a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800215e:	b29b      	uxth	r3, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	3744      	adds	r7, #68	; 0x44
 8002164:	46bd      	mov	sp, r7
 8002166:	bd90      	pop	{r4, r7, pc}
 8002168:	080251d8 	.word	0x080251d8

0800216c <_ZN23CAN_RData_HandleTypeDefC1Ev>:
typedef struct
{
	int rxid_;
	int data_length_;
	unsigned char read_Data_Byte_[8] = {0,};
} CAN_RData_HandleTypeDef;
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3308      	adds	r3, #8
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <_ZN4BG9523TransmitReceiveResponseEv>:

uint16_t BG95::TransmitReceiveResponse()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b094      	sub	sp, #80	; 0x50
 8002190:	af02      	add	r7, sp, #8
 8002192:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;

	uint8_t RxData[8] = {0,};
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
	uint8_t state = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	CAN_RData_HandleTypeDef cal_data;
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ffe0 	bl	800216c <_ZN23CAN_RData_HandleTypeDefC1Ev>
	/* Monitoring queue until at least one message is received */
	//if(HAL_CAN_GetRxFifoFillLevel(this->hcanx_, CAN_RX_FIFO0) == 0) return HAL_ERROR;
	//while(HAL_CAN_GetRxFifoFillLevel(this->hcanx_, CAN_RX_FIFO0) != 1)

	/* Configure Receive process */
	state = HAL_CANReceive(this->hcanx_, &RxHeader, (unsigned char*)RxData);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f107 021c 	add.w	r2, r7, #28
 80021b4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80021b8:	4618      	mov	r0, r3
 80021ba:	f007 fe9b 	bl	8009ef4 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh>
 80021be:	4603      	mov	r3, r0
 80021c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43



	/*if data is vaild*/
	if(state == HAL_OK)
 80021c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d11f      	bne.n	800220c <_ZN4BG9523TransmitReceiveResponseEv+0x80>
	{

		cal_data.rxid_ = RxHeader.StdId;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	60fb      	str	r3, [r7, #12]

		cal_data.data_length_ = RxHeader.DLC;
 80021d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d2:	613b      	str	r3, [r7, #16]

		for(int i =0; i<=7; i++) cal_data.read_Data_Byte_[i] = RxData[i];
 80021d4:	2300      	movs	r3, #0
 80021d6:	647b      	str	r3, [r7, #68]	; 0x44
 80021d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021da:	2b07      	cmp	r3, #7
 80021dc:	dc0e      	bgt.n	80021fc <_ZN4BG9523TransmitReceiveResponseEv+0x70>
 80021de:	f107 021c 	add.w	r2, r7, #28
 80021e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e4:	4413      	add	r3, r2
 80021e6:	7819      	ldrb	r1, [r3, #0]
 80021e8:	f107 0214 	add.w	r2, r7, #20
 80021ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ee:	4413      	add	r3, r2
 80021f0:	460a      	mov	r2, r1
 80021f2:	701a      	strb	r2, [r3, #0]
 80021f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f6:	3301      	adds	r3, #1
 80021f8:	647b      	str	r3, [r7, #68]	; 0x44
 80021fa:	e7ed      	b.n	80021d8 <_ZN4BG9523TransmitReceiveResponseEv+0x4c>

		QueueSaveReceive(cal_data);
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fab3 	bl	8002772 <_ZN4BG9516QueueSaveReceiveE23CAN_RData_HandleTypeDef>

	}

	return state;
 800220c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002210:	b29b      	uxth	r3, r3
}
 8002212:	4618      	mov	r0, r3
 8002214:	3748      	adds	r7, #72	; 0x48
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <_ZN23CAN_WData_HandleTypeDefC1Ev>:
} CAN_WData_HandleTypeDef;
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3308      	adds	r3, #8
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <_ZN4BG9516WriteDataEnqueueEiii>:

//---------------------------------------------------------------Command queue functions
//queue system functions
void BG95::WriteDataEnqueue(int index, int subindex, int data)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b090      	sub	sp, #64	; 0x40
 800223e:	af02      	add	r7, sp, #8
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	603b      	str	r3, [r7, #0]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 8002248:	f107 0310 	add.w	r3, r7, #16
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ffe4 	bl	800221a <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int txid;
	int index_ = index;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
	int subindex_ = subindex;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
	int data_ = data;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	623b      	str	r3, [r7, #32]
	int data_size_  = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	633b      	str	r3, [r7, #48]	; 0x30

	/*to check data byte size*/
	if(data_ > 0xffff) { data_size_ = 4;}
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002268:	db02      	blt.n	8002270 <_ZN4BG9516WriteDataEnqueueEiii+0x36>
 800226a:	2304      	movs	r3, #4
 800226c:	633b      	str	r3, [r7, #48]	; 0x30
 800226e:	e007      	b.n	8002280 <_ZN4BG9516WriteDataEnqueueEiii+0x46>
	else if(data_ > 0xff) {data_size_ = 2;}
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	2bff      	cmp	r3, #255	; 0xff
 8002274:	dd02      	ble.n	800227c <_ZN4BG9516WriteDataEnqueueEiii+0x42>
 8002276:	2302      	movs	r3, #2
 8002278:	633b      	str	r3, [r7, #48]	; 0x30
 800227a:	e001      	b.n	8002280 <_ZN4BG9516WriteDataEnqueueEiii+0x46>
	else { data_size_ = 1;}
 800227c:	2301      	movs	r3, #1
 800227e:	633b      	str	r3, [r7, #48]	; 0x30

	/*to confirm the command byte*/
	switch(data_size_)
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	2b04      	cmp	r3, #4
 8002284:	d00f      	beq.n	80022a6 <_ZN4BG9516WriteDataEnqueueEiii+0x6c>
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002288:	2b04      	cmp	r3, #4
 800228a:	dc0f      	bgt.n	80022ac <_ZN4BG9516WriteDataEnqueueEiii+0x72>
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	2b01      	cmp	r3, #1
 8002290:	d003      	beq.n	800229a <_ZN4BG9516WriteDataEnqueueEiii+0x60>
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	2b02      	cmp	r3, #2
 8002296:	d003      	beq.n	80022a0 <_ZN4BG9516WriteDataEnqueueEiii+0x66>
 8002298:	e008      	b.n	80022ac <_ZN4BG9516WriteDataEnqueueEiii+0x72>
	{
		case 1: txid = 0x2f; break;
 800229a:	232f      	movs	r3, #47	; 0x2f
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
 800229e:	e008      	b.n	80022b2 <_ZN4BG9516WriteDataEnqueueEiii+0x78>
		case 2: txid = 0x2b; break;
 80022a0:	232b      	movs	r3, #43	; 0x2b
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
 80022a4:	e005      	b.n	80022b2 <_ZN4BG9516WriteDataEnqueueEiii+0x78>
		case 4: txid = 0x23; break;
 80022a6:	2323      	movs	r3, #35	; 0x23
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
 80022aa:	e002      	b.n	80022b2 <_ZN4BG9516WriteDataEnqueueEiii+0x78>
		default: txid = 0x22; break;
 80022ac:	2322      	movs	r3, #34	; 0x22
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
 80022b0:	bf00      	nop
	}

	/*input the data to buffer*/
	cal_data.txid_ = 0x600;   //SDO
 80022b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022b6:	613b      	str	r3, [r7, #16]
	cal_data.data_length_ = 8;
 80022b8:	2308      	movs	r3, #8
 80022ba:	617b      	str	r3, [r7, #20]

	cal_data.write_Data_Byte_[0] = txid;    					//command byte(4bytes fixed)
 80022bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	763b      	strb	r3, [r7, #24]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	767b      	strb	r3, [r7, #25]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	121b      	asrs	r3, r3, #8
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	76bb      	strb	r3, [r7, #26]
	cal_data.write_Data_Byte_[3] = subindex_;					//sub Index
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	76fb      	strb	r3, [r7, #27]

	if(data !=0)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d015      	beq.n	8002308 <_ZN4BG9516WriteDataEnqueueEiii+0xce>
	{
		for(int i = 4; i <= 7; i++) cal_data.write_Data_Byte_[i] = ((data_ >> (8 * (i - 4))) & 0xff);
 80022dc:	2304      	movs	r3, #4
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e2:	2b07      	cmp	r3, #7
 80022e4:	dc10      	bgt.n	8002308 <_ZN4BG9516WriteDataEnqueueEiii+0xce>
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	3b04      	subs	r3, #4
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	6a3a      	ldr	r2, [r7, #32]
 80022ee:	fa42 f303 	asr.w	r3, r2, r3
 80022f2:	b2d9      	uxtb	r1, r3
 80022f4:	f107 0218 	add.w	r2, r7, #24
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	4413      	add	r3, r2
 80022fc:	460a      	mov	r2, r1
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	3301      	adds	r3, #1
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002306:	e7eb      	b.n	80022e0 <_ZN4BG9516WriteDataEnqueueEiii+0xa6>
	}

	/*Register data from buffer*/
	QueueSaveRequest(cal_data);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	f107 0310 	add.w	r3, r7, #16
 8002310:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f9ca 	bl	80026ac <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>
}
 8002318:	bf00      	nop
 800231a:	3738      	adds	r7, #56	; 0x38
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>:

void BG95::AsyncWriteDataEnqueue(int index, int subindex, int data)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b090      	sub	sp, #64	; 0x40
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 800232e:	f107 0310 	add.w	r3, r7, #16
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff ff71 	bl	800221a <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int txid;
	int index_ = index;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int subindex_ = subindex;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
	int data_ = data;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
	int data_size_  = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]

	/*to confirm the command byte*/
	switch(data_size_)
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	2b04      	cmp	r3, #4
 800234c:	d00f      	beq.n	800236e <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x4e>
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	2b04      	cmp	r3, #4
 8002352:	dc0f      	bgt.n	8002374 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x54>
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d003      	beq.n	8002362 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x42>
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d003      	beq.n	8002368 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x48>
 8002360:	e008      	b.n	8002374 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x54>
	{
		case 1: txid = 0x2f; break;
 8002362:	232f      	movs	r3, #47	; 0x2f
 8002364:	637b      	str	r3, [r7, #52]	; 0x34
 8002366:	e008      	b.n	800237a <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x5a>
		case 2: txid = 0x2b; break;
 8002368:	232b      	movs	r3, #43	; 0x2b
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
 800236c:	e005      	b.n	800237a <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x5a>
		case 4: txid = 0x23; break;
 800236e:	2323      	movs	r3, #35	; 0x23
 8002370:	637b      	str	r3, [r7, #52]	; 0x34
 8002372:	e002      	b.n	800237a <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x5a>
		default: txid = 0x22; break;
 8002374:	2322      	movs	r3, #34	; 0x22
 8002376:	637b      	str	r3, [r7, #52]	; 0x34
 8002378:	bf00      	nop
	}

	/*input the data to buffer*/
	cal_data.txid_ = 0x600;
 800237a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800237e:	613b      	str	r3, [r7, #16]
	cal_data.data_length_ = 8;
 8002380:	2308      	movs	r3, #8
 8002382:	617b      	str	r3, [r7, #20]

	cal_data.write_Data_Byte_[0] = txid;    					//command byte(4bytes fixed)
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002386:	b2db      	uxtb	r3, r3
 8002388:	763b      	strb	r3, [r7, #24]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	b2db      	uxtb	r3, r3
 800238e:	767b      	strb	r3, [r7, #25]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 8002390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002392:	121b      	asrs	r3, r3, #8
 8002394:	b2db      	uxtb	r3, r3
 8002396:	76bb      	strb	r3, [r7, #26]
	cal_data.write_Data_Byte_[3] = subindex_;					//sub Index
 8002398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239a:	b2db      	uxtb	r3, r3
 800239c:	76fb      	strb	r3, [r7, #27]

	if(data !=0)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d015      	beq.n	80023d0 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0xb0>
	{
		for(int i = 4; i <= 7; i++) cal_data.write_Data_Byte_[i] = ((data_ >> (8 * (i - 4))) & 0xff);
 80023a4:	2304      	movs	r3, #4
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
 80023a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023aa:	2b07      	cmp	r3, #7
 80023ac:	dc10      	bgt.n	80023d0 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0xb0>
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	3b04      	subs	r3, #4
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b6:	fa42 f303 	asr.w	r3, r2, r3
 80023ba:	b2d9      	uxtb	r1, r3
 80023bc:	f107 0218 	add.w	r2, r7, #24
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c2:	4413      	add	r3, r2
 80023c4:	460a      	mov	r2, r1
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ca:	3301      	adds	r3, #1
 80023cc:	633b      	str	r3, [r7, #48]	; 0x30
 80023ce:	e7eb      	b.n	80023a8 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x88>
	}

	/*Register data from buffer*/
	AsyncQueueSaveRequest(cal_data);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f107 0310 	add.w	r3, r7, #16
 80023d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f94e 	bl	800267c <_ZN4BG9521AsyncQueueSaveRequestE23CAN_WData_HandleTypeDef>
}
 80023e0:	bf00      	nop
 80023e2:	3738      	adds	r7, #56	; 0x38
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_ZN4BG9515ReadDataEnqueueEiii>:

void BG95::ReadDataEnqueue(int index, int subindex, int data)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08e      	sub	sp, #56	; 0x38
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff0d 	bl	800221a <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int index_ = index;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
	int data_ = data;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	627b      	str	r3, [r7, #36]	; 0x24

	/*input the data to buffer*/
	cal_data.txid_ = 0x600;
 8002408:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800240c:	617b      	str	r3, [r7, #20]
	cal_data.data_length_ = 8;
 800240e:	2308      	movs	r3, #8
 8002410:	61bb      	str	r3, [r7, #24]

	cal_data.write_Data_Byte_[0] = 0x40;    					//command byte(4bytes fixed)
 8002412:	2340      	movs	r3, #64	; 0x40
 8002414:	773b      	strb	r3, [r7, #28]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	b2db      	uxtb	r3, r3
 800241a:	777b      	strb	r3, [r7, #29]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	121b      	asrs	r3, r3, #8
 8002420:	b2db      	uxtb	r3, r3
 8002422:	77bb      	strb	r3, [r7, #30]
	cal_data.write_Data_Byte_[3] = subindex;					//sub Index
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	77fb      	strb	r3, [r7, #31]

	if(data !=0)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d015      	beq.n	800245c <_ZN4BG9515ReadDataEnqueueEiii+0x74>
	{
		for(int i = 4; i<=7; i++) cal_data.write_Data_Byte_[i] = ((data_ >> (8 * (i - 4))) & 0xff);
 8002430:	2304      	movs	r3, #4
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002436:	2b07      	cmp	r3, #7
 8002438:	dc10      	bgt.n	800245c <_ZN4BG9515ReadDataEnqueueEiii+0x74>
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	3b04      	subs	r3, #4
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002442:	fa42 f303 	asr.w	r3, r2, r3
 8002446:	b2d9      	uxtb	r1, r3
 8002448:	f107 021c 	add.w	r2, r7, #28
 800244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244e:	4413      	add	r3, r2
 8002450:	460a      	mov	r2, r1
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	3301      	adds	r3, #1
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800245a:	e7eb      	b.n	8002434 <_ZN4BG9515ReadDataEnqueueEiii+0x4c>
	}

	/*Register data from buffer*/
	QueueSaveRequest(cal_data);
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f920 	bl	80026ac <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>
}
 800246c:	bf00      	nop
 800246e:	3730      	adds	r7, #48	; 0x30
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <_ZN4BG9512DataAnalysisEv>:

/*this function is just hardcode. not a final version*/
void BG95::DataAnalysis()
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b08b      	sub	sp, #44	; 0x2c
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	//1.check Receive queue
	if((ReceiveQueue.empty())) return;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3368      	adds	r3, #104	; 0x68
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fb36 	bl	8002af2 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d13c      	bne.n	8002506 <_ZN4BG9512DataAnalysisEv+0x92>

	CAN_RData_HandleTypeDef cal_data = ReceiveQueue.front();
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3368      	adds	r3, #104	; 0x68
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fb49 	bl	8002b28 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>
 8002496:	4603      	mov	r3, r0
 8002498:	f107 040c 	add.w	r4, r7, #12
 800249c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800249e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int index = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
	int subindex = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
	int data = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]

	//2.check commandbyte is matched(sdo)
	if(cal_data.rxid_ != (this->nodeid_ + 0x580) ) return;
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	891b      	ldrh	r3, [r3, #8]
 80024b4:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d126      	bne.n	800250a <_ZN4BG9512DataAnalysisEv+0x96>

	//3.only check read function for now
	if(!( cal_data.read_Data_Byte_[0] >= 0x40 && cal_data.read_Data_Byte_[0] <= 0x4f )) return;
 80024bc:	7d3b      	ldrb	r3, [r7, #20]
 80024be:	2b3f      	cmp	r3, #63	; 0x3f
 80024c0:	d925      	bls.n	800250e <_ZN4BG9512DataAnalysisEv+0x9a>
 80024c2:	7d3b      	ldrb	r3, [r7, #20]
 80024c4:	2b4f      	cmp	r3, #79	; 0x4f
 80024c6:	d822      	bhi.n	800250e <_ZN4BG9512DataAnalysisEv+0x9a>

	//4. revert index byte
	index |= cal_data.read_Data_Byte_[1];
 80024c8:	7d7b      	ldrb	r3, [r7, #21]
 80024ca:	461a      	mov	r2, r3
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	4313      	orrs	r3, r2
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
	index |= cal_data.read_Data_Byte_[2] * 0x100 ;
 80024d2:	7dbb      	ldrb	r3, [r7, #22]
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d8:	4313      	orrs	r3, r2
 80024da:	627b      	str	r3, [r7, #36]	; 0x24

	//5.revert sub-index byte
	subindex = cal_data.read_Data_Byte_[3];
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	623b      	str	r3, [r7, #32]

	//6.revert data byte
	data = cal_data.read_Data_Byte_[4] + (cal_data.read_Data_Byte_[5]*0x100) +
 80024e0:	7e3b      	ldrb	r3, [r7, #24]
 80024e2:	461a      	mov	r2, r3
 80024e4:	7e7b      	ldrb	r3, [r7, #25]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	441a      	add	r2, r3
			(cal_data.read_Data_Byte_[6] * 0x10000) + (cal_data.read_Data_Byte_[7]*0x1000000);
 80024ea:	7ebb      	ldrb	r3, [r7, #26]
 80024ec:	041b      	lsls	r3, r3, #16
	data = cal_data.read_Data_Byte_[4] + (cal_data.read_Data_Byte_[5]*0x100) +
 80024ee:	441a      	add	r2, r3
			(cal_data.read_Data_Byte_[6] * 0x10000) + (cal_data.read_Data_Byte_[7]*0x1000000);
 80024f0:	7efb      	ldrb	r3, [r7, #27]
 80024f2:	061b      	lsls	r3, r3, #24
	data = cal_data.read_Data_Byte_[4] + (cal_data.read_Data_Byte_[5]*0x100) +
 80024f4:	4413      	add	r3, r2
 80024f6:	61fb      	str	r3, [r7, #28]

	DataProcess(index, subindex, data);
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	6a3a      	ldr	r2, [r7, #32]
 80024fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f80a 	bl	8002518 <_ZN4BG9511DataProcessEiii>
 8002504:	e004      	b.n	8002510 <_ZN4BG9512DataAnalysisEv+0x9c>
	if((ReceiveQueue.empty())) return;
 8002506:	bf00      	nop
 8002508:	e002      	b.n	8002510 <_ZN4BG9512DataAnalysisEv+0x9c>
	if(cal_data.rxid_ != (this->nodeid_ + 0x580) ) return;
 800250a:	bf00      	nop
 800250c:	e000      	b.n	8002510 <_ZN4BG9512DataAnalysisEv+0x9c>
	if(!( cal_data.read_Data_Byte_[0] >= 0x40 && cal_data.read_Data_Byte_[0] <= 0x4f )) return;
 800250e:	bf00      	nop

}
 8002510:	372c      	adds	r7, #44	; 0x2c
 8002512:	46bd      	mov	sp, r7
 8002514:	bd90      	pop	{r4, r7, pc}
	...

08002518 <_ZN4BG9511DataProcessEiii>:

void BG95::DataProcess(int index, int subindex, int data)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
	switch(index)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f643 2204 	movw	r2, #14852	; 0x3a04
 800252c:	4293      	cmp	r3, r2
 800252e:	d06f      	beq.n	8002610 <_ZN4BG9511DataProcessEiii+0xf8>
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f643 2204 	movw	r2, #14852	; 0x3a04
 8002536:	4293      	cmp	r3, r2
 8002538:	f300 809a 	bgt.w	8002670 <_ZN4BG9511DataProcessEiii+0x158>
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f243 7262 	movw	r2, #14178	; 0x3762
 8002542:	4293      	cmp	r3, r2
 8002544:	d060      	beq.n	8002608 <_ZN4BG9511DataProcessEiii+0xf0>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f243 7262 	movw	r2, #14178	; 0x3762
 800254c:	4293      	cmp	r3, r2
 800254e:	f300 808f 	bgt.w	8002670 <_ZN4BG9511DataProcessEiii+0x158>
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f243 7260 	movw	r2, #14176	; 0x3760
 8002558:	4293      	cmp	r3, r2
 800255a:	d051      	beq.n	8002600 <_ZN4BG9511DataProcessEiii+0xe8>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f243 7260 	movw	r2, #14176	; 0x3760
 8002562:	4293      	cmp	r3, r2
 8002564:	f300 8084 	bgt.w	8002670 <_ZN4BG9511DataProcessEiii+0x158>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f243 3245 	movw	r2, #13125	; 0x3345
 800256e:	4293      	cmp	r3, r2
 8002570:	dc7e      	bgt.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f5b3 5f4d 	cmp.w	r3, #13120	; 0x3340
 8002578:	da26      	bge.n	80025c8 <_ZN4BG9511DataProcessEiii+0xb0>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8002580:	d04d      	beq.n	800261e <_ZN4BG9511DataProcessEiii+0x106>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8002588:	dc72      	bgt.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f243 1213 	movw	r2, #12563	; 0x3113
 8002590:	4293      	cmp	r3, r2
 8002592:	d031      	beq.n	80025f8 <_ZN4BG9511DataProcessEiii+0xe0>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f243 1213 	movw	r2, #12563	; 0x3113
 800259a:	4293      	cmp	r3, r2
 800259c:	dc68      	bgt.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f243 1211 	movw	r2, #12561	; 0x3111
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d023      	beq.n	80025f0 <_ZN4BG9511DataProcessEiii+0xd8>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f243 1211 	movw	r2, #12561	; 0x3111
 80025ae:	4293      	cmp	r3, r2
 80025b0:	dc5e      	bgt.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f243 0201 	movw	r2, #12289	; 0x3001
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d04c      	beq.n	8002656 <_ZN4BG9511DataProcessEiii+0x13e>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f243 0202 	movw	r2, #12290	; 0x3002
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d04d      	beq.n	8002662 <_ZN4BG9511DataProcessEiii+0x14a>

		case 0x3001: this->err_data_ = (uint16_t)data ; break;
		case 0x3002: this->stat_reg_ = (uint16_t)data ; break;

	}
}
 80025c6:	e053      	b.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
	switch(index)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f5a3 534d 	sub.w	r3, r3, #13120	; 0x3340
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d84e      	bhi.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
 80025d2:	a201      	add	r2, pc, #4	; (adr r2, 80025d8 <_ZN4BG9511DataProcessEiii+0xc0>)
 80025d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d8:	08002627 	.word	0x08002627
 80025dc:	0800262f 	.word	0x0800262f
 80025e0:	08002637 	.word	0x08002637
 80025e4:	0800263f 	.word	0x0800263f
 80025e8:	08002647 	.word	0x08002647
 80025ec:	0800264f 	.word	0x0800264f
		case 0x3111: this->motor_voltage_ = data ; break;
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
 80025f6:	e03b      	b.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
		case 0x3113: this->motor_current_ = data ; break;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	635a      	str	r2, [r3, #52]	; 0x34
 80025fe:	e037      	b.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
		case 0x3760: this->target_pos_ = data ; break; //actual target position
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	63da      	str	r2, [r3, #60]	; 0x3c
 8002606:	e033      	b.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
		case 0x3762: this->motor_pos_ = data ; break;  //actual position
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
 800260e:	e02f      	b.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
			if(subindex == 1) this->motor_vel_ = data ;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d12b      	bne.n	800266e <_ZN4BG9511DataProcessEiii+0x156>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800261c:	e027      	b.n	800266e <_ZN4BG9511DataProcessEiii+0x156>
		case 0x3300: this->actual_max_vel_ = data; break;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	615a      	str	r2, [r3, #20]
 8002624:	e024      	b.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
		case 0x3340: this->acc_rpm_ = data; break;
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	619a      	str	r2, [r3, #24]
 800262c:	e020      	b.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
		case 0x3341: this->acc_time_ = data; break;
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	61da      	str	r2, [r3, #28]
 8002634:	e01c      	b.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
		case 0x3342: this->dec_rpm_ = data; break;
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	621a      	str	r2, [r3, #32]
 800263c:	e018      	b.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
		case 0x3343: this->dec_time_ = data; break;
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	625a      	str	r2, [r3, #36]	; 0x24
 8002644:	e014      	b.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
		case 0x3344: this->qdec_rpm_ = data; break;
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
 800264c:	e010      	b.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
		case 0x3345: this->qdec_time_ = data; break;
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c
 8002654:	e00c      	b.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
		case 0x3001: this->err_data_ = (uint16_t)data ; break;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b29b      	uxth	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	649a      	str	r2, [r3, #72]	; 0x48
 8002660:	e006      	b.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
		case 0x3002: this->stat_reg_ = (uint16_t)data ; break;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	645a      	str	r2, [r3, #68]	; 0x44
 800266c:	e000      	b.n	8002670 <_ZN4BG9511DataProcessEiii+0x158>
			break;
 800266e:	bf00      	nop
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_ZN4BG9521AsyncQueueSaveRequestE23CAN_WData_HandleTypeDef>:


void BG95::AsyncQueueSaveRequest(CAN_WData_HandleTypeDef cmd){this->AsyncRequestQueue.push_back(cmd);}
 800267c:	b084      	sub	sp, #16
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	f107 0014 	add.w	r0, r7, #20
 800268a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3350      	adds	r3, #80	; 0x50
 8002692:	f107 0214 	add.w	r2, r7, #20
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fa58 	bl	8002b4e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026a8:	b004      	add	sp, #16
 80026aa:	4770      	bx	lr

080026ac <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>:

void BG95::QueueSaveRequest(CAN_WData_HandleTypeDef cmd){this->RequestQueue.push_back(cmd);}
 80026ac:	b084      	sub	sp, #16
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	f107 0014 	add.w	r0, r7, #20
 80026ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	335c      	adds	r3, #92	; 0x5c
 80026c2:	f107 0214 	add.w	r2, r7, #20
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fa40 	bl	8002b4e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026d8:	b004      	add	sp, #16
 80026da:	4770      	bx	lr

080026dc <_ZN4BG9518QueueDeleteRequestEv>:
void BG95::QueueDeleteRequest()
{
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	/*temporary code*/
	if(!(AsyncRequestQueue.empty())) {this->AsyncRequestQueue.erase(AsyncRequestQueue.begin());}
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3350      	adds	r3, #80	; 0x50
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 f9bc 	bl	8002a66 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f083 0301 	eor.w	r3, r3, #1
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d016      	beq.n	8002728 <_ZN4BG9518QueueDeleteRequestEv+0x4c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3350      	adds	r3, #80	; 0x50
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fa48 	bl	8002b9a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 800270a:	4603      	mov	r3, r0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	f107 020c 	add.w	r2, r7, #12
 8002712:	f107 0308 	add.w	r3, r7, #8
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fa4e 	bl	8002bba <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	4620      	mov	r0, r4
 8002722:	f000 fa5b 	bl	8002bdc <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
	else {if(!(RequestQueue.empty())) {this->RequestQueue.erase(RequestQueue.begin());}}


}
 8002726:	e020      	b.n	800276a <_ZN4BG9518QueueDeleteRequestEv+0x8e>
	else {if(!(RequestQueue.empty())) {this->RequestQueue.erase(RequestQueue.begin());}}
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	335c      	adds	r3, #92	; 0x5c
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f99a 	bl	8002a66 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 8002732:	4603      	mov	r3, r0
 8002734:	f083 0301 	eor.w	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d015      	beq.n	800276a <_ZN4BG9518QueueDeleteRequestEv+0x8e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	335c      	adds	r3, #92	; 0x5c
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fa26 	bl	8002b9a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 800274e:	4603      	mov	r3, r0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	f107 0214 	add.w	r2, r7, #20
 8002756:	f107 0310 	add.w	r3, r7, #16
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fa2c 	bl	8002bba <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 8002762:	6939      	ldr	r1, [r7, #16]
 8002764:	4620      	mov	r0, r4
 8002766:	f000 fa39 	bl	8002bdc <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
}
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd90      	pop	{r4, r7, pc}

08002772 <_ZN4BG9516QueueSaveReceiveE23CAN_RData_HandleTypeDef>:


void BG95::QueueSaveReceive(CAN_RData_HandleTypeDef cmd){this->ReceiveQueue.push_back(cmd);}
 8002772:	b084      	sub	sp, #16
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	f107 0014 	add.w	r0, r7, #20
 8002780:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3368      	adds	r3, #104	; 0x68
 8002788:	f107 0214 	add.w	r2, r7, #20
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fa4b 	bl	8002c2a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_>
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800279e:	b004      	add	sp, #16
 80027a0:	4770      	bx	lr

080027a2 <_ZN4BG9518QueueDeleteReceiveEv>:
void BG95::QueueDeleteReceive()
{
 80027a2:	b590      	push	{r4, r7, lr}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
	if(!(ReceiveQueue.empty())) {this->ReceiveQueue.erase(ReceiveQueue.begin());}
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3368      	adds	r3, #104	; 0x68
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f99f 	bl	8002af2 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f083 0301 	eor.w	r3, r3, #1
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d015      	beq.n	80027ec <_ZN4BG9518QueueDeleteReceiveEv+0x4a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3368      	adds	r3, #104	; 0x68
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fa53 	bl	8002c76 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 80027d0:	4603      	mov	r3, r0
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	f107 020c 	add.w	r2, r7, #12
 80027d8:	f107 0308 	add.w	r3, r7, #8
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fa59 	bl	8002c96 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	4620      	mov	r0, r4
 80027e8:	f000 fa66 	bl	8002cb8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd90      	pop	{r4, r7, pc}

080027f4 <_ZN4BG9522HAL_CAN_InitializationEv>:



//--------------------------------------------------------------------initialization
void BG95::HAL_CAN_Initialization()
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	/* Can Start */
	if ((HAL_CAN_Start(this->hcanx_) != HAL_OK))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4618      	mov	r0, r3
 8002802:	f008 fd4d 	bl	800b2a0 <HAL_CAN_Start>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf14      	ite	ne
 800280c:	2301      	movne	r3, #1
 800280e:	2300      	moveq	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <_ZN4BG9522HAL_CAN_InitializationEv+0x28>
	{
		this->err_code_ = initfailed;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	60da      	str	r2, [r3, #12]
	}
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <_ZN4BG9524HAL_CAN_DeInitializationEv>:

void BG95::HAL_CAN_DeInitialization()
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_Stop(this->hcanx_) != HAL_OK){} //this->err_code_ = initfailed;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4618      	mov	r0, r3
 8002832:	f008 fd79 	bl	800b328 <HAL_CAN_Stop>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <_ZN4BG959DriveInitEv>:


//--------------------------------------------------------------------Drive
void BG95::DriveInit()
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
	/*test read function*/
	if(RequestQueue.empty()) ReadSchduleCommandEnqueue();
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	335c      	adds	r3, #92	; 0x5c
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f909 	bl	8002a66 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <_ZN4BG959DriveInitEv+0x1e>
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f002 fa06 	bl	8004c6c <_ZN4BG9525ReadSchduleCommandEnqueueEv>
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_ZN4BG959DriveCommEv>:


void BG95::DriveComm()
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	if(TransmitSendRequest()!=HAL_OK)
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff fbd5 	bl	8002020 <_ZN4BG9519TransmitSendRequestEv>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf14      	ite	ne
 800287c:	2301      	movne	r3, #1
 800287e:	2300      	moveq	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <_ZN4BG959DriveCommEv+0x26>
	{
		this->comm_status_ = false;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	741a      	strb	r2, [r3, #16]
 800288c:	e002      	b.n	8002894 <_ZN4BG959DriveCommEv+0x2c>
	}
	else
	{
		this->comm_status_ = true;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	741a      	strb	r2, [r3, #16]
	}

	HAL_Delay(10);
 8002894:	200a      	movs	r0, #10
 8002896:	f008 fb03 	bl	800aea0 <HAL_Delay>

	if(TransmitReceiveResponse()!=HAL_OK)
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff fc76 	bl	800218c <_ZN4BG9523TransmitReceiveResponseEv>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf14      	ite	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	2300      	moveq	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <_ZN4BG959DriveCommEv+0x50>
	{
		this->comm_status_ = false;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	741a      	strb	r2, [r3, #16]
	}
	else
	{
		this->comm_status_ = true;
	}
}
 80028b6:	e002      	b.n	80028be <_ZN4BG959DriveCommEv+0x56>
		this->comm_status_ = true;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	741a      	strb	r2, [r3, #16]
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <_ZN4BG9513DriveAnalysisEv>:

void BG95::DriveAnalysis()
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
	DataAnalysis();
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff fdd0 	bl	8002474 <_ZN4BG9512DataAnalysisEv>
	QueueDeleteRequest();
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff01 	bl	80026dc <_ZN4BG9518QueueDeleteRequestEv>
	QueueDeleteReceive();
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ff61 	bl	80027a2 <_ZN4BG9518QueueDeleteReceiveEv>
	//ProcessGetTotalInfo();
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <_ZN4BG9514InitializationEv>:

//--------------------------------------------------------------------Applications
//main functions

void BG95::Initialization()
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	InitializeCommand();
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f002 fa25 	bl	8004d40 <_ZN4BG9517InitializeCommandEv>

	HAL_CAN_Initialization();
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ff7c 	bl	80027f4 <_ZN4BG9522HAL_CAN_InitializationEv>

}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <_ZN4BG955DriveEv>:

}


void BG95::Drive()
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
	DriveInit();
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff98 	bl	8002842 <_ZN4BG959DriveInitEv>

	DriveComm();
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ffa8 	bl	8002868 <_ZN4BG959DriveCommEv>

	DriveAnalysis();
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ffd4 	bl	80028c6 <_ZN4BG9513DriveAnalysisEv>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f9e9 	bl	8002d06 <_ZNSaI23CAN_WData_HandleTypeDefEC1Ev>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f9f1 	bl	8002d1e <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_ZNSaI23CAN_WData_HandleTypeDefED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f9f9 	bl	8002d46 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefED1Ev>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 8002976:	461a      	mov	r2, r3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f9ef 	bl	8002d5c <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      }
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fa8a 	bl	8001e9a <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002990:	b5b0      	push	{r4, r5, r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681c      	ldr	r4, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f9ed 	bl	8002d82 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80029a8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80029aa:	461a      	mov	r2, r3
 80029ac:	4629      	mov	r1, r5
 80029ae:	4620      	mov	r0, r4
 80029b0:	f000 f9f2 	bl	8002d98 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ffd1 	bl	800295e <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bdb0      	pop	{r4, r5, r7, pc}

080029c6 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f9f0 	bl	8002db4 <_ZNSaI23CAN_RData_HandleTypeDefEC1Ev>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f9f8 	bl	8002dcc <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <_ZNSaI23CAN_RData_HandleTypeDefED1Ev>:
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fa00 	bl	8002df4 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefED1Ev>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 8002a16:	461a      	mov	r2, r3
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f9f6 	bl	8002e0a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      }
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fa60 	bl	8001ee6 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681c      	ldr	r4, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f9f4 	bl	8002e30 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002a48:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	4620      	mov	r0, r4
 8002a50:	f000 f9f9 	bl	8002e46 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      }
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ffd1 	bl	80029fe <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bdb0      	pop	{r4, r5, r7, pc}

08002a66 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %vector is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f9f7 	bl	8002e62 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8002a74:	4603      	mov	r3, r0
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fa02 	bl	8002e82 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	f107 020c 	add.w	r2, r7, #12
 8002a86:	f107 0308 	add.w	r3, r7, #8
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fa09 	bl	8002ea4 <_ZN9__gnu_cxxeqIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %vector.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f878 	bl	8002b9a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	f107 030c 	add.w	r3, r7, #12
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fa0e 	bl	8002ed4 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>
 8002ab8:	4603      	mov	r3, r0
      }
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002ac2:	b590      	push	{r4, r7, lr}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fa0c 	bl	8002eec <_ZSt12__miter_baseIPhET_S1_>
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	68b8      	ldr	r0, [r7, #8]
 8002ad8:	f000 fa08 	bl	8002eec <_ZSt12__miter_baseIPhET_S1_>
 8002adc:	4603      	mov	r3, r0
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f000 fa0d 	bl	8002f02 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8002ae8:	4603      	mov	r3, r0
    }
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd90      	pop	{r4, r7, pc}

08002af2 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fa24 	bl	8002f48 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8002b00:	4603      	mov	r3, r0
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fa2f 	bl	8002f68 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	f107 020c 	add.w	r2, r7, #12
 8002b12:	f107 0308 	add.w	r3, r7, #8
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 fa36 	bl	8002f8a <_ZN9__gnu_cxxeqIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	return *begin();
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f8a0 	bl	8002c76 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8002b36:	4603      	mov	r3, r0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	f107 030c 	add.w	r3, r7, #12
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fa3b 	bl	8002fba <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>
 8002b44:	4603      	mov	r3, r0
      }
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d00d      	beq.n	8002b80 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f000 fa30 	bl	8002fd2 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f103 0210 	add.w	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8002b7e:	e008      	b.n	8002b92 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fa39 	bl	8002ff8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8002b86:	4603      	mov	r3, r0
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fa5b 	bl	8003048 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	f107 030c 	add.w	r3, r7, #12
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fb08 	bl	80031c0 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
      : _M_current(__i) { }

      // Allow iterator to const_iterator conversion
      template<typename _Iter>
        _GLIBCXX20_CONSTEXPR
        __normal_iterator(const __normal_iterator<_Iter,
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
			  typename __enable_if<
      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }
 8002bc4:	6838      	ldr	r0, [r7, #0]
 8002bc6:	f000 fb0b 	bl	80031e0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ffd7 	bl	8002b9a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8002bec:	4603      	mov	r3, r0
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fb00 	bl	80031f6 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE6cbeginEv>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	f107 020c 	add.w	r2, r7, #12
 8002bfe:	463b      	mov	r3, r7
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fb07 	bl	8003216 <_ZN9__gnu_cxxmiIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	f107 0308 	add.w	r3, r7, #8
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fb15 	bl	8003240 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8002c16:	4603      	mov	r3, r0
 8002c18:	4619      	mov	r1, r3
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fb28 	bl	8003270 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d00d      	beq.n	8002c5c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f000 fb4e 	bl	80032ea <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f103 0210 	add.w	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	605a      	str	r2, [r3, #4]
      }
 8002c5a:	e008      	b.n	8002c6e <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fb57 	bl	8003310 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 8002c62:	4603      	mov	r3, r0
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fb79 	bl	8003360 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fc26 	bl	80034d8 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8002ca0:	6838      	ldr	r0, [r7, #0]
 8002ca2:	f000 fc29 	bl	80034f8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>:
      erase(const_iterator __position)
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ffd7 	bl	8002c76 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fc1e 	bl	800350e <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE6cbeginEv>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	f107 020c 	add.w	r2, r7, #12
 8002cda:	463b      	mov	r3, r7
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fc25 	bl	800352e <_ZN9__gnu_cxxmiIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	f107 0308 	add.w	r3, r7, #8
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fc33 	bl	8003558 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fc46 	bl	8003588 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_ZNSaI23CAN_WData_HandleTypeDefEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fc77 	bl	8003602 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefEC1Ev>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
	{ }
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
	if (__p)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fc4f 	bl	8003618 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE10deallocateERS1_PS0_j>
      }
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fc45 	bl	8003636 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefEvT_S2_>
    }
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <_ZNSaI23CAN_RData_HandleTypeDefEC1Ev>:
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fc47 	bl	8003650 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefEC1Ev>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
	{ }
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefED1Ev>:
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
	if (__p)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fc1f 	bl	8003666 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE10deallocateERS1_PS0_j>
      }
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fc15 	bl	8003684 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefEvT_S2_>
    }
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	f107 030c 	add.w	r3, r7, #12
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fc13 	bl	800369e <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	1d1a      	adds	r2, r3, #4
 8002e8e:	f107 030c 	add.w	r3, r7, #12
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fc02 	bl	800369e <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <_ZN9__gnu_cxxeqIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fc05 	bl	80036be <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	681c      	ldr	r4, [r3, #0]
 8002eb8:	6838      	ldr	r0, [r7, #0]
 8002eba:	f000 fc00 	bl	80036be <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	429c      	cmp	r4, r3
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd90      	pop	{r4, r7, pc}

08002ed4 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002f02:	b5b0      	push	{r4, r5, r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fbe0 	bl	80036d4 <_ZSt12__niter_baseIPhET_S1_>
 8002f14:	4604      	mov	r4, r0
 8002f16:	68b8      	ldr	r0, [r7, #8]
 8002f18:	f000 fbdc 	bl	80036d4 <_ZSt12__niter_baseIPhET_S1_>
 8002f1c:	4605      	mov	r5, r0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fbd7 	bl	80036d4 <_ZSt12__niter_baseIPhET_S1_>
 8002f26:	4603      	mov	r3, r0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4629      	mov	r1, r5
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f000 fbdc 	bl	80036ea <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8002f32:	4602      	mov	r2, r0
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fbe6 	bl	800370a <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8002f3e:	4603      	mov	r3, r0
    }
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bdb0      	pop	{r4, r5, r7, pc}

08002f48 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	f107 030c 	add.w	r3, r7, #12
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fbe2 	bl	8003722 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	1d1a      	adds	r2, r3, #4
 8002f74:	f107 030c 	add.w	r3, r7, #12
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fbd1 	bl	8003722 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <_ZN9__gnu_cxxeqIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002f8a:	b590      	push	{r4, r7, lr}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fbd4 	bl	8003742 <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	681c      	ldr	r4, [r3, #0]
 8002f9e:	6838      	ldr	r0, [r7, #0]
 8002fa0:	f000 fbcf 	bl	8003742 <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	429c      	cmp	r4, r3
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd90      	pop	{r4, r7, pc}

08002fba <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fbba 	bl	8003758 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fbbf 	bl	800376e <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	1d1a      	adds	r2, r3, #4
 8003004:	f107 030c 	add.w	r3, r7, #12
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f8d8 	bl	80031c0 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8003020:	4618      	mov	r0, r3
 8003022:	f000 f805 	bl	8003030 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8003026:	4603      	mov	r3, r0
      }
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8003038:	2301      	movs	r3, #1
      }
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003048:	b5b0      	push	{r4, r5, r7, lr}
 800304a:	b08c      	sub	sp, #48	; 0x30
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8003054:	4a59      	ldr	r2, [pc, #356]	; (80031bc <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 8003056:	2101      	movs	r1, #1
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fba1 	bl	80037a0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>
 800305e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff fd94 	bl	8002b9a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8003072:	4603      	mov	r3, r0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	f107 0214 	add.w	r2, r7, #20
 800307a:	f107 0308 	add.w	r3, r7, #8
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fbd4 	bl	800382e <_ZN9__gnu_cxxmiIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8003086:	4603      	mov	r3, r0
 8003088:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fbe2 	bl	8003858 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj>
 8003094:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800309a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	011b      	lsls	r3, r3, #4
	  _Alloc_traits::construct(this->_M_impl,
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	18d5      	adds	r5, r2, r3
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fb57 	bl	8003758 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 80030aa:	4603      	mov	r3, r0
 80030ac:	461a      	mov	r2, r3
 80030ae:	4629      	mov	r1, r5
 80030b0:	4620      	mov	r0, r4
 80030b2:	f7ff ff8e 	bl	8002fd2 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80030b6:	2300      	movs	r3, #0
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80030ba:	f7ff ffae 	bl	800301a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d027      	beq.n	8003114 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80030c4:	f107 0308 	add.w	r3, r7, #8
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 f889 	bl	80031e0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80030ce:	4603      	mov	r3, r0
 80030d0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fe54 	bl	8002d82 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80030da:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4621      	mov	r1, r4
 80030e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030e2:	f000 fbcd 	bl	8003880 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80030e6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	3310      	adds	r3, #16
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f874 	bl	80031e0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80030f8:	4603      	mov	r3, r0
 80030fa:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fe3f 	bl	8002d82 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003104:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003108:	6a39      	ldr	r1, [r7, #32]
 800310a:	4620      	mov	r0, r4
 800310c:	f000 fbb8 	bl	8003880 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8003110:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003112:	e026      	b.n	8003162 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8003114:	f107 0308 	add.w	r3, r7, #8
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f861 	bl	80031e0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800311e:	4603      	mov	r3, r0
 8003120:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fe2c 	bl	8002d82 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800312a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4621      	mov	r1, r4
 8003130:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003132:	f000 fbb9 	bl	80038a8 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003136:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	3310      	adds	r3, #16
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800313e:	f107 0308 	add.w	r3, r7, #8
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f84c 	bl	80031e0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003148:	4603      	mov	r3, r0
 800314a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fe17 	bl	8002d82 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003154:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8003156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003158:	6a39      	ldr	r1, [r7, #32]
 800315a:	4620      	mov	r0, r4
 800315c:	f000 fba4 	bl	80038a8 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003160:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8003162:	f7ff ff5a 	bl	800301a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 8003166:	4603      	mov	r3, r0
 8003168:	f083 0301 	eor.w	r3, r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fe04 	bl	8002d82 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800317a:	4603      	mov	r3, r0
 800317c:	461a      	mov	r2, r3
 800317e:	6a39      	ldr	r1, [r7, #32]
 8003180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003182:	f7ff fe09 	bl	8002d98 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8003186:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	111b      	asrs	r3, r3, #4
      _M_deallocate(__old_start,
 8003192:	461a      	mov	r2, r3
 8003194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003196:	f7ff fde1 	bl	8002d5c <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031a4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80031a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	441a      	add	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	609a      	str	r2, [r3, #8]
    }
 80031b2:	bf00      	nop
 80031b4:	3730      	adds	r7, #48	; 0x30
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bdb0      	pop	{r4, r5, r7, pc}
 80031ba:	bf00      	nop
 80031bc:	080251e8 	.word	0x080251e8

080031c0 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	f107 030c 	add.w	r3, r7, #12
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fa49 	bl	800369e <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <_ZN9__gnu_cxxmiIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003216:	b590      	push	{r4, r7, lr}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fa4c 	bl	80036be <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003226:	4603      	mov	r3, r0
 8003228:	681c      	ldr	r4, [r3, #0]
 800322a:	6838      	ldr	r0, [r7, #0]
 800322c:	f000 fa47 	bl	80036be <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003230:	4603      	mov	r3, r0
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1ae3      	subs	r3, r4, r3
 8003236:	111b      	asrs	r3, r3, #4
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bd90      	pop	{r4, r7, pc}

08003240 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	4413      	add	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	f107 020c 	add.w	r2, r7, #12
 800325a:	f107 0308 	add.w	r3, r7, #8
 800325e:	4611      	mov	r1, r2
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ffad 	bl	80031c0 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 800327a:	463b      	mov	r3, r7
 800327c:	2101      	movs	r1, #1
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ffde 	bl	8003240 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8003284:	4603      	mov	r3, r0
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff feb5 	bl	8002ff8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 800328e:	4603      	mov	r3, r0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	f107 020c 	add.w	r2, r7, #12
 8003296:	f107 0308 	add.w	r3, r7, #8
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fb29 	bl	80038f4 <_ZN9__gnu_cxxneIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00e      	beq.n	80032c6 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 80032a8:	463b      	mov	r3, r7
 80032aa:	2101      	movs	r1, #1
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ffc7 	bl	8003240 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 80032b2:	4604      	mov	r4, r0
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fe9f 	bl	8002ff8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 80032ba:	4603      	mov	r3, r0
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	4619      	mov	r1, r3
 80032c0:	4620      	mov	r0, r4
 80032c2:	f000 fb2f 	bl	8003924 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      --this->_M_impl._M_finish;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f1a3 0210 	sub.w	r2, r3, #16
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f000 fafd 	bl	80038da <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
      return __position;
 80032e0:	683b      	ldr	r3, [r7, #0]
    }
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd90      	pop	{r4, r7, pc}

080032ea <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fb2c 	bl	8003954 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 80032fc:	4603      	mov	r3, r0
 80032fe:	461a      	mov	r2, r3
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fb31 	bl	800396a <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	1d1a      	adds	r2, r3, #4
 800331c:	f107 030c 	add.w	r3, r7, #12
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f000 f8d8 	bl	80034d8 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8003338:	4618      	mov	r0, r3
 800333a:	f000 f805 	bl	8003348 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800333e:	4603      	mov	r3, r0
      }
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8003350:	2301      	movs	r3, #1
      }
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8003360:	b5b0      	push	{r4, r5, r7, lr}
 8003362:	b08c      	sub	sp, #48	; 0x30
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800336c:	4a59      	ldr	r2, [pc, #356]	; (80034d4 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 800336e:	2101      	movs	r1, #1
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 fb13 	bl	800399c <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>
 8003376:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f7ff fc76 	bl	8002c76 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 800338a:	4603      	mov	r3, r0
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	f107 0214 	add.w	r2, r7, #20
 8003392:	f107 0308 	add.w	r3, r7, #8
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fb46 	bl	8003a2a <_ZN9__gnu_cxxmiIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800339e:	4603      	mov	r3, r0
 80033a0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fb54 	bl	8003a54 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj>
 80033ac:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 80033b2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	011b      	lsls	r3, r3, #4
	  _Alloc_traits::construct(this->_M_impl,
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	18d5      	adds	r5, r2, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fac9 	bl	8003954 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461a      	mov	r2, r3
 80033c6:	4629      	mov	r1, r5
 80033c8:	4620      	mov	r0, r4
 80033ca:	f7ff ff8e 	bl	80032ea <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 80033ce:	2300      	movs	r3, #0
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80033d2:	f7ff ffae 	bl	8003332 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d027      	beq.n	800342c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80033dc:	f107 0308 	add.w	r3, r7, #8
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 f889 	bl	80034f8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80033e6:	4603      	mov	r3, r0
 80033e8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fd1f 	bl	8002e30 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80033f2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4621      	mov	r1, r4
 80033f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033fa:	f000 fb3f 	bl	8003a7c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80033fe:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8003400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003402:	3310      	adds	r3, #16
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	4618      	mov	r0, r3
 800340c:	f000 f874 	bl	80034f8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003410:	4603      	mov	r3, r0
 8003412:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fd0a 	bl	8002e30 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800341c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800341e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003420:	6a39      	ldr	r1, [r7, #32]
 8003422:	4620      	mov	r0, r4
 8003424:	f000 fb2a 	bl	8003a7c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8003428:	62f8      	str	r0, [r7, #44]	; 0x2c
 800342a:	e026      	b.n	800347a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800342c:	f107 0308 	add.w	r3, r7, #8
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f861 	bl	80034f8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003436:	4603      	mov	r3, r0
 8003438:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fcf7 	bl	8002e30 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003442:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4621      	mov	r1, r4
 8003448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800344a:	f000 fb2b 	bl	8003aa4 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 800344e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8003450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003452:	3310      	adds	r3, #16
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8003456:	f107 0308 	add.w	r3, r7, #8
 800345a:	4618      	mov	r0, r3
 800345c:	f000 f84c 	bl	80034f8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003460:	4603      	mov	r3, r0
 8003462:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fce2 	bl	8002e30 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800346c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800346e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003470:	6a39      	ldr	r1, [r7, #32]
 8003472:	4620      	mov	r0, r4
 8003474:	f000 fb16 	bl	8003aa4 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003478:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800347a:	f7ff ff5a 	bl	8003332 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 800347e:	4603      	mov	r3, r0
 8003480:	f083 0301 	eor.w	r3, r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fccf 	bl	8002e30 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003492:	4603      	mov	r3, r0
 8003494:	461a      	mov	r2, r3
 8003496:	6a39      	ldr	r1, [r7, #32]
 8003498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800349a:	f7ff fcd4 	bl	8002e46 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      _M_deallocate(__old_start,
 800349e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	111b      	asrs	r3, r3, #4
      _M_deallocate(__old_start,
 80034aa:	461a      	mov	r2, r3
 80034ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ae:	f7ff fcac 	bl	8002e0a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034bc:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	441a      	add	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	609a      	str	r2, [r3, #8]
    }
 80034ca:	bf00      	nop
 80034cc:	3730      	adds	r7, #48	; 0x30
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bdb0      	pop	{r4, r5, r7, pc}
 80034d2:	bf00      	nop
 80034d4:	080251e8 	.word	0x080251e8

080034d8 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	f107 030c 	add.w	r3, r7, #12
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f8ff 	bl	8003722 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <_ZN9__gnu_cxxmiIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800352e:	b590      	push	{r4, r7, lr}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f902 	bl	8003742 <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800353e:	4603      	mov	r3, r0
 8003540:	681c      	ldr	r4, [r3, #0]
 8003542:	6838      	ldr	r0, [r7, #0]
 8003544:	f000 f8fd 	bl	8003742 <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003548:	4603      	mov	r3, r0
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	1ae3      	subs	r3, r4, r3
 800354e:	111b      	asrs	r3, r3, #4
 8003550:	4618      	mov	r0, r3
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	bd90      	pop	{r4, r7, pc}

08003558 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	4413      	add	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	f107 020c 	add.w	r2, r7, #12
 8003572:	f107 0308 	add.w	r3, r7, #8
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ffad 	bl	80034d8 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 8003592:	463b      	mov	r3, r7
 8003594:	2101      	movs	r1, #1
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff ffde 	bl	8003558 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 800359c:	4603      	mov	r3, r0
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff feb5 	bl	8003310 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 80035a6:	4603      	mov	r3, r0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	f107 020c 	add.w	r2, r7, #12
 80035ae:	f107 0308 	add.w	r3, r7, #8
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fa9b 	bl	8003af0 <_ZN9__gnu_cxxneIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00e      	beq.n	80035de <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 80035c0:	463b      	mov	r3, r7
 80035c2:	2101      	movs	r1, #1
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ffc7 	bl	8003558 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 80035ca:	4604      	mov	r4, r0
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff fe9f 	bl	8003310 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 80035d2:	4603      	mov	r3, r0
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	4619      	mov	r1, r3
 80035d8:	4620      	mov	r0, r4
 80035da:	f000 faa1 	bl	8003b20 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      --this->_M_impl._M_finish;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f1a3 0210 	sub.w	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f000 fa6f 	bl	8003ad6 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
      return __position;
 80035f8:	683b      	ldr	r3, [r7, #0]
    }
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd90      	pop	{r4, r7, pc}

08003602 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 fa91 	bl	8003b50 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE10deallocateEPS1_j>
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fa94 	bl	8003b70 <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_WData_HandleTypeDefEEvT_S4_>
    }
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefEC1Ev>:
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fa85 	bl	8003b86 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE10deallocateEPS1_j>
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800368e:	6839      	ldr	r1, [r7, #0]
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fa88 	bl	8003ba6 <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_RData_HandleTypeDefEEvT_S4_>
    }
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
    { return __it; }
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 fa5e 	bl	8003bbc <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8003700:	4603      	mov	r3, r0
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
    { return __res; }
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4618      	mov	r0, r3
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800376e:	b5b0      	push	{r4, r5, r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ffec 	bl	8003758 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8003780:	4605      	mov	r5, r0
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4619      	mov	r1, r3
 8003786:	2010      	movs	r0, #16
 8003788:	f7fe fb7b 	bl	8001e82 <_ZnwjPv>
 800378c:	4603      	mov	r3, r0
 800378e:	461c      	mov	r4, r3
 8003790:	462b      	mov	r3, r5
 8003792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003798:	bf00      	nop
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bdb0      	pop	{r4, r5, r7, pc}

080037a0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fa15 	bl	8003bdc <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 80037b2:	4604      	mov	r4, r0
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fa22 	bl	8003bfe <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 80037ba:	4603      	mov	r3, r0
 80037bc:	1ae2      	subs	r2, r4, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	bf34      	ite	cc
 80037c4:	2301      	movcc	r3, #1
 80037c6:	2300      	movcs	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f01f f94b 	bl	8022a6a <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fa12 	bl	8003bfe <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 80037da:	4604      	mov	r4, r0
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fa0e 	bl	8003bfe <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 80037e2:	4603      	mov	r3, r0
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	f107 0208 	add.w	r2, r7, #8
 80037ea:	f107 0310 	add.w	r3, r7, #16
 80037ee:	4611      	mov	r1, r2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fa14 	bl	8003c1e <_ZSt3maxIjERKT_S2_S2_>
 80037f6:	4603      	mov	r3, r0
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4423      	add	r3, r4
 80037fc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f9fd 	bl	8003bfe <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 8003804:	4602      	mov	r2, r0
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	4293      	cmp	r3, r2
 800380a:	d306      	bcc.n	800381a <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x7a>
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f9e5 	bl	8003bdc <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 8003812:	4602      	mov	r2, r0
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4293      	cmp	r3, r2
 8003818:	d904      	bls.n	8003824 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x84>
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f9de 	bl	8003bdc <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 8003820:	4603      	mov	r3, r0
 8003822:	e000      	b.n	8003826 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x86>
 8003824:	697b      	ldr	r3, [r7, #20]
      }
 8003826:	4618      	mov	r0, r3
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	bd90      	pop	{r4, r7, pc}

0800382e <_ZN9__gnu_cxxmiIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800382e:	b590      	push	{r4, r7, lr}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff fcd1 	bl	80031e0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800383e:	4603      	mov	r3, r0
 8003840:	681c      	ldr	r4, [r3, #0]
 8003842:	6838      	ldr	r0, [r7, #0]
 8003844:	f7ff fccc 	bl	80031e0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003848:	4603      	mov	r3, r0
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	1ae3      	subs	r3, r4, r3
 800384e:	111b      	asrs	r3, r3, #4
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bd90      	pop	{r4, r7, pc}

08003858 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d006      	beq.n	8003876 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x1e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6839      	ldr	r1, [r7, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f9ea 	bl	8003c46 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8allocateERS1_j>
 8003872:	4603      	mov	r3, r0
 8003874:	e000      	b.n	8003878 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x20>
 8003876:	2300      	movs	r3, #0
      }
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b087      	sub	sp, #28
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800388e:	f88d 4000 	strb.w	r4, [sp]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f9e3 	bl	8003c64 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 800389e:	4603      	mov	r3, r0
      }
 80038a0:	4618      	mov	r0, r3
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd90      	pop	{r4, r7, pc}

080038a8 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f9e6 	bl	8003c88 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 80038bc:	4604      	mov	r4, r0
 80038be:	68b8      	ldr	r0, [r7, #8]
 80038c0:	f000 f9e2 	bl	8003c88 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 80038c4:	4601      	mov	r1, r0
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	4620      	mov	r0, r4
 80038cc:	f000 f9eb 	bl	8003ca6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>
 80038d0:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd90      	pop	{r4, r7, pc}

080038da <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80038e4:	6839      	ldr	r1, [r7, #0]
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f9ee 	bl	8003cc8 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE7destroyIS1_EEvPT_>
	}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <_ZN9__gnu_cxxneIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80038f4:	b590      	push	{r4, r7, lr}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff fc6e 	bl	80031e0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003904:	4603      	mov	r3, r0
 8003906:	681c      	ldr	r4, [r3, #0]
 8003908:	6838      	ldr	r0, [r7, #0]
 800390a:	f7ff fc69 	bl	80031e0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800390e:	4603      	mov	r3, r0
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	429c      	cmp	r4, r3
 8003914:	bf14      	ite	ne
 8003916:	2301      	movne	r3, #1
 8003918:	2300      	moveq	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bd90      	pop	{r4, r7, pc}

08003924 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8003924:	b590      	push	{r4, r7, lr}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f9d4 	bl	8003cde <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003936:	4604      	mov	r4, r0
 8003938:	68b8      	ldr	r0, [r7, #8]
 800393a:	f000 f9d0 	bl	8003cde <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 800393e:	4603      	mov	r3, r0
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4619      	mov	r1, r3
 8003944:	4620      	mov	r0, r4
 8003946:	f000 f9d5 	bl	8003cf4 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 800394a:	4603      	mov	r3, r0
				      std::__miter_base(__last), __result);
    }
 800394c:	4618      	mov	r0, r3
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	bd90      	pop	{r4, r7, pc}

08003954 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800396a:	b5b0      	push	{r4, r5, r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ffec 	bl	8003954 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 800397c:	4605      	mov	r5, r0
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4619      	mov	r1, r3
 8003982:	2010      	movs	r0, #16
 8003984:	f7fe fa7d 	bl	8001e82 <_ZnwjPv>
 8003988:	4603      	mov	r3, r0
 800398a:	461c      	mov	r4, r3
 800398c:	462b      	mov	r3, r5
 800398e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003990:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bdb0      	pop	{r4, r5, r7, pc}

0800399c <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f9c4 	bl	8003d36 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 80039ae:	4604      	mov	r4, r0
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f9d1 	bl	8003d58 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 80039b6:	4603      	mov	r3, r0
 80039b8:	1ae2      	subs	r2, r4, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	429a      	cmp	r2, r3
 80039be:	bf34      	ite	cc
 80039c0:	2301      	movcc	r3, #1
 80039c2:	2300      	movcs	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f01f f84d 	bl	8022a6a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f9c1 	bl	8003d58 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 80039d6:	4604      	mov	r4, r0
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f9bd 	bl	8003d58 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 80039de:	4603      	mov	r3, r0
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	f107 0208 	add.w	r2, r7, #8
 80039e6:	f107 0310 	add.w	r3, r7, #16
 80039ea:	4611      	mov	r1, r2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 f916 	bl	8003c1e <_ZSt3maxIjERKT_S2_S2_>
 80039f2:	4603      	mov	r3, r0
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4423      	add	r3, r4
 80039f8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f9ac 	bl	8003d58 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 8003a00:	4602      	mov	r2, r0
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d306      	bcc.n	8003a16 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f994 	bl	8003d36 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d904      	bls.n	8003a20 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x84>
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f98d 	bl	8003d36 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	e000      	b.n	8003a22 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x86>
 8003a20:	697b      	ldr	r3, [r7, #20]
      }
 8003a22:	4618      	mov	r0, r3
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd90      	pop	{r4, r7, pc}

08003a2a <_ZN9__gnu_cxxmiIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003a2a:	b590      	push	{r4, r7, lr}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fd5f 	bl	80034f8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	681c      	ldr	r4, [r3, #0]
 8003a3e:	6838      	ldr	r0, [r7, #0]
 8003a40:	f7ff fd5a 	bl	80034f8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003a44:	4603      	mov	r3, r0
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	1ae3      	subs	r3, r4, r3
 8003a4a:	111b      	asrs	r3, r3, #4
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd90      	pop	{r4, r7, pc}

08003a54 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d006      	beq.n	8003a72 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x1e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6839      	ldr	r1, [r7, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 f985 	bl	8003d78 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8allocateERS1_j>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	e000      	b.n	8003a74 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x20>
 8003a72:	2300      	movs	r3, #0
      }
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003a7c:	b590      	push	{r4, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003a8a:	f88d 4000 	strb.w	r4, [sp]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f97e 	bl	8003d96 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8003a9a:	4603      	mov	r3, r0
      }
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd90      	pop	{r4, r7, pc}

08003aa4 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003aa4:	b590      	push	{r4, r7, lr}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f981 	bl	8003dba <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 8003ab8:	4604      	mov	r4, r0
 8003aba:	68b8      	ldr	r0, [r7, #8]
 8003abc:	f000 f97d 	bl	8003dba <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 8003ac0:	4601      	mov	r1, r0
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f000 f986 	bl	8003dd8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8003acc:	4603      	mov	r3, r0
    }
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd90      	pop	{r4, r7, pc}

08003ad6 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003ae0:	6839      	ldr	r1, [r7, #0]
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f989 	bl	8003dfa <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE7destroyIS1_EEvPT_>
	}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <_ZN9__gnu_cxxneIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fcfc 	bl	80034f8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003b00:	4603      	mov	r3, r0
 8003b02:	681c      	ldr	r4, [r3, #0]
 8003b04:	6838      	ldr	r0, [r7, #0]
 8003b06:	f7ff fcf7 	bl	80034f8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	429c      	cmp	r4, r3
 8003b10:	bf14      	ite	ne
 8003b12:	2301      	movne	r3, #1
 8003b14:	2300      	moveq	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd90      	pop	{r4, r7, pc}

08003b20 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
    move(_II __first, _II __last, _OI __result)
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f96f 	bl	8003e10 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003b32:	4604      	mov	r4, r0
 8003b34:	68b8      	ldr	r0, [r7, #8]
 8003b36:	f000 f96b 	bl	8003e10 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4620      	mov	r0, r4
 8003b42:	f000 f970 	bl	8003e26 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 8003b46:	4603      	mov	r3, r0
    }
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd90      	pop	{r4, r7, pc}

08003b50 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	4619      	mov	r1, r3
 8003b62:	68b8      	ldr	r0, [r7, #8]
 8003b64:	f01e ff56 	bl	8022a14 <_ZdlPvj>
      }
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_WData_HandleTypeDefEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	4619      	mov	r1, r3
 8003b98:	68b8      	ldr	r0, [r7, #8]
 8003b9a:	f01e ff3b 	bl	8022a14 <_ZdlPvj>
      }
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_RData_HandleTypeDefEEvT_S4_>:
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f94b 	bl	8003e68 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8003bd2:	4603      	mov	r3, r0
    }
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f972 	bl	8003ed0 <_ZNKSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003bec:	4603      	mov	r3, r0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f954 	bl	8003e9c <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	111b      	asrs	r3, r3, #4
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d201      	bcs.n	8003c38 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	e000      	b.n	8003c3a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003c38:	687b      	ldr	r3, [r7, #4]
    }
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003c50:	2200      	movs	r2, #0
 8003c52:	6839      	ldr	r1, [r7, #0]
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f946 	bl	8003ee6 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f952 	bl	8003f22 <_ZSt12__relocate_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003c7e:	4603      	mov	r3, r0
      }
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003c90:	f107 030c 	add.w	r3, r7, #12
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 f960 	bl	8003f5c <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEC1ES1_>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f961 	bl	8003f80 <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_ET0_T_S5_S4_>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>:
    __miter_base(_Iterator __it)
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003cf4:	b5b0      	push	{r4, r5, r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f94f 	bl	8003fa4 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003d06:	4604      	mov	r4, r0
 8003d08:	68b8      	ldr	r0, [r7, #8]
 8003d0a:	f000 f94b 	bl	8003fa4 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003d0e:	4605      	mov	r5, r0
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f947 	bl	8003fa4 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f000 f94f 	bl	8003fc0 <_ZSt14__copy_move_a1ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4619      	mov	r1, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f95a 	bl	8003fe0 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 8003d2c:	4603      	mov	r3, r0
    }
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bdb0      	pop	{r4, r5, r7, pc}

08003d36 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f97e 	bl	8004042 <_ZNKSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 f960 	bl	800400e <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	111b      	asrs	r3, r3, #4
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003d82:	2200      	movs	r2, #0
 8003d84:	6839      	ldr	r1, [r7, #0]
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f966 	bl	8004058 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
 8003da2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f972 	bl	8004094 <_ZSt12__relocate_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003db0:	4603      	mov	r3, r0
      }
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003dc2:	f107 030c 	add.w	r3, r7, #12
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f980 	bl	80040ce <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEC1ES1_>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f981 	bl	80040f2 <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_ET0_T_S5_S4_>
 8003df0:	4603      	mov	r3, r0
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>:
    __miter_base(_Iterator __it)
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003e26:	b5b0      	push	{r4, r5, r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f96f 	bl	8004116 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003e38:	4604      	mov	r4, r0
 8003e3a:	68b8      	ldr	r0, [r7, #8]
 8003e3c:	f000 f96b 	bl	8004116 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003e40:	4605      	mov	r5, r0
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f967 	bl	8004116 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f000 f96f 	bl	8004132 <_ZSt14__copy_move_a1ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8003e54:	4603      	mov	r3, r0
 8003e56:	4619      	mov	r1, r3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f97a 	bl	8004152 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 8003e5e:	4603      	mov	r3, r0
    }
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bdb0      	pop	{r4, r5, r7, pc}

08003e68 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	461a      	mov	r2, r3
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f01f ff37 	bl	8023cfc <memmove>
	  return __result + _Num;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	4413      	add	r3, r2
	}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8003ea4:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8003ea8:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f968 	bl	8004180 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8max_sizeERKS1_>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003eb4:	f107 0208 	add.w	r2, r7, #8
 8003eb8:	f107 030c 	add.w	r3, r7, #12
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f96a 	bl	8004198 <_ZSt3minIjERKT_S2_S2_>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	681b      	ldr	r3, [r3, #0]
      }
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <_ZNKSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f964 	bl	80041c0 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4293      	cmp	r3, r2
 8003efe:	bf8c      	ite	hi
 8003f00:	2301      	movhi	r3, #1
 8003f02:	2300      	movls	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003f0a:	f01e fda8 	bl	8022a5e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	4618      	mov	r0, r3
 8003f14:	f01e fd8f 	bl	8022a36 <_Znwj>
 8003f18:	4603      	mov	r3, r0
      }
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <_ZSt12__relocate_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8003f22:	b5b0      	push	{r4, r5, r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f951 	bl	80041d8 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8003f36:	4604      	mov	r4, r0
 8003f38:	68b8      	ldr	r0, [r7, #8]
 8003f3a:	f000 f94d 	bl	80041d8 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8003f3e:	4605      	mov	r5, r0
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f949 	bl	80041d8 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8003f46:	4602      	mov	r2, r0
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f000 f94e 	bl	80041ee <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003f52:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bdb0      	pop	{r4, r5, r7, pc}

08003f5c <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEC1ES1_>:
      move_iterator(iterator_type __i)
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8003f66:	463b      	mov	r3, r7
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 f966 	bl	800423a <_ZSt4moveIRP23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f95b 	bl	8004250 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_>
 8003f9a:	4603      	mov	r3, r0
    }
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8003fac:	1d3b      	adds	r3, r7, #4
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff f916 	bl	80031e0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <_ZSt14__copy_move_a1ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68b9      	ldr	r1, [r7, #8]
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f96c 	bl	80042ae <_ZSt14__copy_move_a2ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>:
    __niter_wrap(_From __from, _To __res)
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff ffda 	bl	8003fa4 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	111b      	asrs	r3, r3, #4
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff f91e 	bl	8003240 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8004004:	4603      	mov	r3, r0
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8004016:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 800401a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f956 	bl	80042ce <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8max_sizeERKS1_>
 8004022:	4603      	mov	r3, r0
 8004024:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004026:	f107 0208 	add.w	r2, r7, #8
 800402a:	f107 030c 	add.w	r3, r7, #12
 800402e:	4611      	mov	r1, r2
 8004030:	4618      	mov	r0, r3
 8004032:	f000 f8b1 	bl	8004198 <_ZSt3minIjERKT_S2_S2_>
 8004036:	4603      	mov	r3, r0
 8004038:	681b      	ldr	r3, [r3, #0]
      }
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <_ZNKSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f93e 	bl	80042e6 <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>
 800406a:	4602      	mov	r2, r0
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4293      	cmp	r3, r2
 8004070:	bf8c      	ite	hi
 8004072:	2301      	movhi	r3, #1
 8004074:	2300      	movls	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800407c:	f01e fcef 	bl	8022a5e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	4618      	mov	r0, r3
 8004086:	f01e fcd6 	bl	8022a36 <_Znwj>
 800408a:	4603      	mov	r3, r0
      }
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <_ZSt12__relocate_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8004094:	b5b0      	push	{r4, r5, r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f92b 	bl	80042fe <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 80040a8:	4604      	mov	r4, r0
 80040aa:	68b8      	ldr	r0, [r7, #8]
 80040ac:	f000 f927 	bl	80042fe <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 80040b0:	4605      	mov	r5, r0
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f923 	bl	80042fe <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 80040b8:	4602      	mov	r2, r0
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	4629      	mov	r1, r5
 80040be:	4620      	mov	r0, r4
 80040c0:	f000 f928 	bl	8004314 <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 80040c4:	4603      	mov	r3, r0
    }
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bdb0      	pop	{r4, r5, r7, pc}

080040ce <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEC1ES1_>:
      move_iterator(iterator_type __i)
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80040d8:	463b      	mov	r3, r7
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 f940 	bl	8004360 <_ZSt4moveIRP23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 80040e0:	4603      	mov	r3, r0
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80040fe:	2301      	movs	r3, #1
 8004100:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f935 	bl	8004376 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_>
 800410c:	4603      	mov	r3, r0
    }
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff f9e9 	bl	80034f8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8004126:	4603      	mov	r3, r0
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_ZSt14__copy_move_a1ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f946 	bl	80043d4 <_ZSt14__copy_move_a2ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8004148:	4603      	mov	r3, r0
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>:
    __niter_wrap(_From __from, _To __res)
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff ffda 	bl	8004116 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004162:	4602      	mov	r2, r0
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	111b      	asrs	r3, r3, #4
 800416a:	461a      	mov	r2, r3
 800416c:	1d3b      	adds	r3, r7, #4
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff f9f1 	bl	8003558 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8004176:	4603      	mov	r3, r0
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f933 	bl	80043f4 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8max_sizeEv>
 800418e:	4603      	mov	r3, r0
      }
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d201      	bcs.n	80041b2 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	e000      	b.n	80041b4 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80041b2:	687b      	ldr	r3, [r7, #4]
    }
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80041c8:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>:
    __niter_base(_Iterator __it)
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
    { return __it; }
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80041ee:	b590      	push	{r4, r7, lr}
 80041f0:	b087      	sub	sp, #28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	429a      	cmp	r2, r3
 8004206:	d013      	beq.n	8004230 <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 8004208:	6978      	ldr	r0, [r7, #20]
 800420a:	f000 f8ff 	bl	800440c <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 800420e:	4604      	mov	r4, r0
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f8fb 	bl	800440c <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 8004216:	4603      	mov	r3, r0
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	4619      	mov	r1, r3
 800421c:	4620      	mov	r0, r4
 800421e:	f000 f900 	bl	8004422 <_ZSt19__relocate_object_aI23CAN_WData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3310      	adds	r3, #16
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	3310      	adds	r3, #16
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e7e7      	b.n	8004200 <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 8004230:	697b      	ldr	r3, [r7, #20]
    }
 8004232:	4618      	mov	r0, r3
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	bd90      	pop	{r4, r7, pc}

0800423a <_ZSt4moveIRP23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8004260:	f107 0208 	add.w	r2, r7, #8
 8004264:	f107 030c 	add.w	r3, r7, #12
 8004268:	4611      	mov	r1, r2
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f8f4 	bl	8004458 <_ZStneIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d016      	beq.n	80042a4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8004276:	6978      	ldr	r0, [r7, #20]
 8004278:	f000 f8c8 	bl	800440c <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 800427c:	4604      	mov	r4, r0
 800427e:	f107 030c 	add.w	r3, r7, #12
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f90a 	bl	800449c <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefEdeEv>
 8004288:	4603      	mov	r3, r0
 800428a:	4619      	mov	r1, r3
 800428c:	4620      	mov	r0, r4
 800428e:	f000 f911 	bl	80044b4 <_ZSt10_ConstructI23CAN_WData_HandleTypeDefJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8004292:	f107 030c 	add.w	r3, r7, #12
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f8ef 	bl	800447a <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEppEv>
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	3310      	adds	r3, #16
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	e7dd      	b.n	8004260 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 80042a4:	697b      	ldr	r3, [r7, #20]
	}
 80042a6:	4618      	mov	r0, r3
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd90      	pop	{r4, r7, pc}

080042ae <_ZSt14__copy_move_a2ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f910 	bl	80044e4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_>
 80042c4:	4603      	mov	r3, r0
    }
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f921 	bl	800451e <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8max_sizeEv>
 80042dc:	4603      	mov	r3, r0
      }
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80042ee:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>:
    __niter_base(_Iterator __it)
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	429a      	cmp	r2, r3
 800432c:	d013      	beq.n	8004356 <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 800432e:	6978      	ldr	r0, [r7, #20]
 8004330:	f000 f901 	bl	8004536 <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 8004334:	4604      	mov	r4, r0
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f8fd 	bl	8004536 <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 800433c:	4603      	mov	r3, r0
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	4619      	mov	r1, r3
 8004342:	4620      	mov	r0, r4
 8004344:	f000 f902 	bl	800454c <_ZSt19__relocate_object_aI23CAN_RData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3310      	adds	r3, #16
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	3310      	adds	r3, #16
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e7e7      	b.n	8004326 <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 8004356:	697b      	ldr	r3, [r7, #20]
    }
 8004358:	4618      	mov	r0, r3
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	bd90      	pop	{r4, r7, pc}

08004360 <_ZSt4moveIRP23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004376:	b590      	push	{r4, r7, lr}
 8004378:	b087      	sub	sp, #28
 800437a:	af00      	add	r7, sp, #0
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8004386:	f107 0208 	add.w	r2, r7, #8
 800438a:	f107 030c 	add.w	r3, r7, #12
 800438e:	4611      	mov	r1, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f000 f8f6 	bl	8004582 <_ZStneIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d016      	beq.n	80043ca <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800439c:	6978      	ldr	r0, [r7, #20]
 800439e:	f000 f8ca 	bl	8004536 <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 80043a2:	4604      	mov	r4, r0
 80043a4:	f107 030c 	add.w	r3, r7, #12
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f90c 	bl	80045c6 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefEdeEv>
 80043ae:	4603      	mov	r3, r0
 80043b0:	4619      	mov	r1, r3
 80043b2:	4620      	mov	r0, r4
 80043b4:	f000 f913 	bl	80045de <_ZSt10_ConstructI23CAN_RData_HandleTypeDefJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80043b8:	f107 030c 	add.w	r3, r7, #12
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f8f1 	bl	80045a4 <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEppEv>
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	3310      	adds	r3, #16
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	e7dd      	b.n	8004386 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 80043ca:	697b      	ldr	r3, [r7, #20]
	}
 80043cc:	4618      	mov	r0, r3
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd90      	pop	{r4, r7, pc}

080043d4 <_ZSt14__copy_move_a2ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f912 	bl	800460e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_>
 80043ea:	4603      	mov	r3, r0
    }
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff fedf 	bl	80041c0 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>
 8004402:	4603      	mov	r3, r0
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4618      	mov	r0, r3
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <_ZSt19__relocate_object_aI23CAN_WData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800442e:	68b8      	ldr	r0, [r7, #8]
 8004430:	f000 f90a 	bl	8004648 <_ZSt4moveIR23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	68f9      	ldr	r1, [r7, #12]
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f90f 	bl	800465e <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8004440:	68b8      	ldr	r0, [r7, #8]
 8004442:	f7ff ffe3 	bl	800440c <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 8004446:	4603      	mov	r3, r0
 8004448:	4619      	mov	r1, r3
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff fa45 	bl	80038da <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
    }
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <_ZStneIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8004462:	6839      	ldr	r1, [r7, #0]
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f90d 	bl	8004684 <_ZSteqIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 800446a:	4603      	mov	r3, r0
 800446c:	f083 0301 	eor.w	r3, r3, #1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEppEv>:
      operator++()
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f103 0210 	add.w	r2, r3, #16
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	601a      	str	r2, [r3, #0]
	return *this;
 800448e:	687b      	ldr	r3, [r7, #4]
      }
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefEdeEv>:
      operator*() const
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <_ZSt10_ConstructI23CAN_WData_HandleTypeDefJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80044b4:	b5b0      	push	{r4, r5, r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 80044be:	6838      	ldr	r0, [r7, #0]
 80044c0:	f000 f8f6 	bl	80046b0 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 80044c4:	4605      	mov	r5, r0
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4619      	mov	r1, r3
 80044ca:	2010      	movs	r0, #16
 80044cc:	f7fd fcd9 	bl	8001e82 <_ZnwjPv>
 80044d0:	4603      	mov	r3, r0
 80044d2:	461c      	mov	r4, r3
 80044d4:	462b      	mov	r3, r5
 80044d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80044dc:	bf00      	nop
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bdb0      	pop	{r4, r5, r7, pc}

080044e4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	111b      	asrs	r3, r3, #4
 80044f8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d006      	beq.n	800450e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	461a      	mov	r2, r3
 8004506:	68f9      	ldr	r1, [r7, #12]
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f01f fbf7 	bl	8023cfc <memmove>
	  return __result + _Num;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	4413      	add	r3, r2
	}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff fedd 	bl	80042e6 <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>
 800452c:	4603      	mov	r3, r0
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <_ZSt19__relocate_object_aI23CAN_RData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8004558:	68b8      	ldr	r0, [r7, #8]
 800455a:	f000 f8b4 	bl	80046c6 <_ZSt4moveIR23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>
 800455e:	4603      	mov	r3, r0
 8004560:	461a      	mov	r2, r3
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f8b9 	bl	80046dc <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800456a:	68b8      	ldr	r0, [r7, #8]
 800456c:	f7ff ffe3 	bl	8004536 <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 8004570:	4603      	mov	r3, r0
 8004572:	4619      	mov	r1, r3
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff faae 	bl	8003ad6 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
    }
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <_ZStneIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800458c:	6839      	ldr	r1, [r7, #0]
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f8b7 	bl	8004702 <_ZSteqIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 8004594:	4603      	mov	r3, r0
 8004596:	f083 0301 	eor.w	r3, r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEppEv>:
      operator++()
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	++_M_current;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f103 0210 	add.w	r2, r3, #16
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	601a      	str	r2, [r3, #0]
	return *this;
 80045b8:	687b      	ldr	r3, [r7, #4]
      }
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefEdeEv>:
      operator*() const
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <_ZSt10_ConstructI23CAN_RData_HandleTypeDefJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80045de:	b5b0      	push	{r4, r5, r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 80045e8:	6838      	ldr	r0, [r7, #0]
 80045ea:	f000 f8a0 	bl	800472e <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 80045ee:	4605      	mov	r5, r0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4619      	mov	r1, r3
 80045f4:	2010      	movs	r0, #16
 80045f6:	f7fd fc44 	bl	8001e82 <_ZnwjPv>
 80045fa:	4603      	mov	r3, r0
 80045fc:	461c      	mov	r4, r3
 80045fe:	462b      	mov	r3, r5
 8004600:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004602:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bdb0      	pop	{r4, r5, r7, pc}

0800460e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	111b      	asrs	r3, r3, #4
 8004622:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d006      	beq.n	8004638 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	461a      	mov	r2, r3
 8004630:	68f9      	ldr	r1, [r7, #12]
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f01f fb62 	bl	8023cfc <memmove>
	  return __result + _Num;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4413      	add	r3, r2
	}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <_ZSt4moveIR23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f820 	bl	80046b0 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f864 	bl	8004744 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <_ZSteqIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8004684:	b590      	push	{r4, r7, lr}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f871 	bl	8004776 <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>
 8004694:	4604      	mov	r4, r0
 8004696:	6838      	ldr	r0, [r7, #0]
 8004698:	f000 f86d 	bl	8004776 <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>
 800469c:	4603      	mov	r3, r0
 800469e:	429c      	cmp	r4, r3
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd90      	pop	{r4, r7, pc}

080046b0 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4618      	mov	r0, r3
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <_ZSt4moveIR23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f820 	bl	800472e <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 80046ee:	4603      	mov	r3, r0
 80046f0:	461a      	mov	r2, r3
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f84a 	bl	800478e <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 80046fa:	bf00      	nop
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <_ZSteqIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8004702:	b590      	push	{r4, r7, lr}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f857 	bl	80047c0 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>
 8004712:	4604      	mov	r4, r0
 8004714:	6838      	ldr	r0, [r7, #0]
 8004716:	f000 f853 	bl	80047c0 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>
 800471a:	4603      	mov	r3, r0
 800471c:	429c      	cmp	r4, r3
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	bd90      	pop	{r4, r7, pc}

0800472e <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004744:	b5b0      	push	{r4, r5, r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ffad 	bl	80046b0 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 8004756:	4605      	mov	r5, r0
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4619      	mov	r1, r3
 800475c:	2010      	movs	r0, #16
 800475e:	f7fd fb90 	bl	8001e82 <_ZnwjPv>
 8004762:	4603      	mov	r3, r0
 8004764:	461c      	mov	r4, r3
 8004766:	462b      	mov	r3, r5
 8004768:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800476a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bdb0      	pop	{r4, r5, r7, pc}

08004776 <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>:
      base() const
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800478e:	b5b0      	push	{r4, r5, r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff ffc7 	bl	800472e <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 80047a0:	4605      	mov	r5, r0
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4619      	mov	r1, r3
 80047a6:	2010      	movs	r0, #16
 80047a8:	f7fd fb6b 	bl	8001e82 <_ZnwjPv>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461c      	mov	r4, r3
 80047b0:	462b      	mov	r3, r5
 80047b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bdb0      	pop	{r4, r5, r7, pc}

080047c0 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>:
      base() const
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <_ZN4BG9521MandatoryParamEnqueueEv>:

//---------------------------------------------------------------------------------------------------Enqueue
//--------------------------------------------------------------------this parameters are followed from communication manual

void BG95::MandatoryParamEnqueue()
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	//----------------------------1.) Mandatory parameters:
	// a.) Device parameters:
	WriteDataEnqueue(0x3004, 0, 0);      // Power Disable
 80047e0:	2300      	movs	r3, #0
 80047e2:	2200      	movs	r2, #0
 80047e4:	f243 0104 	movw	r1, #12292	; 0x3004
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fd fd26 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	//Motor Type
	WriteDataEnqueue(0x3900, 0, 1);      // Motor - Type: 1 = brushless Motor (BLDC)
 80047ee:	2301      	movs	r3, #1
 80047f0:	2200      	movs	r2, #0
 80047f2:	f44f 5164 	mov.w	r1, #14592	; 0x3900
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fd fd1f 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3910, 0, 8);      // Motor - Number of Poles (8 - bg95)
 80047fc:	2308      	movs	r3, #8
 80047fe:	2200      	movs	r2, #0
 8004800:	f643 1110 	movw	r1, #14608	; 0x3910
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7fd fd18 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	//Encoder feedback enable
	WriteDataEnqueue(0x3550, 0, 2410);      //  Encoder feedback for the velocity controller
 800480a:	f640 136a 	movw	r3, #2410	; 0x96a
 800480e:	2200      	movs	r2, #0
 8004810:	f243 5150 	movw	r1, #13648	; 0x3550
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fd fd10 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3550, 0, 2410);      //  Encoder feedback for the secondary velocity controller
 800481a:	f640 136a 	movw	r3, #2410	; 0x96a
 800481e:	2200      	movs	r2, #0
 8004820:	f243 5150 	movw	r1, #13648	; 0x3550
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fd fd08 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3962, 0, 4096);      // Encoder resolution in counts: sin/cos = 4096, 1000h
 800482a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800482e:	2200      	movs	r2, #0
 8004830:	f643 1162 	movw	r1, #14690	; 0x3962
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7fd fd00 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	//WriteDataEnqueue(0x35A1, 0, 20000);      // Maximum Sub Velocity: 20000 = 2.0 m/s

	// b.) Current limits (Attention: Note the motor data sheet!):
	WriteDataEnqueue(0x3221, 0, 10000);      // Current limit - max. positive [mA]
 800483a:	f242 7310 	movw	r3, #10000	; 0x2710
 800483e:	2200      	movs	r2, #0
 8004840:	f243 2121 	movw	r1, #12833	; 0x3221
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7fd fcf8 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3223, 0, 10000);      // Current limit - max. negative [mA]
 800484a:	f242 7310 	movw	r3, #10000	; 0x2710
 800484e:	2200      	movs	r2, #0
 8004850:	f243 2123 	movw	r1, #12835	; 0x3223
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fd fcf0 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3224, 0, 0);      // Dynamic Current Limit I*t - Mode: 1 = active
 800485a:	2300      	movs	r3, #0
 800485c:	2200      	movs	r2, #0
 800485e:	f243 2124 	movw	r1, #12836	; 0x3224
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fd fce9 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3224, 1, 12000);      // Dynamic Current Limit I*t - Peak Current [mA]
 8004868:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800486c:	2201      	movs	r2, #1
 800486e:	f243 2124 	movw	r1, #12836	; 0x3224
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fd fce1 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3224, 2, 2640);      // Dynamic Current Limit I*t - Continuous Current [mA]
 8004878:	f44f 6325 	mov.w	r3, #2640	; 0xa50
 800487c:	2202      	movs	r2, #2
 800487e:	f243 2124 	movw	r1, #12836	; 0x3224
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fd fcd9 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3224, 3, 1000);      // Dynamic Current Limit I*t - Time [ms]
 8004888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800488c:	2203      	movs	r2, #3
 800488e:	f243 2124 	movw	r1, #12836	; 0x3224
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fd fcd1 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	// c.) Controller parameters
	// Primary Velocity controller
	WriteDataEnqueue(0x3310, 0, 500);      // PID-Position Controller - Proportional gain
 8004898:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800489c:	2200      	movs	r2, #0
 800489e:	f243 3110 	movw	r1, #13072	; 0x3310
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd fcc9 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3311, 0, 50);      // PID-Position Controller - Integral Factor
 80048a8:	2332      	movs	r3, #50	; 0x32
 80048aa:	2200      	movs	r2, #0
 80048ac:	f243 3111 	movw	r1, #13073	; 0x3311
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7fd fcc2 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3312, 0, 1);      // PID-Position Controller - Differential gain
 80048b6:	2301      	movs	r3, #1
 80048b8:	2200      	movs	r2, #0
 80048ba:	f243 3112 	movw	r1, #13074	; 0x3312
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fd fcbb 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3313, 0, 10000);      // integration limit of the position controller
 80048c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80048c8:	2200      	movs	r2, #0
 80048ca:	f243 3113 	movw	r1, #13075	; 0x3313
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fd fcb3 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3314, 0, 1000);      // velocity feed foward factor
 80048d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048d8:	2200      	movs	r2, #0
 80048da:	f243 3114 	movw	r1, #13076	; 0x3314
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fd fcab 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3315, 0, 1);      // Accelation feed foward factor
 80048e4:	2301      	movs	r3, #1
 80048e6:	2200      	movs	r2, #0
 80048e8:	f243 3115 	movw	r1, #13077	; 0x3315
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7fd fca4 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	// Secondary Velocity controller
	WriteDataEnqueue(0x3510, 0, 500);      // PI-Velocity Controller - Proportional gain
 80048f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80048f6:	2200      	movs	r2, #0
 80048f8:	f243 5110 	movw	r1, #13584	; 0x3510
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fd fc9c 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3511, 0, 50);      // PI-Velocity Controller - Integration constant
 8004902:	2332      	movs	r3, #50	; 0x32
 8004904:	2200      	movs	r2, #0
 8004906:	f243 5111 	movw	r1, #13585	; 0x3511
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fd fc95 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3517, 0, 1);      // compensation factor
 8004910:	2301      	movs	r3, #1
 8004912:	2200      	movs	r2, #0
 8004914:	f243 5117 	movw	r1, #13591	; 0x3517
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7fd fc8e 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	// Current controller
	WriteDataEnqueue(0x3210, 0, 35);      // PI-Current Controller - Proportional gain
 800491e:	2323      	movs	r3, #35	; 0x23
 8004920:	2200      	movs	r2, #0
 8004922:	f243 2110 	movw	r1, #12816	; 0x3210
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fd fc87 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3211, 0, 2);      // PI-Current Controller - Integration constant
 800492c:	2302      	movs	r3, #2
 800492e:	2200      	movs	r2, #0
 8004930:	f243 2111 	movw	r1, #12817	; 0x3211
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7fd fc80 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3000, 0, 128);      // Stores actual parameters
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	2200      	movs	r2, #0
 800493e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fd fc79 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
}
 8004948:	bf00      	nop
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <_ZN4BG9526RecommendationParamEnqueueEv>:

void BG95::RecommendationParamEnqueue()
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08a      	sub	sp, #40	; 0x28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
	//----------------------------2.) Recommendation parameters:
	const int32_t max_vel = this->max_vel_;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t acc_rpm = this->acc_rpm_;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	623b      	str	r3, [r7, #32]
	const uint32_t acc_time = this->acc_time_;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	61fb      	str	r3, [r7, #28]
	const uint32_t dec_rpm = this->dec_rpm_;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	61bb      	str	r3, [r7, #24]
	const uint32_t dec_time = this->dec_time_;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	617b      	str	r3, [r7, #20]
	const uint32_t qdec_rpm = this->qdec_rpm_;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	613b      	str	r3, [r7, #16]
	const uint32_t qdec_time = this->qdec_time_;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	60fb      	str	r3, [r7, #12]

	WriteDataEnqueue(0x3300, 0, max_vel);      // Velocity - rpm
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	2200      	movs	r2, #0
 8004986:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fd fc55 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3321, 0, max_vel);      // Velocity Max. Limit - Positive Direction - rpm
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	2200      	movs	r2, #0
 8004994:	f243 3121 	movw	r1, #13089	; 0x3321
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fd fc4e 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3323, 0, max_vel);      // Velocity Max. Limit - Negative Direction - rpm
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	2200      	movs	r2, #0
 80049a2:	f243 3123 	movw	r1, #13091	; 0x3323
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fd fc47 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3340, 0, acc_rpm);      // Velocity Acceleration - Delta v
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f44f 514d 	mov.w	r1, #13120	; 0x3340
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7fd fc40 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3341, 0, acc_time);      // Velocity Acceleration - Delta t
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	2200      	movs	r2, #0
 80049be:	f243 3141 	movw	r1, #13121	; 0x3341
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fd fc39 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3342, 0, dec_rpm);      // Velocity Deceleration - Delta v
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f243 3142 	movw	r1, #13122	; 0x3342
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7fd fc32 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3343, 0, dec_time);      // Velocity Deceleration - Delta t
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2200      	movs	r2, #0
 80049da:	f243 3143 	movw	r1, #13123	; 0x3343
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fd fc2b 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3344, 0, qdec_rpm);      // Velocity Deceleration - Quick-Stop - Delta v
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f243 3144 	movw	r1, #13124	; 0x3344
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7fd fc24 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3345, 0, qdec_time);      // Velocity Deceleration - Quick-Stop - Delta t
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f243 3145 	movw	r1, #13125	; 0x3345
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fd fc1d 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3000, 0, 128);      // Stores actual parameters
 8004a00:	2380      	movs	r3, #128	; 0x80
 8004a02:	2200      	movs	r2, #0
 8004a04:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fd fc16 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
}
 8004a0e:	bf00      	nop
 8004a10:	3728      	adds	r7, #40	; 0x28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <_ZN4BG9520HardwareParamEnqueueEv>:

void BG95::HardwareParamEnqueue()
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]

	//save all config.
	WriteDataEnqueue(0x3000, 0, 128);      // Stores actual parameters
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	2200      	movs	r2, #0
 8004a22:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fd fc07 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3000, 0, 5);      // save actual parameters
 8004a2c:	2305      	movs	r3, #5
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7fd fc00 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	//final approach
	WriteDataEnqueue(0x3732, 0, 1000);   // position following error - window
 8004a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f243 7132 	movw	r1, #14130	; 0x3732
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7fd fbf8 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3762, 0, 0);      // reset actual position
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f243 7162 	movw	r1, #14178	; 0x3762
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fd fbf1 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3000, 0, 1);      // reset error register
 8004a58:	2301      	movs	r3, #1
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7fd fbea 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <_ZN4BG9522BreakManagementEnqueueEv>:


void BG95::BreakManagementEnqueue()
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
	/*Manual oepn break*/
	//WriteDataEnqueue(0x3150, 0, 2);      // Open Break

	/*Break management config.*/
	WriteDataEnqueue(0x39a0, 0, 3);      // Brake Management - Configuration - auto disable when the movoment ends
 8004a76:	2303      	movs	r3, #3
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fd fbdb 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x39a0, 24, 5);      // Brake Management - Activating Condition
 8004a84:	2305      	movs	r3, #5
 8004a86:	2218      	movs	r2, #24
 8004a88:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fd fbd4 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x39a0, 26, 5);      // Brake Management - Deactivating Condition
 8004a92:	2305      	movs	r3, #5
 8004a94:	221a      	movs	r2, #26
 8004a96:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fd fbcd 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x39a0, 8, -353);      // Brake Management - Brake Output(Digital output 1 High-active)
 8004aa0:	f46f 73b0 	mvn.w	r3, #352	; 0x160
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fd fbc5 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x39a0, 16, 200);      // Brake Management - Brake Output
 8004ab0:	23c8      	movs	r3, #200	; 0xc8
 8004ab2:	2210      	movs	r2, #16
 8004ab4:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7fd fbbe 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x39a0, 17, 200);      // Brake Management - Brake Output
 8004abe:	23c8      	movs	r3, #200	; 0xc8
 8004ac0:	2211      	movs	r2, #17
 8004ac2:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fd fbb7 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x39a0, 18, 200);      // Brake Management - Brake Output
 8004acc:	23c8      	movs	r3, #200	; 0xc8
 8004ace:	2212      	movs	r2, #18
 8004ad0:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7fd fbb0 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x39a0, 19, 200);      // Brake Management - Brake Output
 8004ada:	23c8      	movs	r3, #200	; 0xc8
 8004adc:	2213      	movs	r2, #19
 8004ade:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fd fba9 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	//WriteDataEnqueue(0x3000, 0, 128);      // Stores actual parameters
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <_ZN4BG9525SetPositionControlEnqueueEv>:



/*for move mode*/
void BG95::SetPositionControlEnqueue()
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	int vel_ = this->max_vel_;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afc:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(0x3004, 0, 0);      // Power Disable
 8004afe:	2300      	movs	r3, #0
 8004b00:	2200      	movs	r2, #0
 8004b02:	f243 0104 	movw	r1, #12292	; 0x3004
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fd fc0a 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3000, 0, 1);      // reset error register
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7fd fc03 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3003, 0, 7);      // device mode "position mode"
 8004b1a:	2307      	movs	r3, #7
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f243 0103 	movw	r1, #12291	; 0x3003
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fd fbfc 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3300, 0, vel_);   // desired velocity (max_rpm)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7fd fbf5 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3000, 0, 4);      // continue
 8004b36:	2304      	movs	r3, #4
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fd fbee 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3004, 0, 1);      // Power Enable
 8004b44:	2301      	movs	r3, #1
 8004b46:	2200      	movs	r2, #0
 8004b48:	f243 0104 	movw	r1, #12292	; 0x3004
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fd fbe7 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <_ZN4BG9520AbsPosCommandEnqueueEPi>:


void BG95::AbsPosCommandEnqueue(int *tPos)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
	int tPos_ = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]

	if(tPos != NULL) tPos_ = *tPos;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <_ZN4BG9520AbsPosCommandEnqueueEPi+0x1a>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(0x3000, 0, 1);      // reset error register
 8004b74:	2301      	movs	r3, #1
 8004b76:	2200      	movs	r2, #0
 8004b78:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fd fbcf 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3790, 0, tPos_);   // target position
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f243 7190 	movw	r1, #14224	; 0x3790
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fd fbc8 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <_ZN4BG9520RelPosCommandEnqueueEPi>:

void BG95::RelPosCommandEnqueue(int *tPos)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
	int tPos_ = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]

	if(tPos != NULL) tPos_ = *tPos;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <_ZN4BG9520RelPosCommandEnqueueEPi+0x1a>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(0x3000, 0, 1);      // reset error register
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fd fbb0 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3791, 0, tPos_);   // target position
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f243 7191 	movw	r1, #14225	; 0x3791
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7fd fba9 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

}
 8004bce:	bf00      	nop
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <_ZN4BG9525SetVelocityControlEnqueueEb>:

/*for jog mode*/
void BG95::SetVelocityControlEnqueue(bool dir)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	70fb      	strb	r3, [r7, #3]
	bool dir_ = dir;
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	72fb      	strb	r3, [r7, #11]
	int vel_ = this->max_vel_/5;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bec:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <_ZN4BG9525SetVelocityControlEnqueueEb+0x90>)
 8004bee:	fb82 1203 	smull	r1, r2, r2, r3
 8004bf2:	1052      	asrs	r2, r2, #1
 8004bf4:	17db      	asrs	r3, r3, #31
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	60fb      	str	r3, [r7, #12]

	if(!dir_) vel_ = vel_*(-1);
 8004bfa:	7afb      	ldrb	r3, [r7, #11]
 8004bfc:	f083 0301 	eor.w	r3, r3, #1
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <_ZN4BG9525SetVelocityControlEnqueueEb+0x34>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	425b      	negs	r3, r3
 8004c0a:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(0x3004, 0, 0);      // Power Disable
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f243 0104 	movw	r1, #12292	; 0x3004
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7fd fb83 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3000, 0, 1);      // reset error register
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fd fb7c 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3003, 0, 3);      // device mode "velocity mode"
 8004c28:	2303      	movs	r3, #3
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f243 0103 	movw	r1, #12291	; 0x3003
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7fd fb75 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3300, 0, vel_);   // desired velocity (2500 rpm)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fd fb6e 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3000, 0, 4);      // continue
 8004c44:	2304      	movs	r3, #4
 8004c46:	2200      	movs	r2, #0
 8004c48:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7fd fb67 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3004, 0, 1);      // Power Enable
 8004c52:	2301      	movs	r3, #1
 8004c54:	2200      	movs	r2, #0
 8004c56:	f243 0104 	movw	r1, #12292	; 0x3004
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fd fb60 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004c60:	bf00      	nop
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	66666667 	.word	0x66666667

08004c6c <_ZN4BG9525ReadSchduleCommandEnqueueEv>:


void BG95::ReadSchduleCommandEnqueue()
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	//hardware param
	//ReadDataEnqueue(0x3110, 0, 0);      // actual power voltage
	ReadDataEnqueue(0x3111, 0, 0);      // actual motor voltage
 8004c74:	2300      	movs	r3, #0
 8004c76:	2200      	movs	r2, #0
 8004c78:	f243 1111 	movw	r1, #12561	; 0x3111
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7fd fbb3 	bl	80023e8 <_ZN4BG9515ReadDataEnqueueEiii>

	ReadDataEnqueue(0x3113, 0, 0);      // actual motor current
 8004c82:	2300      	movs	r3, #0
 8004c84:	2200      	movs	r2, #0
 8004c86:	f243 1113 	movw	r1, #12563	; 0x3113
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fd fbac 	bl	80023e8 <_ZN4BG9515ReadDataEnqueueEiii>
	ReadDataEnqueue(0x3760, 0, 0);      // Actual Target Position
 8004c90:	2300      	movs	r3, #0
 8004c92:	2200      	movs	r2, #0
 8004c94:	f243 7160 	movw	r1, #14176	; 0x3760
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7fd fba5 	bl	80023e8 <_ZN4BG9515ReadDataEnqueueEiii>
	//ReadDataEnqueue(0x3761, 0, 0);      // Actual Command Position

	//motor pos.
	ReadDataEnqueue(0x3762, 0, 0);      // Actual Position
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f243 7162 	movw	r1, #14178	; 0x3762
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fd fb9e 	bl	80023e8 <_ZN4BG9515ReadDataEnqueueEiii>

	//motor dynamics
	ReadDataEnqueue(0x3a04, 1, 0);      // Currently velocity(rpm)
 8004cac:	2300      	movs	r3, #0
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f643 2104 	movw	r1, #14852	; 0x3a04
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7fd fb97 	bl	80023e8 <_ZN4BG9515ReadDataEnqueueEiii>

	//setting parameters
	ReadDataEnqueue(0x3300, 0, 0);      // Velocity - rpm
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fd fb90 	bl	80023e8 <_ZN4BG9515ReadDataEnqueueEiii>

	ReadDataEnqueue(0x3340, 0, 0);      // Velocity Acceleration - Delta v
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f44f 514d 	mov.w	r1, #13120	; 0x3340
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7fd fb89 	bl	80023e8 <_ZN4BG9515ReadDataEnqueueEiii>
	ReadDataEnqueue(0x3341, 0, 0);      // Velocity Acceleration - Delta t
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f243 3141 	movw	r1, #13121	; 0x3341
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fd fb82 	bl	80023e8 <_ZN4BG9515ReadDataEnqueueEiii>

	ReadDataEnqueue(0x3342, 0, 0);      // Velocity Deceleration - Delta v
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f243 3142 	movw	r1, #13122	; 0x3342
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7fd fb7b 	bl	80023e8 <_ZN4BG9515ReadDataEnqueueEiii>
	ReadDataEnqueue(0x3343, 0, 0);      // Velocity Deceleration - Delta t
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f243 3143 	movw	r1, #13123	; 0x3343
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fd fb74 	bl	80023e8 <_ZN4BG9515ReadDataEnqueueEiii>

	ReadDataEnqueue(0x3344, 0, 0);      // Velocity Deceleration - Quick-Stop - Delta v
 8004d00:	2300      	movs	r3, #0
 8004d02:	2200      	movs	r2, #0
 8004d04:	f243 3144 	movw	r1, #13124	; 0x3344
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fd fb6d 	bl	80023e8 <_ZN4BG9515ReadDataEnqueueEiii>
	ReadDataEnqueue(0x3345, 0, 0);      // Velocity Deceleration - Quick-Stop - Delta t
 8004d0e:	2300      	movs	r3, #0
 8004d10:	2200      	movs	r2, #0
 8004d12:	f243 3145 	movw	r1, #13125	; 0x3345
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fd fb66 	bl	80023e8 <_ZN4BG9515ReadDataEnqueueEiii>

	//check Device status
	ReadDataEnqueue(0x3001, 0, 0);      //error status
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f243 0101 	movw	r1, #12289	; 0x3001
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7fd fb5f 	bl	80023e8 <_ZN4BG9515ReadDataEnqueueEiii>

	ReadDataEnqueue(0x3002, 0, 0);      //status register
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f243 0102 	movw	r1, #12290	; 0x3002
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fd fb58 	bl	80023e8 <_ZN4BG9515ReadDataEnqueueEiii>
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <_ZN4BG9517InitializeCommandEv>:


//---------------------------------------------------------------------------------------------------Commands

void BG95::InitializeCommand()
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	MandatoryParamEnqueue();
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff fd45 	bl	80047d8 <_ZN4BG9521MandatoryParamEnqueueEv>
	RecommendationParamEnqueue();
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff fdfe 	bl	8004950 <_ZN4BG9526RecommendationParamEnqueueEv>
	BreakManagementEnqueue();
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff fe8a 	bl	8004a6e <_ZN4BG9522BreakManagementEnqueueEv>
	HardwareParamEnqueue();
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7ff fe5b 	bl	8004a16 <_ZN4BG9520HardwareParamEnqueueEv>

}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <_ZN4BG9513AbsPosCommandEPi>:

void BG95::AbsPosCommand(int *tPos)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
	SetPositionControlEnqueue();
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff febc 	bl	8004af0 <_ZN4BG9525SetPositionControlEnqueueEv>

	AbsPosCommandEnqueue(tPos);
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff feed 	bl	8004b5a <_ZN4BG9520AbsPosCommandEnqueueEPi>

}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <_ZN4BG9513RelPosCommandEPi>:

void BG95::RelPosCommand(int *tPos)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
	SetPositionControlEnqueue();
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff feac 	bl	8004af0 <_ZN4BG9525SetPositionControlEnqueueEv>

	RelPosCommandEnqueue(tPos);
 8004d98:	6839      	ldr	r1, [r7, #0]
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff fefc 	bl	8004b98 <_ZN4BG9520RelPosCommandEnqueueEPi>
}
 8004da0:	bf00      	nop
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <_ZN4BG9515VelClockCommandEv>:

void BG95::VelClockCommand()
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
	SetVelocityControlEnqueue(true);
 8004db0:	2101      	movs	r1, #1
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ff10 	bl	8004bd8 <_ZN4BG9525SetVelocityControlEnqueueEb>
}
 8004db8:	bf00      	nop
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <_ZN4BG9516VelCClockCommandEv>:

void BG95::VelCClockCommand()
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	SetVelocityControlEnqueue(false);
 8004dc8:	2100      	movs	r1, #0
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff ff04 	bl	8004bd8 <_ZN4BG9525SetVelocityControlEnqueueEb>
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <_ZN4BG9517ClearParamCommandEv>:



void BG95::ClearParamCommand()
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	WriteDataEnqueue(0x3000, 0, 131);
 8004de0:	2383      	movs	r3, #131	; 0x83
 8004de2:	2200      	movs	r2, #0
 8004de4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7fd fa26 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
}
 8004dee:	bf00      	nop
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZN4BG9516StopMotorCommandEv>:



void BG95::StopMotorCommand()
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
	AsyncWriteDataEnqueue(0x3000, 0, 3);      // halt
 8004dfe:	2303      	movs	r3, #3
 8004e00:	2200      	movs	r2, #0
 8004e02:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fd fa8a 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <_ZN4BG9521SetMaxVelocityCommandEl>:
	*/


//write value functions
void BG95::SetMaxVelocityCommand(int32_t vel)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
	int32_t vel_ = vel;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	60fb      	str	r3, [r7, #12]

	WriteDataEnqueue(0x3300, 0, vel_);		//velocity
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fd fa05 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3321, 0, vel_);      // Velocity Max. Limit - Positive Direction - rpm
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f243 3121 	movw	r1, #13089	; 0x3321
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fd f9fe 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3323, 0, vel_);      // Velocity Max. Limit - Negative Direction - rpm
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f243 3123 	movw	r1, #13091	; 0x3323
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fd f9f7 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3000, 0, 5);     	//Updates set values
 8004e4c:	2305      	movs	r3, #5
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fd f9f0 	bl	800223a <_ZN4BG9516WriteDataEnqueueEiii>
}
 8004e5a:	bf00      	nop
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <_ZN4BG9526SetPositionMaxLimitCommandEv>:
{
	AsyncWriteDataEnqueue(0x3720, 0, this->motor_pos_);      // Position Limit - Minimum
}

void BG95::SetPositionMaxLimitCommand()
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
	AsyncWriteDataEnqueue(0x3720, 1, this->motor_pos_);      // Position Limit - Maximum
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f243 7120 	movw	r1, #14112	; 0x3720
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7fd fa53 	bl	8002320 <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e90:	d205      	bcs.n	8004e9e <_ZSt16__deque_buf_sizej+0x1c>
 8004e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9c:	e000      	b.n	8004ea0 <_ZSt16__deque_buf_sizej+0x1e>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <_ZNSt12_Vector_baseItSaItEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f9f9 	bl	80052ac <_ZNSaItED1Ev>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <_ZNSt12_Vector_baseItSaItEEC1Ev>:
      _Vector_base() = default;
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f9dc 	bl	800528c <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1Ev>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <_ZNSt6vectorItSaItEEC1Ev>:
      vector() = default;
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff ffeb 	bl	8004ec4 <_ZNSt12_Vector_baseItSaItEEC1Ev>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <_ZNSt5queueItSt5dequeItSaItEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fa33 	bl	800536e <_ZNSt5dequeItSaItEED1Ev>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <_ZN12PNFPosSensorC1Ev>:

#include "PNFPosSensor.h"
#include "transmit_tools/transmit_tools.h"


PNFPosSensor::PNFPosSensor(){};
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	4a1d      	ldr	r2, [pc, #116]	; (8004f94 <_ZN12PNFPosSensorC1Ev+0x80>)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2205      	movs	r2, #5
 8004f26:	80da      	strh	r2, [r3, #6]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	811a      	strh	r2, [r3, #8]
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	841a      	strh	r2, [r3, #32]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f5e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	649a      	str	r2, [r3, #72]	; 0x48
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	334c      	adds	r3, #76	; 0x4c
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff ffb4 	bl	8004ede <_ZNSt6vectorItSaItEEC1Ev>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	335c      	adds	r3, #92	; 0x5c
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff ffaf 	bl	8004ede <_ZNSt6vectorItSaItEEC1Ev>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3368      	adds	r3, #104	; 0x68
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 f9de 	bl	8005346 <_ZNSt5queueItSt5dequeItSaItEEEC1IS2_vEEv>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	08028988 	.word	0x08028988

08004f98 <_ZN12PNFPosSensorD1Ev>:
PNFPosSensor::~PNFPosSensor(){};
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	4a0b      	ldr	r2, [pc, #44]	; (8004fd0 <_ZN12PNFPosSensorD1Ev+0x38>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3368      	adds	r3, #104	; 0x68
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff ffa4 	bl	8004ef8 <_ZNSt5queueItSt5dequeItSaItEEED1Ev>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	335c      	adds	r3, #92	; 0x5c
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 f99e 	bl	80052f6 <_ZNSt6vectorItSaItEED1Ev>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	334c      	adds	r3, #76	; 0x4c
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 f999 	bl	80052f6 <_ZNSt6vectorItSaItEED1Ev>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	08028988 	.word	0x08028988

08004fd4 <_ZN12PNFPosSensor19TransmitSendRequestEv>:


//---------------------------------------------------------------send or read functions
uint16_t PNFPosSensor::TransmitSendRequest()
{
 8004fd4:	b590      	push	{r4, r7, lr}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	unsigned char temp_data_ =  RequestCmd[RequestQueue.front()];
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3368      	adds	r3, #104	; 0x68
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f9e6 	bl	80053b8 <_ZNSt5queueItSt5dequeItSaItEEE5frontEv>
 8004fec:	4603      	mov	r3, r0
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f000 f9ed 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	73fb      	strb	r3, [r7, #15]
	unsigned char temp_data_rev = ~temp_data_;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	43db      	mvns	r3, r3
 8005002:	73bb      	strb	r3, [r7, #14]
	unsigned char address_data[3]= {temp_data_, temp_data_rev, 0x00};
 8005004:	f107 0308 	add.w	r3, r7, #8
 8005008:	2100      	movs	r1, #0
 800500a:	460a      	mov	r2, r1
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	460a      	mov	r2, r1
 8005010:	709a      	strb	r2, [r3, #2]
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	723b      	strb	r3, [r7, #8]
 8005016:	7bbb      	ldrb	r3, [r7, #14]
 8005018:	727b      	strb	r3, [r7, #9]

	/*If uart direction is available*/
	if(this->comm_dir_available_ == true) HAL_GPIO_WritePin(this->GPIO_, this->dir_pin_no_, GPIO_PIN_SET);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d108      	bne.n	8005036 <_ZN12PNFPosSensor19TransmitSendRequestEv+0x62>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800502e:	2201      	movs	r2, #1
 8005030:	4619      	mov	r1, r3
 8005032:	f008 fbc5 	bl	800d7c0 <HAL_GPIO_WritePin>

	if (HAL_UsartTransmit(this->huartx_, address_data, (sizeof(address_data)/sizeof(address_data[0]))) == HAL_OK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503a:	f107 0108 	add.w	r1, r7, #8
 800503e:	2203      	movs	r2, #3
 8005040:	4618      	mov	r0, r3
 8005042:	f004 ff0b 	bl	8009e5c <_Z17HAL_UsartTransmitP20__UART_HandleTypeDefPhi>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf0c      	ite	eq
 800504c:	2301      	moveq	r3, #1
 800504e:	2300      	movne	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <_ZN12PNFPosSensor19TransmitSendRequestEv+0x86>
	{
		return HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	e000      	b.n	800505c <_ZN12PNFPosSensor19TransmitSendRequestEv+0x88>
	}
	else
	{
		return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
	}
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	bd90      	pop	{r4, r7, pc}

08005064 <_ZN12PNFPosSensor23TransmitReceiveResponseEv>:


uint16_t PNFPosSensor::TransmitReceiveResponse()
{
 8005064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005068:	b087      	sub	sp, #28
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
		return HAL_OK;
	}
	else
	{
		return HAL_TIMEOUT;
	}
 800506e:	466b      	mov	r3, sp
 8005070:	461e      	mov	r6, r3
	unsigned char tempdata[this->max_read_buf_size_] = {0,};
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005078:	1e59      	subs	r1, r3, #1
 800507a:	6139      	str	r1, [r7, #16]
 800507c:	460b      	mov	r3, r1
 800507e:	3301      	adds	r3, #1
 8005080:	2200      	movs	r2, #0
 8005082:	4698      	mov	r8, r3
 8005084:	4691      	mov	r9, r2
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	f04f 0300 	mov.w	r3, #0
 800508e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800509a:	460b      	mov	r3, r1
 800509c:	3301      	adds	r3, #1
 800509e:	2200      	movs	r2, #0
 80050a0:	461c      	mov	r4, r3
 80050a2:	4615      	mov	r5, r2
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	00eb      	lsls	r3, r5, #3
 80050ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050b2:	00e2      	lsls	r2, r4, #3
 80050b4:	460b      	mov	r3, r1
 80050b6:	3301      	adds	r3, #1
 80050b8:	3307      	adds	r3, #7
 80050ba:	08db      	lsrs	r3, r3, #3
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	ebad 0d03 	sub.w	sp, sp, r3
 80050c2:	466b      	mov	r3, sp
 80050c4:	3300      	adds	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	1e4b      	subs	r3, r1, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	db04      	blt.n	80050e0 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0x7c>
 80050d6:	2100      	movs	r1, #0
 80050d8:	7011      	strb	r1, [r2, #0]
 80050da:	3201      	adds	r2, #1
 80050dc:	3b01      	subs	r3, #1
 80050de:	e7f8      	b.n	80050d2 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0x6e>
	if(this->comm_dir_available_ == true) HAL_GPIO_WritePin(this->GPIO_, this->dir_pin_no_, GPIO_PIN_RESET);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d108      	bne.n	80050fc <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0x98>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050f4:	2200      	movs	r2, #0
 80050f6:	4619      	mov	r1, r3
 80050f8:	f008 fb62 	bl	800d7c0 <HAL_GPIO_WritePin>
	if(HAL_UsartReceive(this->huartx_, tempdata, this->max_read_buf_size_) == HAL_OK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005106:	461a      	mov	r2, r3
 8005108:	68f9      	ldr	r1, [r7, #12]
 800510a:	f004 fec4 	bl	8009e96 <_Z16HAL_UsartReceiveP20__UART_HandleTypeDefPhi>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf0c      	ite	eq
 8005114:	2301      	moveq	r3, #1
 8005116:	2300      	movne	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d017      	beq.n	800514e <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xea>
		for(int i = 0; i<this->max_read_buf_size_; i++)
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005128:	461a      	mov	r2, r3
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	4293      	cmp	r3, r2
 800512e:	da0c      	bge.n	800514a <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xe6>
			this->pos_buf_.emplace_back(tempdata[i]);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4413      	add	r3, r2
 800513c:	4619      	mov	r1, r3
 800513e:	f000 f958 	bl	80053f2 <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_>
		for(int i = 0; i<this->max_read_buf_size_; i++)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	3301      	adds	r3, #1
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	e7eb      	b.n	8005122 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xbe>
		return HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	e000      	b.n	8005150 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xec>
		return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	46b5      	mov	sp, r6
}
 8005152:	4618      	mov	r0, r3
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800515c <_ZN12PNFPosSensor16QueueSaveRequestEt>:


//---------------------------------------------------------------Command queue functions
//queue system functions
void PNFPosSensor::QueueSaveRequest(uint16_t cmd){this->RequestQueue.push(cmd);}
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	807b      	strh	r3, [r7, #2]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3368      	adds	r3, #104	; 0x68
 800516c:	1cba      	adds	r2, r7, #2
 800516e:	4611      	mov	r1, r2
 8005170:	4618      	mov	r0, r3
 8005172:	f000 f96c 	bl	800544e <_ZNSt5queueItSt5dequeItSaItEEE4pushERKt>
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <_ZN12PNFPosSensor18QueueDeleteRequestEv>:
void PNFPosSensor::QueueDeleteRequest()
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
	if(this->now_filter_cnt_ == 0) this->RequestQueue.pop();
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	891b      	ldrh	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d104      	bne.n	8005198 <_ZN12PNFPosSensor18QueueDeleteRequestEv+0x1a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3368      	adds	r3, #104	; 0x68
 8005192:	4618      	mov	r0, r3
 8005194:	f000 f969 	bl	800546a <_ZNSt5queueItSt5dequeItSaItEEE3popEv>
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <_ZN12PNFPosSensor14IsInfoFilteredEv>:


//---------------------------------------------------------------filter functions

bool PNFPosSensor::IsInfoFiltered()
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
	return (this->now_filter_cnt_>= this->max_filter_cnt_);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	891a      	ldrh	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	88db      	ldrh	r3, [r3, #6]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	bf2c      	ite	cs
 80051b4:	2301      	movcs	r3, #1
 80051b6:	2300      	movcc	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <_ZN12PNFPosSensor10IsWorkDoneEv>:

bool PNFPosSensor::IsWorkDone()
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
	return !(this->now_filter_cnt_ == 0);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	891b      	ldrh	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf14      	ite	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	2300      	moveq	r3, #0
 80051da:	b2db      	uxtb	r3, r3
}
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <_ZN12PNFPosSensor13FilterCountUpEv>:


void PNFPosSensor::FilterCountUp()
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	if(this->now_filter_cnt_< this->max_filter_cnt_) this->now_filter_cnt_++;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	891a      	ldrh	r2, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	88db      	ldrh	r3, [r3, #6]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d205      	bcs.n	8005208 <_ZN12PNFPosSensor13FilterCountUpEv+0x20>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	891b      	ldrh	r3, [r3, #8]
 8005200:	3301      	adds	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	811a      	strh	r2, [r3, #8]
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <_ZN12PNFPosSensor16FilterCountResetEv>:

void PNFPosSensor::FilterCountReset()
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	this->now_filter_cnt_ = 0;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	811a      	strh	r2, [r3, #8]
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <_ZN12PNFPosSensor7IsErrUpEv>:


//---------------------------------------------------------------public main functions
bool PNFPosSensor::IsErrUp()
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
	if(this->err_code_ >= 1) return true;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8c1b      	ldrh	r3, [r3, #32]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <_ZN12PNFPosSensor7IsErrUpEv+0x14>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <_ZN12PNFPosSensor7IsErrUpEv+0x16>
	else return false;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <_ZN12PNFPosSensor5DriveEv>:


bool PNFPosSensor::Drive()
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	DriveInit();
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3308      	adds	r3, #8
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	4798      	blx	r3

	DriveComm();
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	330c      	adds	r3, #12
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	4798      	blx	r3

	DriveAnalysis();
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3310      	adds	r3, #16
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	4798      	blx	r3

	return IsWorkDone();
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff ffa2 	bl	80051c6 <_ZN12PNFPosSensor10IsWorkDoneEv>
 8005282:	4603      	mov	r3, r0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f8f4 	bl	8005482 <_ZNSaItEC1Ev>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f8fc 	bl	800549a <_ZNSt12_Vector_baseItSaItEE17_Vector_impl_dataC1Ev>
	{ }
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <_ZNSaItED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f904 	bl	80054c2 <_ZN9__gnu_cxx13new_allocatorItED1Ev>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <_ZNSt12_Vector_baseItSaItEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	105b      	asrs	r3, r3, #1
	_M_deallocate(_M_impl._M_start,
 80052dc:	461a      	mov	r2, r3
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f8fa 	bl	80054d8 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
      }
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fde0 	bl	8004eac <_ZNSt12_Vector_baseItSaItEE12_Vector_implD1Ev>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <_ZNSt6vectorItSaItEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80052f6:	b5b0      	push	{r4, r5, r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681c      	ldr	r4, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4618      	mov	r0, r3
 800530a:	f000 f8f8 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 800530e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005310:	461a      	mov	r2, r3
 8005312:	4629      	mov	r1, r5
 8005314:	4620      	mov	r0, r4
 8005316:	f000 f8fd 	bl	8005514 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
      }
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff ffd1 	bl	80052c4 <_ZNSt12_Vector_baseItSaItEED1Ev>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bdb0      	pop	{r4, r5, r7, pc}

0800532c <_ZNSt5dequeItSaItEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 f906 	bl	8005548 <_ZNSt11_Deque_baseItSaItEEC1Ev>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <_ZNSt5queueItSt5dequeItSaItEEEC1IS2_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8005346:	b580      	push	{r7, lr}
 8005348:	b082      	sub	sp, #8
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
	: c() { }
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4618      	mov	r0, r3
 8005352:	2328      	movs	r3, #40	; 0x28
 8005354:	461a      	mov	r2, r3
 8005356:	2100      	movs	r1, #0
 8005358:	f01e fcea 	bl	8023d30 <memset>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff ffe4 	bl	800532c <_ZNSt5dequeItSaItEEC1Ev>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <_ZNSt5dequeItSaItEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800536e:	b580      	push	{r7, lr}
 8005370:	b08a      	sub	sp, #40	; 0x28
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8005376:	f107 0308 	add.w	r3, r7, #8
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f916 	bl	80055ae <_ZNSt5dequeItSaItEE5beginEv>
 8005382:	f107 0318 	add.w	r3, r7, #24
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4618      	mov	r0, r3
 800538a:	f000 f91f 	bl	80055cc <_ZNSt5dequeItSaItEE3endEv>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4618      	mov	r0, r3
 8005392:	f000 f92a 	bl	80055ea <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005396:	4603      	mov	r3, r0
 8005398:	f107 0218 	add.w	r2, r7, #24
 800539c:	f107 0108 	add.w	r1, r7, #8
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f949 	bl	8005638 <_ZNSt5dequeItSaItEE15_M_destroy_dataESt15_Deque_iteratorItRtPtES5_RKS0_>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 f8de 	bl	800556a <_ZNSt11_Deque_baseItSaItEED1Ev>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4618      	mov	r0, r3
 80053b2:	3728      	adds	r7, #40	; 0x28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <_ZNSt5queueItSt5dequeItSaItEEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %queue.
       */
      reference
      front()
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.front();
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 f945 	bl	8005652 <_ZNSt5dequeItSaItEE5frontEv>
 80053c8:	4603      	mov	r3, r0
      }
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <_ZNSt6vectorItSaItEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	4413      	add	r3, r2
      }
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 80053f2:	b5b0      	push	{r4, r5, r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	429a      	cmp	r2, r3
 8005406:	d011      	beq.n	800542c <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8005408:	687c      	ldr	r4, [r7, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685d      	ldr	r5, [r3, #4]
 800540e:	6838      	ldr	r0, [r7, #0]
 8005410:	f000 f933 	bl	800567a <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005414:	4603      	mov	r3, r0
 8005416:	461a      	mov	r2, r3
 8005418:	4629      	mov	r1, r5
 800541a:	4620      	mov	r0, r4
 800541c:	f000 f938 	bl	8005690 <_ZNSt16allocator_traitsISaItEE9constructItJRhEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	1c9a      	adds	r2, r3, #2
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	605a      	str	r2, [r3, #4]
      }
 800542a:	e00c      	b.n	8005446 <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f942 	bl	80056b6 <_ZNSt6vectorItSaItEE3endEv>
 8005432:	4604      	mov	r4, r0
 8005434:	6838      	ldr	r0, [r7, #0]
 8005436:	f000 f920 	bl	800567a <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 800543a:	4603      	mov	r3, r0
 800543c:	461a      	mov	r2, r3
 800543e:	4621      	mov	r1, r4
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f95f 	bl	8005704 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
      }
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bdb0      	pop	{r4, r5, r7, pc}

0800544e <_ZNSt5queueItSt5dequeItSaItEEE4pushERKt>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fa0d 	bl	800587c <_ZNSt5dequeItSaItEE9push_backERKt>
 8005462:	bf00      	nop
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <_ZNSt5queueItSt5dequeItSaItEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fa22 	bl	80058be <_ZNSt5dequeItSaItEE9pop_frontEv>
      }
 800547a:	bf00      	nop
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <_ZNSaItEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fa3a 	bl	8005904 <_ZN9__gnu_cxx13new_allocatorItEC1Ev>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <_ZNSt12_Vector_baseItSaItEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	605a      	str	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	609a      	str	r2, [r3, #8]
	{ }
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4618      	mov	r0, r3
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <_ZN9__gnu_cxx13new_allocatorItED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>:
      _M_deallocate(pointer __p, size_t __n)
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
	if (__p)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fa12 	bl	800591a <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>
      }
 80054f6:	bf00      	nop
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4618      	mov	r0, r3
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fa08 	bl	8005938 <_ZSt8_DestroyIPtEvT_S1_>
    }
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <_ZNSt11_Deque_baseItSaItEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff feb7 	bl	80052ac <_ZNSaItED1Ev>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <_ZNSt11_Deque_baseItSaItEEC1Ev>:
      _Deque_base()
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f9fd 	bl	8005952 <_ZNSt11_Deque_baseItSaItEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8005558:	2100      	movs	r1, #0
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fa09 	bl	8005972 <_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEj>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <_ZNSt11_Deque_baseItSaItEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d010      	beq.n	800559c <_ZNSt11_Deque_baseItSaItEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8005582:	3304      	adds	r3, #4
 8005584:	461a      	mov	r2, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fa56 	bl	8005a38 <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6819      	ldr	r1, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	461a      	mov	r2, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fa68 	bl	8005a6c <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>
    }
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff ffc6 	bl	8005530 <_ZNSt11_Deque_baseItSaItEE11_Deque_implD1Ev>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <_ZNSt5dequeItSaItEE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	3308      	adds	r3, #8
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f81e 	bl	8005600 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <_ZNSt5dequeItSaItEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	3318      	adds	r3, #24
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f80f 	bl	8005600 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	609a      	str	r2, [r3, #8]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	60da      	str	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4618      	mov	r0, r3
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <_ZNSt5dequeItSaItEE15_M_destroy_dataESt15_Deque_iteratorItRtPtES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8005638:	b480      	push	{r7}
 800563a:	b08d      	sub	sp, #52	; 0x34
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8005646:	bf00      	nop
 8005648:	3734      	adds	r7, #52	; 0x34
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <_ZNSt5dequeItSaItEE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8005652:	b580      	push	{r7, lr}
 8005654:	b086      	sub	sp, #24
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
	return *begin();
 800565a:	f107 0308 	add.w	r3, r7, #8
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff ffa4 	bl	80055ae <_ZNSt5dequeItSaItEE5beginEv>
 8005666:	f107 0308 	add.w	r3, r7, #8
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fa1a 	bl	8005aa4 <_ZNKSt15_Deque_iteratorItRtPtEdeEv>
 8005670:	4603      	mov	r3, r0
      }
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <_ZNSt16allocator_traitsISaItEE9constructItJRhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ffec 	bl	800567a <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80056a2:	4603      	mov	r3, r0
 80056a4:	461a      	mov	r2, r3
 80056a6:	68b9      	ldr	r1, [r7, #8]
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 fa07 	bl	8005abc <_ZN9__gnu_cxx13new_allocatorItE9constructItJRhEEEvPT_DpOT0_>
	}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <_ZNSt6vectorItSaItEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	1d1a      	adds	r2, r3, #4
 80056c2:	f107 030c 	add.w	r3, r7, #12
 80056c6:	4611      	mov	r1, r2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fa0f 	bl	8005aec <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <_ZNSt6vectorItSaItEE15_S_use_relocateEv>:
      _S_use_relocate()
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 f805 	bl	80056ee <_ZNSt6vectorItSaItEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80056e4:	4603      	mov	r3, r0
      }
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <_ZNSt6vectorItSaItEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80056f6:	2301      	movs	r3, #1
      }
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005704:	b5b0      	push	{r4, r5, r7, lr}
 8005706:	b08c      	sub	sp, #48	; 0x30
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8005710:	4a59      	ldr	r2, [pc, #356]	; (8005878 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x174>)
 8005712:	2101      	movs	r1, #1
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f9f9 	bl	8005b0c <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>
 800571a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 fa36 	bl	8005b9a <_ZNSt6vectorItSaItEE5beginEv>
 800572e:	4603      	mov	r3, r0
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	f107 0214 	add.w	r2, r7, #20
 8005736:	f107 0308 	add.w	r3, r7, #8
 800573a:	4611      	mov	r1, r2
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fa3c 	bl	8005bba <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8005742:	4603      	mov	r3, r0
 8005744:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fa4a 	bl	8005be4 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8005750:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8005756:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	005b      	lsls	r3, r3, #1
	  _Alloc_traits::construct(this->_M_impl,
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	18d5      	adds	r5, r2, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff ff8a 	bl	800567a <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005766:	4603      	mov	r3, r0
 8005768:	461a      	mov	r2, r3
 800576a:	4629      	mov	r1, r5
 800576c:	4620      	mov	r0, r4
 800576e:	f7ff ff8f 	bl	8005690 <_ZNSt16allocator_traitsISaItEE9constructItJRhEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8005772:	2300      	movs	r3, #0
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8005776:	f7ff ffaf 	bl	80056d8 <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d027      	beq.n	80057d0 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005780:	f107 0308 	add.w	r3, r7, #8
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fa55 	bl	8005c34 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 800578a:	4603      	mov	r3, r0
 800578c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff feb4 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005796:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	4621      	mov	r1, r4
 800579c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800579e:	f000 fa35 	bl	8005c0c <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 80057a2:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80057a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a6:	3302      	adds	r3, #2
 80057a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80057aa:	f107 0308 	add.w	r3, r7, #8
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fa40 	bl	8005c34 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 80057b4:	4603      	mov	r3, r0
 80057b6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff fe9f 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80057c0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80057c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057c4:	6a39      	ldr	r1, [r7, #32]
 80057c6:	4620      	mov	r0, r4
 80057c8:	f000 fa20 	bl	8005c0c <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 80057cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80057ce:	e026      	b.n	800581e <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 80057d0:	f107 0308 	add.w	r3, r7, #8
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fa2d 	bl	8005c34 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 80057da:	4603      	mov	r3, r0
 80057dc:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fe8c 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80057e6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4621      	mov	r1, r4
 80057ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057ee:	f000 fa2c 	bl	8005c4a <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 80057f2:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	3302      	adds	r3, #2
 80057f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 80057fa:	f107 0308 	add.w	r3, r7, #8
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fa18 	bl	8005c34 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8005804:	4603      	mov	r3, r0
 8005806:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fe77 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005810:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8005812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005814:	6a39      	ldr	r1, [r7, #32]
 8005816:	4620      	mov	r0, r4
 8005818:	f000 fa17 	bl	8005c4a <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 800581c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800581e:	f7ff ff5b 	bl	80056d8 <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 8005822:	4603      	mov	r3, r0
 8005824:	f083 0301 	eor.w	r3, r3, #1
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fe64 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005836:	4603      	mov	r3, r0
 8005838:	461a      	mov	r2, r3
 800583a:	6a39      	ldr	r1, [r7, #32]
 800583c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800583e:	f7ff fe69 	bl	8005514 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 8005842:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	105b      	asrs	r3, r3, #1
      _M_deallocate(__old_start,
 800584e:	461a      	mov	r2, r3
 8005850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005852:	f7ff fe41 	bl	80054d8 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
      this->_M_impl._M_start = __new_start;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005860:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	441a      	add	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	609a      	str	r2, [r3, #8]
    }
 800586e:	bf00      	nop
 8005870:	3730      	adds	r7, #48	; 0x30
 8005872:	46bd      	mov	sp, r7
 8005874:	bdb0      	pop	{r4, r5, r7, pc}
 8005876:	bf00      	nop
 8005878:	08025204 	.word	0x08025204

0800587c <_ZNSt5dequeItSaItEE9push_backERKt>:
      push_back(const value_type& __x)
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	3b02      	subs	r3, #2
	if (this->_M_impl._M_finish._M_cur
 8005890:	429a      	cmp	r2, r3
 8005892:	d00c      	beq.n	80058ae <_ZNSt5dequeItSaItEE9push_backERKt+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	4619      	mov	r1, r3
 800589e:	f000 f9fa 	bl	8005c96 <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	1c9a      	adds	r2, r3, #2
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	619a      	str	r2, [r3, #24]
      }
 80058ac:	e003      	b.n	80058b6 <_ZNSt5dequeItSaItEE9push_backERKt+0x3a>
	  _M_push_back_aux(__x);
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fa03 	bl	8005cbc <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_>
      }
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <_ZNSt5dequeItSaItEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	3b02      	subs	r3, #2
	if (this->_M_impl._M_start._M_cur
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d010      	beq.n	80058f6 <_ZNSt5dequeItSaItEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fe87 	bl	80055ea <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 80058dc:	4602      	mov	r2, r0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f000 f9c9 	bl	8005c7c <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	1c9a      	adds	r2, r3, #2
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	609a      	str	r2, [r3, #8]
      }
 80058f4:	e002      	b.n	80058fc <_ZNSt5dequeItSaItEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fa24 	bl	8005d44 <_ZNSt5dequeItSaItEE16_M_pop_front_auxEv>
      }
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <_ZN9__gnu_cxx13new_allocatorItEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fa32 	bl	8005d94 <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>
 8005930:	bf00      	nop
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <_ZSt8_DestroyIPtEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fa35 	bl	8005db4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPtEEvT_S3_>
    }
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <_ZNSt11_Deque_baseItSaItEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff fd91 	bl	8005482 <_ZNSaItEC1Ev>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fa31 	bl	8005dca <_ZNSt11_Deque_baseItSaItEE16_Deque_impl_dataC1Ev>
	{ }
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8005972:	b590      	push	{r4, r7, lr}
 8005974:	b089      	sub	sp, #36	; 0x24
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800597c:	2002      	movs	r0, #2
 800597e:	f7ff fa80 	bl	8004e82 <_ZSt16__deque_buf_sizej>
 8005982:	4602      	mov	r2, r0
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	fbb3 f3f2 	udiv	r3, r3, r2
 800598a:	3301      	adds	r3, #1
 800598c:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800598e:	2308      	movs	r3, #8
 8005990:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	3302      	adds	r3, #2
 8005996:	613b      	str	r3, [r7, #16]
 8005998:	f107 0210 	add.w	r2, r7, #16
 800599c:	f107 030c 	add.w	r3, r7, #12
 80059a0:	4611      	mov	r1, r2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe f93b 	bl	8003c1e <_ZSt3maxIjERKT_S2_S2_>
 80059a8:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fa20 	bl	8005dfc <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>
 80059bc:	4602      	mov	r2, r0
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6859      	ldr	r1, [r3, #4]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	1acb      	subs	r3, r1, r3
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80059d2:	4413      	add	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	4413      	add	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	69b9      	ldr	r1, [r7, #24]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa26 	bl	8005e36 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3308      	adds	r3, #8
 80059ee:	69b9      	ldr	r1, [r7, #24]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fa3a 	bl	8005e6a <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f103 0218 	add.w	r2, r3, #24
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	3b04      	subs	r3, #4
 8005a00:	4619      	mov	r1, r3
 8005a02:	4610      	mov	r0, r2
 8005a04:	f000 fa31 	bl	8005e6a <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8005a14:	2002      	movs	r0, #2
 8005a16:	f7ff fa34 	bl	8004e82 <_ZSt16__deque_buf_sizej>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a22:	fb01 f202 	mul.w	r2, r1, r2
 8005a26:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	619a      	str	r2, [r3, #24]
    }
 8005a30:	bf00      	nop
 8005a32:	3724      	adds	r7, #36	; 0x24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd90      	pop	{r4, r7, pc}

08005a38 <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_>:
    _Deque_base<_Tp, _Alloc>::
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d209      	bcs.n	8005a64 <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_+0x2c>
	_M_deallocate_node(*__n);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4619      	mov	r1, r3
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 fa20 	bl	8005e9c <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e7f1      	b.n	8005a48 <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_+0x10>
    }
 8005a64:	bf00      	nop
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005a78:	f107 0314 	add.w	r3, r7, #20
 8005a7c:	68f9      	ldr	r1, [r7, #12]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fa1f 	bl	8005ec2 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8005a84:	f107 0314 	add.w	r3, r7, #20
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fa35 	bl	8005efc <_ZNSt16allocator_traitsISaIPtEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005a92:	f107 0314 	add.w	r3, r7, #20
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fa24 	bl	8005ee4 <_ZNSaIPtED1Ev>
      }
 8005a9c:	bf00      	nop
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <_ZNKSt15_Deque_iteratorItRtPtEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <_ZN9__gnu_cxx13new_allocatorItE9constructItJRhEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005abc:	b590      	push	{r4, r7, lr}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff fdd6 	bl	800567a <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	b29c      	uxth	r4, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	2002      	movs	r0, #2
 8005ada:	f7fc f9d2 	bl	8001e82 <_ZnwjPv>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	bf00      	nop
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd90      	pop	{r4, r7, pc}

08005aec <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005b0c:	b590      	push	{r4, r7, lr}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f9fe 	bl	8005f1a <_ZNKSt6vectorItSaItEE8max_sizeEv>
 8005b1e:	4604      	mov	r4, r0
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fa0b 	bl	8005f3c <_ZNKSt6vectorItSaItEE4sizeEv>
 8005b26:	4603      	mov	r3, r0
 8005b28:	1ae2      	subs	r2, r4, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	bf34      	ite	cc
 8005b30:	2301      	movcc	r3, #1
 8005b32:	2300      	movcs	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f01c ff95 	bl	8022a6a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f9fb 	bl	8005f3c <_ZNKSt6vectorItSaItEE4sizeEv>
 8005b46:	4604      	mov	r4, r0
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f9f7 	bl	8005f3c <_ZNKSt6vectorItSaItEE4sizeEv>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	f107 0208 	add.w	r2, r7, #8
 8005b56:	f107 0310 	add.w	r3, r7, #16
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fe f85e 	bl	8003c1e <_ZSt3maxIjERKT_S2_S2_>
 8005b62:	4603      	mov	r3, r0
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4423      	add	r3, r4
 8005b68:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 f9e6 	bl	8005f3c <_ZNKSt6vectorItSaItEE4sizeEv>
 8005b70:	4602      	mov	r2, r0
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d306      	bcc.n	8005b86 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x7a>
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f9ce 	bl	8005f1a <_ZNKSt6vectorItSaItEE8max_sizeEv>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d904      	bls.n	8005b90 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x84>
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f9c7 	bl	8005f1a <_ZNKSt6vectorItSaItEE8max_sizeEv>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	e000      	b.n	8005b92 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x86>
 8005b90:	697b      	ldr	r3, [r7, #20]
      }
 8005b92:	4618      	mov	r0, r3
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd90      	pop	{r4, r7, pc}

08005b9a <_ZNSt6vectorItSaItEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	f107 030c 	add.w	r3, r7, #12
 8005ba8:	4611      	mov	r1, r2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff ff9e 	bl	8005aec <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005bba:	b590      	push	{r4, r7, lr}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f835 	bl	8005c34 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	681c      	ldr	r4, [r3, #0]
 8005bce:	6838      	ldr	r0, [r7, #0]
 8005bd0:	f000 f830 	bl	8005c34 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	1ae3      	subs	r3, r4, r3
 8005bda:	105b      	asrs	r3, r3, #1
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd90      	pop	{r4, r7, pc}

08005be4 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d006      	beq.n	8005c02 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj+0x1e>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6839      	ldr	r1, [r7, #0]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 f9af 	bl	8005f5c <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	e000      	b.n	8005c04 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj+0x20>
 8005c02:	2300      	movs	r3, #0
      }
 8005c04:	4618      	mov	r0, r3
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8005c0c:	b590      	push	{r4, r7, lr}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8005c1a:	f88d 4000 	strb.w	r4, [sp]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 f9a8 	bl	8005f7a <_ZNSt6vectorItSaItEE14_S_do_relocateEPtS2_S2_RS0_St17integral_constantIbLb1EE>
 8005c2a:	4603      	mov	r3, r0
      }
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd90      	pop	{r4, r7, pc}

08005c34 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8005c4a:	b590      	push	{r4, r7, lr}
 8005c4c:	b085      	sub	sp, #20
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f9a0 	bl	8005f9e <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 8005c5e:	4604      	mov	r4, r0
 8005c60:	68b8      	ldr	r0, [r7, #8]
 8005c62:	f000 f99c 	bl	8005f9e <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 8005c66:	4601      	mov	r1, r0
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 f9a5 	bl	8005fbc <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>
 8005c72:	4603      	mov	r3, r0
    }
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd90      	pop	{r4, r7, pc}

08005c7c <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8005c86:	6839      	ldr	r1, [r7, #0]
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f9a8 	bl	8005fde <_ZN9__gnu_cxx13new_allocatorItE7destroyItEEvPT_>
	}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f9a6 	bl	8005ff4 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	461a      	mov	r2, r3
 8005cac:	68b9      	ldr	r1, [r7, #8]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f9ab 	bl	800600a <_ZN9__gnu_cxx13new_allocatorItE9constructItJRKtEEEvPT_DpOT0_>
	}
 8005cb4:	bf00      	nop
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8005cbc:	b5b0      	push	{r4, r5, r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f9b6 	bl	8006038 <_ZNKSt5dequeItSaItEE4sizeEv>
 8005ccc:	4604      	mov	r4, r0
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f9c4 	bl	800605c <_ZNKSt5dequeItSaItEE8max_sizeEv>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	429c      	cmp	r4, r3
 8005cd8:	bf0c      	ite	eq
 8005cda:	2301      	moveq	r3, #1
 8005cdc:	2300      	movne	r3, #0
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_+0x2e>
	  __throw_length_error(
 8005ce4:	4816      	ldr	r0, [pc, #88]	; (8005d40 <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_+0x84>)
 8005ce6:	f01c fec0 	bl	8022a6a <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8005cea:	2101      	movs	r1, #1
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f9c6 	bl	800607e <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	1d1c      	adds	r4, r3, #4
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f000 f9da 	bl	80060b4 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>
 8005d00:	4603      	mov	r3, r0
 8005d02:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8005d04:	687c      	ldr	r4, [r7, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699d      	ldr	r5, [r3, #24]
 8005d0a:	6838      	ldr	r0, [r7, #0]
 8005d0c:	f000 f972 	bl	8005ff4 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8005d10:	4603      	mov	r3, r0
 8005d12:	461a      	mov	r2, r3
 8005d14:	4629      	mov	r1, r5
 8005d16:	4620      	mov	r0, r4
 8005d18:	f7ff ffbd 	bl	8005c96 <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f103 0218 	add.w	r2, r3, #24
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	3304      	adds	r3, #4
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	f000 f89d 	bl	8005e6a <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8005d40:	08025220 	.word	0x08025220

08005d44 <_ZNSt5dequeItSaItEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff fc4b 	bl	80055ea <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005d54:	4602      	mov	r2, r0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	f7ff ff8d 	bl	8005c7c <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f000 f896 	bl	8005e9c <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f103 0208 	add.w	r2, r3, #8
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f000 f873 	bl	8005e6a <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	609a      	str	r2, [r3, #8]
    }
 8005d8c:	bf00      	nop
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>:
      deallocate(_Tp* __p, size_type __t)
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	4619      	mov	r1, r3
 8005da6:	68b8      	ldr	r0, [r7, #8]
 8005da8:	f01c fe34 	bl	8022a14 <_ZdlPvj>
      }
 8005dac:	bf00      	nop
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPtEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <_ZNSt11_Deque_baseItSaItEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3308      	adds	r3, #8
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 f978 	bl	80060d8 <_ZNSt15_Deque_iteratorItRtPtEC1Ev>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3318      	adds	r3, #24
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 f973 	bl	80060d8 <_ZNSt15_Deque_iteratorItRtPtEC1Ev>
	{ }
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4618      	mov	r0, r3
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8005dfc:	b590      	push	{r4, r7, lr}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005e06:	f107 030c 	add.w	r3, r7, #12
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 f858 	bl	8005ec2 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005e12:	f107 030c 	add.w	r3, r7, #12
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 f974 	bl	8006106 <_ZNSt16allocator_traitsISaIPtEE8allocateERS1_j>
 8005e1e:	4604      	mov	r4, r0
 8005e20:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005e22:	f107 030c 	add.w	r3, r7, #12
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f85c 	bl	8005ee4 <_ZNSaIPtED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005e2c:	4623      	mov	r3, r4
      }
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd90      	pop	{r4, r7, pc}

08005e36 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_>:
    _Deque_base<_Tp, _Alloc>::
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b086      	sub	sp, #24
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d209      	bcs.n	8005e62 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 f930 	bl	80060b4 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>
 8005e54:	4602      	mov	r2, r0
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e7f1      	b.n	8005e46 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_+0x10>
    }
 8005e62:	bf00      	nop
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8005e6a:	b590      	push	{r4, r7, lr}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685c      	ldr	r4, [r3, #4]
 8005e86:	f000 f94d 	bl	8006124 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	18e2      	adds	r2, r4, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	609a      	str	r2, [r3, #8]
      }
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd90      	pop	{r4, r7, pc}

08005e9c <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8005e9c:	b590      	push	{r4, r7, lr}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8005ea6:	687c      	ldr	r4, [r7, #4]
 8005ea8:	2002      	movs	r0, #2
 8005eaa:	f7fe ffea 	bl	8004e82 <_ZSt16__deque_buf_sizej>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7ff fd30 	bl	800591a <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>
      }
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd90      	pop	{r4, r7, pc}

08005ec2 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8005ecc:	6838      	ldr	r0, [r7, #0]
 8005ece:	f000 f931 	bl	8006134 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f937 	bl	800614a <_ZNSaIPtEC1ItEERKSaIT_E>
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <_ZNSaIPtED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f939 	bl	8006164 <_ZN9__gnu_cxx13new_allocatorIPtED1Ev>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <_ZNSt16allocator_traitsISaIPtEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 f934 	bl	800617a <_ZN9__gnu_cxx13new_allocatorIPtE10deallocateEPS1_j>
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <_ZNKSt6vectorItSaItEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 f952 	bl	80061ce <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 f934 	bl	800619a <_ZNSt6vectorItSaItEE11_S_max_sizeERKS0_>
 8005f32:	4603      	mov	r3, r0
 8005f34:	4618      	mov	r0, r3
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <_ZNKSt6vectorItSaItEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	105b      	asrs	r3, r3, #1
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005f66:	2200      	movs	r2, #0
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f93a 	bl	80061e4 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>
 8005f70:	4603      	mov	r3, r0
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <_ZNSt6vectorItSaItEE14_S_do_relocateEPtS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	607a      	str	r2, [r7, #4]
 8005f86:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f946 	bl	8006220 <_ZSt12__relocate_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 8005f94:	4603      	mov	r3, r0
      }
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8005fa6:	f107 030c 	add.w	r3, r7, #12
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 f954 	bl	800625a <_ZNSt13move_iteratorIPtEC1ES0_>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 f955 	bl	800627e <_ZSt18uninitialized_copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <_ZN9__gnu_cxx13new_allocatorItE7destroyItEEvPT_>:
	destroy(_Up* __p)
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <_ZN9__gnu_cxx13new_allocatorItE9constructItJRKtEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800600a:	b590      	push	{r4, r7, lr}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff ffec 	bl	8005ff4 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 800601c:	4603      	mov	r3, r0
 800601e:	881c      	ldrh	r4, [r3, #0]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4619      	mov	r1, r3
 8006024:	2002      	movs	r0, #2
 8006026:	f7fb ff2c 	bl	8001e82 <_ZnwjPv>
 800602a:	4603      	mov	r3, r0
 800602c:	4622      	mov	r2, r4
 800602e:	801a      	strh	r2, [r3, #0]
 8006030:	bf00      	nop
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	bd90      	pop	{r4, r7, pc}

08006038 <_ZNKSt5dequeItSaItEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f103 0218 	add.w	r2, r3, #24
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3308      	adds	r3, #8
 800604a:	4619      	mov	r1, r3
 800604c:	4610      	mov	r0, r2
 800604e:	f000 f928 	bl	80062a2 <_ZStmiRKSt15_Deque_iteratorItRtPtES4_>
 8006052:	4603      	mov	r3, r0
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <_ZNKSt5dequeItSaItEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4618      	mov	r0, r3
 8006068:	f000 f864 	bl	8006134 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 800606c:	4603      	mov	r3, r0
 800606e:	4618      	mov	r0, r3
 8006070:	f000 f93b 	bl	80062ea <_ZNSt5dequeItSaItEE11_S_max_sizeERKS0_>
 8006074:	4603      	mov	r3, r0
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	6809      	ldr	r1, [r1, #0]
 8006098:	1a41      	subs	r1, r0, r1
 800609a:	1089      	asrs	r1, r1, #2
 800609c:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800609e:	429a      	cmp	r2, r3
 80060a0:	d904      	bls.n	80060ac <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80060a2:	2200      	movs	r2, #0
 80060a4:	6839      	ldr	r1, [r7, #0]
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f939 	bl	800631e <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb>
      }
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80060b4:	b590      	push	{r4, r7, lr}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80060bc:	687c      	ldr	r4, [r7, #4]
 80060be:	2002      	movs	r0, #2
 80060c0:	f7fe fedf 	bl	8004e82 <_ZSt16__deque_buf_sizej>
 80060c4:	4603      	mov	r3, r0
 80060c6:	4619      	mov	r1, r3
 80060c8:	4620      	mov	r0, r4
 80060ca:	f7ff ff47 	bl	8005f5c <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>
 80060ce:	4603      	mov	r3, r0
      }
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd90      	pop	{r4, r7, pc}

080060d8 <_ZNSt15_Deque_iteratorItRtPtEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	605a      	str	r2, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	609a      	str	r2, [r3, #8]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	60da      	str	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <_ZNSt16allocator_traitsISaIPtEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8006106:	b580      	push	{r7, lr}
 8006108:	b082      	sub	sp, #8
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006110:	2200      	movs	r2, #0
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f99c 	bl	8006452 <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv>
 800611a:	4603      	mov	r3, r0
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8006128:	2002      	movs	r0, #2
 800612a:	f7fe feaa 	bl	8004e82 <_ZSt16__deque_buf_sizej>
 800612e:	4603      	mov	r3, r0
 8006130:	4618      	mov	r0, r3
 8006132:	bd80      	pop	{r7, pc}

08006134 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <_ZNSaIPtEC1ItEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	6039      	str	r1, [r7, #0]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f99a 	bl	800648e <_ZN9__gnu_cxx13new_allocatorIPtEC1Ev>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4618      	mov	r0, r3
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <_ZN9__gnu_cxx13new_allocatorIPtED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <_ZN9__gnu_cxx13new_allocatorIPtE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4619      	mov	r1, r3
 800618c:	68b8      	ldr	r0, [r7, #8]
 800618e:	f01c fc41 	bl	8022a14 <_ZdlPvj>
      }
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <_ZNSt6vectorItSaItEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80061a2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80061a6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f97b 	bl	80064a4 <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>
 80061ae:	4603      	mov	r3, r0
 80061b0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80061b2:	f107 0208 	add.w	r2, r7, #8
 80061b6:	f107 030c 	add.w	r3, r7, #12
 80061ba:	4611      	mov	r1, r2
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fd ffeb 	bl	8004198 <_ZSt3minIjERKT_S2_S2_>
 80061c2:	4603      	mov	r3, r0
 80061c4:	681b      	ldr	r3, [r3, #0]
      }
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4618      	mov	r0, r3
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f963 	bl	80064bc <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>
 80061f6:	4602      	mov	r2, r0
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4293      	cmp	r3, r2
 80061fc:	bf8c      	ite	hi
 80061fe:	2301      	movhi	r3, #1
 8006200:	2300      	movls	r3, #0
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006208:	f01c fc29 	bl	8022a5e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	4618      	mov	r0, r3
 8006212:	f01c fc10 	bl	8022a36 <_Znwj>
 8006216:	4603      	mov	r3, r0
      }
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <_ZSt12__relocate_aIPtS0_SaItEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006220:	b5b0      	push	{r4, r5, r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f950 	bl	80064d4 <_ZSt12__niter_baseIPtET_S1_>
 8006234:	4604      	mov	r4, r0
 8006236:	68b8      	ldr	r0, [r7, #8]
 8006238:	f000 f94c 	bl	80064d4 <_ZSt12__niter_baseIPtET_S1_>
 800623c:	4605      	mov	r5, r0
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f948 	bl	80064d4 <_ZSt12__niter_baseIPtET_S1_>
 8006244:	4602      	mov	r2, r0
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	4629      	mov	r1, r5
 800624a:	4620      	mov	r0, r4
 800624c:	f000 f94d 	bl	80064ea <_ZSt14__relocate_a_1IttENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8006250:	4603      	mov	r3, r0
    }
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bdb0      	pop	{r4, r5, r7, pc}

0800625a <_ZNSt13move_iteratorIPtEC1ES0_>:
      move_iterator(iterator_type __i)
 800625a:	b580      	push	{r7, lr}
 800625c:	b082      	sub	sp, #8
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8006264:	463b      	mov	r3, r7
 8006266:	4618      	mov	r0, r3
 8006268:	f000 f95d 	bl	8006526 <_ZSt4moveIRPtEONSt16remove_referenceIT_E4typeEOS3_>
 800626c:	4603      	mov	r3, r0
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <_ZSt18uninitialized_copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800627e:	b580      	push	{r7, lr}
 8006280:	b086      	sub	sp, #24
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800628a:	2301      	movs	r3, #1
 800628c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	68b9      	ldr	r1, [r7, #8]
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 f952 	bl	800653c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPtES3_EET0_T_S6_S5_>
 8006298:	4603      	mov	r3, r0
    }
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <_ZStmiRKSt15_Deque_iteratorItRtPtES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b082      	sub	sp, #8
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80062ac:	f7ff ff3a 	bl	8006124 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 80062b0:	4603      	mov	r3, r0
 80062b2:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	109b      	asrs	r3, r3, #2
 80062c0:	3b01      	subs	r3, #1
 80062c2:	fb01 f303 	mul.w	r3, r1, r3
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6811      	ldr	r1, [r2, #0]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6852      	ldr	r2, [r2, #4]
 80062ce:	1a8a      	subs	r2, r1, r2
 80062d0:	1052      	asrs	r2, r2, #1
 80062d2:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	6891      	ldr	r1, [r2, #8]
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	6812      	ldr	r2, [r2, #0]
 80062dc:	1a8a      	subs	r2, r1, r2
 80062de:	1052      	asrs	r2, r2, #1
 80062e0:	4413      	add	r3, r2
      }
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <_ZNSt5dequeItSaItEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80062f2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80062f6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f8d3 	bl	80064a4 <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>
 80062fe:	4603      	mov	r3, r0
 8006300:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006302:	f107 0208 	add.w	r2, r7, #8
 8006306:	f107 030c 	add.w	r3, r7, #12
 800630a:	4611      	mov	r1, r2
 800630c:	4618      	mov	r0, r3
 800630e:	f7fd ff43 	bl	8004198 <_ZSt3minIjERKT_S2_S2_>
 8006312:	4603      	mov	r3, r0
 8006314:	681b      	ldr	r3, [r3, #0]
      }
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800631e:	b590      	push	{r4, r7, lr}
 8006320:	b08b      	sub	sp, #44	; 0x2c
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	4613      	mov	r3, r2
 800632a:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	109b      	asrs	r3, r3, #2
 8006338:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800633a:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	6a3a      	ldr	r2, [r7, #32]
 8006340:	4413      	add	r3, r2
 8006342:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	429a      	cmp	r2, r3
 800634e:	d92d      	bls.n	80063ac <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	1acb      	subs	r3, r1, r3
 800635c:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800635e:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x4e>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	e000      	b.n	800636e <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x50>
 800636c:	2300      	movs	r3, #0
 800636e:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006370:	4413      	add	r3, r2
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637a:	429a      	cmp	r2, r3
 800637c:	d209      	bcs.n	8006392 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8006386:	3304      	adds	r3, #4
 8006388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638a:	4619      	mov	r1, r3
 800638c:	f000 f8e6 	bl	800655c <_ZSt4copyIPPtS1_ET0_T_S3_S2_>
 8006390:	e048      	b.n	8006424 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800639a:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80063a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a2:	4413      	add	r3, r2
 80063a4:	461a      	mov	r2, r3
 80063a6:	f000 f8f1 	bl	800658c <_ZSt13copy_backwardIPPtS1_ET0_T_S3_S2_>
 80063aa:	e03b      	b.n	8006424 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3304      	adds	r3, #4
 80063b4:	f107 0208 	add.w	r2, r7, #8
 80063b8:	4611      	mov	r1, r2
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fd fc2f 	bl	8003c1e <_ZSt3maxIjERKT_S2_S2_>
 80063c0:	4603      	mov	r3, r0
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80063c6:	3302      	adds	r3, #2
 80063c8:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	69b9      	ldr	r1, [r7, #24]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff fd14 	bl	8005dfc <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>
 80063d4:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	085b      	lsrs	r3, r3, #1
 80063de:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0xce>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	e000      	b.n	80063ee <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0xd0>
 80063ec:	2300      	movs	r3, #0
 80063ee:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4413      	add	r3, r2
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80063fe:	3304      	adds	r3, #4
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	4619      	mov	r1, r3
 8006404:	f000 f8aa 	bl	800655c <_ZSt4copyIPPtS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6819      	ldr	r1, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	461a      	mov	r2, r3
 8006414:	f7ff fb2a 	bl	8005a6c <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>

	  this->_M_impl._M_map = __new_map;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3308      	adds	r3, #8
 8006428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff fd1d 	bl	8005e6a <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f103 0018 	add.w	r0, r3, #24
 8006436:	6a3a      	ldr	r2, [r7, #32]
 8006438:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006442:	4413      	add	r3, r2
 8006444:	4619      	mov	r1, r3
 8006446:	f7ff fd10 	bl	8005e6a <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
    }
 800644a:	bf00      	nop
 800644c:	372c      	adds	r7, #44	; 0x2c
 800644e:	46bd      	mov	sp, r7
 8006450:	bd90      	pop	{r4, r7, pc}

08006452 <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 f8ac 	bl	80065bc <_ZNK9__gnu_cxx13new_allocatorIPtE11_M_max_sizeEv>
 8006464:	4602      	mov	r2, r0
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4293      	cmp	r3, r2
 800646a:	bf8c      	ite	hi
 800646c:	2301      	movhi	r3, #1
 800646e:	2300      	movls	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006476:	f01c faf2 	bl	8022a5e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4618      	mov	r0, r3
 8006480:	f01c fad9 	bl	8022a36 <_Znwj>
 8006484:	4603      	mov	r3, r0
      }
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <_ZN9__gnu_cxx13new_allocatorIPtEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f891 	bl	80065d4 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>
 80064b2:	4603      	mov	r3, r0
      }
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80064c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80064c8:	4618      	mov	r0, r3
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <_ZSt12__niter_baseIPtET_S1_>:
    __niter_base(_Iterator __it)
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
    { return __it; }
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4618      	mov	r0, r3
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <_ZSt14__relocate_a_1IttENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b086      	sub	sp, #24
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	105b      	asrs	r3, r3, #1
 8006500:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	dd06      	ble.n	8006516 <_ZSt14__relocate_a_1IttENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	461a      	mov	r2, r3
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f01d fbf3 	bl	8023cfc <memmove>
      return __result + __count;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	4413      	add	r3, r2
    }
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <_ZSt4moveIRPtEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPtES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f84d 	bl	80065ec <_ZSt4copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>
 8006552:	4603      	mov	r3, r0
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <_ZSt4copyIPPtS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 800655c:	b590      	push	{r4, r7, lr}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 f857 	bl	800661c <_ZSt12__miter_baseIPPtET_S2_>
 800656e:	4604      	mov	r4, r0
 8006570:	68b8      	ldr	r0, [r7, #8]
 8006572:	f000 f853 	bl	800661c <_ZSt12__miter_baseIPPtET_S2_>
 8006576:	4603      	mov	r3, r0
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	4619      	mov	r1, r3
 800657c:	4620      	mov	r0, r4
 800657e:	f000 f858 	bl	8006632 <_ZSt13__copy_move_aILb0EPPtS1_ET1_T0_S3_S2_>
 8006582:	4603      	mov	r3, r0
    }
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	bd90      	pop	{r4, r7, pc}

0800658c <_ZSt13copy_backwardIPPtS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800658c:	b590      	push	{r4, r7, lr}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 f83f 	bl	800661c <_ZSt12__miter_baseIPPtET_S2_>
 800659e:	4604      	mov	r4, r0
 80065a0:	68b8      	ldr	r0, [r7, #8]
 80065a2:	f000 f83b 	bl	800661c <_ZSt12__miter_baseIPPtET_S2_>
 80065a6:	4603      	mov	r3, r0
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	4619      	mov	r1, r3
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 f863 	bl	8006678 <_ZSt22__copy_move_backward_aILb0EPPtS1_ET1_T0_S3_S2_>
 80065b2:	4603      	mov	r3, r0
    }
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd90      	pop	{r4, r7, pc}

080065bc <_ZNK9__gnu_cxx13new_allocatorIPtE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80065c4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff ff6d 	bl	80064bc <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>
 80065e2:	4603      	mov	r3, r0
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <_ZSt4copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80065ec:	b590      	push	{r4, r7, lr}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f860 	bl	80066be <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80065fe:	4604      	mov	r4, r0
 8006600:	68b8      	ldr	r0, [r7, #8]
 8006602:	f000 f85c 	bl	80066be <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006606:	4603      	mov	r3, r0
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	4619      	mov	r1, r3
 800660c:	4620      	mov	r0, r4
 800660e:	f000 f867 	bl	80066e0 <_ZSt13__copy_move_aILb1EPtS0_ET1_T0_S2_S1_>
 8006612:	4603      	mov	r3, r0
    }
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	bd90      	pop	{r4, r7, pc}

0800661c <_ZSt12__miter_baseIPPtET_S2_>:
    __miter_base(_Iterator __it)
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4618      	mov	r0, r3
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <_ZSt13__copy_move_aILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006632:	b5b0      	push	{r4, r5, r7, lr}
 8006634:	b084      	sub	sp, #16
 8006636:	af00      	add	r7, sp, #0
 8006638:	60f8      	str	r0, [r7, #12]
 800663a:	60b9      	str	r1, [r7, #8]
 800663c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 f871 	bl	8006726 <_ZSt12__niter_baseIPPtET_S2_>
 8006644:	4604      	mov	r4, r0
 8006646:	68b8      	ldr	r0, [r7, #8]
 8006648:	f000 f86d 	bl	8006726 <_ZSt12__niter_baseIPPtET_S2_>
 800664c:	4605      	mov	r5, r0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4618      	mov	r0, r3
 8006652:	f000 f868 	bl	8006726 <_ZSt12__niter_baseIPPtET_S2_>
 8006656:	4603      	mov	r3, r0
 8006658:	461a      	mov	r2, r3
 800665a:	4629      	mov	r1, r5
 800665c:	4620      	mov	r0, r4
 800665e:	f000 f86d 	bl	800673c <_ZSt14__copy_move_a1ILb0EPPtS1_ET1_T0_S3_S2_>
 8006662:	4602      	mov	r2, r0
 8006664:	1d3b      	adds	r3, r7, #4
 8006666:	4611      	mov	r1, r2
 8006668:	4618      	mov	r0, r3
 800666a:	f000 f877 	bl	800675c <_ZSt12__niter_wrapIPPtET_RKS2_S2_>
 800666e:	4603      	mov	r3, r0
    }
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bdb0      	pop	{r4, r5, r7, pc}

08006678 <_ZSt22__copy_move_backward_aILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8006678:	b5b0      	push	{r4, r5, r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 f84e 	bl	8006726 <_ZSt12__niter_baseIPPtET_S2_>
 800668a:	4604      	mov	r4, r0
 800668c:	68b8      	ldr	r0, [r7, #8]
 800668e:	f000 f84a 	bl	8006726 <_ZSt12__niter_baseIPPtET_S2_>
 8006692:	4605      	mov	r5, r0
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4618      	mov	r0, r3
 8006698:	f000 f845 	bl	8006726 <_ZSt12__niter_baseIPPtET_S2_>
 800669c:	4603      	mov	r3, r0
 800669e:	461a      	mov	r2, r3
 80066a0:	4629      	mov	r1, r5
 80066a2:	4620      	mov	r0, r4
 80066a4:	f000 f866 	bl	8006774 <_ZSt23__copy_move_backward_a1ILb0EPPtS1_ET1_T0_S3_S2_>
 80066a8:	4602      	mov	r2, r0
 80066aa:	1d3b      	adds	r3, r7, #4
 80066ac:	4611      	mov	r1, r2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 f854 	bl	800675c <_ZSt12__niter_wrapIPPtET_RKS2_S2_>
 80066b4:	4603      	mov	r3, r0
    }
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bdb0      	pop	{r4, r5, r7, pc}

080066be <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80066c6:	1d3b      	adds	r3, r7, #4
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 f863 	bl	8006794 <_ZNKSt13move_iteratorIPtE4baseEv>
 80066ce:	4603      	mov	r3, r0
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 f86b 	bl	80067ac <_ZSt12__miter_baseIPtET_S1_>
 80066d6:	4603      	mov	r3, r0
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <_ZSt13__copy_move_aILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80066e0:	b5b0      	push	{r4, r5, r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff fef1 	bl	80064d4 <_ZSt12__niter_baseIPtET_S1_>
 80066f2:	4604      	mov	r4, r0
 80066f4:	68b8      	ldr	r0, [r7, #8]
 80066f6:	f7ff feed 	bl	80064d4 <_ZSt12__niter_baseIPtET_S1_>
 80066fa:	4605      	mov	r5, r0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff fee8 	bl	80064d4 <_ZSt12__niter_baseIPtET_S1_>
 8006704:	4603      	mov	r3, r0
 8006706:	461a      	mov	r2, r3
 8006708:	4629      	mov	r1, r5
 800670a:	4620      	mov	r0, r4
 800670c:	f000 f859 	bl	80067c2 <_ZSt14__copy_move_a1ILb1EPtS0_ET1_T0_S2_S1_>
 8006710:	4602      	mov	r2, r0
 8006712:	1d3b      	adds	r3, r7, #4
 8006714:	4611      	mov	r1, r2
 8006716:	4618      	mov	r0, r3
 8006718:	f000 f863 	bl	80067e2 <_ZSt12__niter_wrapIPtET_RKS1_S1_>
 800671c:	4603      	mov	r3, r0
    }
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bdb0      	pop	{r4, r5, r7, pc}

08006726 <_ZSt12__niter_baseIPPtET_S2_>:
    __niter_base(_Iterator __it)
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <_ZSt14__copy_move_a1ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	68b9      	ldr	r1, [r7, #8]
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 f854 	bl	80067fa <_ZSt14__copy_move_a2ILb0EPPtS1_ET1_T0_S3_S2_>
 8006752:	4603      	mov	r3, r0
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <_ZSt12__niter_wrapIPPtET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <_ZSt23__copy_move_backward_a1ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 f848 	bl	800681a <_ZSt23__copy_move_backward_a2ILb0EPPtS1_ET1_T0_S3_S2_>
 800678a:	4603      	mov	r3, r0
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <_ZNKSt13move_iteratorIPtE4baseEv>:
      base() const
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <_ZSt12__miter_baseIPtET_S1_>:
    __miter_base(_Iterator __it)
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4618      	mov	r0, r3
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <_ZSt14__copy_move_a1ILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	68b9      	ldr	r1, [r7, #8]
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f831 	bl	800683a <_ZSt14__copy_move_a2ILb1EPtS0_ET1_T0_S2_S1_>
 80067d8:	4603      	mov	r3, r0
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <_ZSt12__niter_wrapIPtET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
    { return __res; }
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <_ZSt14__copy_move_a2ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 f825 	bl	800685a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_>
 8006810:	4603      	mov	r3, r0
    }
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <_ZSt23__copy_move_backward_a2ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 f832 	bl	8006894 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_>
 8006830:	4603      	mov	r3, r0
    }
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <_ZSt14__copy_move_a2ILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f844 	bl	80068d8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>
 8006850:	4603      	mov	r3, r0
    }
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800685a:	b580      	push	{r7, lr}
 800685c:	b086      	sub	sp, #24
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	109b      	asrs	r3, r3, #2
 800686e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d006      	beq.n	8006884 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	461a      	mov	r2, r3
 800687c:	68f9      	ldr	r1, [r7, #12]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f01d fa3c 	bl	8023cfc <memmove>
	  return __result + _Num;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	4413      	add	r3, r2
	}
 800688c:	4618      	mov	r0, r3
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	109b      	asrs	r3, r3, #2
 80068a8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	425b      	negs	r3, r3
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	18d0      	adds	r0, r2, r3
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	461a      	mov	r2, r3
 80068c0:	68f9      	ldr	r1, [r7, #12]
 80068c2:	f01d fa1b 	bl	8023cfc <memmove>
	  return __result - _Num;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	425b      	negs	r3, r3
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	4413      	add	r3, r2
	}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	105b      	asrs	r3, r3, #1
 80068ec:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d006      	beq.n	8006902 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	461a      	mov	r2, r3
 80068fa:	68f9      	ldr	r1, [r7, #12]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f01d f9fd 	bl	8023cfc <memmove>
	  return __result + _Num;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	4413      	add	r3, r2
	}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8006912:	b5b0      	push	{r4, r5, r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7f9 fe21 	bl	8000564 <__aeabi_i2d>
 8006922:	4604      	mov	r4, r0
 8006924:	460d      	mov	r5, r1
 8006926:	6838      	ldr	r0, [r7, #0]
 8006928:	f7f9 fe1c 	bl	8000564 <__aeabi_i2d>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	ec43 2b11 	vmov	d1, r2, r3
 8006934:	ec45 4b10 	vmov	d0, r4, r5
 8006938:	f01c f966 	bl	8022c08 <pow>
 800693c:	eeb0 7a40 	vmov.f32	s14, s0
 8006940:	eef0 7a60 	vmov.f32	s15, s1
    }
 8006944:	eeb0 0a47 	vmov.f32	s0, s14
 8006948:	eef0 0a67 	vmov.f32	s1, s15
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006954 <_ZNSt6vectorItSaItEE7reserveEj>:
    vector<_Tp, _Alloc>::
 8006954:	b5b0      	push	{r4, r5, r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
      if (__n > this->max_size())
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff fadb 	bl	8005f1a <_ZNKSt6vectorItSaItEE8max_sizeEv>
 8006964:	4602      	mov	r2, r0
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	4293      	cmp	r3, r2
 800696a:	bf8c      	ite	hi
 800696c:	2301      	movhi	r3, #1
 800696e:	2300      	movls	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <_ZNSt6vectorItSaItEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 8006976:	4836      	ldr	r0, [pc, #216]	; (8006a50 <_ZNSt6vectorItSaItEE7reserveEj+0xfc>)
 8006978:	f01c f877 	bl	8022a6a <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f952 	bl	8006c26 <_ZNKSt6vectorItSaItEE8capacityEv>
 8006982:	4602      	mov	r2, r0
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	4293      	cmp	r3, r2
 8006988:	bf8c      	ite	hi
 800698a:	2301      	movhi	r3, #1
 800698c:	2300      	movls	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d059      	beq.n	8006a48 <_ZNSt6vectorItSaItEE7reserveEj+0xf4>
	  const size_type __old_size = size();
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff fad1 	bl	8005f3c <_ZNKSt6vectorItSaItEE4sizeEv>
 800699a:	60b8      	str	r0, [r7, #8]
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800699c:	f7fe fe9c 	bl	80056d8 <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d014      	beq.n	80069d0 <_ZNSt6vectorItSaItEE7reserveEj+0x7c>
	      __tmp = this->_M_allocate(__n);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff f91a 	bl	8005be4 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 80069b0:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681c      	ldr	r4, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fe fd9e 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80069c2:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4629      	mov	r1, r5
 80069c8:	4620      	mov	r0, r4
 80069ca:	f7ff f91f 	bl	8005c0c <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 80069ce:	e01f      	b.n	8006a10 <_ZNSt6vectorItSaItEE7reserveEj+0xbc>
	      __tmp = _M_allocate_and_copy(__n,
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff fae2 	bl	8005f9e <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 80069da:	4604      	mov	r4, r0
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff fadc 	bl	8005f9e <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 80069e6:	4603      	mov	r3, r0
 80069e8:	4622      	mov	r2, r4
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f92a 	bl	8006c46 <_ZNSt6vectorItSaItEE20_M_allocate_and_copyISt13move_iteratorIPtEEES4_jT_S6_>
 80069f2:	60f8      	str	r0, [r7, #12]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681c      	ldr	r4, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe fd7d 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006a04:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006a06:	461a      	mov	r2, r3
 8006a08:	4629      	mov	r1, r5
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f7fe fd82 	bl	8005514 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
	  _M_deallocate(this->_M_impl._M_start,
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	105b      	asrs	r3, r3, #1
	  _M_deallocate(this->_M_impl._M_start,
 8006a22:	461a      	mov	r2, r3
 8006a24:	f7fe fd58 	bl	80054d8 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
	  this->_M_impl._M_start = __tmp;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	441a      	add	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	441a      	add	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	609a      	str	r2, [r3, #8]
    }
 8006a48:	bf00      	nop
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8006a50:	08025250 	.word	0x08025250

08006a54 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8006a54:	b5b0      	push	{r4, r5, r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d011      	beq.n	8006a8e <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006a6a:	687c      	ldr	r4, [r7, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685d      	ldr	r5, [r3, #4]
 8006a70:	6838      	ldr	r0, [r7, #0]
 8006a72:	f000 f904 	bl	8006c7e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006a76:	4603      	mov	r3, r0
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 f909 	bl	8006c94 <_ZNSt16allocator_traitsISaItEE9constructItJiEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	1c9a      	adds	r2, r3, #2
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	605a      	str	r2, [r3, #4]
      }
 8006a8c:	e00c      	b.n	8006aa8 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fe fe11 	bl	80056b6 <_ZNSt6vectorItSaItEE3endEv>
 8006a94:	4604      	mov	r4, r0
 8006a96:	6838      	ldr	r0, [r7, #0]
 8006a98:	f000 f8f1 	bl	8006c7e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f90a 	bl	8006cbc <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
      }
 8006aa8:	bf00      	nop
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bdb0      	pop	{r4, r5, r7, pc}

08006ab0 <_ZNSt6vectorItSaItEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f9b8 	bl	8006e34 <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt>
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <_ZNKSt5queueItSt5dequeItSaItEEE5emptyEv>:
      empty() const
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 f9cd 	bl	8006e76 <_ZNKSt5dequeItSaItEE5emptyEv>
 8006adc:	4603      	mov	r3, r0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <_ZNSt6vectorItSaItEE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b082      	sub	sp, #8
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
	--this->_M_impl._M_finish;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	1e9a      	subs	r2, r3, #2
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	4619      	mov	r1, r3
 8006b00:	4610      	mov	r0, r2
 8006b02:	f7ff f8bb 	bl	8005c7c <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>
      }
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <_ZN9__gnu_cxxneIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006b0e:	b590      	push	{r4, r7, lr}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff f88b 	bl	8005c34 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	681c      	ldr	r4, [r3, #0]
 8006b22:	6838      	ldr	r0, [r7, #0]
 8006b24:	f7ff f886 	bl	8005c34 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	429c      	cmp	r4, r3
 8006b2e:	bf14      	ite	ne
 8006b30:	2301      	movne	r3, #1
 8006b32:	2300      	moveq	r3, #0
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	4618      	mov	r0, r3
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd90      	pop	{r4, r7, pc}

08006b3e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
	++_M_current;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	1c9a      	adds	r2, r3, #2
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	601a      	str	r2, [r3, #0]
	return *this;
 8006b50:	687b      	ldr	r3, [r7, #4]
      }
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <_ZNSt6vectorItSaItEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fe fd99 	bl	80056b6 <_ZNSt6vectorItSaItEE3endEv>
 8006b84:	4603      	mov	r3, r0
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	f107 030c 	add.w	r3, r7, #12
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 f983 	bl	8006e9a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>
 8006b94:	4603      	mov	r3, r0
 8006b96:	60bb      	str	r3, [r7, #8]
 8006b98:	f107 0308 	add.w	r3, r7, #8
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff ffde 	bl	8006b5e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8006ba2:	4603      	mov	r3, r0
      }
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <_ZNSt6vectorItSaItEEC1ERKS1_>:
      vector(const vector& __x)
 8006bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8006bb6:	687c      	ldr	r4, [r7, #4]
 8006bb8:	6838      	ldr	r0, [r7, #0]
 8006bba:	f7ff f9bf 	bl	8005f3c <_ZNKSt6vectorItSaItEE4sizeEv>
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff fb03 	bl	80061ce <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	f107 030c 	add.w	r3, r7, #12
 8006bce:	4611      	mov	r1, r2
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 f97b 	bl	8006ecc <_ZN9__gnu_cxx14__alloc_traitsISaItEtE17_S_select_on_copyERKS1_>
 8006bd6:	f107 030c 	add.w	r3, r7, #12
 8006bda:	461a      	mov	r2, r3
 8006bdc:	4629      	mov	r1, r5
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 f982 	bl	8006ee8 <_ZNSt12_Vector_baseItSaItEEC1EjRKS0_>
 8006be4:	f107 030c 	add.w	r3, r7, #12
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fe fb5f 	bl	80052ac <_ZNSaItED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8006bee:	6838      	ldr	r0, [r7, #0]
 8006bf0:	f000 f98e 	bl	8006f10 <_ZNKSt6vectorItSaItEE5beginEv>
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	6838      	ldr	r0, [r7, #0]
 8006bf8:	f000 f99a 	bl	8006f30 <_ZNKSt6vectorItSaItEE3endEv>
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fe fc7a 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006c0a:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8006c0c:	4622      	mov	r2, r4
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	f000 f99e 	bl	8006f52 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPttET0_T_SA_S9_RSaIT1_E>
 8006c16:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	605a      	str	r2, [r3, #4]
      }
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c26 <_ZNKSt6vectorItSaItEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	105b      	asrs	r3, r3, #1
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <_ZNSt6vectorItSaItEE20_M_allocate_and_copyISt13move_iteratorIPtEEES4_jT_S6_>:
	_M_allocate_and_copy(size_type __n,
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b086      	sub	sp, #24
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	607a      	str	r2, [r7, #4]
 8006c52:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe ffc3 	bl	8005be4 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8006c5e:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe fc4b 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006c68:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff f9a4 	bl	8005fbc <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8006c74:	697b      	ldr	r3, [r7, #20]
	}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <_ZNSt16allocator_traitsISaItEE9constructItJiEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff ffec 	bl	8006c7e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	461a      	mov	r2, r3
 8006caa:	68b9      	ldr	r1, [r7, #8]
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f961 	bl	8006f74 <_ZN9__gnu_cxx13new_allocatorItE9constructItJiEEEvPT_DpOT0_>
	}
 8006cb2:	bf00      	nop
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8006cbc:	b5b0      	push	{r4, r5, r7, lr}
 8006cbe:	b08c      	sub	sp, #48	; 0x30
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006cc8:	4a59      	ldr	r2, [pc, #356]	; (8006e30 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x174>)
 8006cca:	2101      	movs	r1, #1
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7fe ff1d 	bl	8005b0c <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>
 8006cd2:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7fe ff5a 	bl	8005b9a <_ZNSt6vectorItSaItEE5beginEv>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	f107 0214 	add.w	r2, r7, #20
 8006cee:	f107 0308 	add.w	r3, r7, #8
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fe ff60 	bl	8005bba <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe ff6e 	bl	8005be4 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8006d08:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8006d0e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	005b      	lsls	r3, r3, #1
	  _Alloc_traits::construct(this->_M_impl,
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	18d5      	adds	r5, r2, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff ffb0 	bl	8006c7e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	461a      	mov	r2, r3
 8006d22:	4629      	mov	r1, r5
 8006d24:	4620      	mov	r0, r4
 8006d26:	f7ff ffb5 	bl	8006c94 <_ZNSt16allocator_traitsISaItEE9constructItJiEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8006d2e:	f7fe fcd3 	bl	80056d8 <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d027      	beq.n	8006d88 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006d38:	f107 0308 	add.w	r3, r7, #8
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fe ff79 	bl	8005c34 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006d42:	4603      	mov	r3, r0
 8006d44:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fe fbd8 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006d4e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	4621      	mov	r1, r4
 8006d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d56:	f7fe ff59 	bl	8005c0c <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 8006d5a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5e:	3302      	adds	r3, #2
 8006d60:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006d62:	f107 0308 	add.w	r3, r7, #8
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe ff64 	bl	8005c34 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fbc3 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006d78:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d7c:	6a39      	ldr	r1, [r7, #32]
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f7fe ff44 	bl	8005c0c <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 8006d84:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006d86:	e026      	b.n	8006dd6 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8006d88:	f107 0308 	add.w	r3, r7, #8
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe ff51 	bl	8005c34 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006d92:	4603      	mov	r3, r0
 8006d94:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe fbb0 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006d9e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	4621      	mov	r1, r4
 8006da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006da6:	f7fe ff50 	bl	8005c4a <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 8006daa:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	3302      	adds	r3, #2
 8006db0:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8006db2:	f107 0308 	add.w	r3, r7, #8
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe ff3c 	bl	8005c34 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fb9b 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006dc8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8006dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dcc:	6a39      	ldr	r1, [r7, #32]
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f7fe ff3b 	bl	8005c4a <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 8006dd4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006dd6:	f7fe fc7f 	bl	80056d8 <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f083 0301 	eor.w	r3, r3, #1
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fe fb88 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006dee:	4603      	mov	r3, r0
 8006df0:	461a      	mov	r2, r3
 8006df2:	6a39      	ldr	r1, [r7, #32]
 8006df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006df6:	f7fe fb8d 	bl	8005514 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 8006dfa:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	105b      	asrs	r3, r3, #1
      _M_deallocate(__old_start,
 8006e06:	461a      	mov	r2, r3
 8006e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e0a:	f7fe fb65 	bl	80054d8 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
      this->_M_impl._M_start = __new_start;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e18:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	441a      	add	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	609a      	str	r2, [r3, #8]
    }
 8006e26:	bf00      	nop
 8006e28:	3730      	adds	r7, #48	; 0x30
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	08025260 	.word	0x08025260

08006e34 <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8006e34:	b590      	push	{r4, r7, lr}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	105b      	asrs	r3, r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00e      	beq.n	8006e6e <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe fb51 	bl	80054fe <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006e5c:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8006e5e:	461a      	mov	r2, r3
 8006e60:	4621      	mov	r1, r4
 8006e62:	6838      	ldr	r0, [r7, #0]
 8006e64:	f7fe fb56 	bl	8005514 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8006e6e:	bf00      	nop
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd90      	pop	{r4, r7, pc}

08006e76 <_ZNKSt5dequeItSaItEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f103 0218 	add.w	r2, r3, #24
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3308      	adds	r3, #8
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	f000 f88a 	bl	8006fa4 <_ZSteqRKSt15_Deque_iteratorItRtPtES4_>
 8006e90:	4603      	mov	r3, r0
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	425b      	negs	r3, r3
 8006eae:	4413      	add	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	f107 020c 	add.w	r2, r7, #12
 8006eb6:	f107 0308 	add.w	r3, r7, #8
 8006eba:	4611      	mov	r1, r2
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fe fe15 	bl	8005aec <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <_ZN9__gnu_cxx14__alloc_traitsISaItEtE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 f876 	bl	8006fcc <_ZNSt16allocator_traitsISaItEE37select_on_container_copy_constructionERKS0_>
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <_ZNSt12_Vector_baseItSaItEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 f882 	bl	8007002 <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 f890 	bl	8007026 <_ZNSt12_Vector_baseItSaItEE17_M_create_storageEj>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <_ZNKSt6vectorItSaItEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	f107 030c 	add.w	r3, r7, #12
 8006f1e:	4611      	mov	r1, r2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 f89b 	bl	800705c <_ZN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEC1ERKS2_>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <_ZNKSt6vectorItSaItEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	1d1a      	adds	r2, r3, #4
 8006f3c:	f107 030c 	add.w	r3, r7, #12
 8006f40:	4611      	mov	r1, r2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 f88a 	bl	800705c <_ZN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEC1ERKS2_>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPttET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	60f8      	str	r0, [r7, #12]
 8006f5a:	60b9      	str	r1, [r7, #8]
 8006f5c:	607a      	str	r2, [r7, #4]
 8006f5e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	68b9      	ldr	r1, [r7, #8]
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f889 	bl	800707c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <_ZN9__gnu_cxx13new_allocatorItE9constructItJiEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006f74:	b590      	push	{r4, r7, lr}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff fe7c 	bl	8006c7e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006f86:	4603      	mov	r3, r0
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	b29c      	uxth	r4, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	2002      	movs	r0, #2
 8006f92:	f7fa ff76 	bl	8001e82 <_ZnwjPv>
 8006f96:	4603      	mov	r3, r0
 8006f98:	4622      	mov	r2, r4
 8006f9a:	801a      	strh	r2, [r3, #0]
 8006f9c:	bf00      	nop
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd90      	pop	{r4, r7, pc}

08006fa4 <_ZSteqRKSt15_Deque_iteratorItRtPtES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	bf0c      	ite	eq
 8006fba:	2301      	moveq	r3, #1
 8006fbc:	2300      	movne	r3, #0
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <_ZNSt16allocator_traitsISaItEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f804 	bl	8006fe6 <_ZNSaItEC1ERKS_>
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <_ZNSaItEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f854 	bl	80070a0 <_ZN9__gnu_cxx13new_allocatorItEC1ERKS1_>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff ffe9 	bl	8006fe6 <_ZNSaItEC1ERKS_>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe fa3f 	bl	800549a <_ZNSt12_Vector_baseItSaItEE17_Vector_impl_dataC1Ev>
	{ }
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <_ZNSt12_Vector_baseItSaItEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fe fdd6 	bl	8005be4 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8007038:	4602      	mov	r2, r0
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	441a      	add	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	609a      	str	r2, [r3, #8]
      }
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <_ZN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007088:	2301      	movs	r3, #1
 800708a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	68b9      	ldr	r1, [r7, #8]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 f811 	bl	80070b8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtEET0_T_SC_SB_>
 8007096:	4603      	mov	r3, r0
    }
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <_ZN9__gnu_cxx13new_allocatorItEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	68b9      	ldr	r1, [r7, #8]
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f805 	bl	80070d8 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>
 80070ce:	4603      	mov	r3, r0
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 80070d8:	b590      	push	{r4, r7, lr}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f80f 	bl	8007108 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEET_S8_>
 80070ea:	4604      	mov	r4, r0
 80070ec:	68b8      	ldr	r0, [r7, #8]
 80070ee:	f000 f80b 	bl	8007108 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEET_S8_>
 80070f2:	4603      	mov	r3, r0
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4619      	mov	r1, r3
 80070f8:	4620      	mov	r0, r4
 80070fa:	f000 f810 	bl	800711e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET1_T0_SA_S9_>
 80070fe:	4603      	mov	r3, r0
    }
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	bd90      	pop	{r4, r7, pc}

08007108 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4618      	mov	r0, r3
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800711e:	b5b0      	push	{r4, r5, r7, lr}
 8007120:	b084      	sub	sp, #16
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f81a 	bl	8007164 <_ZSt12__niter_baseIPKtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8007130:	4604      	mov	r4, r0
 8007132:	68b8      	ldr	r0, [r7, #8]
 8007134:	f000 f816 	bl	8007164 <_ZSt12__niter_baseIPKtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8007138:	4605      	mov	r5, r0
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff f9c9 	bl	80064d4 <_ZSt12__niter_baseIPtET_S1_>
 8007142:	4603      	mov	r3, r0
 8007144:	461a      	mov	r2, r3
 8007146:	4629      	mov	r1, r5
 8007148:	4620      	mov	r0, r4
 800714a:	f000 f819 	bl	8007180 <_ZSt14__copy_move_a1ILb0EPKtPtET1_T0_S4_S3_>
 800714e:	4602      	mov	r2, r0
 8007150:	1d3b      	adds	r3, r7, #4
 8007152:	4611      	mov	r1, r2
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff fb44 	bl	80067e2 <_ZSt12__niter_wrapIPtET_RKS1_S1_>
 800715a:	4603      	mov	r3, r0
    }
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bdb0      	pop	{r4, r5, r7, pc}

08007164 <_ZSt12__niter_baseIPKtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800716c:	1d3b      	adds	r3, r7, #4
 800716e:	4618      	mov	r0, r3
 8007170:	f000 f816 	bl	80071a0 <_ZNK9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEE4baseEv>
 8007174:	4603      	mov	r3, r0
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <_ZSt14__copy_move_a1ILb0EPKtPtET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	68b9      	ldr	r1, [r7, #8]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f810 	bl	80071b6 <_ZSt14__copy_move_a2ILb0EPKtPtET1_T0_S4_S3_>
 8007196:	4603      	mov	r3, r0
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <_ZNK9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <_ZSt14__copy_move_a2ILb0EPKtPtET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 f805 	bl	80071d6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>
 80071cc:	4603      	mov	r3, r0
    }
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b086      	sub	sp, #24
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	105b      	asrs	r3, r3, #1
 80071ea:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d006      	beq.n	8007200 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	461a      	mov	r2, r3
 80071f8:	68f9      	ldr	r1, [r7, #12]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f01c fd7e 	bl	8023cfc <memmove>
	  return __result + _Num;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	4413      	add	r3, r2
	}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <_ZN6PGV100C1EttP20__UART_HandleTypeDefP12GPIO_TypeDefttddd>:
	this->unit_ = Unit;
	this->angle_offset_ = Angle_Offset;
	this->comm_dir_available_ = false;
}

PGV100::PGV100(uint16_t index,  uint16_t commtype, UART_HandleTypeDef *huartx,
 8007210:	b580      	push	{r7, lr}
 8007212:	b08a      	sub	sp, #40	; 0x28
 8007214:	af00      	add	r7, sp, #0
 8007216:	6278      	str	r0, [r7, #36]	; 0x24
 8007218:	61fb      	str	r3, [r7, #28]
 800721a:	ed87 0b04 	vstr	d0, [r7, #16]
 800721e:	ed87 1b02 	vstr	d1, [r7, #8]
 8007222:	ed87 2b00 	vstr	d2, [r7]
 8007226:	460b      	mov	r3, r1
 8007228:	847b      	strh	r3, [r7, #34]	; 0x22
 800722a:	4613      	mov	r3, r2
 800722c:	843b      	strh	r3, [r7, #32]
				GPIO_TypeDef* GPIO, uint16_t dir_pin_no, uint16_t Unit, double X_Offset, double Y_Offset, double Angle_Offset)
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	4618      	mov	r0, r3
 8007232:	f7fd fe6f 	bl	8004f14 <_ZN12PNFPosSensorC1Ev>
 8007236:	4a27      	ldr	r2, [pc, #156]	; (80072d4 <_ZN6PGV100C1EttP20__UART_HandleTypeDefP12GPIO_TypeDefttddd+0xc4>)
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	f04f 0300 	mov.w	r3, #0
 8007246:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	2200      	movs	r2, #0
 800724e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	2200      	movs	r2, #0
 8007256:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	2200      	movs	r2, #0
 800725e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	2200      	movs	r2, #0
 8007266:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007270:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800727a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
{
	this->index_ = index;
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007282:	809a      	strh	r2, [r3, #4]
	this->comm_type_ = commtype;
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	8c3a      	ldrh	r2, [r7, #32]
 8007288:	871a      	strh	r2, [r3, #56]	; 0x38
	this->x_offset_ = X_Offset;
 800728a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800728c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007290:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	this->y_offset_ = Y_Offset;
 8007294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007296:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800729a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->huartx_= huartx;
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	649a      	str	r2, [r3, #72]	; 0x48
	this->unit_ = Unit;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80072a8:	875a      	strh	r2, [r3, #58]	; 0x3a
	this->angle_offset_ = Angle_Offset;
 80072aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b0:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	this->GPIO_ = GPIO;
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40
	this->dir_pin_no_ = dir_pin_no;
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80072be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	this->comm_dir_available_ = true;
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	4618      	mov	r0, r3
 80072ce:	3728      	adds	r7, #40	; 0x28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	080289a8 	.word	0x080289a8

080072d8 <_ZN6PGV100D1Ev>:

PGV100::~PGV100(){/*Total_PNF_Sensor_Num--;*/}
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	4a05      	ldr	r2, [pc, #20]	; (80072f8 <_ZN6PGV100D1Ev+0x20>)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fd fe55 	bl	8004f98 <_ZN12PNFPosSensorD1Ev>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	080289a8 	.word	0x080289a8

080072fc <_ZN6PGV100D0Ev>:
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff ffe7 	bl	80072d8 <_ZN6PGV100D1Ev>
 800730a:	21b8      	movs	r1, #184	; 0xb8
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f01b fb81 	bl	8022a14 <_ZdlPvj>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <_ZN6PGV10012ResetAllDataEv>:
/*---------------------------------------------------*/
/*Queue - queue systems ->Queue*/

//--------------------------------------------------------------Reset all data
void PGV100::ResetAllData()
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
	this->xpos_ = 0;
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	this->ypos_ = 0;
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	f04f 0300 	mov.w	r3, #0
 800733c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	this->angle_ = 0;
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	f04f 0200 	mov.w	r2, #0
 8007346:	f04f 0300 	mov.w	r3, #0
 800734a:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	this->tagNo_ = 0;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <_ZN6PGV10018RegisterRequsetCmdEv>:



//--------------------------------------------------------------Construct level - network, first parmas. declation
void PGV100::RegisterRequsetCmd()
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b08a      	sub	sp, #40	; 0x28
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
	RequestCmd.reserve(10);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	335c      	adds	r3, #92	; 0x5c
 800736e:	210a      	movs	r1, #10
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff faef 	bl	8006954 <_ZNSt6vectorItSaItEE7reserveEj>
	RequestCmd.emplace_back(0xEC);   //0
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	335c      	adds	r3, #92	; 0x5c
 800737a:	22ec      	movs	r2, #236	; 0xec
 800737c:	60ba      	str	r2, [r7, #8]
 800737e:	f107 0208 	add.w	r2, r7, #8
 8007382:	4611      	mov	r1, r2
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff fb65 	bl	8006a54 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xE8);   //1
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	335c      	adds	r3, #92	; 0x5c
 800738e:	22e8      	movs	r2, #232	; 0xe8
 8007390:	60fa      	str	r2, [r7, #12]
 8007392:	f107 020c 	add.w	r2, r7, #12
 8007396:	4611      	mov	r1, r2
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff fb5b 	bl	8006a54 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xE4);   //2
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	335c      	adds	r3, #92	; 0x5c
 80073a2:	22e4      	movs	r2, #228	; 0xe4
 80073a4:	613a      	str	r2, [r7, #16]
 80073a6:	f107 0210 	add.w	r2, r7, #16
 80073aa:	4611      	mov	r1, r2
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7ff fb51 	bl	8006a54 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0x90);   //3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	335c      	adds	r3, #92	; 0x5c
 80073b6:	2290      	movs	r2, #144	; 0x90
 80073b8:	617a      	str	r2, [r7, #20]
 80073ba:	f107 0214 	add.w	r2, r7, #20
 80073be:	4611      	mov	r1, r2
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff fb47 	bl	8006a54 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0x88);   //4
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	335c      	adds	r3, #92	; 0x5c
 80073ca:	2288      	movs	r2, #136	; 0x88
 80073cc:	61ba      	str	r2, [r7, #24]
 80073ce:	f107 0218 	add.w	r2, r7, #24
 80073d2:	4611      	mov	r1, r2
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff fb3d 	bl	8006a54 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xC4);   //5
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	335c      	adds	r3, #92	; 0x5c
 80073de:	22c4      	movs	r2, #196	; 0xc4
 80073e0:	61fa      	str	r2, [r7, #28]
 80073e2:	f107 021c 	add.w	r2, r7, #28
 80073e6:	4611      	mov	r1, r2
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff fb33 	bl	8006a54 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xC8);   //6
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	335c      	adds	r3, #92	; 0x5c
 80073f2:	22c8      	movs	r2, #200	; 0xc8
 80073f4:	623a      	str	r2, [r7, #32]
 80073f6:	f107 0220 	add.w	r2, r7, #32
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff fb29 	bl	8006a54 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xA0);   //7
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	335c      	adds	r3, #92	; 0x5c
 8007406:	22a0      	movs	r2, #160	; 0xa0
 8007408:	627a      	str	r2, [r7, #36]	; 0x24
 800740a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800740e:	4611      	mov	r1, r2
 8007410:	4618      	mov	r0, r3
 8007412:	f7ff fb1f 	bl	8006a54 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
}
 8007416:	bf00      	nop
 8007418:	3728      	adds	r7, #40	; 0x28
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <_ZN6PGV10020RegisterDefaultParamEv>:

void PGV100::RegisterDefaultParam()
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
	//Change_XOffset(1);
	//Change_YOffset(1);
	//Change_Angle_Offset(1);
	ResetAllData();
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff ff78 	bl	800731c <_ZN6PGV10012ResetAllDataEv>
	RequestChangeDirstraight();
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f851 	bl	80074d4 <_ZN6PGV10024RequestChangeDirstraightEv>
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <_ZN6PGV10014ReadBufferInitEv>:


//Initialization for work-loop
void PGV100::ReadBufferInit()
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	int BufferLength = RequestQueue.front();
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3368      	adds	r3, #104	; 0x68
 8007448:	4618      	mov	r0, r3
 800744a:	f7fd ffb5 	bl	80053b8 <_ZNSt5queueItSt5dequeItSaItEEE5frontEv>
 800744e:	4603      	mov	r3, r0
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	60fb      	str	r3, [r7, #12]
	switch(BufferLength)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b06      	cmp	r3, #6
 8007458:	d833      	bhi.n	80074c2 <_ZN6PGV10014ReadBufferInitEv+0x86>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <_ZN6PGV10014ReadBufferInitEv+0x24>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	08007487 	.word	0x08007487
 8007464:	08007491 	.word	0x08007491
 8007468:	0800749b 	.word	0x0800749b
 800746c:	080074a5 	.word	0x080074a5
 8007470:	080074af 	.word	0x080074af
 8007474:	080074b9 	.word	0x080074b9
 8007478:	0800747d 	.word	0x0800747d
	{
		//position
		case PGV100PosRequest: this->max_read_buf_size_ = PGV100Pos; break;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2215      	movs	r2, #21
 8007480:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8007484:	e01d      	b.n	80074c2 <_ZN6PGV10014ReadBufferInitEv+0x86>
		//Directions
		case PGV100StraightRequest: this->max_read_buf_size_ = PGV100Dir; break;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2203      	movs	r2, #3
 800748a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800748e:	e018      	b.n	80074c2 <_ZN6PGV10014ReadBufferInitEv+0x86>
		case PGV100LeftRequest: this->max_read_buf_size_ = PGV100Dir; break;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2203      	movs	r2, #3
 8007494:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8007498:	e013      	b.n	80074c2 <_ZN6PGV10014ReadBufferInitEv+0x86>
		case PGV100RightRequest: this->max_read_buf_size_ = PGV100Dir; break;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2203      	movs	r2, #3
 800749e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80074a2:	e00e      	b.n	80074c2 <_ZN6PGV10014ReadBufferInitEv+0x86>
		//Colors
		case PGV100RedRequest: this->max_read_buf_size_ = PGV100Color; break;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2202      	movs	r2, #2
 80074a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80074ac:	e009      	b.n	80074c2 <_ZN6PGV10014ReadBufferInitEv+0x86>
		case PGV100GreenRequest: this->max_read_buf_size_ = PGV100Color; break;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2202      	movs	r2, #2
 80074b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80074b6:	e004      	b.n	80074c2 <_ZN6PGV10014ReadBufferInitEv+0x86>
		case PGV100BlueRequest: this->max_read_buf_size_ = PGV100Color; break;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80074c0:	bf00      	nop
	}
	//size initialize
	this->pos_buf_.clear();
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	334c      	adds	r3, #76	; 0x4c
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff faf2 	bl	8006ab0 <_ZNSt6vectorItSaItEE5clearEv>
}
 80074cc:	bf00      	nop
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <_ZN6PGV10024RequestChangeDirstraightEv>:
	return* this;
}

//---------------------------------------------------------------Request command
//pgv100 only
void PGV100::RequestChangeDirstraight() {QueueSaveRequest(PGV100StraightRequest);}
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2100      	movs	r1, #0
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fd fe3b 	bl	800515c <_ZN12PNFPosSensor16QueueSaveRequestEt>
 80074e6:	bf00      	nop
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <_ZN6PGV10019RequestGetPGV100PosEv>:

void PGV100::RequestChangeColoryellow() {QueueSaveRequest(PGV100RedRequest);}
void PGV100::RequestChangeColorred() {QueueSaveRequest(PGV100GreenRequest);}
void PGV100::RequestChangeColorblue() {QueueSaveRequest(PGV100BlueRequest);}

void PGV100::RequestGetPGV100Pos() {QueueSaveRequest(PGV100PosRequest);}
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b082      	sub	sp, #8
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2106      	movs	r1, #6
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fd fe2e 	bl	800515c <_ZN12PNFPosSensor16QueueSaveRequestEt>
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <_ZN6PGV10021QueueRepeatPosReqeustEv>:


//---------------------------------------------------------------Command queue functions
//queue system functions
void PGV100::QueueRepeatPosReqeust()
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
	if(RequestQueue.empty()) RequestGetPGV100Pos();
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3368      	adds	r3, #104	; 0x68
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff fad9 	bl	8006acc <_ZNKSt5queueItSt5dequeItSaItEEE5emptyEv>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <_ZN6PGV10021QueueRepeatPosReqeustEv+0x1e>
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff ffe4 	bl	80074ee <_ZN6PGV10019RequestGetPGV100PosEv>
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <_ZN6PGV10017ProcessGetERRInfoESt6vectorItSaItEE>:
double PGV100::GetUnit() const {return unit_;}
uint16_t PGV100::GetCommtype() const {return comm_type_;}


uint32_t PGV100::ProcessGetERRInfo(std::vector<uint16_t> temp_buf)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
	uint32_t err_data = ((temp_buf)[5]) & 0xFF;
 8007538:	2105      	movs	r1, #5
 800753a:	6838      	ldr	r0, [r7, #0]
 800753c:	f7fd ff49 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 8007540:	4603      	mov	r3, r0
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	60fb      	str	r3, [r7, #12]
	(err_data)|=((temp_buf)[4] << 7) & 0xFF;
 8007548:	2104      	movs	r1, #4
 800754a:	6838      	ldr	r0, [r7, #0]
 800754c:	f7fd ff41 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 8007550:	4603      	mov	r3, r0
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	01db      	lsls	r3, r3, #7
 8007556:	b2da      	uxtb	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]
	(err_data)|=((temp_buf)[3] << 14) & 0xFF;
 800755e:	2103      	movs	r1, #3
 8007560:	6838      	ldr	r0, [r7, #0]
 8007562:	f7fd ff36 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 8007566:	4603      	mov	r3, r0
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	039b      	lsls	r3, r3, #14
 800756c:	b2da      	uxtb	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4313      	orrs	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]
	(err_data)|=(((temp_buf)[2]&0x07) << 21) & 0xFF;
 8007574:	2102      	movs	r1, #2
 8007576:	6838      	ldr	r0, [r7, #0]
 8007578:	f7fd ff2b 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 800757c:	2200      	movs	r2, #0
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]
	return err_data;
 8007584:	68fb      	ldr	r3, [r7, #12]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE>:

//for getting data
bool PGV100::ProcessIsTagDetected(std::vector<uint16_t> temp_buf)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
	if((temp_buf)[1] & 0x40) return true;
 8007598:	2101      	movs	r1, #1
 800759a:	6838      	ldr	r0, [r7, #0]
 800759c:	f7fd ff19 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 80075a0:	4603      	mov	r3, r0
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	bf14      	ite	ne
 80075ac:	2301      	movne	r3, #1
 80075ae:	2300      	moveq	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE+0x2c>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e000      	b.n	80075bc <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE+0x2e>
	else return false;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <_ZN6PGV10019ProcessGetTagNumberESt6vectorItSaItEE>:

uint16_t PGV100::ProcessGetTagNumber(std::vector<uint16_t> temp_buf)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
	 uint16_t tag_num = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	81fb      	strh	r3, [r7, #14]
	 (tag_num)=((temp_buf)[17]) & 0xFF;
 80075d2:	2111      	movs	r1, #17
 80075d4:	6838      	ldr	r0, [r7, #0]
 80075d6:	f7fd fefc 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 80075da:	4603      	mov	r3, r0
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	81fb      	strh	r3, [r7, #14]
	 (tag_num)|=((temp_buf)[16]<<7) & 0xFF;
 80075e4:	2110      	movs	r1, #16
 80075e6:	6838      	ldr	r0, [r7, #0]
 80075e8:	f7fd fef3 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 80075ec:	4603      	mov	r3, r0
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	01db      	lsls	r3, r3, #7
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	89fa      	ldrh	r2, [r7, #14]
 80075f6:	b212      	sxth	r2, r2
 80075f8:	b21b      	sxth	r3, r3
 80075fa:	4313      	orrs	r3, r2
 80075fc:	b21b      	sxth	r3, r3
 80075fe:	b29b      	uxth	r3, r3
 8007600:	81fb      	strh	r3, [r7, #14]
	 (tag_num)|=((temp_buf)[15]<<14) & 0xFF;
 8007602:	210f      	movs	r1, #15
 8007604:	6838      	ldr	r0, [r7, #0]
 8007606:	f7fd fee4 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 800760a:	4603      	mov	r3, r0
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	039b      	lsls	r3, r3, #14
 8007610:	b2db      	uxtb	r3, r3
 8007612:	89fa      	ldrh	r2, [r7, #14]
 8007614:	b212      	sxth	r2, r2
 8007616:	b21b      	sxth	r3, r3
 8007618:	4313      	orrs	r3, r2
 800761a:	b21b      	sxth	r3, r3
 800761c:	b29b      	uxth	r3, r3
 800761e:	81fb      	strh	r3, [r7, #14]
	 (tag_num)|=((temp_buf)[14]<<21) & 0xFF;
 8007620:	210e      	movs	r1, #14
 8007622:	6838      	ldr	r0, [r7, #0]
 8007624:	f7fd fed5 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 8007628:	4603      	mov	r3, r0
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	055b      	lsls	r3, r3, #21
 800762e:	b2db      	uxtb	r3, r3
 8007630:	89fa      	ldrh	r2, [r7, #14]
 8007632:	b212      	sxth	r2, r2
 8007634:	b21b      	sxth	r3, r3
 8007636:	4313      	orrs	r3, r2
 8007638:	b21b      	sxth	r3, r3
 800763a:	b29b      	uxth	r3, r3
 800763c:	81fb      	strh	r3, [r7, #14]
	 return tag_num;
 800763e:	89fb      	ldrh	r3, [r7, #14]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE>:

double PGV100::ProcessGetAngleInfo(std::vector<uint16_t> temp_buf)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
	 uint16_t angle = ((temp_buf)[11]) & 0xFF;
 8007652:	210b      	movs	r1, #11
 8007654:	6838      	ldr	r0, [r7, #0]
 8007656:	f7fd febc 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 800765a:	4603      	mov	r3, r0
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	b29b      	uxth	r3, r3
 8007662:	81fb      	strh	r3, [r7, #14]
	 (angle) |= ((temp_buf)[10] << 7) &0xFF;
 8007664:	210a      	movs	r1, #10
 8007666:	6838      	ldr	r0, [r7, #0]
 8007668:	f7fd feb3 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 800766c:	4603      	mov	r3, r0
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	01db      	lsls	r3, r3, #7
 8007672:	b2db      	uxtb	r3, r3
 8007674:	89fa      	ldrh	r2, [r7, #14]
 8007676:	b212      	sxth	r2, r2
 8007678:	b21b      	sxth	r3, r3
 800767a:	4313      	orrs	r3, r2
 800767c:	b21b      	sxth	r3, r3
 800767e:	b29b      	uxth	r3, r3
 8007680:	81fb      	strh	r3, [r7, #14]

	 double angle_d = (double)angle/10;
 8007682:	89fb      	ldrh	r3, [r7, #14]
 8007684:	4618      	mov	r0, r3
 8007686:	f7f8 ff5d 	bl	8000544 <__aeabi_ui2d>
 800768a:	f04f 0200 	mov.w	r2, #0
 800768e:	4b17      	ldr	r3, [pc, #92]	; (80076ec <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0xa4>)
 8007690:	f7f9 f8fc 	bl	800088c <__aeabi_ddiv>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	e9c7 2304 	strd	r2, r3, [r7, #16]
	 if((angle_d)> 180.0f) angle_d-=360.0f; //makes x-axis zero centered
 800769c:	f04f 0200 	mov.w	r2, #0
 80076a0:	4b13      	ldr	r3, [pc, #76]	; (80076f0 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0xa8>)
 80076a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80076a6:	f7f9 fa57 	bl	8000b58 <__aeabi_dcmpgt>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00a      	beq.n	80076c6 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0x7e>
 80076b0:	f04f 0200 	mov.w	r2, #0
 80076b4:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0xac>)
 80076b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80076ba:	f7f8 fe05 	bl	80002c8 <__aeabi_dsub>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	 return angle_d + this->angle_offset_;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 80076cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80076d0:	f7f8 fdfc 	bl	80002cc <__adddf3>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80076dc:	eeb0 0a47 	vmov.f32	s0, s14
 80076e0:	eef0 0a67 	vmov.f32	s1, s15
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	40240000 	.word	0x40240000
 80076f0:	40668000 	.word	0x40668000
 80076f4:	40768000 	.word	0x40768000

080076f8 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE>:

double PGV100::ProcessGetXPosInfo(std::vector<uint16_t> temp_buf)
{
 80076f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80076fc:	b086      	sub	sp, #24
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
	int32_t XPosition_DATA=((temp_buf)[5]) & 0xFF;
 8007704:	2105      	movs	r1, #5
 8007706:	6838      	ldr	r0, [r7, #0]
 8007708:	f7fd fe63 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 800770c:	4603      	mov	r3, r0
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	60fb      	str	r3, [r7, #12]
	(XPosition_DATA)|=((temp_buf)[4] << 7) & 0xFF;
 8007714:	2104      	movs	r1, #4
 8007716:	6838      	ldr	r0, [r7, #0]
 8007718:	f7fd fe5b 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 800771c:	4603      	mov	r3, r0
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	01db      	lsls	r3, r3, #7
 8007722:	b2da      	uxtb	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4313      	orrs	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]
	(XPosition_DATA)|=((temp_buf)[4] << 14) & 0xFF;
 800772a:	2104      	movs	r1, #4
 800772c:	6838      	ldr	r0, [r7, #0]
 800772e:	f7fd fe50 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 8007732:	4603      	mov	r3, r0
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	039b      	lsls	r3, r3, #14
 8007738:	b2da      	uxtb	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4313      	orrs	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]
	(XPosition_DATA)|=(((temp_buf)[2]&0x07) << 21) & 0xFF;
 8007740:	2102      	movs	r1, #2
 8007742:	6838      	ldr	r0, [r7, #0]
 8007744:	f7fd fe45 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 8007748:	2200      	movs	r2, #0
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4313      	orrs	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]

	 //for making X-axis center to zero
	if(XPosition_DATA>=(100000)) XPosition_DATA = (XPosition_DATA-((double)(pow(2,24)-1))-((this->x_offset_)*(this->unit_)));
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4a50      	ldr	r2, [pc, #320]	; (8007894 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x19c>)
 8007754:	4293      	cmp	r3, r2
 8007756:	dd37      	ble.n	80077c8 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0xd0>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4618      	mov	r0, r3
 800775c:	f7f8 ff02 	bl	8000564 <__aeabi_i2d>
 8007760:	4604      	mov	r4, r0
 8007762:	460d      	mov	r5, r1
 8007764:	2118      	movs	r1, #24
 8007766:	2002      	movs	r0, #2
 8007768:	f7ff f8d3 	bl	8006912 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800776c:	ec51 0b10 	vmov	r0, r1, d0
 8007770:	f04f 0200 	mov.w	r2, #0
 8007774:	4b48      	ldr	r3, [pc, #288]	; (8007898 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x1a0>)
 8007776:	f7f8 fda7 	bl	80002c8 <__aeabi_dsub>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4620      	mov	r0, r4
 8007780:	4629      	mov	r1, r5
 8007782:	f7f8 fda1 	bl	80002c8 <__aeabi_dsub>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4690      	mov	r8, r2
 800778c:	4699      	mov	r9, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007798:	4618      	mov	r0, r3
 800779a:	f7f8 fee3 	bl	8000564 <__aeabi_i2d>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4620      	mov	r0, r4
 80077a4:	4629      	mov	r1, r5
 80077a6:	f7f8 ff47 	bl	8000638 <__aeabi_dmul>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4640      	mov	r0, r8
 80077b0:	4649      	mov	r1, r9
 80077b2:	f7f8 fd89 	bl	80002c8 <__aeabi_dsub>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4610      	mov	r0, r2
 80077bc:	4619      	mov	r1, r3
 80077be:	f7f9 f9eb 	bl	8000b98 <__aeabi_d2iz>
 80077c2:	4603      	mov	r3, r0
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	e021      	b.n	800780c <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x114>
	else XPosition_DATA = (XPosition_DATA-((this->x_offset_)*(this->unit_)));
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7f8 feca 	bl	8000564 <__aeabi_i2d>
 80077d0:	4680      	mov	r8, r0
 80077d2:	4689      	mov	r9, r1
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80077de:	4618      	mov	r0, r3
 80077e0:	f7f8 fec0 	bl	8000564 <__aeabi_i2d>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4620      	mov	r0, r4
 80077ea:	4629      	mov	r1, r5
 80077ec:	f7f8 ff24 	bl	8000638 <__aeabi_dmul>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4640      	mov	r0, r8
 80077f6:	4649      	mov	r1, r9
 80077f8:	f7f8 fd66 	bl	80002c8 <__aeabi_dsub>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4610      	mov	r0, r2
 8007802:	4619      	mov	r1, r3
 8007804:	f7f9 f9c8 	bl	8000b98 <__aeabi_d2iz>
 8007808:	4603      	mov	r3, r0
 800780a:	60fb      	str	r3, [r7, #12]


	double xpos = ((XPosition_DATA/(double)(this->unit_)));                   //To make units milimeters to meters
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4618      	mov	r0, r3
 8007810:	f7f8 fea8 	bl	8000564 <__aeabi_i2d>
 8007814:	4604      	mov	r4, r0
 8007816:	460d      	mov	r5, r1
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800781c:	4618      	mov	r0, r3
 800781e:	f7f8 fe91 	bl	8000544 <__aeabi_ui2d>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4620      	mov	r0, r4
 8007828:	4629      	mov	r1, r5
 800782a:	f7f9 f82f 	bl	800088c <__aeabi_ddiv>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if(xpos >= this->pos_area_min_ && xpos <= this->pos_area_max_) return xpos;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800783c:	4618      	mov	r0, r3
 800783e:	f7f8 fe91 	bl	8000564 <__aeabi_i2d>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800784a:	f7f9 f97b 	bl	8000b44 <__aeabi_dcmpge>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d011      	beq.n	8007878 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x180>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800785a:	4618      	mov	r0, r3
 800785c:	f7f8 fe82 	bl	8000564 <__aeabi_i2d>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007868:	f7f9 f962 	bl	8000b30 <__aeabi_dcmple>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x180>
 8007872:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007876:	e002      	b.n	800787e <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x186>
	else return this->xpos_;  //	  else { state |= 0x0010;} //Out of Range
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
}
 800787e:	ec43 2b17 	vmov	d7, r2, r3
 8007882:	eeb0 0a47 	vmov.f32	s0, s14
 8007886:	eef0 0a67 	vmov.f32	s1, s15
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007892:	bf00      	nop
 8007894:	0001869f 	.word	0x0001869f
 8007898:	3ff00000 	.word	0x3ff00000

0800789c <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE>:

double PGV100::ProcessGetYPosInfo(std::vector<uint16_t> temp_buf)
{
 800789c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80078a0:	b086      	sub	sp, #24
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
	int32_t YPosition_DATA = ((temp_buf)[7]) & 0xFF;//Y Buf
 80078a8:	2107      	movs	r1, #7
 80078aa:	6838      	ldr	r0, [r7, #0]
 80078ac:	f7fd fd91 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 80078b0:	4603      	mov	r3, r0
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	60fb      	str	r3, [r7, #12]
	(YPosition_DATA) |= (((temp_buf)[6]) << 7) & 0xFF;
 80078b8:	2106      	movs	r1, #6
 80078ba:	6838      	ldr	r0, [r7, #0]
 80078bc:	f7fd fd89 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 80078c0:	4603      	mov	r3, r0
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	01db      	lsls	r3, r3, #7
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]

	//for making Y-axis center to zero
	if(YPosition_DATA>=(1000))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078d4:	db24      	blt.n	8007920 <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE+0x84>
	YPosition_DATA = (YPosition_DATA-(16383)) - ((this->y_offset_)*(this->unit_));
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	4b33      	ldr	r3, [pc, #204]	; (80079a8 <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE+0x10c>)
 80078da:	4413      	add	r3, r2
 80078dc:	4618      	mov	r0, r3
 80078de:	f7f8 fe41 	bl	8000564 <__aeabi_i2d>
 80078e2:	4680      	mov	r8, r0
 80078e4:	4689      	mov	r9, r1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7f8 fe37 	bl	8000564 <__aeabi_i2d>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4620      	mov	r0, r4
 80078fc:	4629      	mov	r1, r5
 80078fe:	f7f8 fe9b 	bl	8000638 <__aeabi_dmul>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4640      	mov	r0, r8
 8007908:	4649      	mov	r1, r9
 800790a:	f7f8 fcdd 	bl	80002c8 <__aeabi_dsub>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4610      	mov	r0, r2
 8007914:	4619      	mov	r1, r3
 8007916:	f7f9 f93f 	bl	8000b98 <__aeabi_d2iz>
 800791a:	4603      	mov	r3, r0
 800791c:	60fb      	str	r3, [r7, #12]
 800791e:	e021      	b.n	8007964 <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE+0xc8>
	else YPosition_DATA = (YPosition_DATA-(this->y_offset_*(this->unit_)));
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4618      	mov	r0, r3
 8007924:	f7f8 fe1e 	bl	8000564 <__aeabi_i2d>
 8007928:	4680      	mov	r8, r0
 800792a:	4689      	mov	r9, r1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007936:	4618      	mov	r0, r3
 8007938:	f7f8 fe14 	bl	8000564 <__aeabi_i2d>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	4620      	mov	r0, r4
 8007942:	4629      	mov	r1, r5
 8007944:	f7f8 fe78 	bl	8000638 <__aeabi_dmul>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4640      	mov	r0, r8
 800794e:	4649      	mov	r1, r9
 8007950:	f7f8 fcba 	bl	80002c8 <__aeabi_dsub>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4610      	mov	r0, r2
 800795a:	4619      	mov	r1, r3
 800795c:	f7f9 f91c 	bl	8000b98 <__aeabi_d2iz>
 8007960:	4603      	mov	r3, r0
 8007962:	60fb      	str	r3, [r7, #12]

	double ypos = ((YPosition_DATA/(double)(this->unit_)));
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4618      	mov	r0, r3
 8007968:	f7f8 fdfc 	bl	8000564 <__aeabi_i2d>
 800796c:	4604      	mov	r4, r0
 800796e:	460d      	mov	r5, r1
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007974:	4618      	mov	r0, r3
 8007976:	f7f8 fde5 	bl	8000544 <__aeabi_ui2d>
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	4620      	mov	r0, r4
 8007980:	4629      	mov	r1, r5
 8007982:	f7f8 ff83 	bl	800088c <__aeabi_ddiv>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return ypos;
 800798e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007992:	ec43 2b17 	vmov	d7, r2, r3
}
 8007996:	eeb0 0a47 	vmov.f32	s0, s14
 800799a:	eef0 0a67 	vmov.f32	s1, s15
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80079a6:	bf00      	nop
 80079a8:	ffffc001 	.word	0xffffc001

080079ac <_ZN6PGV10023ProcessGetDirectionInfoESt6vectorItSaItEE>:

uint16_t PGV100::ProcessGetDirectionInfo(std::vector<uint16_t> temp_buf)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
	return (uint16_t)(temp_buf)[1]&0x03;
 80079b6:	2101      	movs	r1, #1
 80079b8:	6838      	ldr	r0, [r7, #0]
 80079ba:	f7fd fd0a 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 80079be:	4603      	mov	r3, r0
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	b29b      	uxth	r3, r3
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE>:

uint16_t PGV100::ProcessGetColorInfo(std::vector<uint16_t> temp_buf)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
	if((temp_buf)[0]&0x07 && (temp_buf)[1]&0x07) return (uint16_t)(temp_buf)[1]&0x07;
 80079da:	2100      	movs	r1, #0
 80079dc:	6838      	ldr	r0, [r7, #0]
 80079de:	f7fd fcf8 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 80079e2:	4603      	mov	r3, r0
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00b      	beq.n	8007a06 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x36>
 80079ee:	2101      	movs	r1, #1
 80079f0:	6838      	ldr	r0, [r7, #0]
 80079f2:	f7fd fcee 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 80079f6:	4603      	mov	r3, r0
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x36>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e000      	b.n	8007a08 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x38>
 8007a06:	2300      	movs	r3, #0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d009      	beq.n	8007a20 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x50>
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	6838      	ldr	r0, [r7, #0]
 8007a10:	f7fd fcdf 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 8007a14:	4603      	mov	r3, r0
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	f003 0307 	and.w	r3, r3, #7
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	e002      	b.n	8007a26 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x56>
	else return this->color_;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE>:

//---------------------------------------------------------------Processing data
//for Error checking
uint16_t PGV100::ProcessChecksumData(std::vector<uint16_t> temp_buf)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b08c      	sub	sp, #48	; 0x30
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t ChkSum_Data = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t even_cnt[8]={0,};
 8007a40:	f107 0310 	add.w	r3, r7, #16
 8007a44:	2200      	movs	r2, #0
 8007a46:	601a      	str	r2, [r3, #0]
 8007a48:	605a      	str	r2, [r3, #4]
 8007a4a:	609a      	str	r2, [r3, #8]
 8007a4c:	60da      	str	r2, [r3, #12]

	//1. the last byte is for chksum data
	temp_buf.pop_back();
 8007a4e:	6838      	ldr	r0, [r7, #0]
 8007a50:	f7ff f849 	bl	8006ae6 <_ZNSt6vectorItSaItEE8pop_backEv>

	//2. check each bytes for calculating 'xor' value
	for(uint16_t i=0; i<8; i++)
 8007a54:	2300      	movs	r3, #0
 8007a56:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007a58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a5a:	2b07      	cmp	r3, #7
 8007a5c:	d85a      	bhi.n	8007b14 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0xe6>
	{
		for (auto& index : temp_buf)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24
 8007a62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a64:	f7fe f899 	bl	8005b9a <_ZNSt6vectorItSaItEE5beginEv>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a6e:	f7fd fe22 	bl	80056b6 <_ZNSt6vectorItSaItEE3endEv>
 8007a72:	4603      	mov	r3, r0
 8007a74:	60bb      	str	r3, [r7, #8]
 8007a76:	f107 0208 	add.w	r2, r7, #8
 8007a7a:	f107 030c 	add.w	r3, r7, #12
 8007a7e:	4611      	mov	r1, r2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7ff f844 	bl	8006b0e <_ZN9__gnu_cxxneIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d026      	beq.n	8007ada <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0xac>
 8007a8c:	f107 030c 	add.w	r3, r7, #12
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7ff f864 	bl	8006b5e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8007a96:	6238      	str	r0, [r7, #32]
		{
			temp = index;
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	857b      	strh	r3, [r7, #42]	; 0x2a
			if((temp>>i)&0x01) even_cnt[i]+=1;//8bit, even
 8007a9e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007aa0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007aa2:	fa42 f303 	asr.w	r3, r2, r3
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00d      	beq.n	8007aca <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0x9c>
 8007aae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	3330      	adds	r3, #48	; 0x30
 8007ab4:	443b      	add	r3, r7
 8007ab6:	f833 2c20 	ldrh.w	r2, [r3, #-32]
 8007aba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007abc:	3201      	adds	r2, #1
 8007abe:	b292      	uxth	r2, r2
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	3330      	adds	r3, #48	; 0x30
 8007ac4:	443b      	add	r3, r7
 8007ac6:	f823 2c20 	strh.w	r2, [r3, #-32]
			temp = 0;
 8007aca:	2300      	movs	r3, #0
 8007acc:	857b      	strh	r3, [r7, #42]	; 0x2a
		for (auto& index : temp_buf)
 8007ace:	f107 030c 	add.w	r3, r7, #12
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff f833 	bl	8006b3e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>
 8007ad8:	e7cd      	b.n	8007a76 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0x48>
		}
		if(even_cnt[i]!=0) ChkSum_Data |= (even_cnt[i]%2) * (1<<i);
 8007ada:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	3330      	adds	r3, #48	; 0x30
 8007ae0:	443b      	add	r3, r7
 8007ae2:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d010      	beq.n	8007b0c <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0xde>
 8007aea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	3330      	adds	r3, #48	; 0x30
 8007af0:	443b      	add	r3, r7
 8007af2:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007af6:	f003 0201 	and.w	r2, r3, #1
 8007afa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007afc:	fa02 f303 	lsl.w	r3, r2, r3
 8007b00:	b21a      	sxth	r2, r3
 8007b02:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8007b06:	4313      	orrs	r3, r2
 8007b08:	b21b      	sxth	r3, r3
 8007b0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t i=0; i<8; i++)
 8007b0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b0e:	3301      	adds	r3, #1
 8007b10:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007b12:	e7a1      	b.n	8007a58 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0x2a>
	}
	 return ChkSum_Data;
 8007b14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3730      	adds	r7, #48	; 0x30
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE>:

uint16_t PGV100::ProcessCheckErr(std::vector<uint16_t> temp_buf)
{
 8007b1e:	b590      	push	{r4, r7, lr}
 8007b20:	b08b      	sub	sp, #44	; 0x2c
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
	 // 0x1000 = internal error (Recommend to change sensors)
	 // 0x2000 = reserved
	 // 0x4000 = reserved
	 // 0x8000 = reserved
	 //--------------------------------------------------------------------
	 uint16_t state = 0x0000;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	84fb      	strh	r3, [r7, #38]	; 0x26

	//Check Comm. Error
	if(!comm_status_)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007b32:	f083 0301 	eor.w	r3, r3, #1
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x26>
	{
		state = CommTimeout;
 8007b3c:	2340      	movs	r3, #64	; 0x40
 8007b3e:	84fb      	strh	r3, [r7, #38]	; 0x26
		return state;
 8007b40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b42:	e074      	b.n	8007c2e <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x110>
	}

	//If Comm Err is not, check others
	if((temp_buf.back()) == ProcessChecksumData(temp_buf))    //Checksum error pass or not(POS_BUF[20] <--- check sum buffer)
 8007b44:	6838      	ldr	r0, [r7, #0]
 8007b46:	f7ff f816 	bl	8006b76 <_ZNSt6vectorItSaItEE4backEv>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	881c      	ldrh	r4, [r3, #0]
 8007b4e:	f107 030c 	add.w	r3, r7, #12
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7ff f829 	bl	8006bac <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007b5a:	f107 030c 	add.w	r3, r7, #12
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff ff64 	bl	8007a2e <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE>
 8007b66:	4603      	mov	r3, r0
 8007b68:	429c      	cmp	r4, r3
 8007b6a:	bf0c      	ite	eq
 8007b6c:	2301      	moveq	r3, #1
 8007b6e:	2300      	movne	r3, #0
 8007b70:	b2dc      	uxtb	r4, r3
 8007b72:	f107 030c 	add.w	r3, r7, #12
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fd fbbd 	bl	80052f6 <_ZNSt6vectorItSaItEED1Ev>
 8007b7c:	2c00      	cmp	r4, #0
 8007b7e:	d053      	beq.n	8007c28 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10a>
	{
		if((temp_buf)[0] & 0x01)    //Err Occured
 8007b80:	2100      	movs	r1, #0
 8007b82:	6838      	ldr	r0, [r7, #0]
 8007b84:	f7fd fc25 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bf14      	ite	ne
 8007b94:	2301      	movne	r3, #1
 8007b96:	2300      	moveq	r3, #0
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d032      	beq.n	8007c04 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xe6>
		{
			uint16_t errcode =  ProcessGetERRInfo(temp_buf);
 8007b9e:	f107 0318 	add.w	r3, r7, #24
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7ff f801 	bl	8006bac <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007baa:	f107 0318 	add.w	r3, r7, #24
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff fcbc 	bl	800752e <_ZN6PGV10017ProcessGetERRInfoESt6vectorItSaItEE>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007bba:	f107 0318 	add.w	r3, r7, #24
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fd fb99 	bl	80052f6 <_ZNSt6vectorItSaItEED1Ev>
			if(errcode >= 1000) state = InternalFatal;        //Internal Fatal Error
 8007bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bca:	d303      	bcc.n	8007bd4 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xb6>
 8007bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bd0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007bd2:	e02b      	b.n	8007c2c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==1) state = ReadHeadTilted;     //read head tilted 180°.(pcv80 only)
 8007bd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d102      	bne.n	8007be0 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xc2>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007bde:	e025      	b.n	8007c2c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==2) state = CodeConditionErr;     //code condition error(code distance chk)
 8007be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d102      	bne.n	8007bec <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xce>
 8007be6:	2302      	movs	r3, #2
 8007be8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007bea:	e01f      	b.n	8007c2c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==5) state = NoDirectionDeclared;     //No clear position can be determined(�Ÿ�����)
 8007bec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bee:	2b05      	cmp	r3, #5
 8007bf0:	d102      	bne.n	8007bf8 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xda>
 8007bf2:	2304      	movs	r3, #4
 8007bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007bf6:	e019      	b.n	8007c2c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==6) state = NoColorDeclared;     // No Color decision(Set Color choice)
 8007bf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bfa:	2b06      	cmp	r3, #6
 8007bfc:	d116      	bne.n	8007c2c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
 8007bfe:	2308      	movs	r3, #8
 8007c00:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007c02:	e013      	b.n	8007c2c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
		}
		else if((temp_buf)[0]&0x02) state = NoPosition;    //No Position Error
 8007c04:	2100      	movs	r1, #0
 8007c06:	6838      	ldr	r0, [r7, #0]
 8007c08:	f7fd fbe3 	bl	80053d2 <_ZNSt6vectorItSaItEEixEj>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	bf14      	ite	ne
 8007c18:	2301      	movne	r3, #1
 8007c1a:	2300      	moveq	r3, #0
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d004      	beq.n	8007c2c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
 8007c22:	2320      	movs	r3, #32
 8007c24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007c26:	e001      	b.n	8007c2c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
	}
	else state = CheckSumErr;        //check sum error
 8007c28:	2380      	movs	r3, #128	; 0x80
 8007c2a:	84fb      	strh	r3, [r7, #38]	; 0x26

	return state;
 8007c2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	372c      	adds	r7, #44	; 0x2c
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd90      	pop	{r4, r7, pc}

08007c36 <_ZN6PGV10019ProcessGetTotalInfoEv>:



//finally we got combined function
uint16_t PGV100::ProcessGetTotalInfo()
{
 8007c36:	b590      	push	{r4, r7, lr}
 8007c38:	b0a3      	sub	sp, #140	; 0x8c
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
	//0 .Copying temp. data from received data
	std::vector<uint16_t> temp_buf_ = this->pos_buf_;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007c44:	f107 030c 	add.w	r3, r7, #12
 8007c48:	4611      	mov	r1, r2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe ffae 	bl	8006bac <_ZNSt6vectorItSaItEEC1ERKS1_>

	//1. check color response -> no error check
	if(max_read_buf_size_ == PGV100Color)  //response for changing colors
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d11a      	bne.n	8007c90 <_ZN6PGV10019ProcessGetTotalInfoEv+0x5a>
	{
		this->color_ = ProcessGetColorInfo(temp_buf_);
 8007c5a:	f107 020c 	add.w	r2, r7, #12
 8007c5e:	f107 0318 	add.w	r3, r7, #24
 8007c62:	4611      	mov	r1, r2
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fe ffa1 	bl	8006bac <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007c6a:	f107 0318 	add.w	r3, r7, #24
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff fead 	bl	80079d0 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE>
 8007c76:	4603      	mov	r3, r0
 8007c78:	461a      	mov	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8007c80:	f107 0318 	add.w	r3, r7, #24
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fd fb36 	bl	80052f6 <_ZNSt6vectorItSaItEED1Ev>
		return this->err_code_;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8c1c      	ldrh	r4, [r3, #32]
 8007c8e:	e0f7      	b.n	8007e80 <_ZN6PGV10019ProcessGetTotalInfoEv+0x24a>
	}

	//2. Timeout or other error handling
	uint16_t now_err = ProcessCheckErr(temp_buf_);
 8007c90:	f107 020c 	add.w	r2, r7, #12
 8007c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c98:	4611      	mov	r1, r2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe ff86 	bl	8006bac <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff ff39 	bl	8007b1e <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8007cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fd fb1d 	bl	80052f6 <_ZNSt6vectorItSaItEED1Ev>

	//3. simplized error handle error >=1, good = 0 and if error occur, error count is up
	//4. when the Error count reached max count, return err code
	if(now_err >= 1)
 8007cbc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d017      	beq.n	8007cf4 <_ZN6PGV10019ProcessGetTotalInfoEv+0xbe>
	{
		FilterCountUp();
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fd fa8e 	bl	80051e8 <_ZN12PNFPosSensor13FilterCountUpEv>
		if(IsInfoFiltered())
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fd fa66 	bl	80051a0 <_ZN12PNFPosSensor14IsInfoFilteredEv>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <_ZN6PGV10019ProcessGetTotalInfoEv+0xba>
		{
			ResetAllData();
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7ff fb1e 	bl	800731c <_ZN6PGV10012ResetAllDataEv>
			FilterCountReset();
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fd fa96 	bl	8005214 <_ZN12PNFPosSensor16FilterCountResetEv>
			this->err_code_ = now_err;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8007cee:	841a      	strh	r2, [r3, #32]
		}
		return 1;  //error occur
 8007cf0:	2401      	movs	r4, #1
 8007cf2:	e0c5      	b.n	8007e80 <_ZN6PGV10019ProcessGetTotalInfoEv+0x24a>
	}

	//5. Processing data
	switch(this->max_read_buf_size_)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d002      	beq.n	8007d04 <_ZN6PGV10019ProcessGetTotalInfoEv+0xce>
 8007cfe:	2b15      	cmp	r3, #21
 8007d00:	d019      	beq.n	8007d36 <_ZN6PGV10019ProcessGetTotalInfoEv+0x100>
 8007d02:	e0b3      	b.n	8007e6c <_ZN6PGV10019ProcessGetTotalInfoEv+0x236>
	{
		case PGV100Dir:
			this->dir_ = ProcessGetDirectionInfo(temp_buf_);
 8007d04:	f107 020c 	add.w	r2, r7, #12
 8007d08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe ff4c 	bl	8006bac <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007d14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff fe46 	bl	80079ac <_ZN6PGV10023ProcessGetDirectionInfoESt6vectorItSaItEE>
 8007d20:	4603      	mov	r3, r0
 8007d22:	461a      	mov	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8007d2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fd fae1 	bl	80052f6 <_ZNSt6vectorItSaItEED1Ev>
			break;
 8007d34:	e09a      	b.n	8007e6c <_ZN6PGV10019ProcessGetTotalInfoEv+0x236>
		case PGV100Pos:
			if(ProcessIsTagDetected(temp_buf_)) this->tagNo_ = ProcessGetTagNumber(temp_buf_);
 8007d36:	f107 020c 	add.w	r2, r7, #12
 8007d3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007d3e:	4611      	mov	r1, r2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe ff33 	bl	8006bac <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007d46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff fc1e 	bl	800758e <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE>
 8007d52:	4603      	mov	r3, r0
 8007d54:	461c      	mov	r4, r3
 8007d56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fd facb 	bl	80052f6 <_ZNSt6vectorItSaItEED1Ev>
 8007d60:	2c00      	cmp	r4, #0
 8007d62:	d018      	beq.n	8007d96 <_ZN6PGV10019ProcessGetTotalInfoEv+0x160>
 8007d64:	f107 020c 	add.w	r2, r7, #12
 8007d68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe ff1c 	bl	8006bac <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007d74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff fc22 	bl	80075c4 <_ZN6PGV10019ProcessGetTagNumberESt6vectorItSaItEE>
 8007d80:	4603      	mov	r3, r0
 8007d82:	461a      	mov	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8007d8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fd fab1 	bl	80052f6 <_ZNSt6vectorItSaItEED1Ev>
 8007d94:	e003      	b.n	8007d9e <_ZN6PGV10019ProcessGetTotalInfoEv+0x168>
			else this->tagNo_ = 0;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
			this->dir_ = ProcessGetDirectionInfo(temp_buf_);
 8007d9e:	f107 020c 	add.w	r2, r7, #12
 8007da2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007da6:	4611      	mov	r1, r2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe feff 	bl	8006bac <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007dae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff fdf9 	bl	80079ac <_ZN6PGV10023ProcessGetDirectionInfoESt6vectorItSaItEE>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8007dc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fd fa94 	bl	80052f6 <_ZNSt6vectorItSaItEED1Ev>
			this->angle_ = ProcessGetAngleInfo(temp_buf_); 	 			  //--- Get ANGLE INFO
 8007dce:	f107 020c 	add.w	r2, r7, #12
 8007dd2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe fee7 	bl	8006bac <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007dde:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff fc2f 	bl	8007648 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE>
 8007dea:	eeb0 7a40 	vmov.f32	s14, s0
 8007dee:	eef0 7a60 	vmov.f32	s15, s1
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
 8007df8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fd fa7a 	bl	80052f6 <_ZNSt6vectorItSaItEED1Ev>
			this->xpos_ = ProcessGetXPosInfo(temp_buf_); 	 				  //--- Get X POSITION
 8007e02:	f107 020c 	add.w	r2, r7, #12
 8007e06:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7fe fecd 	bl	8006bac <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007e12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff fc6d 	bl	80076f8 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE>
 8007e1e:	eeb0 7a40 	vmov.f32	s14, s0
 8007e22:	eef0 7a60 	vmov.f32	s15, s1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	ed83 7b04 	vstr	d7, [r3, #16]
 8007e2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fd fa60 	bl	80052f6 <_ZNSt6vectorItSaItEED1Ev>
			this->ypos_ = ProcessGetYPosInfo(temp_buf_); 					  //--- Get Y POSITION
 8007e36:	f107 020c 	add.w	r2, r7, #12
 8007e3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007e3e:	4611      	mov	r1, r2
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe feb3 	bl	8006bac <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007e46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff fd25 	bl	800789c <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE>
 8007e52:	eeb0 7a40 	vmov.f32	s14, s0
 8007e56:	eef0 7a60 	vmov.f32	s15, s1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	ed83 7b06 	vstr	d7, [r3, #24]
 8007e60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fd fa46 	bl	80052f6 <_ZNSt6vectorItSaItEED1Ev>
			break;
 8007e6a:	bf00      	nop
	}
	FilterCountReset();
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fd f9d0 	bl	8005214 <_ZN12PNFPosSensor16FilterCountResetEv>
	this->err_code_ = now_err;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8007e7a:	841a      	strh	r2, [r3, #32]
	return this->err_code_;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	8c1c      	ldrh	r4, [r3, #32]
	std::vector<uint16_t> temp_buf_ = this->pos_buf_;
 8007e80:	f107 030c 	add.w	r3, r7, #12
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fd fa36 	bl	80052f6 <_ZNSt6vectorItSaItEED1Ev>
}
 8007e8a:	4623      	mov	r3, r4
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	378c      	adds	r7, #140	; 0x8c
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd90      	pop	{r4, r7, pc}

08007e94 <_ZN6PGV1009DriveInitEv>:


void PGV100::DriveInit()
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
	QueueRepeatPosReqeust();
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff fb33 	bl	8007508 <_ZN6PGV10021QueueRepeatPosReqeustEv>
	ReadBufferInit();
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff faca 	bl	800743c <_ZN6PGV10014ReadBufferInitEv>
}
 8007ea8:	bf00      	nop
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <_ZN6PGV1009DriveCommEv>:

void PGV100::DriveComm()
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
	if(TransmitSendRequest()!=HAL_OK || TransmitReceiveResponse()!=HAL_OK)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fd f88a 	bl	8004fd4 <_ZN12PNFPosSensor19TransmitSendRequestEv>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d106      	bne.n	8007ed4 <_ZN6PGV1009DriveCommEv+0x24>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fd f8cb 	bl	8005064 <_ZN12PNFPosSensor23TransmitReceiveResponseEv>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <_ZN6PGV1009DriveCommEv+0x28>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e000      	b.n	8007eda <_ZN6PGV1009DriveCommEv+0x2a>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <_ZN6PGV1009DriveCommEv+0x38>
	{
		this->comm_status_ = false;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	}
	else
	{
		this->comm_status_ = true;
	}
}
 8007ee6:	e003      	b.n	8007ef0 <_ZN6PGV1009DriveCommEv+0x40>
		this->comm_status_ = true;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <_ZN6PGV10013DriveAnalysisEv>:

void PGV100::DriveAnalysis()
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
	ProcessGetTotalInfo();
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff fe98 	bl	8007c36 <_ZN6PGV10019ProcessGetTotalInfoEv>
	QueueDeleteRequest();
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fd f938 	bl	800517e <_ZN12PNFPosSensor18QueueDeleteRequestEv>
}
 8007f0e:	bf00      	nop
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <_ZN6PGV10014InitializationEv>:

//main functions
void PGV100::Initialization()
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b082      	sub	sp, #8
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
	RegisterRequsetCmd();
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7ff fa1f 	bl	8007362 <_ZN6PGV10018RegisterRequsetCmdEv>
	RegisterDefaultParam();
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7ff fa7a 	bl	800741e <_ZN6PGV10020RegisterDefaultParamEv>
}
 8007f2a:	bf00      	nop
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fbd6 	bl	80086ec <_ZNSaIP12CommonSensorED1Ev>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b082      	sub	sp, #8
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 fbb9 	bl	80086cc <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implC1Ev>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <_ZNSt6vectorIP12CommonSensorSaIS1_EEC1Ev>:
      vector() = default;
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7ff ffeb 	bl	8007f4a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EEC1Ev>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fc00 	bl	800878c <_ZNSaIP6PGV100ED1Ev>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EEC1Ev>:
      _Vector_base() = default;
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fbe3 	bl	800876c <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implC1Ev>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <_ZNSt6vectorIP6PGV100SaIS1_EEC1Ev>:
      vector() = default;
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7ff ffeb 	bl	8007f96 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EEC1Ev>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <_ZN13SensorManagerC1Ev>:
bool SensorManager::bDestroyed_ = false;
SensorManager* SensorManager::pIns_ = NULL;


//--------------------------------------------------------------------------------------------------Single instance:
SensorManager::SensorManager() {};
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7ff ffc5 	bl	8007f64 <_ZNSt6vectorIP12CommonSensorSaIS1_EEC1Ev>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	330c      	adds	r3, #12
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff ffe6 	bl	8007fb0 <_ZNSt6vectorIP6PGV100SaIS1_EEC1Ev>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <_ZN13SensorManagerD1Ev>:
SensorManager::SensorManager(const SensorManager& other){};
SensorManager& SensorManager::operator=(const SensorManager& ref) {return *this;};
SensorManager::~SensorManager()
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
{
	DeleteAllSensor();
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f881 	bl	8008100 <_ZN13SensorManager15DeleteAllSensorEv>
	bDestroyed_ = true;
 8007ffe:	4b08      	ldr	r3, [pc, #32]	; (8008020 <_ZN13SensorManagerD1Ev+0x30>)
 8008000:	2201      	movs	r2, #1
 8008002:	701a      	strb	r2, [r3, #0]
SensorManager::~SensorManager()
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	330c      	adds	r3, #12
 8008008:	4618      	mov	r0, r3
 800800a:	f000 fbe4 	bl	80087d6 <_ZNSt6vectorIP6PGV100SaIS1_EED1Ev>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fb90 	bl	8008736 <_ZNSt6vectorIP12CommonSensorSaIS1_EED1Ev>
}
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	20000878 	.word	0x20000878

08008024 <__tcf_0>:

void SensorManager::ManagerCreate()
{
	static SensorManager ins;
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
 8008028:	4801      	ldr	r0, [pc, #4]	; (8008030 <__tcf_0+0xc>)
 800802a:	f7ff ffe1 	bl	8007ff0 <_ZN13SensorManagerD1Ev>
 800802e:	bd80      	pop	{r7, pc}
 8008030:	20000880 	.word	0x20000880

08008034 <_ZN13SensorManager13ManagerCreateEv>:
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
	static SensorManager ins;
 8008038:	4b13      	ldr	r3, [pc, #76]	; (8008088 <_ZN13SensorManager13ManagerCreateEv+0x54>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	f3bf 8f5b 	dmb	ish
 8008040:	b2db      	uxtb	r3, r3
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	bf0c      	ite	eq
 800804a:	2301      	moveq	r3, #1
 800804c:	2300      	movne	r3, #0
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	d013      	beq.n	800807c <_ZN13SensorManager13ManagerCreateEv+0x48>
 8008054:	480c      	ldr	r0, [pc, #48]	; (8008088 <_ZN13SensorManager13ManagerCreateEv+0x54>)
 8008056:	f01a fcdf 	bl	8022a18 <__cxa_guard_acquire>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	bf14      	ite	ne
 8008060:	2301      	movne	r3, #1
 8008062:	2300      	moveq	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d008      	beq.n	800807c <_ZN13SensorManager13ManagerCreateEv+0x48>
 800806a:	4808      	ldr	r0, [pc, #32]	; (800808c <_ZN13SensorManager13ManagerCreateEv+0x58>)
 800806c:	f7ff ffad 	bl	8007fca <_ZN13SensorManagerC1Ev>
 8008070:	4807      	ldr	r0, [pc, #28]	; (8008090 <_ZN13SensorManager13ManagerCreateEv+0x5c>)
 8008072:	f01b fcea 	bl	8023a4a <atexit>
 8008076:	4804      	ldr	r0, [pc, #16]	; (8008088 <_ZN13SensorManager13ManagerCreateEv+0x54>)
 8008078:	f01a fcda 	bl	8022a30 <__cxa_guard_release>
	pIns_ = &ins;
 800807c:	4b05      	ldr	r3, [pc, #20]	; (8008094 <_ZN13SensorManager13ManagerCreateEv+0x60>)
 800807e:	4a03      	ldr	r2, [pc, #12]	; (800808c <_ZN13SensorManager13ManagerCreateEv+0x58>)
 8008080:	601a      	str	r2, [r3, #0]
}
 8008082:	bf00      	nop
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	2000089c 	.word	0x2000089c
 800808c:	20000880 	.word	0x20000880
 8008090:	08008025 	.word	0x08008025
 8008094:	2000087c 	.word	0x2000087c

08008098 <_ZN13SensorManager13ManagerDeleteEv>:

void SensorManager::ManagerDelete()
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
	pIns_->~SensorManager();
 800809c:	4b03      	ldr	r3, [pc, #12]	; (80080ac <_ZN13SensorManager13ManagerDeleteEv+0x14>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7ff ffa5 	bl	8007ff0 <_ZN13SensorManagerD1Ev>
}
 80080a6:	bf00      	nop
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	2000087c 	.word	0x2000087c

080080b0 <_ZN13SensorManager11GetInstanceEv>:

SensorManager& SensorManager::GetInstance()
{
 80080b0:	b598      	push	{r3, r4, r7, lr}
 80080b2:	af00      	add	r7, sp, #0
	if(bDestroyed_)
 80080b4:	4b0f      	ldr	r3, [pc, #60]	; (80080f4 <_ZN13SensorManager11GetInstanceEv+0x44>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d010      	beq.n	80080de <_ZN13SensorManager11GetInstanceEv+0x2e>
	{
		pIns_ = new SensorManager();
 80080bc:	201c      	movs	r0, #28
 80080be:	f01a fcba 	bl	8022a36 <_Znwj>
 80080c2:	4603      	mov	r3, r0
 80080c4:	461c      	mov	r4, r3
 80080c6:	4620      	mov	r0, r4
 80080c8:	f7ff ff7f 	bl	8007fca <_ZN13SensorManagerC1Ev>
 80080cc:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <_ZN13SensorManager11GetInstanceEv+0x48>)
 80080ce:	601c      	str	r4, [r3, #0]
		// new(pIns) =  SensorManager;
		atexit(ManagerDelete);
 80080d0:	480a      	ldr	r0, [pc, #40]	; (80080fc <_ZN13SensorManager11GetInstanceEv+0x4c>)
 80080d2:	f01b fcba 	bl	8023a4a <atexit>
		bDestroyed_ = false;
 80080d6:	4b07      	ldr	r3, [pc, #28]	; (80080f4 <_ZN13SensorManager11GetInstanceEv+0x44>)
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
 80080dc:	e005      	b.n	80080ea <_ZN13SensorManager11GetInstanceEv+0x3a>
	}
	else if (pIns_ == NULL)
 80080de:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <_ZN13SensorManager11GetInstanceEv+0x48>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <_ZN13SensorManager11GetInstanceEv+0x3a>
	{
		ManagerCreate();
 80080e6:	f7ff ffa5 	bl	8008034 <_ZN13SensorManager13ManagerCreateEv>
	}
	 return *pIns_;
 80080ea:	4b03      	ldr	r3, [pc, #12]	; (80080f8 <_ZN13SensorManager11GetInstanceEv+0x48>)
 80080ec:	681b      	ldr	r3, [r3, #0]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	bd98      	pop	{r3, r4, r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20000878 	.word	0x20000878
 80080f8:	2000087c 	.word	0x2000087c
 80080fc:	08008099 	.word	0x08008099

08008100 <_ZN13SensorManager15DeleteAllSensorEv>:


void SensorManager::DeleteAllSensor()
{
 8008100:	b590      	push	{r4, r7, lr}
 8008102:	b08b      	sub	sp, #44	; 0x2c
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
	for (auto& index : common_sensors_) delete (index);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	627b      	str	r3, [r7, #36]	; 0x24
 800810c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800810e:	f000 fb7d 	bl	800880c <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 8008112:	4603      	mov	r3, r0
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008118:	f000 fb88 	bl	800882c <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 800811c:	4603      	mov	r3, r0
 800811e:	613b      	str	r3, [r7, #16]
 8008120:	f107 0210 	add.w	r2, r7, #16
 8008124:	f107 0314 	add.w	r3, r7, #20
 8008128:	4611      	mov	r1, r2
 800812a:	4618      	mov	r0, r3
 800812c:	f000 fb8f 	bl	800884e <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d016      	beq.n	8008164 <_ZN13SensorManager15DeleteAllSensorEv+0x64>
 8008136:	f107 0314 	add.w	r3, r7, #20
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fbaf 	bl	800889e <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 8008140:	61b8      	str	r0, [r7, #24]
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	681c      	ldr	r4, [r3, #0]
 8008146:	2c00      	cmp	r4, #0
 8008148:	d006      	beq.n	8008158 <_ZN13SensorManager15DeleteAllSensorEv+0x58>
 800814a:	4620      	mov	r0, r4
 800814c:	f7f8 fffd 	bl	800114a <_ZN12CommonSensorD1Ev>
 8008150:	2110      	movs	r1, #16
 8008152:	4620      	mov	r0, r4
 8008154:	f01a fc5e 	bl	8022a14 <_ZdlPvj>
 8008158:	f107 0314 	add.w	r3, r7, #20
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fb8e 	bl	800887e <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 8008162:	e7dd      	b.n	8008120 <_ZN13SensorManager15DeleteAllSensorEv+0x20>
	common_sensors_.clear();
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4618      	mov	r0, r3
 8008168:	f000 fba5 	bl	80088b6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5clearEv>
	for (auto& index : pgv100_) delete (index);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	330c      	adds	r3, #12
 8008170:	623b      	str	r3, [r7, #32]
 8008172:	6a38      	ldr	r0, [r7, #32]
 8008174:	f000 fbad 	bl	80088d2 <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8008178:	4603      	mov	r3, r0
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	6a38      	ldr	r0, [r7, #32]
 800817e:	f000 fbb8 	bl	80088f2 <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 8008182:	4603      	mov	r3, r0
 8008184:	60bb      	str	r3, [r7, #8]
 8008186:	f107 0208 	add.w	r2, r7, #8
 800818a:	f107 030c 	add.w	r3, r7, #12
 800818e:	4611      	mov	r1, r2
 8008190:	4618      	mov	r0, r3
 8008192:	f000 fbbf 	bl	8008914 <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d014      	beq.n	80081c6 <_ZN13SensorManager15DeleteAllSensorEv+0xc6>
 800819c:	f107 030c 	add.w	r3, r7, #12
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fbdf 	bl	8008964 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>
 80081a6:	61f8      	str	r0, [r7, #28]
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d004      	beq.n	80081ba <_ZN13SensorManager15DeleteAllSensorEv+0xba>
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	3204      	adds	r2, #4
 80081b4:	6812      	ldr	r2, [r2, #0]
 80081b6:	4618      	mov	r0, r3
 80081b8:	4790      	blx	r2
 80081ba:	f107 030c 	add.w	r3, r7, #12
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fbc0 	bl	8008944 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>
 80081c4:	e7df      	b.n	8008186 <_ZN13SensorManager15DeleteAllSensorEv+0x86>
	pgv100_.clear();
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	330c      	adds	r3, #12
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fbd6 	bl	800897c <_ZNSt6vectorIP6PGV100SaIS1_EE5clearEv>
}
 80081d0:	bf00      	nop
 80081d2:	372c      	adds	r7, #44	; 0x2c
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd90      	pop	{r4, r7, pc}

080081d8 <_ZN13SensorManager20CommonSensorRegisterEv>:


//---------------------------------------------------------------------sensor function
//common sensor
void SensorManager::CommonSensorRegister()
{
 80081d8:	b5b0      	push	{r4, r5, r7, lr}
 80081da:	b090      	sub	sp, #64	; 0x40
 80081dc:	af02      	add	r7, sp, #8
 80081de:	6078      	str	r0, [r7, #4]
	if(common_sensors_.empty())
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fbd8 	bl	8008998 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5emptyEv>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 8106 	beq.w	80083fc <_ZN13SensorManager20CommonSensorRegisterEv+0x224>
	{
		//J6 -> PG9 ~ J11 -> PG15	, J12 -> PE0 , J16 -> PE4
		common_sensors_.emplace_back(new CommonSensor(AORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_9));
 80081f0:	687d      	ldr	r5, [r7, #4]
 80081f2:	2010      	movs	r0, #16
 80081f4:	f01a fc1f 	bl	8022a36 <_Znwj>
 80081f8:	4603      	mov	r3, r0
 80081fa:	461c      	mov	r4, r3
 80081fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	4b80      	ldr	r3, [pc, #512]	; (8008404 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	2305      	movs	r3, #5
 8008208:	2201      	movs	r2, #1
 800820a:	2101      	movs	r1, #1
 800820c:	4620      	mov	r0, r4
 800820e:	f7f8 ff6d 	bl	80010ec <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8008212:	60fc      	str	r4, [r7, #12]
 8008214:	f107 030c 	add.w	r3, r7, #12
 8008218:	4619      	mov	r1, r3
 800821a:	4628      	mov	r0, r5
 800821c:	f000 fbd7 	bl	80089ce <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(AORG_R, ActiveH, Filter_5, GPIOG, GPIO_PIN_10));
 8008220:	687d      	ldr	r5, [r7, #4]
 8008222:	2010      	movs	r0, #16
 8008224:	f01a fc07 	bl	8022a36 <_Znwj>
 8008228:	4603      	mov	r3, r0
 800822a:	461c      	mov	r4, r3
 800822c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	4b74      	ldr	r3, [pc, #464]	; (8008404 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	2305      	movs	r3, #5
 8008238:	2201      	movs	r2, #1
 800823a:	2102      	movs	r1, #2
 800823c:	4620      	mov	r0, r4
 800823e:	f7f8 ff55 	bl	80010ec <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8008242:	613c      	str	r4, [r7, #16]
 8008244:	f107 0310 	add.w	r3, r7, #16
 8008248:	4619      	mov	r1, r3
 800824a:	4628      	mov	r0, r5
 800824c:	f000 fbbf 	bl	80089ce <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(WORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_12));
 8008250:	687d      	ldr	r5, [r7, #4]
 8008252:	2010      	movs	r0, #16
 8008254:	f01a fbef 	bl	8022a36 <_Znwj>
 8008258:	4603      	mov	r3, r0
 800825a:	461c      	mov	r4, r3
 800825c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008260:	9301      	str	r3, [sp, #4]
 8008262:	4b68      	ldr	r3, [pc, #416]	; (8008404 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	2305      	movs	r3, #5
 8008268:	2201      	movs	r2, #1
 800826a:	2104      	movs	r1, #4
 800826c:	4620      	mov	r0, r4
 800826e:	f7f8 ff3d 	bl	80010ec <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8008272:	617c      	str	r4, [r7, #20]
 8008274:	f107 0314 	add.w	r3, r7, #20
 8008278:	4619      	mov	r1, r3
 800827a:	4628      	mov	r0, r5
 800827c:	f000 fba7 	bl	80089ce <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(WORG_R, ActiveH, Filter_5, GPIOG, GPIO_PIN_13));
 8008280:	687d      	ldr	r5, [r7, #4]
 8008282:	2010      	movs	r0, #16
 8008284:	f01a fbd7 	bl	8022a36 <_Znwj>
 8008288:	4603      	mov	r3, r0
 800828a:	461c      	mov	r4, r3
 800828c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	4b5c      	ldr	r3, [pc, #368]	; (8008404 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	2305      	movs	r3, #5
 8008298:	2201      	movs	r2, #1
 800829a:	2108      	movs	r1, #8
 800829c:	4620      	mov	r0, r4
 800829e:	f7f8 ff25 	bl	80010ec <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80082a2:	61bc      	str	r4, [r7, #24]
 80082a4:	f107 0318 	add.w	r3, r7, #24
 80082a8:	4619      	mov	r1, r3
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 fb8f 	bl	80089ce <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(TORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_14));
 80082b0:	687d      	ldr	r5, [r7, #4]
 80082b2:	2010      	movs	r0, #16
 80082b4:	f01a fbbf 	bl	8022a36 <_Znwj>
 80082b8:	4603      	mov	r3, r0
 80082ba:	461c      	mov	r4, r3
 80082bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	4b50      	ldr	r3, [pc, #320]	; (8008404 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	2305      	movs	r3, #5
 80082c8:	2201      	movs	r2, #1
 80082ca:	2110      	movs	r1, #16
 80082cc:	4620      	mov	r0, r4
 80082ce:	f7f8 ff0d 	bl	80010ec <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80082d2:	61fc      	str	r4, [r7, #28]
 80082d4:	f107 031c 	add.w	r3, r7, #28
 80082d8:	4619      	mov	r1, r3
 80082da:	4628      	mov	r0, r5
 80082dc:	f000 fb77 	bl	80089ce <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(TORG_C, ActiveH, Filter_5, GPIOG, GPIO_PIN_15));
 80082e0:	687d      	ldr	r5, [r7, #4]
 80082e2:	2010      	movs	r0, #16
 80082e4:	f01a fba7 	bl	8022a36 <_Znwj>
 80082e8:	4603      	mov	r3, r0
 80082ea:	461c      	mov	r4, r3
 80082ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	4b44      	ldr	r3, [pc, #272]	; (8008404 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	2305      	movs	r3, #5
 80082f8:	2201      	movs	r2, #1
 80082fa:	2120      	movs	r1, #32
 80082fc:	4620      	mov	r0, r4
 80082fe:	f7f8 fef5 	bl	80010ec <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8008302:	623c      	str	r4, [r7, #32]
 8008304:	f107 0320 	add.w	r3, r7, #32
 8008308:	4619      	mov	r1, r3
 800830a:	4628      	mov	r0, r5
 800830c:	f000 fb5f 	bl	80089ce <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>

		common_sensors_.emplace_back(new CommonSensor(TORG_R, ActiveH, Filter_5, GPIOE, GPIO_PIN_0));
 8008310:	687d      	ldr	r5, [r7, #4]
 8008312:	2010      	movs	r0, #16
 8008314:	f01a fb8f 	bl	8022a36 <_Znwj>
 8008318:	4603      	mov	r3, r0
 800831a:	461c      	mov	r4, r3
 800831c:	2301      	movs	r3, #1
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	4b39      	ldr	r3, [pc, #228]	; (8008408 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	2305      	movs	r3, #5
 8008326:	2201      	movs	r2, #1
 8008328:	2140      	movs	r1, #64	; 0x40
 800832a:	4620      	mov	r0, r4
 800832c:	f7f8 fede 	bl	80010ec <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8008330:	627c      	str	r4, [r7, #36]	; 0x24
 8008332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008336:	4619      	mov	r1, r3
 8008338:	4628      	mov	r0, r5
 800833a:	f000 fb48 	bl	80089ce <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_U, ActiveH, Filter_5, GPIOE, GPIO_PIN_1));
 800833e:	687d      	ldr	r5, [r7, #4]
 8008340:	2010      	movs	r0, #16
 8008342:	f01a fb78 	bl	8022a36 <_Znwj>
 8008346:	4603      	mov	r3, r0
 8008348:	461c      	mov	r4, r3
 800834a:	2302      	movs	r3, #2
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	4b2e      	ldr	r3, [pc, #184]	; (8008408 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	2305      	movs	r3, #5
 8008354:	2201      	movs	r2, #1
 8008356:	2180      	movs	r1, #128	; 0x80
 8008358:	4620      	mov	r0, r4
 800835a:	f7f8 fec7 	bl	80010ec <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 800835e:	62bc      	str	r4, [r7, #40]	; 0x28
 8008360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008364:	4619      	mov	r1, r3
 8008366:	4628      	mov	r0, r5
 8008368:	f000 fb31 	bl	80089ce <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_C, ActiveH, Filter_5, GPIOE, GPIO_PIN_2));
 800836c:	687d      	ldr	r5, [r7, #4]
 800836e:	2010      	movs	r0, #16
 8008370:	f01a fb61 	bl	8022a36 <_Znwj>
 8008374:	4603      	mov	r3, r0
 8008376:	461c      	mov	r4, r3
 8008378:	2304      	movs	r3, #4
 800837a:	9301      	str	r3, [sp, #4]
 800837c:	4b22      	ldr	r3, [pc, #136]	; (8008408 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	2305      	movs	r3, #5
 8008382:	2201      	movs	r2, #1
 8008384:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008388:	4620      	mov	r0, r4
 800838a:	f7f8 feaf 	bl	80010ec <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 800838e:	62fc      	str	r4, [r7, #44]	; 0x2c
 8008390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008394:	4619      	mov	r1, r3
 8008396:	4628      	mov	r0, r5
 8008398:	f000 fb19 	bl	80089ce <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_L, ActiveH, Filter_5, GPIOE, GPIO_PIN_3));
 800839c:	687d      	ldr	r5, [r7, #4]
 800839e:	2010      	movs	r0, #16
 80083a0:	f01a fb49 	bl	8022a36 <_Znwj>
 80083a4:	4603      	mov	r3, r0
 80083a6:	461c      	mov	r4, r3
 80083a8:	2308      	movs	r3, #8
 80083aa:	9301      	str	r3, [sp, #4]
 80083ac:	4b16      	ldr	r3, [pc, #88]	; (8008408 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	2305      	movs	r3, #5
 80083b2:	2201      	movs	r2, #1
 80083b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083b8:	4620      	mov	r0, r4
 80083ba:	f7f8 fe97 	bl	80010ec <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80083be:	633c      	str	r4, [r7, #48]	; 0x30
 80083c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083c4:	4619      	mov	r1, r3
 80083c6:	4628      	mov	r0, r5
 80083c8:	f000 fb01 	bl	80089ce <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(IN_L, ActiveH, Filter_5, GPIOE, GPIO_PIN_4));
 80083cc:	687d      	ldr	r5, [r7, #4]
 80083ce:	2010      	movs	r0, #16
 80083d0:	f01a fb31 	bl	8022a36 <_Znwj>
 80083d4:	4603      	mov	r3, r0
 80083d6:	461c      	mov	r4, r3
 80083d8:	2310      	movs	r3, #16
 80083da:	9301      	str	r3, [sp, #4]
 80083dc:	4b0a      	ldr	r3, [pc, #40]	; (8008408 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	2305      	movs	r3, #5
 80083e2:	2201      	movs	r2, #1
 80083e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80083e8:	4620      	mov	r0, r4
 80083ea:	f7f8 fe7f 	bl	80010ec <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80083ee:	637c      	str	r4, [r7, #52]	; 0x34
 80083f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083f4:	4619      	mov	r1, r3
 80083f6:	4628      	mov	r0, r5
 80083f8:	f000 fae9 	bl	80089ce <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		//common_sensors_.emplace_back(new CommonSensor(IN_R, ActiveH, Filter_5, GPIOE, GPIO_PIN_4));
		//common_sensors_.resize(common_sensors_.size());
	}
}
 80083fc:	bf00      	nop
 80083fe:	3738      	adds	r7, #56	; 0x38
 8008400:	46bd      	mov	sp, r7
 8008402:	bdb0      	pop	{r4, r5, r7, pc}
 8008404:	40021800 	.word	0x40021800
 8008408:	40021000 	.word	0x40021000

0800840c <_ZN13SensorManager22CommonSensorInitializeEv>:

void SensorManager::CommonSensorInitialize()
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
	CommonSensorRegister();
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff fedf 	bl	80081d8 <_ZN13SensorManager20CommonSensorRegisterEv>
	CommonSensorDrive();
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f804 	bl	8008428 <_ZN13SensorManager17CommonSensorDriveEv>
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <_ZN13SensorManager17CommonSensorDriveEv>:
}



void SensorManager::CommonSensorDrive()
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
	for (auto& sensors : common_sensors_) sensors->Drive();
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	617b      	str	r3, [r7, #20]
 8008434:	6978      	ldr	r0, [r7, #20]
 8008436:	f000 f9e9 	bl	800880c <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 800843a:	4603      	mov	r3, r0
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	6978      	ldr	r0, [r7, #20]
 8008440:	f000 f9f4 	bl	800882c <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 8008444:	4603      	mov	r3, r0
 8008446:	60bb      	str	r3, [r7, #8]
 8008448:	f107 0208 	add.w	r2, r7, #8
 800844c:	f107 030c 	add.w	r3, r7, #12
 8008450:	4611      	mov	r1, r2
 8008452:	4618      	mov	r0, r3
 8008454:	f000 f9fb 	bl	800884e <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d010      	beq.n	8008480 <_ZN13SensorManager17CommonSensorDriveEv+0x58>
 800845e:	f107 030c 	add.w	r3, r7, #12
 8008462:	4618      	mov	r0, r3
 8008464:	f000 fa1b 	bl	800889e <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 8008468:	6138      	str	r0, [r7, #16]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4618      	mov	r0, r3
 8008470:	f7f8 fef4 	bl	800125c <_ZN12CommonSensor5DriveEv>
 8008474:	f107 030c 	add.w	r3, r7, #12
 8008478:	4618      	mov	r0, r3
 800847a:	f000 fa00 	bl	800887e <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 800847e:	e7e3      	b.n	8008448 <_ZN13SensorManager17CommonSensorDriveEv+0x20>
	CommonSensorGatherData();
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f804 	bl	800848e <_ZN13SensorManager22CommonSensorGatherDataEv>
}
 8008486:	bf00      	nop
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <_ZN13SensorManager22CommonSensorGatherDataEv>:
uint16_t SensorManager::OUT_LGetData(){return CommonSensorGetData(OUT_L);}
uint16_t SensorManager::OUT_RGetData(){return CommonSensorGetData(OUT_R);}


void SensorManager::CommonSensorGatherData()
{
 800848e:	b590      	push	{r4, r7, lr}
 8008490:	b089      	sub	sp, #36	; 0x24
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
	uint16_t temp_sensor_data = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	83fb      	strh	r3, [r7, #30]
	for (auto& sensors : common_sensors_)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	61bb      	str	r3, [r7, #24]
 800849e:	69b8      	ldr	r0, [r7, #24]
 80084a0:	f000 f9b4 	bl	800880c <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 80084a4:	4603      	mov	r3, r0
 80084a6:	613b      	str	r3, [r7, #16]
 80084a8:	69b8      	ldr	r0, [r7, #24]
 80084aa:	f000 f9bf 	bl	800882c <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 80084ae:	4603      	mov	r3, r0
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	f107 020c 	add.w	r2, r7, #12
 80084b6:	f107 0310 	add.w	r3, r7, #16
 80084ba:	4611      	mov	r1, r2
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 f9c6 	bl	800884e <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d020      	beq.n	800850a <_ZN13SensorManager22CommonSensorGatherDataEv+0x7c>
 80084c8:	f107 0310 	add.w	r3, r7, #16
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 f9e6 	bl	800889e <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 80084d2:	6178      	str	r0, [r7, #20]
	{
		temp_sensor_data |=  ((sensors->GetSensorIndex()) * (sensors->GetSensorData()));
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4618      	mov	r0, r3
 80084da:	f7f8 fe4d 	bl	8001178 <_ZNK12CommonSensor14GetSensorIndexEv>
 80084de:	4603      	mov	r3, r0
 80084e0:	461c      	mov	r4, r3
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7f8 fe3a 	bl	8001160 <_ZNK12CommonSensor13GetSensorDataEv>
 80084ec:	4603      	mov	r3, r0
 80084ee:	fb04 f303 	mul.w	r3, r4, r3
 80084f2:	b21a      	sxth	r2, r3
 80084f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	b21b      	sxth	r3, r3
 80084fc:	83fb      	strh	r3, [r7, #30]
	for (auto& sensors : common_sensors_)
 80084fe:	f107 0310 	add.w	r3, r7, #16
 8008502:	4618      	mov	r0, r3
 8008504:	f000 f9bb 	bl	800887e <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 8008508:	e7d3      	b.n	80084b2 <_ZN13SensorManager22CommonSensorGatherDataEv+0x24>
	}
	this->common_sensor_data_ = temp_sensor_data;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	8bfa      	ldrh	r2, [r7, #30]
 800850e:	831a      	strh	r2, [r3, #24]
}
 8008510:	bf00      	nop
 8008512:	3724      	adds	r7, #36	; 0x24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd90      	pop	{r4, r7, pc}

08008518 <_ZNK13SensorManager22CommonSensorGetAllDataEv>:

uint16_t SensorManager::CommonSensorGetAllData() const {return this->common_sensor_data_;}
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	8b1b      	ldrh	r3, [r3, #24]
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <_ZN13SensorManager23OpticalSensorInitializeEv>:

//---------------------------------------------------------------------PNFPOSsensor function
//PNFPos sensor

void SensorManager::OpticalSensorInitialize()
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
	for (auto& index : pgv100_) index->Initialization();
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	330c      	adds	r3, #12
 800853c:	617b      	str	r3, [r7, #20]
 800853e:	6978      	ldr	r0, [r7, #20]
 8008540:	f000 f9c7 	bl	80088d2 <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8008544:	4603      	mov	r3, r0
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	6978      	ldr	r0, [r7, #20]
 800854a:	f000 f9d2 	bl	80088f2 <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 800854e:	4603      	mov	r3, r0
 8008550:	60bb      	str	r3, [r7, #8]
 8008552:	f107 0208 	add.w	r2, r7, #8
 8008556:	f107 030c 	add.w	r3, r7, #12
 800855a:	4611      	mov	r1, r2
 800855c:	4618      	mov	r0, r3
 800855e:	f000 f9d9 	bl	8008914 <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d014      	beq.n	8008592 <_ZN13SensorManager23OpticalSensorInitializeEv+0x62>
 8008568:	f107 030c 	add.w	r3, r7, #12
 800856c:	4618      	mov	r0, r3
 800856e:	f000 f9f9 	bl	8008964 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>
 8008572:	6138      	str	r0, [r7, #16]
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3314      	adds	r3, #20
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4610      	mov	r0, r2
 8008584:	4798      	blx	r3
 8008586:	f107 030c 	add.w	r3, r7, #12
 800858a:	4618      	mov	r0, r3
 800858c:	f000 f9da 	bl	8008944 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>
 8008590:	e7df      	b.n	8008552 <_ZN13SensorManager23OpticalSensorInitializeEv+0x22>
	//add pcv 80 or
}
 8008592:	bf00      	nop
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	0000      	movs	r0, r0
 800859c:	0000      	movs	r0, r0
	...

080085a0 <_ZN13SensorManager14PGV100RegisterEv>:

void SensorManager::PGV100Register()
{
 80085a0:	b5b0      	push	{r4, r5, r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af04      	add	r7, sp, #16
 80085a6:	6078      	str	r0, [r7, #4]
	if(pgv100_.empty())
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	330c      	adds	r3, #12
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fa3c 	bl	8008a2a <_ZNKSt6vectorIP6PGV100SaIS1_EE5emptyEv>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d020      	beq.n	80085fa <_ZN13SensorManager14PGV100RegisterEv+0x5a>
	{
		pgv100_.emplace_back(new PGV100(0x00, RS485, &huart5, GPIOB, GPIO_PIN_0, milimeter_1, 0.0, 0.0, 0.0));
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f103 050c 	add.w	r5, r3, #12
 80085be:	20b8      	movs	r0, #184	; 0xb8
 80085c0:	f01a fa39 	bl	8022a36 <_Znwj>
 80085c4:	4603      	mov	r3, r0
 80085c6:	461c      	mov	r4, r3
 80085c8:	230a      	movs	r3, #10
 80085ca:	9302      	str	r3, [sp, #8]
 80085cc:	2301      	movs	r3, #1
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	4b0f      	ldr	r3, [pc, #60]	; (8008610 <_ZN13SensorManager14PGV100RegisterEv+0x70>)
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 8008608 <_ZN13SensorManager14PGV100RegisterEv+0x68>
 80085d8:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8008608 <_ZN13SensorManager14PGV100RegisterEv+0x68>
 80085dc:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8008608 <_ZN13SensorManager14PGV100RegisterEv+0x68>
 80085e0:	4b0c      	ldr	r3, [pc, #48]	; (8008614 <_ZN13SensorManager14PGV100RegisterEv+0x74>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	2100      	movs	r1, #0
 80085e6:	4620      	mov	r0, r4
 80085e8:	f7fe fe12 	bl	8007210 <_ZN6PGV100C1EttP20__UART_HandleTypeDefP12GPIO_TypeDefttddd>
 80085ec:	60fc      	str	r4, [r7, #12]
 80085ee:	f107 030c 	add.w	r3, r7, #12
 80085f2:	4619      	mov	r1, r3
 80085f4:	4628      	mov	r0, r5
 80085f6:	f000 fa33 	bl	8008a60 <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_>
	}

}
 80085fa:	bf00      	nop
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bdb0      	pop	{r4, r5, r7, pc}
 8008602:	bf00      	nop
 8008604:	f3af 8000 	nop.w
	...
 8008610:	40020400 	.word	0x40020400
 8008614:	2000060c 	.word	0x2000060c

08008618 <_ZN13SensorManager16PGV100InitializeEv>:


bool SensorManager::PGV100Initialize()
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
	PGV100Register();
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff ffbd 	bl	80085a0 <_ZN13SensorManager14PGV100RegisterEv>
	OpticalSensorInitialize();
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7ff ff82 	bl	8008530 <_ZN13SensorManager23OpticalSensorInitializeEv>
	PGV100Drive();
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f808 	bl	8008642 <_ZN13SensorManager11PGV100DriveEv>
	return PGV100IsErrUp();
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f836 	bl	80086a4 <_ZNK13SensorManager13PGV100IsErrUpEv>
 8008638:	4603      	mov	r3, r0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <_ZN13SensorManager11PGV100DriveEv>:
}



void SensorManager::PGV100Drive()
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b086      	sub	sp, #24
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
	for (auto& index : pgv100_) index->Drive();
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	330c      	adds	r3, #12
 800864e:	617b      	str	r3, [r7, #20]
 8008650:	6978      	ldr	r0, [r7, #20]
 8008652:	f000 f93e 	bl	80088d2 <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8008656:	4603      	mov	r3, r0
 8008658:	60fb      	str	r3, [r7, #12]
 800865a:	6978      	ldr	r0, [r7, #20]
 800865c:	f000 f949 	bl	80088f2 <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 8008660:	4603      	mov	r3, r0
 8008662:	60bb      	str	r3, [r7, #8]
 8008664:	f107 0208 	add.w	r2, r7, #8
 8008668:	f107 030c 	add.w	r3, r7, #12
 800866c:	4611      	mov	r1, r2
 800866e:	4618      	mov	r0, r3
 8008670:	f000 f950 	bl	8008914 <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d010      	beq.n	800869c <_ZN13SensorManager11PGV100DriveEv+0x5a>
 800867a:	f107 030c 	add.w	r3, r7, #12
 800867e:	4618      	mov	r0, r3
 8008680:	f000 f970 	bl	8008964 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>
 8008684:	6138      	str	r0, [r7, #16]
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4618      	mov	r0, r3
 800868c:	f7fc fde0 	bl	8005250 <_ZN12PNFPosSensor5DriveEv>
 8008690:	f107 030c 	add.w	r3, r7, #12
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f955 	bl	8008944 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>
 800869a:	e7e3      	b.n	8008664 <_ZN13SensorManager11PGV100DriveEv+0x22>
}
 800869c:	bf00      	nop
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <_ZNK13SensorManager13PGV100IsErrUpEv>:
{
	return pgv100_.at(0)->GetErrStatus();
}

bool SensorManager::PGV100IsErrUp() const
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
	return pgv100_.at(0)->IsErrUp();
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	330c      	adds	r3, #12
 80086b0:	2100      	movs	r1, #0
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fa02 	bl	8008abc <_ZNKSt6vectorIP6PGV100SaIS1_EE2atEj>
 80086b8:	4603      	mov	r3, r0
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fc fdb6 	bl	800522e <_ZN12PNFPosSensor7IsErrUpEv>
 80086c2:	4603      	mov	r3, r0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fa03 	bl	8008ae0 <_ZNSaIP12CommonSensorEC1Ev>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 fa0b 	bl	8008af8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4618      	mov	r0, r3
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <_ZNSaIP12CommonSensorED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fa13 	bl	8008b20 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorED1Ev>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4618      	mov	r0, r3
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800871c:	461a      	mov	r2, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fa09 	bl	8008b36 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>
      }
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4618      	mov	r0, r3
 8008728:	f7ff fc03 	bl	8007f32 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implD1Ev>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <_ZNSt6vectorIP12CommonSensorSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8008736:	b5b0      	push	{r4, r5, r7, lr}
 8008738:	b082      	sub	sp, #8
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681c      	ldr	r4, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4618      	mov	r0, r3
 800874a:	f000 fa07 	bl	8008b5c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 800874e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008750:	461a      	mov	r2, r3
 8008752:	4629      	mov	r1, r5
 8008754:	4620      	mov	r0, r4
 8008756:	f000 fa0c 	bl	8008b72 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
      }
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff ffd1 	bl	8008704 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EED1Ev>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4618      	mov	r0, r3
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bdb0      	pop	{r4, r5, r7, pc}

0800876c <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fa0a 	bl	8008b8e <_ZNSaIP6PGV100EC1Ev>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4618      	mov	r0, r3
 800877e:	f000 fa12 	bl	8008ba6 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <_ZNSaIP6PGV100ED1Ev>:
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fa1a 	bl	8008bce <_ZN9__gnu_cxx13new_allocatorIP6PGV100ED1Ev>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4618      	mov	r0, r3
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80087bc:	461a      	mov	r2, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fa10 	bl	8008be4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j>
      }
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff fbd9 	bl	8007f7e <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implD1Ev>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <_ZNSt6vectorIP6PGV100SaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80087d6:	b5b0      	push	{r4, r5, r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681c      	ldr	r4, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 fa0e 	bl	8008c0a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 80087ee:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80087f0:	461a      	mov	r2, r3
 80087f2:	4629      	mov	r1, r5
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 fa13 	bl	8008c20 <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>
      }
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff ffd1 	bl	80087a4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EED1Ev>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bdb0      	pop	{r4, r5, r7, pc}

0800880c <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	f107 030c 	add.w	r3, r7, #12
 800881a:	4611      	mov	r1, r2
 800881c:	4618      	mov	r0, r3
 800881e:	f000 fa0d 	bl	8008c3c <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	1d1a      	adds	r2, r3, #4
 8008838:	f107 030c 	add.w	r3, r7, #12
 800883c:	4611      	mov	r1, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f000 f9fc 	bl	8008c3c <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800884e:	b590      	push	{r4, r7, lr}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f9ff 	bl	8008c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 800885e:	4603      	mov	r3, r0
 8008860:	681c      	ldr	r4, [r3, #0]
 8008862:	6838      	ldr	r0, [r7, #0]
 8008864:	f000 f9fa 	bl	8008c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008868:	4603      	mov	r3, r0
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	429c      	cmp	r4, r3
 800886e:	bf14      	ite	ne
 8008870:	2301      	movne	r3, #1
 8008872:	2300      	moveq	r3, #0
 8008874:	b2db      	uxtb	r3, r3
 8008876:	4618      	mov	r0, r3
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	bd90      	pop	{r4, r7, pc}

0800887e <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
	++_M_current;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	1d1a      	adds	r2, r3, #4
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	601a      	str	r2, [r3, #0]
	return *this;
 8008890:	687b      	ldr	r3, [r7, #4]
      }
 8008892:	4618      	mov	r0, r3
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800889e:	b480      	push	{r7}
 80088a0:	b083      	sub	sp, #12
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4618      	mov	r0, r3
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f9d4 	bl	8008c72 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_>
 80088ca:	bf00      	nop
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	f107 030c 	add.w	r3, r7, #12
 80088e0:	4611      	mov	r1, r2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f9e6 	bl	8008cb4 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	1d1a      	adds	r2, r3, #4
 80088fe:	f107 030c 	add.w	r3, r7, #12
 8008902:	4611      	mov	r1, r2
 8008904:	4618      	mov	r0, r3
 8008906:	f000 f9d5 	bl	8008cb4 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008914:	b590      	push	{r4, r7, lr}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f9d8 	bl	8008cd4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8008924:	4603      	mov	r3, r0
 8008926:	681c      	ldr	r4, [r3, #0]
 8008928:	6838      	ldr	r0, [r7, #0]
 800892a:	f000 f9d3 	bl	8008cd4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 800892e:	4603      	mov	r3, r0
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	429c      	cmp	r4, r3
 8008934:	bf14      	ite	ne
 8008936:	2301      	movne	r3, #1
 8008938:	2300      	moveq	r3, #0
 800893a:	b2db      	uxtb	r3, r3
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	bd90      	pop	{r4, r7, pc}

08008944 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	1d1a      	adds	r2, r3, #4
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	601a      	str	r2, [r3, #0]
	return *this;
 8008956:	687b      	ldr	r3, [r7, #4]
      }
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4618      	mov	r0, r3
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <_ZNSt6vectorIP6PGV100SaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f9ad 	bl	8008cea <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_>
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f9c3 	bl	8008d2c <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 80089a6:	4603      	mov	r3, r0
 80089a8:	60bb      	str	r3, [r7, #8]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f9ce 	bl	8008d4c <_ZNKSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 80089b0:	4603      	mov	r3, r0
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	f107 020c 	add.w	r2, r7, #12
 80089b8:	f107 0308 	add.w	r3, r7, #8
 80089bc:	4611      	mov	r1, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 f9d5 	bl	8008d6e <_ZN9__gnu_cxxeqIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 80089c4:	4603      	mov	r3, r0
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 80089ce:	b5b0      	push	{r4, r5, r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d011      	beq.n	8008a08 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80089e4:	687c      	ldr	r4, [r7, #4]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685d      	ldr	r5, [r3, #4]
 80089ea:	6838      	ldr	r0, [r7, #0]
 80089ec:	f000 f9d7 	bl	8008d9e <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 80089f0:	4603      	mov	r3, r0
 80089f2:	461a      	mov	r2, r3
 80089f4:	4629      	mov	r1, r5
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 f9dc 	bl	8008db4 <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	1d1a      	adds	r2, r3, #4
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	605a      	str	r2, [r3, #4]
      }
 8008a06:	e00c      	b.n	8008a22 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff ff0f 	bl	800882c <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 8008a0e:	4604      	mov	r4, r0
 8008a10:	6838      	ldr	r0, [r7, #0]
 8008a12:	f000 f9c4 	bl	8008d9e <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8008a16:	4603      	mov	r3, r0
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f9f3 	bl	8008e08 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8008a22:	bf00      	nop
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bdb0      	pop	{r4, r5, r7, pc}

08008a2a <_ZNKSt6vectorIP6PGV100SaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 faa4 	bl	8008f80 <_ZNKSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	60bb      	str	r3, [r7, #8]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 faaf 	bl	8008fa0 <_ZNKSt6vectorIP6PGV100SaIS1_EE3endEv>
 8008a42:	4603      	mov	r3, r0
 8008a44:	60fb      	str	r3, [r7, #12]
 8008a46:	f107 020c 	add.w	r2, r7, #12
 8008a4a:	f107 0308 	add.w	r3, r7, #8
 8008a4e:	4611      	mov	r1, r2
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 fab6 	bl	8008fc2 <_ZN9__gnu_cxxeqIPKP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8008a56:	4603      	mov	r3, r0
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8008a60:	b5b0      	push	{r4, r5, r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d011      	beq.n	8008a9a <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008a76:	687c      	ldr	r4, [r7, #4]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685d      	ldr	r5, [r3, #4]
 8008a7c:	6838      	ldr	r0, [r7, #0]
 8008a7e:	f000 fab8 	bl	8008ff2 <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 8008a82:	4603      	mov	r3, r0
 8008a84:	461a      	mov	r2, r3
 8008a86:	4629      	mov	r1, r5
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 fabd 	bl	8009008 <_ZNSt16allocator_traitsISaIP6PGV100EE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	1d1a      	adds	r2, r3, #4
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	605a      	str	r2, [r3, #4]
      }
 8008a98:	e00c      	b.n	8008ab4 <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7ff ff29 	bl	80088f2 <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	6838      	ldr	r0, [r7, #0]
 8008aa4:	f000 faa5 	bl	8008ff2 <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	461a      	mov	r2, r3
 8008aac:	4621      	mov	r1, r4
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fad4 	bl	800905c <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bdb0      	pop	{r4, r5, r7, pc}

08008abc <_ZNKSt6vectorIP6PGV100SaIS1_EE2atEj>:
      at(size_type __n) const
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fb83 	bl	80091d4 <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj>
	return (*this)[__n];
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fb9f 	bl	8009214 <_ZNKSt6vectorIP6PGV100SaIS1_EEixEj>
 8008ad6:	4603      	mov	r3, r0
      }
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <_ZNSaIP12CommonSensorEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fba3 	bl	8009234 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorEC1Ev>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4618      	mov	r0, r3
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	605a      	str	r2, [r3, #4]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	609a      	str	r2, [r3, #8]
	{ }
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4618      	mov	r0, r3
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b084      	sub	sp, #16
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	60f8      	str	r0, [r7, #12]
 8008b3e:	60b9      	str	r1, [r7, #8]
 8008b40:	607a      	str	r2, [r7, #4]
	if (__p)
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d005      	beq.n	8008b54 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	68b9      	ldr	r1, [r7, #8]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fb7b 	bl	800924a <_ZNSt16allocator_traitsISaIP12CommonSensorEE10deallocateERS2_PS1_j>
      }
 8008b54:	bf00      	nop
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4618      	mov	r0, r3
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b084      	sub	sp, #16
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8008b7e:	68b9      	ldr	r1, [r7, #8]
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 fb71 	bl	8009268 <_ZSt8_DestroyIPP12CommonSensorEvT_S3_>
    }
 8008b86:	bf00      	nop
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <_ZNSaIP6PGV100EC1Ev>:
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fb73 	bl	8009282 <_ZN9__gnu_cxx13new_allocatorIP6PGV100EC1Ev>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	605a      	str	r2, [r3, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	609a      	str	r2, [r3, #8]
	{ }
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <_ZN9__gnu_cxx13new_allocatorIP6PGV100ED1Ev>:
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
	if (__p)
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d005      	beq.n	8008c02 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	68b9      	ldr	r1, [r7, #8]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 fb4b 	bl	8009298 <_ZNSt16allocator_traitsISaIP6PGV100EE10deallocateERS2_PS1_j>
      }
 8008c02:	bf00      	nop
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008c0a:	b480      	push	{r7}
 8008c0c:	b083      	sub	sp, #12
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8008c2c:	68b9      	ldr	r1, [r7, #8]
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 fb41 	bl	80092b6 <_ZSt8_DestroyIPP6PGV100EvT_S3_>
    }
 8008c34:	bf00      	nop
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4618      	mov	r0, r3
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4618      	mov	r0, r3
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8008c72:	b590      	push	{r4, r7, lr}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	109b      	asrs	r3, r3, #2
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00e      	beq.n	8008cac <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7ff ff61 	bl	8008b5c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8008c9a:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	6838      	ldr	r0, [r7, #0]
 8008ca2:	f7ff ff66 	bl	8008b72 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	605a      	str	r2, [r3, #4]
      }
 8008cac:	bf00      	nop
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd90      	pop	{r4, r7, pc}

08008cb4 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8008cea:	b590      	push	{r4, r7, lr}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	109b      	asrs	r3, r3, #2
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00e      	beq.n	8008d24 <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7ff ff7c 	bl	8008c0a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8008d12:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8008d14:	461a      	mov	r2, r3
 8008d16:	4621      	mov	r1, r4
 8008d18:	6838      	ldr	r0, [r7, #0]
 8008d1a:	f7ff ff81 	bl	8008c20 <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	605a      	str	r2, [r3, #4]
      }
 8008d24:	bf00      	nop
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd90      	pop	{r4, r7, pc}

08008d2c <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	f107 030c 	add.w	r3, r7, #12
 8008d3a:	4611      	mov	r1, r2
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f000 fac7 	bl	80092d0 <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <_ZNKSt6vectorIP12CommonSensorSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	1d1a      	adds	r2, r3, #4
 8008d58:	f107 030c 	add.w	r3, r7, #12
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 fab6 	bl	80092d0 <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <_ZN9__gnu_cxxeqIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008d6e:	b590      	push	{r4, r7, lr}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fab9 	bl	80092f0 <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	681c      	ldr	r4, [r3, #0]
 8008d82:	6838      	ldr	r0, [r7, #0]
 8008d84:	f000 fab4 	bl	80092f0 <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	429c      	cmp	r4, r3
 8008d8e:	bf0c      	ite	eq
 8008d90:	2301      	moveq	r3, #1
 8008d92:	2300      	movne	r3, #0
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	4618      	mov	r0, r3
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd90      	pop	{r4, r7, pc}

08008d9e <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008d9e:	b480      	push	{r7}
 8008da0:	b083      	sub	sp, #12
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7ff ffec 	bl	8008d9e <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	461a      	mov	r2, r3
 8008dca:	68b9      	ldr	r1, [r7, #8]
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f000 fa9a 	bl	8009306 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8008dd2:	bf00      	nop
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b082      	sub	sp, #8
 8008dde:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 f805 	bl	8008df0 <_ZNSt6vectorIP12CommonSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8008de6:	4603      	mov	r3, r0
      }
 8008de8:	4618      	mov	r0, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <_ZNSt6vectorIP12CommonSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8008df8:	2301      	movs	r3, #1
      }
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
	...

08008e08 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8008e08:	b5b0      	push	{r4, r5, r7, lr}
 8008e0a:	b08c      	sub	sp, #48	; 0x30
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8008e14:	4a59      	ldr	r2, [pc, #356]	; (8008f7c <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8008e16:	2101      	movs	r1, #1
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 fa8a 	bl	8009332 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc>
 8008e1e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f7ff fced 	bl	800880c <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 8008e32:	4603      	mov	r3, r0
 8008e34:	617b      	str	r3, [r7, #20]
 8008e36:	f107 0214 	add.w	r2, r7, #20
 8008e3a:	f107 0308 	add.w	r3, r7, #8
 8008e3e:	4611      	mov	r1, r2
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 fabd 	bl	80093c0 <_ZN9__gnu_cxxmiIPP12CommonSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8008e46:	4603      	mov	r3, r0
 8008e48:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 facb 	bl	80093ea <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj>
 8008e54:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8008e5a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	18d5      	adds	r5, r2, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff ff9a 	bl	8008d9e <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	4629      	mov	r1, r5
 8008e70:	4620      	mov	r0, r4
 8008e72:	f7ff ff9f 	bl	8008db4 <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8008e76:	2300      	movs	r3, #0
 8008e78:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8008e7a:	f7ff ffae 	bl	8008dda <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d027      	beq.n	8008ed4 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008e84:	f107 0308 	add.w	r3, r7, #8
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7ff fee7 	bl	8008c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff fe61 	bl	8008b5c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8008e9a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008e9c:	69ba      	ldr	r2, [r7, #24]
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ea2:	f000 fab6 	bl	8009412 <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8008ea6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	3304      	adds	r3, #4
 8008eac:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008eae:	f107 0308 	add.w	r3, r7, #8
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7ff fed2 	bl	8008c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff fe4c 	bl	8008b5c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8008ec4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec8:	6a39      	ldr	r1, [r7, #32]
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 faa1 	bl	8009412 <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8008ed0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008ed2:	e026      	b.n	8008f22 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8008ed4:	f107 0308 	add.w	r3, r7, #8
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff febf 	bl	8008c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff fe39 	bl	8008b5c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8008eea:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	4621      	mov	r1, r4
 8008ef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ef2:	f000 faa2 	bl	800943a <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8008ef6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	3304      	adds	r3, #4
 8008efc:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8008efe:	f107 0308 	add.w	r3, r7, #8
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7ff feaa 	bl	8008c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff fe24 	bl	8008b5c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8008f14:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8008f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f18:	6a39      	ldr	r1, [r7, #32]
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 fa8d 	bl	800943a <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8008f20:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8008f22:	f7ff ff5a 	bl	8008dda <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>
 8008f26:	4603      	mov	r3, r0
 8008f28:	f083 0301 	eor.w	r3, r3, #1
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d009      	beq.n	8008f46 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7ff fe11 	bl	8008b5c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	6a39      	ldr	r1, [r7, #32]
 8008f40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f42:	f7ff fe16 	bl	8008b72 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8008f46:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	689a      	ldr	r2, [r3, #8]
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8008f52:	461a      	mov	r2, r3
 8008f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f56:	f7ff fdee 	bl	8008b36 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	69ba      	ldr	r2, [r7, #24]
 8008f5e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f64:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	441a      	add	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	609a      	str	r2, [r3, #8]
    }
 8008f72:	bf00      	nop
 8008f74:	3730      	adds	r7, #48	; 0x30
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bdb0      	pop	{r4, r5, r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	0802527c 	.word	0x0802527c

08008f80 <_ZNKSt6vectorIP6PGV100SaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	f107 030c 	add.w	r3, r7, #12
 8008f8e:	4611      	mov	r1, r2
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 fa6b 	bl	800946c <_ZN9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS4_>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <_ZNKSt6vectorIP6PGV100SaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	1d1a      	adds	r2, r3, #4
 8008fac:	f107 030c 	add.w	r3, r7, #12
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 fa5a 	bl	800946c <_ZN9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS4_>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <_ZN9__gnu_cxxeqIPKP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008fc2:	b590      	push	{r4, r7, lr}
 8008fc4:	b083      	sub	sp, #12
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fa5d 	bl	800948c <_ZNK9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	681c      	ldr	r4, [r3, #0]
 8008fd6:	6838      	ldr	r0, [r7, #0]
 8008fd8:	f000 fa58 	bl	800948c <_ZNK9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	429c      	cmp	r4, r3
 8008fe2:	bf0c      	ite	eq
 8008fe4:	2301      	moveq	r3, #1
 8008fe6:	2300      	movne	r3, #0
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	4618      	mov	r0, r3
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd90      	pop	{r4, r7, pc}

08008ff2 <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008ff2:	b480      	push	{r7}
 8008ff4:	b083      	sub	sp, #12
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <_ZNSt16allocator_traitsISaIP6PGV100EE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff ffec 	bl	8008ff2 <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 800901a:	4603      	mov	r3, r0
 800901c:	461a      	mov	r2, r3
 800901e:	68b9      	ldr	r1, [r7, #8]
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 fa3e 	bl	80094a2 <_ZN9__gnu_cxx13new_allocatorIP6PGV100E9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8009026:	bf00      	nop
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <_ZNSt6vectorIP6PGV100SaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8009034:	4618      	mov	r0, r3
 8009036:	f000 f805 	bl	8009044 <_ZNSt6vectorIP6PGV100SaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800903a:	4603      	mov	r3, r0
      }
 800903c:	4618      	mov	r0, r3
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <_ZNSt6vectorIP6PGV100SaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800904c:	2301      	movs	r3, #1
      }
 800904e:	4618      	mov	r0, r3
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
	...

0800905c <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800905c:	b5b0      	push	{r4, r5, r7, lr}
 800905e:	b08c      	sub	sp, #48	; 0x30
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8009068:	4a59      	ldr	r2, [pc, #356]	; (80091d0 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800906a:	2101      	movs	r1, #1
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 fa2e 	bl	80094ce <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc>
 8009072:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f7ff fc26 	bl	80088d2 <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8009086:	4603      	mov	r3, r0
 8009088:	617b      	str	r3, [r7, #20]
 800908a:	f107 0214 	add.w	r2, r7, #20
 800908e:	f107 0308 	add.w	r3, r7, #8
 8009092:	4611      	mov	r1, r2
 8009094:	4618      	mov	r0, r3
 8009096:	f000 fa61 	bl	800955c <_ZN9__gnu_cxxmiIPP6PGV100St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800909a:	4603      	mov	r3, r0
 800909c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 fa6f 	bl	8009586 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj>
 80090a8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 80090ae:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	18d5      	adds	r5, r2, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7ff ff9a 	bl	8008ff2 <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 80090be:	4603      	mov	r3, r0
 80090c0:	461a      	mov	r2, r3
 80090c2:	4629      	mov	r1, r5
 80090c4:	4620      	mov	r0, r4
 80090c6:	f7ff ff9f 	bl	8009008 <_ZNSt16allocator_traitsISaIP6PGV100EE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80090ca:	2300      	movs	r3, #0
 80090cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80090ce:	f7ff ffae 	bl	800902e <_ZNSt6vectorIP6PGV100SaIS1_EE15_S_use_relocateEv>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d027      	beq.n	8009128 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80090d8:	f107 0308 	add.w	r3, r7, #8
 80090dc:	4618      	mov	r0, r3
 80090de:	f7ff fdf9 	bl	8008cd4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 80090e2:	4603      	mov	r3, r0
 80090e4:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff fd8e 	bl	8008c0a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 80090ee:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	4621      	mov	r1, r4
 80090f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090f6:	f000 fa5a 	bl	80095ae <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80090fa:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80090fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fe:	3304      	adds	r3, #4
 8009100:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009102:	f107 0308 	add.w	r3, r7, #8
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fde4 	bl	8008cd4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 800910c:	4603      	mov	r3, r0
 800910e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4618      	mov	r0, r3
 8009114:	f7ff fd79 	bl	8008c0a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8009118:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800911a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800911c:	6a39      	ldr	r1, [r7, #32]
 800911e:	4620      	mov	r0, r4
 8009120:	f000 fa45 	bl	80095ae <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009124:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009126:	e026      	b.n	8009176 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8009128:	f107 0308 	add.w	r3, r7, #8
 800912c:	4618      	mov	r0, r3
 800912e:	f7ff fdd1 	bl	8008cd4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8009132:	4603      	mov	r3, r0
 8009134:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	4618      	mov	r0, r3
 800913a:	f7ff fd66 	bl	8008c0a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 800913e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	4621      	mov	r1, r4
 8009144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009146:	f000 fa46 	bl	80095d6 <_ZSt34__uninitialized_move_if_noexcept_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>
 800914a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	3304      	adds	r3, #4
 8009150:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8009152:	f107 0308 	add.w	r3, r7, #8
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff fdbc 	bl	8008cd4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 800915c:	4603      	mov	r3, r0
 800915e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff fd51 	bl	8008c0a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8009168:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800916a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800916c:	6a39      	ldr	r1, [r7, #32]
 800916e:	4620      	mov	r0, r4
 8009170:	f000 fa31 	bl	80095d6 <_ZSt34__uninitialized_move_if_noexcept_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>
 8009174:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8009176:	f7ff ff5a 	bl	800902e <_ZNSt6vectorIP6PGV100SaIS1_EE15_S_use_relocateEv>
 800917a:	4603      	mov	r3, r0
 800917c:	f083 0301 	eor.w	r3, r3, #1
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d009      	beq.n	800919a <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff fd3e 	bl	8008c0a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 800918e:	4603      	mov	r3, r0
 8009190:	461a      	mov	r2, r3
 8009192:	6a39      	ldr	r1, [r7, #32]
 8009194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009196:	f7ff fd43 	bl	8008c20 <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800919a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	689a      	ldr	r2, [r3, #8]
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80091a6:	461a      	mov	r2, r3
 80091a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091aa:	f7ff fd1b 	bl	8008be4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	69ba      	ldr	r2, [r7, #24]
 80091b2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091b8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	441a      	add	r2, r3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	609a      	str	r2, [r3, #8]
    }
 80091c6:	bf00      	nop
 80091c8:	3730      	adds	r7, #48	; 0x30
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bdb0      	pop	{r4, r5, r7, pc}
 80091ce:	bf00      	nop
 80091d0:	0802527c 	.word	0x0802527c

080091d4 <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa12 	bl	8009608 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 80091e4:	4602      	mov	r2, r0
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	4293      	cmp	r3, r2
 80091ea:	bf2c      	ite	cs
 80091ec:	2301      	movcs	r3, #1
 80091ee:	2300      	movcc	r3, #0
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d008      	beq.n	8009208 <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fa06 	bl	8009608 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 80091fc:	4603      	mov	r3, r0
 80091fe:	461a      	mov	r2, r3
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	4803      	ldr	r0, [pc, #12]	; (8009210 <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj+0x3c>)
 8009204:	f019 fc34 	bl	8022a70 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8009208:	bf00      	nop
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	08025298 	.word	0x08025298

08009214 <_ZNKSt6vectorIP6PGV100SaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
      }
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4618      	mov	r0, r3
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <_ZNSt16allocator_traitsISaIP12CommonSensorEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	60f8      	str	r0, [r7, #12]
 8009252:	60b9      	str	r1, [r7, #8]
 8009254:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	68b9      	ldr	r1, [r7, #8]
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 f9e4 	bl	8009628 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE10deallocateEPS2_j>
 8009260:	bf00      	nop
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <_ZSt8_DestroyIPP12CommonSensorEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f9e7 	bl	8009648 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12CommonSensorEEvT_S5_>
    }
 800927a:	bf00      	nop
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <_ZN9__gnu_cxx13new_allocatorIP6PGV100EC1Ev>:
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4618      	mov	r0, r3
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <_ZNSt16allocator_traitsISaIP6PGV100EE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	68b9      	ldr	r1, [r7, #8]
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 f9d8 	bl	800965e <_ZN9__gnu_cxx13new_allocatorIP6PGV100E10deallocateEPS2_j>
 80092ae:	bf00      	nop
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <_ZSt8_DestroyIPP6PGV100EvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f9db 	bl	800967e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6PGV100EEvT_S5_>
    }
 80092c8:	bf00      	nop
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4618      	mov	r0, r3
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4618      	mov	r0, r3
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009306:	b590      	push	{r4, r7, lr}
 8009308:	b085      	sub	sp, #20
 800930a:	af00      	add	r7, sp, #0
 800930c:	60f8      	str	r0, [r7, #12]
 800930e:	60b9      	str	r1, [r7, #8]
 8009310:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff fd43 	bl	8008d9e <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8009318:	4603      	mov	r3, r0
 800931a:	681c      	ldr	r4, [r3, #0]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	4619      	mov	r1, r3
 8009320:	2004      	movs	r0, #4
 8009322:	f7f8 fdae 	bl	8001e82 <_ZnwjPv>
 8009326:	4603      	mov	r3, r0
 8009328:	601c      	str	r4, [r3, #0]
 800932a:	bf00      	nop
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	bd90      	pop	{r4, r7, pc}

08009332 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009332:	b590      	push	{r4, r7, lr}
 8009334:	b087      	sub	sp, #28
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f000 f9a8 	bl	8009694 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 8009344:	4604      	mov	r4, r0
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f9b5 	bl	80096b6 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 800934c:	4603      	mov	r3, r0
 800934e:	1ae2      	subs	r2, r4, r3
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	429a      	cmp	r2, r3
 8009354:	bf34      	ite	cc
 8009356:	2301      	movcc	r3, #1
 8009358:	2300      	movcs	r3, #0
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f019 fb82 	bl	8022a6a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 f9a5 	bl	80096b6 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 800936c:	4604      	mov	r4, r0
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 f9a1 	bl	80096b6 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 8009374:	4603      	mov	r3, r0
 8009376:	613b      	str	r3, [r7, #16]
 8009378:	f107 0208 	add.w	r2, r7, #8
 800937c:	f107 0310 	add.w	r3, r7, #16
 8009380:	4611      	mov	r1, r2
 8009382:	4618      	mov	r0, r3
 8009384:	f7fa fc4b 	bl	8003c1e <_ZSt3maxIjERKT_S2_S2_>
 8009388:	4603      	mov	r3, r0
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4423      	add	r3, r4
 800938e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 f990 	bl	80096b6 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 8009396:	4602      	mov	r2, r0
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	4293      	cmp	r3, r2
 800939c:	d306      	bcc.n	80093ac <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 f978 	bl	8009694 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 80093a4:	4602      	mov	r2, r0
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d904      	bls.n	80093b6 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x84>
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 f971 	bl	8009694 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 80093b2:	4603      	mov	r3, r0
 80093b4:	e000      	b.n	80093b8 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x86>
 80093b6:	697b      	ldr	r3, [r7, #20]
      }
 80093b8:	4618      	mov	r0, r3
 80093ba:	371c      	adds	r7, #28
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd90      	pop	{r4, r7, pc}

080093c0 <_ZN9__gnu_cxxmiIPP12CommonSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80093c0:	b590      	push	{r4, r7, lr}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7ff fc46 	bl	8008c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80093d0:	4603      	mov	r3, r0
 80093d2:	681c      	ldr	r4, [r3, #0]
 80093d4:	6838      	ldr	r0, [r7, #0]
 80093d6:	f7ff fc41 	bl	8008c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80093da:	4603      	mov	r3, r0
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	1ae3      	subs	r3, r4, r3
 80093e0:	109b      	asrs	r3, r3, #2
 80093e2:	4618      	mov	r0, r3
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd90      	pop	{r4, r7, pc}

080093ea <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b082      	sub	sp, #8
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d006      	beq.n	8009408 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj+0x1e>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 f969 	bl	80096d6 <_ZNSt16allocator_traitsISaIP12CommonSensorEE8allocateERS2_j>
 8009404:	4603      	mov	r3, r0
 8009406:	e000      	b.n	800940a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj+0x20>
 8009408:	2300      	movs	r3, #0
      }
 800940a:	4618      	mov	r0, r3
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8009412:	b590      	push	{r4, r7, lr}
 8009414:	b087      	sub	sp, #28
 8009416:	af02      	add	r7, sp, #8
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	60b9      	str	r1, [r7, #8]
 800941c:	607a      	str	r2, [r7, #4]
 800941e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8009420:	f88d 4000 	strb.w	r4, [sp]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	68b9      	ldr	r1, [r7, #8]
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f000 f962 	bl	80096f4 <_ZNSt6vectorIP12CommonSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8009430:	4603      	mov	r3, r0
      }
 8009432:	4618      	mov	r0, r3
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	bd90      	pop	{r4, r7, pc}

0800943a <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800943a:	b590      	push	{r4, r7, lr}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	60f8      	str	r0, [r7, #12]
 8009442:	60b9      	str	r1, [r7, #8]
 8009444:	607a      	str	r2, [r7, #4]
 8009446:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f000 f965 	bl	8009718 <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>
 800944e:	4604      	mov	r4, r0
 8009450:	68b8      	ldr	r0, [r7, #8]
 8009452:	f000 f961 	bl	8009718 <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>
 8009456:	4601      	mov	r1, r0
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	4620      	mov	r0, r4
 800945e:	f000 f96a 	bl	8009736 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12CommonSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8009462:	4603      	mov	r3, r0
    }
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	bd90      	pop	{r4, r7, pc}

0800946c <_ZN9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4618      	mov	r0, r3
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <_ZNK9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4618      	mov	r0, r3
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <_ZN9__gnu_cxx13new_allocatorIP6PGV100E9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80094a2:	b590      	push	{r4, r7, lr}
 80094a4:	b085      	sub	sp, #20
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	60f8      	str	r0, [r7, #12]
 80094aa:	60b9      	str	r1, [r7, #8]
 80094ac:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7ff fd9f 	bl	8008ff2 <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 80094b4:	4603      	mov	r3, r0
 80094b6:	681c      	ldr	r4, [r3, #0]
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	4619      	mov	r1, r3
 80094bc:	2004      	movs	r0, #4
 80094be:	f7f8 fce0 	bl	8001e82 <_ZnwjPv>
 80094c2:	4603      	mov	r3, r0
 80094c4:	601c      	str	r4, [r3, #0]
 80094c6:	bf00      	nop
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd90      	pop	{r4, r7, pc}

080094ce <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80094ce:	b590      	push	{r4, r7, lr}
 80094d0:	b087      	sub	sp, #28
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 f93c 	bl	8009758 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>
 80094e0:	4604      	mov	r4, r0
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f000 f890 	bl	8009608 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 80094e8:	4603      	mov	r3, r0
 80094ea:	1ae2      	subs	r2, r4, r3
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	bf34      	ite	cc
 80094f2:	2301      	movcc	r3, #1
 80094f4:	2300      	movcs	r3, #0
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d002      	beq.n	8009502 <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f019 fab4 	bl	8022a6a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 f880 	bl	8009608 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8009508:	4604      	mov	r4, r0
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 f87c 	bl	8009608 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8009510:	4603      	mov	r3, r0
 8009512:	613b      	str	r3, [r7, #16]
 8009514:	f107 0208 	add.w	r2, r7, #8
 8009518:	f107 0310 	add.w	r3, r7, #16
 800951c:	4611      	mov	r1, r2
 800951e:	4618      	mov	r0, r3
 8009520:	f7fa fb7d 	bl	8003c1e <_ZSt3maxIjERKT_S2_S2_>
 8009524:	4603      	mov	r3, r0
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4423      	add	r3, r4
 800952a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 f86b 	bl	8009608 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8009532:	4602      	mov	r2, r0
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	4293      	cmp	r3, r2
 8009538:	d306      	bcc.n	8009548 <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x7a>
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f000 f90c 	bl	8009758 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>
 8009540:	4602      	mov	r2, r0
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	4293      	cmp	r3, r2
 8009546:	d904      	bls.n	8009552 <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x84>
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f905 	bl	8009758 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>
 800954e:	4603      	mov	r3, r0
 8009550:	e000      	b.n	8009554 <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x86>
 8009552:	697b      	ldr	r3, [r7, #20]
      }
 8009554:	4618      	mov	r0, r3
 8009556:	371c      	adds	r7, #28
 8009558:	46bd      	mov	sp, r7
 800955a:	bd90      	pop	{r4, r7, pc}

0800955c <_ZN9__gnu_cxxmiIPP6PGV100St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800955c:	b590      	push	{r4, r7, lr}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff fbb4 	bl	8008cd4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 800956c:	4603      	mov	r3, r0
 800956e:	681c      	ldr	r4, [r3, #0]
 8009570:	6838      	ldr	r0, [r7, #0]
 8009572:	f7ff fbaf 	bl	8008cd4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8009576:	4603      	mov	r3, r0
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	1ae3      	subs	r3, r4, r3
 800957c:	109b      	asrs	r3, r3, #2
 800957e:	4618      	mov	r0, r3
 8009580:	370c      	adds	r7, #12
 8009582:	46bd      	mov	sp, r7
 8009584:	bd90      	pop	{r4, r7, pc}

08009586 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d006      	beq.n	80095a4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj+0x1e>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	4618      	mov	r0, r3
 800959c:	f000 f8ed 	bl	800977a <_ZNSt16allocator_traitsISaIP6PGV100EE8allocateERS2_j>
 80095a0:	4603      	mov	r3, r0
 80095a2:	e000      	b.n	80095a6 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj+0x20>
 80095a4:	2300      	movs	r3, #0
      }
 80095a6:	4618      	mov	r0, r3
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80095ae:	b590      	push	{r4, r7, lr}
 80095b0:	b087      	sub	sp, #28
 80095b2:	af02      	add	r7, sp, #8
 80095b4:	60f8      	str	r0, [r7, #12]
 80095b6:	60b9      	str	r1, [r7, #8]
 80095b8:	607a      	str	r2, [r7, #4]
 80095ba:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80095bc:	f88d 4000 	strb.w	r4, [sp]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	68b9      	ldr	r1, [r7, #8]
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f000 f8e6 	bl	8009798 <_ZNSt6vectorIP6PGV100SaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80095cc:	4603      	mov	r3, r0
      }
 80095ce:	4618      	mov	r0, r3
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd90      	pop	{r4, r7, pc}

080095d6 <_ZSt34__uninitialized_move_if_noexcept_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80095d6:	b590      	push	{r4, r7, lr}
 80095d8:	b085      	sub	sp, #20
 80095da:	af00      	add	r7, sp, #0
 80095dc:	60f8      	str	r0, [r7, #12]
 80095de:	60b9      	str	r1, [r7, #8]
 80095e0:	607a      	str	r2, [r7, #4]
 80095e2:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 f8e9 	bl	80097bc <_ZSt32__make_move_if_noexcept_iteratorIP6PGV100St13move_iteratorIPS1_EET0_PT_>
 80095ea:	4604      	mov	r4, r0
 80095ec:	68b8      	ldr	r0, [r7, #8]
 80095ee:	f000 f8e5 	bl	80097bc <_ZSt32__make_move_if_noexcept_iteratorIP6PGV100St13move_iteratorIPS1_EET0_PT_>
 80095f2:	4601      	mov	r1, r0
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 f8ee 	bl	80097da <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6PGV100ES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80095fe:	4603      	mov	r3, r0
    }
 8009600:	4618      	mov	r0, r3
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	bd90      	pop	{r4, r7, pc}

08009608 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685a      	ldr	r2, [r3, #4]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	109b      	asrs	r3, r3, #2
 800961c:	4618      	mov	r0, r3
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4619      	mov	r1, r3
 800963a:	68b8      	ldr	r0, [r7, #8]
 800963c:	f019 f9ea 	bl	8022a14 <_ZdlPvj>
      }
 8009640:	bf00      	nop
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12CommonSensorEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
 8009652:	bf00      	nop
 8009654:	370c      	adds	r7, #12
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <_ZN9__gnu_cxx13new_allocatorIP6PGV100E10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	60f8      	str	r0, [r7, #12]
 8009666:	60b9      	str	r1, [r7, #8]
 8009668:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4619      	mov	r1, r3
 8009670:	68b8      	ldr	r0, [r7, #8]
 8009672:	f019 f9cf 	bl	8022a14 <_ZdlPvj>
      }
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6PGV100EEvT_S5_>:
 800967e:	b480      	push	{r7}
 8009680:	b083      	sub	sp, #12
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	6039      	str	r1, [r7, #0]
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 f8c6 	bl	8009830 <_ZNKSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80096a4:	4603      	mov	r3, r0
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 f8a8 	bl	80097fc <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_max_sizeERKS2_>
 80096ac:	4603      	mov	r3, r0
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	109b      	asrs	r3, r3, #2
 80096ca:	4618      	mov	r0, r3
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <_ZNSt16allocator_traitsISaIP12CommonSensorEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80096e0:	2200      	movs	r2, #0
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f8ae 	bl	8009846 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv>
 80096ea:	4603      	mov	r3, r0
 80096ec:	4618      	mov	r0, r3
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <_ZNSt6vectorIP12CommonSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
 8009700:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	68b9      	ldr	r1, [r7, #8]
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 f8ba 	bl	8009882 <_ZSt12__relocate_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 800970e:	4603      	mov	r3, r0
      }
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8009720:	f107 030c 	add.w	r3, r7, #12
 8009724:	6879      	ldr	r1, [r7, #4]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 f8c8 	bl	80098bc <_ZNSt13move_iteratorIPP12CommonSensorEC1ES2_>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12CommonSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	60f8      	str	r0, [r7, #12]
 800973e:	60b9      	str	r1, [r7, #8]
 8009740:	607a      	str	r2, [r7, #4]
 8009742:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	68b9      	ldr	r1, [r7, #8]
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 f8c9 	bl	80098e0 <_ZSt18uninitialized_copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>
 800974e:	4603      	mov	r3, r0
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4618      	mov	r0, r3
 8009764:	f000 f8e8 	bl	8009938 <_ZNKSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8009768:	4603      	mov	r3, r0
 800976a:	4618      	mov	r0, r3
 800976c:	f000 f8ca 	bl	8009904 <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_max_sizeERKS2_>
 8009770:	4603      	mov	r3, r0
 8009772:	4618      	mov	r0, r3
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <_ZNSt16allocator_traitsISaIP6PGV100EE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800977a:	b580      	push	{r7, lr}
 800977c:	b082      	sub	sp, #8
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009784:	2200      	movs	r2, #0
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f8e0 	bl	800994e <_ZN9__gnu_cxx13new_allocatorIP6PGV100E8allocateEjPKv>
 800978e:	4603      	mov	r3, r0
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <_ZNSt6vectorIP6PGV100SaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	68b9      	ldr	r1, [r7, #8]
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 f8ec 	bl	800998a <_ZSt12__relocate_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>
 80097b2:	4603      	mov	r3, r0
      }
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <_ZSt32__make_move_if_noexcept_iteratorIP6PGV100St13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80097c4:	f107 030c 	add.w	r3, r7, #12
 80097c8:	6879      	ldr	r1, [r7, #4]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 f8fa 	bl	80099c4 <_ZNSt13move_iteratorIPP6PGV100EC1ES2_>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6PGV100ES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80097da:	b580      	push	{r7, lr}
 80097dc:	b084      	sub	sp, #16
 80097de:	af00      	add	r7, sp, #0
 80097e0:	60f8      	str	r0, [r7, #12]
 80097e2:	60b9      	str	r1, [r7, #8]
 80097e4:	607a      	str	r2, [r7, #4]
 80097e6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	68b9      	ldr	r1, [r7, #8]
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f000 f8fb 	bl	80099e8 <_ZSt18uninitialized_copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>
 80097f2:	4603      	mov	r3, r0
 80097f4:	4618      	mov	r0, r3
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8009804:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009808:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f8fe 	bl	8009a0c <_ZNSt16allocator_traitsISaIP12CommonSensorEE8max_sizeERKS2_>
 8009810:	4603      	mov	r3, r0
 8009812:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8009814:	f107 0208 	add.w	r2, r7, #8
 8009818:	f107 030c 	add.w	r3, r7, #12
 800981c:	4611      	mov	r1, r2
 800981e:	4618      	mov	r0, r3
 8009820:	f7fa fcba 	bl	8004198 <_ZSt3minIjERKT_S2_S2_>
 8009824:	4603      	mov	r3, r0
 8009826:	681b      	ldr	r3, [r3, #0]
      }
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <_ZNKSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4618      	mov	r0, r3
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009846:	b580      	push	{r7, lr}
 8009848:	b084      	sub	sp, #16
 800984a:	af00      	add	r7, sp, #0
 800984c:	60f8      	str	r0, [r7, #12]
 800984e:	60b9      	str	r1, [r7, #8]
 8009850:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 f8e6 	bl	8009a24 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>
 8009858:	4602      	mov	r2, r0
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	4293      	cmp	r3, r2
 800985e:	bf8c      	ite	hi
 8009860:	2301      	movhi	r3, #1
 8009862:	2300      	movls	r3, #0
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800986a:	f019 f8f8 	bl	8022a5e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4618      	mov	r0, r3
 8009874:	f019 f8df 	bl	8022a36 <_Znwj>
 8009878:	4603      	mov	r3, r0
      }
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <_ZSt12__relocate_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8009882:	b5b0      	push	{r4, r5, r7, lr}
 8009884:	b084      	sub	sp, #16
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	60b9      	str	r1, [r7, #8]
 800988c:	607a      	str	r2, [r7, #4]
 800988e:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 f8d3 	bl	8009a3c <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 8009896:	4604      	mov	r4, r0
 8009898:	68b8      	ldr	r0, [r7, #8]
 800989a:	f000 f8cf 	bl	8009a3c <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 800989e:	4605      	mov	r5, r0
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f8cb 	bl	8009a3c <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 80098a6:	4602      	mov	r2, r0
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	4629      	mov	r1, r5
 80098ac:	4620      	mov	r0, r4
 80098ae:	f000 f8d0 	bl	8009a52 <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80098b2:	4603      	mov	r3, r0
    }
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bdb0      	pop	{r4, r5, r7, pc}

080098bc <_ZNSt13move_iteratorIPP12CommonSensorEC1ES2_>:
      move_iterator(iterator_type __i)
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80098c6:	463b      	mov	r3, r7
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 f8e0 	bl	8009a8e <_ZSt4moveIRPP12CommonSensorEONSt16remove_referenceIT_E4typeEOS5_>
 80098ce:	4603      	mov	r3, r0
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4618      	mov	r0, r3
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <_ZSt18uninitialized_copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80098ec:	2301      	movs	r3, #1
 80098ee:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	68b9      	ldr	r1, [r7, #8]
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f000 f8d5 	bl	8009aa4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12CommonSensorES5_EET0_T_S8_S7_>
 80098fa:	4603      	mov	r3, r0
    }
 80098fc:	4618      	mov	r0, r3
 80098fe:	3718      	adds	r7, #24
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800990c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009910:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f8d6 	bl	8009ac4 <_ZNSt16allocator_traitsISaIP6PGV100EE8max_sizeERKS2_>
 8009918:	4603      	mov	r3, r0
 800991a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800991c:	f107 0208 	add.w	r2, r7, #8
 8009920:	f107 030c 	add.w	r3, r7, #12
 8009924:	4611      	mov	r1, r2
 8009926:	4618      	mov	r0, r3
 8009928:	f7fa fc36 	bl	8004198 <_ZSt3minIjERKT_S2_S2_>
 800992c:	4603      	mov	r3, r0
 800992e:	681b      	ldr	r3, [r3, #0]
      }
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <_ZNKSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4618      	mov	r0, r3
 8009944:	370c      	adds	r7, #12
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr

0800994e <_ZN9__gnu_cxx13new_allocatorIP6PGV100E8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	60f8      	str	r0, [r7, #12]
 8009956:	60b9      	str	r1, [r7, #8]
 8009958:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 f8be 	bl	8009adc <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E11_M_max_sizeEv>
 8009960:	4602      	mov	r2, r0
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	4293      	cmp	r3, r2
 8009966:	bf8c      	ite	hi
 8009968:	2301      	movhi	r3, #1
 800996a:	2300      	movls	r3, #0
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <_ZN9__gnu_cxx13new_allocatorIP6PGV100E8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8009972:	f019 f874 	bl	8022a5e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4618      	mov	r0, r3
 800997c:	f019 f85b 	bl	8022a36 <_Znwj>
 8009980:	4603      	mov	r3, r0
      }
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <_ZSt12__relocate_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800998a:	b5b0      	push	{r4, r5, r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	60f8      	str	r0, [r7, #12]
 8009992:	60b9      	str	r1, [r7, #8]
 8009994:	607a      	str	r2, [r7, #4]
 8009996:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f000 f8ab 	bl	8009af4 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 800999e:	4604      	mov	r4, r0
 80099a0:	68b8      	ldr	r0, [r7, #8]
 80099a2:	f000 f8a7 	bl	8009af4 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 80099a6:	4605      	mov	r5, r0
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f8a3 	bl	8009af4 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 80099ae:	4602      	mov	r2, r0
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	4629      	mov	r1, r5
 80099b4:	4620      	mov	r0, r4
 80099b6:	f000 f8a8 	bl	8009b0a <_ZSt14__relocate_a_1IP6PGV100S1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80099ba:	4603      	mov	r3, r0
    }
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bdb0      	pop	{r4, r5, r7, pc}

080099c4 <_ZNSt13move_iteratorIPP6PGV100EC1ES2_>:
      move_iterator(iterator_type __i)
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80099ce:	463b      	mov	r3, r7
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 f8b8 	bl	8009b46 <_ZSt4moveIRPP6PGV100EONSt16remove_referenceIT_E4typeEOS5_>
 80099d6:	4603      	mov	r3, r0
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4618      	mov	r0, r3
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <_ZSt18uninitialized_copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80099f4:	2301      	movs	r3, #1
 80099f6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 f8ad 	bl	8009b5c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6PGV100ES5_EET0_T_S8_S7_>
 8009a02:	4603      	mov	r3, r0
    }
 8009a04:	4618      	mov	r0, r3
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <_ZNSt16allocator_traitsISaIP12CommonSensorEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f8b1 	bl	8009b7c <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE8max_sizeEv>
 8009a1a:	4603      	mov	r3, r0
      }
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009a2c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <_ZSt12__niter_baseIPP12CommonSensorET_S3_>:
    __niter_base(_Iterator __it)
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4618      	mov	r0, r3
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b086      	sub	sp, #24
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	60f8      	str	r0, [r7, #12]
 8009a5a:	60b9      	str	r1, [r7, #8]
 8009a5c:	607a      	str	r2, [r7, #4]
 8009a5e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	109b      	asrs	r3, r3, #2
 8009a68:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	dd06      	ble.n	8009a7e <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	461a      	mov	r2, r3
 8009a76:	68f9      	ldr	r1, [r7, #12]
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f01a f93f 	bl	8023cfc <memmove>
      return __result + __count;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	4413      	add	r3, r2
    }
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <_ZSt4moveIRPP12CommonSensorEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009a8e:	b480      	push	{r7}
 8009a90:	b083      	sub	sp, #12
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12CommonSensorES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	68b9      	ldr	r1, [r7, #8]
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f000 f86d 	bl	8009b94 <_ZSt4copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>
 8009aba:	4603      	mov	r3, r0
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <_ZNSt16allocator_traitsISaIP6PGV100EE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f879 	bl	8009bc4 <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E8max_sizeEv>
 8009ad2:	4603      	mov	r3, r0
      }
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009ae4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8009ae8:	4618      	mov	r0, r3
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <_ZSt12__niter_baseIPP6PGV100ET_S3_>:
    __niter_base(_Iterator __it)
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4618      	mov	r0, r3
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <_ZSt14__relocate_a_1IP6PGV100S1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b086      	sub	sp, #24
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	60f8      	str	r0, [r7, #12]
 8009b12:	60b9      	str	r1, [r7, #8]
 8009b14:	607a      	str	r2, [r7, #4]
 8009b16:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	109b      	asrs	r3, r3, #2
 8009b20:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	dd06      	ble.n	8009b36 <_ZSt14__relocate_a_1IP6PGV100S1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	68f9      	ldr	r1, [r7, #12]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f01a f8e3 	bl	8023cfc <memmove>
      return __result + __count;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	4413      	add	r3, r2
    }
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <_ZSt4moveIRPP6PGV100EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009b46:	b480      	push	{r7}
 8009b48:	b083      	sub	sp, #12
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4618      	mov	r0, r3
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6PGV100ES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	68b9      	ldr	r1, [r7, #8]
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f000 f835 	bl	8009bdc <_ZSt4copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>
 8009b72:	4603      	mov	r3, r0
 8009b74:	4618      	mov	r0, r3
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff ff4d 	bl	8009a24 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <_ZSt4copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8009b94:	b590      	push	{r4, r7, lr}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f000 f833 	bl	8009c0c <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	68b8      	ldr	r0, [r7, #8]
 8009baa:	f000 f82f 	bl	8009c0c <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f000 f83a 	bl	8009c2e <_ZSt13__copy_move_aILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 8009bba:	4603      	mov	r3, r0
    }
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd90      	pop	{r4, r7, pc}

08009bc4 <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7ff ff85 	bl	8009adc <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E11_M_max_sizeEv>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <_ZSt4copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8009bdc:	b590      	push	{r4, r7, lr}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f000 f843 	bl	8009c74 <_ZSt12__miter_baseIPP6PGV100EDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009bee:	4604      	mov	r4, r0
 8009bf0:	68b8      	ldr	r0, [r7, #8]
 8009bf2:	f000 f83f 	bl	8009c74 <_ZSt12__miter_baseIPP6PGV100EDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f000 f84a 	bl	8009c96 <_ZSt13__copy_move_aILb1EPP6PGV100S2_ET1_T0_S4_S3_>
 8009c02:	4603      	mov	r3, r0
    }
 8009c04:	4618      	mov	r0, r3
 8009c06:	3714      	adds	r7, #20
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd90      	pop	{r4, r7, pc}

08009c0c <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8009c14:	1d3b      	adds	r3, r7, #4
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 f860 	bl	8009cdc <_ZNKSt13move_iteratorIPP12CommonSensorE4baseEv>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 f868 	bl	8009cf4 <_ZSt12__miter_baseIPP12CommonSensorET_S3_>
 8009c24:	4603      	mov	r3, r0
 8009c26:	4618      	mov	r0, r3
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <_ZSt13__copy_move_aILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009c2e:	b5b0      	push	{r4, r5, r7, lr}
 8009c30:	b084      	sub	sp, #16
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	60f8      	str	r0, [r7, #12]
 8009c36:	60b9      	str	r1, [r7, #8]
 8009c38:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f7ff fefe 	bl	8009a3c <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 8009c40:	4604      	mov	r4, r0
 8009c42:	68b8      	ldr	r0, [r7, #8]
 8009c44:	f7ff fefa 	bl	8009a3c <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 8009c48:	4605      	mov	r5, r0
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7ff fef5 	bl	8009a3c <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 8009c52:	4603      	mov	r3, r0
 8009c54:	461a      	mov	r2, r3
 8009c56:	4629      	mov	r1, r5
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f000 f856 	bl	8009d0a <_ZSt14__copy_move_a1ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	1d3b      	adds	r3, r7, #4
 8009c62:	4611      	mov	r1, r2
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 f860 	bl	8009d2a <_ZSt12__niter_wrapIPP12CommonSensorET_RKS3_S3_>
 8009c6a:	4603      	mov	r3, r0
    }
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bdb0      	pop	{r4, r5, r7, pc}

08009c74 <_ZSt12__miter_baseIPP6PGV100EDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8009c7c:	1d3b      	adds	r3, r7, #4
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 f85f 	bl	8009d42 <_ZNKSt13move_iteratorIPP6PGV100E4baseEv>
 8009c84:	4603      	mov	r3, r0
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 f867 	bl	8009d5a <_ZSt12__miter_baseIPP6PGV100ET_S3_>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <_ZSt13__copy_move_aILb1EPP6PGV100S2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009c96:	b5b0      	push	{r4, r5, r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	60f8      	str	r0, [r7, #12]
 8009c9e:	60b9      	str	r1, [r7, #8]
 8009ca0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f7ff ff26 	bl	8009af4 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 8009ca8:	4604      	mov	r4, r0
 8009caa:	68b8      	ldr	r0, [r7, #8]
 8009cac:	f7ff ff22 	bl	8009af4 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff ff1d 	bl	8009af4 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f000 f855 	bl	8009d70 <_ZSt14__copy_move_a1ILb1EPP6PGV100S2_ET1_T0_S4_S3_>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	1d3b      	adds	r3, r7, #4
 8009cca:	4611      	mov	r1, r2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f000 f85f 	bl	8009d90 <_ZSt12__niter_wrapIPP6PGV100ET_RKS3_S3_>
 8009cd2:	4603      	mov	r3, r0
    }
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bdb0      	pop	{r4, r5, r7, pc}

08009cdc <_ZNKSt13move_iteratorIPP12CommonSensorE4baseEv>:
      base() const
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <_ZSt12__miter_baseIPP12CommonSensorET_S3_>:
    __miter_base(_Iterator __it)
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <_ZSt14__copy_move_a1ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	60f8      	str	r0, [r7, #12]
 8009d12:	60b9      	str	r1, [r7, #8]
 8009d14:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	68b9      	ldr	r1, [r7, #8]
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 f844 	bl	8009da8 <_ZSt14__copy_move_a2ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 8009d20:	4603      	mov	r3, r0
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <_ZSt12__niter_wrapIPP12CommonSensorET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8009d2a:	b480      	push	{r7}
 8009d2c:	b083      	sub	sp, #12
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
    { return __res; }
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	4618      	mov	r0, r3
 8009d38:	370c      	adds	r7, #12
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <_ZNKSt13move_iteratorIPP6PGV100E4baseEv>:
      base() const
 8009d42:	b480      	push	{r7}
 8009d44:	b083      	sub	sp, #12
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <_ZSt12__miter_baseIPP6PGV100ET_S3_>:
    __miter_base(_Iterator __it)
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4618      	mov	r0, r3
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <_ZSt14__copy_move_a1ILb1EPP6PGV100S2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	68b9      	ldr	r1, [r7, #8]
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 f821 	bl	8009dc8 <_ZSt14__copy_move_a2ILb1EPP6PGV100S2_ET1_T0_S4_S3_>
 8009d86:	4603      	mov	r3, r0
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <_ZSt12__niter_wrapIPP6PGV100ET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
    { return __res; }
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <_ZSt14__copy_move_a2ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	68b9      	ldr	r1, [r7, #8]
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 f815 	bl	8009de8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_>
 8009dbe:	4603      	mov	r3, r0
    }
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <_ZSt14__copy_move_a2ILb1EPP6PGV100S2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	68b9      	ldr	r1, [r7, #8]
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f000 f822 	bl	8009e22 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6PGV100EEPT_PKS5_S8_S6_>
 8009dde:	4603      	mov	r3, r0
    }
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	109b      	asrs	r3, r3, #2
 8009dfc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d006      	beq.n	8009e12 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	461a      	mov	r2, r3
 8009e0a:	68f9      	ldr	r1, [r7, #12]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f019 ff75 	bl	8023cfc <memmove>
	  return __result + _Num;
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	4413      	add	r3, r2
	}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3718      	adds	r7, #24
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6PGV100EEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b086      	sub	sp, #24
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	60f8      	str	r0, [r7, #12]
 8009e2a:	60b9      	str	r1, [r7, #8]
 8009e2c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	109b      	asrs	r3, r3, #2
 8009e36:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d006      	beq.n	8009e4c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6PGV100EEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	461a      	mov	r2, r3
 8009e44:	68f9      	ldr	r1, [r7, #12]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f019 ff58 	bl	8023cfc <memmove>
	  return __result + _Num;
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	4413      	add	r3, r2
	}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3718      	adds	r7, #24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <_Z17HAL_UsartTransmitP20__UART_HandleTypeDefPhi>:
//these four-values must be in stm32f7xx_it.h or .c


//----------------------------------------------------------------------------------------UART(No interrupt)
int HAL_UsartTransmit(UART_HandleTypeDef* huartx, uint8_t* todata, int datalength)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
	//return HAL_UART_Transmit_IT(huartx, todata, datalength);
    /* Process Locked */
     __HAL_LOCK(huartx);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d101      	bne.n	8009e76 <_Z17HAL_UsartTransmitP20__UART_HandleTypeDefPhi+0x1a>
 8009e72:	2302      	movs	r3, #2
 8009e74:	e00b      	b.n	8009e8e <_Z17HAL_UsartTransmitP20__UART_HandleTypeDefPhi+0x32>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	return HAL_UART_Transmit(huartx, todata, datalength, 10);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	230a      	movs	r3, #10
 8009e84:	68b9      	ldr	r1, [r7, #8]
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f005 f9aa 	bl	800f1e0 <HAL_UART_Transmit>
 8009e8c:	4603      	mov	r3, r0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <_Z16HAL_UsartReceiveP20__UART_HandleTypeDefPhi>:

int HAL_UsartReceive(UART_HandleTypeDef* huartx, uint8_t* fromdata, int datalength)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	60f8      	str	r0, [r7, #12]
 8009e9e:	60b9      	str	r1, [r7, #8]
 8009ea0:	607a      	str	r2, [r7, #4]
	//return HAL_UART_Receive_IT(huartx, fromdata, datalength);
    /* Process Locked */
     __HAL_LOCK(huartx);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d101      	bne.n	8009eb0 <_Z16HAL_UsartReceiveP20__UART_HandleTypeDefPhi+0x1a>
 8009eac:	2302      	movs	r3, #2
 8009eae:	e00b      	b.n	8009ec8 <_Z16HAL_UsartReceiveP20__UART_HandleTypeDefPhi+0x32>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	return HAL_UART_Receive(huartx, fromdata, datalength, 10);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	230a      	movs	r3, #10
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f005 fa10 	bl	800f2e6 <HAL_UART_Receive>
 8009ec6:	4603      	mov	r3, r0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm>:


//----------------------------------------------------------------------------------------CANOpen(No interrupt)
int HAL_CANTransmit(CAN_HandleTypeDef* hcanx, const CAN_TxHeaderTypeDef *pHeader,
					const uint8_t *aData, uint32_t *pTxMailbox)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	603b      	str	r3, [r7, #0]
	return HAL_CAN_AddTxMessage(hcanx, pHeader, aData, pTxMailbox);
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	68b9      	ldr	r1, [r7, #8]
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f001 fa68 	bl	800b3ba <HAL_CAN_AddTxMessage>
 8009eea:	4603      	mov	r3, r0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh>:

int HAL_CANReceive(CAN_HandleTypeDef *hcanx, CAN_RxHeaderTypeDef *pHeader, uint8_t *aData)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
	//while(HAL_CAN_GetRxFifoFillLevel(hcanx, CAN_RX_FIFO0 )!= HAL_OK)
	return HAL_CAN_GetRxMessage(hcanx, CAN_RX_FIFO0, pHeader, aData);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	2100      	movs	r1, #0
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f001 fb80 	bl	800b60c <HAL_CAN_GetRxMessage>
 8009f0c:	4603      	mov	r3, r0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b08c      	sub	sp, #48	; 0x30
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8] = {0,};
 8009f1e:	2300      	movs	r3, #0
 8009f20:	60fb      	str	r3, [r7, #12]
 8009f22:	2300      	movs	r3, #0
 8009f24:	613b      	str	r3, [r7, #16]

  /* Get RX message */
  if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8009f26:	f107 030c 	add.w	r3, r7, #12
 8009f2a:	f107 0214 	add.w	r2, r7, #20
 8009f2e:	2100      	movs	r1, #0
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f001 fb6b 	bl	800b60c <HAL_CAN_GetRxMessage>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	bf14      	ite	ne
 8009f3c:	2301      	movne	r3, #1
 8009f3e:	2300      	moveq	r3, #0
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
  {
    /* Reception Error */
    Error_Handler();
 8009f46:	f7f7 ff97 	bl	8001e78 <Error_Handler>
  }

}
 8009f4a:	bf00      	nop
 8009f4c:	3730      	adds	r7, #48	; 0x30
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
	...

08009f54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4a07      	ldr	r2, [pc, #28]	; (8009f80 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	4a06      	ldr	r2, [pc, #24]	; (8009f84 <vApplicationGetIdleTaskMemory+0x30>)
 8009f6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f72:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8009f74:	bf00      	nop
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr
 8009f80:	200008a0 	.word	0x200008a0
 8009f84:	20000954 	.word	0x20000954

08009f88 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009f8c:	f3bf 8f4f 	dsb	sy
}
 8009f90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009f92:	f3bf 8f6f 	isb	sy
}
 8009f96:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8009f98:	4b0d      	ldr	r3, [pc, #52]	; (8009fd0 <SCB_EnableICache+0x48>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8009fa0:	f3bf 8f4f 	dsb	sy
}
 8009fa4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009fa6:	f3bf 8f6f 	isb	sy
}
 8009faa:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8009fac:	4b08      	ldr	r3, [pc, #32]	; (8009fd0 <SCB_EnableICache+0x48>)
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	4a07      	ldr	r2, [pc, #28]	; (8009fd0 <SCB_EnableICache+0x48>)
 8009fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fb6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009fb8:	f3bf 8f4f 	dsb	sy
}
 8009fbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009fbe:	f3bf 8f6f 	isb	sy
}
 8009fc2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8009fc4:	bf00      	nop
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	e000ed00 	.word	0xe000ed00

08009fd4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8009fda:	4b25      	ldr	r3, [pc, #148]	; (800a070 <SCB_EnableDCache+0x9c>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8009fe2:	f3bf 8f4f 	dsb	sy
}
 8009fe6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8009fe8:	4b21      	ldr	r3, [pc, #132]	; (800a070 <SCB_EnableDCache+0x9c>)
 8009fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fee:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	0b5b      	lsrs	r3, r3, #13
 8009ff4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009ff8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	08db      	lsrs	r3, r3, #3
 8009ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a002:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800a00c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a012:	4917      	ldr	r1, [pc, #92]	; (800a070 <SCB_EnableDCache+0x9c>)
 800a014:	4313      	orrs	r3, r2
 800a016:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	1e5a      	subs	r2, r3, #1
 800a01e:	60ba      	str	r2, [r7, #8]
 800a020:	2b00      	cmp	r3, #0
 800a022:	bf14      	ite	ne
 800a024:	2301      	movne	r3, #1
 800a026:	2300      	moveq	r3, #0
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d000      	beq.n	800a030 <SCB_EnableDCache+0x5c>
      do {
 800a02e:	e7e9      	b.n	800a004 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	1e5a      	subs	r2, r3, #1
 800a034:	60fa      	str	r2, [r7, #12]
 800a036:	2b00      	cmp	r3, #0
 800a038:	bf14      	ite	ne
 800a03a:	2301      	movne	r3, #1
 800a03c:	2300      	moveq	r3, #0
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	2b00      	cmp	r3, #0
 800a042:	d000      	beq.n	800a046 <SCB_EnableDCache+0x72>
    do {
 800a044:	e7d9      	b.n	8009ffa <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800a046:	f3bf 8f4f 	dsb	sy
}
 800a04a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800a04c:	4b08      	ldr	r3, [pc, #32]	; (800a070 <SCB_EnableDCache+0x9c>)
 800a04e:	695b      	ldr	r3, [r3, #20]
 800a050:	4a07      	ldr	r2, [pc, #28]	; (800a070 <SCB_EnableDCache+0x9c>)
 800a052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a056:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a058:	f3bf 8f4f 	dsb	sy
}
 800a05c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a05e:	f3bf 8f6f 	isb	sy
}
 800a062:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800a064:	bf00      	nop
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	e000ed00 	.word	0xe000ed00

0800a074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a074:	b5b0      	push	{r4, r5, r7, lr}
 800a076:	b096      	sub	sp, #88	; 0x58
 800a078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800a07a:	f7ff ff85 	bl	8009f88 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800a07e:	f7ff ffa9 	bl	8009fd4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a082:	f000 fedf 	bl	800ae44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a086:	f7f7 fb5f 	bl	8001748 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* USER CODE BEGIN 2 */

 	init_stm32f746();
 800a08a:	f7f7 fb47 	bl	800171c <init_stm32f746>

	Dprintf("Stm32f746 Initializing is complete!\n");
 800a08e:	482c      	ldr	r0, [pc, #176]	; (800a140 <main+0xcc>)
 800a090:	f7f6 ff54 	bl	8000f3c <_Z7DprintfPKcz>

	/* USER CODE BEGIN 5 */
	//debug init
	Debug_Uart_Init();
 800a094:	f7f6 ff98 	bl	8000fc8 <_Z15Debug_Uart_Initv>

	Dprintf("Module Initializing\n");
 800a098:	482a      	ldr	r0, [pc, #168]	; (800a144 <main+0xd0>)
 800a09a:	f7f6 ff4f 	bl	8000f3c <_Z7DprintfPKcz>
	HAL_Delay(5000);
 800a09e:	f241 3088 	movw	r0, #5000	; 0x1388
 800a0a2:	f000 fefd 	bl	800aea0 <HAL_Delay>

	//sensor manager initialize
	//need some times for boot pgv100
	SensorManager::GetInstance().CommonSensorInitialize();
 800a0a6:	f7fe f803 	bl	80080b0 <_ZN13SensorManager11GetInstanceEv>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fe f9ad 	bl	800840c <_ZN13SensorManager22CommonSensorInitializeEv>
	SensorManager::GetInstance().PGV100Initialize();
 800a0b2:	f7fd fffd 	bl	80080b0 <_ZN13SensorManager11GetInstanceEv>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fe faad 	bl	8008618 <_ZN13SensorManager16PGV100InitializeEv>

	bg95test.Initialization();
 800a0be:	4822      	ldr	r0, [pc, #136]	; (800a148 <main+0xd4>)
 800a0c0:	f7f8 fc12 	bl	80028e8 <_ZN4BG9514InitializationEv>

	Dprintf("Module Initializing is complete!\n");
 800a0c4:	4821      	ldr	r0, [pc, #132]	; (800a14c <main+0xd8>)
 800a0c6:	f7f6 ff39 	bl	8000f3c <_Z7DprintfPKcz>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitTask */
  osThreadDef(InitTask, StartInitTask, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800a0ca:	4b21      	ldr	r3, [pc, #132]	; (800a150 <main+0xdc>)
 800a0cc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800a0d0:	461d      	mov	r5, r3
 800a0d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a0da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InitTaskHandle = osThreadCreate(osThread(InitTask), NULL);
 800a0de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f007 fc6f 	bl	80119c8 <osThreadCreate>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	4a19      	ldr	r2, [pc, #100]	; (800a154 <main+0xe0>)
 800a0ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of CommonSensorTask */
  osThreadDef(CommonSensorTas, StartCommonSensorTask, osPriorityLow, 0, configMINIMAL_STACK_SIZE);
 800a0f0:	4b19      	ldr	r3, [pc, #100]	; (800a158 <main+0xe4>)
 800a0f2:	f107 0420 	add.w	r4, r7, #32
 800a0f6:	461d      	mov	r5, r3
 800a0f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a100:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommonSensorTasHandle = osThreadCreate(osThread(CommonSensorTas), NULL);
 800a104:	f107 0320 	add.w	r3, r7, #32
 800a108:	2100      	movs	r1, #0
 800a10a:	4618      	mov	r0, r3
 800a10c:	f007 fc5c 	bl	80119c8 <osThreadCreate>
 800a110:	4603      	mov	r3, r0
 800a112:	4a12      	ldr	r2, [pc, #72]	; (800a15c <main+0xe8>)
 800a114:	6013      	str	r3, [r2, #0]
  /* definition and creation of PGV100Task */
  //osThreadDef(PGV100Task, StartPGV100Task, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE);
  //PGV100TaskHandle = osThreadCreate(osThread(PGV100Task), NULL);

  /* definition and creation of ETHTask */
  osThreadDef(ETHTask, StartETHTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800a116:	4b12      	ldr	r3, [pc, #72]	; (800a160 <main+0xec>)
 800a118:	1d3c      	adds	r4, r7, #4
 800a11a:	461d      	mov	r5, r3
 800a11c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a11e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a120:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a124:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ETHTaskHandle = osThreadCreate(osThread(ETHTask), NULL);
 800a128:	1d3b      	adds	r3, r7, #4
 800a12a:	2100      	movs	r1, #0
 800a12c:	4618      	mov	r0, r3
 800a12e:	f007 fc4b 	bl	80119c8 <osThreadCreate>
 800a132:	4603      	mov	r3, r0
 800a134:	4a0b      	ldr	r2, [pc, #44]	; (800a164 <main+0xf0>)
 800a136:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800a138:	f007 fc2f 	bl	801199a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a13c:	e7fe      	b.n	800a13c <main+0xc8>
 800a13e:	bf00      	nop
 800a140:	08025308 	.word	0x08025308
 800a144:	08025330 	.word	0x08025330
 800a148:	20001964 	.word	0x20001964
 800a14c:	08025348 	.word	0x08025348
 800a150:	0802536c 	.word	0x0802536c
 800a154:	20001954 	.word	0x20001954
 800a158:	08025388 	.word	0x08025388
 800a15c:	20001958 	.word	0x20001958
 800a160:	080253a4 	.word	0x080253a4
 800a164:	2000195c 	.word	0x2000195c

0800a168 <_Z13StartInitTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void const *argument)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
	Dprintf("Ethernet Initializing\n");
 800a170:	4809      	ldr	r0, [pc, #36]	; (800a198 <_Z13StartInitTaskPKv+0x30>)
 800a172:	f7f6 fee3 	bl	8000f3c <_Z7DprintfPKcz>

	/* init code for LWIP */
	MX_LWIP_Init();
 800a176:	f006 fdb7 	bl	8010ce8 <MX_LWIP_Init>

	//UdpRtosServerInit();
	UdpClientInit();
 800a17a:	f7f7 fabb 	bl	80016f4 <_Z13UdpClientInitv>
	TcpServerInit();
 800a17e:	f7f7 fa07 	bl	8001590 <_Z13TcpServerInitv>

	Dprintf("Ethernet Initializing is complete!\n");
 800a182:	4806      	ldr	r0, [pc, #24]	; (800a19c <_Z13StartInitTaskPKv+0x34>)
 800a184:	f7f6 feda 	bl	8000f3c <_Z7DprintfPKcz>

	/* Infinite loop */
	for(;;)
	{
		osDelay(1000);  //1000ms
 800a188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a18c:	f007 fc68 	bl	8011a60 <osDelay>
		//vTaskDelayUntil(&xLastWakeTime, xTime);
		vTaskDelete(NULL);
 800a190:	2000      	movs	r0, #0
 800a192:	f009 f959 	bl	8013448 <vTaskDelete>
		osDelay(1000);  //1000ms
 800a196:	e7f7      	b.n	800a188 <_Z13StartInitTaskPKv+0x20>
 800a198:	080253c0 	.word	0x080253c0
 800a19c:	080253d8 	.word	0x080253d8

0800a1a0 <_Z21StartCommonSensorTaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommonSensorTask */
void StartCommonSensorTask(void const *argument)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommonSensorTask */
	const TickType_t xTime = pdMS_TO_TICKS(1);
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800a1ac:	f009 fbb2 	bl	8013914 <xTaskGetTickCount>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	//vTaskDelayUntil(&xLastWakeTime, xTime);
	SensorManager::GetInstance().CommonSensorDrive();
 800a1b4:	f7fd ff7c 	bl	80080b0 <_ZN13SensorManager11GetInstanceEv>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fe f934 	bl	8008428 <_ZN13SensorManager17CommonSensorDriveEv>
	sensorsval = SensorManager::GetInstance().CommonSensorGetAllData();
 800a1c0:	f7fd ff76 	bl	80080b0 <_ZN13SensorManager11GetInstanceEv>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fe f9a6 	bl	8008518 <_ZNK13SensorManager22CommonSensorGetAllDataEv>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	4b05      	ldr	r3, [pc, #20]	; (800a1e8 <_Z21StartCommonSensorTaskPKv+0x48>)
 800a1d2:	801a      	strh	r2, [r3, #0]
    osDelay(1);
 800a1d4:	2001      	movs	r0, #1
 800a1d6:	f007 fc43 	bl	8011a60 <osDelay>
	vTaskDelayUntil(&xLastWakeTime, xTime);
 800a1da:	f107 0308 	add.w	r3, r7, #8
 800a1de:	2101      	movs	r1, #1
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f009 f9c3 	bl	801356c <vTaskDelayUntil>
	SensorManager::GetInstance().CommonSensorDrive();
 800a1e6:	e7e5      	b.n	800a1b4 <_Z21StartCommonSensorTaskPKv+0x14>
 800a1e8:	20001960 	.word	0x20001960

0800a1ec <_Z12StartETHTaskPKv>:
/* USER CODE END Header_StartETHTask */



void StartETHTask(void const *argument)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartETHTask */
	const TickType_t xTime = pdMS_TO_TICKS(50);
 800a1f4:	2332      	movs	r3, #50	; 0x32
 800a1f6:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800a1f8:	f009 fb8c 	bl	8013914 <xTaskGetTickCount>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  	DebugDrive();
 800a200:	f7f6 fef8 	bl	8000ff4 <_Z10DebugDrivev>
	  	bg95test.Drive();
 800a204:	4804      	ldr	r0, [pc, #16]	; (800a218 <_Z12StartETHTaskPKv+0x2c>)
 800a206:	f7f8 fb7d 	bl	8002904 <_ZN4BG955DriveEv>
		errup = SensorManager::GetInstance().PGV100IsErrUp();
*/
		//vTaskDelayUntil(&xLastWakeTime, xTime);
		//ethernetif_input(&gnetif);
		//sys_check_timeouts();
		vTaskDelayUntil(&xLastWakeTime, xTime);
 800a20a:	f107 0308 	add.w	r3, r7, #8
 800a20e:	2132      	movs	r1, #50	; 0x32
 800a210:	4618      	mov	r0, r3
 800a212:	f009 f9ab 	bl	801356c <vTaskDelayUntil>
	  	DebugDrive();
 800a216:	e7f3      	b.n	800a200 <_Z12StartETHTaskPKv+0x14>
 800a218:	20001964 	.word	0x20001964

0800a21c <_Z41__static_initialization_and_destruction_0ii>:
		//osDelay(1);
  }
  /* USER CODE END StartETHTask */
}
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d108      	bne.n	800a23e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a232:	4293      	cmp	r3, r2
 800a234:	d103      	bne.n	800a23e <_Z41__static_initialization_and_destruction_0ii+0x22>
BG95 bg95test(&hcan1);
 800a236:	4909      	ldr	r1, [pc, #36]	; (800a25c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800a238:	4809      	ldr	r0, [pc, #36]	; (800a260 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800a23a:	f7f7 fe7b 	bl	8001f34 <_ZN4BG95C1EP19__CAN_HandleTypeDef>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d107      	bne.n	800a254 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d102      	bne.n	800a254 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800a24e:	4804      	ldr	r0, [pc, #16]	; (800a260 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800a250:	f7f7 feb6 	bl	8001fc0 <_ZN4BG95D1Ev>
}
 800a254:	bf00      	nop
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	200004e8 	.word	0x200004e8
 800a260:	20001964 	.word	0x20001964

0800a264 <_GLOBAL__sub_I_InitTaskHandle>:
 800a264:	b580      	push	{r7, lr}
 800a266:	af00      	add	r7, sp, #0
 800a268:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a26c:	2001      	movs	r0, #1
 800a26e:	f7ff ffd5 	bl	800a21c <_Z41__static_initialization_and_destruction_0ii>
 800a272:	bd80      	pop	{r7, pc}

0800a274 <_GLOBAL__sub_D_InitTaskHandle>:
 800a274:	b580      	push	{r7, lr}
 800a276:	af00      	add	r7, sp, #0
 800a278:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a27c:	2000      	movs	r0, #0
 800a27e:	f7ff ffcd 	bl	800a21c <_Z41__static_initialization_and_destruction_0ii>
 800a282:	bd80      	pop	{r7, pc}

0800a284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a28a:	4b11      	ldr	r3, [pc, #68]	; (800a2d0 <HAL_MspInit+0x4c>)
 800a28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28e:	4a10      	ldr	r2, [pc, #64]	; (800a2d0 <HAL_MspInit+0x4c>)
 800a290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a294:	6413      	str	r3, [r2, #64]	; 0x40
 800a296:	4b0e      	ldr	r3, [pc, #56]	; (800a2d0 <HAL_MspInit+0x4c>)
 800a298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a29e:	607b      	str	r3, [r7, #4]
 800a2a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2a2:	4b0b      	ldr	r3, [pc, #44]	; (800a2d0 <HAL_MspInit+0x4c>)
 800a2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a6:	4a0a      	ldr	r2, [pc, #40]	; (800a2d0 <HAL_MspInit+0x4c>)
 800a2a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2ac:	6453      	str	r3, [r2, #68]	; 0x44
 800a2ae:	4b08      	ldr	r3, [pc, #32]	; (800a2d0 <HAL_MspInit+0x4c>)
 800a2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2b6:	603b      	str	r3, [r7, #0]
 800a2b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	210f      	movs	r1, #15
 800a2be:	f06f 0001 	mvn.w	r0, #1
 800a2c2:	f001 fdc1 	bl	800be48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a2c6:	bf00      	nop
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	40023800 	.word	0x40023800

0800a2d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08a      	sub	sp, #40	; 0x28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2dc:	f107 0314 	add.w	r3, r7, #20
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	605a      	str	r2, [r3, #4]
 800a2e6:	609a      	str	r2, [r3, #8]
 800a2e8:	60da      	str	r2, [r3, #12]
 800a2ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a1b      	ldr	r2, [pc, #108]	; (800a360 <HAL_CAN_MspInit+0x8c>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d130      	bne.n	800a358 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800a2f6:	4b1b      	ldr	r3, [pc, #108]	; (800a364 <HAL_CAN_MspInit+0x90>)
 800a2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fa:	4a1a      	ldr	r2, [pc, #104]	; (800a364 <HAL_CAN_MspInit+0x90>)
 800a2fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a300:	6413      	str	r3, [r2, #64]	; 0x40
 800a302:	4b18      	ldr	r3, [pc, #96]	; (800a364 <HAL_CAN_MspInit+0x90>)
 800a304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a30a:	613b      	str	r3, [r7, #16]
 800a30c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a30e:	4b15      	ldr	r3, [pc, #84]	; (800a364 <HAL_CAN_MspInit+0x90>)
 800a310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a312:	4a14      	ldr	r2, [pc, #80]	; (800a364 <HAL_CAN_MspInit+0x90>)
 800a314:	f043 0301 	orr.w	r3, r3, #1
 800a318:	6313      	str	r3, [r2, #48]	; 0x30
 800a31a:	4b12      	ldr	r3, [pc, #72]	; (800a364 <HAL_CAN_MspInit+0x90>)
 800a31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	60fb      	str	r3, [r7, #12]
 800a324:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a326:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a32a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a32c:	2302      	movs	r3, #2
 800a32e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a330:	2300      	movs	r3, #0
 800a332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a334:	2303      	movs	r3, #3
 800a336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800a338:	2309      	movs	r3, #9
 800a33a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a33c:	f107 0314 	add.w	r3, r7, #20
 800a340:	4619      	mov	r1, r3
 800a342:	4809      	ldr	r0, [pc, #36]	; (800a368 <HAL_CAN_MspInit+0x94>)
 800a344:	f003 f878 	bl	800d438 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 800a348:	2200      	movs	r2, #0
 800a34a:	2108      	movs	r1, #8
 800a34c:	2014      	movs	r0, #20
 800a34e:	f001 fd7b 	bl	800be48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800a352:	2014      	movs	r0, #20
 800a354:	f001 fd94 	bl	800be80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800a358:	bf00      	nop
 800a35a:	3728      	adds	r7, #40	; 0x28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	40006400 	.word	0x40006400
 800a364:	40023800 	.word	0x40023800
 800a368:	40020000 	.word	0x40020000

0800a36c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a0d      	ldr	r2, [pc, #52]	; (800a3b0 <HAL_TIM_Base_MspInit+0x44>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d113      	bne.n	800a3a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a37e:	4b0d      	ldr	r3, [pc, #52]	; (800a3b4 <HAL_TIM_Base_MspInit+0x48>)
 800a380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a382:	4a0c      	ldr	r2, [pc, #48]	; (800a3b4 <HAL_TIM_Base_MspInit+0x48>)
 800a384:	f043 0320 	orr.w	r3, r3, #32
 800a388:	6413      	str	r3, [r2, #64]	; 0x40
 800a38a:	4b0a      	ldr	r3, [pc, #40]	; (800a3b4 <HAL_TIM_Base_MspInit+0x48>)
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	f003 0320 	and.w	r3, r3, #32
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 7, 0);
 800a396:	2200      	movs	r2, #0
 800a398:	2107      	movs	r1, #7
 800a39a:	2037      	movs	r0, #55	; 0x37
 800a39c:	f001 fd54 	bl	800be48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800a3a0:	2037      	movs	r0, #55	; 0x37
 800a3a2:	f001 fd6d 	bl	800be80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800a3a6:	bf00      	nop
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	40001400 	.word	0x40001400
 800a3b4:	40023800 	.word	0x40023800

0800a3b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b0b4      	sub	sp, #208	; 0xd0
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	605a      	str	r2, [r3, #4]
 800a3ca:	609a      	str	r2, [r3, #8]
 800a3cc:	60da      	str	r2, [r3, #12]
 800a3ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a3d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a3d4:	2284      	movs	r2, #132	; 0x84
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f019 fca9 	bl	8023d30 <memset>
  if(huart->Instance==UART4)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4aa6      	ldr	r2, [pc, #664]	; (800a67c <HAL_UART_MspInit+0x2c4>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d146      	bne.n	800a476 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800a3e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3ec:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a3f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f003 ff07 	bl	800e20c <HAL_RCCEx_PeriphCLKConfig>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800a404:	f7f7 fd38 	bl	8001e78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a408:	4b9d      	ldr	r3, [pc, #628]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40c:	4a9c      	ldr	r2, [pc, #624]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a40e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a412:	6413      	str	r3, [r2, #64]	; 0x40
 800a414:	4b9a      	ldr	r3, [pc, #616]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a418:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a41c:	637b      	str	r3, [r7, #52]	; 0x34
 800a41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a420:	4b97      	ldr	r3, [pc, #604]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a424:	4a96      	ldr	r2, [pc, #600]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a426:	f043 0304 	orr.w	r3, r3, #4
 800a42a:	6313      	str	r3, [r2, #48]	; 0x30
 800a42c:	4b94      	ldr	r3, [pc, #592]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a430:	f003 0304 	and.w	r3, r3, #4
 800a434:	633b      	str	r3, [r7, #48]	; 0x30
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a438:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a43c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a440:	2302      	movs	r3, #2
 800a442:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a446:	2300      	movs	r3, #0
 800a448:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a44c:	2303      	movs	r3, #3
 800a44e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a452:	2308      	movs	r3, #8
 800a454:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a458:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a45c:	4619      	mov	r1, r3
 800a45e:	4889      	ldr	r0, [pc, #548]	; (800a684 <HAL_UART_MspInit+0x2cc>)
 800a460:	f002 ffea 	bl	800d438 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 800a464:	2200      	movs	r2, #0
 800a466:	2108      	movs	r1, #8
 800a468:	2034      	movs	r0, #52	; 0x34
 800a46a:	f001 fced 	bl	800be48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a46e:	2034      	movs	r0, #52	; 0x34
 800a470:	f001 fd06 	bl	800be80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800a474:	e15e      	b.n	800a734 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==UART5)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a83      	ldr	r2, [pc, #524]	; (800a688 <HAL_UART_MspInit+0x2d0>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d167      	bne.n	800a550 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800a480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a484:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800a486:	2300      	movs	r3, #0
 800a488:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a48c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a490:	4618      	mov	r0, r3
 800a492:	f003 febb 	bl	800e20c <HAL_RCCEx_PeriphCLKConfig>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 800a49c:	f7f7 fcec 	bl	8001e78 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800a4a0:	4b77      	ldr	r3, [pc, #476]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a4:	4a76      	ldr	r2, [pc, #472]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a4a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4aa:	6413      	str	r3, [r2, #64]	; 0x40
 800a4ac:	4b74      	ldr	r3, [pc, #464]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4b8:	4b71      	ldr	r3, [pc, #452]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4bc:	4a70      	ldr	r2, [pc, #448]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a4be:	f043 0304 	orr.w	r3, r3, #4
 800a4c2:	6313      	str	r3, [r2, #48]	; 0x30
 800a4c4:	4b6e      	ldr	r3, [pc, #440]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c8:	f003 0304 	and.w	r3, r3, #4
 800a4cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a4d0:	4b6b      	ldr	r3, [pc, #428]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d4:	4a6a      	ldr	r2, [pc, #424]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a4d6:	f043 0308 	orr.w	r3, r3, #8
 800a4da:	6313      	str	r3, [r2, #48]	; 0x30
 800a4dc:	4b68      	ldr	r3, [pc, #416]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e0:	f003 0308 	and.w	r3, r3, #8
 800a4e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a4e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800a502:	2308      	movs	r3, #8
 800a504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a508:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a50c:	4619      	mov	r1, r3
 800a50e:	485d      	ldr	r0, [pc, #372]	; (800a684 <HAL_UART_MspInit+0x2cc>)
 800a510:	f002 ff92 	bl	800d438 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a514:	2304      	movs	r3, #4
 800a516:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a51a:	2302      	movs	r3, #2
 800a51c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a520:	2300      	movs	r3, #0
 800a522:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a526:	2303      	movs	r3, #3
 800a528:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800a52c:	2308      	movs	r3, #8
 800a52e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a532:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a536:	4619      	mov	r1, r3
 800a538:	4854      	ldr	r0, [pc, #336]	; (800a68c <HAL_UART_MspInit+0x2d4>)
 800a53a:	f002 ff7d 	bl	800d438 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800a53e:	2200      	movs	r2, #0
 800a540:	2105      	movs	r1, #5
 800a542:	2035      	movs	r0, #53	; 0x35
 800a544:	f001 fc80 	bl	800be48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800a548:	2035      	movs	r0, #53	; 0x35
 800a54a:	f001 fc99 	bl	800be80 <HAL_NVIC_EnableIRQ>
}
 800a54e:	e0f1      	b.n	800a734 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART1)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a4e      	ldr	r2, [pc, #312]	; (800a690 <HAL_UART_MspInit+0x2d8>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d144      	bne.n	800a5e4 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a55a:	2340      	movs	r3, #64	; 0x40
 800a55c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a55e:	2300      	movs	r3, #0
 800a560:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a562:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a566:	4618      	mov	r0, r3
 800a568:	f003 fe50 	bl	800e20c <HAL_RCCEx_PeriphCLKConfig>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <HAL_UART_MspInit+0x1be>
      Error_Handler();
 800a572:	f7f7 fc81 	bl	8001e78 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a576:	4b42      	ldr	r3, [pc, #264]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a57a:	4a41      	ldr	r2, [pc, #260]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a57c:	f043 0310 	orr.w	r3, r3, #16
 800a580:	6453      	str	r3, [r2, #68]	; 0x44
 800a582:	4b3f      	ldr	r3, [pc, #252]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a586:	f003 0310 	and.w	r3, r3, #16
 800a58a:	623b      	str	r3, [r7, #32]
 800a58c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a58e:	4b3c      	ldr	r3, [pc, #240]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a592:	4a3b      	ldr	r2, [pc, #236]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a594:	f043 0301 	orr.w	r3, r3, #1
 800a598:	6313      	str	r3, [r2, #48]	; 0x30
 800a59a:	4b39      	ldr	r3, [pc, #228]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	61fb      	str	r3, [r7, #28]
 800a5a4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a5a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a5aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a5c0:	2307      	movs	r3, #7
 800a5c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5c6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	4831      	ldr	r0, [pc, #196]	; (800a694 <HAL_UART_MspInit+0x2dc>)
 800a5ce:	f002 ff33 	bl	800d438 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	210e      	movs	r1, #14
 800a5d6:	2025      	movs	r0, #37	; 0x25
 800a5d8:	f001 fc36 	bl	800be48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a5dc:	2025      	movs	r0, #37	; 0x25
 800a5de:	f001 fc4f 	bl	800be80 <HAL_NVIC_EnableIRQ>
}
 800a5e2:	e0a7      	b.n	800a734 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART3)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a2b      	ldr	r2, [pc, #172]	; (800a698 <HAL_UART_MspInit+0x2e0>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d158      	bne.n	800a6a0 <HAL_UART_MspInit+0x2e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800a5ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5f2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a5fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a5fe:	4618      	mov	r0, r3
 800a600:	f003 fe04 	bl	800e20c <HAL_RCCEx_PeriphCLKConfig>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <HAL_UART_MspInit+0x256>
      Error_Handler();
 800a60a:	f7f7 fc35 	bl	8001e78 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a60e:	4b1c      	ldr	r3, [pc, #112]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a612:	4a1b      	ldr	r2, [pc, #108]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a618:	6413      	str	r3, [r2, #64]	; 0x40
 800a61a:	4b19      	ldr	r3, [pc, #100]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a622:	61bb      	str	r3, [r7, #24]
 800a624:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a626:	4b16      	ldr	r3, [pc, #88]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62a:	4a15      	ldr	r2, [pc, #84]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a62c:	f043 0302 	orr.w	r3, r3, #2
 800a630:	6313      	str	r3, [r2, #48]	; 0x30
 800a632:	4b13      	ldr	r3, [pc, #76]	; (800a680 <HAL_UART_MspInit+0x2c8>)
 800a634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a636:	f003 0302 	and.w	r3, r3, #2
 800a63a:	617b      	str	r3, [r7, #20]
 800a63c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a63e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a642:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a646:	2302      	movs	r3, #2
 800a648:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a64c:	2300      	movs	r3, #0
 800a64e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a652:	2303      	movs	r3, #3
 800a654:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a658:	2307      	movs	r3, #7
 800a65a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a65e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a662:	4619      	mov	r1, r3
 800a664:	480d      	ldr	r0, [pc, #52]	; (800a69c <HAL_UART_MspInit+0x2e4>)
 800a666:	f002 fee7 	bl	800d438 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 800a66a:	2200      	movs	r2, #0
 800a66c:	2108      	movs	r1, #8
 800a66e:	2027      	movs	r0, #39	; 0x27
 800a670:	f001 fbea 	bl	800be48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a674:	2027      	movs	r0, #39	; 0x27
 800a676:	f001 fc03 	bl	800be80 <HAL_NVIC_EnableIRQ>
}
 800a67a:	e05b      	b.n	800a734 <HAL_UART_MspInit+0x37c>
 800a67c:	40004c00 	.word	0x40004c00
 800a680:	40023800 	.word	0x40023800
 800a684:	40020800 	.word	0x40020800
 800a688:	40005000 	.word	0x40005000
 800a68c:	40020c00 	.word	0x40020c00
 800a690:	40011000 	.word	0x40011000
 800a694:	40020000 	.word	0x40020000
 800a698:	40004800 	.word	0x40004800
 800a69c:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a25      	ldr	r2, [pc, #148]	; (800a73c <HAL_UART_MspInit+0x384>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d144      	bne.n	800a734 <HAL_UART_MspInit+0x37c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800a6aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6ae:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a6b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f003 fda6 	bl	800e20c <HAL_RCCEx_PeriphCLKConfig>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <HAL_UART_MspInit+0x312>
      Error_Handler();
 800a6c6:	f7f7 fbd7 	bl	8001e78 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a6ca:	4b1d      	ldr	r3, [pc, #116]	; (800a740 <HAL_UART_MspInit+0x388>)
 800a6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ce:	4a1c      	ldr	r2, [pc, #112]	; (800a740 <HAL_UART_MspInit+0x388>)
 800a6d0:	f043 0320 	orr.w	r3, r3, #32
 800a6d4:	6453      	str	r3, [r2, #68]	; 0x44
 800a6d6:	4b1a      	ldr	r3, [pc, #104]	; (800a740 <HAL_UART_MspInit+0x388>)
 800a6d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6da:	f003 0320 	and.w	r3, r3, #32
 800a6de:	613b      	str	r3, [r7, #16]
 800a6e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a6e2:	4b17      	ldr	r3, [pc, #92]	; (800a740 <HAL_UART_MspInit+0x388>)
 800a6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e6:	4a16      	ldr	r2, [pc, #88]	; (800a740 <HAL_UART_MspInit+0x388>)
 800a6e8:	f043 0304 	orr.w	r3, r3, #4
 800a6ec:	6313      	str	r3, [r2, #48]	; 0x30
 800a6ee:	4b14      	ldr	r3, [pc, #80]	; (800a740 <HAL_UART_MspInit+0x388>)
 800a6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f2:	f003 0304 	and.w	r3, r3, #4
 800a6f6:	60fb      	str	r3, [r7, #12]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a6fa:	23c0      	movs	r3, #192	; 0xc0
 800a6fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a700:	2302      	movs	r3, #2
 800a702:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a706:	2300      	movs	r3, #0
 800a708:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a70c:	2303      	movs	r3, #3
 800a70e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a712:	2308      	movs	r3, #8
 800a714:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a718:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a71c:	4619      	mov	r1, r3
 800a71e:	4809      	ldr	r0, [pc, #36]	; (800a744 <HAL_UART_MspInit+0x38c>)
 800a720:	f002 fe8a 	bl	800d438 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 8, 0);
 800a724:	2200      	movs	r2, #0
 800a726:	2108      	movs	r1, #8
 800a728:	2047      	movs	r0, #71	; 0x47
 800a72a:	f001 fb8d 	bl	800be48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800a72e:	2047      	movs	r0, #71	; 0x47
 800a730:	f001 fba6 	bl	800be80 <HAL_NVIC_EnableIRQ>
}
 800a734:	bf00      	nop
 800a736:	37d0      	adds	r7, #208	; 0xd0
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	40011400 	.word	0x40011400
 800a740:	40023800 	.word	0x40023800
 800a744:	40020800 	.word	0x40020800

0800a748 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800a74e:	1d3b      	adds	r3, r7, #4
 800a750:	2200      	movs	r2, #0
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	605a      	str	r2, [r3, #4]
 800a756:	609a      	str	r2, [r3, #8]
 800a758:	60da      	str	r2, [r3, #12]
 800a75a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800a75c:	4b23      	ldr	r3, [pc, #140]	; (800a7ec <HAL_FMC_MspInit+0xa4>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d13e      	bne.n	800a7e2 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 800a764:	4b21      	ldr	r3, [pc, #132]	; (800a7ec <HAL_FMC_MspInit+0xa4>)
 800a766:	2201      	movs	r2, #1
 800a768:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a76a:	4b21      	ldr	r3, [pc, #132]	; (800a7f0 <HAL_FMC_MspInit+0xa8>)
 800a76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76e:	4a20      	ldr	r2, [pc, #128]	; (800a7f0 <HAL_FMC_MspInit+0xa8>)
 800a770:	f043 0301 	orr.w	r3, r3, #1
 800a774:	6393      	str	r3, [r2, #56]	; 0x38
 800a776:	4b1e      	ldr	r3, [pc, #120]	; (800a7f0 <HAL_FMC_MspInit+0xa8>)
 800a778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	603b      	str	r3, [r7, #0]
 800a780:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800a782:	2307      	movs	r3, #7
 800a784:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a786:	2302      	movs	r3, #2
 800a788:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a78a:	2300      	movs	r3, #0
 800a78c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a78e:	2303      	movs	r3, #3
 800a790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a792:	230c      	movs	r3, #12
 800a794:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a796:	1d3b      	adds	r3, r7, #4
 800a798:	4619      	mov	r1, r3
 800a79a:	4816      	ldr	r0, [pc, #88]	; (800a7f4 <HAL_FMC_MspInit+0xac>)
 800a79c:	f002 fe4c 	bl	800d438 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800a7a0:	f64f 7380 	movw	r3, #65408	; 0xff80
 800a7a4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7a6:	2302      	movs	r3, #2
 800a7a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a7b2:	230c      	movs	r3, #12
 800a7b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a7b6:	1d3b      	adds	r3, r7, #4
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	480f      	ldr	r0, [pc, #60]	; (800a7f8 <HAL_FMC_MspInit+0xb0>)
 800a7bc:	f002 fe3c 	bl	800d438 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800a7c0:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800a7c4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7c6:	2302      	movs	r3, #2
 800a7c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a7d2:	230c      	movs	r3, #12
 800a7d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a7d6:	1d3b      	adds	r3, r7, #4
 800a7d8:	4619      	mov	r1, r3
 800a7da:	4808      	ldr	r0, [pc, #32]	; (800a7fc <HAL_FMC_MspInit+0xb4>)
 800a7dc:	f002 fe2c 	bl	800d438 <HAL_GPIO_Init>
 800a7e0:	e000      	b.n	800a7e4 <HAL_FMC_MspInit+0x9c>
    return;
 800a7e2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800a7e4:	3718      	adds	r7, #24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	200019d8 	.word	0x200019d8
 800a7f0:	40023800 	.word	0x40023800
 800a7f4:	40021400 	.word	0x40021400
 800a7f8:	40021000 	.word	0x40021000
 800a7fc:	40020c00 	.word	0x40020c00

0800a800 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800a808:	f7ff ff9e 	bl	800a748 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800a80c:	bf00      	nop
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08e      	sub	sp, #56	; 0x38
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800a820:	2300      	movs	r3, #0
 800a822:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a824:	4b33      	ldr	r3, [pc, #204]	; (800a8f4 <HAL_InitTick+0xe0>)
 800a826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a828:	4a32      	ldr	r2, [pc, #200]	; (800a8f4 <HAL_InitTick+0xe0>)
 800a82a:	f043 0310 	orr.w	r3, r3, #16
 800a82e:	6413      	str	r3, [r2, #64]	; 0x40
 800a830:	4b30      	ldr	r3, [pc, #192]	; (800a8f4 <HAL_InitTick+0xe0>)
 800a832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a834:	f003 0310 	and.w	r3, r3, #16
 800a838:	60fb      	str	r3, [r7, #12]
 800a83a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a83c:	f107 0210 	add.w	r2, r7, #16
 800a840:	f107 0314 	add.w	r3, r7, #20
 800a844:	4611      	mov	r1, r2
 800a846:	4618      	mov	r0, r3
 800a848:	f003 fcae 	bl	800e1a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800a850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a852:	2b00      	cmp	r3, #0
 800a854:	d103      	bne.n	800a85e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800a856:	f003 fc7f 	bl	800e158 <HAL_RCC_GetPCLK1Freq>
 800a85a:	6378      	str	r0, [r7, #52]	; 0x34
 800a85c:	e004      	b.n	800a868 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800a85e:	f003 fc7b 	bl	800e158 <HAL_RCC_GetPCLK1Freq>
 800a862:	4603      	mov	r3, r0
 800a864:	005b      	lsls	r3, r3, #1
 800a866:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a86a:	4a23      	ldr	r2, [pc, #140]	; (800a8f8 <HAL_InitTick+0xe4>)
 800a86c:	fba2 2303 	umull	r2, r3, r2, r3
 800a870:	0c9b      	lsrs	r3, r3, #18
 800a872:	3b01      	subs	r3, #1
 800a874:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a876:	4b21      	ldr	r3, [pc, #132]	; (800a8fc <HAL_InitTick+0xe8>)
 800a878:	4a21      	ldr	r2, [pc, #132]	; (800a900 <HAL_InitTick+0xec>)
 800a87a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800a87c:	4b1f      	ldr	r3, [pc, #124]	; (800a8fc <HAL_InitTick+0xe8>)
 800a87e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a882:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a884:	4a1d      	ldr	r2, [pc, #116]	; (800a8fc <HAL_InitTick+0xe8>)
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a88a:	4b1c      	ldr	r3, [pc, #112]	; (800a8fc <HAL_InitTick+0xe8>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a890:	4b1a      	ldr	r3, [pc, #104]	; (800a8fc <HAL_InitTick+0xe8>)
 800a892:	2200      	movs	r2, #0
 800a894:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a896:	4b19      	ldr	r3, [pc, #100]	; (800a8fc <HAL_InitTick+0xe8>)
 800a898:	2200      	movs	r2, #0
 800a89a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800a89c:	4817      	ldr	r0, [pc, #92]	; (800a8fc <HAL_InitTick+0xe8>)
 800a89e:	f004 f8ed 	bl	800ea7c <HAL_TIM_Base_Init>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800a8a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d11b      	bne.n	800a8e8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800a8b0:	4812      	ldr	r0, [pc, #72]	; (800a8fc <HAL_InitTick+0xe8>)
 800a8b2:	f004 f93b 	bl	800eb2c <HAL_TIM_Base_Start_IT>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800a8bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d111      	bne.n	800a8e8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a8c4:	2036      	movs	r0, #54	; 0x36
 800a8c6:	f001 fadb 	bl	800be80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2b0f      	cmp	r3, #15
 800a8ce:	d808      	bhi.n	800a8e2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	6879      	ldr	r1, [r7, #4]
 800a8d4:	2036      	movs	r0, #54	; 0x36
 800a8d6:	f001 fab7 	bl	800be48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a8da:	4a0a      	ldr	r2, [pc, #40]	; (800a904 <HAL_InitTick+0xf0>)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6013      	str	r3, [r2, #0]
 800a8e0:	e002      	b.n	800a8e8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800a8e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3738      	adds	r7, #56	; 0x38
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	40023800 	.word	0x40023800
 800a8f8:	431bde83 	.word	0x431bde83
 800a8fc:	200019dc 	.word	0x200019dc
 800a900:	40001000 	.word	0x40001000
 800a904:	20000010 	.word	0x20000010

0800a908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a908:	b480      	push	{r7}
 800a90a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a90c:	e7fe      	b.n	800a90c <NMI_Handler+0x4>

0800a90e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a90e:	b480      	push	{r7}
 800a910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a912:	e7fe      	b.n	800a912 <HardFault_Handler+0x4>

0800a914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a914:	b480      	push	{r7}
 800a916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a918:	e7fe      	b.n	800a918 <MemManage_Handler+0x4>

0800a91a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a91a:	b480      	push	{r7}
 800a91c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a91e:	e7fe      	b.n	800a91e <BusFault_Handler+0x4>

0800a920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a920:	b480      	push	{r7}
 800a922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a924:	e7fe      	b.n	800a924 <UsageFault_Handler+0x4>

0800a926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a926:	b480      	push	{r7}
 800a928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a92a:	bf00      	nop
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800a938:	4802      	ldr	r0, [pc, #8]	; (800a944 <CAN1_RX0_IRQHandler+0x10>)
 800a93a:	f000 ff79 	bl	800b830 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800a93e:	bf00      	nop
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	200004e8 	.word	0x200004e8

0800a948 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a94c:	4802      	ldr	r0, [pc, #8]	; (800a958 <USART1_IRQHandler+0x10>)
 800a94e:	f004 fe31 	bl	800f5b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a952:	bf00      	nop
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	20000694 	.word	0x20000694

0800a95c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800a960:	4802      	ldr	r0, [pc, #8]	; (800a96c <USART3_IRQHandler+0x10>)
 800a962:	f004 fe27 	bl	800f5b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800a966:	bf00      	nop
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	2000071c 	.word	0x2000071c

0800a970 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800a974:	4802      	ldr	r0, [pc, #8]	; (800a980 <UART4_IRQHandler+0x10>)
 800a976:	f004 fe1d 	bl	800f5b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800a97a:	bf00      	nop
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	20000584 	.word	0x20000584

0800a984 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800a988:	4802      	ldr	r0, [pc, #8]	; (800a994 <UART5_IRQHandler+0x10>)
 800a98a:	f004 fe13 	bl	800f5b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800a98e:	bf00      	nop
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	2000060c 	.word	0x2000060c

0800a998 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a99c:	4802      	ldr	r0, [pc, #8]	; (800a9a8 <TIM6_DAC_IRQHandler+0x10>)
 800a99e:	f004 f93d 	bl	800ec1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a9a2:	bf00      	nop
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	200019dc 	.word	0x200019dc

0800a9ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800a9b0:	4802      	ldr	r0, [pc, #8]	; (800a9bc <TIM7_IRQHandler+0x10>)
 800a9b2:	f004 f933 	bl	800ec1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800a9b6:	bf00      	nop
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20000538 	.word	0x20000538

0800a9c0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800a9c4:	4802      	ldr	r0, [pc, #8]	; (800a9d0 <ETH_IRQHandler+0x10>)
 800a9c6:	f001 fe63 	bl	800c690 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800a9ca:	bf00      	nop
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	2000640c 	.word	0x2000640c

0800a9d4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800a9d8:	4802      	ldr	r0, [pc, #8]	; (800a9e4 <USART6_IRQHandler+0x10>)
 800a9da:	f004 fdeb 	bl	800f5b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800a9de:	bf00      	nop
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	200007a4 	.word	0x200007a4

0800a9e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	af00      	add	r7, sp, #0
	return 1;
 800a9ec:	2301      	movs	r3, #1
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <_kill>:

int _kill(int pid, int sig)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800aa02:	4b05      	ldr	r3, [pc, #20]	; (800aa18 <_kill+0x20>)
 800aa04:	2216      	movs	r2, #22
 800aa06:	601a      	str	r2, [r3, #0]
	return -1;
 800aa08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr
 800aa18:	2000c11c 	.word	0x2000c11c

0800aa1c <_exit>:

void _exit (int status)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800aa24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7ff ffe5 	bl	800a9f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800aa2e:	e7fe      	b.n	800aa2e <_exit+0x12>

0800aa30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	617b      	str	r3, [r7, #20]
 800aa40:	e00a      	b.n	800aa58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800aa42:	f3af 8000 	nop.w
 800aa46:	4601      	mov	r1, r0
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	1c5a      	adds	r2, r3, #1
 800aa4c:	60ba      	str	r2, [r7, #8]
 800aa4e:	b2ca      	uxtb	r2, r1
 800aa50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	3301      	adds	r3, #1
 800aa56:	617b      	str	r3, [r7, #20]
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	dbf0      	blt.n	800aa42 <_read+0x12>
	}

return len;
 800aa60:	687b      	ldr	r3, [r7, #4]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3718      	adds	r7, #24
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b086      	sub	sp, #24
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa76:	2300      	movs	r3, #0
 800aa78:	617b      	str	r3, [r7, #20]
 800aa7a:	e009      	b.n	800aa90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	1c5a      	adds	r2, r3, #1
 800aa80:	60ba      	str	r2, [r7, #8]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	617b      	str	r3, [r7, #20]
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	dbf1      	blt.n	800aa7c <_write+0x12>
	}
	return len;
 800aa98:	687b      	ldr	r3, [r7, #4]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3718      	adds	r7, #24
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <_close>:

int _close(int file)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b083      	sub	sp, #12
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
	return -1;
 800aaaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <_fstat>:


int _fstat(int file, struct stat *st)
{
 800aaba:	b480      	push	{r7}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800aaca:	605a      	str	r2, [r3, #4]
	return 0;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	370c      	adds	r7, #12
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <_isatty>:

int _isatty(int file)
{
 800aada:	b480      	push	{r7}
 800aadc:	b083      	sub	sp, #12
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
	return 1;
 800aae2:	2301      	movs	r3, #1
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
	return 0;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
	...

0800ab0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ab10:	4b06      	ldr	r3, [pc, #24]	; (800ab2c <SystemInit+0x20>)
 800ab12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab16:	4a05      	ldr	r2, [pc, #20]	; (800ab2c <SystemInit+0x20>)
 800ab18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ab20:	bf00      	nop
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	e000ed00 	.word	0xe000ed00

0800ab30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ab30:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ab68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ab34:	480d      	ldr	r0, [pc, #52]	; (800ab6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800ab36:	490e      	ldr	r1, [pc, #56]	; (800ab70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800ab38:	4a0e      	ldr	r2, [pc, #56]	; (800ab74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800ab3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ab3c:	e002      	b.n	800ab44 <LoopCopyDataInit>

0800ab3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ab3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ab40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ab42:	3304      	adds	r3, #4

0800ab44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ab44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ab46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ab48:	d3f9      	bcc.n	800ab3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ab4a:	4a0b      	ldr	r2, [pc, #44]	; (800ab78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800ab4c:	4c0b      	ldr	r4, [pc, #44]	; (800ab7c <LoopFillZerobss+0x26>)
  movs r3, #0
 800ab4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ab50:	e001      	b.n	800ab56 <LoopFillZerobss>

0800ab52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ab52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ab54:	3204      	adds	r2, #4

0800ab56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ab56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ab58:	d3fb      	bcc.n	800ab52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800ab5a:	f7ff ffd7 	bl	800ab0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ab5e:	f019 f877 	bl	8023c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ab62:	f7ff fa87 	bl	800a074 <main>
  bx  lr    
 800ab66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ab68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800ab6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ab70:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800ab74:	08028d18 	.word	0x08028d18
  ldr r2, =_sbss
 800ab78:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800ab7c:	2000c1b0 	.word	0x2000c1b0

0800ab80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ab80:	e7fe      	b.n	800ab80 <ADC_IRQHandler>

0800ab82 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b083      	sub	sp, #12
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00b      	beq.n	800abaa <LAN8742_RegisterBusIO+0x28>
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d007      	beq.n	800abaa <LAN8742_RegisterBusIO+0x28>
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d003      	beq.n	800abaa <LAN8742_RegisterBusIO+0x28>
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d102      	bne.n	800abb0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800abaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abae:	e014      	b.n	800abda <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	68da      	ldr	r2, [r3, #12]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	689a      	ldr	r2, [r3, #8]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	691a      	ldr	r2, [r3, #16]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b086      	sub	sp, #24
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800abee:	2300      	movs	r3, #0
 800abf0:	60fb      	str	r3, [r7, #12]
 800abf2:	2300      	movs	r3, #0
 800abf4:	60bb      	str	r3, [r7, #8]
 800abf6:	2300      	movs	r3, #0
 800abf8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800abfa:	2300      	movs	r3, #0
 800abfc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d17c      	bne.n	800ad00 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d002      	beq.n	800ac14 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2220      	movs	r2, #32
 800ac18:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	617b      	str	r3, [r7, #20]
 800ac1e:	e01c      	b.n	800ac5a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	f107 0208 	add.w	r2, r7, #8
 800ac28:	2112      	movs	r1, #18
 800ac2a:	6978      	ldr	r0, [r7, #20]
 800ac2c:	4798      	blx	r3
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	da03      	bge.n	800ac3c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800ac34:	f06f 0304 	mvn.w	r3, #4
 800ac38:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800ac3a:	e00b      	b.n	800ac54 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f003 031f 	and.w	r3, r3, #31
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d105      	bne.n	800ac54 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	613b      	str	r3, [r7, #16]
         break;
 800ac52:	e005      	b.n	800ac60 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	3301      	adds	r3, #1
 800ac58:	617b      	str	r3, [r7, #20]
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	2b1f      	cmp	r3, #31
 800ac5e:	d9df      	bls.n	800ac20 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b1f      	cmp	r3, #31
 800ac66:	d902      	bls.n	800ac6e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800ac68:	f06f 0302 	mvn.w	r3, #2
 800ac6c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d145      	bne.n	800ad00 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	6810      	ldr	r0, [r2, #0]
 800ac7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ac80:	2100      	movs	r1, #0
 800ac82:	4798      	blx	r3
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	db37      	blt.n	800acfa <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	6810      	ldr	r0, [r2, #0]
 800ac92:	f107 0208 	add.w	r2, r7, #8
 800ac96:	2100      	movs	r1, #0
 800ac98:	4798      	blx	r3
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	db28      	blt.n	800acf2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	4798      	blx	r3
 800aca6:	4603      	mov	r3, r0
 800aca8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800acaa:	e01c      	b.n	800ace6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	4798      	blx	r3
 800acb2:	4603      	mov	r3, r0
 800acb4:	461a      	mov	r2, r3
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800acbe:	d80e      	bhi.n	800acde <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	6810      	ldr	r0, [r2, #0]
 800acc8:	f107 0208 	add.w	r2, r7, #8
 800accc:	2100      	movs	r1, #0
 800acce:	4798      	blx	r3
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	da07      	bge.n	800ace6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800acd6:	f06f 0304 	mvn.w	r3, #4
 800acda:	613b      	str	r3, [r7, #16]
                 break;
 800acdc:	e010      	b.n	800ad00 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800acde:	f06f 0301 	mvn.w	r3, #1
 800ace2:	613b      	str	r3, [r7, #16]
               break;
 800ace4:	e00c      	b.n	800ad00 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1dd      	bne.n	800acac <LAN8742_Init+0xc6>
 800acf0:	e006      	b.n	800ad00 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800acf2:	f06f 0304 	mvn.w	r3, #4
 800acf6:	613b      	str	r3, [r7, #16]
 800acf8:	e002      	b.n	800ad00 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800acfa:	f06f 0303 	mvn.w	r3, #3
 800acfe:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d112      	bne.n	800ad2c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	4798      	blx	r3
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800ad10:	bf00      	nop
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	699b      	ldr	r3, [r3, #24]
 800ad16:	4798      	blx	r3
 800ad18:	4603      	mov	r3, r0
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ad24:	d9f5      	bls.n	800ad12 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2201      	movs	r2, #1
 800ad2a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800ad2c:	693b      	ldr	r3, [r7, #16]
 }
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3718      	adds	r7, #24
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b084      	sub	sp, #16
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	695b      	ldr	r3, [r3, #20]
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	6810      	ldr	r0, [r2, #0]
 800ad4a:	f107 020c 	add.w	r2, r7, #12
 800ad4e:	2101      	movs	r1, #1
 800ad50:	4798      	blx	r3
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	da02      	bge.n	800ad5e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800ad58:	f06f 0304 	mvn.w	r3, #4
 800ad5c:	e06e      	b.n	800ae3c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	695b      	ldr	r3, [r3, #20]
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	6810      	ldr	r0, [r2, #0]
 800ad66:	f107 020c 	add.w	r2, r7, #12
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	4798      	blx	r3
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	da02      	bge.n	800ad7a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800ad74:	f06f 0304 	mvn.w	r3, #4
 800ad78:	e060      	b.n	800ae3c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f003 0304 	and.w	r3, r3, #4
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800ad84:	2301      	movs	r3, #1
 800ad86:	e059      	b.n	800ae3c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	695b      	ldr	r3, [r3, #20]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	6810      	ldr	r0, [r2, #0]
 800ad90:	f107 020c 	add.w	r2, r7, #12
 800ad94:	2100      	movs	r1, #0
 800ad96:	4798      	blx	r3
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	da02      	bge.n	800ada4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800ad9e:	f06f 0304 	mvn.w	r3, #4
 800ada2:	e04b      	b.n	800ae3c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d11b      	bne.n	800ade6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d006      	beq.n	800adc6 <LAN8742_GetLinkState+0x90>
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d001      	beq.n	800adc6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800adc2:	2302      	movs	r3, #2
 800adc4:	e03a      	b.n	800ae3c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d001      	beq.n	800add4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800add0:	2303      	movs	r3, #3
 800add2:	e033      	b.n	800ae3c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800adde:	2304      	movs	r3, #4
 800ade0:	e02c      	b.n	800ae3c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800ade2:	2305      	movs	r3, #5
 800ade4:	e02a      	b.n	800ae3c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	695b      	ldr	r3, [r3, #20]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	6810      	ldr	r0, [r2, #0]
 800adee:	f107 020c 	add.w	r2, r7, #12
 800adf2:	211f      	movs	r1, #31
 800adf4:	4798      	blx	r3
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	da02      	bge.n	800ae02 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800adfc:	f06f 0304 	mvn.w	r3, #4
 800ae00:	e01c      	b.n	800ae3c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d101      	bne.n	800ae10 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800ae0c:	2306      	movs	r3, #6
 800ae0e:	e015      	b.n	800ae3c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f003 031c 	and.w	r3, r3, #28
 800ae16:	2b18      	cmp	r3, #24
 800ae18:	d101      	bne.n	800ae1e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800ae1a:	2302      	movs	r3, #2
 800ae1c:	e00e      	b.n	800ae3c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f003 031c 	and.w	r3, r3, #28
 800ae24:	2b08      	cmp	r3, #8
 800ae26:	d101      	bne.n	800ae2c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	e007      	b.n	800ae3c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f003 031c 	and.w	r3, r3, #28
 800ae32:	2b14      	cmp	r3, #20
 800ae34:	d101      	bne.n	800ae3a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800ae36:	2304      	movs	r3, #4
 800ae38:	e000      	b.n	800ae3c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800ae3a:	2305      	movs	r3, #5
    }				
  }
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ae48:	2003      	movs	r0, #3
 800ae4a:	f000 fff2 	bl	800be32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ae4e:	200f      	movs	r0, #15
 800ae50:	f7ff fce0 	bl	800a814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ae54:	f7ff fa16 	bl	800a284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	bd80      	pop	{r7, pc}
	...

0800ae60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ae60:	b480      	push	{r7}
 800ae62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ae64:	4b06      	ldr	r3, [pc, #24]	; (800ae80 <HAL_IncTick+0x20>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	461a      	mov	r2, r3
 800ae6a:	4b06      	ldr	r3, [pc, #24]	; (800ae84 <HAL_IncTick+0x24>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4413      	add	r3, r2
 800ae70:	4a04      	ldr	r2, [pc, #16]	; (800ae84 <HAL_IncTick+0x24>)
 800ae72:	6013      	str	r3, [r2, #0]
}
 800ae74:	bf00      	nop
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	20000014 	.word	0x20000014
 800ae84:	20001a28 	.word	0x20001a28

0800ae88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	af00      	add	r7, sp, #0
  return uwTick;
 800ae8c:	4b03      	ldr	r3, [pc, #12]	; (800ae9c <HAL_GetTick+0x14>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	20001a28 	.word	0x20001a28

0800aea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aea8:	f7ff ffee 	bl	800ae88 <HAL_GetTick>
 800aeac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeb8:	d005      	beq.n	800aec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aeba:	4b0a      	ldr	r3, [pc, #40]	; (800aee4 <HAL_Delay+0x44>)
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	4413      	add	r3, r2
 800aec4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800aec6:	bf00      	nop
 800aec8:	f7ff ffde 	bl	800ae88 <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d8f7      	bhi.n	800aec8 <HAL_Delay+0x28>
  {
  }
}
 800aed8:	bf00      	nop
 800aeda:	bf00      	nop
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	20000014 	.word	0x20000014

0800aee8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e0ed      	b.n	800b0d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f7ff f9e4 	bl	800a2d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f042 0201 	orr.w	r2, r2, #1
 800af1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af1c:	f7ff ffb4 	bl	800ae88 <HAL_GetTick>
 800af20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800af22:	e012      	b.n	800af4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800af24:	f7ff ffb0 	bl	800ae88 <HAL_GetTick>
 800af28:	4602      	mov	r2, r0
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	1ad3      	subs	r3, r2, r3
 800af2e:	2b0a      	cmp	r3, #10
 800af30:	d90b      	bls.n	800af4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2205      	movs	r2, #5
 800af42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	e0c5      	b.n	800b0d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	f003 0301 	and.w	r3, r3, #1
 800af54:	2b00      	cmp	r3, #0
 800af56:	d0e5      	beq.n	800af24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f022 0202 	bic.w	r2, r2, #2
 800af66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af68:	f7ff ff8e 	bl	800ae88 <HAL_GetTick>
 800af6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800af6e:	e012      	b.n	800af96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800af70:	f7ff ff8a 	bl	800ae88 <HAL_GetTick>
 800af74:	4602      	mov	r2, r0
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	2b0a      	cmp	r3, #10
 800af7c:	d90b      	bls.n	800af96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2205      	movs	r2, #5
 800af8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e09f      	b.n	800b0d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f003 0302 	and.w	r3, r3, #2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1e5      	bne.n	800af70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	7e1b      	ldrb	r3, [r3, #24]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d108      	bne.n	800afbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800afba:	601a      	str	r2, [r3, #0]
 800afbc:	e007      	b.n	800afce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	7e5b      	ldrb	r3, [r3, #25]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d108      	bne.n	800afe8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	e007      	b.n	800aff8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aff6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	7e9b      	ldrb	r3, [r3, #26]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d108      	bne.n	800b012 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f042 0220 	orr.w	r2, r2, #32
 800b00e:	601a      	str	r2, [r3, #0]
 800b010:	e007      	b.n	800b022 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f022 0220 	bic.w	r2, r2, #32
 800b020:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	7edb      	ldrb	r3, [r3, #27]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d108      	bne.n	800b03c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f022 0210 	bic.w	r2, r2, #16
 800b038:	601a      	str	r2, [r3, #0]
 800b03a:	e007      	b.n	800b04c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f042 0210 	orr.w	r2, r2, #16
 800b04a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	7f1b      	ldrb	r3, [r3, #28]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d108      	bne.n	800b066 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f042 0208 	orr.w	r2, r2, #8
 800b062:	601a      	str	r2, [r3, #0]
 800b064:	e007      	b.n	800b076 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f022 0208 	bic.w	r2, r2, #8
 800b074:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	7f5b      	ldrb	r3, [r3, #29]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d108      	bne.n	800b090 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f042 0204 	orr.w	r2, r2, #4
 800b08c:	601a      	str	r2, [r3, #0]
 800b08e:	e007      	b.n	800b0a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f022 0204 	bic.w	r2, r2, #4
 800b09e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	689a      	ldr	r2, [r3, #8]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	431a      	orrs	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	ea42 0103 	orr.w	r1, r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	1e5a      	subs	r2, r3, #1
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
	...

0800b0e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b087      	sub	sp, #28
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b0f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800b0f8:	7cfb      	ldrb	r3, [r7, #19]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d003      	beq.n	800b106 <HAL_CAN_ConfigFilter+0x26>
 800b0fe:	7cfb      	ldrb	r3, [r7, #19]
 800b100:	2b02      	cmp	r3, #2
 800b102:	f040 80be 	bne.w	800b282 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800b106:	4b65      	ldr	r3, [pc, #404]	; (800b29c <HAL_CAN_ConfigFilter+0x1bc>)
 800b108:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b110:	f043 0201 	orr.w	r2, r3, #1
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b120:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b134:	021b      	lsls	r3, r3, #8
 800b136:	431a      	orrs	r2, r3
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	f003 031f 	and.w	r3, r3, #31
 800b146:	2201      	movs	r2, #1
 800b148:	fa02 f303 	lsl.w	r3, r2, r3
 800b14c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	43db      	mvns	r3, r3
 800b158:	401a      	ands	r2, r3
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	69db      	ldr	r3, [r3, #28]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d123      	bne.n	800b1b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	43db      	mvns	r3, r3
 800b172:	401a      	ands	r2, r3
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b18a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	3248      	adds	r2, #72	; 0x48
 800b190:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b1a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b1a6:	6979      	ldr	r1, [r7, #20]
 800b1a8:	3348      	adds	r3, #72	; 0x48
 800b1aa:	00db      	lsls	r3, r3, #3
 800b1ac:	440b      	add	r3, r1
 800b1ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	69db      	ldr	r3, [r3, #28]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d122      	bne.n	800b1fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b1d4:	683a      	ldr	r2, [r7, #0]
 800b1d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b1d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	3248      	adds	r2, #72	; 0x48
 800b1de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b1f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b1f4:	6979      	ldr	r1, [r7, #20]
 800b1f6:	3348      	adds	r3, #72	; 0x48
 800b1f8:	00db      	lsls	r3, r3, #3
 800b1fa:	440b      	add	r3, r1
 800b1fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d109      	bne.n	800b21a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	43db      	mvns	r3, r3
 800b210:	401a      	ands	r2, r3
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800b218:	e007      	b.n	800b22a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	431a      	orrs	r2, r3
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d109      	bne.n	800b246 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	43db      	mvns	r3, r3
 800b23c:	401a      	ands	r2, r3
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b244:	e007      	b.n	800b256 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	431a      	orrs	r2, r3
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	6a1b      	ldr	r3, [r3, #32]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d107      	bne.n	800b26e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	431a      	orrs	r2, r3
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b274:	f023 0201 	bic.w	r2, r3, #1
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800b27e:	2300      	movs	r3, #0
 800b280:	e006      	b.n	800b290 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
  }
}
 800b290:	4618      	mov	r0, r3
 800b292:	371c      	adds	r7, #28
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr
 800b29c:	40006400 	.word	0x40006400

0800b2a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d12e      	bne.n	800b312 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f022 0201 	bic.w	r2, r2, #1
 800b2ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b2cc:	f7ff fddc 	bl	800ae88 <HAL_GetTick>
 800b2d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b2d2:	e012      	b.n	800b2fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b2d4:	f7ff fdd8 	bl	800ae88 <HAL_GetTick>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	2b0a      	cmp	r3, #10
 800b2e0:	d90b      	bls.n	800b2fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2205      	movs	r2, #5
 800b2f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e012      	b.n	800b320 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	f003 0301 	and.w	r3, r3, #1
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e5      	bne.n	800b2d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	e006      	b.n	800b320 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b316:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
  }
}
 800b320:	4618      	mov	r0, r3
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b336:	b2db      	uxtb	r3, r3
 800b338:	2b02      	cmp	r3, #2
 800b33a:	d133      	bne.n	800b3a4 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f042 0201 	orr.w	r2, r2, #1
 800b34a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b34c:	f7ff fd9c 	bl	800ae88 <HAL_GetTick>
 800b350:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b352:	e012      	b.n	800b37a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b354:	f7ff fd98 	bl	800ae88 <HAL_GetTick>
 800b358:	4602      	mov	r2, r0
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	2b0a      	cmp	r3, #10
 800b360:	d90b      	bls.n	800b37a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b366:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2205      	movs	r2, #5
 800b372:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e01b      	b.n	800b3b2 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	f003 0301 	and.w	r3, r3, #1
 800b384:	2b00      	cmp	r3, #0
 800b386:	d0e5      	beq.n	800b354 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f022 0202 	bic.w	r2, r2, #2
 800b396:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	e006      	b.n	800b3b2 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
  }
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800b3ba:	b480      	push	{r7}
 800b3bc:	b089      	sub	sp, #36	; 0x24
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	60f8      	str	r0, [r7, #12]
 800b3c2:	60b9      	str	r1, [r7, #8]
 800b3c4:	607a      	str	r2, [r7, #4]
 800b3c6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b3ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800b3d8:	7ffb      	ldrb	r3, [r7, #31]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d003      	beq.n	800b3e6 <HAL_CAN_AddTxMessage+0x2c>
 800b3de:	7ffb      	ldrb	r3, [r7, #31]
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	f040 80ad 	bne.w	800b540 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d10a      	bne.n	800b406 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d105      	bne.n	800b406 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 8095 	beq.w	800b530 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	0e1b      	lsrs	r3, r3, #24
 800b40a:	f003 0303 	and.w	r3, r3, #3
 800b40e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800b410:	2201      	movs	r2, #1
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	409a      	lsls	r2, r3
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d10d      	bne.n	800b43e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b42c:	68f9      	ldr	r1, [r7, #12]
 800b42e:	6809      	ldr	r1, [r1, #0]
 800b430:	431a      	orrs	r2, r3
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	3318      	adds	r3, #24
 800b436:	011b      	lsls	r3, r3, #4
 800b438:	440b      	add	r3, r1
 800b43a:	601a      	str	r2, [r3, #0]
 800b43c:	e00f      	b.n	800b45e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b448:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b44e:	68f9      	ldr	r1, [r7, #12]
 800b450:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800b452:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	3318      	adds	r3, #24
 800b458:	011b      	lsls	r3, r3, #4
 800b45a:	440b      	add	r3, r1
 800b45c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6819      	ldr	r1, [r3, #0]
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	691a      	ldr	r2, [r3, #16]
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	3318      	adds	r3, #24
 800b46a:	011b      	lsls	r3, r3, #4
 800b46c:	440b      	add	r3, r1
 800b46e:	3304      	adds	r3, #4
 800b470:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	7d1b      	ldrb	r3, [r3, #20]
 800b476:	2b01      	cmp	r3, #1
 800b478:	d111      	bne.n	800b49e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	3318      	adds	r3, #24
 800b482:	011b      	lsls	r3, r3, #4
 800b484:	4413      	add	r3, r2
 800b486:	3304      	adds	r3, #4
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	6811      	ldr	r1, [r2, #0]
 800b48e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	3318      	adds	r3, #24
 800b496:	011b      	lsls	r3, r3, #4
 800b498:	440b      	add	r3, r1
 800b49a:	3304      	adds	r3, #4
 800b49c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	3307      	adds	r3, #7
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	061a      	lsls	r2, r3, #24
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	3306      	adds	r3, #6
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	041b      	lsls	r3, r3, #16
 800b4ae:	431a      	orrs	r2, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	3305      	adds	r3, #5
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	021b      	lsls	r3, r3, #8
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	3204      	adds	r2, #4
 800b4be:	7812      	ldrb	r2, [r2, #0]
 800b4c0:	4610      	mov	r0, r2
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	6811      	ldr	r1, [r2, #0]
 800b4c6:	ea43 0200 	orr.w	r2, r3, r0
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	011b      	lsls	r3, r3, #4
 800b4ce:	440b      	add	r3, r1
 800b4d0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800b4d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	3303      	adds	r3, #3
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	061a      	lsls	r2, r3, #24
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3302      	adds	r3, #2
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	041b      	lsls	r3, r3, #16
 800b4e6:	431a      	orrs	r2, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	021b      	lsls	r3, r3, #8
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	7812      	ldrb	r2, [r2, #0]
 800b4f6:	4610      	mov	r0, r2
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	6811      	ldr	r1, [r2, #0]
 800b4fc:	ea43 0200 	orr.w	r2, r3, r0
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	011b      	lsls	r3, r3, #4
 800b504:	440b      	add	r3, r1
 800b506:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b50a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	3318      	adds	r3, #24
 800b514:	011b      	lsls	r3, r3, #4
 800b516:	4413      	add	r3, r2
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	6811      	ldr	r1, [r2, #0]
 800b51e:	f043 0201 	orr.w	r2, r3, #1
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	3318      	adds	r3, #24
 800b526:	011b      	lsls	r3, r3, #4
 800b528:	440b      	add	r3, r1
 800b52a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800b52c:	2300      	movs	r3, #0
 800b52e:	e00e      	b.n	800b54e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b534:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	e006      	b.n	800b54e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b544:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
  }
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3724      	adds	r7, #36	; 0x24
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr

0800b55a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800b55a:	b480      	push	{r7}
 800b55c:	b085      	sub	sp, #20
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800b562:	2300      	movs	r3, #0
 800b564:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b56c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800b56e:	7afb      	ldrb	r3, [r7, #11]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d002      	beq.n	800b57a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800b574:	7afb      	ldrb	r3, [r7, #11]
 800b576:	2b02      	cmp	r3, #2
 800b578:	d11d      	bne.n	800b5b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b584:	2b00      	cmp	r3, #0
 800b586:	d002      	beq.n	800b58e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	3301      	adds	r3, #1
 800b58c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3714      	adds	r7, #20
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b5d8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800b5da:	7afb      	ldrb	r3, [r7, #11]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d002      	beq.n	800b5e6 <HAL_CAN_IsTxMessagePending+0x22>
 800b5e0:	7afb      	ldrb	r3, [r7, #11]
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d10b      	bne.n	800b5fe <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	689a      	ldr	r2, [r3, #8]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	069b      	lsls	r3, r3, #26
 800b5f0:	401a      	ands	r2, r3
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	069b      	lsls	r3, r3, #26
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d001      	beq.n	800b5fe <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3714      	adds	r7, #20
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800b60c:	b480      	push	{r7}
 800b60e:	b087      	sub	sp, #28
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
 800b618:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b620:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800b622:	7dfb      	ldrb	r3, [r7, #23]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d003      	beq.n	800b630 <HAL_CAN_GetRxMessage+0x24>
 800b628:	7dfb      	ldrb	r3, [r7, #23]
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	f040 80f3 	bne.w	800b816 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10e      	bne.n	800b654 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	f003 0303 	and.w	r3, r3, #3
 800b640:	2b00      	cmp	r3, #0
 800b642:	d116      	bne.n	800b672 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b648:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	e0e7      	b.n	800b824 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	f003 0303 	and.w	r3, r3, #3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d107      	bne.n	800b672 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b666:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	e0d8      	b.n	800b824 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	331b      	adds	r3, #27
 800b67a:	011b      	lsls	r3, r3, #4
 800b67c:	4413      	add	r3, r2
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f003 0204 	and.w	r2, r3, #4
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d10c      	bne.n	800b6aa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	331b      	adds	r3, #27
 800b698:	011b      	lsls	r3, r3, #4
 800b69a:	4413      	add	r3, r2
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	0d5b      	lsrs	r3, r3, #21
 800b6a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	601a      	str	r2, [r3, #0]
 800b6a8:	e00b      	b.n	800b6c2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	331b      	adds	r3, #27
 800b6b2:	011b      	lsls	r3, r3, #4
 800b6b4:	4413      	add	r3, r2
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	08db      	lsrs	r3, r3, #3
 800b6ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	331b      	adds	r3, #27
 800b6ca:	011b      	lsls	r3, r3, #4
 800b6cc:	4413      	add	r3, r2
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 0202 	and.w	r2, r3, #2
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	331b      	adds	r3, #27
 800b6e0:	011b      	lsls	r3, r3, #4
 800b6e2:	4413      	add	r3, r2
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f003 020f 	and.w	r2, r3, #15
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	331b      	adds	r3, #27
 800b6f8:	011b      	lsls	r3, r3, #4
 800b6fa:	4413      	add	r3, r2
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	0a1b      	lsrs	r3, r3, #8
 800b702:	b2da      	uxtb	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	331b      	adds	r3, #27
 800b710:	011b      	lsls	r3, r3, #4
 800b712:	4413      	add	r3, r2
 800b714:	3304      	adds	r3, #4
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	0c1b      	lsrs	r3, r3, #16
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	011b      	lsls	r3, r3, #4
 800b728:	4413      	add	r3, r2
 800b72a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	b2da      	uxtb	r2, r3
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	011b      	lsls	r3, r3, #4
 800b73e:	4413      	add	r3, r2
 800b740:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	0a1a      	lsrs	r2, r3, #8
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	3301      	adds	r3, #1
 800b74c:	b2d2      	uxtb	r2, r2
 800b74e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	011b      	lsls	r3, r3, #4
 800b758:	4413      	add	r3, r2
 800b75a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	0c1a      	lsrs	r2, r3, #16
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	3302      	adds	r3, #2
 800b766:	b2d2      	uxtb	r2, r2
 800b768:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	011b      	lsls	r3, r3, #4
 800b772:	4413      	add	r3, r2
 800b774:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	0e1a      	lsrs	r2, r3, #24
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	3303      	adds	r3, #3
 800b780:	b2d2      	uxtb	r2, r2
 800b782:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	011b      	lsls	r3, r3, #4
 800b78c:	4413      	add	r3, r2
 800b78e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	3304      	adds	r3, #4
 800b798:	b2d2      	uxtb	r2, r2
 800b79a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	011b      	lsls	r3, r3, #4
 800b7a4:	4413      	add	r3, r2
 800b7a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	0a1a      	lsrs	r2, r3, #8
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	3305      	adds	r3, #5
 800b7b2:	b2d2      	uxtb	r2, r2
 800b7b4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	011b      	lsls	r3, r3, #4
 800b7be:	4413      	add	r3, r2
 800b7c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	0c1a      	lsrs	r2, r3, #16
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	3306      	adds	r3, #6
 800b7cc:	b2d2      	uxtb	r2, r2
 800b7ce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	011b      	lsls	r3, r3, #4
 800b7d8:	4413      	add	r3, r2
 800b7da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	0e1a      	lsrs	r2, r3, #24
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	3307      	adds	r3, #7
 800b7e6:	b2d2      	uxtb	r2, r2
 800b7e8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d108      	bne.n	800b802 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	68da      	ldr	r2, [r3, #12]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f042 0220 	orr.w	r2, r2, #32
 800b7fe:	60da      	str	r2, [r3, #12]
 800b800:	e007      	b.n	800b812 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	691a      	ldr	r2, [r3, #16]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f042 0220 	orr.w	r2, r2, #32
 800b810:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	e006      	b.n	800b824 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
  }
}
 800b824:	4618      	mov	r0, r3
 800b826:	371c      	adds	r7, #28
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b08a      	sub	sp, #40	; 0x28
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800b838:	2300      	movs	r3, #0
 800b83a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	691b      	ldr	r3, [r3, #16]
 800b862:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	699b      	ldr	r3, [r3, #24]
 800b86a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	f003 0301 	and.w	r3, r3, #1
 800b872:	2b00      	cmp	r3, #0
 800b874:	d07c      	beq.n	800b970 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	f003 0301 	and.w	r3, r3, #1
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d023      	beq.n	800b8c8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2201      	movs	r2, #1
 800b886:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	f003 0302 	and.w	r3, r3, #2
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d003      	beq.n	800b89a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f983 	bl	800bb9e <HAL_CAN_TxMailbox0CompleteCallback>
 800b898:	e016      	b.n	800b8c8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	f003 0304 	and.w	r3, r3, #4
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d004      	beq.n	800b8ae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b8aa:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ac:	e00c      	b.n	800b8c8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	f003 0308 	and.w	r3, r3, #8
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d004      	beq.n	800b8c2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b8be:	627b      	str	r3, [r7, #36]	; 0x24
 800b8c0:	e002      	b.n	800b8c8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f989 	bl	800bbda <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d024      	beq.n	800b91c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d003      	beq.n	800b8ee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 f963 	bl	800bbb2 <HAL_CAN_TxMailbox1CompleteCallback>
 800b8ec:	e016      	b.n	800b91c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d004      	beq.n	800b902 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b8fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b900:	e00c      	b.n	800b91c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d004      	beq.n	800b916 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800b90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b912:	627b      	str	r3, [r7, #36]	; 0x24
 800b914:	e002      	b.n	800b91c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 f969 	bl	800bbee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b922:	2b00      	cmp	r3, #0
 800b924:	d024      	beq.n	800b970 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b92e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 f943 	bl	800bbc6 <HAL_CAN_TxMailbox2CompleteCallback>
 800b940:	e016      	b.n	800b970 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d004      	beq.n	800b956 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b952:	627b      	str	r3, [r7, #36]	; 0x24
 800b954:	e00c      	b.n	800b970 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d004      	beq.n	800b96a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b966:	627b      	str	r3, [r7, #36]	; 0x24
 800b968:	e002      	b.n	800b970 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f949 	bl	800bc02 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800b970:	6a3b      	ldr	r3, [r7, #32]
 800b972:	f003 0308 	and.w	r3, r3, #8
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00c      	beq.n	800b994 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f003 0310 	and.w	r3, r3, #16
 800b980:	2b00      	cmp	r3, #0
 800b982:	d007      	beq.n	800b994 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b98a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2210      	movs	r2, #16
 800b992:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800b994:	6a3b      	ldr	r3, [r7, #32]
 800b996:	f003 0304 	and.w	r3, r3, #4
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00b      	beq.n	800b9b6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	f003 0308 	and.w	r3, r3, #8
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d006      	beq.n	800b9b6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2208      	movs	r2, #8
 800b9ae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f930 	bl	800bc16 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	f003 0302 	and.w	r3, r3, #2
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d009      	beq.n	800b9d4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	f003 0303 	and.w	r3, r3, #3
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d002      	beq.n	800b9d4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7fe faa1 	bl	8009f16 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800b9d4:	6a3b      	ldr	r3, [r7, #32]
 800b9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00c      	beq.n	800b9f8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f003 0310 	and.w	r3, r3, #16
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d007      	beq.n	800b9f8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b9ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2210      	movs	r2, #16
 800b9f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	f003 0320 	and.w	r3, r3, #32
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00b      	beq.n	800ba1a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	f003 0308 	and.w	r3, r3, #8
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d006      	beq.n	800ba1a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2208      	movs	r2, #8
 800ba12:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 f912 	bl	800bc3e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800ba1a:	6a3b      	ldr	r3, [r7, #32]
 800ba1c:	f003 0310 	and.w	r3, r3, #16
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d009      	beq.n	800ba38 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	f003 0303 	and.w	r3, r3, #3
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d002      	beq.n	800ba38 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f8f9 	bl	800bc2a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800ba38:	6a3b      	ldr	r3, [r7, #32]
 800ba3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00b      	beq.n	800ba5a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	f003 0310 	and.w	r3, r3, #16
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d006      	beq.n	800ba5a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2210      	movs	r2, #16
 800ba52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f8fc 	bl	800bc52 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800ba5a:	6a3b      	ldr	r3, [r7, #32]
 800ba5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00b      	beq.n	800ba7c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	f003 0308 	and.w	r3, r3, #8
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d006      	beq.n	800ba7c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2208      	movs	r2, #8
 800ba74:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 f8f5 	bl	800bc66 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800ba7c:	6a3b      	ldr	r3, [r7, #32]
 800ba7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d07b      	beq.n	800bb7e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	f003 0304 	and.w	r3, r3, #4
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d072      	beq.n	800bb76 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ba90:	6a3b      	ldr	r3, [r7, #32]
 800ba92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d008      	beq.n	800baac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d003      	beq.n	800baac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800baa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa6:	f043 0301 	orr.w	r3, r3, #1
 800baaa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800baac:	6a3b      	ldr	r3, [r7, #32]
 800baae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d008      	beq.n	800bac8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800babc:	2b00      	cmp	r3, #0
 800babe:	d003      	beq.n	800bac8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800bac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac2:	f043 0302 	orr.w	r3, r3, #2
 800bac6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800bac8:	6a3b      	ldr	r3, [r7, #32]
 800baca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d008      	beq.n	800bae4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d003      	beq.n	800bae4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	f043 0304 	orr.w	r3, r3, #4
 800bae2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800bae4:	6a3b      	ldr	r3, [r7, #32]
 800bae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baea:	2b00      	cmp	r3, #0
 800baec:	d043      	beq.n	800bb76 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d03e      	beq.n	800bb76 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bafe:	2b60      	cmp	r3, #96	; 0x60
 800bb00:	d02b      	beq.n	800bb5a <HAL_CAN_IRQHandler+0x32a>
 800bb02:	2b60      	cmp	r3, #96	; 0x60
 800bb04:	d82e      	bhi.n	800bb64 <HAL_CAN_IRQHandler+0x334>
 800bb06:	2b50      	cmp	r3, #80	; 0x50
 800bb08:	d022      	beq.n	800bb50 <HAL_CAN_IRQHandler+0x320>
 800bb0a:	2b50      	cmp	r3, #80	; 0x50
 800bb0c:	d82a      	bhi.n	800bb64 <HAL_CAN_IRQHandler+0x334>
 800bb0e:	2b40      	cmp	r3, #64	; 0x40
 800bb10:	d019      	beq.n	800bb46 <HAL_CAN_IRQHandler+0x316>
 800bb12:	2b40      	cmp	r3, #64	; 0x40
 800bb14:	d826      	bhi.n	800bb64 <HAL_CAN_IRQHandler+0x334>
 800bb16:	2b30      	cmp	r3, #48	; 0x30
 800bb18:	d010      	beq.n	800bb3c <HAL_CAN_IRQHandler+0x30c>
 800bb1a:	2b30      	cmp	r3, #48	; 0x30
 800bb1c:	d822      	bhi.n	800bb64 <HAL_CAN_IRQHandler+0x334>
 800bb1e:	2b10      	cmp	r3, #16
 800bb20:	d002      	beq.n	800bb28 <HAL_CAN_IRQHandler+0x2f8>
 800bb22:	2b20      	cmp	r3, #32
 800bb24:	d005      	beq.n	800bb32 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800bb26:	e01d      	b.n	800bb64 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	f043 0308 	orr.w	r3, r3, #8
 800bb2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bb30:	e019      	b.n	800bb66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800bb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb34:	f043 0310 	orr.w	r3, r3, #16
 800bb38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bb3a:	e014      	b.n	800bb66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3e:	f043 0320 	orr.w	r3, r3, #32
 800bb42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bb44:	e00f      	b.n	800bb66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800bb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bb4e:	e00a      	b.n	800bb66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800bb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bb58:	e005      	b.n	800bb66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bb62:	e000      	b.n	800bb66 <HAL_CAN_IRQHandler+0x336>
            break;
 800bb64:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	699a      	ldr	r2, [r3, #24]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800bb74:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2204      	movs	r2, #4
 800bb7c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d008      	beq.n	800bb96 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8a:	431a      	orrs	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f872 	bl	800bc7a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800bb96:	bf00      	nop
 800bb98:	3728      	adds	r7, #40	; 0x28
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bb9e:	b480      	push	{r7}
 800bba0:	b083      	sub	sp, #12
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800bba6:	bf00      	nop
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr

0800bbb2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b083      	sub	sp, #12
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800bbba:	bf00      	nop
 800bbbc:	370c      	adds	r7, #12
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr

0800bbc6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b083      	sub	sp, #12
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800bbce:	bf00      	nop
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bbda:	b480      	push	{r7}
 800bbdc:	b083      	sub	sp, #12
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800bbe2:	bf00      	nop
 800bbe4:	370c      	adds	r7, #12
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr

0800bbee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bbee:	b480      	push	{r7}
 800bbf0:	b083      	sub	sp, #12
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800bbf6:	bf00      	nop
 800bbf8:	370c      	adds	r7, #12
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bc02:	b480      	push	{r7}
 800bc04:	b083      	sub	sp, #12
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800bc0a:	bf00      	nop
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800bc16:	b480      	push	{r7}
 800bc18:	b083      	sub	sp, #12
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800bc1e:	bf00      	nop
 800bc20:	370c      	adds	r7, #12
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr

0800bc2a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b083      	sub	sp, #12
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800bc32:	bf00      	nop
 800bc34:	370c      	adds	r7, #12
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b083      	sub	sp, #12
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800bc46:	bf00      	nop
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800bc52:	b480      	push	{r7}
 800bc54:	b083      	sub	sp, #12
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800bc5a:	bf00      	nop
 800bc5c:	370c      	adds	r7, #12
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800bc6e:	bf00      	nop
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b083      	sub	sp, #12
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800bc82:	bf00      	nop
 800bc84:	370c      	adds	r7, #12
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
	...

0800bc90 <__NVIC_SetPriorityGrouping>:
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f003 0307 	and.w	r3, r3, #7
 800bc9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bca0:	4b0b      	ldr	r3, [pc, #44]	; (800bcd0 <__NVIC_SetPriorityGrouping+0x40>)
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bcac:	4013      	ands	r3, r2
 800bcae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bcb8:	4b06      	ldr	r3, [pc, #24]	; (800bcd4 <__NVIC_SetPriorityGrouping+0x44>)
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bcbe:	4a04      	ldr	r2, [pc, #16]	; (800bcd0 <__NVIC_SetPriorityGrouping+0x40>)
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	60d3      	str	r3, [r2, #12]
}
 800bcc4:	bf00      	nop
 800bcc6:	3714      	adds	r7, #20
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	e000ed00 	.word	0xe000ed00
 800bcd4:	05fa0000 	.word	0x05fa0000

0800bcd8 <__NVIC_GetPriorityGrouping>:
{
 800bcd8:	b480      	push	{r7}
 800bcda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bcdc:	4b04      	ldr	r3, [pc, #16]	; (800bcf0 <__NVIC_GetPriorityGrouping+0x18>)
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	0a1b      	lsrs	r3, r3, #8
 800bce2:	f003 0307 	and.w	r3, r3, #7
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	e000ed00 	.word	0xe000ed00

0800bcf4 <__NVIC_EnableIRQ>:
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	db0b      	blt.n	800bd1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bd06:	79fb      	ldrb	r3, [r7, #7]
 800bd08:	f003 021f 	and.w	r2, r3, #31
 800bd0c:	4907      	ldr	r1, [pc, #28]	; (800bd2c <__NVIC_EnableIRQ+0x38>)
 800bd0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd12:	095b      	lsrs	r3, r3, #5
 800bd14:	2001      	movs	r0, #1
 800bd16:	fa00 f202 	lsl.w	r2, r0, r2
 800bd1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bd1e:	bf00      	nop
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
 800bd2a:	bf00      	nop
 800bd2c:	e000e100 	.word	0xe000e100

0800bd30 <__NVIC_DisableIRQ>:
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	4603      	mov	r3, r0
 800bd38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	db12      	blt.n	800bd68 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bd42:	79fb      	ldrb	r3, [r7, #7]
 800bd44:	f003 021f 	and.w	r2, r3, #31
 800bd48:	490a      	ldr	r1, [pc, #40]	; (800bd74 <__NVIC_DisableIRQ+0x44>)
 800bd4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd4e:	095b      	lsrs	r3, r3, #5
 800bd50:	2001      	movs	r0, #1
 800bd52:	fa00 f202 	lsl.w	r2, r0, r2
 800bd56:	3320      	adds	r3, #32
 800bd58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bd5c:	f3bf 8f4f 	dsb	sy
}
 800bd60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bd62:	f3bf 8f6f 	isb	sy
}
 800bd66:	bf00      	nop
}
 800bd68:	bf00      	nop
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr
 800bd74:	e000e100 	.word	0xe000e100

0800bd78 <__NVIC_SetPriority>:
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	4603      	mov	r3, r0
 800bd80:	6039      	str	r1, [r7, #0]
 800bd82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	db0a      	blt.n	800bda2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	b2da      	uxtb	r2, r3
 800bd90:	490c      	ldr	r1, [pc, #48]	; (800bdc4 <__NVIC_SetPriority+0x4c>)
 800bd92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd96:	0112      	lsls	r2, r2, #4
 800bd98:	b2d2      	uxtb	r2, r2
 800bd9a:	440b      	add	r3, r1
 800bd9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bda0:	e00a      	b.n	800bdb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	4908      	ldr	r1, [pc, #32]	; (800bdc8 <__NVIC_SetPriority+0x50>)
 800bda8:	79fb      	ldrb	r3, [r7, #7]
 800bdaa:	f003 030f 	and.w	r3, r3, #15
 800bdae:	3b04      	subs	r3, #4
 800bdb0:	0112      	lsls	r2, r2, #4
 800bdb2:	b2d2      	uxtb	r2, r2
 800bdb4:	440b      	add	r3, r1
 800bdb6:	761a      	strb	r2, [r3, #24]
}
 800bdb8:	bf00      	nop
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	e000e100 	.word	0xe000e100
 800bdc8:	e000ed00 	.word	0xe000ed00

0800bdcc <NVIC_EncodePriority>:
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b089      	sub	sp, #36	; 0x24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f003 0307 	and.w	r3, r3, #7
 800bdde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	f1c3 0307 	rsb	r3, r3, #7
 800bde6:	2b04      	cmp	r3, #4
 800bde8:	bf28      	it	cs
 800bdea:	2304      	movcs	r3, #4
 800bdec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	2b06      	cmp	r3, #6
 800bdf4:	d902      	bls.n	800bdfc <NVIC_EncodePriority+0x30>
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	3b03      	subs	r3, #3
 800bdfa:	e000      	b.n	800bdfe <NVIC_EncodePriority+0x32>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	fa02 f303 	lsl.w	r3, r2, r3
 800be0a:	43da      	mvns	r2, r3
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	401a      	ands	r2, r3
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800be14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	fa01 f303 	lsl.w	r3, r1, r3
 800be1e:	43d9      	mvns	r1, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be24:	4313      	orrs	r3, r2
}
 800be26:	4618      	mov	r0, r3
 800be28:	3724      	adds	r7, #36	; 0x24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr

0800be32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800be32:	b580      	push	{r7, lr}
 800be34:	b082      	sub	sp, #8
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f7ff ff28 	bl	800bc90 <__NVIC_SetPriorityGrouping>
}
 800be40:	bf00      	nop
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800be48:	b580      	push	{r7, lr}
 800be4a:	b086      	sub	sp, #24
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	4603      	mov	r3, r0
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	607a      	str	r2, [r7, #4]
 800be54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800be56:	2300      	movs	r3, #0
 800be58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800be5a:	f7ff ff3d 	bl	800bcd8 <__NVIC_GetPriorityGrouping>
 800be5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	68b9      	ldr	r1, [r7, #8]
 800be64:	6978      	ldr	r0, [r7, #20]
 800be66:	f7ff ffb1 	bl	800bdcc <NVIC_EncodePriority>
 800be6a:	4602      	mov	r2, r0
 800be6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be70:	4611      	mov	r1, r2
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff ff80 	bl	800bd78 <__NVIC_SetPriority>
}
 800be78:	bf00      	nop
 800be7a:	3718      	adds	r7, #24
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	4603      	mov	r3, r0
 800be88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800be8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be8e:	4618      	mov	r0, r3
 800be90:	f7ff ff30 	bl	800bcf4 <__NVIC_EnableIRQ>
}
 800be94:	bf00      	nop
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	4603      	mov	r3, r0
 800bea4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800bea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800beaa:	4618      	mov	r0, r3
 800beac:	f7ff ff40 	bl	800bd30 <__NVIC_DisableIRQ>
}
 800beb0:	bf00      	nop
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bec4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800bec6:	f7fe ffdf 	bl	800ae88 <HAL_GetTick>
 800beca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	d008      	beq.n	800beea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2280      	movs	r2, #128	; 0x80
 800bedc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	e052      	b.n	800bf90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f022 0216 	bic.w	r2, r2, #22
 800bef8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	695a      	ldr	r2, [r3, #20]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d103      	bne.n	800bf1a <HAL_DMA_Abort+0x62>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d007      	beq.n	800bf2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f022 0208 	bic.w	r2, r2, #8
 800bf28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f022 0201 	bic.w	r2, r2, #1
 800bf38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bf3a:	e013      	b.n	800bf64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bf3c:	f7fe ffa4 	bl	800ae88 <HAL_GetTick>
 800bf40:	4602      	mov	r2, r0
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	2b05      	cmp	r3, #5
 800bf48:	d90c      	bls.n	800bf64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2220      	movs	r2, #32
 800bf4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2203      	movs	r2, #3
 800bf54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800bf60:	2303      	movs	r3, #3
 800bf62:	e015      	b.n	800bf90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 0301 	and.w	r3, r3, #1
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1e4      	bne.n	800bf3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf76:	223f      	movs	r2, #63	; 0x3f
 800bf78:	409a      	lsls	r2, r3
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800bf8e:	2300      	movs	r3, #0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	2b02      	cmp	r3, #2
 800bfaa:	d004      	beq.n	800bfb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2280      	movs	r2, #128	; 0x80
 800bfb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e00c      	b.n	800bfd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2205      	movs	r2, #5
 800bfba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f022 0201 	bic.w	r2, r2, #1
 800bfcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d101      	bne.n	800bfee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e06a      	b.n	800c0c4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d106      	bne.n	800c006 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2223      	movs	r2, #35	; 0x23
 800bffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f005 fa89 	bl	8011518 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c006:	4b31      	ldr	r3, [pc, #196]	; (800c0cc <HAL_ETH_Init+0xf0>)
 800c008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c00a:	4a30      	ldr	r2, [pc, #192]	; (800c0cc <HAL_ETH_Init+0xf0>)
 800c00c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c010:	6453      	str	r3, [r2, #68]	; 0x44
 800c012:	4b2e      	ldr	r3, [pc, #184]	; (800c0cc <HAL_ETH_Init+0xf0>)
 800c014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c01a:	60bb      	str	r3, [r7, #8]
 800c01c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800c01e:	4b2c      	ldr	r3, [pc, #176]	; (800c0d0 <HAL_ETH_Init+0xf4>)
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	4a2b      	ldr	r2, [pc, #172]	; (800c0d0 <HAL_ETH_Init+0xf4>)
 800c024:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c028:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800c02a:	4b29      	ldr	r3, [pc, #164]	; (800c0d0 <HAL_ETH_Init+0xf4>)
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	4927      	ldr	r1, [pc, #156]	; (800c0d0 <HAL_ETH_Init+0xf4>)
 800c034:	4313      	orrs	r3, r2
 800c036:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800c038:	4b25      	ldr	r3, [pc, #148]	; (800c0d0 <HAL_ETH_Init+0xf4>)
 800c03a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	6812      	ldr	r2, [r2, #0]
 800c04a:	f043 0301 	orr.w	r3, r3, #1
 800c04e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c052:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c054:	f7fe ff18 	bl	800ae88 <HAL_GetTick>
 800c058:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800c05a:	e011      	b.n	800c080 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800c05c:	f7fe ff14 	bl	800ae88 <HAL_GetTick>
 800c060:	4602      	mov	r2, r0
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c06a:	d909      	bls.n	800c080 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2204      	movs	r2, #4
 800c070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	22e0      	movs	r2, #224	; 0xe0
 800c078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	e021      	b.n	800c0c4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f003 0301 	and.w	r3, r3, #1
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1e4      	bne.n	800c05c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 ff2c 	bl	800cef0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 ffd3 	bl	800d044 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f001 f829 	bl	800d0f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 ff91 	bl	800cfd4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2210      	movs	r2, #16
 800c0be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	40023800 	.word	0x40023800
 800c0d0:	40013800 	.word	0x40013800

0800c0d4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0e2:	2b10      	cmp	r3, #16
 800c0e4:	d150      	bne.n	800c188 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2223      	movs	r2, #35	; 0x23
 800c0ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2204      	movs	r2, #4
 800c0f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 f9fb 	bl	800c4f0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f042 0208 	orr.w	r2, r2, #8
 800c108:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c112:	2001      	movs	r0, #1
 800c114:	f7fe fec4 	bl	800aea0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f042 0204 	orr.w	r2, r2, #4
 800c12e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c138:	2001      	movs	r0, #1
 800c13a:	f7fe feb1 	bl	800aea0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 fd73 	bl	800cc32 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c154:	699b      	ldr	r3, [r3, #24]
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	6812      	ldr	r2, [r2, #0]
 800c15a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c15e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c162:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c16c:	699b      	ldr	r3, [r3, #24]
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	6812      	ldr	r2, [r2, #0]
 800c172:	f043 0302 	orr.w	r3, r3, #2
 800c176:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c17a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2223      	movs	r2, #35	; 0x23
 800c180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c184:	2300      	movs	r3, #0
 800c186:	e000      	b.n	800c18a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800c188:	2301      	movs	r3, #1
  }
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
	...

0800c194 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1a2:	2b10      	cmp	r3, #16
 800c1a4:	d17b      	bne.n	800c29e <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2223      	movs	r2, #35	; 0x23
 800c1aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800c1c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	4b35      	ldr	r3, [pc, #212]	; (800c2a8 <HAL_ETH_Start_IT+0x114>)
 800c1d2:	430b      	orrs	r3, r1
 800c1d4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800c1e8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2204      	movs	r2, #4
 800c1f0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 f97c 	bl	800c4f0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f042 0208 	orr.w	r2, r2, #8
 800c206:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c210:	2001      	movs	r0, #1
 800c212:	f7fe fe45 	bl	800aea0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f042 0204 	orr.w	r2, r2, #4
 800c22c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c236:	2001      	movs	r0, #1
 800c238:	f7fe fe32 	bl	800aea0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 fcf4 	bl	800cc32 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c252:	699b      	ldr	r3, [r3, #24]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	6812      	ldr	r2, [r2, #0]
 800c258:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c25c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c260:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	6812      	ldr	r2, [r2, #0]
 800c270:	f043 0302 	orr.w	r3, r3, #2
 800c274:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c278:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c282:	69d9      	ldr	r1, [r3, #28]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	4b08      	ldr	r3, [pc, #32]	; (800c2ac <HAL_ETH_Start_IT+0x118>)
 800c28a:	430b      	orrs	r3, r1
 800c28c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c290:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2223      	movs	r2, #35	; 0x23
 800c296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	e000      	b.n	800c2a0 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
  }
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	00020060 	.word	0x00020060
 800c2ac:	0001a0c1 	.word	0x0001a0c1

0800c2b0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d109      	bne.n	800c2d4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2c6:	f043 0201 	orr.w	r2, r3, #1
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e045      	b.n	800c360 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2da:	2b23      	cmp	r3, #35	; 0x23
 800c2dc:	d13f      	bne.n	800c35e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 ff70 	bl	800d1d0 <ETH_Prepare_Tx_Descriptors>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d009      	beq.n	800c30a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2fc:	f043 0202 	orr.w	r2, r3, #2
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e02a      	b.n	800c360 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800c30a:	f3bf 8f4f 	dsb	sy
}
 800c30e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c314:	1c5a      	adds	r2, r3, #1
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	629a      	str	r2, [r3, #40]	; 0x28
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d904      	bls.n	800c32c <HAL_ETH_Transmit_IT+0x7c>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c326:	1f1a      	subs	r2, r3, #4
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c334:	695b      	ldr	r3, [r3, #20]
 800c336:	f003 0304 	and.w	r3, r3, #4
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00d      	beq.n	800c35a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c346:	461a      	mov	r2, r3
 800c348:	2304      	movs	r3, #4
 800c34a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c354:	461a      	mov	r2, r3
 800c356:	2300      	movs	r3, #0
 800c358:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800c35a:	2300      	movs	r3, #0
 800c35c:	e000      	b.n	800c360 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
  }
}
 800c360:	4618      	mov	r0, r3
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b088      	sub	sp, #32
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800c372:	2300      	movs	r3, #0
 800c374:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800c376:	2300      	movs	r3, #0
 800c378:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d109      	bne.n	800c394 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c386:	f043 0201 	orr.w	r2, r3, #1
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800c390:	2301      	movs	r3, #1
 800c392:	e0a8      	b.n	800c4e6 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c39a:	2b23      	cmp	r3, #35	; 0x23
 800c39c:	d001      	beq.n	800c3a2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e0a1      	b.n	800c4e6 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3a6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	69fa      	ldr	r2, [r7, #28]
 800c3ac:	3212      	adds	r2, #18
 800c3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3b8:	f1c3 0304 	rsb	r3, r3, #4
 800c3bc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800c3be:	e06a      	b.n	800c496 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d007      	beq.n	800c3dc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	699a      	ldr	r2, [r3, #24]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800c3d4:	69bb      	ldr	r3, [r7, #24]
 800c3d6:	69da      	ldr	r2, [r3, #28]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d103      	bne.n	800c3f0 <HAL_ETH_ReadData+0x88>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d040      	beq.n	800c472 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d005      	beq.n	800c408 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	695b      	ldr	r3, [r3, #20]
 800c40c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00c      	beq.n	800c434 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	0c1b      	lsrs	r3, r3, #16
 800c420:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c424:	3b04      	subs	r3, #4
 800c426:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800c430:	2301      	movs	r3, #1
 800c432:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	689a      	ldr	r2, [r3, #8]
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800c44c:	461a      	mov	r2, r3
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	b29b      	uxth	r3, r3
 800c452:	f005 fa2b 	bl	80118ac <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c45a:	1c5a      	adds	r2, r3, #1
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	441a      	add	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	2200      	movs	r2, #0
 800c470:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	3301      	adds	r3, #1
 800c476:	61fb      	str	r3, [r7, #28]
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	2b03      	cmp	r3, #3
 800c47c:	d902      	bls.n	800c484 <HAL_ETH_ReadData+0x11c>
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	3b04      	subs	r3, #4
 800c482:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	69fa      	ldr	r2, [r7, #28]
 800c488:	3212      	adds	r2, #18
 800c48a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c48e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	3301      	adds	r3, #1
 800c494:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	db06      	blt.n	800c4ac <HAL_ETH_ReadData+0x144>
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d202      	bcs.n	800c4ac <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d089      	beq.n	800c3c0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	441a      	add	r2, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d002      	beq.n	800c4c6 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 f815 	bl	800c4f0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	69fa      	ldr	r2, [r7, #28]
 800c4ca:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d108      	bne.n	800c4e4 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	e000      	b.n	800c4e6 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3720      	adds	r7, #32
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
	...

0800c4f0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b088      	sub	sp, #32
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c504:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	69fa      	ldr	r2, [r7, #28]
 800c50a:	3212      	adds	r2, #18
 800c50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c510:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c516:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800c518:	e040      	b.n	800c59c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	6a1b      	ldr	r3, [r3, #32]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d112      	bne.n	800c548 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800c522:	f107 030c 	add.w	r3, r7, #12
 800c526:	4618      	mov	r0, r3
 800c528:	f005 f990 	bl	801184c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d102      	bne.n	800c538 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800c532:	2300      	movs	r3, #0
 800c534:	74fb      	strb	r3, [r7, #19]
 800c536:	e007      	b.n	800c548 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	461a      	mov	r2, r3
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	461a      	mov	r2, r3
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800c548:	7cfb      	ldrb	r3, [r7, #19]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d026      	beq.n	800c59c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c552:	2b00      	cmp	r3, #0
 800c554:	d103      	bne.n	800c55e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	4a1e      	ldr	r2, [pc, #120]	; (800c5d4 <ETH_UpdateDescriptor+0xe4>)
 800c55a:	605a      	str	r2, [r3, #4]
 800c55c:	e003      	b.n	800c566 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800c564:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800c566:	f3bf 8f5f 	dmb	sy
}
 800c56a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	3301      	adds	r3, #1
 800c57c:	61fb      	str	r3, [r7, #28]
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	2b03      	cmp	r3, #3
 800c582:	d902      	bls.n	800c58a <ETH_UpdateDescriptor+0x9a>
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	3b04      	subs	r3, #4
 800c588:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	69fa      	ldr	r2, [r7, #28]
 800c58e:	3212      	adds	r2, #18
 800c590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c594:	617b      	str	r3, [r7, #20]
      desccount--;
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	3b01      	subs	r3, #1
 800c59a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d002      	beq.n	800c5a8 <ETH_UpdateDescriptor+0xb8>
 800c5a2:	7cfb      	ldrb	r3, [r7, #19]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d1b8      	bne.n	800c51a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5ac:	69ba      	ldr	r2, [r7, #24]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d00c      	beq.n	800c5cc <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	2300      	movs	r3, #0
 800c5be:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	69fa      	ldr	r2, [r7, #28]
 800c5c4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	69ba      	ldr	r2, [r7, #24]
 800c5ca:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800c5cc:	bf00      	nop
 800c5ce:	3720      	adds	r7, #32
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	800045f8 	.word	0x800045f8

0800c5d8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b086      	sub	sp, #24
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	3318      	adds	r3, #24
 800c5e4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ea:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800c5f6:	e03f      	b.n	800c678 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	3b01      	subs	r3, #1
 800c600:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800c602:	68ba      	ldr	r2, [r7, #8]
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	3304      	adds	r3, #4
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4413      	add	r3, r2
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d106      	bne.n	800c620 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	3301      	adds	r3, #1
 800c616:	f003 0303 	and.w	r3, r3, #3
 800c61a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800c61c:	2300      	movs	r3, #0
 800c61e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800c620:	7bbb      	ldrb	r3, [r7, #14]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d028      	beq.n	800c678 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	68d9      	ldr	r1, [r3, #12]
 800c62a:	693a      	ldr	r2, [r7, #16]
 800c62c:	4613      	mov	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	4413      	add	r3, r2
 800c632:	00db      	lsls	r3, r3, #3
 800c634:	440b      	add	r3, r1
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	db1b      	blt.n	800c674 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800c63c:	68ba      	ldr	r2, [r7, #8]
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	3304      	adds	r3, #4
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	4413      	add	r3, r2
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	4618      	mov	r0, r3
 800c64a:	f005 f971 	bl	8011930 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	3304      	adds	r3, #4
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	4413      	add	r3, r2
 800c658:	2200      	movs	r2, #0
 800c65a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	3301      	adds	r3, #1
 800c660:	f003 0303 	and.w	r3, r3, #3
 800c664:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	697a      	ldr	r2, [r7, #20]
 800c66a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	693a      	ldr	r2, [r7, #16]
 800c670:	62da      	str	r2, [r3, #44]	; 0x2c
 800c672:	e001      	b.n	800c678 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800c674:	2300      	movs	r3, #0
 800c676:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d002      	beq.n	800c684 <HAL_ETH_ReleaseTxPacket+0xac>
 800c67e:	7bfb      	ldrb	r3, [r7, #15]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d1b9      	bne.n	800c5f8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	3718      	adds	r7, #24
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
	...

0800c690 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6a6:	2b40      	cmp	r3, #64	; 0x40
 800c6a8:	d112      	bne.n	800c6d0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6b2:	69db      	ldr	r3, [r3, #28]
 800c6b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6b8:	2b40      	cmp	r3, #64	; 0x40
 800c6ba:	d109      	bne.n	800c6d0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	4b50      	ldr	r3, [pc, #320]	; (800c808 <HAL_ETH_IRQHandler+0x178>)
 800c6c8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f004 fc88 	bl	8010fe0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6d8:	695b      	ldr	r3, [r3, #20]
 800c6da:	f003 0301 	and.w	r3, r3, #1
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d113      	bne.n	800c70a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ea:	69db      	ldr	r3, [r3, #28]
 800c6ec:	f003 0301 	and.w	r3, r3, #1
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d10a      	bne.n	800c70a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800c702:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f004 fc7b 	bl	8011000 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c712:	695b      	ldr	r3, [r3, #20]
 800c714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c71c:	d14c      	bne.n	800c7b8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c726:	69db      	ldr	r3, [r3, #28]
 800c728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c72c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c730:	d142      	bne.n	800c7b8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c738:	f043 0208 	orr.w	r2, r3, #8
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c74a:	695b      	ldr	r3, [r3, #20]
 800c74c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c754:	d11a      	bne.n	800c78c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c75e:	695a      	ldr	r2, [r3, #20]
 800c760:	4b2a      	ldr	r3, [pc, #168]	; (800c80c <HAL_ETH_IRQHandler+0x17c>)
 800c762:	4013      	ands	r3, r2
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c772:	69db      	ldr	r3, [r3, #28]
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	6812      	ldr	r2, [r2, #0]
 800c778:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800c77c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c780:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	22e0      	movs	r2, #224	; 0xe0
 800c786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c78a:	e012      	b.n	800c7b2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c794:	695a      	ldr	r2, [r3, #20]
 800c796:	f248 6380 	movw	r3, #34432	; 0x8680
 800c79a:	4013      	ands	r3, r2
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	f248 6380 	movw	r3, #34432	; 0x8680
 800c7b0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f004 fc34 	bl	8011020 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7be:	f003 0308 	and.w	r3, r3, #8
 800c7c2:	2b08      	cmp	r3, #8
 800c7c4:	d10e      	bne.n	800c7e4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7cc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 f81c 	bl	800c814 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800c7e4:	4b0a      	ldr	r3, [pc, #40]	; (800c810 <HAL_ETH_IRQHandler+0x180>)
 800c7e6:	695b      	ldr	r3, [r3, #20]
 800c7e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d006      	beq.n	800c7fe <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800c7f0:	4b07      	ldr	r3, [pc, #28]	; (800c810 <HAL_ETH_IRQHandler+0x180>)
 800c7f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c7f6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f815 	bl	800c828 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800c7fe:	bf00      	nop
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	00010040 	.word	0x00010040
 800c80c:	007e2000 	.word	0x007e2000
 800c810:	40013c00 	.word	0x40013c00

0800c814 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800c81c:	bf00      	nop
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800c830:	bf00      	nop
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
 800c848:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	691b      	ldr	r3, [r3, #16]
 800c850:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	f003 031c 	and.w	r3, r3, #28
 800c858:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	02db      	lsls	r3, r3, #11
 800c85e:	b29b      	uxth	r3, r3
 800c860:	697a      	ldr	r2, [r7, #20]
 800c862:	4313      	orrs	r3, r2
 800c864:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	019b      	lsls	r3, r3, #6
 800c86a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800c86e:	697a      	ldr	r2, [r7, #20]
 800c870:	4313      	orrs	r3, r2
 800c872:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	f023 0302 	bic.w	r3, r3, #2
 800c87a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	f043 0301 	orr.w	r3, r3, #1
 800c882:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800c88c:	f7fe fafc 	bl	800ae88 <HAL_GetTick>
 800c890:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c892:	e00d      	b.n	800c8b0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800c894:	f7fe faf8 	bl	800ae88 <HAL_GetTick>
 800c898:	4602      	mov	r2, r0
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	1ad3      	subs	r3, r2, r3
 800c89e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8a2:	d301      	bcc.n	800c8a8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e010      	b.n	800c8ca <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	691b      	ldr	r3, [r3, #16]
 800c8ae:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	f003 0301 	and.w	r3, r3, #1
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1ec      	bne.n	800c894 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	695b      	ldr	r3, [r3, #20]
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3718      	adds	r7, #24
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b086      	sub	sp, #24
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	60f8      	str	r0, [r7, #12]
 800c8da:	60b9      	str	r1, [r7, #8]
 800c8dc:	607a      	str	r2, [r7, #4]
 800c8de:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	f003 031c 	and.w	r3, r3, #28
 800c8ee:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	02db      	lsls	r3, r3, #11
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	697a      	ldr	r2, [r7, #20]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	019b      	lsls	r3, r3, #6
 800c900:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800c904:	697a      	ldr	r2, [r7, #20]
 800c906:	4313      	orrs	r3, r2
 800c908:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	f043 0302 	orr.w	r3, r3, #2
 800c910:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	f043 0301 	orr.w	r3, r3, #1
 800c918:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	697a      	ldr	r2, [r7, #20]
 800c92a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c92c:	f7fe faac 	bl	800ae88 <HAL_GetTick>
 800c930:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c932:	e00d      	b.n	800c950 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800c934:	f7fe faa8 	bl	800ae88 <HAL_GetTick>
 800c938:	4602      	mov	r2, r0
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c942:	d301      	bcc.n	800c948 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800c944:	2301      	movs	r3, #1
 800c946:	e009      	b.n	800c95c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	691b      	ldr	r3, [r3, #16]
 800c94e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	f003 0301 	and.w	r3, r3, #1
 800c956:	2b00      	cmp	r3, #0
 800c958:	d1ec      	bne.n	800c934 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3718      	adds	r7, #24
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d101      	bne.n	800c978 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	e0d9      	b.n	800cb2c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 0310 	and.w	r3, r3, #16
 800c982:	2b00      	cmp	r3, #0
 800c984:	bf14      	ite	ne
 800c986:	2301      	movne	r3, #1
 800c988:	2300      	moveq	r3, #0
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	461a      	mov	r2, r3
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	bf0c      	ite	eq
 800c9b0:	2301      	moveq	r3, #1
 800c9b2:	2300      	movne	r3, #0
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	bf14      	ite	ne
 800c9cc:	2301      	movne	r3, #1
 800c9ce:	2300      	moveq	r3, #0
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	bf0c      	ite	eq
 800c9e6:	2301      	moveq	r3, #1
 800c9e8:	2300      	movne	r3, #0
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	bf14      	ite	ne
 800ca00:	2301      	movne	r3, #1
 800ca02:	2300      	moveq	r3, #0
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	461a      	mov	r2, r3
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	bf0c      	ite	eq
 800ca36:	2301      	moveq	r3, #1
 800ca38:	2300      	movne	r3, #0
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	bf0c      	ite	eq
 800ca50:	2301      	moveq	r3, #1
 800ca52:	2300      	movne	r3, #0
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	461a      	mov	r2, r3
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	bf14      	ite	ne
 800ca6a:	2301      	movne	r3, #1
 800ca6c:	2300      	moveq	r3, #0
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	461a      	mov	r2, r3
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	bf14      	ite	ne
 800ca92:	2301      	movne	r3, #1
 800ca94:	2300      	moveq	r3, #0
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	461a      	mov	r2, r3
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	699b      	ldr	r3, [r3, #24]
 800caa4:	f003 0302 	and.w	r3, r3, #2
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	bf14      	ite	ne
 800caac:	2301      	movne	r3, #1
 800caae:	2300      	moveq	r3, #0
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	461a      	mov	r2, r3
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	699b      	ldr	r3, [r3, #24]
 800cac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	bf0c      	ite	eq
 800cac8:	2301      	moveq	r3, #1
 800caca:	2300      	movne	r3, #0
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	461a      	mov	r2, r3
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	699b      	ldr	r3, [r3, #24]
 800cadc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	699b      	ldr	r3, [r3, #24]
 800caea:	0c1b      	lsrs	r3, r3, #16
 800caec:	b29a      	uxth	r2, r3
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	699b      	ldr	r3, [r3, #24]
 800caf8:	f003 0304 	and.w	r3, r3, #4
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	bf14      	ite	ne
 800cb00:	2301      	movne	r3, #1
 800cb02:	2300      	moveq	r3, #0
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	461a      	mov	r2, r3
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	699b      	ldr	r3, [r3, #24]
 800cb14:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	bf14      	ite	ne
 800cb1c:	2301      	movne	r3, #1
 800cb1e:	2300      	moveq	r3, #0
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d101      	bne.n	800cb4c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e00b      	b.n	800cb64 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb52:	2b10      	cmp	r3, #16
 800cb54:	d105      	bne.n	800cb62 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800cb56:	6839      	ldr	r1, [r7, #0]
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 f88f 	bl	800cc7c <ETH_SetMACConfig>

    return HAL_OK;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	e000      	b.n	800cb64 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800cb62:	2301      	movs	r3, #1
  }
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	691b      	ldr	r3, [r3, #16]
 800cb7a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f023 031c 	bic.w	r3, r3, #28
 800cb82:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800cb84:	f001 fadc 	bl	800e140 <HAL_RCC_GetHCLKFreq>
 800cb88:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	4a1d      	ldr	r2, [pc, #116]	; (800cc04 <HAL_ETH_SetMDIOClockRange+0x98>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d908      	bls.n	800cba4 <HAL_ETH_SetMDIOClockRange+0x38>
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	4a1c      	ldr	r2, [pc, #112]	; (800cc08 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d804      	bhi.n	800cba4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f043 0308 	orr.w	r3, r3, #8
 800cba0:	60fb      	str	r3, [r7, #12]
 800cba2:	e027      	b.n	800cbf4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	4a18      	ldr	r2, [pc, #96]	; (800cc08 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d908      	bls.n	800cbbe <HAL_ETH_SetMDIOClockRange+0x52>
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	4a17      	ldr	r2, [pc, #92]	; (800cc0c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d204      	bcs.n	800cbbe <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f043 030c 	orr.w	r3, r3, #12
 800cbba:	60fb      	str	r3, [r7, #12]
 800cbbc:	e01a      	b.n	800cbf4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	4a12      	ldr	r2, [pc, #72]	; (800cc0c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d303      	bcc.n	800cbce <HAL_ETH_SetMDIOClockRange+0x62>
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	4a11      	ldr	r2, [pc, #68]	; (800cc10 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d911      	bls.n	800cbf2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	4a0f      	ldr	r2, [pc, #60]	; (800cc10 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d908      	bls.n	800cbe8 <HAL_ETH_SetMDIOClockRange+0x7c>
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	4a0e      	ldr	r2, [pc, #56]	; (800cc14 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d804      	bhi.n	800cbe8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f043 0304 	orr.w	r3, r3, #4
 800cbe4:	60fb      	str	r3, [r7, #12]
 800cbe6:	e005      	b.n	800cbf4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f043 0310 	orr.w	r3, r3, #16
 800cbee:	60fb      	str	r3, [r7, #12]
 800cbf0:	e000      	b.n	800cbf4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800cbf2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	611a      	str	r2, [r3, #16]
}
 800cbfc:	bf00      	nop
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	01312cff 	.word	0x01312cff
 800cc08:	02160ebf 	.word	0x02160ebf
 800cc0c:	03938700 	.word	0x03938700
 800cc10:	05f5e0ff 	.word	0x05f5e0ff
 800cc14:	08f0d17f 	.word	0x08f0d17f

0800cc18 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	370c      	adds	r7, #12
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr

0800cc32 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b084      	sub	sp, #16
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc46:	699b      	ldr	r3, [r3, #24]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	6812      	ldr	r2, [r2, #0]
 800cc4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cc54:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc5e:	699b      	ldr	r3, [r3, #24]
 800cc60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800cc62:	2001      	movs	r0, #1
 800cc64:	f7fe f91c 	bl	800aea0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cc72:	6193      	str	r3, [r2, #24]
}
 800cc74:	bf00      	nop
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	4b51      	ldr	r3, [pc, #324]	; (800cdd8 <ETH_SetMACConfig+0x15c>)
 800cc92:	4013      	ands	r3, r2
 800cc94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	7c1b      	ldrb	r3, [r3, #16]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d102      	bne.n	800cca4 <ETH_SetMACConfig+0x28>
 800cc9e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800cca2:	e000      	b.n	800cca6 <ETH_SetMACConfig+0x2a>
 800cca4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	7c5b      	ldrb	r3, [r3, #17]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d102      	bne.n	800ccb4 <ETH_SetMACConfig+0x38>
 800ccae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ccb2:	e000      	b.n	800ccb6 <ETH_SetMACConfig+0x3a>
 800ccb4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800ccb6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800ccbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	7fdb      	ldrb	r3, [r3, #31]
 800ccc2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800ccc4:	431a      	orrs	r2, r3
                        macconf->Speed |
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800ccca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800cccc:	683a      	ldr	r2, [r7, #0]
 800ccce:	7f92      	ldrb	r2, [r2, #30]
 800ccd0:	2a00      	cmp	r2, #0
 800ccd2:	d102      	bne.n	800ccda <ETH_SetMACConfig+0x5e>
 800ccd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ccd8:	e000      	b.n	800ccdc <ETH_SetMACConfig+0x60>
 800ccda:	2200      	movs	r2, #0
                        macconf->Speed |
 800ccdc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	7f1b      	ldrb	r3, [r3, #28]
 800cce2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800cce4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800ccea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	791b      	ldrb	r3, [r3, #4]
 800ccf0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800ccf2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ccfa:	2a00      	cmp	r2, #0
 800ccfc:	d102      	bne.n	800cd04 <ETH_SetMACConfig+0x88>
 800ccfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd02:	e000      	b.n	800cd06 <ETH_SetMACConfig+0x8a>
 800cd04:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800cd06:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	7bdb      	ldrb	r3, [r3, #15]
 800cd0c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800cd0e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800cd14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd1c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	68fa      	ldr	r2, [r7, #12]
 800cd22:	4313      	orrs	r3, r2
 800cd24:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	68fa      	ldr	r2, [r7, #12]
 800cd2c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800cd36:	2001      	movs	r0, #1
 800cd38:	f7fe f8b2 	bl	800aea0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	699b      	ldr	r3, [r3, #24]
 800cd4a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	f64f 7341 	movw	r3, #65345	; 0xff41
 800cd52:	4013      	ands	r3, r2
 800cd54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd5a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800cd5c:	683a      	ldr	r2, [r7, #0]
 800cd5e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800cd62:	2a00      	cmp	r2, #0
 800cd64:	d101      	bne.n	800cd6a <ETH_SetMACConfig+0xee>
 800cd66:	2280      	movs	r2, #128	; 0x80
 800cd68:	e000      	b.n	800cd6c <ETH_SetMACConfig+0xf0>
 800cd6a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800cd6c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800cd72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800cd74:	683a      	ldr	r2, [r7, #0]
 800cd76:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800cd7a:	2a01      	cmp	r2, #1
 800cd7c:	d101      	bne.n	800cd82 <ETH_SetMACConfig+0x106>
 800cd7e:	2208      	movs	r2, #8
 800cd80:	e000      	b.n	800cd84 <ETH_SetMACConfig+0x108>
 800cd82:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800cd84:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800cd86:	683a      	ldr	r2, [r7, #0]
 800cd88:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800cd8c:	2a01      	cmp	r2, #1
 800cd8e:	d101      	bne.n	800cd94 <ETH_SetMACConfig+0x118>
 800cd90:	2204      	movs	r2, #4
 800cd92:	e000      	b.n	800cd96 <ETH_SetMACConfig+0x11a>
 800cd94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800cd96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800cd98:	683a      	ldr	r2, [r7, #0]
 800cd9a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800cd9e:	2a01      	cmp	r2, #1
 800cda0:	d101      	bne.n	800cda6 <ETH_SetMACConfig+0x12a>
 800cda2:	2202      	movs	r2, #2
 800cda4:	e000      	b.n	800cda8 <ETH_SetMACConfig+0x12c>
 800cda6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	4313      	orrs	r3, r2
 800cdae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	699b      	ldr	r3, [r3, #24]
 800cdbe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800cdc0:	2001      	movs	r0, #1
 800cdc2:	f7fe f86d 	bl	800aea0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	68fa      	ldr	r2, [r7, #12]
 800cdcc:	619a      	str	r2, [r3, #24]
}
 800cdce:	bf00      	nop
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	ff20810f 	.word	0xff20810f

0800cddc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdee:	699b      	ldr	r3, [r3, #24]
 800cdf0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800cdf2:	68fa      	ldr	r2, [r7, #12]
 800cdf4:	4b3d      	ldr	r3, [pc, #244]	; (800ceec <ETH_SetDMAConfig+0x110>)
 800cdf6:	4013      	ands	r3, r2
 800cdf8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	7b1b      	ldrb	r3, [r3, #12]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d102      	bne.n	800ce08 <ETH_SetDMAConfig+0x2c>
 800ce02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ce06:	e000      	b.n	800ce0a <ETH_SetDMAConfig+0x2e>
 800ce08:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	7b5b      	ldrb	r3, [r3, #13]
 800ce0e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800ce10:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800ce12:	683a      	ldr	r2, [r7, #0]
 800ce14:	7f52      	ldrb	r2, [r2, #29]
 800ce16:	2a00      	cmp	r2, #0
 800ce18:	d102      	bne.n	800ce20 <ETH_SetDMAConfig+0x44>
 800ce1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ce1e:	e000      	b.n	800ce22 <ETH_SetDMAConfig+0x46>
 800ce20:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800ce22:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	7b9b      	ldrb	r3, [r3, #14]
 800ce28:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800ce2a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800ce30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	7f1b      	ldrb	r3, [r3, #28]
 800ce36:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800ce38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	7f9b      	ldrb	r3, [r3, #30]
 800ce3e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800ce40:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800ce46:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ce4e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800ce50:	4313      	orrs	r3, r2
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	4313      	orrs	r3, r2
 800ce56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce60:	461a      	mov	r2, r3
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce6e:	699b      	ldr	r3, [r3, #24]
 800ce70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ce72:	2001      	movs	r0, #1
 800ce74:	f7fe f814 	bl	800aea0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce80:	461a      	mov	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	791b      	ldrb	r3, [r3, #4]
 800ce8a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800ce90:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800ce96:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800ce9c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cea4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800cea6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800ceae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800ceb4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	6812      	ldr	r2, [r2, #0]
 800ceba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cebe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cec2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ced0:	2001      	movs	r0, #1
 800ced2:	f7fd ffe5 	bl	800aea0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cede:	461a      	mov	r2, r3
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	6013      	str	r3, [r2, #0]
}
 800cee4:	bf00      	nop
 800cee6:	3710      	adds	r7, #16
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	f8de3f23 	.word	0xf8de3f23

0800cef0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b0a6      	sub	sp, #152	; 0x98
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800cef8:	2301      	movs	r3, #1
 800cefa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800cefe:	2301      	movs	r3, #1
 800cf00:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800cf04:	2300      	movs	r3, #0
 800cf06:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800cf14:	2300      	movs	r3, #0
 800cf16:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800cf20:	2300      	movs	r3, #0
 800cf22:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800cf26:	2300      	movs	r3, #0
 800cf28:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800cf30:	2300      	movs	r3, #0
 800cf32:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800cf36:	2300      	movs	r3, #0
 800cf38:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800cf40:	2300      	movs	r3, #0
 800cf42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800cf46:	2300      	movs	r3, #0
 800cf48:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800cf52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cf56:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800cf58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800cf64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cf68:	4619      	mov	r1, r3
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f7ff fe86 	bl	800cc7c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800cf70:	2301      	movs	r3, #1
 800cf72:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800cf74:	2301      	movs	r3, #1
 800cf76:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800cf82:	2300      	movs	r3, #0
 800cf84:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800cf86:	2300      	movs	r3, #0
 800cf88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800cf92:	2300      	movs	r3, #0
 800cf94:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800cf96:	2301      	movs	r3, #1
 800cf98:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800cfa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cfa4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800cfa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cfaa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800cfac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfb0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800cfc0:	f107 0308 	add.w	r3, r7, #8
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f7ff ff08 	bl	800cddc <ETH_SetDMAConfig>
}
 800cfcc:	bf00      	nop
 800cfce:	3798      	adds	r7, #152	; 0x98
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b087      	sub	sp, #28
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	3305      	adds	r3, #5
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	021b      	lsls	r3, r3, #8
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	3204      	adds	r2, #4
 800cfec:	7812      	ldrb	r2, [r2, #0]
 800cfee:	4313      	orrs	r3, r2
 800cff0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800cff2:	68ba      	ldr	r2, [r7, #8]
 800cff4:	4b11      	ldr	r3, [pc, #68]	; (800d03c <ETH_MACAddressConfig+0x68>)
 800cff6:	4413      	add	r3, r2
 800cff8:	461a      	mov	r2, r3
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	3303      	adds	r3, #3
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	061a      	lsls	r2, r3, #24
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	3302      	adds	r3, #2
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	041b      	lsls	r3, r3, #16
 800d00e:	431a      	orrs	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	3301      	adds	r3, #1
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	021b      	lsls	r3, r3, #8
 800d018:	4313      	orrs	r3, r2
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	7812      	ldrb	r2, [r2, #0]
 800d01e:	4313      	orrs	r3, r2
 800d020:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800d022:	68ba      	ldr	r2, [r7, #8]
 800d024:	4b06      	ldr	r3, [pc, #24]	; (800d040 <ETH_MACAddressConfig+0x6c>)
 800d026:	4413      	add	r3, r2
 800d028:	461a      	mov	r2, r3
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	6013      	str	r3, [r2, #0]
}
 800d02e:	bf00      	nop
 800d030:	371c      	adds	r7, #28
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	40028040 	.word	0x40028040
 800d040:	40028044 	.word	0x40028044

0800d044 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800d044:	b480      	push	{r7}
 800d046:	b085      	sub	sp, #20
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800d04c:	2300      	movs	r3, #0
 800d04e:	60fb      	str	r3, [r7, #12]
 800d050:	e03e      	b.n	800d0d0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	68d9      	ldr	r1, [r3, #12]
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	4613      	mov	r3, r2
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	4413      	add	r3, r2
 800d05e:	00db      	lsls	r3, r3, #3
 800d060:	440b      	add	r3, r1
 800d062:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	2200      	movs	r2, #0
 800d068:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	2200      	movs	r2, #0
 800d06e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	2200      	movs	r2, #0
 800d074:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	2200      	movs	r2, #0
 800d07a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800d07c:	68b9      	ldr	r1, [r7, #8]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	3206      	adds	r2, #6
 800d084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2b02      	cmp	r3, #2
 800d098:	d80c      	bhi.n	800d0b4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	68d9      	ldr	r1, [r3, #12]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	1c5a      	adds	r2, r3, #1
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	4413      	add	r3, r2
 800d0a8:	00db      	lsls	r3, r3, #3
 800d0aa:	440b      	add	r3, r1
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	60da      	str	r2, [r3, #12]
 800d0b2:	e004      	b.n	800d0be <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	60fb      	str	r3, [r7, #12]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2b03      	cmp	r3, #3
 800d0d4:	d9bd      	bls.n	800d052 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	68da      	ldr	r2, [r3, #12]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0e8:	611a      	str	r2, [r3, #16]
}
 800d0ea:	bf00      	nop
 800d0ec:	3714      	adds	r7, #20
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800d0f6:	b480      	push	{r7}
 800d0f8:	b085      	sub	sp, #20
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800d0fe:	2300      	movs	r3, #0
 800d100:	60fb      	str	r3, [r7, #12]
 800d102:	e046      	b.n	800d192 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6919      	ldr	r1, [r3, #16]
 800d108:	68fa      	ldr	r2, [r7, #12]
 800d10a:	4613      	mov	r3, r2
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	4413      	add	r3, r2
 800d110:	00db      	lsls	r3, r3, #3
 800d112:	440b      	add	r3, r1
 800d114:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	2200      	movs	r2, #0
 800d11a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	2200      	movs	r2, #0
 800d120:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	2200      	movs	r2, #0
 800d126:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	2200      	movs	r2, #0
 800d12c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	2200      	movs	r2, #0
 800d132:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	2200      	movs	r2, #0
 800d138:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d140:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800d148:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800d156:	68b9      	ldr	r1, [r7, #8]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	3212      	adds	r2, #18
 800d15e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2b02      	cmp	r3, #2
 800d166:	d80c      	bhi.n	800d182 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6919      	ldr	r1, [r3, #16]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	1c5a      	adds	r2, r3, #1
 800d170:	4613      	mov	r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	4413      	add	r3, r2
 800d176:	00db      	lsls	r3, r3, #3
 800d178:	440b      	add	r3, r1
 800d17a:	461a      	mov	r2, r3
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	60da      	str	r2, [r3, #12]
 800d180:	e004      	b.n	800d18c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	461a      	mov	r2, r3
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	3301      	adds	r3, #1
 800d190:	60fb      	str	r3, [r7, #12]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2b03      	cmp	r3, #3
 800d196:	d9b5      	bls.n	800d104 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	691a      	ldr	r2, [r3, #16]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1c2:	60da      	str	r2, [r3, #12]
}
 800d1c4:	bf00      	nop
 800d1c6:	3714      	adds	r7, #20
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b08d      	sub	sp, #52	; 0x34
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	3318      	adds	r3, #24
 800d1e0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1fa:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800d202:	2300      	movs	r3, #0
 800d204:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800d206:	6a3b      	ldr	r3, [r7, #32]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d20e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d212:	d007      	beq.n	800d224 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800d214:	697a      	ldr	r2, [r7, #20]
 800d216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d218:	3304      	adds	r3, #4
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	4413      	add	r3, r2
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d001      	beq.n	800d228 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800d224:	2302      	movs	r3, #2
 800d226:	e0ff      	b.n	800d428 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800d228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22a:	3301      	adds	r3, #1
 800d22c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	461a      	mov	r2, r3
 800d234:	6a3b      	ldr	r3, [r7, #32]
 800d236:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800d238:	6a3b      	ldr	r3, [r7, #32]
 800d23a:	685a      	ldr	r2, [r3, #4]
 800d23c:	4b7d      	ldr	r3, [pc, #500]	; (800d434 <ETH_Prepare_Tx_Descriptors+0x264>)
 800d23e:	4013      	ands	r3, r2
 800d240:	69fa      	ldr	r2, [r7, #28]
 800d242:	6852      	ldr	r2, [r2, #4]
 800d244:	431a      	orrs	r2, r3
 800d246:	6a3b      	ldr	r3, [r7, #32]
 800d248:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f003 0301 	and.w	r3, r3, #1
 800d252:	2b00      	cmp	r3, #0
 800d254:	d008      	beq.n	800d268 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800d256:	6a3b      	ldr	r3, [r7, #32]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	695b      	ldr	r3, [r3, #20]
 800d262:	431a      	orrs	r2, r3
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f003 0320 	and.w	r3, r3, #32
 800d270:	2b00      	cmp	r3, #0
 800d272:	d008      	beq.n	800d286 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800d274:	6a3b      	ldr	r3, [r7, #32]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	691b      	ldr	r3, [r3, #16]
 800d280:	431a      	orrs	r2, r3
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f003 0304 	and.w	r3, r3, #4
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d005      	beq.n	800d29e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d29a:	6a3b      	ldr	r3, [r7, #32]
 800d29c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800d29e:	6a3b      	ldr	r3, [r7, #32]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d2a6:	6a3b      	ldr	r3, [r7, #32]
 800d2a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800d2aa:	f3bf 8f5f 	dmb	sy
}
 800d2ae:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800d2b0:	6a3b      	ldr	r3, [r7, #32]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d2b8:	6a3b      	ldr	r3, [r7, #32]
 800d2ba:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800d2bc:	e082      	b.n	800d3c4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800d2be:	6a3b      	ldr	r3, [r7, #32]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d2c6:	6a3b      	ldr	r3, [r7, #32]
 800d2c8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d006      	beq.n	800d2de <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800d2d0:	6a3b      	ldr	r3, [r7, #32]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d2d8:	6a3b      	ldr	r3, [r7, #32]
 800d2da:	601a      	str	r2, [r3, #0]
 800d2dc:	e005      	b.n	800d2ea <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800d2de:	6a3b      	ldr	r3, [r7, #32]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d2e6:	6a3b      	ldr	r3, [r7, #32]
 800d2e8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800d2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f2:	2b03      	cmp	r3, #3
 800d2f4:	d902      	bls.n	800d2fc <ETH_Prepare_Tx_Descriptors+0x12c>
 800d2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f8:	3b04      	subs	r3, #4
 800d2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d304:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800d306:	6a3b      	ldr	r3, [r7, #32]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800d312:	6a3b      	ldr	r3, [r7, #32]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d31a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d31e:	d007      	beq.n	800d330 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800d320:	697a      	ldr	r2, [r7, #20]
 800d322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d324:	3304      	adds	r3, #4
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	4413      	add	r3, r2
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d029      	beq.n	800d384 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d33c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800d33e:	2300      	movs	r3, #0
 800d340:	62bb      	str	r3, [r7, #40]	; 0x28
 800d342:	e019      	b.n	800d378 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800d344:	f3bf 8f5f 	dmb	sy
}
 800d348:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800d34a:	6a3b      	ldr	r3, [r7, #32]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d352:	6a3b      	ldr	r3, [r7, #32]
 800d354:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800d356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d358:	3301      	adds	r3, #1
 800d35a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35e:	2b03      	cmp	r3, #3
 800d360:	d902      	bls.n	800d368 <ETH_Prepare_Tx_Descriptors+0x198>
 800d362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d364:	3b04      	subs	r3, #4
 800d366:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d370:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800d372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d374:	3301      	adds	r3, #1
 800d376:	62bb      	str	r3, [r7, #40]	; 0x28
 800d378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d3e1      	bcc.n	800d344 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800d380:	2302      	movs	r3, #2
 800d382:	e051      	b.n	800d428 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800d384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d386:	3301      	adds	r3, #1
 800d388:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	461a      	mov	r2, r3
 800d396:	6a3b      	ldr	r3, [r7, #32]
 800d398:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800d39a:	6a3b      	ldr	r3, [r7, #32]
 800d39c:	685a      	ldr	r2, [r3, #4]
 800d39e:	4b25      	ldr	r3, [pc, #148]	; (800d434 <ETH_Prepare_Tx_Descriptors+0x264>)
 800d3a0:	4013      	ands	r3, r2
 800d3a2:	69fa      	ldr	r2, [r7, #28]
 800d3a4:	6852      	ldr	r2, [r2, #4]
 800d3a6:	431a      	orrs	r2, r3
 800d3a8:	6a3b      	ldr	r3, [r7, #32]
 800d3aa:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800d3b2:	f3bf 8f5f 	dmb	sy
}
 800d3b6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800d3b8:	6a3b      	ldr	r3, [r7, #32]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d3c0:	6a3b      	ldr	r3, [r7, #32]
 800d3c2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	f47f af78 	bne.w	800d2be <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d006      	beq.n	800d3e2 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800d3d4:	6a3b      	ldr	r3, [r7, #32]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d3dc:	6a3b      	ldr	r3, [r7, #32]
 800d3de:	601a      	str	r2, [r3, #0]
 800d3e0:	e005      	b.n	800d3ee <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800d3e2:	6a3b      	ldr	r3, [r7, #32]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d3ea:	6a3b      	ldr	r3, [r7, #32]
 800d3ec:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800d3ee:	6a3b      	ldr	r3, [r7, #32]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d3f6:	6a3b      	ldr	r3, [r7, #32]
 800d3f8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3fe:	6979      	ldr	r1, [r7, #20]
 800d400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d402:	3304      	adds	r3, #4
 800d404:	009b      	lsls	r3, r3, #2
 800d406:	440b      	add	r3, r1
 800d408:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d40e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d410:	b672      	cpsid	i
}
 800d412:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	4413      	add	r3, r2
 800d41c:	1c5a      	adds	r2, r3, #1
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800d422:	b662      	cpsie	i
}
 800d424:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800d426:	2300      	movs	r3, #0
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3734      	adds	r7, #52	; 0x34
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr
 800d434:	ffffe000 	.word	0xffffe000

0800d438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d438:	b480      	push	{r7}
 800d43a:	b089      	sub	sp, #36	; 0x24
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800d442:	2300      	movs	r3, #0
 800d444:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800d446:	2300      	movs	r3, #0
 800d448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800d44a:	2300      	movs	r3, #0
 800d44c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800d44e:	2300      	movs	r3, #0
 800d450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800d452:	2300      	movs	r3, #0
 800d454:	61fb      	str	r3, [r7, #28]
 800d456:	e175      	b.n	800d744 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800d458:	2201      	movs	r2, #1
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	fa02 f303 	lsl.w	r3, r2, r3
 800d460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	697a      	ldr	r2, [r7, #20]
 800d468:	4013      	ands	r3, r2
 800d46a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d46c:	693a      	ldr	r2, [r7, #16]
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	429a      	cmp	r2, r3
 800d472:	f040 8164 	bne.w	800d73e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	f003 0303 	and.w	r3, r3, #3
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d005      	beq.n	800d48e <HAL_GPIO_Init+0x56>
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	f003 0303 	and.w	r3, r3, #3
 800d48a:	2b02      	cmp	r3, #2
 800d48c:	d130      	bne.n	800d4f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	005b      	lsls	r3, r3, #1
 800d498:	2203      	movs	r2, #3
 800d49a:	fa02 f303 	lsl.w	r3, r2, r3
 800d49e:	43db      	mvns	r3, r3
 800d4a0:	69ba      	ldr	r2, [r7, #24]
 800d4a2:	4013      	ands	r3, r2
 800d4a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	68da      	ldr	r2, [r3, #12]
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	005b      	lsls	r3, r3, #1
 800d4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d4b2:	69ba      	ldr	r2, [r7, #24]
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	69ba      	ldr	r2, [r7, #24]
 800d4bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	69fb      	ldr	r3, [r7, #28]
 800d4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4cc:	43db      	mvns	r3, r3
 800d4ce:	69ba      	ldr	r2, [r7, #24]
 800d4d0:	4013      	ands	r3, r2
 800d4d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	091b      	lsrs	r3, r3, #4
 800d4da:	f003 0201 	and.w	r2, r3, #1
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4e4:	69ba      	ldr	r2, [r7, #24]
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	69ba      	ldr	r2, [r7, #24]
 800d4ee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	f003 0303 	and.w	r3, r3, #3
 800d4f8:	2b03      	cmp	r3, #3
 800d4fa:	d017      	beq.n	800d52c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	005b      	lsls	r3, r3, #1
 800d506:	2203      	movs	r2, #3
 800d508:	fa02 f303 	lsl.w	r3, r2, r3
 800d50c:	43db      	mvns	r3, r3
 800d50e:	69ba      	ldr	r2, [r7, #24]
 800d510:	4013      	ands	r3, r2
 800d512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	689a      	ldr	r2, [r3, #8]
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	005b      	lsls	r3, r3, #1
 800d51c:	fa02 f303 	lsl.w	r3, r2, r3
 800d520:	69ba      	ldr	r2, [r7, #24]
 800d522:	4313      	orrs	r3, r2
 800d524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	69ba      	ldr	r2, [r7, #24]
 800d52a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	f003 0303 	and.w	r3, r3, #3
 800d534:	2b02      	cmp	r3, #2
 800d536:	d123      	bne.n	800d580 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	08da      	lsrs	r2, r3, #3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	3208      	adds	r2, #8
 800d540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	f003 0307 	and.w	r3, r3, #7
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	220f      	movs	r2, #15
 800d550:	fa02 f303 	lsl.w	r3, r2, r3
 800d554:	43db      	mvns	r3, r3
 800d556:	69ba      	ldr	r2, [r7, #24]
 800d558:	4013      	ands	r3, r2
 800d55a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	691a      	ldr	r2, [r3, #16]
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	f003 0307 	and.w	r3, r3, #7
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	fa02 f303 	lsl.w	r3, r2, r3
 800d56c:	69ba      	ldr	r2, [r7, #24]
 800d56e:	4313      	orrs	r3, r2
 800d570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	08da      	lsrs	r2, r3, #3
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	3208      	adds	r2, #8
 800d57a:	69b9      	ldr	r1, [r7, #24]
 800d57c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	2203      	movs	r2, #3
 800d58c:	fa02 f303 	lsl.w	r3, r2, r3
 800d590:	43db      	mvns	r3, r3
 800d592:	69ba      	ldr	r2, [r7, #24]
 800d594:	4013      	ands	r3, r2
 800d596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	f003 0203 	and.w	r2, r3, #3
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	005b      	lsls	r3, r3, #1
 800d5a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d5a8:	69ba      	ldr	r2, [r7, #24]
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	69ba      	ldr	r2, [r7, #24]
 800d5b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f000 80be 	beq.w	800d73e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d5c2:	4b66      	ldr	r3, [pc, #408]	; (800d75c <HAL_GPIO_Init+0x324>)
 800d5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5c6:	4a65      	ldr	r2, [pc, #404]	; (800d75c <HAL_GPIO_Init+0x324>)
 800d5c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d5cc:	6453      	str	r3, [r2, #68]	; 0x44
 800d5ce:	4b63      	ldr	r3, [pc, #396]	; (800d75c <HAL_GPIO_Init+0x324>)
 800d5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5d6:	60fb      	str	r3, [r7, #12]
 800d5d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800d5da:	4a61      	ldr	r2, [pc, #388]	; (800d760 <HAL_GPIO_Init+0x328>)
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	089b      	lsrs	r3, r3, #2
 800d5e0:	3302      	adds	r3, #2
 800d5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	f003 0303 	and.w	r3, r3, #3
 800d5ee:	009b      	lsls	r3, r3, #2
 800d5f0:	220f      	movs	r2, #15
 800d5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d5f6:	43db      	mvns	r3, r3
 800d5f8:	69ba      	ldr	r2, [r7, #24]
 800d5fa:	4013      	ands	r3, r2
 800d5fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	4a58      	ldr	r2, [pc, #352]	; (800d764 <HAL_GPIO_Init+0x32c>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d037      	beq.n	800d676 <HAL_GPIO_Init+0x23e>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4a57      	ldr	r2, [pc, #348]	; (800d768 <HAL_GPIO_Init+0x330>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d031      	beq.n	800d672 <HAL_GPIO_Init+0x23a>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	4a56      	ldr	r2, [pc, #344]	; (800d76c <HAL_GPIO_Init+0x334>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d02b      	beq.n	800d66e <HAL_GPIO_Init+0x236>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	4a55      	ldr	r2, [pc, #340]	; (800d770 <HAL_GPIO_Init+0x338>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d025      	beq.n	800d66a <HAL_GPIO_Init+0x232>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4a54      	ldr	r2, [pc, #336]	; (800d774 <HAL_GPIO_Init+0x33c>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d01f      	beq.n	800d666 <HAL_GPIO_Init+0x22e>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4a53      	ldr	r2, [pc, #332]	; (800d778 <HAL_GPIO_Init+0x340>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d019      	beq.n	800d662 <HAL_GPIO_Init+0x22a>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4a52      	ldr	r2, [pc, #328]	; (800d77c <HAL_GPIO_Init+0x344>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d013      	beq.n	800d65e <HAL_GPIO_Init+0x226>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4a51      	ldr	r2, [pc, #324]	; (800d780 <HAL_GPIO_Init+0x348>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d00d      	beq.n	800d65a <HAL_GPIO_Init+0x222>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a50      	ldr	r2, [pc, #320]	; (800d784 <HAL_GPIO_Init+0x34c>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d007      	beq.n	800d656 <HAL_GPIO_Init+0x21e>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a4f      	ldr	r2, [pc, #316]	; (800d788 <HAL_GPIO_Init+0x350>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d101      	bne.n	800d652 <HAL_GPIO_Init+0x21a>
 800d64e:	2309      	movs	r3, #9
 800d650:	e012      	b.n	800d678 <HAL_GPIO_Init+0x240>
 800d652:	230a      	movs	r3, #10
 800d654:	e010      	b.n	800d678 <HAL_GPIO_Init+0x240>
 800d656:	2308      	movs	r3, #8
 800d658:	e00e      	b.n	800d678 <HAL_GPIO_Init+0x240>
 800d65a:	2307      	movs	r3, #7
 800d65c:	e00c      	b.n	800d678 <HAL_GPIO_Init+0x240>
 800d65e:	2306      	movs	r3, #6
 800d660:	e00a      	b.n	800d678 <HAL_GPIO_Init+0x240>
 800d662:	2305      	movs	r3, #5
 800d664:	e008      	b.n	800d678 <HAL_GPIO_Init+0x240>
 800d666:	2304      	movs	r3, #4
 800d668:	e006      	b.n	800d678 <HAL_GPIO_Init+0x240>
 800d66a:	2303      	movs	r3, #3
 800d66c:	e004      	b.n	800d678 <HAL_GPIO_Init+0x240>
 800d66e:	2302      	movs	r3, #2
 800d670:	e002      	b.n	800d678 <HAL_GPIO_Init+0x240>
 800d672:	2301      	movs	r3, #1
 800d674:	e000      	b.n	800d678 <HAL_GPIO_Init+0x240>
 800d676:	2300      	movs	r3, #0
 800d678:	69fa      	ldr	r2, [r7, #28]
 800d67a:	f002 0203 	and.w	r2, r2, #3
 800d67e:	0092      	lsls	r2, r2, #2
 800d680:	4093      	lsls	r3, r2
 800d682:	69ba      	ldr	r2, [r7, #24]
 800d684:	4313      	orrs	r3, r2
 800d686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800d688:	4935      	ldr	r1, [pc, #212]	; (800d760 <HAL_GPIO_Init+0x328>)
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	089b      	lsrs	r3, r3, #2
 800d68e:	3302      	adds	r3, #2
 800d690:	69ba      	ldr	r2, [r7, #24]
 800d692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d696:	4b3d      	ldr	r3, [pc, #244]	; (800d78c <HAL_GPIO_Init+0x354>)
 800d698:	689b      	ldr	r3, [r3, #8]
 800d69a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	43db      	mvns	r3, r3
 800d6a0:	69ba      	ldr	r2, [r7, #24]
 800d6a2:	4013      	ands	r3, r2
 800d6a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d003      	beq.n	800d6ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800d6b2:	69ba      	ldr	r2, [r7, #24]
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d6ba:	4a34      	ldr	r2, [pc, #208]	; (800d78c <HAL_GPIO_Init+0x354>)
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d6c0:	4b32      	ldr	r3, [pc, #200]	; (800d78c <HAL_GPIO_Init+0x354>)
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	43db      	mvns	r3, r3
 800d6ca:	69ba      	ldr	r2, [r7, #24]
 800d6cc:	4013      	ands	r3, r2
 800d6ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d003      	beq.n	800d6e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800d6dc:	69ba      	ldr	r2, [r7, #24]
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d6e4:	4a29      	ldr	r2, [pc, #164]	; (800d78c <HAL_GPIO_Init+0x354>)
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800d6ea:	4b28      	ldr	r3, [pc, #160]	; (800d78c <HAL_GPIO_Init+0x354>)
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	43db      	mvns	r3, r3
 800d6f4:	69ba      	ldr	r2, [r7, #24]
 800d6f6:	4013      	ands	r3, r2
 800d6f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d702:	2b00      	cmp	r3, #0
 800d704:	d003      	beq.n	800d70e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800d706:	69ba      	ldr	r2, [r7, #24]
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	4313      	orrs	r3, r2
 800d70c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d70e:	4a1f      	ldr	r2, [pc, #124]	; (800d78c <HAL_GPIO_Init+0x354>)
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d714:	4b1d      	ldr	r3, [pc, #116]	; (800d78c <HAL_GPIO_Init+0x354>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	43db      	mvns	r3, r3
 800d71e:	69ba      	ldr	r2, [r7, #24]
 800d720:	4013      	ands	r3, r2
 800d722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	685b      	ldr	r3, [r3, #4]
 800d728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d003      	beq.n	800d738 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800d730:	69ba      	ldr	r2, [r7, #24]
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	4313      	orrs	r3, r2
 800d736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d738:	4a14      	ldr	r2, [pc, #80]	; (800d78c <HAL_GPIO_Init+0x354>)
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	3301      	adds	r3, #1
 800d742:	61fb      	str	r3, [r7, #28]
 800d744:	69fb      	ldr	r3, [r7, #28]
 800d746:	2b0f      	cmp	r3, #15
 800d748:	f67f ae86 	bls.w	800d458 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800d74c:	bf00      	nop
 800d74e:	bf00      	nop
 800d750:	3724      	adds	r7, #36	; 0x24
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	40023800 	.word	0x40023800
 800d760:	40013800 	.word	0x40013800
 800d764:	40020000 	.word	0x40020000
 800d768:	40020400 	.word	0x40020400
 800d76c:	40020800 	.word	0x40020800
 800d770:	40020c00 	.word	0x40020c00
 800d774:	40021000 	.word	0x40021000
 800d778:	40021400 	.word	0x40021400
 800d77c:	40021800 	.word	0x40021800
 800d780:	40021c00 	.word	0x40021c00
 800d784:	40022000 	.word	0x40022000
 800d788:	40022400 	.word	0x40022400
 800d78c:	40013c00 	.word	0x40013c00

0800d790 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d790:	b480      	push	{r7}
 800d792:	b085      	sub	sp, #20
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	460b      	mov	r3, r1
 800d79a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	691a      	ldr	r2, [r3, #16]
 800d7a0:	887b      	ldrh	r3, [r7, #2]
 800d7a2:	4013      	ands	r3, r2
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	73fb      	strb	r3, [r7, #15]
 800d7ac:	e001      	b.n	800d7b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3714      	adds	r7, #20
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	807b      	strh	r3, [r7, #2]
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d7d0:	787b      	ldrb	r3, [r7, #1]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d003      	beq.n	800d7de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d7d6:	887a      	ldrh	r2, [r7, #2]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800d7dc:	e003      	b.n	800d7e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800d7de:	887b      	ldrh	r3, [r7, #2]
 800d7e0:	041a      	lsls	r2, r3, #16
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	619a      	str	r2, [r3, #24]
}
 800d7e6:	bf00      	nop
 800d7e8:	370c      	adds	r7, #12
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
	...

0800d7f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d7fe:	4b23      	ldr	r3, [pc, #140]	; (800d88c <HAL_PWREx_EnableOverDrive+0x98>)
 800d800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d802:	4a22      	ldr	r2, [pc, #136]	; (800d88c <HAL_PWREx_EnableOverDrive+0x98>)
 800d804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d808:	6413      	str	r3, [r2, #64]	; 0x40
 800d80a:	4b20      	ldr	r3, [pc, #128]	; (800d88c <HAL_PWREx_EnableOverDrive+0x98>)
 800d80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d80e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d812:	603b      	str	r3, [r7, #0]
 800d814:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d816:	4b1e      	ldr	r3, [pc, #120]	; (800d890 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4a1d      	ldr	r2, [pc, #116]	; (800d890 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d81c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d820:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d822:	f7fd fb31 	bl	800ae88 <HAL_GetTick>
 800d826:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d828:	e009      	b.n	800d83e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d82a:	f7fd fb2d 	bl	800ae88 <HAL_GetTick>
 800d82e:	4602      	mov	r2, r0
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	1ad3      	subs	r3, r2, r3
 800d834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d838:	d901      	bls.n	800d83e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d83a:	2303      	movs	r3, #3
 800d83c:	e022      	b.n	800d884 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d83e:	4b14      	ldr	r3, [pc, #80]	; (800d890 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d84a:	d1ee      	bne.n	800d82a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d84c:	4b10      	ldr	r3, [pc, #64]	; (800d890 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a0f      	ldr	r2, [pc, #60]	; (800d890 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d856:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d858:	f7fd fb16 	bl	800ae88 <HAL_GetTick>
 800d85c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d85e:	e009      	b.n	800d874 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d860:	f7fd fb12 	bl	800ae88 <HAL_GetTick>
 800d864:	4602      	mov	r2, r0
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	1ad3      	subs	r3, r2, r3
 800d86a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d86e:	d901      	bls.n	800d874 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d870:	2303      	movs	r3, #3
 800d872:	e007      	b.n	800d884 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d874:	4b06      	ldr	r3, [pc, #24]	; (800d890 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d87c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d880:	d1ee      	bne.n	800d860 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d882:	2300      	movs	r3, #0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	40023800 	.word	0x40023800
 800d890:	40007000 	.word	0x40007000

0800d894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b086      	sub	sp, #24
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800d89c:	2300      	movs	r3, #0
 800d89e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d101      	bne.n	800d8aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	e291      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f003 0301 	and.w	r3, r3, #1
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	f000 8087 	beq.w	800d9c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d8b8:	4b96      	ldr	r3, [pc, #600]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d8ba:	689b      	ldr	r3, [r3, #8]
 800d8bc:	f003 030c 	and.w	r3, r3, #12
 800d8c0:	2b04      	cmp	r3, #4
 800d8c2:	d00c      	beq.n	800d8de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d8c4:	4b93      	ldr	r3, [pc, #588]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	f003 030c 	and.w	r3, r3, #12
 800d8cc:	2b08      	cmp	r3, #8
 800d8ce:	d112      	bne.n	800d8f6 <HAL_RCC_OscConfig+0x62>
 800d8d0:	4b90      	ldr	r3, [pc, #576]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d8dc:	d10b      	bne.n	800d8f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d8de:	4b8d      	ldr	r3, [pc, #564]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d06c      	beq.n	800d9c4 <HAL_RCC_OscConfig+0x130>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d168      	bne.n	800d9c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e26b      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8fe:	d106      	bne.n	800d90e <HAL_RCC_OscConfig+0x7a>
 800d900:	4b84      	ldr	r3, [pc, #528]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a83      	ldr	r2, [pc, #524]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d90a:	6013      	str	r3, [r2, #0]
 800d90c:	e02e      	b.n	800d96c <HAL_RCC_OscConfig+0xd8>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d10c      	bne.n	800d930 <HAL_RCC_OscConfig+0x9c>
 800d916:	4b7f      	ldr	r3, [pc, #508]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4a7e      	ldr	r2, [pc, #504]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d91c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d920:	6013      	str	r3, [r2, #0]
 800d922:	4b7c      	ldr	r3, [pc, #496]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4a7b      	ldr	r2, [pc, #492]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d92c:	6013      	str	r3, [r2, #0]
 800d92e:	e01d      	b.n	800d96c <HAL_RCC_OscConfig+0xd8>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d938:	d10c      	bne.n	800d954 <HAL_RCC_OscConfig+0xc0>
 800d93a:	4b76      	ldr	r3, [pc, #472]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	4a75      	ldr	r2, [pc, #468]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d944:	6013      	str	r3, [r2, #0]
 800d946:	4b73      	ldr	r3, [pc, #460]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a72      	ldr	r2, [pc, #456]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d94c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d950:	6013      	str	r3, [r2, #0]
 800d952:	e00b      	b.n	800d96c <HAL_RCC_OscConfig+0xd8>
 800d954:	4b6f      	ldr	r3, [pc, #444]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a6e      	ldr	r2, [pc, #440]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d95a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d95e:	6013      	str	r3, [r2, #0]
 800d960:	4b6c      	ldr	r3, [pc, #432]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a6b      	ldr	r2, [pc, #428]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d96a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d013      	beq.n	800d99c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d974:	f7fd fa88 	bl	800ae88 <HAL_GetTick>
 800d978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d97a:	e008      	b.n	800d98e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d97c:	f7fd fa84 	bl	800ae88 <HAL_GetTick>
 800d980:	4602      	mov	r2, r0
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	1ad3      	subs	r3, r2, r3
 800d986:	2b64      	cmp	r3, #100	; 0x64
 800d988:	d901      	bls.n	800d98e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d98a:	2303      	movs	r3, #3
 800d98c:	e21f      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d98e:	4b61      	ldr	r3, [pc, #388]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d996:	2b00      	cmp	r3, #0
 800d998:	d0f0      	beq.n	800d97c <HAL_RCC_OscConfig+0xe8>
 800d99a:	e014      	b.n	800d9c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d99c:	f7fd fa74 	bl	800ae88 <HAL_GetTick>
 800d9a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d9a2:	e008      	b.n	800d9b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d9a4:	f7fd fa70 	bl	800ae88 <HAL_GetTick>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	1ad3      	subs	r3, r2, r3
 800d9ae:	2b64      	cmp	r3, #100	; 0x64
 800d9b0:	d901      	bls.n	800d9b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d9b2:	2303      	movs	r3, #3
 800d9b4:	e20b      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d9b6:	4b57      	ldr	r3, [pc, #348]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d1f0      	bne.n	800d9a4 <HAL_RCC_OscConfig+0x110>
 800d9c2:	e000      	b.n	800d9c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d9c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f003 0302 	and.w	r3, r3, #2
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d069      	beq.n	800daa6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d9d2:	4b50      	ldr	r3, [pc, #320]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	f003 030c 	and.w	r3, r3, #12
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00b      	beq.n	800d9f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d9de:	4b4d      	ldr	r3, [pc, #308]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	f003 030c 	and.w	r3, r3, #12
 800d9e6:	2b08      	cmp	r3, #8
 800d9e8:	d11c      	bne.n	800da24 <HAL_RCC_OscConfig+0x190>
 800d9ea:	4b4a      	ldr	r3, [pc, #296]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d116      	bne.n	800da24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d9f6:	4b47      	ldr	r3, [pc, #284]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f003 0302 	and.w	r3, r3, #2
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d005      	beq.n	800da0e <HAL_RCC_OscConfig+0x17a>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	68db      	ldr	r3, [r3, #12]
 800da06:	2b01      	cmp	r3, #1
 800da08:	d001      	beq.n	800da0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	e1df      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da0e:	4b41      	ldr	r3, [pc, #260]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	691b      	ldr	r3, [r3, #16]
 800da1a:	00db      	lsls	r3, r3, #3
 800da1c:	493d      	ldr	r1, [pc, #244]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800da1e:	4313      	orrs	r3, r2
 800da20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800da22:	e040      	b.n	800daa6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d023      	beq.n	800da74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800da2c:	4b39      	ldr	r3, [pc, #228]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a38      	ldr	r2, [pc, #224]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800da32:	f043 0301 	orr.w	r3, r3, #1
 800da36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da38:	f7fd fa26 	bl	800ae88 <HAL_GetTick>
 800da3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800da3e:	e008      	b.n	800da52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da40:	f7fd fa22 	bl	800ae88 <HAL_GetTick>
 800da44:	4602      	mov	r2, r0
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	1ad3      	subs	r3, r2, r3
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d901      	bls.n	800da52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800da4e:	2303      	movs	r3, #3
 800da50:	e1bd      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800da52:	4b30      	ldr	r3, [pc, #192]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f003 0302 	and.w	r3, r3, #2
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d0f0      	beq.n	800da40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da5e:	4b2d      	ldr	r3, [pc, #180]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	691b      	ldr	r3, [r3, #16]
 800da6a:	00db      	lsls	r3, r3, #3
 800da6c:	4929      	ldr	r1, [pc, #164]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800da6e:	4313      	orrs	r3, r2
 800da70:	600b      	str	r3, [r1, #0]
 800da72:	e018      	b.n	800daa6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800da74:	4b27      	ldr	r3, [pc, #156]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a26      	ldr	r2, [pc, #152]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800da7a:	f023 0301 	bic.w	r3, r3, #1
 800da7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da80:	f7fd fa02 	bl	800ae88 <HAL_GetTick>
 800da84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800da86:	e008      	b.n	800da9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da88:	f7fd f9fe 	bl	800ae88 <HAL_GetTick>
 800da8c:	4602      	mov	r2, r0
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	1ad3      	subs	r3, r2, r3
 800da92:	2b02      	cmp	r3, #2
 800da94:	d901      	bls.n	800da9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800da96:	2303      	movs	r3, #3
 800da98:	e199      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800da9a:	4b1e      	ldr	r3, [pc, #120]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f003 0302 	and.w	r3, r3, #2
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d1f0      	bne.n	800da88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f003 0308 	and.w	r3, r3, #8
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d038      	beq.n	800db24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	695b      	ldr	r3, [r3, #20]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d019      	beq.n	800daee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800daba:	4b16      	ldr	r3, [pc, #88]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800dabc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dabe:	4a15      	ldr	r2, [pc, #84]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800dac0:	f043 0301 	orr.w	r3, r3, #1
 800dac4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dac6:	f7fd f9df 	bl	800ae88 <HAL_GetTick>
 800daca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dacc:	e008      	b.n	800dae0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dace:	f7fd f9db 	bl	800ae88 <HAL_GetTick>
 800dad2:	4602      	mov	r2, r0
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	1ad3      	subs	r3, r2, r3
 800dad8:	2b02      	cmp	r3, #2
 800dada:	d901      	bls.n	800dae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800dadc:	2303      	movs	r3, #3
 800dade:	e176      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dae0:	4b0c      	ldr	r3, [pc, #48]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800dae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dae4:	f003 0302 	and.w	r3, r3, #2
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d0f0      	beq.n	800dace <HAL_RCC_OscConfig+0x23a>
 800daec:	e01a      	b.n	800db24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800daee:	4b09      	ldr	r3, [pc, #36]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800daf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daf2:	4a08      	ldr	r2, [pc, #32]	; (800db14 <HAL_RCC_OscConfig+0x280>)
 800daf4:	f023 0301 	bic.w	r3, r3, #1
 800daf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dafa:	f7fd f9c5 	bl	800ae88 <HAL_GetTick>
 800dafe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800db00:	e00a      	b.n	800db18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800db02:	f7fd f9c1 	bl	800ae88 <HAL_GetTick>
 800db06:	4602      	mov	r2, r0
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	1ad3      	subs	r3, r2, r3
 800db0c:	2b02      	cmp	r3, #2
 800db0e:	d903      	bls.n	800db18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800db10:	2303      	movs	r3, #3
 800db12:	e15c      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
 800db14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800db18:	4b91      	ldr	r3, [pc, #580]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800db1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db1c:	f003 0302 	and.w	r3, r3, #2
 800db20:	2b00      	cmp	r3, #0
 800db22:	d1ee      	bne.n	800db02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f003 0304 	and.w	r3, r3, #4
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f000 80a4 	beq.w	800dc7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800db32:	4b8b      	ldr	r3, [pc, #556]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800db34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d10d      	bne.n	800db5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800db3e:	4b88      	ldr	r3, [pc, #544]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800db40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db42:	4a87      	ldr	r2, [pc, #540]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800db44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db48:	6413      	str	r3, [r2, #64]	; 0x40
 800db4a:	4b85      	ldr	r3, [pc, #532]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800db4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db52:	60bb      	str	r3, [r7, #8]
 800db54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800db56:	2301      	movs	r3, #1
 800db58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800db5a:	4b82      	ldr	r3, [pc, #520]	; (800dd64 <HAL_RCC_OscConfig+0x4d0>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db62:	2b00      	cmp	r3, #0
 800db64:	d118      	bne.n	800db98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800db66:	4b7f      	ldr	r3, [pc, #508]	; (800dd64 <HAL_RCC_OscConfig+0x4d0>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a7e      	ldr	r2, [pc, #504]	; (800dd64 <HAL_RCC_OscConfig+0x4d0>)
 800db6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800db72:	f7fd f989 	bl	800ae88 <HAL_GetTick>
 800db76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800db78:	e008      	b.n	800db8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800db7a:	f7fd f985 	bl	800ae88 <HAL_GetTick>
 800db7e:	4602      	mov	r2, r0
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	1ad3      	subs	r3, r2, r3
 800db84:	2b64      	cmp	r3, #100	; 0x64
 800db86:	d901      	bls.n	800db8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800db88:	2303      	movs	r3, #3
 800db8a:	e120      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800db8c:	4b75      	ldr	r3, [pc, #468]	; (800dd64 <HAL_RCC_OscConfig+0x4d0>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db94:	2b00      	cmp	r3, #0
 800db96:	d0f0      	beq.n	800db7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	689b      	ldr	r3, [r3, #8]
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d106      	bne.n	800dbae <HAL_RCC_OscConfig+0x31a>
 800dba0:	4b6f      	ldr	r3, [pc, #444]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dba4:	4a6e      	ldr	r2, [pc, #440]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dba6:	f043 0301 	orr.w	r3, r3, #1
 800dbaa:	6713      	str	r3, [r2, #112]	; 0x70
 800dbac:	e02d      	b.n	800dc0a <HAL_RCC_OscConfig+0x376>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d10c      	bne.n	800dbd0 <HAL_RCC_OscConfig+0x33c>
 800dbb6:	4b6a      	ldr	r3, [pc, #424]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbba:	4a69      	ldr	r2, [pc, #420]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dbbc:	f023 0301 	bic.w	r3, r3, #1
 800dbc0:	6713      	str	r3, [r2, #112]	; 0x70
 800dbc2:	4b67      	ldr	r3, [pc, #412]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dbc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbc6:	4a66      	ldr	r2, [pc, #408]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dbc8:	f023 0304 	bic.w	r3, r3, #4
 800dbcc:	6713      	str	r3, [r2, #112]	; 0x70
 800dbce:	e01c      	b.n	800dc0a <HAL_RCC_OscConfig+0x376>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	2b05      	cmp	r3, #5
 800dbd6:	d10c      	bne.n	800dbf2 <HAL_RCC_OscConfig+0x35e>
 800dbd8:	4b61      	ldr	r3, [pc, #388]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dbda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbdc:	4a60      	ldr	r2, [pc, #384]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dbde:	f043 0304 	orr.w	r3, r3, #4
 800dbe2:	6713      	str	r3, [r2, #112]	; 0x70
 800dbe4:	4b5e      	ldr	r3, [pc, #376]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dbe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbe8:	4a5d      	ldr	r2, [pc, #372]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dbea:	f043 0301 	orr.w	r3, r3, #1
 800dbee:	6713      	str	r3, [r2, #112]	; 0x70
 800dbf0:	e00b      	b.n	800dc0a <HAL_RCC_OscConfig+0x376>
 800dbf2:	4b5b      	ldr	r3, [pc, #364]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dbf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbf6:	4a5a      	ldr	r2, [pc, #360]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dbf8:	f023 0301 	bic.w	r3, r3, #1
 800dbfc:	6713      	str	r3, [r2, #112]	; 0x70
 800dbfe:	4b58      	ldr	r3, [pc, #352]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dc00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc02:	4a57      	ldr	r2, [pc, #348]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dc04:	f023 0304 	bic.w	r3, r3, #4
 800dc08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	689b      	ldr	r3, [r3, #8]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d015      	beq.n	800dc3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc12:	f7fd f939 	bl	800ae88 <HAL_GetTick>
 800dc16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dc18:	e00a      	b.n	800dc30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc1a:	f7fd f935 	bl	800ae88 <HAL_GetTick>
 800dc1e:	4602      	mov	r2, r0
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	1ad3      	subs	r3, r2, r3
 800dc24:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d901      	bls.n	800dc30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800dc2c:	2303      	movs	r3, #3
 800dc2e:	e0ce      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dc30:	4b4b      	ldr	r3, [pc, #300]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dc32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc34:	f003 0302 	and.w	r3, r3, #2
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d0ee      	beq.n	800dc1a <HAL_RCC_OscConfig+0x386>
 800dc3c:	e014      	b.n	800dc68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc3e:	f7fd f923 	bl	800ae88 <HAL_GetTick>
 800dc42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dc44:	e00a      	b.n	800dc5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc46:	f7fd f91f 	bl	800ae88 <HAL_GetTick>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	1ad3      	subs	r3, r2, r3
 800dc50:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d901      	bls.n	800dc5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800dc58:	2303      	movs	r3, #3
 800dc5a:	e0b8      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dc5c:	4b40      	ldr	r3, [pc, #256]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dc5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc60:	f003 0302 	and.w	r3, r3, #2
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d1ee      	bne.n	800dc46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800dc68:	7dfb      	ldrb	r3, [r7, #23]
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d105      	bne.n	800dc7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc6e:	4b3c      	ldr	r3, [pc, #240]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc72:	4a3b      	ldr	r2, [pc, #236]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dc74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	699b      	ldr	r3, [r3, #24]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f000 80a4 	beq.w	800ddcc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dc84:	4b36      	ldr	r3, [pc, #216]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	f003 030c 	and.w	r3, r3, #12
 800dc8c:	2b08      	cmp	r3, #8
 800dc8e:	d06b      	beq.n	800dd68 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	699b      	ldr	r3, [r3, #24]
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	d149      	bne.n	800dd2c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc98:	4b31      	ldr	r3, [pc, #196]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a30      	ldr	r2, [pc, #192]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dc9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dca4:	f7fd f8f0 	bl	800ae88 <HAL_GetTick>
 800dca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dcaa:	e008      	b.n	800dcbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dcac:	f7fd f8ec 	bl	800ae88 <HAL_GetTick>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	1ad3      	subs	r3, r2, r3
 800dcb6:	2b02      	cmp	r3, #2
 800dcb8:	d901      	bls.n	800dcbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800dcba:	2303      	movs	r3, #3
 800dcbc:	e087      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dcbe:	4b28      	ldr	r3, [pc, #160]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d1f0      	bne.n	800dcac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	69da      	ldr	r2, [r3, #28]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6a1b      	ldr	r3, [r3, #32]
 800dcd2:	431a      	orrs	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd8:	019b      	lsls	r3, r3, #6
 800dcda:	431a      	orrs	r2, r3
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce0:	085b      	lsrs	r3, r3, #1
 800dce2:	3b01      	subs	r3, #1
 800dce4:	041b      	lsls	r3, r3, #16
 800dce6:	431a      	orrs	r2, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcec:	061b      	lsls	r3, r3, #24
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	4a1b      	ldr	r2, [pc, #108]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dcf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dcf6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dcf8:	4b19      	ldr	r3, [pc, #100]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a18      	ldr	r2, [pc, #96]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dcfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dd02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd04:	f7fd f8c0 	bl	800ae88 <HAL_GetTick>
 800dd08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd0a:	e008      	b.n	800dd1e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dd0c:	f7fd f8bc 	bl	800ae88 <HAL_GetTick>
 800dd10:	4602      	mov	r2, r0
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	1ad3      	subs	r3, r2, r3
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	d901      	bls.n	800dd1e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800dd1a:	2303      	movs	r3, #3
 800dd1c:	e057      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd1e:	4b10      	ldr	r3, [pc, #64]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d0f0      	beq.n	800dd0c <HAL_RCC_OscConfig+0x478>
 800dd2a:	e04f      	b.n	800ddcc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dd2c:	4b0c      	ldr	r3, [pc, #48]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a0b      	ldr	r2, [pc, #44]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dd32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dd36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd38:	f7fd f8a6 	bl	800ae88 <HAL_GetTick>
 800dd3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dd3e:	e008      	b.n	800dd52 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dd40:	f7fd f8a2 	bl	800ae88 <HAL_GetTick>
 800dd44:	4602      	mov	r2, r0
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	2b02      	cmp	r3, #2
 800dd4c:	d901      	bls.n	800dd52 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800dd4e:	2303      	movs	r3, #3
 800dd50:	e03d      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dd52:	4b03      	ldr	r3, [pc, #12]	; (800dd60 <HAL_RCC_OscConfig+0x4cc>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d1f0      	bne.n	800dd40 <HAL_RCC_OscConfig+0x4ac>
 800dd5e:	e035      	b.n	800ddcc <HAL_RCC_OscConfig+0x538>
 800dd60:	40023800 	.word	0x40023800
 800dd64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800dd68:	4b1b      	ldr	r3, [pc, #108]	; (800ddd8 <HAL_RCC_OscConfig+0x544>)
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	699b      	ldr	r3, [r3, #24]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d028      	beq.n	800ddc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d121      	bne.n	800ddc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d11a      	bne.n	800ddc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dd92:	68fa      	ldr	r2, [r7, #12]
 800dd94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dd98:	4013      	ands	r3, r2
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dd9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d111      	bne.n	800ddc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddae:	085b      	lsrs	r3, r3, #1
 800ddb0:	3b01      	subs	r3, #1
 800ddb2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d107      	bne.n	800ddc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d001      	beq.n	800ddcc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	e000      	b.n	800ddce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800ddcc:	2300      	movs	r3, #0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3718      	adds	r7, #24
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	40023800 	.word	0x40023800

0800dddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800dde6:	2300      	movs	r3, #0
 800dde8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	e0d0      	b.n	800df96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ddf4:	4b6a      	ldr	r3, [pc, #424]	; (800dfa0 <HAL_RCC_ClockConfig+0x1c4>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f003 030f 	and.w	r3, r3, #15
 800ddfc:	683a      	ldr	r2, [r7, #0]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d910      	bls.n	800de24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de02:	4b67      	ldr	r3, [pc, #412]	; (800dfa0 <HAL_RCC_ClockConfig+0x1c4>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f023 020f 	bic.w	r2, r3, #15
 800de0a:	4965      	ldr	r1, [pc, #404]	; (800dfa0 <HAL_RCC_ClockConfig+0x1c4>)
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	4313      	orrs	r3, r2
 800de10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800de12:	4b63      	ldr	r3, [pc, #396]	; (800dfa0 <HAL_RCC_ClockConfig+0x1c4>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f003 030f 	and.w	r3, r3, #15
 800de1a:	683a      	ldr	r2, [r7, #0]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d001      	beq.n	800de24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800de20:	2301      	movs	r3, #1
 800de22:	e0b8      	b.n	800df96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f003 0302 	and.w	r3, r3, #2
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d020      	beq.n	800de72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f003 0304 	and.w	r3, r3, #4
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d005      	beq.n	800de48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800de3c:	4b59      	ldr	r3, [pc, #356]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800de3e:	689b      	ldr	r3, [r3, #8]
 800de40:	4a58      	ldr	r2, [pc, #352]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800de42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800de46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f003 0308 	and.w	r3, r3, #8
 800de50:	2b00      	cmp	r3, #0
 800de52:	d005      	beq.n	800de60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800de54:	4b53      	ldr	r3, [pc, #332]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	4a52      	ldr	r2, [pc, #328]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800de5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800de5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800de60:	4b50      	ldr	r3, [pc, #320]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	494d      	ldr	r1, [pc, #308]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800de6e:	4313      	orrs	r3, r2
 800de70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f003 0301 	and.w	r3, r3, #1
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d040      	beq.n	800df00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d107      	bne.n	800de96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800de86:	4b47      	ldr	r3, [pc, #284]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d115      	bne.n	800debe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	e07f      	b.n	800df96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	2b02      	cmp	r3, #2
 800de9c:	d107      	bne.n	800deae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800de9e:	4b41      	ldr	r3, [pc, #260]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d109      	bne.n	800debe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800deaa:	2301      	movs	r3, #1
 800deac:	e073      	b.n	800df96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800deae:	4b3d      	ldr	r3, [pc, #244]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f003 0302 	and.w	r3, r3, #2
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d101      	bne.n	800debe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800deba:	2301      	movs	r3, #1
 800debc:	e06b      	b.n	800df96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800debe:	4b39      	ldr	r3, [pc, #228]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800dec0:	689b      	ldr	r3, [r3, #8]
 800dec2:	f023 0203 	bic.w	r2, r3, #3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	4936      	ldr	r1, [pc, #216]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800decc:	4313      	orrs	r3, r2
 800dece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ded0:	f7fc ffda 	bl	800ae88 <HAL_GetTick>
 800ded4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ded6:	e00a      	b.n	800deee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ded8:	f7fc ffd6 	bl	800ae88 <HAL_GetTick>
 800dedc:	4602      	mov	r2, r0
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	1ad3      	subs	r3, r2, r3
 800dee2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d901      	bls.n	800deee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800deea:	2303      	movs	r3, #3
 800deec:	e053      	b.n	800df96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800deee:	4b2d      	ldr	r3, [pc, #180]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800def0:	689b      	ldr	r3, [r3, #8]
 800def2:	f003 020c 	and.w	r2, r3, #12
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	429a      	cmp	r2, r3
 800defe:	d1eb      	bne.n	800ded8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800df00:	4b27      	ldr	r3, [pc, #156]	; (800dfa0 <HAL_RCC_ClockConfig+0x1c4>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f003 030f 	and.w	r3, r3, #15
 800df08:	683a      	ldr	r2, [r7, #0]
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d210      	bcs.n	800df30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df0e:	4b24      	ldr	r3, [pc, #144]	; (800dfa0 <HAL_RCC_ClockConfig+0x1c4>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f023 020f 	bic.w	r2, r3, #15
 800df16:	4922      	ldr	r1, [pc, #136]	; (800dfa0 <HAL_RCC_ClockConfig+0x1c4>)
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	4313      	orrs	r3, r2
 800df1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800df1e:	4b20      	ldr	r3, [pc, #128]	; (800dfa0 <HAL_RCC_ClockConfig+0x1c4>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f003 030f 	and.w	r3, r3, #15
 800df26:	683a      	ldr	r2, [r7, #0]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d001      	beq.n	800df30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800df2c:	2301      	movs	r3, #1
 800df2e:	e032      	b.n	800df96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f003 0304 	and.w	r3, r3, #4
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d008      	beq.n	800df4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800df3c:	4b19      	ldr	r3, [pc, #100]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800df3e:	689b      	ldr	r3, [r3, #8]
 800df40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	68db      	ldr	r3, [r3, #12]
 800df48:	4916      	ldr	r1, [pc, #88]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800df4a:	4313      	orrs	r3, r2
 800df4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f003 0308 	and.w	r3, r3, #8
 800df56:	2b00      	cmp	r3, #0
 800df58:	d009      	beq.n	800df6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800df5a:	4b12      	ldr	r3, [pc, #72]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	691b      	ldr	r3, [r3, #16]
 800df66:	00db      	lsls	r3, r3, #3
 800df68:	490e      	ldr	r1, [pc, #56]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800df6a:	4313      	orrs	r3, r2
 800df6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800df6e:	f000 f821 	bl	800dfb4 <HAL_RCC_GetSysClockFreq>
 800df72:	4602      	mov	r2, r0
 800df74:	4b0b      	ldr	r3, [pc, #44]	; (800dfa4 <HAL_RCC_ClockConfig+0x1c8>)
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	091b      	lsrs	r3, r3, #4
 800df7a:	f003 030f 	and.w	r3, r3, #15
 800df7e:	490a      	ldr	r1, [pc, #40]	; (800dfa8 <HAL_RCC_ClockConfig+0x1cc>)
 800df80:	5ccb      	ldrb	r3, [r1, r3]
 800df82:	fa22 f303 	lsr.w	r3, r2, r3
 800df86:	4a09      	ldr	r2, [pc, #36]	; (800dfac <HAL_RCC_ClockConfig+0x1d0>)
 800df88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800df8a:	4b09      	ldr	r3, [pc, #36]	; (800dfb0 <HAL_RCC_ClockConfig+0x1d4>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4618      	mov	r0, r3
 800df90:	f7fc fc40 	bl	800a814 <HAL_InitTick>

  return HAL_OK;
 800df94:	2300      	movs	r3, #0
}
 800df96:	4618      	mov	r0, r3
 800df98:	3710      	adds	r7, #16
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	40023c00 	.word	0x40023c00
 800dfa4:	40023800 	.word	0x40023800
 800dfa8:	080289c0 	.word	0x080289c0
 800dfac:	2000000c 	.word	0x2000000c
 800dfb0:	20000010 	.word	0x20000010

0800dfb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dfb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dfb8:	b090      	sub	sp, #64	; 0x40
 800dfba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	637b      	str	r3, [r7, #52]	; 0x34
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dfcc:	4b59      	ldr	r3, [pc, #356]	; (800e134 <HAL_RCC_GetSysClockFreq+0x180>)
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	f003 030c 	and.w	r3, r3, #12
 800dfd4:	2b08      	cmp	r3, #8
 800dfd6:	d00d      	beq.n	800dff4 <HAL_RCC_GetSysClockFreq+0x40>
 800dfd8:	2b08      	cmp	r3, #8
 800dfda:	f200 80a1 	bhi.w	800e120 <HAL_RCC_GetSysClockFreq+0x16c>
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d002      	beq.n	800dfe8 <HAL_RCC_GetSysClockFreq+0x34>
 800dfe2:	2b04      	cmp	r3, #4
 800dfe4:	d003      	beq.n	800dfee <HAL_RCC_GetSysClockFreq+0x3a>
 800dfe6:	e09b      	b.n	800e120 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dfe8:	4b53      	ldr	r3, [pc, #332]	; (800e138 <HAL_RCC_GetSysClockFreq+0x184>)
 800dfea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800dfec:	e09b      	b.n	800e126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dfee:	4b53      	ldr	r3, [pc, #332]	; (800e13c <HAL_RCC_GetSysClockFreq+0x188>)
 800dff0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800dff2:	e098      	b.n	800e126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dff4:	4b4f      	ldr	r3, [pc, #316]	; (800e134 <HAL_RCC_GetSysClockFreq+0x180>)
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dffc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800dffe:	4b4d      	ldr	r3, [pc, #308]	; (800e134 <HAL_RCC_GetSysClockFreq+0x180>)
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e006:	2b00      	cmp	r3, #0
 800e008:	d028      	beq.n	800e05c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e00a:	4b4a      	ldr	r3, [pc, #296]	; (800e134 <HAL_RCC_GetSysClockFreq+0x180>)
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	099b      	lsrs	r3, r3, #6
 800e010:	2200      	movs	r2, #0
 800e012:	623b      	str	r3, [r7, #32]
 800e014:	627a      	str	r2, [r7, #36]	; 0x24
 800e016:	6a3b      	ldr	r3, [r7, #32]
 800e018:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800e01c:	2100      	movs	r1, #0
 800e01e:	4b47      	ldr	r3, [pc, #284]	; (800e13c <HAL_RCC_GetSysClockFreq+0x188>)
 800e020:	fb03 f201 	mul.w	r2, r3, r1
 800e024:	2300      	movs	r3, #0
 800e026:	fb00 f303 	mul.w	r3, r0, r3
 800e02a:	4413      	add	r3, r2
 800e02c:	4a43      	ldr	r2, [pc, #268]	; (800e13c <HAL_RCC_GetSysClockFreq+0x188>)
 800e02e:	fba0 1202 	umull	r1, r2, r0, r2
 800e032:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e034:	460a      	mov	r2, r1
 800e036:	62ba      	str	r2, [r7, #40]	; 0x28
 800e038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e03a:	4413      	add	r3, r2
 800e03c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e040:	2200      	movs	r2, #0
 800e042:	61bb      	str	r3, [r7, #24]
 800e044:	61fa      	str	r2, [r7, #28]
 800e046:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e04a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e04e:	f7f2 fdcb 	bl	8000be8 <__aeabi_uldivmod>
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	4613      	mov	r3, r2
 800e058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e05a:	e053      	b.n	800e104 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e05c:	4b35      	ldr	r3, [pc, #212]	; (800e134 <HAL_RCC_GetSysClockFreq+0x180>)
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	099b      	lsrs	r3, r3, #6
 800e062:	2200      	movs	r2, #0
 800e064:	613b      	str	r3, [r7, #16]
 800e066:	617a      	str	r2, [r7, #20]
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800e06e:	f04f 0b00 	mov.w	fp, #0
 800e072:	4652      	mov	r2, sl
 800e074:	465b      	mov	r3, fp
 800e076:	f04f 0000 	mov.w	r0, #0
 800e07a:	f04f 0100 	mov.w	r1, #0
 800e07e:	0159      	lsls	r1, r3, #5
 800e080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e084:	0150      	lsls	r0, r2, #5
 800e086:	4602      	mov	r2, r0
 800e088:	460b      	mov	r3, r1
 800e08a:	ebb2 080a 	subs.w	r8, r2, sl
 800e08e:	eb63 090b 	sbc.w	r9, r3, fp
 800e092:	f04f 0200 	mov.w	r2, #0
 800e096:	f04f 0300 	mov.w	r3, #0
 800e09a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800e09e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800e0a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800e0a6:	ebb2 0408 	subs.w	r4, r2, r8
 800e0aa:	eb63 0509 	sbc.w	r5, r3, r9
 800e0ae:	f04f 0200 	mov.w	r2, #0
 800e0b2:	f04f 0300 	mov.w	r3, #0
 800e0b6:	00eb      	lsls	r3, r5, #3
 800e0b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e0bc:	00e2      	lsls	r2, r4, #3
 800e0be:	4614      	mov	r4, r2
 800e0c0:	461d      	mov	r5, r3
 800e0c2:	eb14 030a 	adds.w	r3, r4, sl
 800e0c6:	603b      	str	r3, [r7, #0]
 800e0c8:	eb45 030b 	adc.w	r3, r5, fp
 800e0cc:	607b      	str	r3, [r7, #4]
 800e0ce:	f04f 0200 	mov.w	r2, #0
 800e0d2:	f04f 0300 	mov.w	r3, #0
 800e0d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e0da:	4629      	mov	r1, r5
 800e0dc:	028b      	lsls	r3, r1, #10
 800e0de:	4621      	mov	r1, r4
 800e0e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e0e4:	4621      	mov	r1, r4
 800e0e6:	028a      	lsls	r2, r1, #10
 800e0e8:	4610      	mov	r0, r2
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	60bb      	str	r3, [r7, #8]
 800e0f2:	60fa      	str	r2, [r7, #12]
 800e0f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e0f8:	f7f2 fd76 	bl	8000be8 <__aeabi_uldivmod>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	460b      	mov	r3, r1
 800e100:	4613      	mov	r3, r2
 800e102:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800e104:	4b0b      	ldr	r3, [pc, #44]	; (800e134 <HAL_RCC_GetSysClockFreq+0x180>)
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	0c1b      	lsrs	r3, r3, #16
 800e10a:	f003 0303 	and.w	r3, r3, #3
 800e10e:	3301      	adds	r3, #1
 800e110:	005b      	lsls	r3, r3, #1
 800e112:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800e114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e118:	fbb2 f3f3 	udiv	r3, r2, r3
 800e11c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800e11e:	e002      	b.n	800e126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e120:	4b05      	ldr	r3, [pc, #20]	; (800e138 <HAL_RCC_GetSysClockFreq+0x184>)
 800e122:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800e124:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3740      	adds	r7, #64	; 0x40
 800e12c:	46bd      	mov	sp, r7
 800e12e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e132:	bf00      	nop
 800e134:	40023800 	.word	0x40023800
 800e138:	00f42400 	.word	0x00f42400
 800e13c:	017d7840 	.word	0x017d7840

0800e140 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e140:	b480      	push	{r7}
 800e142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e144:	4b03      	ldr	r3, [pc, #12]	; (800e154 <HAL_RCC_GetHCLKFreq+0x14>)
 800e146:	681b      	ldr	r3, [r3, #0]
}
 800e148:	4618      	mov	r0, r3
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr
 800e152:	bf00      	nop
 800e154:	2000000c 	.word	0x2000000c

0800e158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e15c:	f7ff fff0 	bl	800e140 <HAL_RCC_GetHCLKFreq>
 800e160:	4602      	mov	r2, r0
 800e162:	4b05      	ldr	r3, [pc, #20]	; (800e178 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	0a9b      	lsrs	r3, r3, #10
 800e168:	f003 0307 	and.w	r3, r3, #7
 800e16c:	4903      	ldr	r1, [pc, #12]	; (800e17c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e16e:	5ccb      	ldrb	r3, [r1, r3]
 800e170:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e174:	4618      	mov	r0, r3
 800e176:	bd80      	pop	{r7, pc}
 800e178:	40023800 	.word	0x40023800
 800e17c:	080289d0 	.word	0x080289d0

0800e180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e184:	f7ff ffdc 	bl	800e140 <HAL_RCC_GetHCLKFreq>
 800e188:	4602      	mov	r2, r0
 800e18a:	4b05      	ldr	r3, [pc, #20]	; (800e1a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	0b5b      	lsrs	r3, r3, #13
 800e190:	f003 0307 	and.w	r3, r3, #7
 800e194:	4903      	ldr	r1, [pc, #12]	; (800e1a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e196:	5ccb      	ldrb	r3, [r1, r3]
 800e198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	40023800 	.word	0x40023800
 800e1a4:	080289d0 	.word	0x080289d0

0800e1a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	220f      	movs	r2, #15
 800e1b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e1b8:	4b12      	ldr	r3, [pc, #72]	; (800e204 <HAL_RCC_GetClockConfig+0x5c>)
 800e1ba:	689b      	ldr	r3, [r3, #8]
 800e1bc:	f003 0203 	and.w	r2, r3, #3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e1c4:	4b0f      	ldr	r3, [pc, #60]	; (800e204 <HAL_RCC_GetClockConfig+0x5c>)
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e1d0:	4b0c      	ldr	r3, [pc, #48]	; (800e204 <HAL_RCC_GetClockConfig+0x5c>)
 800e1d2:	689b      	ldr	r3, [r3, #8]
 800e1d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800e1dc:	4b09      	ldr	r3, [pc, #36]	; (800e204 <HAL_RCC_GetClockConfig+0x5c>)
 800e1de:	689b      	ldr	r3, [r3, #8]
 800e1e0:	08db      	lsrs	r3, r3, #3
 800e1e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e1ea:	4b07      	ldr	r3, [pc, #28]	; (800e208 <HAL_RCC_GetClockConfig+0x60>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f003 020f 	and.w	r2, r3, #15
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	601a      	str	r2, [r3, #0]
}
 800e1f6:	bf00      	nop
 800e1f8:	370c      	adds	r7, #12
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr
 800e202:	bf00      	nop
 800e204:	40023800 	.word	0x40023800
 800e208:	40023c00 	.word	0x40023c00

0800e20c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b088      	sub	sp, #32
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e214:	2300      	movs	r3, #0
 800e216:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800e218:	2300      	movs	r3, #0
 800e21a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800e21c:	2300      	movs	r3, #0
 800e21e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800e220:	2300      	movs	r3, #0
 800e222:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800e224:	2300      	movs	r3, #0
 800e226:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f003 0301 	and.w	r3, r3, #1
 800e230:	2b00      	cmp	r3, #0
 800e232:	d012      	beq.n	800e25a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e234:	4b69      	ldr	r3, [pc, #420]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	4a68      	ldr	r2, [pc, #416]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e23a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e23e:	6093      	str	r3, [r2, #8]
 800e240:	4b66      	ldr	r3, [pc, #408]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e242:	689a      	ldr	r2, [r3, #8]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e248:	4964      	ldr	r1, [pc, #400]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e24a:	4313      	orrs	r3, r2
 800e24c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e252:	2b00      	cmp	r3, #0
 800e254:	d101      	bne.n	800e25a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800e256:	2301      	movs	r3, #1
 800e258:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e262:	2b00      	cmp	r3, #0
 800e264:	d017      	beq.n	800e296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e266:	4b5d      	ldr	r3, [pc, #372]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e26c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e274:	4959      	ldr	r1, [pc, #356]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e276:	4313      	orrs	r3, r2
 800e278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e284:	d101      	bne.n	800e28a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800e286:	2301      	movs	r3, #1
 800e288:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d101      	bne.n	800e296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800e292:	2301      	movs	r3, #1
 800e294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d017      	beq.n	800e2d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e2a2:	4b4e      	ldr	r3, [pc, #312]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2b0:	494a      	ldr	r1, [pc, #296]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e2c0:	d101      	bne.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d101      	bne.n	800e2d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d001      	beq.n	800e2e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f003 0320 	and.w	r3, r3, #32
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	f000 808b 	beq.w	800e406 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e2f0:	4b3a      	ldr	r3, [pc, #232]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2f4:	4a39      	ldr	r2, [pc, #228]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2fa:	6413      	str	r3, [r2, #64]	; 0x40
 800e2fc:	4b37      	ldr	r3, [pc, #220]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e304:	60bb      	str	r3, [r7, #8]
 800e306:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e308:	4b35      	ldr	r3, [pc, #212]	; (800e3e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a34      	ldr	r2, [pc, #208]	; (800e3e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e30e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e314:	f7fc fdb8 	bl	800ae88 <HAL_GetTick>
 800e318:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e31a:	e008      	b.n	800e32e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e31c:	f7fc fdb4 	bl	800ae88 <HAL_GetTick>
 800e320:	4602      	mov	r2, r0
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	1ad3      	subs	r3, r2, r3
 800e326:	2b64      	cmp	r3, #100	; 0x64
 800e328:	d901      	bls.n	800e32e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800e32a:	2303      	movs	r3, #3
 800e32c:	e357      	b.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e32e:	4b2c      	ldr	r3, [pc, #176]	; (800e3e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e336:	2b00      	cmp	r3, #0
 800e338:	d0f0      	beq.n	800e31c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e33a:	4b28      	ldr	r3, [pc, #160]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e33c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e33e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e342:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d035      	beq.n	800e3b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e34e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e352:	693a      	ldr	r2, [r7, #16]
 800e354:	429a      	cmp	r2, r3
 800e356:	d02e      	beq.n	800e3b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e358:	4b20      	ldr	r3, [pc, #128]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e35c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e360:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e362:	4b1e      	ldr	r3, [pc, #120]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e366:	4a1d      	ldr	r2, [pc, #116]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e36c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e36e:	4b1b      	ldr	r3, [pc, #108]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e372:	4a1a      	ldr	r2, [pc, #104]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e378:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e37a:	4a18      	ldr	r2, [pc, #96]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e380:	4b16      	ldr	r3, [pc, #88]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e384:	f003 0301 	and.w	r3, r3, #1
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d114      	bne.n	800e3b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e38c:	f7fc fd7c 	bl	800ae88 <HAL_GetTick>
 800e390:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e392:	e00a      	b.n	800e3aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e394:	f7fc fd78 	bl	800ae88 <HAL_GetTick>
 800e398:	4602      	mov	r2, r0
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	1ad3      	subs	r3, r2, r3
 800e39e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d901      	bls.n	800e3aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800e3a6:	2303      	movs	r3, #3
 800e3a8:	e319      	b.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e3aa:	4b0c      	ldr	r3, [pc, #48]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3ae:	f003 0302 	and.w	r3, r3, #2
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d0ee      	beq.n	800e394 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e3c2:	d111      	bne.n	800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800e3c4:	4b05      	ldr	r3, [pc, #20]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e3d0:	4b04      	ldr	r3, [pc, #16]	; (800e3e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800e3d2:	400b      	ands	r3, r1
 800e3d4:	4901      	ldr	r1, [pc, #4]	; (800e3dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	608b      	str	r3, [r1, #8]
 800e3da:	e00b      	b.n	800e3f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e3dc:	40023800 	.word	0x40023800
 800e3e0:	40007000 	.word	0x40007000
 800e3e4:	0ffffcff 	.word	0x0ffffcff
 800e3e8:	4baa      	ldr	r3, [pc, #680]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3ea:	689b      	ldr	r3, [r3, #8]
 800e3ec:	4aa9      	ldr	r2, [pc, #676]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e3f2:	6093      	str	r3, [r2, #8]
 800e3f4:	4ba7      	ldr	r3, [pc, #668]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e400:	49a4      	ldr	r1, [pc, #656]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e402:	4313      	orrs	r3, r2
 800e404:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f003 0310 	and.w	r3, r3, #16
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d010      	beq.n	800e434 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e412:	4ba0      	ldr	r3, [pc, #640]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e418:	4a9e      	ldr	r2, [pc, #632]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e41a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e41e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800e422:	4b9c      	ldr	r3, [pc, #624]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e424:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e42c:	4999      	ldr	r1, [pc, #612]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e42e:	4313      	orrs	r3, r2
 800e430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00a      	beq.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e440:	4b94      	ldr	r3, [pc, #592]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e446:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e44e:	4991      	ldr	r1, [pc, #580]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e450:	4313      	orrs	r3, r2
 800e452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00a      	beq.n	800e478 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e462:	4b8c      	ldr	r3, [pc, #560]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e468:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e470:	4988      	ldr	r1, [pc, #544]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e472:	4313      	orrs	r3, r2
 800e474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e480:	2b00      	cmp	r3, #0
 800e482:	d00a      	beq.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e484:	4b83      	ldr	r3, [pc, #524]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e48a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e492:	4980      	ldr	r1, [pc, #512]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e494:	4313      	orrs	r3, r2
 800e496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00a      	beq.n	800e4bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e4a6:	4b7b      	ldr	r3, [pc, #492]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4b4:	4977      	ldr	r1, [pc, #476]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00a      	beq.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e4c8:	4b72      	ldr	r3, [pc, #456]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4ce:	f023 0203 	bic.w	r2, r3, #3
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4d6:	496f      	ldr	r1, [pc, #444]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d00a      	beq.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e4ea:	4b6a      	ldr	r3, [pc, #424]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4f0:	f023 020c 	bic.w	r2, r3, #12
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4f8:	4966      	ldr	r1, [pc, #408]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4fa:	4313      	orrs	r3, r2
 800e4fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d00a      	beq.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e50c:	4b61      	ldr	r3, [pc, #388]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e512:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e51a:	495e      	ldr	r1, [pc, #376]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e51c:	4313      	orrs	r3, r2
 800e51e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d00a      	beq.n	800e544 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e52e:	4b59      	ldr	r3, [pc, #356]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e534:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e53c:	4955      	ldr	r1, [pc, #340]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e53e:	4313      	orrs	r3, r2
 800e540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00a      	beq.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e550:	4b50      	ldr	r3, [pc, #320]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e556:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e55e:	494d      	ldr	r1, [pc, #308]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e560:	4313      	orrs	r3, r2
 800e562:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d00a      	beq.n	800e588 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e572:	4b48      	ldr	r3, [pc, #288]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e578:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e580:	4944      	ldr	r1, [pc, #272]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e582:	4313      	orrs	r3, r2
 800e584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00a      	beq.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e594:	4b3f      	ldr	r3, [pc, #252]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e59a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5a2:	493c      	ldr	r1, [pc, #240]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e5a4:	4313      	orrs	r3, r2
 800e5a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d00a      	beq.n	800e5cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e5b6:	4b37      	ldr	r3, [pc, #220]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e5c4:	4933      	ldr	r1, [pc, #204]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e5c6:	4313      	orrs	r3, r2
 800e5c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d00a      	beq.n	800e5ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e5d8:	4b2e      	ldr	r3, [pc, #184]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e5da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5e6:	492b      	ldr	r1, [pc, #172]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e5e8:	4313      	orrs	r3, r2
 800e5ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d011      	beq.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e5fa:	4b26      	ldr	r3, [pc, #152]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e5fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e600:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e608:	4922      	ldr	r1, [pc, #136]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e60a:	4313      	orrs	r3, r2
 800e60c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e618:	d101      	bne.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e61a:	2301      	movs	r3, #1
 800e61c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f003 0308 	and.w	r3, r3, #8
 800e626:	2b00      	cmp	r3, #0
 800e628:	d001      	beq.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e62a:	2301      	movs	r3, #1
 800e62c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00a      	beq.n	800e650 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e63a:	4b16      	ldr	r3, [pc, #88]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e63c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e640:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e648:	4912      	ldr	r1, [pc, #72]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e64a:	4313      	orrs	r3, r2
 800e64c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d00b      	beq.n	800e674 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e65c:	4b0d      	ldr	r3, [pc, #52]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e65e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e662:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e66c:	4909      	ldr	r1, [pc, #36]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e66e:	4313      	orrs	r3, r2
 800e670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	2b01      	cmp	r3, #1
 800e678:	d006      	beq.n	800e688 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e682:	2b00      	cmp	r3, #0
 800e684:	f000 80d9 	beq.w	800e83a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e688:	4b02      	ldr	r3, [pc, #8]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a01      	ldr	r2, [pc, #4]	; (800e694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e68e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e692:	e001      	b.n	800e698 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800e694:	40023800 	.word	0x40023800
 800e698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e69a:	f7fc fbf5 	bl	800ae88 <HAL_GetTick>
 800e69e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e6a0:	e008      	b.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e6a2:	f7fc fbf1 	bl	800ae88 <HAL_GetTick>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	1ad3      	subs	r3, r2, r3
 800e6ac:	2b64      	cmp	r3, #100	; 0x64
 800e6ae:	d901      	bls.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e6b0:	2303      	movs	r3, #3
 800e6b2:	e194      	b.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e6b4:	4b6c      	ldr	r3, [pc, #432]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d1f0      	bne.n	800e6a2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f003 0301 	and.w	r3, r3, #1
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d021      	beq.n	800e710 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d11d      	bne.n	800e710 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e6d4:	4b64      	ldr	r3, [pc, #400]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6da:	0c1b      	lsrs	r3, r3, #16
 800e6dc:	f003 0303 	and.w	r3, r3, #3
 800e6e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e6e2:	4b61      	ldr	r3, [pc, #388]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6e8:	0e1b      	lsrs	r3, r3, #24
 800e6ea:	f003 030f 	and.w	r3, r3, #15
 800e6ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	019a      	lsls	r2, r3, #6
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	041b      	lsls	r3, r3, #16
 800e6fa:	431a      	orrs	r2, r3
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	061b      	lsls	r3, r3, #24
 800e700:	431a      	orrs	r2, r3
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	071b      	lsls	r3, r3, #28
 800e708:	4957      	ldr	r1, [pc, #348]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e70a:	4313      	orrs	r3, r2
 800e70c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d004      	beq.n	800e726 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e724:	d00a      	beq.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d02e      	beq.n	800e790 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e73a:	d129      	bne.n	800e790 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e73c:	4b4a      	ldr	r3, [pc, #296]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e73e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e742:	0c1b      	lsrs	r3, r3, #16
 800e744:	f003 0303 	and.w	r3, r3, #3
 800e748:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e74a:	4b47      	ldr	r3, [pc, #284]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e74c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e750:	0f1b      	lsrs	r3, r3, #28
 800e752:	f003 0307 	and.w	r3, r3, #7
 800e756:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	019a      	lsls	r2, r3, #6
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	041b      	lsls	r3, r3, #16
 800e762:	431a      	orrs	r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	061b      	lsls	r3, r3, #24
 800e76a:	431a      	orrs	r2, r3
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	071b      	lsls	r3, r3, #28
 800e770:	493d      	ldr	r1, [pc, #244]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e772:	4313      	orrs	r3, r2
 800e774:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e778:	4b3b      	ldr	r3, [pc, #236]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e77e:	f023 021f 	bic.w	r2, r3, #31
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e786:	3b01      	subs	r3, #1
 800e788:	4937      	ldr	r1, [pc, #220]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e78a:	4313      	orrs	r3, r2
 800e78c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d01d      	beq.n	800e7d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e79c:	4b32      	ldr	r3, [pc, #200]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e79e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7a2:	0e1b      	lsrs	r3, r3, #24
 800e7a4:	f003 030f 	and.w	r3, r3, #15
 800e7a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e7aa:	4b2f      	ldr	r3, [pc, #188]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e7ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7b0:	0f1b      	lsrs	r3, r3, #28
 800e7b2:	f003 0307 	and.w	r3, r3, #7
 800e7b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	019a      	lsls	r2, r3, #6
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	691b      	ldr	r3, [r3, #16]
 800e7c2:	041b      	lsls	r3, r3, #16
 800e7c4:	431a      	orrs	r2, r3
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	061b      	lsls	r3, r3, #24
 800e7ca:	431a      	orrs	r2, r3
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	071b      	lsls	r3, r3, #28
 800e7d0:	4925      	ldr	r1, [pc, #148]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d011      	beq.n	800e808 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	019a      	lsls	r2, r3, #6
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	691b      	ldr	r3, [r3, #16]
 800e7ee:	041b      	lsls	r3, r3, #16
 800e7f0:	431a      	orrs	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	061b      	lsls	r3, r3, #24
 800e7f8:	431a      	orrs	r2, r3
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	689b      	ldr	r3, [r3, #8]
 800e7fe:	071b      	lsls	r3, r3, #28
 800e800:	4919      	ldr	r1, [pc, #100]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e802:	4313      	orrs	r3, r2
 800e804:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e808:	4b17      	ldr	r3, [pc, #92]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a16      	ldr	r2, [pc, #88]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e80e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e814:	f7fc fb38 	bl	800ae88 <HAL_GetTick>
 800e818:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e81a:	e008      	b.n	800e82e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e81c:	f7fc fb34 	bl	800ae88 <HAL_GetTick>
 800e820:	4602      	mov	r2, r0
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	1ad3      	subs	r3, r2, r3
 800e826:	2b64      	cmp	r3, #100	; 0x64
 800e828:	d901      	bls.n	800e82e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e82a:	2303      	movs	r3, #3
 800e82c:	e0d7      	b.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e82e:	4b0e      	ldr	r3, [pc, #56]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e836:	2b00      	cmp	r3, #0
 800e838:	d0f0      	beq.n	800e81c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	f040 80cd 	bne.w	800e9dc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e842:	4b09      	ldr	r3, [pc, #36]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a08      	ldr	r2, [pc, #32]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e84c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e84e:	f7fc fb1b 	bl	800ae88 <HAL_GetTick>
 800e852:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e854:	e00a      	b.n	800e86c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e856:	f7fc fb17 	bl	800ae88 <HAL_GetTick>
 800e85a:	4602      	mov	r2, r0
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	1ad3      	subs	r3, r2, r3
 800e860:	2b64      	cmp	r3, #100	; 0x64
 800e862:	d903      	bls.n	800e86c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e864:	2303      	movs	r3, #3
 800e866:	e0ba      	b.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800e868:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e86c:	4b5e      	ldr	r3, [pc, #376]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e878:	d0ed      	beq.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e882:	2b00      	cmp	r3, #0
 800e884:	d003      	beq.n	800e88e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d009      	beq.n	800e8a2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e896:	2b00      	cmp	r3, #0
 800e898:	d02e      	beq.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d12a      	bne.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e8a2:	4b51      	ldr	r3, [pc, #324]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e8a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8a8:	0c1b      	lsrs	r3, r3, #16
 800e8aa:	f003 0303 	and.w	r3, r3, #3
 800e8ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e8b0:	4b4d      	ldr	r3, [pc, #308]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e8b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8b6:	0f1b      	lsrs	r3, r3, #28
 800e8b8:	f003 0307 	and.w	r3, r3, #7
 800e8bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	695b      	ldr	r3, [r3, #20]
 800e8c2:	019a      	lsls	r2, r3, #6
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	041b      	lsls	r3, r3, #16
 800e8c8:	431a      	orrs	r2, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	699b      	ldr	r3, [r3, #24]
 800e8ce:	061b      	lsls	r3, r3, #24
 800e8d0:	431a      	orrs	r2, r3
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	071b      	lsls	r3, r3, #28
 800e8d6:	4944      	ldr	r1, [pc, #272]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e8de:	4b42      	ldr	r3, [pc, #264]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e8e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	021b      	lsls	r3, r3, #8
 800e8f0:	493d      	ldr	r1, [pc, #244]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e900:	2b00      	cmp	r3, #0
 800e902:	d022      	beq.n	800e94a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e90c:	d11d      	bne.n	800e94a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e90e:	4b36      	ldr	r3, [pc, #216]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e914:	0e1b      	lsrs	r3, r3, #24
 800e916:	f003 030f 	and.w	r3, r3, #15
 800e91a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e91c:	4b32      	ldr	r3, [pc, #200]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e91e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e922:	0f1b      	lsrs	r3, r3, #28
 800e924:	f003 0307 	and.w	r3, r3, #7
 800e928:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	695b      	ldr	r3, [r3, #20]
 800e92e:	019a      	lsls	r2, r3, #6
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6a1b      	ldr	r3, [r3, #32]
 800e934:	041b      	lsls	r3, r3, #16
 800e936:	431a      	orrs	r2, r3
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	061b      	lsls	r3, r3, #24
 800e93c:	431a      	orrs	r2, r3
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	071b      	lsls	r3, r3, #28
 800e942:	4929      	ldr	r1, [pc, #164]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e944:	4313      	orrs	r3, r2
 800e946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f003 0308 	and.w	r3, r3, #8
 800e952:	2b00      	cmp	r3, #0
 800e954:	d028      	beq.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e956:	4b24      	ldr	r3, [pc, #144]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e95c:	0e1b      	lsrs	r3, r3, #24
 800e95e:	f003 030f 	and.w	r3, r3, #15
 800e962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e964:	4b20      	ldr	r3, [pc, #128]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e96a:	0c1b      	lsrs	r3, r3, #16
 800e96c:	f003 0303 	and.w	r3, r3, #3
 800e970:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	695b      	ldr	r3, [r3, #20]
 800e976:	019a      	lsls	r2, r3, #6
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	041b      	lsls	r3, r3, #16
 800e97c:	431a      	orrs	r2, r3
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	061b      	lsls	r3, r3, #24
 800e982:	431a      	orrs	r2, r3
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	69db      	ldr	r3, [r3, #28]
 800e988:	071b      	lsls	r3, r3, #28
 800e98a:	4917      	ldr	r1, [pc, #92]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e98c:	4313      	orrs	r3, r2
 800e98e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e992:	4b15      	ldr	r3, [pc, #84]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e998:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9a0:	4911      	ldr	r1, [pc, #68]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e9a8:	4b0f      	ldr	r3, [pc, #60]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4a0e      	ldr	r2, [pc, #56]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e9ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e9b4:	f7fc fa68 	bl	800ae88 <HAL_GetTick>
 800e9b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e9ba:	e008      	b.n	800e9ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e9bc:	f7fc fa64 	bl	800ae88 <HAL_GetTick>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	1ad3      	subs	r3, r2, r3
 800e9c6:	2b64      	cmp	r3, #100	; 0x64
 800e9c8:	d901      	bls.n	800e9ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e9ca:	2303      	movs	r3, #3
 800e9cc:	e007      	b.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e9ce:	4b06      	ldr	r3, [pc, #24]	; (800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e9d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9da:	d1ef      	bne.n	800e9bc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800e9dc:	2300      	movs	r3, #0
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3720      	adds	r7, #32
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	40023800 	.word	0x40023800

0800e9ec <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	60b9      	str	r1, [r7, #8]
 800e9f6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d101      	bne.n	800ea02 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800e9fe:	2301      	movs	r3, #1
 800ea00:	e038      	b.n	800ea74 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d106      	bne.n	800ea1c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	2200      	movs	r2, #0
 800ea12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800ea16:	68f8      	ldr	r0, [r7, #12]
 800ea18:	f7fb fef2 	bl	800a800 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	3308      	adds	r3, #8
 800ea24:	4619      	mov	r1, r3
 800ea26:	4610      	mov	r0, r2
 800ea28:	f002 f846 	bl	8010ab8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	6818      	ldr	r0, [r3, #0]
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	461a      	mov	r2, r3
 800ea36:	68b9      	ldr	r1, [r7, #8]
 800ea38:	f002 f8ce 	bl	8010bd8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	6858      	ldr	r0, [r3, #4]
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	689a      	ldr	r2, [r3, #8]
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea48:	6879      	ldr	r1, [r7, #4]
 800ea4a:	f002 f915 	bl	8010c78 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	6892      	ldr	r2, [r2, #8]
 800ea56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	6892      	ldr	r2, [r2, #8]
 800ea62:	f041 0101 	orr.w	r1, r1, #1
 800ea66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3710      	adds	r7, #16
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d101      	bne.n	800ea8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	e049      	b.n	800eb22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d106      	bne.n	800eaa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f7fb fc62 	bl	800a36c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2202      	movs	r2, #2
 800eaac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	3304      	adds	r3, #4
 800eab8:	4619      	mov	r1, r3
 800eaba:	4610      	mov	r0, r2
 800eabc:	f000 f9f6 	bl	800eeac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2201      	movs	r2, #1
 800eac4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2201      	movs	r2, #1
 800eacc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2201      	movs	r2, #1
 800ead4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2201      	movs	r2, #1
 800eaec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2201      	movs	r2, #1
 800eafc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2201      	movs	r2, #1
 800eb04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2201      	movs	r2, #1
 800eb14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb20:	2300      	movs	r3, #0
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3708      	adds	r7, #8
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
	...

0800eb2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b085      	sub	sp, #20
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d001      	beq.n	800eb44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800eb40:	2301      	movs	r3, #1
 800eb42:	e054      	b.n	800ebee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2202      	movs	r2, #2
 800eb48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	68da      	ldr	r2, [r3, #12]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f042 0201 	orr.w	r2, r2, #1
 800eb5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	4a26      	ldr	r2, [pc, #152]	; (800ebfc <HAL_TIM_Base_Start_IT+0xd0>)
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d022      	beq.n	800ebac <HAL_TIM_Base_Start_IT+0x80>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb6e:	d01d      	beq.n	800ebac <HAL_TIM_Base_Start_IT+0x80>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4a22      	ldr	r2, [pc, #136]	; (800ec00 <HAL_TIM_Base_Start_IT+0xd4>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d018      	beq.n	800ebac <HAL_TIM_Base_Start_IT+0x80>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	4a21      	ldr	r2, [pc, #132]	; (800ec04 <HAL_TIM_Base_Start_IT+0xd8>)
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d013      	beq.n	800ebac <HAL_TIM_Base_Start_IT+0x80>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4a1f      	ldr	r2, [pc, #124]	; (800ec08 <HAL_TIM_Base_Start_IT+0xdc>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d00e      	beq.n	800ebac <HAL_TIM_Base_Start_IT+0x80>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	4a1e      	ldr	r2, [pc, #120]	; (800ec0c <HAL_TIM_Base_Start_IT+0xe0>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d009      	beq.n	800ebac <HAL_TIM_Base_Start_IT+0x80>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	4a1c      	ldr	r2, [pc, #112]	; (800ec10 <HAL_TIM_Base_Start_IT+0xe4>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d004      	beq.n	800ebac <HAL_TIM_Base_Start_IT+0x80>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	4a1b      	ldr	r2, [pc, #108]	; (800ec14 <HAL_TIM_Base_Start_IT+0xe8>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d115      	bne.n	800ebd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	689a      	ldr	r2, [r3, #8]
 800ebb2:	4b19      	ldr	r3, [pc, #100]	; (800ec18 <HAL_TIM_Base_Start_IT+0xec>)
 800ebb4:	4013      	ands	r3, r2
 800ebb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2b06      	cmp	r3, #6
 800ebbc:	d015      	beq.n	800ebea <HAL_TIM_Base_Start_IT+0xbe>
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebc4:	d011      	beq.n	800ebea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f042 0201 	orr.w	r2, r2, #1
 800ebd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebd6:	e008      	b.n	800ebea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f042 0201 	orr.w	r2, r2, #1
 800ebe6:	601a      	str	r2, [r3, #0]
 800ebe8:	e000      	b.n	800ebec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ebec:	2300      	movs	r3, #0
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3714      	adds	r7, #20
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	40010000 	.word	0x40010000
 800ec00:	40000400 	.word	0x40000400
 800ec04:	40000800 	.word	0x40000800
 800ec08:	40000c00 	.word	0x40000c00
 800ec0c:	40010400 	.word	0x40010400
 800ec10:	40014000 	.word	0x40014000
 800ec14:	40001800 	.word	0x40001800
 800ec18:	00010007 	.word	0x00010007

0800ec1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	691b      	ldr	r3, [r3, #16]
 800ec2a:	f003 0302 	and.w	r3, r3, #2
 800ec2e:	2b02      	cmp	r3, #2
 800ec30:	d122      	bne.n	800ec78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	f003 0302 	and.w	r3, r3, #2
 800ec3c:	2b02      	cmp	r3, #2
 800ec3e:	d11b      	bne.n	800ec78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f06f 0202 	mvn.w	r2, #2
 800ec48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	699b      	ldr	r3, [r3, #24]
 800ec56:	f003 0303 	and.w	r3, r3, #3
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d003      	beq.n	800ec66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f000 f905 	bl	800ee6e <HAL_TIM_IC_CaptureCallback>
 800ec64:	e005      	b.n	800ec72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 f8f7 	bl	800ee5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 f908 	bl	800ee82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2200      	movs	r2, #0
 800ec76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	691b      	ldr	r3, [r3, #16]
 800ec7e:	f003 0304 	and.w	r3, r3, #4
 800ec82:	2b04      	cmp	r3, #4
 800ec84:	d122      	bne.n	800eccc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	f003 0304 	and.w	r3, r3, #4
 800ec90:	2b04      	cmp	r3, #4
 800ec92:	d11b      	bne.n	800eccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f06f 0204 	mvn.w	r2, #4
 800ec9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2202      	movs	r2, #2
 800eca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	699b      	ldr	r3, [r3, #24]
 800ecaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d003      	beq.n	800ecba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 f8db 	bl	800ee6e <HAL_TIM_IC_CaptureCallback>
 800ecb8:	e005      	b.n	800ecc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 f8cd 	bl	800ee5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 f8de 	bl	800ee82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	691b      	ldr	r3, [r3, #16]
 800ecd2:	f003 0308 	and.w	r3, r3, #8
 800ecd6:	2b08      	cmp	r3, #8
 800ecd8:	d122      	bne.n	800ed20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	68db      	ldr	r3, [r3, #12]
 800ece0:	f003 0308 	and.w	r3, r3, #8
 800ece4:	2b08      	cmp	r3, #8
 800ece6:	d11b      	bne.n	800ed20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f06f 0208 	mvn.w	r2, #8
 800ecf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2204      	movs	r2, #4
 800ecf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	69db      	ldr	r3, [r3, #28]
 800ecfe:	f003 0303 	and.w	r3, r3, #3
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d003      	beq.n	800ed0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f000 f8b1 	bl	800ee6e <HAL_TIM_IC_CaptureCallback>
 800ed0c:	e005      	b.n	800ed1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f000 f8a3 	bl	800ee5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 f8b4 	bl	800ee82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	691b      	ldr	r3, [r3, #16]
 800ed26:	f003 0310 	and.w	r3, r3, #16
 800ed2a:	2b10      	cmp	r3, #16
 800ed2c:	d122      	bne.n	800ed74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	f003 0310 	and.w	r3, r3, #16
 800ed38:	2b10      	cmp	r3, #16
 800ed3a:	d11b      	bne.n	800ed74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f06f 0210 	mvn.w	r2, #16
 800ed44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2208      	movs	r2, #8
 800ed4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	69db      	ldr	r3, [r3, #28]
 800ed52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d003      	beq.n	800ed62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 f887 	bl	800ee6e <HAL_TIM_IC_CaptureCallback>
 800ed60:	e005      	b.n	800ed6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f000 f879 	bl	800ee5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f000 f88a 	bl	800ee82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	691b      	ldr	r3, [r3, #16]
 800ed7a:	f003 0301 	and.w	r3, r3, #1
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	d10e      	bne.n	800eda0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	68db      	ldr	r3, [r3, #12]
 800ed88:	f003 0301 	and.w	r3, r3, #1
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d107      	bne.n	800eda0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f06f 0201 	mvn.w	r2, #1
 800ed98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f7f3 f85a 	bl	8001e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	691b      	ldr	r3, [r3, #16]
 800eda6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edaa:	2b80      	cmp	r3, #128	; 0x80
 800edac:	d10e      	bne.n	800edcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	68db      	ldr	r3, [r3, #12]
 800edb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edb8:	2b80      	cmp	r3, #128	; 0x80
 800edba:	d107      	bne.n	800edcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800edc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 f9a8 	bl	800f11c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	691b      	ldr	r3, [r3, #16]
 800edd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edda:	d10e      	bne.n	800edfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	68db      	ldr	r3, [r3, #12]
 800ede2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ede6:	2b80      	cmp	r3, #128	; 0x80
 800ede8:	d107      	bne.n	800edfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800edf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 f99b 	bl	800f130 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	691b      	ldr	r3, [r3, #16]
 800ee00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee04:	2b40      	cmp	r3, #64	; 0x40
 800ee06:	d10e      	bne.n	800ee26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	68db      	ldr	r3, [r3, #12]
 800ee0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee12:	2b40      	cmp	r3, #64	; 0x40
 800ee14:	d107      	bne.n	800ee26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ee1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f000 f838 	bl	800ee96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	691b      	ldr	r3, [r3, #16]
 800ee2c:	f003 0320 	and.w	r3, r3, #32
 800ee30:	2b20      	cmp	r3, #32
 800ee32:	d10e      	bne.n	800ee52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	f003 0320 	and.w	r3, r3, #32
 800ee3e:	2b20      	cmp	r3, #32
 800ee40:	d107      	bne.n	800ee52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f06f 0220 	mvn.w	r2, #32
 800ee4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 f95b 	bl	800f108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ee52:	bf00      	nop
 800ee54:	3708      	adds	r7, #8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}

0800ee5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ee5a:	b480      	push	{r7}
 800ee5c:	b083      	sub	sp, #12
 800ee5e:	af00      	add	r7, sp, #0
 800ee60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ee62:	bf00      	nop
 800ee64:	370c      	adds	r7, #12
 800ee66:	46bd      	mov	sp, r7
 800ee68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6c:	4770      	bx	lr

0800ee6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ee6e:	b480      	push	{r7}
 800ee70:	b083      	sub	sp, #12
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ee76:	bf00      	nop
 800ee78:	370c      	adds	r7, #12
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr

0800ee82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ee82:	b480      	push	{r7}
 800ee84:	b083      	sub	sp, #12
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ee8a:	bf00      	nop
 800ee8c:	370c      	adds	r7, #12
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee94:	4770      	bx	lr

0800ee96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ee96:	b480      	push	{r7}
 800ee98:	b083      	sub	sp, #12
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ee9e:	bf00      	nop
 800eea0:	370c      	adds	r7, #12
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr
	...

0800eeac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b085      	sub	sp, #20
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a40      	ldr	r2, [pc, #256]	; (800efc0 <TIM_Base_SetConfig+0x114>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d013      	beq.n	800eeec <TIM_Base_SetConfig+0x40>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eeca:	d00f      	beq.n	800eeec <TIM_Base_SetConfig+0x40>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4a3d      	ldr	r2, [pc, #244]	; (800efc4 <TIM_Base_SetConfig+0x118>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d00b      	beq.n	800eeec <TIM_Base_SetConfig+0x40>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	4a3c      	ldr	r2, [pc, #240]	; (800efc8 <TIM_Base_SetConfig+0x11c>)
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d007      	beq.n	800eeec <TIM_Base_SetConfig+0x40>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	4a3b      	ldr	r2, [pc, #236]	; (800efcc <TIM_Base_SetConfig+0x120>)
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d003      	beq.n	800eeec <TIM_Base_SetConfig+0x40>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	4a3a      	ldr	r2, [pc, #232]	; (800efd0 <TIM_Base_SetConfig+0x124>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d108      	bne.n	800eefe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	685b      	ldr	r3, [r3, #4]
 800eef8:	68fa      	ldr	r2, [r7, #12]
 800eefa:	4313      	orrs	r3, r2
 800eefc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	4a2f      	ldr	r2, [pc, #188]	; (800efc0 <TIM_Base_SetConfig+0x114>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d02b      	beq.n	800ef5e <TIM_Base_SetConfig+0xb2>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef0c:	d027      	beq.n	800ef5e <TIM_Base_SetConfig+0xb2>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	4a2c      	ldr	r2, [pc, #176]	; (800efc4 <TIM_Base_SetConfig+0x118>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d023      	beq.n	800ef5e <TIM_Base_SetConfig+0xb2>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4a2b      	ldr	r2, [pc, #172]	; (800efc8 <TIM_Base_SetConfig+0x11c>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d01f      	beq.n	800ef5e <TIM_Base_SetConfig+0xb2>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4a2a      	ldr	r2, [pc, #168]	; (800efcc <TIM_Base_SetConfig+0x120>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d01b      	beq.n	800ef5e <TIM_Base_SetConfig+0xb2>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4a29      	ldr	r2, [pc, #164]	; (800efd0 <TIM_Base_SetConfig+0x124>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d017      	beq.n	800ef5e <TIM_Base_SetConfig+0xb2>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a28      	ldr	r2, [pc, #160]	; (800efd4 <TIM_Base_SetConfig+0x128>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d013      	beq.n	800ef5e <TIM_Base_SetConfig+0xb2>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4a27      	ldr	r2, [pc, #156]	; (800efd8 <TIM_Base_SetConfig+0x12c>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d00f      	beq.n	800ef5e <TIM_Base_SetConfig+0xb2>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4a26      	ldr	r2, [pc, #152]	; (800efdc <TIM_Base_SetConfig+0x130>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d00b      	beq.n	800ef5e <TIM_Base_SetConfig+0xb2>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4a25      	ldr	r2, [pc, #148]	; (800efe0 <TIM_Base_SetConfig+0x134>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d007      	beq.n	800ef5e <TIM_Base_SetConfig+0xb2>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a24      	ldr	r2, [pc, #144]	; (800efe4 <TIM_Base_SetConfig+0x138>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d003      	beq.n	800ef5e <TIM_Base_SetConfig+0xb2>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a23      	ldr	r2, [pc, #140]	; (800efe8 <TIM_Base_SetConfig+0x13c>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d108      	bne.n	800ef70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	68db      	ldr	r3, [r3, #12]
 800ef6a:	68fa      	ldr	r2, [r7, #12]
 800ef6c:	4313      	orrs	r3, r2
 800ef6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	695b      	ldr	r3, [r3, #20]
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	689a      	ldr	r2, [r3, #8]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	4a0a      	ldr	r2, [pc, #40]	; (800efc0 <TIM_Base_SetConfig+0x114>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d003      	beq.n	800efa4 <TIM_Base_SetConfig+0xf8>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	4a0c      	ldr	r2, [pc, #48]	; (800efd0 <TIM_Base_SetConfig+0x124>)
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d103      	bne.n	800efac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	691a      	ldr	r2, [r3, #16]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2201      	movs	r2, #1
 800efb0:	615a      	str	r2, [r3, #20]
}
 800efb2:	bf00      	nop
 800efb4:	3714      	adds	r7, #20
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr
 800efbe:	bf00      	nop
 800efc0:	40010000 	.word	0x40010000
 800efc4:	40000400 	.word	0x40000400
 800efc8:	40000800 	.word	0x40000800
 800efcc:	40000c00 	.word	0x40000c00
 800efd0:	40010400 	.word	0x40010400
 800efd4:	40014000 	.word	0x40014000
 800efd8:	40014400 	.word	0x40014400
 800efdc:	40014800 	.word	0x40014800
 800efe0:	40001800 	.word	0x40001800
 800efe4:	40001c00 	.word	0x40001c00
 800efe8:	40002000 	.word	0x40002000

0800efec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800efec:	b480      	push	{r7}
 800efee:	b085      	sub	sp, #20
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800effc:	2b01      	cmp	r3, #1
 800effe:	d101      	bne.n	800f004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f000:	2302      	movs	r3, #2
 800f002:	e06d      	b.n	800f0e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2202      	movs	r2, #2
 800f010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	689b      	ldr	r3, [r3, #8]
 800f022:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4a30      	ldr	r2, [pc, #192]	; (800f0ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d004      	beq.n	800f038 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4a2f      	ldr	r2, [pc, #188]	; (800f0f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d108      	bne.n	800f04a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f03e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	68fa      	ldr	r2, [r7, #12]
 800f046:	4313      	orrs	r3, r2
 800f048:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f050:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	68fa      	ldr	r2, [r7, #12]
 800f058:	4313      	orrs	r3, r2
 800f05a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a20      	ldr	r2, [pc, #128]	; (800f0ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d022      	beq.n	800f0b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f076:	d01d      	beq.n	800f0b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a1d      	ldr	r2, [pc, #116]	; (800f0f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d018      	beq.n	800f0b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4a1c      	ldr	r2, [pc, #112]	; (800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d013      	beq.n	800f0b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a1a      	ldr	r2, [pc, #104]	; (800f0fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d00e      	beq.n	800f0b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4a15      	ldr	r2, [pc, #84]	; (800f0f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d009      	beq.n	800f0b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4a16      	ldr	r2, [pc, #88]	; (800f100 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d004      	beq.n	800f0b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	4a15      	ldr	r2, [pc, #84]	; (800f104 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d10c      	bne.n	800f0ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f0ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	68ba      	ldr	r2, [r7, #8]
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	68ba      	ldr	r2, [r7, #8]
 800f0cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3714      	adds	r7, #20
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr
 800f0ec:	40010000 	.word	0x40010000
 800f0f0:	40010400 	.word	0x40010400
 800f0f4:	40000400 	.word	0x40000400
 800f0f8:	40000800 	.word	0x40000800
 800f0fc:	40000c00 	.word	0x40000c00
 800f100:	40014000 	.word	0x40014000
 800f104:	40001800 	.word	0x40001800

0800f108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f110:	bf00      	nop
 800f112:	370c      	adds	r7, #12
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr

0800f11c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b083      	sub	sp, #12
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f124:	bf00      	nop
 800f126:	370c      	adds	r7, #12
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr

0800f130 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f138:	bf00      	nop
 800f13a:	370c      	adds	r7, #12
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b082      	sub	sp, #8
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d101      	bne.n	800f156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f152:	2301      	movs	r3, #1
 800f154:	e040      	b.n	800f1d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d106      	bne.n	800f16c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2200      	movs	r2, #0
 800f162:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f7fb f926 	bl	800a3b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2224      	movs	r2, #36	; 0x24
 800f170:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f022 0201 	bic.w	r2, r2, #1
 800f180:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 fd08 	bl	800fb98 <UART_SetConfig>
 800f188:	4603      	mov	r3, r0
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d101      	bne.n	800f192 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f18e:	2301      	movs	r3, #1
 800f190:	e022      	b.n	800f1d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f196:	2b00      	cmp	r3, #0
 800f198:	d002      	beq.n	800f1a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 ff60 	bl	8010060 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	685a      	ldr	r2, [r3, #4]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f1ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	689a      	ldr	r2, [r3, #8]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f1be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	681a      	ldr	r2, [r3, #0]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f042 0201 	orr.w	r2, r2, #1
 800f1ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f000 ffe7 	bl	80101a4 <UART_CheckIdleState>
 800f1d6:	4603      	mov	r3, r0
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3708      	adds	r7, #8
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b08a      	sub	sp, #40	; 0x28
 800f1e4:	af02      	add	r7, sp, #8
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	603b      	str	r3, [r7, #0]
 800f1ec:	4613      	mov	r3, r2
 800f1ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1f4:	2b20      	cmp	r3, #32
 800f1f6:	d171      	bne.n	800f2dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d002      	beq.n	800f204 <HAL_UART_Transmit+0x24>
 800f1fe:	88fb      	ldrh	r3, [r7, #6]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d101      	bne.n	800f208 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f204:	2301      	movs	r3, #1
 800f206:	e06a      	b.n	800f2de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	2200      	movs	r2, #0
 800f20c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	2221      	movs	r2, #33	; 0x21
 800f214:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f216:	f7fb fe37 	bl	800ae88 <HAL_GetTick>
 800f21a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	88fa      	ldrh	r2, [r7, #6]
 800f220:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	88fa      	ldrh	r2, [r7, #6]
 800f228:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	689b      	ldr	r3, [r3, #8]
 800f230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f234:	d108      	bne.n	800f248 <HAL_UART_Transmit+0x68>
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	691b      	ldr	r3, [r3, #16]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d104      	bne.n	800f248 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800f23e:	2300      	movs	r3, #0
 800f240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	61bb      	str	r3, [r7, #24]
 800f246:	e003      	b.n	800f250 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f24c:	2300      	movs	r3, #0
 800f24e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f250:	e02c      	b.n	800f2ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	9300      	str	r3, [sp, #0]
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	2200      	movs	r2, #0
 800f25a:	2180      	movs	r1, #128	; 0x80
 800f25c:	68f8      	ldr	r0, [r7, #12]
 800f25e:	f000 ffd8 	bl	8010212 <UART_WaitOnFlagUntilTimeout>
 800f262:	4603      	mov	r3, r0
 800f264:	2b00      	cmp	r3, #0
 800f266:	d001      	beq.n	800f26c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800f268:	2303      	movs	r3, #3
 800f26a:	e038      	b.n	800f2de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800f26c:	69fb      	ldr	r3, [r7, #28]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d10b      	bne.n	800f28a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	881b      	ldrh	r3, [r3, #0]
 800f276:	461a      	mov	r2, r3
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f280:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f282:	69bb      	ldr	r3, [r7, #24]
 800f284:	3302      	adds	r3, #2
 800f286:	61bb      	str	r3, [r7, #24]
 800f288:	e007      	b.n	800f29a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	781a      	ldrb	r2, [r3, #0]
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f294:	69fb      	ldr	r3, [r7, #28]
 800f296:	3301      	adds	r3, #1
 800f298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f2a0:	b29b      	uxth	r3, r3
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	b29a      	uxth	r2, r3
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d1cc      	bne.n	800f252 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	9300      	str	r3, [sp, #0]
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	2140      	movs	r1, #64	; 0x40
 800f2c2:	68f8      	ldr	r0, [r7, #12]
 800f2c4:	f000 ffa5 	bl	8010212 <UART_WaitOnFlagUntilTimeout>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d001      	beq.n	800f2d2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800f2ce:	2303      	movs	r3, #3
 800f2d0:	e005      	b.n	800f2de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2220      	movs	r2, #32
 800f2d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	e000      	b.n	800f2de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800f2dc:	2302      	movs	r3, #2
  }
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3720      	adds	r7, #32
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}

0800f2e6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2e6:	b580      	push	{r7, lr}
 800f2e8:	b08a      	sub	sp, #40	; 0x28
 800f2ea:	af02      	add	r7, sp, #8
 800f2ec:	60f8      	str	r0, [r7, #12]
 800f2ee:	60b9      	str	r1, [r7, #8]
 800f2f0:	603b      	str	r3, [r7, #0]
 800f2f2:	4613      	mov	r3, r2
 800f2f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f2fc:	2b20      	cmp	r3, #32
 800f2fe:	f040 80b1 	bne.w	800f464 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d002      	beq.n	800f30e <HAL_UART_Receive+0x28>
 800f308:	88fb      	ldrh	r3, [r7, #6]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d101      	bne.n	800f312 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f30e:	2301      	movs	r3, #1
 800f310:	e0a9      	b.n	800f466 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2200      	movs	r2, #0
 800f316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2222      	movs	r2, #34	; 0x22
 800f31e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2200      	movs	r2, #0
 800f326:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f328:	f7fb fdae 	bl	800ae88 <HAL_GetTick>
 800f32c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	88fa      	ldrh	r2, [r7, #6]
 800f332:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	88fa      	ldrh	r2, [r7, #6]
 800f33a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	689b      	ldr	r3, [r3, #8]
 800f342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f346:	d10e      	bne.n	800f366 <HAL_UART_Receive+0x80>
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	691b      	ldr	r3, [r3, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d105      	bne.n	800f35c <HAL_UART_Receive+0x76>
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f356:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f35a:	e02d      	b.n	800f3b8 <HAL_UART_Receive+0xd2>
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	22ff      	movs	r2, #255	; 0xff
 800f360:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f364:	e028      	b.n	800f3b8 <HAL_UART_Receive+0xd2>
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	689b      	ldr	r3, [r3, #8]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d10d      	bne.n	800f38a <HAL_UART_Receive+0xa4>
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	691b      	ldr	r3, [r3, #16]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d104      	bne.n	800f380 <HAL_UART_Receive+0x9a>
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	22ff      	movs	r2, #255	; 0xff
 800f37a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f37e:	e01b      	b.n	800f3b8 <HAL_UART_Receive+0xd2>
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	227f      	movs	r2, #127	; 0x7f
 800f384:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f388:	e016      	b.n	800f3b8 <HAL_UART_Receive+0xd2>
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	689b      	ldr	r3, [r3, #8]
 800f38e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f392:	d10d      	bne.n	800f3b0 <HAL_UART_Receive+0xca>
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	691b      	ldr	r3, [r3, #16]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d104      	bne.n	800f3a6 <HAL_UART_Receive+0xc0>
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	227f      	movs	r2, #127	; 0x7f
 800f3a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f3a4:	e008      	b.n	800f3b8 <HAL_UART_Receive+0xd2>
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	223f      	movs	r2, #63	; 0x3f
 800f3aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f3ae:	e003      	b.n	800f3b8 <HAL_UART_Receive+0xd2>
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f3be:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	689b      	ldr	r3, [r3, #8]
 800f3c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3c8:	d108      	bne.n	800f3dc <HAL_UART_Receive+0xf6>
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	691b      	ldr	r3, [r3, #16]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d104      	bne.n	800f3dc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	61bb      	str	r3, [r7, #24]
 800f3da:	e003      	b.n	800f3e4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f3e4:	e032      	b.n	800f44c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	9300      	str	r3, [sp, #0]
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	2120      	movs	r1, #32
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f000 ff0e 	bl	8010212 <UART_WaitOnFlagUntilTimeout>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d001      	beq.n	800f400 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800f3fc:	2303      	movs	r3, #3
 800f3fe:	e032      	b.n	800f466 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d10c      	bne.n	800f420 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f40c:	b29a      	uxth	r2, r3
 800f40e:	8a7b      	ldrh	r3, [r7, #18]
 800f410:	4013      	ands	r3, r2
 800f412:	b29a      	uxth	r2, r3
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f418:	69bb      	ldr	r3, [r7, #24]
 800f41a:	3302      	adds	r3, #2
 800f41c:	61bb      	str	r3, [r7, #24]
 800f41e:	e00c      	b.n	800f43a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f426:	b2da      	uxtb	r2, r3
 800f428:	8a7b      	ldrh	r3, [r7, #18]
 800f42a:	b2db      	uxtb	r3, r3
 800f42c:	4013      	ands	r3, r2
 800f42e:	b2da      	uxtb	r2, r3
 800f430:	69fb      	ldr	r3, [r7, #28]
 800f432:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	3301      	adds	r3, #1
 800f438:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f440:	b29b      	uxth	r3, r3
 800f442:	3b01      	subs	r3, #1
 800f444:	b29a      	uxth	r2, r3
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f452:	b29b      	uxth	r3, r3
 800f454:	2b00      	cmp	r3, #0
 800f456:	d1c6      	bne.n	800f3e6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2220      	movs	r2, #32
 800f45c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800f460:	2300      	movs	r3, #0
 800f462:	e000      	b.n	800f466 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800f464:	2302      	movs	r3, #2
  }
}
 800f466:	4618      	mov	r0, r3
 800f468:	3720      	adds	r7, #32
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
	...

0800f470 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f470:	b480      	push	{r7}
 800f472:	b08b      	sub	sp, #44	; 0x2c
 800f474:	af00      	add	r7, sp, #0
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	4613      	mov	r3, r2
 800f47c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f482:	2b20      	cmp	r3, #32
 800f484:	d147      	bne.n	800f516 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d002      	beq.n	800f492 <HAL_UART_Transmit_IT+0x22>
 800f48c:	88fb      	ldrh	r3, [r7, #6]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d101      	bne.n	800f496 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800f492:	2301      	movs	r3, #1
 800f494:	e040      	b.n	800f518 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	68ba      	ldr	r2, [r7, #8]
 800f49a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	88fa      	ldrh	r2, [r7, #6]
 800f4a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	88fa      	ldrh	r2, [r7, #6]
 800f4a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2221      	movs	r2, #33	; 0x21
 800f4be:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	689b      	ldr	r3, [r3, #8]
 800f4c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4c8:	d107      	bne.n	800f4da <HAL_UART_Transmit_IT+0x6a>
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	691b      	ldr	r3, [r3, #16]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d103      	bne.n	800f4da <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	4a13      	ldr	r2, [pc, #76]	; (800f524 <HAL_UART_Transmit_IT+0xb4>)
 800f4d6:	66da      	str	r2, [r3, #108]	; 0x6c
 800f4d8:	e002      	b.n	800f4e0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	4a12      	ldr	r2, [pc, #72]	; (800f528 <HAL_UART_Transmit_IT+0xb8>)
 800f4de:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	e853 3f00 	ldrex	r3, [r3]
 800f4ec:	613b      	str	r3, [r7, #16]
   return(result);
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4f4:	627b      	str	r3, [r7, #36]	; 0x24
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fe:	623b      	str	r3, [r7, #32]
 800f500:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f502:	69f9      	ldr	r1, [r7, #28]
 800f504:	6a3a      	ldr	r2, [r7, #32]
 800f506:	e841 2300 	strex	r3, r2, [r1]
 800f50a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f50c:	69bb      	ldr	r3, [r7, #24]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d1e6      	bne.n	800f4e0 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800f512:	2300      	movs	r3, #0
 800f514:	e000      	b.n	800f518 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800f516:	2302      	movs	r3, #2
  }
}
 800f518:	4618      	mov	r0, r3
 800f51a:	372c      	adds	r7, #44	; 0x2c
 800f51c:	46bd      	mov	sp, r7
 800f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f522:	4770      	bx	lr
 800f524:	080106d7 	.word	0x080106d7
 800f528:	08010621 	.word	0x08010621

0800f52c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b08a      	sub	sp, #40	; 0x28
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	4613      	mov	r3, r2
 800f538:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f540:	2b20      	cmp	r3, #32
 800f542:	d132      	bne.n	800f5aa <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d002      	beq.n	800f550 <HAL_UART_Receive_IT+0x24>
 800f54a:	88fb      	ldrh	r3, [r7, #6]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d101      	bne.n	800f554 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f550:	2301      	movs	r3, #1
 800f552:	e02b      	b.n	800f5ac <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2200      	movs	r2, #0
 800f558:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f564:	2b00      	cmp	r3, #0
 800f566:	d018      	beq.n	800f59a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	e853 3f00 	ldrex	r3, [r3]
 800f574:	613b      	str	r3, [r7, #16]
   return(result);
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f57c:	627b      	str	r3, [r7, #36]	; 0x24
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	461a      	mov	r2, r3
 800f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f586:	623b      	str	r3, [r7, #32]
 800f588:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f58a:	69f9      	ldr	r1, [r7, #28]
 800f58c:	6a3a      	ldr	r2, [r7, #32]
 800f58e:	e841 2300 	strex	r3, r2, [r1]
 800f592:	61bb      	str	r3, [r7, #24]
   return(result);
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d1e6      	bne.n	800f568 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f59a:	88fb      	ldrh	r3, [r7, #6]
 800f59c:	461a      	mov	r2, r3
 800f59e:	68b9      	ldr	r1, [r7, #8]
 800f5a0:	68f8      	ldr	r0, [r7, #12]
 800f5a2:	f000 fefd 	bl	80103a0 <UART_Start_Receive_IT>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	e000      	b.n	800f5ac <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800f5aa:	2302      	movs	r3, #2
  }
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3728      	adds	r7, #40	; 0x28
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}

0800f5b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b0ba      	sub	sp, #232	; 0xe8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	69db      	ldr	r3, [r3, #28]
 800f5c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	689b      	ldr	r3, [r3, #8]
 800f5d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f5da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f5de:	f640 030f 	movw	r3, #2063	; 0x80f
 800f5e2:	4013      	ands	r3, r2
 800f5e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f5e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d115      	bne.n	800f61c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5f4:	f003 0320 	and.w	r3, r3, #32
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d00f      	beq.n	800f61c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f5fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f600:	f003 0320 	and.w	r3, r3, #32
 800f604:	2b00      	cmp	r3, #0
 800f606:	d009      	beq.n	800f61c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	f000 8297 	beq.w	800fb40 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	4798      	blx	r3
      }
      return;
 800f61a:	e291      	b.n	800fb40 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f61c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f620:	2b00      	cmp	r3, #0
 800f622:	f000 8117 	beq.w	800f854 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f62a:	f003 0301 	and.w	r3, r3, #1
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d106      	bne.n	800f640 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f632:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f636:	4b85      	ldr	r3, [pc, #532]	; (800f84c <HAL_UART_IRQHandler+0x298>)
 800f638:	4013      	ands	r3, r2
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f000 810a 	beq.w	800f854 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f644:	f003 0301 	and.w	r3, r3, #1
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d011      	beq.n	800f670 <HAL_UART_IRQHandler+0xbc>
 800f64c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f654:	2b00      	cmp	r3, #0
 800f656:	d00b      	beq.n	800f670 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	2201      	movs	r2, #1
 800f65e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f666:	f043 0201 	orr.w	r2, r3, #1
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f674:	f003 0302 	and.w	r3, r3, #2
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d011      	beq.n	800f6a0 <HAL_UART_IRQHandler+0xec>
 800f67c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f680:	f003 0301 	and.w	r3, r3, #1
 800f684:	2b00      	cmp	r3, #0
 800f686:	d00b      	beq.n	800f6a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	2202      	movs	r2, #2
 800f68e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f696:	f043 0204 	orr.w	r2, r3, #4
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6a4:	f003 0304 	and.w	r3, r3, #4
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d011      	beq.n	800f6d0 <HAL_UART_IRQHandler+0x11c>
 800f6ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f6b0:	f003 0301 	and.w	r3, r3, #1
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00b      	beq.n	800f6d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2204      	movs	r2, #4
 800f6be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6c6:	f043 0202 	orr.w	r2, r3, #2
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6d4:	f003 0308 	and.w	r3, r3, #8
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d017      	beq.n	800f70c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f6dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f6e0:	f003 0320 	and.w	r3, r3, #32
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d105      	bne.n	800f6f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f6e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f6ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d00b      	beq.n	800f70c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2208      	movs	r2, #8
 800f6fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f702:	f043 0208 	orr.w	r2, r3, #8
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f714:	2b00      	cmp	r3, #0
 800f716:	d012      	beq.n	800f73e <HAL_UART_IRQHandler+0x18a>
 800f718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f71c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f720:	2b00      	cmp	r3, #0
 800f722:	d00c      	beq.n	800f73e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f72c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f734:	f043 0220 	orr.w	r2, r3, #32
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f744:	2b00      	cmp	r3, #0
 800f746:	f000 81fd 	beq.w	800fb44 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f74a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f74e:	f003 0320 	and.w	r3, r3, #32
 800f752:	2b00      	cmp	r3, #0
 800f754:	d00d      	beq.n	800f772 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f75a:	f003 0320 	and.w	r3, r3, #32
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d007      	beq.n	800f772 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f766:	2b00      	cmp	r3, #0
 800f768:	d003      	beq.n	800f772 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f778:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	689b      	ldr	r3, [r3, #8]
 800f782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f786:	2b40      	cmp	r3, #64	; 0x40
 800f788:	d005      	beq.n	800f796 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f78a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f78e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f792:	2b00      	cmp	r3, #0
 800f794:	d04f      	beq.n	800f836 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 fec8 	bl	801052c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	689b      	ldr	r3, [r3, #8]
 800f7a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7a6:	2b40      	cmp	r3, #64	; 0x40
 800f7a8:	d141      	bne.n	800f82e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	3308      	adds	r3, #8
 800f7b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f7b8:	e853 3f00 	ldrex	r3, [r3]
 800f7bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f7c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f7c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	3308      	adds	r3, #8
 800f7d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f7d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f7da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f7e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f7e6:	e841 2300 	strex	r3, r2, [r1]
 800f7ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f7ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1d9      	bne.n	800f7aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d013      	beq.n	800f826 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f802:	4a13      	ldr	r2, [pc, #76]	; (800f850 <HAL_UART_IRQHandler+0x29c>)
 800f804:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7fc fbc4 	bl	800bf98 <HAL_DMA_Abort_IT>
 800f810:	4603      	mov	r3, r0
 800f812:	2b00      	cmp	r3, #0
 800f814:	d017      	beq.n	800f846 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f81a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800f820:	4610      	mov	r0, r2
 800f822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f824:	e00f      	b.n	800f846 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f000 f9a0 	bl	800fb6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f82c:	e00b      	b.n	800f846 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f000 f99c 	bl	800fb6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f834:	e007      	b.n	800f846 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 f998 	bl	800fb6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2200      	movs	r2, #0
 800f840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800f844:	e17e      	b.n	800fb44 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f846:	bf00      	nop
    return;
 800f848:	e17c      	b.n	800fb44 <HAL_UART_IRQHandler+0x590>
 800f84a:	bf00      	nop
 800f84c:	04000120 	.word	0x04000120
 800f850:	080105f5 	.word	0x080105f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f858:	2b01      	cmp	r3, #1
 800f85a:	f040 814c 	bne.w	800faf6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f85e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f862:	f003 0310 	and.w	r3, r3, #16
 800f866:	2b00      	cmp	r3, #0
 800f868:	f000 8145 	beq.w	800faf6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f86c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f870:	f003 0310 	and.w	r3, r3, #16
 800f874:	2b00      	cmp	r3, #0
 800f876:	f000 813e 	beq.w	800faf6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2210      	movs	r2, #16
 800f880:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	689b      	ldr	r3, [r3, #8]
 800f888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f88c:	2b40      	cmp	r3, #64	; 0x40
 800f88e:	f040 80b6 	bne.w	800f9fe <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f89e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	f000 8150 	beq.w	800fb48 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f8ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	f080 8148 	bcs.w	800fb48 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f8be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8c6:	69db      	ldr	r3, [r3, #28]
 800f8c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8cc:	f000 8086 	beq.w	800f9dc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8dc:	e853 3f00 	ldrex	r3, [r3]
 800f8e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f8e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f8e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f8fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f8fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f902:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f906:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f90a:	e841 2300 	strex	r3, r2, [r1]
 800f90e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f916:	2b00      	cmp	r3, #0
 800f918:	d1da      	bne.n	800f8d0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	3308      	adds	r3, #8
 800f920:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f924:	e853 3f00 	ldrex	r3, [r3]
 800f928:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f92a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f92c:	f023 0301 	bic.w	r3, r3, #1
 800f930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	3308      	adds	r3, #8
 800f93a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f93e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f942:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f944:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f946:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f94a:	e841 2300 	strex	r3, r2, [r1]
 800f94e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f952:	2b00      	cmp	r3, #0
 800f954:	d1e1      	bne.n	800f91a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	3308      	adds	r3, #8
 800f95c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f95e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f960:	e853 3f00 	ldrex	r3, [r3]
 800f964:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f96c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	3308      	adds	r3, #8
 800f976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f97a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f97c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f97e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f982:	e841 2300 	strex	r3, r2, [r1]
 800f986:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d1e3      	bne.n	800f956 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2220      	movs	r2, #32
 800f992:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2200      	movs	r2, #0
 800f99a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9a4:	e853 3f00 	ldrex	r3, [r3]
 800f9a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f9aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9ac:	f023 0310 	bic.w	r3, r3, #16
 800f9b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f9be:	65bb      	str	r3, [r7, #88]	; 0x58
 800f9c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f9c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f9c6:	e841 2300 	strex	r3, r2, [r1]
 800f9ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f9cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1e4      	bne.n	800f99c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7fc fa6e 	bl	800beb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2202      	movs	r2, #2
 800f9e0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f000 f8c2 	bl	800fb80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f9fc:	e0a4      	b.n	800fb48 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fa0a:	b29b      	uxth	r3, r3
 800fa0c:	1ad3      	subs	r3, r2, r3
 800fa0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	f000 8096 	beq.w	800fb4c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800fa20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	f000 8091 	beq.w	800fb4c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa32:	e853 3f00 	ldrex	r3, [r3]
 800fa36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fa38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fa3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	461a      	mov	r2, r3
 800fa48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fa4c:	647b      	str	r3, [r7, #68]	; 0x44
 800fa4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa54:	e841 2300 	strex	r3, r2, [r1]
 800fa58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fa5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d1e4      	bne.n	800fa2a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	3308      	adds	r3, #8
 800fa66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6a:	e853 3f00 	ldrex	r3, [r3]
 800fa6e:	623b      	str	r3, [r7, #32]
   return(result);
 800fa70:	6a3b      	ldr	r3, [r7, #32]
 800fa72:	f023 0301 	bic.w	r3, r3, #1
 800fa76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	3308      	adds	r3, #8
 800fa80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fa84:	633a      	str	r2, [r7, #48]	; 0x30
 800fa86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa8c:	e841 2300 	strex	r3, r2, [r1]
 800fa90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d1e3      	bne.n	800fa60 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2220      	movs	r2, #32
 800fa9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2200      	movs	r2, #0
 800faa4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2200      	movs	r2, #0
 800faaa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	e853 3f00 	ldrex	r3, [r3]
 800fab8:	60fb      	str	r3, [r7, #12]
   return(result);
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f023 0310 	bic.w	r3, r3, #16
 800fac0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	461a      	mov	r2, r3
 800faca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800face:	61fb      	str	r3, [r7, #28]
 800fad0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fad2:	69b9      	ldr	r1, [r7, #24]
 800fad4:	69fa      	ldr	r2, [r7, #28]
 800fad6:	e841 2300 	strex	r3, r2, [r1]
 800fada:	617b      	str	r3, [r7, #20]
   return(result);
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d1e4      	bne.n	800faac <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2202      	movs	r2, #2
 800fae6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800faec:	4619      	mov	r1, r3
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f000 f846 	bl	800fb80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800faf4:	e02a      	b.n	800fb4c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800faf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fafa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d00e      	beq.n	800fb20 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800fb02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d008      	beq.n	800fb20 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d01c      	beq.n	800fb50 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	4798      	blx	r3
    }
    return;
 800fb1e:	e017      	b.n	800fb50 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fb20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d012      	beq.n	800fb52 <HAL_UART_IRQHandler+0x59e>
 800fb2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d00c      	beq.n	800fb52 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f000 fe2c 	bl	8010796 <UART_EndTransmit_IT>
    return;
 800fb3e:	e008      	b.n	800fb52 <HAL_UART_IRQHandler+0x59e>
      return;
 800fb40:	bf00      	nop
 800fb42:	e006      	b.n	800fb52 <HAL_UART_IRQHandler+0x59e>
    return;
 800fb44:	bf00      	nop
 800fb46:	e004      	b.n	800fb52 <HAL_UART_IRQHandler+0x59e>
      return;
 800fb48:	bf00      	nop
 800fb4a:	e002      	b.n	800fb52 <HAL_UART_IRQHandler+0x59e>
      return;
 800fb4c:	bf00      	nop
 800fb4e:	e000      	b.n	800fb52 <HAL_UART_IRQHandler+0x59e>
    return;
 800fb50:	bf00      	nop
  }

}
 800fb52:	37e8      	adds	r7, #232	; 0xe8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fb60:	bf00      	nop
 800fb62:	370c      	adds	r7, #12
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr

0800fb6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fb74:	bf00      	nop
 800fb76:	370c      	adds	r7, #12
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b083      	sub	sp, #12
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	460b      	mov	r3, r1
 800fb8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fb8c:	bf00      	nop
 800fb8e:	370c      	adds	r7, #12
 800fb90:	46bd      	mov	sp, r7
 800fb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb96:	4770      	bx	lr

0800fb98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b088      	sub	sp, #32
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	689a      	ldr	r2, [r3, #8]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	691b      	ldr	r3, [r3, #16]
 800fbac:	431a      	orrs	r2, r3
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	695b      	ldr	r3, [r3, #20]
 800fbb2:	431a      	orrs	r2, r3
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	69db      	ldr	r3, [r3, #28]
 800fbb8:	4313      	orrs	r3, r2
 800fbba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	681a      	ldr	r2, [r3, #0]
 800fbc2:	4ba6      	ldr	r3, [pc, #664]	; (800fe5c <UART_SetConfig+0x2c4>)
 800fbc4:	4013      	ands	r3, r2
 800fbc6:	687a      	ldr	r2, [r7, #4]
 800fbc8:	6812      	ldr	r2, [r2, #0]
 800fbca:	6979      	ldr	r1, [r7, #20]
 800fbcc:	430b      	orrs	r3, r1
 800fbce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	68da      	ldr	r2, [r3, #12]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	430a      	orrs	r2, r1
 800fbe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	699b      	ldr	r3, [r3, #24]
 800fbea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6a1b      	ldr	r3, [r3, #32]
 800fbf0:	697a      	ldr	r2, [r7, #20]
 800fbf2:	4313      	orrs	r3, r2
 800fbf4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	689b      	ldr	r3, [r3, #8]
 800fbfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	697a      	ldr	r2, [r7, #20]
 800fc06:	430a      	orrs	r2, r1
 800fc08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	4a94      	ldr	r2, [pc, #592]	; (800fe60 <UART_SetConfig+0x2c8>)
 800fc10:	4293      	cmp	r3, r2
 800fc12:	d120      	bne.n	800fc56 <UART_SetConfig+0xbe>
 800fc14:	4b93      	ldr	r3, [pc, #588]	; (800fe64 <UART_SetConfig+0x2cc>)
 800fc16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc1a:	f003 0303 	and.w	r3, r3, #3
 800fc1e:	2b03      	cmp	r3, #3
 800fc20:	d816      	bhi.n	800fc50 <UART_SetConfig+0xb8>
 800fc22:	a201      	add	r2, pc, #4	; (adr r2, 800fc28 <UART_SetConfig+0x90>)
 800fc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc28:	0800fc39 	.word	0x0800fc39
 800fc2c:	0800fc45 	.word	0x0800fc45
 800fc30:	0800fc3f 	.word	0x0800fc3f
 800fc34:	0800fc4b 	.word	0x0800fc4b
 800fc38:	2301      	movs	r3, #1
 800fc3a:	77fb      	strb	r3, [r7, #31]
 800fc3c:	e150      	b.n	800fee0 <UART_SetConfig+0x348>
 800fc3e:	2302      	movs	r3, #2
 800fc40:	77fb      	strb	r3, [r7, #31]
 800fc42:	e14d      	b.n	800fee0 <UART_SetConfig+0x348>
 800fc44:	2304      	movs	r3, #4
 800fc46:	77fb      	strb	r3, [r7, #31]
 800fc48:	e14a      	b.n	800fee0 <UART_SetConfig+0x348>
 800fc4a:	2308      	movs	r3, #8
 800fc4c:	77fb      	strb	r3, [r7, #31]
 800fc4e:	e147      	b.n	800fee0 <UART_SetConfig+0x348>
 800fc50:	2310      	movs	r3, #16
 800fc52:	77fb      	strb	r3, [r7, #31]
 800fc54:	e144      	b.n	800fee0 <UART_SetConfig+0x348>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	4a83      	ldr	r2, [pc, #524]	; (800fe68 <UART_SetConfig+0x2d0>)
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d132      	bne.n	800fcc6 <UART_SetConfig+0x12e>
 800fc60:	4b80      	ldr	r3, [pc, #512]	; (800fe64 <UART_SetConfig+0x2cc>)
 800fc62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc66:	f003 030c 	and.w	r3, r3, #12
 800fc6a:	2b0c      	cmp	r3, #12
 800fc6c:	d828      	bhi.n	800fcc0 <UART_SetConfig+0x128>
 800fc6e:	a201      	add	r2, pc, #4	; (adr r2, 800fc74 <UART_SetConfig+0xdc>)
 800fc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc74:	0800fca9 	.word	0x0800fca9
 800fc78:	0800fcc1 	.word	0x0800fcc1
 800fc7c:	0800fcc1 	.word	0x0800fcc1
 800fc80:	0800fcc1 	.word	0x0800fcc1
 800fc84:	0800fcb5 	.word	0x0800fcb5
 800fc88:	0800fcc1 	.word	0x0800fcc1
 800fc8c:	0800fcc1 	.word	0x0800fcc1
 800fc90:	0800fcc1 	.word	0x0800fcc1
 800fc94:	0800fcaf 	.word	0x0800fcaf
 800fc98:	0800fcc1 	.word	0x0800fcc1
 800fc9c:	0800fcc1 	.word	0x0800fcc1
 800fca0:	0800fcc1 	.word	0x0800fcc1
 800fca4:	0800fcbb 	.word	0x0800fcbb
 800fca8:	2300      	movs	r3, #0
 800fcaa:	77fb      	strb	r3, [r7, #31]
 800fcac:	e118      	b.n	800fee0 <UART_SetConfig+0x348>
 800fcae:	2302      	movs	r3, #2
 800fcb0:	77fb      	strb	r3, [r7, #31]
 800fcb2:	e115      	b.n	800fee0 <UART_SetConfig+0x348>
 800fcb4:	2304      	movs	r3, #4
 800fcb6:	77fb      	strb	r3, [r7, #31]
 800fcb8:	e112      	b.n	800fee0 <UART_SetConfig+0x348>
 800fcba:	2308      	movs	r3, #8
 800fcbc:	77fb      	strb	r3, [r7, #31]
 800fcbe:	e10f      	b.n	800fee0 <UART_SetConfig+0x348>
 800fcc0:	2310      	movs	r3, #16
 800fcc2:	77fb      	strb	r3, [r7, #31]
 800fcc4:	e10c      	b.n	800fee0 <UART_SetConfig+0x348>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4a68      	ldr	r2, [pc, #416]	; (800fe6c <UART_SetConfig+0x2d4>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d120      	bne.n	800fd12 <UART_SetConfig+0x17a>
 800fcd0:	4b64      	ldr	r3, [pc, #400]	; (800fe64 <UART_SetConfig+0x2cc>)
 800fcd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fcda:	2b30      	cmp	r3, #48	; 0x30
 800fcdc:	d013      	beq.n	800fd06 <UART_SetConfig+0x16e>
 800fcde:	2b30      	cmp	r3, #48	; 0x30
 800fce0:	d814      	bhi.n	800fd0c <UART_SetConfig+0x174>
 800fce2:	2b20      	cmp	r3, #32
 800fce4:	d009      	beq.n	800fcfa <UART_SetConfig+0x162>
 800fce6:	2b20      	cmp	r3, #32
 800fce8:	d810      	bhi.n	800fd0c <UART_SetConfig+0x174>
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d002      	beq.n	800fcf4 <UART_SetConfig+0x15c>
 800fcee:	2b10      	cmp	r3, #16
 800fcf0:	d006      	beq.n	800fd00 <UART_SetConfig+0x168>
 800fcf2:	e00b      	b.n	800fd0c <UART_SetConfig+0x174>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	77fb      	strb	r3, [r7, #31]
 800fcf8:	e0f2      	b.n	800fee0 <UART_SetConfig+0x348>
 800fcfa:	2302      	movs	r3, #2
 800fcfc:	77fb      	strb	r3, [r7, #31]
 800fcfe:	e0ef      	b.n	800fee0 <UART_SetConfig+0x348>
 800fd00:	2304      	movs	r3, #4
 800fd02:	77fb      	strb	r3, [r7, #31]
 800fd04:	e0ec      	b.n	800fee0 <UART_SetConfig+0x348>
 800fd06:	2308      	movs	r3, #8
 800fd08:	77fb      	strb	r3, [r7, #31]
 800fd0a:	e0e9      	b.n	800fee0 <UART_SetConfig+0x348>
 800fd0c:	2310      	movs	r3, #16
 800fd0e:	77fb      	strb	r3, [r7, #31]
 800fd10:	e0e6      	b.n	800fee0 <UART_SetConfig+0x348>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	4a56      	ldr	r2, [pc, #344]	; (800fe70 <UART_SetConfig+0x2d8>)
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d120      	bne.n	800fd5e <UART_SetConfig+0x1c6>
 800fd1c:	4b51      	ldr	r3, [pc, #324]	; (800fe64 <UART_SetConfig+0x2cc>)
 800fd1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fd26:	2bc0      	cmp	r3, #192	; 0xc0
 800fd28:	d013      	beq.n	800fd52 <UART_SetConfig+0x1ba>
 800fd2a:	2bc0      	cmp	r3, #192	; 0xc0
 800fd2c:	d814      	bhi.n	800fd58 <UART_SetConfig+0x1c0>
 800fd2e:	2b80      	cmp	r3, #128	; 0x80
 800fd30:	d009      	beq.n	800fd46 <UART_SetConfig+0x1ae>
 800fd32:	2b80      	cmp	r3, #128	; 0x80
 800fd34:	d810      	bhi.n	800fd58 <UART_SetConfig+0x1c0>
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d002      	beq.n	800fd40 <UART_SetConfig+0x1a8>
 800fd3a:	2b40      	cmp	r3, #64	; 0x40
 800fd3c:	d006      	beq.n	800fd4c <UART_SetConfig+0x1b4>
 800fd3e:	e00b      	b.n	800fd58 <UART_SetConfig+0x1c0>
 800fd40:	2300      	movs	r3, #0
 800fd42:	77fb      	strb	r3, [r7, #31]
 800fd44:	e0cc      	b.n	800fee0 <UART_SetConfig+0x348>
 800fd46:	2302      	movs	r3, #2
 800fd48:	77fb      	strb	r3, [r7, #31]
 800fd4a:	e0c9      	b.n	800fee0 <UART_SetConfig+0x348>
 800fd4c:	2304      	movs	r3, #4
 800fd4e:	77fb      	strb	r3, [r7, #31]
 800fd50:	e0c6      	b.n	800fee0 <UART_SetConfig+0x348>
 800fd52:	2308      	movs	r3, #8
 800fd54:	77fb      	strb	r3, [r7, #31]
 800fd56:	e0c3      	b.n	800fee0 <UART_SetConfig+0x348>
 800fd58:	2310      	movs	r3, #16
 800fd5a:	77fb      	strb	r3, [r7, #31]
 800fd5c:	e0c0      	b.n	800fee0 <UART_SetConfig+0x348>
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	4a44      	ldr	r2, [pc, #272]	; (800fe74 <UART_SetConfig+0x2dc>)
 800fd64:	4293      	cmp	r3, r2
 800fd66:	d125      	bne.n	800fdb4 <UART_SetConfig+0x21c>
 800fd68:	4b3e      	ldr	r3, [pc, #248]	; (800fe64 <UART_SetConfig+0x2cc>)
 800fd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd76:	d017      	beq.n	800fda8 <UART_SetConfig+0x210>
 800fd78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd7c:	d817      	bhi.n	800fdae <UART_SetConfig+0x216>
 800fd7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd82:	d00b      	beq.n	800fd9c <UART_SetConfig+0x204>
 800fd84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd88:	d811      	bhi.n	800fdae <UART_SetConfig+0x216>
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d003      	beq.n	800fd96 <UART_SetConfig+0x1fe>
 800fd8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd92:	d006      	beq.n	800fda2 <UART_SetConfig+0x20a>
 800fd94:	e00b      	b.n	800fdae <UART_SetConfig+0x216>
 800fd96:	2300      	movs	r3, #0
 800fd98:	77fb      	strb	r3, [r7, #31]
 800fd9a:	e0a1      	b.n	800fee0 <UART_SetConfig+0x348>
 800fd9c:	2302      	movs	r3, #2
 800fd9e:	77fb      	strb	r3, [r7, #31]
 800fda0:	e09e      	b.n	800fee0 <UART_SetConfig+0x348>
 800fda2:	2304      	movs	r3, #4
 800fda4:	77fb      	strb	r3, [r7, #31]
 800fda6:	e09b      	b.n	800fee0 <UART_SetConfig+0x348>
 800fda8:	2308      	movs	r3, #8
 800fdaa:	77fb      	strb	r3, [r7, #31]
 800fdac:	e098      	b.n	800fee0 <UART_SetConfig+0x348>
 800fdae:	2310      	movs	r3, #16
 800fdb0:	77fb      	strb	r3, [r7, #31]
 800fdb2:	e095      	b.n	800fee0 <UART_SetConfig+0x348>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4a2f      	ldr	r2, [pc, #188]	; (800fe78 <UART_SetConfig+0x2e0>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	d125      	bne.n	800fe0a <UART_SetConfig+0x272>
 800fdbe:	4b29      	ldr	r3, [pc, #164]	; (800fe64 <UART_SetConfig+0x2cc>)
 800fdc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fdc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fdcc:	d017      	beq.n	800fdfe <UART_SetConfig+0x266>
 800fdce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fdd2:	d817      	bhi.n	800fe04 <UART_SetConfig+0x26c>
 800fdd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fdd8:	d00b      	beq.n	800fdf2 <UART_SetConfig+0x25a>
 800fdda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fdde:	d811      	bhi.n	800fe04 <UART_SetConfig+0x26c>
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d003      	beq.n	800fdec <UART_SetConfig+0x254>
 800fde4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fde8:	d006      	beq.n	800fdf8 <UART_SetConfig+0x260>
 800fdea:	e00b      	b.n	800fe04 <UART_SetConfig+0x26c>
 800fdec:	2301      	movs	r3, #1
 800fdee:	77fb      	strb	r3, [r7, #31]
 800fdf0:	e076      	b.n	800fee0 <UART_SetConfig+0x348>
 800fdf2:	2302      	movs	r3, #2
 800fdf4:	77fb      	strb	r3, [r7, #31]
 800fdf6:	e073      	b.n	800fee0 <UART_SetConfig+0x348>
 800fdf8:	2304      	movs	r3, #4
 800fdfa:	77fb      	strb	r3, [r7, #31]
 800fdfc:	e070      	b.n	800fee0 <UART_SetConfig+0x348>
 800fdfe:	2308      	movs	r3, #8
 800fe00:	77fb      	strb	r3, [r7, #31]
 800fe02:	e06d      	b.n	800fee0 <UART_SetConfig+0x348>
 800fe04:	2310      	movs	r3, #16
 800fe06:	77fb      	strb	r3, [r7, #31]
 800fe08:	e06a      	b.n	800fee0 <UART_SetConfig+0x348>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4a1b      	ldr	r2, [pc, #108]	; (800fe7c <UART_SetConfig+0x2e4>)
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d138      	bne.n	800fe86 <UART_SetConfig+0x2ee>
 800fe14:	4b13      	ldr	r3, [pc, #76]	; (800fe64 <UART_SetConfig+0x2cc>)
 800fe16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe1a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800fe1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fe22:	d017      	beq.n	800fe54 <UART_SetConfig+0x2bc>
 800fe24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fe28:	d82a      	bhi.n	800fe80 <UART_SetConfig+0x2e8>
 800fe2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe2e:	d00b      	beq.n	800fe48 <UART_SetConfig+0x2b0>
 800fe30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe34:	d824      	bhi.n	800fe80 <UART_SetConfig+0x2e8>
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d003      	beq.n	800fe42 <UART_SetConfig+0x2aa>
 800fe3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe3e:	d006      	beq.n	800fe4e <UART_SetConfig+0x2b6>
 800fe40:	e01e      	b.n	800fe80 <UART_SetConfig+0x2e8>
 800fe42:	2300      	movs	r3, #0
 800fe44:	77fb      	strb	r3, [r7, #31]
 800fe46:	e04b      	b.n	800fee0 <UART_SetConfig+0x348>
 800fe48:	2302      	movs	r3, #2
 800fe4a:	77fb      	strb	r3, [r7, #31]
 800fe4c:	e048      	b.n	800fee0 <UART_SetConfig+0x348>
 800fe4e:	2304      	movs	r3, #4
 800fe50:	77fb      	strb	r3, [r7, #31]
 800fe52:	e045      	b.n	800fee0 <UART_SetConfig+0x348>
 800fe54:	2308      	movs	r3, #8
 800fe56:	77fb      	strb	r3, [r7, #31]
 800fe58:	e042      	b.n	800fee0 <UART_SetConfig+0x348>
 800fe5a:	bf00      	nop
 800fe5c:	efff69f3 	.word	0xefff69f3
 800fe60:	40011000 	.word	0x40011000
 800fe64:	40023800 	.word	0x40023800
 800fe68:	40004400 	.word	0x40004400
 800fe6c:	40004800 	.word	0x40004800
 800fe70:	40004c00 	.word	0x40004c00
 800fe74:	40005000 	.word	0x40005000
 800fe78:	40011400 	.word	0x40011400
 800fe7c:	40007800 	.word	0x40007800
 800fe80:	2310      	movs	r3, #16
 800fe82:	77fb      	strb	r3, [r7, #31]
 800fe84:	e02c      	b.n	800fee0 <UART_SetConfig+0x348>
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	4a72      	ldr	r2, [pc, #456]	; (8010054 <UART_SetConfig+0x4bc>)
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	d125      	bne.n	800fedc <UART_SetConfig+0x344>
 800fe90:	4b71      	ldr	r3, [pc, #452]	; (8010058 <UART_SetConfig+0x4c0>)
 800fe92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fe9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fe9e:	d017      	beq.n	800fed0 <UART_SetConfig+0x338>
 800fea0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fea4:	d817      	bhi.n	800fed6 <UART_SetConfig+0x33e>
 800fea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800feaa:	d00b      	beq.n	800fec4 <UART_SetConfig+0x32c>
 800feac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800feb0:	d811      	bhi.n	800fed6 <UART_SetConfig+0x33e>
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d003      	beq.n	800febe <UART_SetConfig+0x326>
 800feb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800feba:	d006      	beq.n	800feca <UART_SetConfig+0x332>
 800febc:	e00b      	b.n	800fed6 <UART_SetConfig+0x33e>
 800febe:	2300      	movs	r3, #0
 800fec0:	77fb      	strb	r3, [r7, #31]
 800fec2:	e00d      	b.n	800fee0 <UART_SetConfig+0x348>
 800fec4:	2302      	movs	r3, #2
 800fec6:	77fb      	strb	r3, [r7, #31]
 800fec8:	e00a      	b.n	800fee0 <UART_SetConfig+0x348>
 800feca:	2304      	movs	r3, #4
 800fecc:	77fb      	strb	r3, [r7, #31]
 800fece:	e007      	b.n	800fee0 <UART_SetConfig+0x348>
 800fed0:	2308      	movs	r3, #8
 800fed2:	77fb      	strb	r3, [r7, #31]
 800fed4:	e004      	b.n	800fee0 <UART_SetConfig+0x348>
 800fed6:	2310      	movs	r3, #16
 800fed8:	77fb      	strb	r3, [r7, #31]
 800feda:	e001      	b.n	800fee0 <UART_SetConfig+0x348>
 800fedc:	2310      	movs	r3, #16
 800fede:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	69db      	ldr	r3, [r3, #28]
 800fee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fee8:	d15b      	bne.n	800ffa2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800feea:	7ffb      	ldrb	r3, [r7, #31]
 800feec:	2b08      	cmp	r3, #8
 800feee:	d828      	bhi.n	800ff42 <UART_SetConfig+0x3aa>
 800fef0:	a201      	add	r2, pc, #4	; (adr r2, 800fef8 <UART_SetConfig+0x360>)
 800fef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fef6:	bf00      	nop
 800fef8:	0800ff1d 	.word	0x0800ff1d
 800fefc:	0800ff25 	.word	0x0800ff25
 800ff00:	0800ff2d 	.word	0x0800ff2d
 800ff04:	0800ff43 	.word	0x0800ff43
 800ff08:	0800ff33 	.word	0x0800ff33
 800ff0c:	0800ff43 	.word	0x0800ff43
 800ff10:	0800ff43 	.word	0x0800ff43
 800ff14:	0800ff43 	.word	0x0800ff43
 800ff18:	0800ff3b 	.word	0x0800ff3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff1c:	f7fe f91c 	bl	800e158 <HAL_RCC_GetPCLK1Freq>
 800ff20:	61b8      	str	r0, [r7, #24]
        break;
 800ff22:	e013      	b.n	800ff4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff24:	f7fe f92c 	bl	800e180 <HAL_RCC_GetPCLK2Freq>
 800ff28:	61b8      	str	r0, [r7, #24]
        break;
 800ff2a:	e00f      	b.n	800ff4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ff2c:	4b4b      	ldr	r3, [pc, #300]	; (801005c <UART_SetConfig+0x4c4>)
 800ff2e:	61bb      	str	r3, [r7, #24]
        break;
 800ff30:	e00c      	b.n	800ff4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ff32:	f7fe f83f 	bl	800dfb4 <HAL_RCC_GetSysClockFreq>
 800ff36:	61b8      	str	r0, [r7, #24]
        break;
 800ff38:	e008      	b.n	800ff4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff3e:	61bb      	str	r3, [r7, #24]
        break;
 800ff40:	e004      	b.n	800ff4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ff42:	2300      	movs	r3, #0
 800ff44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ff46:	2301      	movs	r3, #1
 800ff48:	77bb      	strb	r3, [r7, #30]
        break;
 800ff4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ff4c:	69bb      	ldr	r3, [r7, #24]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d074      	beq.n	801003c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ff52:	69bb      	ldr	r3, [r7, #24]
 800ff54:	005a      	lsls	r2, r3, #1
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	685b      	ldr	r3, [r3, #4]
 800ff5a:	085b      	lsrs	r3, r3, #1
 800ff5c:	441a      	add	r2, r3
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff68:	693b      	ldr	r3, [r7, #16]
 800ff6a:	2b0f      	cmp	r3, #15
 800ff6c:	d916      	bls.n	800ff9c <UART_SetConfig+0x404>
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff74:	d212      	bcs.n	800ff9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	f023 030f 	bic.w	r3, r3, #15
 800ff7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	085b      	lsrs	r3, r3, #1
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	f003 0307 	and.w	r3, r3, #7
 800ff8a:	b29a      	uxth	r2, r3
 800ff8c:	89fb      	ldrh	r3, [r7, #14]
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	89fa      	ldrh	r2, [r7, #14]
 800ff98:	60da      	str	r2, [r3, #12]
 800ff9a:	e04f      	b.n	801003c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	77bb      	strb	r3, [r7, #30]
 800ffa0:	e04c      	b.n	801003c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ffa2:	7ffb      	ldrb	r3, [r7, #31]
 800ffa4:	2b08      	cmp	r3, #8
 800ffa6:	d828      	bhi.n	800fffa <UART_SetConfig+0x462>
 800ffa8:	a201      	add	r2, pc, #4	; (adr r2, 800ffb0 <UART_SetConfig+0x418>)
 800ffaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffae:	bf00      	nop
 800ffb0:	0800ffd5 	.word	0x0800ffd5
 800ffb4:	0800ffdd 	.word	0x0800ffdd
 800ffb8:	0800ffe5 	.word	0x0800ffe5
 800ffbc:	0800fffb 	.word	0x0800fffb
 800ffc0:	0800ffeb 	.word	0x0800ffeb
 800ffc4:	0800fffb 	.word	0x0800fffb
 800ffc8:	0800fffb 	.word	0x0800fffb
 800ffcc:	0800fffb 	.word	0x0800fffb
 800ffd0:	0800fff3 	.word	0x0800fff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ffd4:	f7fe f8c0 	bl	800e158 <HAL_RCC_GetPCLK1Freq>
 800ffd8:	61b8      	str	r0, [r7, #24]
        break;
 800ffda:	e013      	b.n	8010004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ffdc:	f7fe f8d0 	bl	800e180 <HAL_RCC_GetPCLK2Freq>
 800ffe0:	61b8      	str	r0, [r7, #24]
        break;
 800ffe2:	e00f      	b.n	8010004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ffe4:	4b1d      	ldr	r3, [pc, #116]	; (801005c <UART_SetConfig+0x4c4>)
 800ffe6:	61bb      	str	r3, [r7, #24]
        break;
 800ffe8:	e00c      	b.n	8010004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ffea:	f7fd ffe3 	bl	800dfb4 <HAL_RCC_GetSysClockFreq>
 800ffee:	61b8      	str	r0, [r7, #24]
        break;
 800fff0:	e008      	b.n	8010004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fff6:	61bb      	str	r3, [r7, #24]
        break;
 800fff8:	e004      	b.n	8010004 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800fffa:	2300      	movs	r3, #0
 800fffc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fffe:	2301      	movs	r3, #1
 8010000:	77bb      	strb	r3, [r7, #30]
        break;
 8010002:	bf00      	nop
    }

    if (pclk != 0U)
 8010004:	69bb      	ldr	r3, [r7, #24]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d018      	beq.n	801003c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	085a      	lsrs	r2, r3, #1
 8010010:	69bb      	ldr	r3, [r7, #24]
 8010012:	441a      	add	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	fbb2 f3f3 	udiv	r3, r2, r3
 801001c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	2b0f      	cmp	r3, #15
 8010022:	d909      	bls.n	8010038 <UART_SetConfig+0x4a0>
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801002a:	d205      	bcs.n	8010038 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	b29a      	uxth	r2, r3
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	60da      	str	r2, [r3, #12]
 8010036:	e001      	b.n	801003c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010038:	2301      	movs	r3, #1
 801003a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2200      	movs	r2, #0
 8010040:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2200      	movs	r2, #0
 8010046:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8010048:	7fbb      	ldrb	r3, [r7, #30]
}
 801004a:	4618      	mov	r0, r3
 801004c:	3720      	adds	r7, #32
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}
 8010052:	bf00      	nop
 8010054:	40007c00 	.word	0x40007c00
 8010058:	40023800 	.word	0x40023800
 801005c:	00f42400 	.word	0x00f42400

08010060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010060:	b480      	push	{r7}
 8010062:	b083      	sub	sp, #12
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801006c:	f003 0301 	and.w	r3, r3, #1
 8010070:	2b00      	cmp	r3, #0
 8010072:	d00a      	beq.n	801008a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	430a      	orrs	r2, r1
 8010088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008e:	f003 0302 	and.w	r3, r3, #2
 8010092:	2b00      	cmp	r3, #0
 8010094:	d00a      	beq.n	80100ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	430a      	orrs	r2, r1
 80100aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b0:	f003 0304 	and.w	r3, r3, #4
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d00a      	beq.n	80100ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	430a      	orrs	r2, r1
 80100cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d2:	f003 0308 	and.w	r3, r3, #8
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d00a      	beq.n	80100f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	430a      	orrs	r2, r1
 80100ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f4:	f003 0310 	and.w	r3, r3, #16
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d00a      	beq.n	8010112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	689b      	ldr	r3, [r3, #8]
 8010102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	430a      	orrs	r2, r1
 8010110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010116:	f003 0320 	and.w	r3, r3, #32
 801011a:	2b00      	cmp	r3, #0
 801011c:	d00a      	beq.n	8010134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	689b      	ldr	r3, [r3, #8]
 8010124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	430a      	orrs	r2, r1
 8010132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801013c:	2b00      	cmp	r3, #0
 801013e:	d01a      	beq.n	8010176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	430a      	orrs	r2, r1
 8010154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801015a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801015e:	d10a      	bne.n	8010176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	430a      	orrs	r2, r1
 8010174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801017a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00a      	beq.n	8010198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	430a      	orrs	r2, r1
 8010196:	605a      	str	r2, [r3, #4]
  }
}
 8010198:	bf00      	nop
 801019a:	370c      	adds	r7, #12
 801019c:	46bd      	mov	sp, r7
 801019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a2:	4770      	bx	lr

080101a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b086      	sub	sp, #24
 80101a8:	af02      	add	r7, sp, #8
 80101aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2200      	movs	r2, #0
 80101b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80101b4:	f7fa fe68 	bl	800ae88 <HAL_GetTick>
 80101b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	f003 0308 	and.w	r3, r3, #8
 80101c4:	2b08      	cmp	r3, #8
 80101c6:	d10e      	bne.n	80101e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80101c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80101cc:	9300      	str	r3, [sp, #0]
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2200      	movs	r2, #0
 80101d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f000 f81b 	bl	8010212 <UART_WaitOnFlagUntilTimeout>
 80101dc:	4603      	mov	r3, r0
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d001      	beq.n	80101e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80101e2:	2303      	movs	r3, #3
 80101e4:	e011      	b.n	801020a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2220      	movs	r2, #32
 80101ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2220      	movs	r2, #32
 80101f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2200      	movs	r2, #0
 80101f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2200      	movs	r2, #0
 80101fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2200      	movs	r2, #0
 8010204:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8010208:	2300      	movs	r3, #0
}
 801020a:	4618      	mov	r0, r3
 801020c:	3710      	adds	r7, #16
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}

08010212 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010212:	b580      	push	{r7, lr}
 8010214:	b09c      	sub	sp, #112	; 0x70
 8010216:	af00      	add	r7, sp, #0
 8010218:	60f8      	str	r0, [r7, #12]
 801021a:	60b9      	str	r1, [r7, #8]
 801021c:	603b      	str	r3, [r7, #0]
 801021e:	4613      	mov	r3, r2
 8010220:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010222:	e0a7      	b.n	8010374 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801022a:	f000 80a3 	beq.w	8010374 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801022e:	f7fa fe2b 	bl	800ae88 <HAL_GetTick>
 8010232:	4602      	mov	r2, r0
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	1ad3      	subs	r3, r2, r3
 8010238:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801023a:	429a      	cmp	r2, r3
 801023c:	d302      	bcc.n	8010244 <UART_WaitOnFlagUntilTimeout+0x32>
 801023e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010240:	2b00      	cmp	r3, #0
 8010242:	d13f      	bne.n	80102c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801024a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801024c:	e853 3f00 	ldrex	r3, [r3]
 8010250:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010254:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010258:	667b      	str	r3, [r7, #100]	; 0x64
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	461a      	mov	r2, r3
 8010260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010264:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010266:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010268:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801026a:	e841 2300 	strex	r3, r2, [r1]
 801026e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010272:	2b00      	cmp	r3, #0
 8010274:	d1e6      	bne.n	8010244 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	3308      	adds	r3, #8
 801027c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801027e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010280:	e853 3f00 	ldrex	r3, [r3]
 8010284:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010288:	f023 0301 	bic.w	r3, r3, #1
 801028c:	663b      	str	r3, [r7, #96]	; 0x60
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	3308      	adds	r3, #8
 8010294:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010296:	64ba      	str	r2, [r7, #72]	; 0x48
 8010298:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801029a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801029c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801029e:	e841 2300 	strex	r3, r2, [r1]
 80102a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80102a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d1e5      	bne.n	8010276 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2220      	movs	r2, #32
 80102ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2220      	movs	r2, #32
 80102b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	2200      	movs	r2, #0
 80102bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80102c0:	2303      	movs	r3, #3
 80102c2:	e068      	b.n	8010396 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	f003 0304 	and.w	r3, r3, #4
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d050      	beq.n	8010374 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	69db      	ldr	r3, [r3, #28]
 80102d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80102dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80102e0:	d148      	bne.n	8010374 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80102ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f4:	e853 3f00 	ldrex	r3, [r3]
 80102f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80102fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010300:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	461a      	mov	r2, r3
 8010308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801030a:	637b      	str	r3, [r7, #52]	; 0x34
 801030c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801030e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010312:	e841 2300 	strex	r3, r2, [r1]
 8010316:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031a:	2b00      	cmp	r3, #0
 801031c:	d1e6      	bne.n	80102ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	3308      	adds	r3, #8
 8010324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	e853 3f00 	ldrex	r3, [r3]
 801032c:	613b      	str	r3, [r7, #16]
   return(result);
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	f023 0301 	bic.w	r3, r3, #1
 8010334:	66bb      	str	r3, [r7, #104]	; 0x68
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	3308      	adds	r3, #8
 801033c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801033e:	623a      	str	r2, [r7, #32]
 8010340:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010342:	69f9      	ldr	r1, [r7, #28]
 8010344:	6a3a      	ldr	r2, [r7, #32]
 8010346:	e841 2300 	strex	r3, r2, [r1]
 801034a:	61bb      	str	r3, [r7, #24]
   return(result);
 801034c:	69bb      	ldr	r3, [r7, #24]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d1e5      	bne.n	801031e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2220      	movs	r2, #32
 8010356:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2220      	movs	r2, #32
 801035c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2220      	movs	r2, #32
 8010364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	2200      	movs	r2, #0
 801036c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8010370:	2303      	movs	r3, #3
 8010372:	e010      	b.n	8010396 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	69da      	ldr	r2, [r3, #28]
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	4013      	ands	r3, r2
 801037e:	68ba      	ldr	r2, [r7, #8]
 8010380:	429a      	cmp	r2, r3
 8010382:	bf0c      	ite	eq
 8010384:	2301      	moveq	r3, #1
 8010386:	2300      	movne	r3, #0
 8010388:	b2db      	uxtb	r3, r3
 801038a:	461a      	mov	r2, r3
 801038c:	79fb      	ldrb	r3, [r7, #7]
 801038e:	429a      	cmp	r2, r3
 8010390:	f43f af48 	beq.w	8010224 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010394:	2300      	movs	r3, #0
}
 8010396:	4618      	mov	r0, r3
 8010398:	3770      	adds	r7, #112	; 0x70
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
	...

080103a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b097      	sub	sp, #92	; 0x5c
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	60f8      	str	r0, [r7, #12]
 80103a8:	60b9      	str	r1, [r7, #8]
 80103aa:	4613      	mov	r3, r2
 80103ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	68ba      	ldr	r2, [r7, #8]
 80103b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	88fa      	ldrh	r2, [r7, #6]
 80103b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	88fa      	ldrh	r2, [r7, #6]
 80103c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2200      	movs	r2, #0
 80103c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	689b      	ldr	r3, [r3, #8]
 80103ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103d2:	d10e      	bne.n	80103f2 <UART_Start_Receive_IT+0x52>
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	691b      	ldr	r3, [r3, #16]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d105      	bne.n	80103e8 <UART_Start_Receive_IT+0x48>
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80103e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80103e6:	e02d      	b.n	8010444 <UART_Start_Receive_IT+0xa4>
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	22ff      	movs	r2, #255	; 0xff
 80103ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80103f0:	e028      	b.n	8010444 <UART_Start_Receive_IT+0xa4>
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	689b      	ldr	r3, [r3, #8]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d10d      	bne.n	8010416 <UART_Start_Receive_IT+0x76>
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	691b      	ldr	r3, [r3, #16]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d104      	bne.n	801040c <UART_Start_Receive_IT+0x6c>
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	22ff      	movs	r2, #255	; 0xff
 8010406:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801040a:	e01b      	b.n	8010444 <UART_Start_Receive_IT+0xa4>
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	227f      	movs	r2, #127	; 0x7f
 8010410:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010414:	e016      	b.n	8010444 <UART_Start_Receive_IT+0xa4>
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	689b      	ldr	r3, [r3, #8]
 801041a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801041e:	d10d      	bne.n	801043c <UART_Start_Receive_IT+0x9c>
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	691b      	ldr	r3, [r3, #16]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d104      	bne.n	8010432 <UART_Start_Receive_IT+0x92>
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	227f      	movs	r2, #127	; 0x7f
 801042c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010430:	e008      	b.n	8010444 <UART_Start_Receive_IT+0xa4>
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	223f      	movs	r2, #63	; 0x3f
 8010436:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801043a:	e003      	b.n	8010444 <UART_Start_Receive_IT+0xa4>
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	2200      	movs	r2, #0
 8010440:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2200      	movs	r2, #0
 8010448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	2222      	movs	r2, #34	; 0x22
 8010450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	3308      	adds	r3, #8
 801045a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801045c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801045e:	e853 3f00 	ldrex	r3, [r3]
 8010462:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010466:	f043 0301 	orr.w	r3, r3, #1
 801046a:	657b      	str	r3, [r7, #84]	; 0x54
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	3308      	adds	r3, #8
 8010472:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010474:	64ba      	str	r2, [r7, #72]	; 0x48
 8010476:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010478:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801047a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801047c:	e841 2300 	strex	r3, r2, [r1]
 8010480:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010484:	2b00      	cmp	r3, #0
 8010486:	d1e5      	bne.n	8010454 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	689b      	ldr	r3, [r3, #8]
 801048c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010490:	d107      	bne.n	80104a2 <UART_Start_Receive_IT+0x102>
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	691b      	ldr	r3, [r3, #16]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d103      	bne.n	80104a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	4a21      	ldr	r2, [pc, #132]	; (8010524 <UART_Start_Receive_IT+0x184>)
 801049e:	669a      	str	r2, [r3, #104]	; 0x68
 80104a0:	e002      	b.n	80104a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	4a20      	ldr	r2, [pc, #128]	; (8010528 <UART_Start_Receive_IT+0x188>)
 80104a6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	691b      	ldr	r3, [r3, #16]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d019      	beq.n	80104e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b8:	e853 3f00 	ldrex	r3, [r3]
 80104bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80104be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80104c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	461a      	mov	r2, r3
 80104cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104ce:	637b      	str	r3, [r7, #52]	; 0x34
 80104d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80104d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104d6:	e841 2300 	strex	r3, r2, [r1]
 80104da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80104dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d1e6      	bne.n	80104b0 <UART_Start_Receive_IT+0x110>
 80104e2:	e018      	b.n	8010516 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	e853 3f00 	ldrex	r3, [r3]
 80104f0:	613b      	str	r3, [r7, #16]
   return(result);
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	f043 0320 	orr.w	r3, r3, #32
 80104f8:	653b      	str	r3, [r7, #80]	; 0x50
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	461a      	mov	r2, r3
 8010500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010502:	623b      	str	r3, [r7, #32]
 8010504:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010506:	69f9      	ldr	r1, [r7, #28]
 8010508:	6a3a      	ldr	r2, [r7, #32]
 801050a:	e841 2300 	strex	r3, r2, [r1]
 801050e:	61bb      	str	r3, [r7, #24]
   return(result);
 8010510:	69bb      	ldr	r3, [r7, #24]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d1e6      	bne.n	80104e4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8010516:	2300      	movs	r3, #0
}
 8010518:	4618      	mov	r0, r3
 801051a:	375c      	adds	r7, #92	; 0x5c
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr
 8010524:	08010951 	.word	0x08010951
 8010528:	080107eb 	.word	0x080107eb

0801052c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801052c:	b480      	push	{r7}
 801052e:	b095      	sub	sp, #84	; 0x54
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801053a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801053c:	e853 3f00 	ldrex	r3, [r3]
 8010540:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010544:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010548:	64fb      	str	r3, [r7, #76]	; 0x4c
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	461a      	mov	r2, r3
 8010550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010552:	643b      	str	r3, [r7, #64]	; 0x40
 8010554:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010556:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010558:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801055a:	e841 2300 	strex	r3, r2, [r1]
 801055e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010562:	2b00      	cmp	r3, #0
 8010564:	d1e6      	bne.n	8010534 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	3308      	adds	r3, #8
 801056c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801056e:	6a3b      	ldr	r3, [r7, #32]
 8010570:	e853 3f00 	ldrex	r3, [r3]
 8010574:	61fb      	str	r3, [r7, #28]
   return(result);
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	f023 0301 	bic.w	r3, r3, #1
 801057c:	64bb      	str	r3, [r7, #72]	; 0x48
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	3308      	adds	r3, #8
 8010584:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010586:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010588:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801058a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801058c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801058e:	e841 2300 	strex	r3, r2, [r1]
 8010592:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010596:	2b00      	cmp	r3, #0
 8010598:	d1e5      	bne.n	8010566 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801059e:	2b01      	cmp	r3, #1
 80105a0:	d118      	bne.n	80105d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	e853 3f00 	ldrex	r3, [r3]
 80105ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	f023 0310 	bic.w	r3, r3, #16
 80105b6:	647b      	str	r3, [r7, #68]	; 0x44
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	461a      	mov	r2, r3
 80105be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105c0:	61bb      	str	r3, [r7, #24]
 80105c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c4:	6979      	ldr	r1, [r7, #20]
 80105c6:	69ba      	ldr	r2, [r7, #24]
 80105c8:	e841 2300 	strex	r3, r2, [r1]
 80105cc:	613b      	str	r3, [r7, #16]
   return(result);
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d1e6      	bne.n	80105a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2220      	movs	r2, #32
 80105d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2200      	movs	r2, #0
 80105e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2200      	movs	r2, #0
 80105e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80105e8:	bf00      	nop
 80105ea:	3754      	adds	r7, #84	; 0x54
 80105ec:	46bd      	mov	sp, r7
 80105ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f2:	4770      	bx	lr

080105f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b084      	sub	sp, #16
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010600:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2200      	movs	r2, #0
 8010606:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2200      	movs	r2, #0
 801060e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010612:	68f8      	ldr	r0, [r7, #12]
 8010614:	f7ff faaa 	bl	800fb6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010618:	bf00      	nop
 801061a:	3710      	adds	r7, #16
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010620:	b480      	push	{r7}
 8010622:	b08f      	sub	sp, #60	; 0x3c
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801062c:	2b21      	cmp	r3, #33	; 0x21
 801062e:	d14c      	bne.n	80106ca <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010636:	b29b      	uxth	r3, r3
 8010638:	2b00      	cmp	r3, #0
 801063a:	d132      	bne.n	80106a2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010642:	6a3b      	ldr	r3, [r7, #32]
 8010644:	e853 3f00 	ldrex	r3, [r3]
 8010648:	61fb      	str	r3, [r7, #28]
   return(result);
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010650:	637b      	str	r3, [r7, #52]	; 0x34
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	461a      	mov	r2, r3
 8010658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801065a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801065c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010662:	e841 2300 	strex	r3, r2, [r1]
 8010666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066a:	2b00      	cmp	r3, #0
 801066c:	d1e6      	bne.n	801063c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	e853 3f00 	ldrex	r3, [r3]
 801067a:	60bb      	str	r3, [r7, #8]
   return(result);
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010682:	633b      	str	r3, [r7, #48]	; 0x30
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	461a      	mov	r2, r3
 801068a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801068c:	61bb      	str	r3, [r7, #24]
 801068e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010690:	6979      	ldr	r1, [r7, #20]
 8010692:	69ba      	ldr	r2, [r7, #24]
 8010694:	e841 2300 	strex	r3, r2, [r1]
 8010698:	613b      	str	r3, [r7, #16]
   return(result);
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d1e6      	bne.n	801066e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80106a0:	e013      	b.n	80106ca <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106a6:	781a      	ldrb	r2, [r3, #0]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106b2:	1c5a      	adds	r2, r3, #1
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80106be:	b29b      	uxth	r3, r3
 80106c0:	3b01      	subs	r3, #1
 80106c2:	b29a      	uxth	r2, r3
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80106ca:	bf00      	nop
 80106cc:	373c      	adds	r7, #60	; 0x3c
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr

080106d6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80106d6:	b480      	push	{r7}
 80106d8:	b091      	sub	sp, #68	; 0x44
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106e2:	2b21      	cmp	r3, #33	; 0x21
 80106e4:	d151      	bne.n	801078a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80106ec:	b29b      	uxth	r3, r3
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d132      	bne.n	8010758 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fa:	e853 3f00 	ldrex	r3, [r3]
 80106fe:	623b      	str	r3, [r7, #32]
   return(result);
 8010700:	6a3b      	ldr	r3, [r7, #32]
 8010702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010706:	63bb      	str	r3, [r7, #56]	; 0x38
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	461a      	mov	r2, r3
 801070e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010710:	633b      	str	r3, [r7, #48]	; 0x30
 8010712:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010714:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010718:	e841 2300 	strex	r3, r2, [r1]
 801071c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801071e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010720:	2b00      	cmp	r3, #0
 8010722:	d1e6      	bne.n	80106f2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	e853 3f00 	ldrex	r3, [r3]
 8010730:	60fb      	str	r3, [r7, #12]
   return(result);
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010738:	637b      	str	r3, [r7, #52]	; 0x34
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	461a      	mov	r2, r3
 8010740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010742:	61fb      	str	r3, [r7, #28]
 8010744:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010746:	69b9      	ldr	r1, [r7, #24]
 8010748:	69fa      	ldr	r2, [r7, #28]
 801074a:	e841 2300 	strex	r3, r2, [r1]
 801074e:	617b      	str	r3, [r7, #20]
   return(result);
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d1e6      	bne.n	8010724 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8010756:	e018      	b.n	801078a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801075c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801075e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010760:	881b      	ldrh	r3, [r3, #0]
 8010762:	461a      	mov	r2, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801076c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010772:	1c9a      	adds	r2, r3, #2
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801077e:	b29b      	uxth	r3, r3
 8010780:	3b01      	subs	r3, #1
 8010782:	b29a      	uxth	r2, r3
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 801078a:	bf00      	nop
 801078c:	3744      	adds	r7, #68	; 0x44
 801078e:	46bd      	mov	sp, r7
 8010790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010794:	4770      	bx	lr

08010796 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010796:	b580      	push	{r7, lr}
 8010798:	b088      	sub	sp, #32
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	e853 3f00 	ldrex	r3, [r3]
 80107aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107b2:	61fb      	str	r3, [r7, #28]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	461a      	mov	r2, r3
 80107ba:	69fb      	ldr	r3, [r7, #28]
 80107bc:	61bb      	str	r3, [r7, #24]
 80107be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c0:	6979      	ldr	r1, [r7, #20]
 80107c2:	69ba      	ldr	r2, [r7, #24]
 80107c4:	e841 2300 	strex	r3, r2, [r1]
 80107c8:	613b      	str	r3, [r7, #16]
   return(result);
 80107ca:	693b      	ldr	r3, [r7, #16]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d1e6      	bne.n	801079e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2220      	movs	r2, #32
 80107d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7ff f9bb 	bl	800fb58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107e2:	bf00      	nop
 80107e4:	3720      	adds	r7, #32
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}

080107ea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80107ea:	b580      	push	{r7, lr}
 80107ec:	b096      	sub	sp, #88	; 0x58
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80107f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010802:	2b22      	cmp	r3, #34	; 0x22
 8010804:	f040 8098 	bne.w	8010938 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801080e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010812:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8010816:	b2d9      	uxtb	r1, r3
 8010818:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801081c:	b2da      	uxtb	r2, r3
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010822:	400a      	ands	r2, r1
 8010824:	b2d2      	uxtb	r2, r2
 8010826:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801082c:	1c5a      	adds	r2, r3, #1
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010838:	b29b      	uxth	r3, r3
 801083a:	3b01      	subs	r3, #1
 801083c:	b29a      	uxth	r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801084a:	b29b      	uxth	r3, r3
 801084c:	2b00      	cmp	r3, #0
 801084e:	d17b      	bne.n	8010948 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010858:	e853 3f00 	ldrex	r3, [r3]
 801085c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801085e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010860:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010864:	653b      	str	r3, [r7, #80]	; 0x50
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	461a      	mov	r2, r3
 801086c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801086e:	647b      	str	r3, [r7, #68]	; 0x44
 8010870:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010872:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010876:	e841 2300 	strex	r3, r2, [r1]
 801087a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801087c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801087e:	2b00      	cmp	r3, #0
 8010880:	d1e6      	bne.n	8010850 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	3308      	adds	r3, #8
 8010888:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088c:	e853 3f00 	ldrex	r3, [r3]
 8010890:	623b      	str	r3, [r7, #32]
   return(result);
 8010892:	6a3b      	ldr	r3, [r7, #32]
 8010894:	f023 0301 	bic.w	r3, r3, #1
 8010898:	64fb      	str	r3, [r7, #76]	; 0x4c
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	3308      	adds	r3, #8
 80108a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80108a2:	633a      	str	r2, [r7, #48]	; 0x30
 80108a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108aa:	e841 2300 	strex	r3, r2, [r1]
 80108ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80108b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d1e5      	bne.n	8010882 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2220      	movs	r2, #32
 80108ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2200      	movs	r2, #0
 80108c2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2200      	movs	r2, #0
 80108c8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	d12e      	bne.n	8010930 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2200      	movs	r2, #0
 80108d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	e853 3f00 	ldrex	r3, [r3]
 80108e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	f023 0310 	bic.w	r3, r3, #16
 80108ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	461a      	mov	r2, r3
 80108f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108f6:	61fb      	str	r3, [r7, #28]
 80108f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108fa:	69b9      	ldr	r1, [r7, #24]
 80108fc:	69fa      	ldr	r2, [r7, #28]
 80108fe:	e841 2300 	strex	r3, r2, [r1]
 8010902:	617b      	str	r3, [r7, #20]
   return(result);
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d1e6      	bne.n	80108d8 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	69db      	ldr	r3, [r3, #28]
 8010910:	f003 0310 	and.w	r3, r3, #16
 8010914:	2b10      	cmp	r3, #16
 8010916:	d103      	bne.n	8010920 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	2210      	movs	r2, #16
 801091e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010926:	4619      	mov	r1, r3
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f7ff f929 	bl	800fb80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801092e:	e00b      	b.n	8010948 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f7f0 fb15 	bl	8000f60 <HAL_UART_RxCpltCallback>
}
 8010936:	e007      	b.n	8010948 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	699a      	ldr	r2, [r3, #24]
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	f042 0208 	orr.w	r2, r2, #8
 8010946:	619a      	str	r2, [r3, #24]
}
 8010948:	bf00      	nop
 801094a:	3758      	adds	r7, #88	; 0x58
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b096      	sub	sp, #88	; 0x58
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801095e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010968:	2b22      	cmp	r3, #34	; 0x22
 801096a:	f040 8098 	bne.w	8010a9e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010974:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801097c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801097e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010982:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010986:	4013      	ands	r3, r2
 8010988:	b29a      	uxth	r2, r3
 801098a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801098c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010992:	1c9a      	adds	r2, r3, #2
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801099e:	b29b      	uxth	r3, r3
 80109a0:	3b01      	subs	r3, #1
 80109a2:	b29a      	uxth	r2, r3
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80109b0:	b29b      	uxth	r3, r3
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d17b      	bne.n	8010aae <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109be:	e853 3f00 	ldrex	r3, [r3]
 80109c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80109c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80109ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	461a      	mov	r2, r3
 80109d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109d4:	643b      	str	r3, [r7, #64]	; 0x40
 80109d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80109dc:	e841 2300 	strex	r3, r2, [r1]
 80109e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80109e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d1e6      	bne.n	80109b6 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	3308      	adds	r3, #8
 80109ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109f0:	6a3b      	ldr	r3, [r7, #32]
 80109f2:	e853 3f00 	ldrex	r3, [r3]
 80109f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80109f8:	69fb      	ldr	r3, [r7, #28]
 80109fa:	f023 0301 	bic.w	r3, r3, #1
 80109fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	3308      	adds	r3, #8
 8010a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a10:	e841 2300 	strex	r3, r2, [r1]
 8010a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d1e5      	bne.n	80109e8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2220      	movs	r2, #32
 8010a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2200      	movs	r2, #0
 8010a28:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	d12e      	bne.n	8010a96 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	e853 3f00 	ldrex	r3, [r3]
 8010a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	f023 0310 	bic.w	r3, r3, #16
 8010a52:	647b      	str	r3, [r7, #68]	; 0x44
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	461a      	mov	r2, r3
 8010a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a5c:	61bb      	str	r3, [r7, #24]
 8010a5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a60:	6979      	ldr	r1, [r7, #20]
 8010a62:	69ba      	ldr	r2, [r7, #24]
 8010a64:	e841 2300 	strex	r3, r2, [r1]
 8010a68:	613b      	str	r3, [r7, #16]
   return(result);
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d1e6      	bne.n	8010a3e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	69db      	ldr	r3, [r3, #28]
 8010a76:	f003 0310 	and.w	r3, r3, #16
 8010a7a:	2b10      	cmp	r3, #16
 8010a7c:	d103      	bne.n	8010a86 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2210      	movs	r2, #16
 8010a84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010a8c:	4619      	mov	r1, r3
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f7ff f876 	bl	800fb80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010a94:	e00b      	b.n	8010aae <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f7f0 fa62 	bl	8000f60 <HAL_UART_RxCpltCallback>
}
 8010a9c:	e007      	b.n	8010aae <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	699a      	ldr	r2, [r3, #24]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	f042 0208 	orr.w	r2, r2, #8
 8010aac:	619a      	str	r2, [r3, #24]
}
 8010aae:	bf00      	nop
 8010ab0:	3758      	adds	r7, #88	; 0x58
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}
	...

08010ab8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b087      	sub	sp, #28
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010acc:	683a      	ldr	r2, [r7, #0]
 8010ace:	6812      	ldr	r2, [r2, #0]
 8010ad0:	f023 0101 	bic.w	r1, r3, #1
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	689b      	ldr	r3, [r3, #8]
 8010ade:	2b08      	cmp	r3, #8
 8010ae0:	d102      	bne.n	8010ae8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8010ae2:	2340      	movs	r3, #64	; 0x40
 8010ae4:	617b      	str	r3, [r7, #20]
 8010ae6:	e001      	b.n	8010aec <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8010af8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8010afe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8010b04:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8010b0a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8010b10:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8010b16:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8010b1c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8010b22:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8010b28:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b36:	693a      	ldr	r2, [r7, #16]
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b40:	693a      	ldr	r2, [r7, #16]
 8010b42:	4313      	orrs	r3, r2
 8010b44:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b4a:	693a      	ldr	r2, [r7, #16]
 8010b4c:	4313      	orrs	r3, r2
 8010b4e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8010b50:	4b20      	ldr	r3, [pc, #128]	; (8010bd4 <FMC_NORSRAM_Init+0x11c>)
 8010b52:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b5a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010b62:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8010b6a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	681a      	ldr	r2, [r3, #0]
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	43db      	mvns	r3, r3
 8010b7a:	ea02 0103 	and.w	r1, r2, r3
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	4319      	orrs	r1, r3
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b94:	d10c      	bne.n	8010bb0 <FMC_NORSRAM_Init+0xf8>
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d008      	beq.n	8010bb0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010baa:	431a      	orrs	r2, r3
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d006      	beq.n	8010bc6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681a      	ldr	r2, [r3, #0]
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bc0:	431a      	orrs	r2, r3
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8010bc6:	2300      	movs	r3, #0
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	371c      	adds	r7, #28
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd2:	4770      	bx	lr
 8010bd4:	0008fb7f 	.word	0x0008fb7f

08010bd8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010bd8:	b480      	push	{r7}
 8010bda:	b087      	sub	sp, #28
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60f8      	str	r0, [r7, #12]
 8010be0:	60b9      	str	r1, [r7, #8]
 8010be2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	1c5a      	adds	r2, r3, #1
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bee:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	011b      	lsls	r3, r3, #4
 8010bfc:	431a      	orrs	r2, r3
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	689b      	ldr	r3, [r3, #8]
 8010c02:	021b      	lsls	r3, r3, #8
 8010c04:	431a      	orrs	r2, r3
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	041b      	lsls	r3, r3, #16
 8010c0c:	431a      	orrs	r2, r3
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	691b      	ldr	r3, [r3, #16]
 8010c12:	3b01      	subs	r3, #1
 8010c14:	051b      	lsls	r3, r3, #20
 8010c16:	431a      	orrs	r2, r3
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	695b      	ldr	r3, [r3, #20]
 8010c1c:	3b02      	subs	r3, #2
 8010c1e:	061b      	lsls	r3, r3, #24
 8010c20:	431a      	orrs	r2, r3
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	699b      	ldr	r3, [r3, #24]
 8010c26:	4313      	orrs	r3, r2
 8010c28:	687a      	ldr	r2, [r7, #4]
 8010c2a:	3201      	adds	r2, #1
 8010c2c:	4319      	orrs	r1, r3
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c40:	d113      	bne.n	8010c6a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010c4a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	691b      	ldr	r3, [r3, #16]
 8010c50:	3b01      	subs	r3, #1
 8010c52:	051b      	lsls	r3, r3, #20
 8010c54:	697a      	ldr	r2, [r7, #20]
 8010c56:	4313      	orrs	r3, r2
 8010c58:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	685b      	ldr	r3, [r3, #4]
 8010c5e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	431a      	orrs	r2, r3
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8010c6a:	2300      	movs	r3, #0
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	371c      	adds	r7, #28
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr

08010c78 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8010c78:	b480      	push	{r7}
 8010c7a:	b085      	sub	sp, #20
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	60b9      	str	r1, [r7, #8]
 8010c82:	607a      	str	r2, [r7, #4]
 8010c84:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010c8c:	d11d      	bne.n	8010cca <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	687a      	ldr	r2, [r7, #4]
 8010c92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010c96:	4b13      	ldr	r3, [pc, #76]	; (8010ce4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8010c98:	4013      	ands	r3, r2
 8010c9a:	68ba      	ldr	r2, [r7, #8]
 8010c9c:	6811      	ldr	r1, [r2, #0]
 8010c9e:	68ba      	ldr	r2, [r7, #8]
 8010ca0:	6852      	ldr	r2, [r2, #4]
 8010ca2:	0112      	lsls	r2, r2, #4
 8010ca4:	4311      	orrs	r1, r2
 8010ca6:	68ba      	ldr	r2, [r7, #8]
 8010ca8:	6892      	ldr	r2, [r2, #8]
 8010caa:	0212      	lsls	r2, r2, #8
 8010cac:	4311      	orrs	r1, r2
 8010cae:	68ba      	ldr	r2, [r7, #8]
 8010cb0:	6992      	ldr	r2, [r2, #24]
 8010cb2:	4311      	orrs	r1, r2
 8010cb4:	68ba      	ldr	r2, [r7, #8]
 8010cb6:	68d2      	ldr	r2, [r2, #12]
 8010cb8:	0412      	lsls	r2, r2, #16
 8010cba:	430a      	orrs	r2, r1
 8010cbc:	ea43 0102 	orr.w	r1, r3, r2
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010cc8:	e005      	b.n	8010cd6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	687a      	ldr	r2, [r7, #4]
 8010cce:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8010cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8010cd6:	2300      	movs	r3, #0
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3714      	adds	r7, #20
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce2:	4770      	bx	lr
 8010ce4:	cff00000 	.word	0xcff00000

08010ce8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8010ce8:	b5b0      	push	{r4, r5, r7, lr}
 8010cea:	b08c      	sub	sp, #48	; 0x30
 8010cec:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8010cee:	4b96      	ldr	r3, [pc, #600]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010cf0:	22c0      	movs	r2, #192	; 0xc0
 8010cf2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8010cf4:	4b94      	ldr	r3, [pc, #592]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010cf6:	22a8      	movs	r2, #168	; 0xa8
 8010cf8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8010cfa:	4b93      	ldr	r3, [pc, #588]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010cfc:	2201      	movs	r2, #1
 8010cfe:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 30;
 8010d00:	4b91      	ldr	r3, [pc, #580]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010d02:	221e      	movs	r2, #30
 8010d04:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8010d06:	4b91      	ldr	r3, [pc, #580]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010d08:	22ff      	movs	r2, #255	; 0xff
 8010d0a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8010d0c:	4b8f      	ldr	r3, [pc, #572]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010d0e:	22ff      	movs	r2, #255	; 0xff
 8010d10:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8010d12:	4b8e      	ldr	r3, [pc, #568]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010d14:	22ff      	movs	r2, #255	; 0xff
 8010d16:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8010d18:	4b8c      	ldr	r3, [pc, #560]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8010d1e:	4b8c      	ldr	r3, [pc, #560]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010d20:	22c0      	movs	r2, #192	; 0xc0
 8010d22:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8010d24:	4b8a      	ldr	r3, [pc, #552]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010d26:	22a8      	movs	r2, #168	; 0xa8
 8010d28:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8010d2a:	4b89      	ldr	r3, [pc, #548]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8010d30:	4b87      	ldr	r3, [pc, #540]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010d32:	2201      	movs	r2, #1
 8010d34:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8010d36:	2100      	movs	r1, #0
 8010d38:	2000      	movs	r0, #0
 8010d3a:	f006 fa6d 	bl	8017218 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8010d3e:	4b82      	ldr	r3, [pc, #520]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010d40:	781b      	ldrb	r3, [r3, #0]
 8010d42:	061a      	lsls	r2, r3, #24
 8010d44:	4b80      	ldr	r3, [pc, #512]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010d46:	785b      	ldrb	r3, [r3, #1]
 8010d48:	041b      	lsls	r3, r3, #16
 8010d4a:	431a      	orrs	r2, r3
 8010d4c:	4b7e      	ldr	r3, [pc, #504]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010d4e:	789b      	ldrb	r3, [r3, #2]
 8010d50:	021b      	lsls	r3, r3, #8
 8010d52:	4313      	orrs	r3, r2
 8010d54:	4a7c      	ldr	r2, [pc, #496]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010d56:	78d2      	ldrb	r2, [r2, #3]
 8010d58:	4313      	orrs	r3, r2
 8010d5a:	061a      	lsls	r2, r3, #24
 8010d5c:	4b7a      	ldr	r3, [pc, #488]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	0619      	lsls	r1, r3, #24
 8010d62:	4b79      	ldr	r3, [pc, #484]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010d64:	785b      	ldrb	r3, [r3, #1]
 8010d66:	041b      	lsls	r3, r3, #16
 8010d68:	4319      	orrs	r1, r3
 8010d6a:	4b77      	ldr	r3, [pc, #476]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010d6c:	789b      	ldrb	r3, [r3, #2]
 8010d6e:	021b      	lsls	r3, r3, #8
 8010d70:	430b      	orrs	r3, r1
 8010d72:	4975      	ldr	r1, [pc, #468]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010d74:	78c9      	ldrb	r1, [r1, #3]
 8010d76:	430b      	orrs	r3, r1
 8010d78:	021b      	lsls	r3, r3, #8
 8010d7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010d7e:	431a      	orrs	r2, r3
 8010d80:	4b71      	ldr	r3, [pc, #452]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	0619      	lsls	r1, r3, #24
 8010d86:	4b70      	ldr	r3, [pc, #448]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010d88:	785b      	ldrb	r3, [r3, #1]
 8010d8a:	041b      	lsls	r3, r3, #16
 8010d8c:	4319      	orrs	r1, r3
 8010d8e:	4b6e      	ldr	r3, [pc, #440]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010d90:	789b      	ldrb	r3, [r3, #2]
 8010d92:	021b      	lsls	r3, r3, #8
 8010d94:	430b      	orrs	r3, r1
 8010d96:	496c      	ldr	r1, [pc, #432]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010d98:	78c9      	ldrb	r1, [r1, #3]
 8010d9a:	430b      	orrs	r3, r1
 8010d9c:	0a1b      	lsrs	r3, r3, #8
 8010d9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010da2:	431a      	orrs	r2, r3
 8010da4:	4b68      	ldr	r3, [pc, #416]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010da6:	781b      	ldrb	r3, [r3, #0]
 8010da8:	0619      	lsls	r1, r3, #24
 8010daa:	4b67      	ldr	r3, [pc, #412]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010dac:	785b      	ldrb	r3, [r3, #1]
 8010dae:	041b      	lsls	r3, r3, #16
 8010db0:	4319      	orrs	r1, r3
 8010db2:	4b65      	ldr	r3, [pc, #404]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010db4:	789b      	ldrb	r3, [r3, #2]
 8010db6:	021b      	lsls	r3, r3, #8
 8010db8:	430b      	orrs	r3, r1
 8010dba:	4963      	ldr	r1, [pc, #396]	; (8010f48 <MX_LWIP_Init+0x260>)
 8010dbc:	78c9      	ldrb	r1, [r1, #3]
 8010dbe:	430b      	orrs	r3, r1
 8010dc0:	0e1b      	lsrs	r3, r3, #24
 8010dc2:	4313      	orrs	r3, r2
 8010dc4:	4a63      	ldr	r2, [pc, #396]	; (8010f54 <MX_LWIP_Init+0x26c>)
 8010dc6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8010dc8:	4b60      	ldr	r3, [pc, #384]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	061a      	lsls	r2, r3, #24
 8010dce:	4b5f      	ldr	r3, [pc, #380]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010dd0:	785b      	ldrb	r3, [r3, #1]
 8010dd2:	041b      	lsls	r3, r3, #16
 8010dd4:	431a      	orrs	r2, r3
 8010dd6:	4b5d      	ldr	r3, [pc, #372]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010dd8:	789b      	ldrb	r3, [r3, #2]
 8010dda:	021b      	lsls	r3, r3, #8
 8010ddc:	4313      	orrs	r3, r2
 8010dde:	4a5b      	ldr	r2, [pc, #364]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010de0:	78d2      	ldrb	r2, [r2, #3]
 8010de2:	4313      	orrs	r3, r2
 8010de4:	061a      	lsls	r2, r3, #24
 8010de6:	4b59      	ldr	r3, [pc, #356]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010de8:	781b      	ldrb	r3, [r3, #0]
 8010dea:	0619      	lsls	r1, r3, #24
 8010dec:	4b57      	ldr	r3, [pc, #348]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010dee:	785b      	ldrb	r3, [r3, #1]
 8010df0:	041b      	lsls	r3, r3, #16
 8010df2:	4319      	orrs	r1, r3
 8010df4:	4b55      	ldr	r3, [pc, #340]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010df6:	789b      	ldrb	r3, [r3, #2]
 8010df8:	021b      	lsls	r3, r3, #8
 8010dfa:	430b      	orrs	r3, r1
 8010dfc:	4953      	ldr	r1, [pc, #332]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010dfe:	78c9      	ldrb	r1, [r1, #3]
 8010e00:	430b      	orrs	r3, r1
 8010e02:	021b      	lsls	r3, r3, #8
 8010e04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010e08:	431a      	orrs	r2, r3
 8010e0a:	4b50      	ldr	r3, [pc, #320]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	0619      	lsls	r1, r3, #24
 8010e10:	4b4e      	ldr	r3, [pc, #312]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010e12:	785b      	ldrb	r3, [r3, #1]
 8010e14:	041b      	lsls	r3, r3, #16
 8010e16:	4319      	orrs	r1, r3
 8010e18:	4b4c      	ldr	r3, [pc, #304]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010e1a:	789b      	ldrb	r3, [r3, #2]
 8010e1c:	021b      	lsls	r3, r3, #8
 8010e1e:	430b      	orrs	r3, r1
 8010e20:	494a      	ldr	r1, [pc, #296]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010e22:	78c9      	ldrb	r1, [r1, #3]
 8010e24:	430b      	orrs	r3, r1
 8010e26:	0a1b      	lsrs	r3, r3, #8
 8010e28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010e2c:	431a      	orrs	r2, r3
 8010e2e:	4b47      	ldr	r3, [pc, #284]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	0619      	lsls	r1, r3, #24
 8010e34:	4b45      	ldr	r3, [pc, #276]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010e36:	785b      	ldrb	r3, [r3, #1]
 8010e38:	041b      	lsls	r3, r3, #16
 8010e3a:	4319      	orrs	r1, r3
 8010e3c:	4b43      	ldr	r3, [pc, #268]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010e3e:	789b      	ldrb	r3, [r3, #2]
 8010e40:	021b      	lsls	r3, r3, #8
 8010e42:	430b      	orrs	r3, r1
 8010e44:	4941      	ldr	r1, [pc, #260]	; (8010f4c <MX_LWIP_Init+0x264>)
 8010e46:	78c9      	ldrb	r1, [r1, #3]
 8010e48:	430b      	orrs	r3, r1
 8010e4a:	0e1b      	lsrs	r3, r3, #24
 8010e4c:	4313      	orrs	r3, r2
 8010e4e:	4a42      	ldr	r2, [pc, #264]	; (8010f58 <MX_LWIP_Init+0x270>)
 8010e50:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8010e52:	4b3f      	ldr	r3, [pc, #252]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	061a      	lsls	r2, r3, #24
 8010e58:	4b3d      	ldr	r3, [pc, #244]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010e5a:	785b      	ldrb	r3, [r3, #1]
 8010e5c:	041b      	lsls	r3, r3, #16
 8010e5e:	431a      	orrs	r2, r3
 8010e60:	4b3b      	ldr	r3, [pc, #236]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010e62:	789b      	ldrb	r3, [r3, #2]
 8010e64:	021b      	lsls	r3, r3, #8
 8010e66:	4313      	orrs	r3, r2
 8010e68:	4a39      	ldr	r2, [pc, #228]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010e6a:	78d2      	ldrb	r2, [r2, #3]
 8010e6c:	4313      	orrs	r3, r2
 8010e6e:	061a      	lsls	r2, r3, #24
 8010e70:	4b37      	ldr	r3, [pc, #220]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	0619      	lsls	r1, r3, #24
 8010e76:	4b36      	ldr	r3, [pc, #216]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010e78:	785b      	ldrb	r3, [r3, #1]
 8010e7a:	041b      	lsls	r3, r3, #16
 8010e7c:	4319      	orrs	r1, r3
 8010e7e:	4b34      	ldr	r3, [pc, #208]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010e80:	789b      	ldrb	r3, [r3, #2]
 8010e82:	021b      	lsls	r3, r3, #8
 8010e84:	430b      	orrs	r3, r1
 8010e86:	4932      	ldr	r1, [pc, #200]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010e88:	78c9      	ldrb	r1, [r1, #3]
 8010e8a:	430b      	orrs	r3, r1
 8010e8c:	021b      	lsls	r3, r3, #8
 8010e8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010e92:	431a      	orrs	r2, r3
 8010e94:	4b2e      	ldr	r3, [pc, #184]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	0619      	lsls	r1, r3, #24
 8010e9a:	4b2d      	ldr	r3, [pc, #180]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010e9c:	785b      	ldrb	r3, [r3, #1]
 8010e9e:	041b      	lsls	r3, r3, #16
 8010ea0:	4319      	orrs	r1, r3
 8010ea2:	4b2b      	ldr	r3, [pc, #172]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010ea4:	789b      	ldrb	r3, [r3, #2]
 8010ea6:	021b      	lsls	r3, r3, #8
 8010ea8:	430b      	orrs	r3, r1
 8010eaa:	4929      	ldr	r1, [pc, #164]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010eac:	78c9      	ldrb	r1, [r1, #3]
 8010eae:	430b      	orrs	r3, r1
 8010eb0:	0a1b      	lsrs	r3, r3, #8
 8010eb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010eb6:	431a      	orrs	r2, r3
 8010eb8:	4b25      	ldr	r3, [pc, #148]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010eba:	781b      	ldrb	r3, [r3, #0]
 8010ebc:	0619      	lsls	r1, r3, #24
 8010ebe:	4b24      	ldr	r3, [pc, #144]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010ec0:	785b      	ldrb	r3, [r3, #1]
 8010ec2:	041b      	lsls	r3, r3, #16
 8010ec4:	4319      	orrs	r1, r3
 8010ec6:	4b22      	ldr	r3, [pc, #136]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010ec8:	789b      	ldrb	r3, [r3, #2]
 8010eca:	021b      	lsls	r3, r3, #8
 8010ecc:	430b      	orrs	r3, r1
 8010ece:	4920      	ldr	r1, [pc, #128]	; (8010f50 <MX_LWIP_Init+0x268>)
 8010ed0:	78c9      	ldrb	r1, [r1, #3]
 8010ed2:	430b      	orrs	r3, r1
 8010ed4:	0e1b      	lsrs	r3, r3, #24
 8010ed6:	4313      	orrs	r3, r2
 8010ed8:	4a20      	ldr	r2, [pc, #128]	; (8010f5c <MX_LWIP_Init+0x274>)
 8010eda:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8010edc:	4b20      	ldr	r3, [pc, #128]	; (8010f60 <MX_LWIP_Init+0x278>)
 8010ede:	9302      	str	r3, [sp, #8]
 8010ee0:	4b20      	ldr	r3, [pc, #128]	; (8010f64 <MX_LWIP_Init+0x27c>)
 8010ee2:	9301      	str	r3, [sp, #4]
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	4b1c      	ldr	r3, [pc, #112]	; (8010f5c <MX_LWIP_Init+0x274>)
 8010eea:	4a1b      	ldr	r2, [pc, #108]	; (8010f58 <MX_LWIP_Init+0x270>)
 8010eec:	4919      	ldr	r1, [pc, #100]	; (8010f54 <MX_LWIP_Init+0x26c>)
 8010eee:	481e      	ldr	r0, [pc, #120]	; (8010f68 <MX_LWIP_Init+0x280>)
 8010ef0:	f006 ff5c 	bl	8017dac <netif_add>

  /* Registers the default network intcerface */
  netif_set_default(&gnetif);
 8010ef4:	481c      	ldr	r0, [pc, #112]	; (8010f68 <MX_LWIP_Init+0x280>)
 8010ef6:	f007 f90b 	bl	8018110 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8010efa:	4b1b      	ldr	r3, [pc, #108]	; (8010f68 <MX_LWIP_Init+0x280>)
 8010efc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f00:	089b      	lsrs	r3, r3, #2
 8010f02:	f003 0301 	and.w	r3, r3, #1
 8010f06:	b2db      	uxtb	r3, r3
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d003      	beq.n	8010f14 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8010f0c:	4816      	ldr	r0, [pc, #88]	; (8010f68 <MX_LWIP_Init+0x280>)
 8010f0e:	f007 f90f 	bl	8018130 <netif_set_up>
 8010f12:	e002      	b.n	8010f1a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8010f14:	4814      	ldr	r0, [pc, #80]	; (8010f68 <MX_LWIP_Init+0x280>)
 8010f16:	f007 f977 	bl	8018208 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8010f1a:	4914      	ldr	r1, [pc, #80]	; (8010f6c <MX_LWIP_Init+0x284>)
 8010f1c:	4812      	ldr	r0, [pc, #72]	; (8010f68 <MX_LWIP_Init+0x280>)
 8010f1e:	f007 fa09 	bl	8018334 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8010f22:	4b13      	ldr	r3, [pc, #76]	; (8010f70 <MX_LWIP_Init+0x288>)
 8010f24:	1d3c      	adds	r4, r7, #4
 8010f26:	461d      	mov	r5, r3
 8010f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010f30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8010f34:	1d3b      	adds	r3, r7, #4
 8010f36:	490c      	ldr	r1, [pc, #48]	; (8010f68 <MX_LWIP_Init+0x280>)
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f000 fd45 	bl	80119c8 <osThreadCreate>

/* USER CODE BEGIN 3 */
/*Create the Ethernet link Handler Thread*/

/* USER CODE END 3 */
}
 8010f3e:	bf00      	nop
 8010f40:	3720      	adds	r7, #32
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bdb0      	pop	{r4, r5, r7, pc}
 8010f46:	bf00      	nop
 8010f48:	20001a6c 	.word	0x20001a6c
 8010f4c:	20001a70 	.word	0x20001a70
 8010f50:	20001a74 	.word	0x20001a74
 8010f54:	20001a60 	.word	0x20001a60
 8010f58:	20001a64 	.word	0x20001a64
 8010f5c:	20001a68 	.word	0x20001a68
 8010f60:	08017129 	.word	0x08017129
 8010f64:	0801146d 	.word	0x0801146d
 8010f68:	20001a2c 	.word	0x20001a2c
 8010f6c:	08010f75 	.word	0x08010f75
 8010f70:	08025404 	.word	0x08025404

08010f74 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8010f74:	b480      	push	{r7}
 8010f76:	b083      	sub	sp, #12
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8010f7c:	bf00      	nop
 8010f7e:	370c      	adds	r7, #12
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr

08010f88 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b087      	sub	sp, #28
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
 8010f90:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8010f9a:	2320      	movs	r3, #32
 8010f9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8010f9e:	f3bf 8f4f 	dsb	sy
}
 8010fa2:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8010fa4:	e00b      	b.n	8010fbe <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8010fa6:	4a0d      	ldr	r2, [pc, #52]	; (8010fdc <SCB_InvalidateDCache_by_Addr+0x54>)
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	693a      	ldr	r2, [r7, #16]
 8010fb2:	4413      	add	r3, r2
 8010fb4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8010fb6:	697a      	ldr	r2, [r7, #20]
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	1ad3      	subs	r3, r2, r3
 8010fbc:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	dcf0      	bgt.n	8010fa6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8010fc4:	f3bf 8f4f 	dsb	sy
}
 8010fc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010fca:	f3bf 8f6f 	isb	sy
}
 8010fce:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8010fd0:	bf00      	nop
 8010fd2:	371c      	adds	r7, #28
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr
 8010fdc:	e000ed00 	.word	0xe000ed00

08010fe0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b082      	sub	sp, #8
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8010fe8:	4b04      	ldr	r3, [pc, #16]	; (8010ffc <HAL_ETH_RxCpltCallback+0x1c>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	4618      	mov	r0, r3
 8010fee:	f000 fe67 	bl	8011cc0 <osSemaphoreRelease>
}
 8010ff2:	bf00      	nop
 8010ff4:	3708      	adds	r7, #8
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}
 8010ffa:	bf00      	nop
 8010ffc:	20006404 	.word	0x20006404

08011000 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b082      	sub	sp, #8
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8011008:	4b04      	ldr	r3, [pc, #16]	; (801101c <HAL_ETH_TxCpltCallback+0x1c>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4618      	mov	r0, r3
 801100e:	f000 fe57 	bl	8011cc0 <osSemaphoreRelease>
}
 8011012:	bf00      	nop
 8011014:	3708      	adds	r7, #8
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}
 801101a:	bf00      	nop
 801101c:	20006408 	.word	0x20006408

08011020 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b082      	sub	sp, #8
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f7fb fdf5 	bl	800cc18 <HAL_ETH_GetDMAError>
 801102e:	4603      	mov	r3, r0
 8011030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011034:	2b80      	cmp	r3, #128	; 0x80
 8011036:	d104      	bne.n	8011042 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8011038:	4b04      	ldr	r3, [pc, #16]	; (801104c <HAL_ETH_ErrorCallback+0x2c>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	4618      	mov	r0, r3
 801103e:	f000 fe3f 	bl	8011cc0 <osSemaphoreRelease>
  }
}
 8011042:	bf00      	nop
 8011044:	3708      	adds	r7, #8
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop
 801104c:	20006404 	.word	0x20006404

08011050 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8011050:	b5b0      	push	{r4, r5, r7, lr}
 8011052:	b0a8      	sub	sp, #160	; 0xa0
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8011058:	2300      	movs	r3, #0
 801105a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 801105e:	2300      	movs	r3, #0
 8011060:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8011064:	2300      	movs	r3, #0
 8011066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 801106a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801106e:	2264      	movs	r2, #100	; 0x64
 8011070:	2100      	movs	r1, #0
 8011072:	4618      	mov	r0, r3
 8011074:	f012 fe5c 	bl	8023d30 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8011078:	4b85      	ldr	r3, [pc, #532]	; (8011290 <low_level_init+0x240>)
 801107a:	4a86      	ldr	r2, [pc, #536]	; (8011294 <low_level_init+0x244>)
 801107c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 801107e:	2300      	movs	r3, #0
 8011080:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8011084:	2380      	movs	r3, #128	; 0x80
 8011086:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 801108a:	23e1      	movs	r3, #225	; 0xe1
 801108c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8011090:	2300      	movs	r3, #0
 8011092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8011096:	2300      	movs	r3, #0
 8011098:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 801109c:	2300      	movs	r3, #0
 801109e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80110a2:	4a7b      	ldr	r2, [pc, #492]	; (8011290 <low_level_init+0x240>)
 80110a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110a8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80110aa:	4b79      	ldr	r3, [pc, #484]	; (8011290 <low_level_init+0x240>)
 80110ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80110b0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80110b2:	4b77      	ldr	r3, [pc, #476]	; (8011290 <low_level_init+0x240>)
 80110b4:	4a78      	ldr	r2, [pc, #480]	; (8011298 <low_level_init+0x248>)
 80110b6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80110b8:	4b75      	ldr	r3, [pc, #468]	; (8011290 <low_level_init+0x240>)
 80110ba:	4a78      	ldr	r2, [pc, #480]	; (801129c <low_level_init+0x24c>)
 80110bc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80110be:	4b74      	ldr	r3, [pc, #464]	; (8011290 <low_level_init+0x240>)
 80110c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80110c4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80110c6:	4872      	ldr	r0, [pc, #456]	; (8011290 <low_level_init+0x240>)
 80110c8:	f7fa ff88 	bl	800bfdc <HAL_ETH_Init>
 80110cc:	4603      	mov	r3, r0
 80110ce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80110d2:	2238      	movs	r2, #56	; 0x38
 80110d4:	2100      	movs	r1, #0
 80110d6:	4872      	ldr	r0, [pc, #456]	; (80112a0 <low_level_init+0x250>)
 80110d8:	f012 fe2a 	bl	8023d30 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80110dc:	4b70      	ldr	r3, [pc, #448]	; (80112a0 <low_level_init+0x250>)
 80110de:	2221      	movs	r2, #33	; 0x21
 80110e0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80110e2:	4b6f      	ldr	r3, [pc, #444]	; (80112a0 <low_level_init+0x250>)
 80110e4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80110e8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80110ea:	4b6d      	ldr	r3, [pc, #436]	; (80112a0 <low_level_init+0x250>)
 80110ec:	2200      	movs	r2, #0
 80110ee:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80110f0:	486c      	ldr	r0, [pc, #432]	; (80112a4 <low_level_init+0x254>)
 80110f2:	f006 fd15 	bl	8017b20 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2206      	movs	r2, #6
 80110fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80110fe:	4b64      	ldr	r3, [pc, #400]	; (8011290 <low_level_init+0x240>)
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	781a      	ldrb	r2, [r3, #0]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801110a:	4b61      	ldr	r3, [pc, #388]	; (8011290 <low_level_init+0x240>)
 801110c:	685b      	ldr	r3, [r3, #4]
 801110e:	785a      	ldrb	r2, [r3, #1]
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8011116:	4b5e      	ldr	r3, [pc, #376]	; (8011290 <low_level_init+0x240>)
 8011118:	685b      	ldr	r3, [r3, #4]
 801111a:	789a      	ldrb	r2, [r3, #2]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8011122:	4b5b      	ldr	r3, [pc, #364]	; (8011290 <low_level_init+0x240>)
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	78da      	ldrb	r2, [r3, #3]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801112e:	4b58      	ldr	r3, [pc, #352]	; (8011290 <low_level_init+0x240>)
 8011130:	685b      	ldr	r3, [r3, #4]
 8011132:	791a      	ldrb	r2, [r3, #4]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801113a:	4b55      	ldr	r3, [pc, #340]	; (8011290 <low_level_init+0x240>)
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	795a      	ldrb	r2, [r3, #5]
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801114c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011154:	f043 030a 	orr.w	r3, r3, #10
 8011158:	b2da      	uxtb	r2, r3
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8011160:	2203      	movs	r2, #3
 8011162:	2100      	movs	r1, #0
 8011164:	2001      	movs	r0, #1
 8011166:	f001 f89b 	bl	80122a0 <xQueueGenericCreate>
 801116a:	4603      	mov	r3, r0
 801116c:	4a4e      	ldr	r2, [pc, #312]	; (80112a8 <low_level_init+0x258>)
 801116e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8011170:	2203      	movs	r2, #3
 8011172:	2100      	movs	r1, #0
 8011174:	2001      	movs	r0, #1
 8011176:	f001 f893 	bl	80122a0 <xQueueGenericCreate>
 801117a:	4603      	mov	r3, r0
 801117c:	4a4b      	ldr	r2, [pc, #300]	; (80112ac <low_level_init+0x25c>)
 801117e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8011180:	4b4b      	ldr	r3, [pc, #300]	; (80112b0 <low_level_init+0x260>)
 8011182:	f107 0408 	add.w	r4, r7, #8
 8011186:	461d      	mov	r5, r3
 8011188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801118a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801118c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011190:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8011194:	f107 0308 	add.w	r3, r7, #8
 8011198:	6879      	ldr	r1, [r7, #4]
 801119a:	4618      	mov	r0, r3
 801119c:	f000 fc14 	bl	80119c8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80111a0:	4944      	ldr	r1, [pc, #272]	; (80112b4 <low_level_init+0x264>)
 80111a2:	4845      	ldr	r0, [pc, #276]	; (80112b8 <low_level_init+0x268>)
 80111a4:	f7f9 fced 	bl	800ab82 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80111a8:	4843      	ldr	r0, [pc, #268]	; (80112b8 <low_level_init+0x268>)
 80111aa:	f7f9 fd1c 	bl	800abe6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80111ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d165      	bne.n	8011282 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80111b6:	4840      	ldr	r0, [pc, #256]	; (80112b8 <low_level_init+0x268>)
 80111b8:	f7f9 fdbd 	bl	800ad36 <LAN8742_GetLinkState>
 80111bc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80111c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80111c4:	2b01      	cmp	r3, #1
 80111c6:	dc06      	bgt.n	80111d6 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f007 f883 	bl	80182d4 <netif_set_link_down>
      netif_set_down(netif);
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f007 f81a 	bl	8018208 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80111d4:	e057      	b.n	8011286 <low_level_init+0x236>
      switch (PHYLinkState)
 80111d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80111da:	3b02      	subs	r3, #2
 80111dc:	2b03      	cmp	r3, #3
 80111de:	d82b      	bhi.n	8011238 <low_level_init+0x1e8>
 80111e0:	a201      	add	r2, pc, #4	; (adr r2, 80111e8 <low_level_init+0x198>)
 80111e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111e6:	bf00      	nop
 80111e8:	080111f9 	.word	0x080111f9
 80111ec:	0801120b 	.word	0x0801120b
 80111f0:	0801121b 	.word	0x0801121b
 80111f4:	0801122b 	.word	0x0801122b
        duplex = ETH_FULLDUPLEX_MODE;
 80111f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80111fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8011200:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8011208:	e01f      	b.n	801124a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 801120a:	2300      	movs	r3, #0
 801120c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8011210:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8011218:	e017      	b.n	801124a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 801121a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801121e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8011222:	2300      	movs	r3, #0
 8011224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8011228:	e00f      	b.n	801124a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 801122a:	2300      	movs	r3, #0
 801122c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8011230:	2300      	movs	r3, #0
 8011232:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8011236:	e008      	b.n	801124a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8011238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801123c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8011240:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8011248:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 801124a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801124e:	4619      	mov	r1, r3
 8011250:	480f      	ldr	r0, [pc, #60]	; (8011290 <low_level_init+0x240>)
 8011252:	f7fb fb87 	bl	800c964 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8011256:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801125a:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 801125c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011260:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8011262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011266:	4619      	mov	r1, r3
 8011268:	4809      	ldr	r0, [pc, #36]	; (8011290 <low_level_init+0x240>)
 801126a:	f7fb fc65 	bl	800cb38 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 801126e:	4808      	ldr	r0, [pc, #32]	; (8011290 <low_level_init+0x240>)
 8011270:	f7fa ff90 	bl	800c194 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f006 ff5b 	bl	8018130 <netif_set_up>
    netif_set_link_up(netif);
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f006 fff6 	bl	801826c <netif_set_link_up>
}
 8011280:	e001      	b.n	8011286 <low_level_init+0x236>
    Error_Handler();
 8011282:	f7f0 fdf9 	bl	8001e78 <Error_Handler>
}
 8011286:	bf00      	nop
 8011288:	37a0      	adds	r7, #160	; 0xa0
 801128a:	46bd      	mov	sp, r7
 801128c:	bdb0      	pop	{r4, r5, r7, pc}
 801128e:	bf00      	nop
 8011290:	2000640c 	.word	0x2000640c
 8011294:	40028000 	.word	0x40028000
 8011298:	20000148 	.word	0x20000148
 801129c:	200000a8 	.word	0x200000a8
 80112a0:	200064bc 	.word	0x200064bc
 80112a4:	080289d8 	.word	0x080289d8
 80112a8:	20006404 	.word	0x20006404
 80112ac:	20006408 	.word	0x20006408
 80112b0:	08025428 	.word	0x08025428
 80112b4:	20000018 	.word	0x20000018
 80112b8:	200064f4 	.word	0x200064f4

080112bc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b092      	sub	sp, #72	; 0x48
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80112c6:	2300      	movs	r3, #0
 80112c8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80112ca:	2300      	movs	r3, #0
 80112cc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80112ce:	2300      	movs	r3, #0
 80112d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80112d4:	f107 030c 	add.w	r3, r7, #12
 80112d8:	2230      	movs	r2, #48	; 0x30
 80112da:	2100      	movs	r1, #0
 80112dc:	4618      	mov	r0, r3
 80112de:	f012 fd27 	bl	8023d30 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80112e2:	f107 030c 	add.w	r3, r7, #12
 80112e6:	2230      	movs	r2, #48	; 0x30
 80112e8:	2100      	movs	r1, #0
 80112ea:	4618      	mov	r0, r3
 80112ec:	f012 fd20 	bl	8023d30 <memset>

  for(q = p; q != NULL; q = q->next)
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	643b      	str	r3, [r7, #64]	; 0x40
 80112f4:	e045      	b.n	8011382 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80112f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112f8:	2b03      	cmp	r3, #3
 80112fa:	d902      	bls.n	8011302 <low_level_output+0x46>
      return ERR_IF;
 80112fc:	f06f 030b 	mvn.w	r3, #11
 8011300:	e065      	b.n	80113ce <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8011302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011304:	6859      	ldr	r1, [r3, #4]
 8011306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011308:	4613      	mov	r3, r2
 801130a:	005b      	lsls	r3, r3, #1
 801130c:	4413      	add	r3, r2
 801130e:	009b      	lsls	r3, r3, #2
 8011310:	3348      	adds	r3, #72	; 0x48
 8011312:	443b      	add	r3, r7
 8011314:	3b3c      	subs	r3, #60	; 0x3c
 8011316:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8011318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801131a:	895b      	ldrh	r3, [r3, #10]
 801131c:	4619      	mov	r1, r3
 801131e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011320:	4613      	mov	r3, r2
 8011322:	005b      	lsls	r3, r3, #1
 8011324:	4413      	add	r3, r2
 8011326:	009b      	lsls	r3, r3, #2
 8011328:	3348      	adds	r3, #72	; 0x48
 801132a:	443b      	add	r3, r7
 801132c:	3b38      	subs	r3, #56	; 0x38
 801132e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8011330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011332:	2b00      	cmp	r3, #0
 8011334:	d011      	beq.n	801135a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8011336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011338:	1e5a      	subs	r2, r3, #1
 801133a:	f107 000c 	add.w	r0, r7, #12
 801133e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011340:	460b      	mov	r3, r1
 8011342:	005b      	lsls	r3, r3, #1
 8011344:	440b      	add	r3, r1
 8011346:	009b      	lsls	r3, r3, #2
 8011348:	18c1      	adds	r1, r0, r3
 801134a:	4613      	mov	r3, r2
 801134c:	005b      	lsls	r3, r3, #1
 801134e:	4413      	add	r3, r2
 8011350:	009b      	lsls	r3, r3, #2
 8011352:	3348      	adds	r3, #72	; 0x48
 8011354:	443b      	add	r3, r7
 8011356:	3b34      	subs	r3, #52	; 0x34
 8011358:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 801135a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d109      	bne.n	8011376 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8011362:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011364:	4613      	mov	r3, r2
 8011366:	005b      	lsls	r3, r3, #1
 8011368:	4413      	add	r3, r2
 801136a:	009b      	lsls	r3, r3, #2
 801136c:	3348      	adds	r3, #72	; 0x48
 801136e:	443b      	add	r3, r7
 8011370:	3b34      	subs	r3, #52	; 0x34
 8011372:	2200      	movs	r2, #0
 8011374:	601a      	str	r2, [r3, #0]
    }

    i++;
 8011376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011378:	3301      	adds	r3, #1
 801137a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 801137c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	643b      	str	r3, [r7, #64]	; 0x40
 8011382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011384:	2b00      	cmp	r3, #0
 8011386:	d1b6      	bne.n	80112f6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	891b      	ldrh	r3, [r3, #8]
 801138c:	461a      	mov	r2, r3
 801138e:	4b12      	ldr	r3, [pc, #72]	; (80113d8 <low_level_output+0x11c>)
 8011390:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8011392:	4a11      	ldr	r2, [pc, #68]	; (80113d8 <low_level_output+0x11c>)
 8011394:	f107 030c 	add.w	r3, r7, #12
 8011398:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801139a:	4a0f      	ldr	r2, [pc, #60]	; (80113d8 <low_level_output+0x11c>)
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80113a0:	6838      	ldr	r0, [r7, #0]
 80113a2:	f007 fc1b 	bl	8018bdc <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80113a6:	490c      	ldr	r1, [pc, #48]	; (80113d8 <low_level_output+0x11c>)
 80113a8:	480c      	ldr	r0, [pc, #48]	; (80113dc <low_level_output+0x120>)
 80113aa:	f7fa ff81 	bl	800c2b0 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80113ae:	bf00      	nop
 80113b0:	4b0b      	ldr	r3, [pc, #44]	; (80113e0 <low_level_output+0x124>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80113b8:	4618      	mov	r0, r3
 80113ba:	f000 fc33 	bl	8011c24 <osSemaphoreWait>
 80113be:	4603      	mov	r3, r0
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d1f5      	bne.n	80113b0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80113c4:	4805      	ldr	r0, [pc, #20]	; (80113dc <low_level_output+0x120>)
 80113c6:	f7fb f907 	bl	800c5d8 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80113ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3748      	adds	r7, #72	; 0x48
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}
 80113d6:	bf00      	nop
 80113d8:	200064bc 	.word	0x200064bc
 80113dc:	2000640c 	.word	0x2000640c
 80113e0:	20006408 	.word	0x20006408

080113e4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b084      	sub	sp, #16
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80113ec:	2300      	movs	r3, #0
 80113ee:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80113f0:	4b07      	ldr	r3, [pc, #28]	; (8011410 <low_level_input+0x2c>)
 80113f2:	781b      	ldrb	r3, [r3, #0]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d105      	bne.n	8011404 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80113f8:	f107 030c 	add.w	r3, r7, #12
 80113fc:	4619      	mov	r1, r3
 80113fe:	4805      	ldr	r0, [pc, #20]	; (8011414 <low_level_input+0x30>)
 8011400:	f7fa ffb2 	bl	800c368 <HAL_ETH_ReadData>
  }

  return p;
 8011404:	68fb      	ldr	r3, [r7, #12]
}
 8011406:	4618      	mov	r0, r3
 8011408:	3710      	adds	r7, #16
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	20006400 	.word	0x20006400
 8011414:	2000640c 	.word	0x2000640c

08011418 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b084      	sub	sp, #16
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8011420:	2300      	movs	r3, #0
 8011422:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8011428:	4b0f      	ldr	r3, [pc, #60]	; (8011468 <ethernetif_input+0x50>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011430:	4618      	mov	r0, r3
 8011432:	f000 fbf7 	bl	8011c24 <osSemaphoreWait>
 8011436:	4603      	mov	r3, r0
 8011438:	2b00      	cmp	r3, #0
 801143a:	d1f5      	bne.n	8011428 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 801143c:	68b8      	ldr	r0, [r7, #8]
 801143e:	f7ff ffd1 	bl	80113e4 <low_level_input>
 8011442:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d00a      	beq.n	8011460 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	691b      	ldr	r3, [r3, #16]
 801144e:	68b9      	ldr	r1, [r7, #8]
 8011450:	68f8      	ldr	r0, [r7, #12]
 8011452:	4798      	blx	r3
 8011454:	4603      	mov	r3, r0
 8011456:	2b00      	cmp	r3, #0
 8011458:	d002      	beq.n	8011460 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 801145a:	68f8      	ldr	r0, [r7, #12]
 801145c:	f007 fb18 	bl	8018a90 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d1ea      	bne.n	801143c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8011466:	e7df      	b.n	8011428 <ethernetif_input+0x10>
 8011468:	20006404 	.word	0x20006404

0801146c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b082      	sub	sp, #8
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d106      	bne.n	8011488 <ethernetif_init+0x1c>
 801147a:	4b0e      	ldr	r3, [pc, #56]	; (80114b4 <ethernetif_init+0x48>)
 801147c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8011480:	490d      	ldr	r1, [pc, #52]	; (80114b8 <ethernetif_init+0x4c>)
 8011482:	480e      	ldr	r0, [pc, #56]	; (80114bc <ethernetif_init+0x50>)
 8011484:	f012 fd3c 	bl	8023f00 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2273      	movs	r2, #115	; 0x73
 801148c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2274      	movs	r2, #116	; 0x74
 8011494:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	4a09      	ldr	r2, [pc, #36]	; (80114c0 <ethernetif_init+0x54>)
 801149c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	4a08      	ldr	r2, [pc, #32]	; (80114c4 <ethernetif_init+0x58>)
 80114a2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f7ff fdd3 	bl	8011050 <low_level_init>

  return ERR_OK;
 80114aa:	2300      	movs	r3, #0
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3708      	adds	r7, #8
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}
 80114b4:	08025444 	.word	0x08025444
 80114b8:	08025460 	.word	0x08025460
 80114bc:	08025470 	.word	0x08025470
 80114c0:	0802095d 	.word	0x0802095d
 80114c4:	080112bd 	.word	0x080112bd

080114c8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b084      	sub	sp, #16
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80114d4:	68f9      	ldr	r1, [r7, #12]
 80114d6:	4809      	ldr	r0, [pc, #36]	; (80114fc <pbuf_free_custom+0x34>)
 80114d8:	f006 fc12 	bl	8017d00 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80114dc:	4b08      	ldr	r3, [pc, #32]	; (8011500 <pbuf_free_custom+0x38>)
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	2b01      	cmp	r3, #1
 80114e2:	d107      	bne.n	80114f4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80114e4:	4b06      	ldr	r3, [pc, #24]	; (8011500 <pbuf_free_custom+0x38>)
 80114e6:	2200      	movs	r2, #0
 80114e8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80114ea:	4b06      	ldr	r3, [pc, #24]	; (8011504 <pbuf_free_custom+0x3c>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	4618      	mov	r0, r3
 80114f0:	f000 fbe6 	bl	8011cc0 <osSemaphoreRelease>
  }
}
 80114f4:	bf00      	nop
 80114f6:	3710      	adds	r7, #16
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}
 80114fc:	080289d8 	.word	0x080289d8
 8011500:	20006400 	.word	0x20006400
 8011504:	20006404 	.word	0x20006404

08011508 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801150c:	f7f9 fcbc 	bl	800ae88 <HAL_GetTick>
 8011510:	4603      	mov	r3, r0
}
 8011512:	4618      	mov	r0, r3
 8011514:	bd80      	pop	{r7, pc}
	...

08011518 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b08e      	sub	sp, #56	; 0x38
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011524:	2200      	movs	r2, #0
 8011526:	601a      	str	r2, [r3, #0]
 8011528:	605a      	str	r2, [r3, #4]
 801152a:	609a      	str	r2, [r3, #8]
 801152c:	60da      	str	r2, [r3, #12]
 801152e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	4a52      	ldr	r2, [pc, #328]	; (8011680 <HAL_ETH_MspInit+0x168>)
 8011536:	4293      	cmp	r3, r2
 8011538:	f040 809e 	bne.w	8011678 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801153c:	4b51      	ldr	r3, [pc, #324]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 801153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011540:	4a50      	ldr	r2, [pc, #320]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 8011542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011546:	6313      	str	r3, [r2, #48]	; 0x30
 8011548:	4b4e      	ldr	r3, [pc, #312]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 801154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011550:	623b      	str	r3, [r7, #32]
 8011552:	6a3b      	ldr	r3, [r7, #32]
 8011554:	4b4b      	ldr	r3, [pc, #300]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 8011556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011558:	4a4a      	ldr	r2, [pc, #296]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 801155a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801155e:	6313      	str	r3, [r2, #48]	; 0x30
 8011560:	4b48      	ldr	r3, [pc, #288]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 8011562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011568:	61fb      	str	r3, [r7, #28]
 801156a:	69fb      	ldr	r3, [r7, #28]
 801156c:	4b45      	ldr	r3, [pc, #276]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 801156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011570:	4a44      	ldr	r2, [pc, #272]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 8011572:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011576:	6313      	str	r3, [r2, #48]	; 0x30
 8011578:	4b42      	ldr	r3, [pc, #264]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 801157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801157c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011580:	61bb      	str	r3, [r7, #24]
 8011582:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011584:	4b3f      	ldr	r3, [pc, #252]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 8011586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011588:	4a3e      	ldr	r2, [pc, #248]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 801158a:	f043 0304 	orr.w	r3, r3, #4
 801158e:	6313      	str	r3, [r2, #48]	; 0x30
 8011590:	4b3c      	ldr	r3, [pc, #240]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 8011592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011594:	f003 0304 	and.w	r3, r3, #4
 8011598:	617b      	str	r3, [r7, #20]
 801159a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801159c:	4b39      	ldr	r3, [pc, #228]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 801159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115a0:	4a38      	ldr	r2, [pc, #224]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 80115a2:	f043 0301 	orr.w	r3, r3, #1
 80115a6:	6313      	str	r3, [r2, #48]	; 0x30
 80115a8:	4b36      	ldr	r3, [pc, #216]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 80115aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115ac:	f003 0301 	and.w	r3, r3, #1
 80115b0:	613b      	str	r3, [r7, #16]
 80115b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80115b4:	4b33      	ldr	r3, [pc, #204]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 80115b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115b8:	4a32      	ldr	r2, [pc, #200]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 80115ba:	f043 0302 	orr.w	r3, r3, #2
 80115be:	6313      	str	r3, [r2, #48]	; 0x30
 80115c0:	4b30      	ldr	r3, [pc, #192]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 80115c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115c4:	f003 0302 	and.w	r3, r3, #2
 80115c8:	60fb      	str	r3, [r7, #12]
 80115ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80115cc:	4b2d      	ldr	r3, [pc, #180]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 80115ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115d0:	4a2c      	ldr	r2, [pc, #176]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 80115d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115d6:	6313      	str	r3, [r2, #48]	; 0x30
 80115d8:	4b2a      	ldr	r3, [pc, #168]	; (8011684 <HAL_ETH_MspInit+0x16c>)
 80115da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115e0:	60bb      	str	r3, [r7, #8]
 80115e2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80115e4:	2332      	movs	r3, #50	; 0x32
 80115e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115e8:	2302      	movs	r3, #2
 80115ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115ec:	2300      	movs	r3, #0
 80115ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80115f0:	2303      	movs	r3, #3
 80115f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80115f4:	230b      	movs	r3, #11
 80115f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80115f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115fc:	4619      	mov	r1, r3
 80115fe:	4822      	ldr	r0, [pc, #136]	; (8011688 <HAL_ETH_MspInit+0x170>)
 8011600:	f7fb ff1a 	bl	800d438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8011604:	2386      	movs	r3, #134	; 0x86
 8011606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011608:	2302      	movs	r3, #2
 801160a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801160c:	2300      	movs	r3, #0
 801160e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011610:	2303      	movs	r3, #3
 8011612:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011614:	230b      	movs	r3, #11
 8011616:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801161c:	4619      	mov	r1, r3
 801161e:	481b      	ldr	r0, [pc, #108]	; (801168c <HAL_ETH_MspInit+0x174>)
 8011620:	f7fb ff0a 	bl	800d438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8011624:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8011628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801162a:	2302      	movs	r3, #2
 801162c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801162e:	2300      	movs	r3, #0
 8011630:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011632:	2303      	movs	r3, #3
 8011634:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011636:	230b      	movs	r3, #11
 8011638:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801163e:	4619      	mov	r1, r3
 8011640:	4813      	ldr	r0, [pc, #76]	; (8011690 <HAL_ETH_MspInit+0x178>)
 8011642:	f7fb fef9 	bl	800d438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8011646:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801164a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801164c:	2302      	movs	r3, #2
 801164e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011650:	2300      	movs	r3, #0
 8011652:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011654:	2303      	movs	r3, #3
 8011656:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011658:	230b      	movs	r3, #11
 801165a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011660:	4619      	mov	r1, r3
 8011662:	480c      	ldr	r0, [pc, #48]	; (8011694 <HAL_ETH_MspInit+0x17c>)
 8011664:	f7fb fee8 	bl	800d438 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8011668:	2200      	movs	r2, #0
 801166a:	2105      	movs	r1, #5
 801166c:	203d      	movs	r0, #61	; 0x3d
 801166e:	f7fa fbeb 	bl	800be48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8011672:	203d      	movs	r0, #61	; 0x3d
 8011674:	f7fa fc04 	bl	800be80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8011678:	bf00      	nop
 801167a:	3738      	adds	r7, #56	; 0x38
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}
 8011680:	40028000 	.word	0x40028000
 8011684:	40023800 	.word	0x40023800
 8011688:	40020800 	.word	0x40020800
 801168c:	40020000 	.word	0x40020000
 8011690:	40020400 	.word	0x40020400
 8011694:	40021800 	.word	0x40021800

08011698 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801169c:	4802      	ldr	r0, [pc, #8]	; (80116a8 <ETH_PHY_IO_Init+0x10>)
 801169e:	f7fb fa65 	bl	800cb6c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80116a2:	2300      	movs	r3, #0
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	2000640c 	.word	0x2000640c

080116ac <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80116ac:	b480      	push	{r7}
 80116ae:	af00      	add	r7, sp, #0
  return 0;
 80116b0:	2300      	movs	r3, #0
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr

080116bc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b084      	sub	sp, #16
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	60f8      	str	r0, [r7, #12]
 80116c4:	60b9      	str	r1, [r7, #8]
 80116c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	68ba      	ldr	r2, [r7, #8]
 80116cc:	68f9      	ldr	r1, [r7, #12]
 80116ce:	4807      	ldr	r0, [pc, #28]	; (80116ec <ETH_PHY_IO_ReadReg+0x30>)
 80116d0:	f7fb f8b4 	bl	800c83c <HAL_ETH_ReadPHYRegister>
 80116d4:	4603      	mov	r3, r0
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d002      	beq.n	80116e0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80116da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80116de:	e000      	b.n	80116e2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80116e0:	2300      	movs	r3, #0
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3710      	adds	r7, #16
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}
 80116ea:	bf00      	nop
 80116ec:	2000640c 	.word	0x2000640c

080116f0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	60b9      	str	r1, [r7, #8]
 80116fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	68ba      	ldr	r2, [r7, #8]
 8011700:	68f9      	ldr	r1, [r7, #12]
 8011702:	4807      	ldr	r0, [pc, #28]	; (8011720 <ETH_PHY_IO_WriteReg+0x30>)
 8011704:	f7fb f8e5 	bl	800c8d2 <HAL_ETH_WritePHYRegister>
 8011708:	4603      	mov	r3, r0
 801170a:	2b00      	cmp	r3, #0
 801170c:	d002      	beq.n	8011714 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801170e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011712:	e000      	b.n	8011716 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8011714:	2300      	movs	r3, #0
}
 8011716:	4618      	mov	r0, r3
 8011718:	3710      	adds	r7, #16
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
 801171e:	bf00      	nop
 8011720:	2000640c 	.word	0x2000640c

08011724 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8011728:	f7f9 fbae 	bl	800ae88 <HAL_GetTick>
 801172c:	4603      	mov	r3, r0
}
 801172e:	4618      	mov	r0, r3
 8011730:	bd80      	pop	{r7, pc}
	...

08011734 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b0a0      	sub	sp, #128	; 0x80
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 801173c:	f107 0308 	add.w	r3, r7, #8
 8011740:	2264      	movs	r2, #100	; 0x64
 8011742:	2100      	movs	r1, #0
 8011744:	4618      	mov	r0, r3
 8011746:	f012 faf3 	bl	8023d30 <memset>
  int32_t PHYLinkState = 0;
 801174a:	2300      	movs	r3, #0
 801174c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 801174e:	2300      	movs	r3, #0
 8011750:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011752:	2300      	movs	r3, #0
 8011754:	67bb      	str	r3, [r7, #120]	; 0x78
 8011756:	2300      	movs	r3, #0
 8011758:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 801175e:	4839      	ldr	r0, [pc, #228]	; (8011844 <ethernet_link_thread+0x110>)
 8011760:	f7f9 fae9 	bl	800ad36 <LAN8742_GetLinkState>
 8011764:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8011766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011768:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801176c:	089b      	lsrs	r3, r3, #2
 801176e:	f003 0301 	and.w	r3, r3, #1
 8011772:	b2db      	uxtb	r3, r3
 8011774:	2b00      	cmp	r3, #0
 8011776:	d009      	beq.n	801178c <ethernet_link_thread+0x58>
 8011778:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801177a:	2b01      	cmp	r3, #1
 801177c:	dc06      	bgt.n	801178c <ethernet_link_thread+0x58>
  {
	//Due to no restart_IT point
	///////////////////////
    //HAL_ETH_Stop_IT(&heth);
    //////////////////////
    netif_set_down(netif);
 801177e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011780:	f006 fd42 	bl	8018208 <netif_set_down>
    netif_set_link_down(netif);
 8011784:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011786:	f006 fda5 	bl	80182d4 <netif_set_link_down>
 801178a:	e056      	b.n	801183a <ethernet_link_thread+0x106>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 801178c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801178e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011792:	f003 0304 	and.w	r3, r3, #4
 8011796:	2b00      	cmp	r3, #0
 8011798:	d14f      	bne.n	801183a <ethernet_link_thread+0x106>
 801179a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801179c:	2b01      	cmp	r3, #1
 801179e:	dd4c      	ble.n	801183a <ethernet_link_thread+0x106>
  {
    switch (PHYLinkState)
 80117a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80117a2:	3b02      	subs	r3, #2
 80117a4:	2b03      	cmp	r3, #3
 80117a6:	d82b      	bhi.n	8011800 <ethernet_link_thread+0xcc>
 80117a8:	a201      	add	r2, pc, #4	; (adr r2, 80117b0 <ethernet_link_thread+0x7c>)
 80117aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117ae:	bf00      	nop
 80117b0:	080117c1 	.word	0x080117c1
 80117b4:	080117d3 	.word	0x080117d3
 80117b8:	080117e3 	.word	0x080117e3
 80117bc:	080117f3 	.word	0x080117f3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80117c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80117c4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80117c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80117ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80117cc:	2301      	movs	r3, #1
 80117ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80117d0:	e017      	b.n	8011802 <ethernet_link_thread+0xce>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80117d2:	2300      	movs	r3, #0
 80117d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80117d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80117da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80117dc:	2301      	movs	r3, #1
 80117de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80117e0:	e00f      	b.n	8011802 <ethernet_link_thread+0xce>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80117e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80117e6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80117e8:	2300      	movs	r3, #0
 80117ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80117ec:	2301      	movs	r3, #1
 80117ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80117f0:	e007      	b.n	8011802 <ethernet_link_thread+0xce>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80117f2:	2300      	movs	r3, #0
 80117f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80117f6:	2300      	movs	r3, #0
 80117f8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80117fa:	2301      	movs	r3, #1
 80117fc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80117fe:	e000      	b.n	8011802 <ethernet_link_thread+0xce>
    default:
      break;
 8011800:	bf00      	nop
    }

    if(linkchanged)
 8011802:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011804:	2b00      	cmp	r3, #0
 8011806:	d018      	beq.n	801183a <ethernet_link_thread+0x106>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8011808:	f107 0308 	add.w	r3, r7, #8
 801180c:	4619      	mov	r1, r3
 801180e:	480e      	ldr	r0, [pc, #56]	; (8011848 <ethernet_link_thread+0x114>)
 8011810:	f7fb f8a8 	bl	800c964 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8011814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011816:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8011818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801181a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801181c:	f107 0308 	add.w	r3, r7, #8
 8011820:	4619      	mov	r1, r3
 8011822:	4809      	ldr	r0, [pc, #36]	; (8011848 <ethernet_link_thread+0x114>)
 8011824:	f7fb f988 	bl	800cb38 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8011828:	4807      	ldr	r0, [pc, #28]	; (8011848 <ethernet_link_thread+0x114>)
 801182a:	f7fa fc53 	bl	800c0d4 <HAL_ETH_Start>
      netif_set_up(netif);
 801182e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011830:	f006 fc7e 	bl	8018130 <netif_set_up>
      netif_set_link_up(netif);
 8011834:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011836:	f006 fd19 	bl	801826c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(1000);
 801183a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801183e:	f000 f90f 	bl	8011a60 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8011842:	e78c      	b.n	801175e <ethernet_link_thread+0x2a>
 8011844:	200064f4 	.word	0x200064f4
 8011848:	2000640c 	.word	0x2000640c

0801184c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b086      	sub	sp, #24
 8011850:	af02      	add	r7, sp, #8
 8011852:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8011854:	4812      	ldr	r0, [pc, #72]	; (80118a0 <HAL_ETH_RxAllocateCallback+0x54>)
 8011856:	f006 f9df 	bl	8017c18 <memp_malloc_pool>
 801185a:	60f8      	str	r0, [r7, #12]
  if (p)
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d014      	beq.n	801188c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f103 0220 	add.w	r2, r3, #32
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	4a0d      	ldr	r2, [pc, #52]	; (80118a4 <HAL_ETH_RxAllocateCallback+0x58>)
 8011870:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801187a:	9201      	str	r2, [sp, #4]
 801187c:	9300      	str	r3, [sp, #0]
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	2241      	movs	r2, #65	; 0x41
 8011882:	2100      	movs	r1, #0
 8011884:	2000      	movs	r0, #0
 8011886:	f006 ff49 	bl	801871c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 801188a:	e005      	b.n	8011898 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 801188c:	4b06      	ldr	r3, [pc, #24]	; (80118a8 <HAL_ETH_RxAllocateCallback+0x5c>)
 801188e:	2201      	movs	r2, #1
 8011890:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2200      	movs	r2, #0
 8011896:	601a      	str	r2, [r3, #0]
}
 8011898:	bf00      	nop
 801189a:	3710      	adds	r7, #16
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}
 80118a0:	080289d8 	.word	0x080289d8
 80118a4:	080114c9 	.word	0x080114c9
 80118a8:	20006400 	.word	0x20006400

080118ac <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b088      	sub	sp, #32
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	607a      	str	r2, [r7, #4]
 80118b8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80118c2:	2300      	movs	r3, #0
 80118c4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	3b20      	subs	r3, #32
 80118ca:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	2200      	movs	r2, #0
 80118d0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	2200      	movs	r2, #0
 80118d6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80118d8:	69fb      	ldr	r3, [r7, #28]
 80118da:	887a      	ldrh	r2, [r7, #2]
 80118dc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80118de:	69bb      	ldr	r3, [r7, #24]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d103      	bne.n	80118ee <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80118e6:	69bb      	ldr	r3, [r7, #24]
 80118e8:	69fa      	ldr	r2, [r7, #28]
 80118ea:	601a      	str	r2, [r3, #0]
 80118ec:	e003      	b.n	80118f6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	69fa      	ldr	r2, [r7, #28]
 80118f4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	69fa      	ldr	r2, [r7, #28]
 80118fa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80118fc:	69bb      	ldr	r3, [r7, #24]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	61fb      	str	r3, [r7, #28]
 8011902:	e009      	b.n	8011918 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8011904:	69fb      	ldr	r3, [r7, #28]
 8011906:	891a      	ldrh	r2, [r3, #8]
 8011908:	887b      	ldrh	r3, [r7, #2]
 801190a:	4413      	add	r3, r2
 801190c:	b29a      	uxth	r2, r3
 801190e:	69fb      	ldr	r3, [r7, #28]
 8011910:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8011912:	69fb      	ldr	r3, [r7, #28]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	61fb      	str	r3, [r7, #28]
 8011918:	69fb      	ldr	r3, [r7, #28]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d1f2      	bne.n	8011904 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 801191e:	887b      	ldrh	r3, [r7, #2]
 8011920:	4619      	mov	r1, r3
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f7ff fb30 	bl	8010f88 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8011928:	bf00      	nop
 801192a:	3720      	adds	r7, #32
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}

08011930 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f007 f8a9 	bl	8018a90 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 801193e:	bf00      	nop
 8011940:	3708      	adds	r7, #8
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}

08011946 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011946:	b480      	push	{r7}
 8011948:	b085      	sub	sp, #20
 801194a:	af00      	add	r7, sp, #0
 801194c:	4603      	mov	r3, r0
 801194e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011950:	2300      	movs	r3, #0
 8011952:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011958:	2b84      	cmp	r3, #132	; 0x84
 801195a:	d005      	beq.n	8011968 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801195c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	4413      	add	r3, r2
 8011964:	3303      	adds	r3, #3
 8011966:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011968:	68fb      	ldr	r3, [r7, #12]
}
 801196a:	4618      	mov	r0, r3
 801196c:	3714      	adds	r7, #20
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr

08011976 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011976:	b480      	push	{r7}
 8011978:	b083      	sub	sp, #12
 801197a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801197c:	f3ef 8305 	mrs	r3, IPSR
 8011980:	607b      	str	r3, [r7, #4]
  return(result);
 8011982:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011984:	2b00      	cmp	r3, #0
 8011986:	bf14      	ite	ne
 8011988:	2301      	movne	r3, #1
 801198a:	2300      	moveq	r3, #0
 801198c:	b2db      	uxtb	r3, r3
}
 801198e:	4618      	mov	r0, r3
 8011990:	370c      	adds	r7, #12
 8011992:	46bd      	mov	sp, r7
 8011994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011998:	4770      	bx	lr

0801199a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801199a:	b580      	push	{r7, lr}
 801199c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801199e:	f001 fe9f 	bl	80136e0 <vTaskStartScheduler>
  
  return osOK;
 80119a2:	2300      	movs	r3, #0
}
 80119a4:	4618      	mov	r0, r3
 80119a6:	bd80      	pop	{r7, pc}

080119a8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80119ac:	f7ff ffe3 	bl	8011976 <inHandlerMode>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d003      	beq.n	80119be <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80119b6:	f001 ffbd 	bl	8013934 <xTaskGetTickCountFromISR>
 80119ba:	4603      	mov	r3, r0
 80119bc:	e002      	b.n	80119c4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80119be:	f001 ffa9 	bl	8013914 <xTaskGetTickCount>
 80119c2:	4603      	mov	r3, r0
  }
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	bd80      	pop	{r7, pc}

080119c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80119c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119ca:	b089      	sub	sp, #36	; 0x24
 80119cc:	af04      	add	r7, sp, #16
 80119ce:	6078      	str	r0, [r7, #4]
 80119d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	695b      	ldr	r3, [r3, #20]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d020      	beq.n	8011a1c <osThreadCreate+0x54>
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	699b      	ldr	r3, [r3, #24]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d01c      	beq.n	8011a1c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	685c      	ldr	r4, [r3, #4]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681d      	ldr	r5, [r3, #0]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	691e      	ldr	r6, [r3, #16]
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7ff ffa6 	bl	8011946 <makeFreeRtosPriority>
 80119fa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	695b      	ldr	r3, [r3, #20]
 8011a00:	687a      	ldr	r2, [r7, #4]
 8011a02:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011a04:	9202      	str	r2, [sp, #8]
 8011a06:	9301      	str	r3, [sp, #4]
 8011a08:	9100      	str	r1, [sp, #0]
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	4632      	mov	r2, r6
 8011a0e:	4629      	mov	r1, r5
 8011a10:	4620      	mov	r0, r4
 8011a12:	f001 fb67 	bl	80130e4 <xTaskCreateStatic>
 8011a16:	4603      	mov	r3, r0
 8011a18:	60fb      	str	r3, [r7, #12]
 8011a1a:	e01c      	b.n	8011a56 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	685c      	ldr	r4, [r3, #4]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011a28:	b29e      	uxth	r6, r3
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7ff ff88 	bl	8011946 <makeFreeRtosPriority>
 8011a36:	4602      	mov	r2, r0
 8011a38:	f107 030c 	add.w	r3, r7, #12
 8011a3c:	9301      	str	r3, [sp, #4]
 8011a3e:	9200      	str	r2, [sp, #0]
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	4632      	mov	r2, r6
 8011a44:	4629      	mov	r1, r5
 8011a46:	4620      	mov	r0, r4
 8011a48:	f001 fbaf 	bl	80131aa <xTaskCreate>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	2b01      	cmp	r3, #1
 8011a50:	d001      	beq.n	8011a56 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011a52:	2300      	movs	r3, #0
 8011a54:	e000      	b.n	8011a58 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011a56:	68fb      	ldr	r3, [r7, #12]
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	3714      	adds	r7, #20
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011a60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b084      	sub	sp, #16
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d001      	beq.n	8011a76 <osDelay+0x16>
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	e000      	b.n	8011a78 <osDelay+0x18>
 8011a76:	2301      	movs	r3, #1
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f001 fdfb 	bl	8013674 <vTaskDelay>
  
  return osOK;
 8011a7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3710      	adds	r7, #16
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}

08011a88 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b082      	sub	sp, #8
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	685b      	ldr	r3, [r3, #4]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d007      	beq.n	8011aa8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	685b      	ldr	r3, [r3, #4]
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	2001      	movs	r0, #1
 8011aa0:	f000 fc91 	bl	80123c6 <xQueueCreateMutexStatic>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	e003      	b.n	8011ab0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011aa8:	2001      	movs	r0, #1
 8011aaa:	f000 fc74 	bl	8012396 <xQueueCreateMutex>
 8011aae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3708      	adds	r7, #8
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d101      	bne.n	8011ad0 <osMutexWait+0x18>
    return osErrorParameter;
 8011acc:	2380      	movs	r3, #128	; 0x80
 8011ace:	e03a      	b.n	8011b46 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ada:	d103      	bne.n	8011ae4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ae0:	60fb      	str	r3, [r7, #12]
 8011ae2:	e009      	b.n	8011af8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d006      	beq.n	8011af8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d101      	bne.n	8011af8 <osMutexWait+0x40>
      ticks = 1;
 8011af4:	2301      	movs	r3, #1
 8011af6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011af8:	f7ff ff3d 	bl	8011976 <inHandlerMode>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d017      	beq.n	8011b32 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011b02:	f107 0308 	add.w	r3, r7, #8
 8011b06:	461a      	mov	r2, r3
 8011b08:	2100      	movs	r1, #0
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f001 f8ac 	bl	8012c68 <xQueueReceiveFromISR>
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b01      	cmp	r3, #1
 8011b14:	d001      	beq.n	8011b1a <osMutexWait+0x62>
      return osErrorOS;
 8011b16:	23ff      	movs	r3, #255	; 0xff
 8011b18:	e015      	b.n	8011b46 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d011      	beq.n	8011b44 <osMutexWait+0x8c>
 8011b20:	4b0b      	ldr	r3, [pc, #44]	; (8011b50 <osMutexWait+0x98>)
 8011b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b26:	601a      	str	r2, [r3, #0]
 8011b28:	f3bf 8f4f 	dsb	sy
 8011b2c:	f3bf 8f6f 	isb	sy
 8011b30:	e008      	b.n	8011b44 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011b32:	68f9      	ldr	r1, [r7, #12]
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f000 ff83 	bl	8012a40 <xQueueSemaphoreTake>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	2b01      	cmp	r3, #1
 8011b3e:	d001      	beq.n	8011b44 <osMutexWait+0x8c>
    return osErrorOS;
 8011b40:	23ff      	movs	r3, #255	; 0xff
 8011b42:	e000      	b.n	8011b46 <osMutexWait+0x8e>
  }
  
  return osOK;
 8011b44:	2300      	movs	r3, #0
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3710      	adds	r7, #16
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	e000ed04 	.word	0xe000ed04

08011b54 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b084      	sub	sp, #16
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011b60:	2300      	movs	r3, #0
 8011b62:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8011b64:	f7ff ff07 	bl	8011976 <inHandlerMode>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d016      	beq.n	8011b9c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011b6e:	f107 0308 	add.w	r3, r7, #8
 8011b72:	4619      	mov	r1, r3
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f000 fde7 	bl	8012748 <xQueueGiveFromISR>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	d001      	beq.n	8011b84 <osMutexRelease+0x30>
      return osErrorOS;
 8011b80:	23ff      	movs	r3, #255	; 0xff
 8011b82:	e017      	b.n	8011bb4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d013      	beq.n	8011bb2 <osMutexRelease+0x5e>
 8011b8a:	4b0c      	ldr	r3, [pc, #48]	; (8011bbc <osMutexRelease+0x68>)
 8011b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b90:	601a      	str	r2, [r3, #0]
 8011b92:	f3bf 8f4f 	dsb	sy
 8011b96:	f3bf 8f6f 	isb	sy
 8011b9a:	e00a      	b.n	8011bb2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	2100      	movs	r1, #0
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f000 fc2a 	bl	80123fc <xQueueGenericSend>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	2b01      	cmp	r3, #1
 8011bac:	d001      	beq.n	8011bb2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011bae:	23ff      	movs	r3, #255	; 0xff
 8011bb0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3710      	adds	r7, #16
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}
 8011bbc:	e000ed04 	.word	0xe000ed04

08011bc0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b086      	sub	sp, #24
 8011bc4:	af02      	add	r7, sp, #8
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	685b      	ldr	r3, [r3, #4]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d00f      	beq.n	8011bf2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	2b01      	cmp	r3, #1
 8011bd6:	d10a      	bne.n	8011bee <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	685b      	ldr	r3, [r3, #4]
 8011bdc:	2203      	movs	r2, #3
 8011bde:	9200      	str	r2, [sp, #0]
 8011be0:	2200      	movs	r2, #0
 8011be2:	2100      	movs	r1, #0
 8011be4:	2001      	movs	r0, #1
 8011be6:	f000 fad9 	bl	801219c <xQueueGenericCreateStatic>
 8011bea:	4603      	mov	r3, r0
 8011bec:	e016      	b.n	8011c1c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	e014      	b.n	8011c1c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	2b01      	cmp	r3, #1
 8011bf6:	d110      	bne.n	8011c1a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8011bf8:	2203      	movs	r2, #3
 8011bfa:	2100      	movs	r1, #0
 8011bfc:	2001      	movs	r0, #1
 8011bfe:	f000 fb4f 	bl	80122a0 <xQueueGenericCreate>
 8011c02:	60f8      	str	r0, [r7, #12]
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d005      	beq.n	8011c16 <osSemaphoreCreate+0x56>
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	2100      	movs	r1, #0
 8011c10:	68f8      	ldr	r0, [r7, #12]
 8011c12:	f000 fbf3 	bl	80123fc <xQueueGenericSend>
      return sema;
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	e000      	b.n	8011c1c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8011c1a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3710      	adds	r7, #16
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011c2e:	2300      	movs	r3, #0
 8011c30:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d101      	bne.n	8011c3c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011c38:	2380      	movs	r3, #128	; 0x80
 8011c3a:	e03a      	b.n	8011cb2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c46:	d103      	bne.n	8011c50 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c4c:	60fb      	str	r3, [r7, #12]
 8011c4e:	e009      	b.n	8011c64 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d006      	beq.n	8011c64 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d101      	bne.n	8011c64 <osSemaphoreWait+0x40>
      ticks = 1;
 8011c60:	2301      	movs	r3, #1
 8011c62:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011c64:	f7ff fe87 	bl	8011976 <inHandlerMode>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d017      	beq.n	8011c9e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011c6e:	f107 0308 	add.w	r3, r7, #8
 8011c72:	461a      	mov	r2, r3
 8011c74:	2100      	movs	r1, #0
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f000 fff6 	bl	8012c68 <xQueueReceiveFromISR>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2b01      	cmp	r3, #1
 8011c80:	d001      	beq.n	8011c86 <osSemaphoreWait+0x62>
      return osErrorOS;
 8011c82:	23ff      	movs	r3, #255	; 0xff
 8011c84:	e015      	b.n	8011cb2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d011      	beq.n	8011cb0 <osSemaphoreWait+0x8c>
 8011c8c:	4b0b      	ldr	r3, [pc, #44]	; (8011cbc <osSemaphoreWait+0x98>)
 8011c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c92:	601a      	str	r2, [r3, #0]
 8011c94:	f3bf 8f4f 	dsb	sy
 8011c98:	f3bf 8f6f 	isb	sy
 8011c9c:	e008      	b.n	8011cb0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011c9e:	68f9      	ldr	r1, [r7, #12]
 8011ca0:	6878      	ldr	r0, [r7, #4]
 8011ca2:	f000 fecd 	bl	8012a40 <xQueueSemaphoreTake>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d001      	beq.n	8011cb0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011cac:	23ff      	movs	r3, #255	; 0xff
 8011cae:	e000      	b.n	8011cb2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011cb0:	2300      	movs	r3, #0
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3710      	adds	r7, #16
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	e000ed04 	.word	0xe000ed04

08011cc0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011cd0:	f7ff fe51 	bl	8011976 <inHandlerMode>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d016      	beq.n	8011d08 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011cda:	f107 0308 	add.w	r3, r7, #8
 8011cde:	4619      	mov	r1, r3
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f000 fd31 	bl	8012748 <xQueueGiveFromISR>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	2b01      	cmp	r3, #1
 8011cea:	d001      	beq.n	8011cf0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011cec:	23ff      	movs	r3, #255	; 0xff
 8011cee:	e017      	b.n	8011d20 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d013      	beq.n	8011d1e <osSemaphoreRelease+0x5e>
 8011cf6:	4b0c      	ldr	r3, [pc, #48]	; (8011d28 <osSemaphoreRelease+0x68>)
 8011cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cfc:	601a      	str	r2, [r3, #0]
 8011cfe:	f3bf 8f4f 	dsb	sy
 8011d02:	f3bf 8f6f 	isb	sy
 8011d06:	e00a      	b.n	8011d1e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011d08:	2300      	movs	r3, #0
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	2100      	movs	r1, #0
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f000 fb74 	bl	80123fc <xQueueGenericSend>
 8011d14:	4603      	mov	r3, r0
 8011d16:	2b01      	cmp	r3, #1
 8011d18:	d001      	beq.n	8011d1e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011d1a:	23ff      	movs	r3, #255	; 0xff
 8011d1c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	3710      	adds	r7, #16
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}
 8011d28:	e000ed04 	.word	0xe000ed04

08011d2c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b082      	sub	sp, #8
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011d34:	f7ff fe1f 	bl	8011976 <inHandlerMode>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d001      	beq.n	8011d42 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8011d3e:	2382      	movs	r3, #130	; 0x82
 8011d40:	e003      	b.n	8011d4a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f001 f856 	bl	8012df4 <vQueueDelete>

  return osOK; 
 8011d48:	2300      	movs	r3, #0
}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3708      	adds	r7, #8
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}

08011d52 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011d52:	b590      	push	{r4, r7, lr}
 8011d54:	b085      	sub	sp, #20
 8011d56:	af02      	add	r7, sp, #8
 8011d58:	6078      	str	r0, [r7, #4]
 8011d5a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	689b      	ldr	r3, [r3, #8]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d011      	beq.n	8011d88 <osMessageCreate+0x36>
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	68db      	ldr	r3, [r3, #12]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d00d      	beq.n	8011d88 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6818      	ldr	r0, [r3, #0]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6859      	ldr	r1, [r3, #4]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	689a      	ldr	r2, [r3, #8]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	2400      	movs	r4, #0
 8011d7e:	9400      	str	r4, [sp, #0]
 8011d80:	f000 fa0c 	bl	801219c <xQueueGenericCreateStatic>
 8011d84:	4603      	mov	r3, r0
 8011d86:	e008      	b.n	8011d9a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6818      	ldr	r0, [r3, #0]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	685b      	ldr	r3, [r3, #4]
 8011d90:	2200      	movs	r2, #0
 8011d92:	4619      	mov	r1, r3
 8011d94:	f000 fa84 	bl	80122a0 <xQueueGenericCreate>
 8011d98:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	370c      	adds	r7, #12
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd90      	pop	{r4, r7, pc}
	...

08011da4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b086      	sub	sp, #24
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	60f8      	str	r0, [r7, #12]
 8011dac:	60b9      	str	r1, [r7, #8]
 8011dae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011db0:	2300      	movs	r3, #0
 8011db2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d101      	bne.n	8011dc2 <osMessagePut+0x1e>
    ticks = 1;
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8011dc2:	f7ff fdd8 	bl	8011976 <inHandlerMode>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d018      	beq.n	8011dfe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011dcc:	f107 0210 	add.w	r2, r7, #16
 8011dd0:	f107 0108 	add.w	r1, r7, #8
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	68f8      	ldr	r0, [r7, #12]
 8011dd8:	f000 fc16 	bl	8012608 <xQueueGenericSendFromISR>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	2b01      	cmp	r3, #1
 8011de0:	d001      	beq.n	8011de6 <osMessagePut+0x42>
      return osErrorOS;
 8011de2:	23ff      	movs	r3, #255	; 0xff
 8011de4:	e018      	b.n	8011e18 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d014      	beq.n	8011e16 <osMessagePut+0x72>
 8011dec:	4b0c      	ldr	r3, [pc, #48]	; (8011e20 <osMessagePut+0x7c>)
 8011dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011df2:	601a      	str	r2, [r3, #0]
 8011df4:	f3bf 8f4f 	dsb	sy
 8011df8:	f3bf 8f6f 	isb	sy
 8011dfc:	e00b      	b.n	8011e16 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011dfe:	f107 0108 	add.w	r1, r7, #8
 8011e02:	2300      	movs	r3, #0
 8011e04:	697a      	ldr	r2, [r7, #20]
 8011e06:	68f8      	ldr	r0, [r7, #12]
 8011e08:	f000 faf8 	bl	80123fc <xQueueGenericSend>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	2b01      	cmp	r3, #1
 8011e10:	d001      	beq.n	8011e16 <osMessagePut+0x72>
      return osErrorOS;
 8011e12:	23ff      	movs	r3, #255	; 0xff
 8011e14:	e000      	b.n	8011e18 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011e16:	2300      	movs	r3, #0
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3718      	adds	r7, #24
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}
 8011e20:	e000ed04 	.word	0xe000ed04

08011e24 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011e24:	b590      	push	{r4, r7, lr}
 8011e26:	b08b      	sub	sp, #44	; 0x2c
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	60f8      	str	r0, [r7, #12]
 8011e2c:	60b9      	str	r1, [r7, #8]
 8011e2e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011e34:	2300      	movs	r3, #0
 8011e36:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d10a      	bne.n	8011e54 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011e3e:	2380      	movs	r3, #128	; 0x80
 8011e40:	617b      	str	r3, [r7, #20]
    return event;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	461c      	mov	r4, r3
 8011e46:	f107 0314 	add.w	r3, r7, #20
 8011e4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011e4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011e52:	e054      	b.n	8011efe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011e54:	2300      	movs	r3, #0
 8011e56:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e62:	d103      	bne.n	8011e6c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e68:	627b      	str	r3, [r7, #36]	; 0x24
 8011e6a:	e009      	b.n	8011e80 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d006      	beq.n	8011e80 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8011e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d101      	bne.n	8011e80 <osMessageGet+0x5c>
      ticks = 1;
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011e80:	f7ff fd79 	bl	8011976 <inHandlerMode>
 8011e84:	4603      	mov	r3, r0
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d01c      	beq.n	8011ec4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8011e8a:	f107 0220 	add.w	r2, r7, #32
 8011e8e:	f107 0314 	add.w	r3, r7, #20
 8011e92:	3304      	adds	r3, #4
 8011e94:	4619      	mov	r1, r3
 8011e96:	68b8      	ldr	r0, [r7, #8]
 8011e98:	f000 fee6 	bl	8012c68 <xQueueReceiveFromISR>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	d102      	bne.n	8011ea8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8011ea2:	2310      	movs	r3, #16
 8011ea4:	617b      	str	r3, [r7, #20]
 8011ea6:	e001      	b.n	8011eac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011eac:	6a3b      	ldr	r3, [r7, #32]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d01d      	beq.n	8011eee <osMessageGet+0xca>
 8011eb2:	4b15      	ldr	r3, [pc, #84]	; (8011f08 <osMessageGet+0xe4>)
 8011eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eb8:	601a      	str	r2, [r3, #0]
 8011eba:	f3bf 8f4f 	dsb	sy
 8011ebe:	f3bf 8f6f 	isb	sy
 8011ec2:	e014      	b.n	8011eee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011ec4:	f107 0314 	add.w	r3, r7, #20
 8011ec8:	3304      	adds	r3, #4
 8011eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ecc:	4619      	mov	r1, r3
 8011ece:	68b8      	ldr	r0, [r7, #8]
 8011ed0:	f000 fcd0 	bl	8012874 <xQueueReceive>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	2b01      	cmp	r3, #1
 8011ed8:	d102      	bne.n	8011ee0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011eda:	2310      	movs	r3, #16
 8011edc:	617b      	str	r3, [r7, #20]
 8011ede:	e006      	b.n	8011eee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d101      	bne.n	8011eea <osMessageGet+0xc6>
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	e000      	b.n	8011eec <osMessageGet+0xc8>
 8011eea:	2340      	movs	r3, #64	; 0x40
 8011eec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	461c      	mov	r4, r3
 8011ef2:	f107 0314 	add.w	r3, r7, #20
 8011ef6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011efa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011efe:	68f8      	ldr	r0, [r7, #12]
 8011f00:	372c      	adds	r7, #44	; 0x2c
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd90      	pop	{r4, r7, pc}
 8011f06:	bf00      	nop
 8011f08:	e000ed04 	.word	0xe000ed04

08011f0c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b082      	sub	sp, #8
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011f14:	f7ff fd2f 	bl	8011976 <inHandlerMode>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d004      	beq.n	8011f28 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f000 ff48 	bl	8012db4 <uxQueueMessagesWaitingFromISR>
 8011f24:	4603      	mov	r3, r0
 8011f26:	e003      	b.n	8011f30 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f000 ff23 	bl	8012d74 <uxQueueMessagesWaiting>
 8011f2e:	4603      	mov	r3, r0
  }
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3708      	adds	r7, #8
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}

08011f38 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011f40:	f7ff fd19 	bl	8011976 <inHandlerMode>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d001      	beq.n	8011f4e <osMessageDelete+0x16>
    return osErrorISR;
 8011f4a:	2382      	movs	r3, #130	; 0x82
 8011f4c:	e003      	b.n	8011f56 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f000 ff50 	bl	8012df4 <vQueueDelete>

  return osOK; 
 8011f54:	2300      	movs	r3, #0
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3708      	adds	r7, #8
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}

08011f5e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011f5e:	b480      	push	{r7}
 8011f60:	b083      	sub	sp, #12
 8011f62:	af00      	add	r7, sp, #0
 8011f64:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f103 0208 	add.w	r2, r3, #8
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f76:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f103 0208 	add.w	r2, r3, #8
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f103 0208 	add.w	r2, r3, #8
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2200      	movs	r2, #0
 8011f90:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011f92:	bf00      	nop
 8011f94:	370c      	adds	r7, #12
 8011f96:	46bd      	mov	sp, r7
 8011f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9c:	4770      	bx	lr

08011f9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011f9e:	b480      	push	{r7}
 8011fa0:	b083      	sub	sp, #12
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011fac:	bf00      	nop
 8011fae:	370c      	adds	r7, #12
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb6:	4770      	bx	lr

08011fb8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011fb8:	b480      	push	{r7}
 8011fba:	b085      	sub	sp, #20
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
 8011fc0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	68fa      	ldr	r2, [r7, #12]
 8011fcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	689a      	ldr	r2, [r3, #8]
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	689b      	ldr	r3, [r3, #8]
 8011fda:	683a      	ldr	r2, [r7, #0]
 8011fdc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	683a      	ldr	r2, [r7, #0]
 8011fe2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	1c5a      	adds	r2, r3, #1
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	601a      	str	r2, [r3, #0]
}
 8011ff4:	bf00      	nop
 8011ff6:	3714      	adds	r7, #20
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffe:	4770      	bx	lr

08012000 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012000:	b480      	push	{r7}
 8012002:	b085      	sub	sp, #20
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012016:	d103      	bne.n	8012020 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	691b      	ldr	r3, [r3, #16]
 801201c:	60fb      	str	r3, [r7, #12]
 801201e:	e00c      	b.n	801203a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	3308      	adds	r3, #8
 8012024:	60fb      	str	r3, [r7, #12]
 8012026:	e002      	b.n	801202e <vListInsert+0x2e>
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	685b      	ldr	r3, [r3, #4]
 801202c:	60fb      	str	r3, [r7, #12]
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	685b      	ldr	r3, [r3, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	68ba      	ldr	r2, [r7, #8]
 8012036:	429a      	cmp	r2, r3
 8012038:	d2f6      	bcs.n	8012028 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	685a      	ldr	r2, [r3, #4]
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	685b      	ldr	r3, [r3, #4]
 8012046:	683a      	ldr	r2, [r7, #0]
 8012048:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	68fa      	ldr	r2, [r7, #12]
 801204e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	683a      	ldr	r2, [r7, #0]
 8012054:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	687a      	ldr	r2, [r7, #4]
 801205a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	1c5a      	adds	r2, r3, #1
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	601a      	str	r2, [r3, #0]
}
 8012066:	bf00      	nop
 8012068:	3714      	adds	r7, #20
 801206a:	46bd      	mov	sp, r7
 801206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012070:	4770      	bx	lr

08012072 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012072:	b480      	push	{r7}
 8012074:	b085      	sub	sp, #20
 8012076:	af00      	add	r7, sp, #0
 8012078:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	691b      	ldr	r3, [r3, #16]
 801207e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	685b      	ldr	r3, [r3, #4]
 8012084:	687a      	ldr	r2, [r7, #4]
 8012086:	6892      	ldr	r2, [r2, #8]
 8012088:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	689b      	ldr	r3, [r3, #8]
 801208e:	687a      	ldr	r2, [r7, #4]
 8012090:	6852      	ldr	r2, [r2, #4]
 8012092:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	687a      	ldr	r2, [r7, #4]
 801209a:	429a      	cmp	r2, r3
 801209c:	d103      	bne.n	80120a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	689a      	ldr	r2, [r3, #8]
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2200      	movs	r2, #0
 80120aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	1e5a      	subs	r2, r3, #1
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	681b      	ldr	r3, [r3, #0]
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3714      	adds	r7, #20
 80120be:	46bd      	mov	sp, r7
 80120c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c4:	4770      	bx	lr
	...

080120c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b084      	sub	sp, #16
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d10c      	bne.n	80120f6 <xQueueGenericReset+0x2e>
	__asm volatile
 80120dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e0:	b672      	cpsid	i
 80120e2:	f383 8811 	msr	BASEPRI, r3
 80120e6:	f3bf 8f6f 	isb	sy
 80120ea:	f3bf 8f4f 	dsb	sy
 80120ee:	b662      	cpsie	i
 80120f0:	60bb      	str	r3, [r7, #8]
}
 80120f2:	bf00      	nop
 80120f4:	e7fe      	b.n	80120f4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80120f6:	f002 fa89 	bl	801460c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	681a      	ldr	r2, [r3, #0]
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012102:	68f9      	ldr	r1, [r7, #12]
 8012104:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012106:	fb01 f303 	mul.w	r3, r1, r3
 801210a:	441a      	add	r2, r3
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2200      	movs	r2, #0
 8012114:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	681a      	ldr	r2, [r3, #0]
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	681a      	ldr	r2, [r3, #0]
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012126:	3b01      	subs	r3, #1
 8012128:	68f9      	ldr	r1, [r7, #12]
 801212a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801212c:	fb01 f303 	mul.w	r3, r1, r3
 8012130:	441a      	add	r2, r3
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	22ff      	movs	r2, #255	; 0xff
 801213a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	22ff      	movs	r2, #255	; 0xff
 8012142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d114      	bne.n	8012176 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	691b      	ldr	r3, [r3, #16]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d01a      	beq.n	801218a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	3310      	adds	r3, #16
 8012158:	4618      	mov	r0, r3
 801215a:	f001 fd41 	bl	8013be0 <xTaskRemoveFromEventList>
 801215e:	4603      	mov	r3, r0
 8012160:	2b00      	cmp	r3, #0
 8012162:	d012      	beq.n	801218a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012164:	4b0c      	ldr	r3, [pc, #48]	; (8012198 <xQueueGenericReset+0xd0>)
 8012166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801216a:	601a      	str	r2, [r3, #0]
 801216c:	f3bf 8f4f 	dsb	sy
 8012170:	f3bf 8f6f 	isb	sy
 8012174:	e009      	b.n	801218a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	3310      	adds	r3, #16
 801217a:	4618      	mov	r0, r3
 801217c:	f7ff feef 	bl	8011f5e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	3324      	adds	r3, #36	; 0x24
 8012184:	4618      	mov	r0, r3
 8012186:	f7ff feea 	bl	8011f5e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801218a:	f002 fa73 	bl	8014674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801218e:	2301      	movs	r3, #1
}
 8012190:	4618      	mov	r0, r3
 8012192:	3710      	adds	r7, #16
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}
 8012198:	e000ed04 	.word	0xe000ed04

0801219c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801219c:	b580      	push	{r7, lr}
 801219e:	b08e      	sub	sp, #56	; 0x38
 80121a0:	af02      	add	r7, sp, #8
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
 80121a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d10c      	bne.n	80121ca <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80121b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b4:	b672      	cpsid	i
 80121b6:	f383 8811 	msr	BASEPRI, r3
 80121ba:	f3bf 8f6f 	isb	sy
 80121be:	f3bf 8f4f 	dsb	sy
 80121c2:	b662      	cpsie	i
 80121c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80121c6:	bf00      	nop
 80121c8:	e7fe      	b.n	80121c8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d10c      	bne.n	80121ea <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80121d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d4:	b672      	cpsid	i
 80121d6:	f383 8811 	msr	BASEPRI, r3
 80121da:	f3bf 8f6f 	isb	sy
 80121de:	f3bf 8f4f 	dsb	sy
 80121e2:	b662      	cpsie	i
 80121e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80121e6:	bf00      	nop
 80121e8:	e7fe      	b.n	80121e8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d002      	beq.n	80121f6 <xQueueGenericCreateStatic+0x5a>
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d001      	beq.n	80121fa <xQueueGenericCreateStatic+0x5e>
 80121f6:	2301      	movs	r3, #1
 80121f8:	e000      	b.n	80121fc <xQueueGenericCreateStatic+0x60>
 80121fa:	2300      	movs	r3, #0
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d10c      	bne.n	801221a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8012200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012204:	b672      	cpsid	i
 8012206:	f383 8811 	msr	BASEPRI, r3
 801220a:	f3bf 8f6f 	isb	sy
 801220e:	f3bf 8f4f 	dsb	sy
 8012212:	b662      	cpsie	i
 8012214:	623b      	str	r3, [r7, #32]
}
 8012216:	bf00      	nop
 8012218:	e7fe      	b.n	8012218 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d102      	bne.n	8012226 <xQueueGenericCreateStatic+0x8a>
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d101      	bne.n	801222a <xQueueGenericCreateStatic+0x8e>
 8012226:	2301      	movs	r3, #1
 8012228:	e000      	b.n	801222c <xQueueGenericCreateStatic+0x90>
 801222a:	2300      	movs	r3, #0
 801222c:	2b00      	cmp	r3, #0
 801222e:	d10c      	bne.n	801224a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8012230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012234:	b672      	cpsid	i
 8012236:	f383 8811 	msr	BASEPRI, r3
 801223a:	f3bf 8f6f 	isb	sy
 801223e:	f3bf 8f4f 	dsb	sy
 8012242:	b662      	cpsie	i
 8012244:	61fb      	str	r3, [r7, #28]
}
 8012246:	bf00      	nop
 8012248:	e7fe      	b.n	8012248 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801224a:	2348      	movs	r3, #72	; 0x48
 801224c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	2b48      	cmp	r3, #72	; 0x48
 8012252:	d00c      	beq.n	801226e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8012254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012258:	b672      	cpsid	i
 801225a:	f383 8811 	msr	BASEPRI, r3
 801225e:	f3bf 8f6f 	isb	sy
 8012262:	f3bf 8f4f 	dsb	sy
 8012266:	b662      	cpsie	i
 8012268:	61bb      	str	r3, [r7, #24]
}
 801226a:	bf00      	nop
 801226c:	e7fe      	b.n	801226c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801226e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00d      	beq.n	8012296 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227c:	2201      	movs	r2, #1
 801227e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012282:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	4613      	mov	r3, r2
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	68b9      	ldr	r1, [r7, #8]
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	f000 f847 	bl	8012324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012298:	4618      	mov	r0, r3
 801229a:	3730      	adds	r7, #48	; 0x30
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b08a      	sub	sp, #40	; 0x28
 80122a4:	af02      	add	r7, sp, #8
 80122a6:	60f8      	str	r0, [r7, #12]
 80122a8:	60b9      	str	r1, [r7, #8]
 80122aa:	4613      	mov	r3, r2
 80122ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d10c      	bne.n	80122ce <xQueueGenericCreate+0x2e>
	__asm volatile
 80122b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122b8:	b672      	cpsid	i
 80122ba:	f383 8811 	msr	BASEPRI, r3
 80122be:	f3bf 8f6f 	isb	sy
 80122c2:	f3bf 8f4f 	dsb	sy
 80122c6:	b662      	cpsie	i
 80122c8:	613b      	str	r3, [r7, #16]
}
 80122ca:	bf00      	nop
 80122cc:	e7fe      	b.n	80122cc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d102      	bne.n	80122da <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80122d4:	2300      	movs	r3, #0
 80122d6:	61fb      	str	r3, [r7, #28]
 80122d8:	e004      	b.n	80122e4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	68ba      	ldr	r2, [r7, #8]
 80122de:	fb02 f303 	mul.w	r3, r2, r3
 80122e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80122e4:	69fb      	ldr	r3, [r7, #28]
 80122e6:	3348      	adds	r3, #72	; 0x48
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7ef f87c 	bl	80013e6 <pvPortMalloc>
 80122ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80122f0:	69bb      	ldr	r3, [r7, #24]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d011      	beq.n	801231a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80122f6:	69bb      	ldr	r3, [r7, #24]
 80122f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	3348      	adds	r3, #72	; 0x48
 80122fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012300:	69bb      	ldr	r3, [r7, #24]
 8012302:	2200      	movs	r2, #0
 8012304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012308:	79fa      	ldrb	r2, [r7, #7]
 801230a:	69bb      	ldr	r3, [r7, #24]
 801230c:	9300      	str	r3, [sp, #0]
 801230e:	4613      	mov	r3, r2
 8012310:	697a      	ldr	r2, [r7, #20]
 8012312:	68b9      	ldr	r1, [r7, #8]
 8012314:	68f8      	ldr	r0, [r7, #12]
 8012316:	f000 f805 	bl	8012324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801231a:	69bb      	ldr	r3, [r7, #24]
	}
 801231c:	4618      	mov	r0, r3
 801231e:	3720      	adds	r7, #32
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b084      	sub	sp, #16
 8012328:	af00      	add	r7, sp, #0
 801232a:	60f8      	str	r0, [r7, #12]
 801232c:	60b9      	str	r1, [r7, #8]
 801232e:	607a      	str	r2, [r7, #4]
 8012330:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d103      	bne.n	8012340 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012338:	69bb      	ldr	r3, [r7, #24]
 801233a:	69ba      	ldr	r2, [r7, #24]
 801233c:	601a      	str	r2, [r3, #0]
 801233e:	e002      	b.n	8012346 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012340:	69bb      	ldr	r3, [r7, #24]
 8012342:	687a      	ldr	r2, [r7, #4]
 8012344:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012346:	69bb      	ldr	r3, [r7, #24]
 8012348:	68fa      	ldr	r2, [r7, #12]
 801234a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801234c:	69bb      	ldr	r3, [r7, #24]
 801234e:	68ba      	ldr	r2, [r7, #8]
 8012350:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012352:	2101      	movs	r1, #1
 8012354:	69b8      	ldr	r0, [r7, #24]
 8012356:	f7ff feb7 	bl	80120c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801235a:	bf00      	nop
 801235c:	3710      	adds	r7, #16
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}

08012362 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012362:	b580      	push	{r7, lr}
 8012364:	b082      	sub	sp, #8
 8012366:	af00      	add	r7, sp, #0
 8012368:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d00e      	beq.n	801238e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2200      	movs	r2, #0
 8012374:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2200      	movs	r2, #0
 801237a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2200      	movs	r2, #0
 8012380:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012382:	2300      	movs	r3, #0
 8012384:	2200      	movs	r2, #0
 8012386:	2100      	movs	r1, #0
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f000 f837 	bl	80123fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801238e:	bf00      	nop
 8012390:	3708      	adds	r7, #8
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}

08012396 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012396:	b580      	push	{r7, lr}
 8012398:	b086      	sub	sp, #24
 801239a:	af00      	add	r7, sp, #0
 801239c:	4603      	mov	r3, r0
 801239e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80123a0:	2301      	movs	r3, #1
 80123a2:	617b      	str	r3, [r7, #20]
 80123a4:	2300      	movs	r3, #0
 80123a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80123a8:	79fb      	ldrb	r3, [r7, #7]
 80123aa:	461a      	mov	r2, r3
 80123ac:	6939      	ldr	r1, [r7, #16]
 80123ae:	6978      	ldr	r0, [r7, #20]
 80123b0:	f7ff ff76 	bl	80122a0 <xQueueGenericCreate>
 80123b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80123b6:	68f8      	ldr	r0, [r7, #12]
 80123b8:	f7ff ffd3 	bl	8012362 <prvInitialiseMutex>

		return xNewQueue;
 80123bc:	68fb      	ldr	r3, [r7, #12]
	}
 80123be:	4618      	mov	r0, r3
 80123c0:	3718      	adds	r7, #24
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}

080123c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80123c6:	b580      	push	{r7, lr}
 80123c8:	b088      	sub	sp, #32
 80123ca:	af02      	add	r7, sp, #8
 80123cc:	4603      	mov	r3, r0
 80123ce:	6039      	str	r1, [r7, #0]
 80123d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80123d2:	2301      	movs	r3, #1
 80123d4:	617b      	str	r3, [r7, #20]
 80123d6:	2300      	movs	r3, #0
 80123d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80123da:	79fb      	ldrb	r3, [r7, #7]
 80123dc:	9300      	str	r3, [sp, #0]
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	2200      	movs	r2, #0
 80123e2:	6939      	ldr	r1, [r7, #16]
 80123e4:	6978      	ldr	r0, [r7, #20]
 80123e6:	f7ff fed9 	bl	801219c <xQueueGenericCreateStatic>
 80123ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80123ec:	68f8      	ldr	r0, [r7, #12]
 80123ee:	f7ff ffb8 	bl	8012362 <prvInitialiseMutex>

		return xNewQueue;
 80123f2:	68fb      	ldr	r3, [r7, #12]
	}
 80123f4:	4618      	mov	r0, r3
 80123f6:	3718      	adds	r7, #24
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bd80      	pop	{r7, pc}

080123fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b08e      	sub	sp, #56	; 0x38
 8012400:	af00      	add	r7, sp, #0
 8012402:	60f8      	str	r0, [r7, #12]
 8012404:	60b9      	str	r1, [r7, #8]
 8012406:	607a      	str	r2, [r7, #4]
 8012408:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801240a:	2300      	movs	r3, #0
 801240c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012414:	2b00      	cmp	r3, #0
 8012416:	d10c      	bne.n	8012432 <xQueueGenericSend+0x36>
	__asm volatile
 8012418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801241c:	b672      	cpsid	i
 801241e:	f383 8811 	msr	BASEPRI, r3
 8012422:	f3bf 8f6f 	isb	sy
 8012426:	f3bf 8f4f 	dsb	sy
 801242a:	b662      	cpsie	i
 801242c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801242e:	bf00      	nop
 8012430:	e7fe      	b.n	8012430 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d103      	bne.n	8012440 <xQueueGenericSend+0x44>
 8012438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801243c:	2b00      	cmp	r3, #0
 801243e:	d101      	bne.n	8012444 <xQueueGenericSend+0x48>
 8012440:	2301      	movs	r3, #1
 8012442:	e000      	b.n	8012446 <xQueueGenericSend+0x4a>
 8012444:	2300      	movs	r3, #0
 8012446:	2b00      	cmp	r3, #0
 8012448:	d10c      	bne.n	8012464 <xQueueGenericSend+0x68>
	__asm volatile
 801244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801244e:	b672      	cpsid	i
 8012450:	f383 8811 	msr	BASEPRI, r3
 8012454:	f3bf 8f6f 	isb	sy
 8012458:	f3bf 8f4f 	dsb	sy
 801245c:	b662      	cpsie	i
 801245e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012460:	bf00      	nop
 8012462:	e7fe      	b.n	8012462 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	2b02      	cmp	r3, #2
 8012468:	d103      	bne.n	8012472 <xQueueGenericSend+0x76>
 801246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801246c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801246e:	2b01      	cmp	r3, #1
 8012470:	d101      	bne.n	8012476 <xQueueGenericSend+0x7a>
 8012472:	2301      	movs	r3, #1
 8012474:	e000      	b.n	8012478 <xQueueGenericSend+0x7c>
 8012476:	2300      	movs	r3, #0
 8012478:	2b00      	cmp	r3, #0
 801247a:	d10c      	bne.n	8012496 <xQueueGenericSend+0x9a>
	__asm volatile
 801247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012480:	b672      	cpsid	i
 8012482:	f383 8811 	msr	BASEPRI, r3
 8012486:	f3bf 8f6f 	isb	sy
 801248a:	f3bf 8f4f 	dsb	sy
 801248e:	b662      	cpsie	i
 8012490:	623b      	str	r3, [r7, #32]
}
 8012492:	bf00      	nop
 8012494:	e7fe      	b.n	8012494 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012496:	f001 fd6b 	bl	8013f70 <xTaskGetSchedulerState>
 801249a:	4603      	mov	r3, r0
 801249c:	2b00      	cmp	r3, #0
 801249e:	d102      	bne.n	80124a6 <xQueueGenericSend+0xaa>
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d101      	bne.n	80124aa <xQueueGenericSend+0xae>
 80124a6:	2301      	movs	r3, #1
 80124a8:	e000      	b.n	80124ac <xQueueGenericSend+0xb0>
 80124aa:	2300      	movs	r3, #0
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d10c      	bne.n	80124ca <xQueueGenericSend+0xce>
	__asm volatile
 80124b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b4:	b672      	cpsid	i
 80124b6:	f383 8811 	msr	BASEPRI, r3
 80124ba:	f3bf 8f6f 	isb	sy
 80124be:	f3bf 8f4f 	dsb	sy
 80124c2:	b662      	cpsie	i
 80124c4:	61fb      	str	r3, [r7, #28]
}
 80124c6:	bf00      	nop
 80124c8:	e7fe      	b.n	80124c8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80124ca:	f002 f89f 	bl	801460c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80124ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d302      	bcc.n	80124e0 <xQueueGenericSend+0xe4>
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	2b02      	cmp	r3, #2
 80124de:	d129      	bne.n	8012534 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80124e0:	683a      	ldr	r2, [r7, #0]
 80124e2:	68b9      	ldr	r1, [r7, #8]
 80124e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124e6:	f000 fcc2 	bl	8012e6e <prvCopyDataToQueue>
 80124ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d010      	beq.n	8012516 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124f6:	3324      	adds	r3, #36	; 0x24
 80124f8:	4618      	mov	r0, r3
 80124fa:	f001 fb71 	bl	8013be0 <xTaskRemoveFromEventList>
 80124fe:	4603      	mov	r3, r0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d013      	beq.n	801252c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012504:	4b3f      	ldr	r3, [pc, #252]	; (8012604 <xQueueGenericSend+0x208>)
 8012506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801250a:	601a      	str	r2, [r3, #0]
 801250c:	f3bf 8f4f 	dsb	sy
 8012510:	f3bf 8f6f 	isb	sy
 8012514:	e00a      	b.n	801252c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012518:	2b00      	cmp	r3, #0
 801251a:	d007      	beq.n	801252c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801251c:	4b39      	ldr	r3, [pc, #228]	; (8012604 <xQueueGenericSend+0x208>)
 801251e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012522:	601a      	str	r2, [r3, #0]
 8012524:	f3bf 8f4f 	dsb	sy
 8012528:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801252c:	f002 f8a2 	bl	8014674 <vPortExitCritical>
				return pdPASS;
 8012530:	2301      	movs	r3, #1
 8012532:	e063      	b.n	80125fc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d103      	bne.n	8012542 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801253a:	f002 f89b 	bl	8014674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801253e:	2300      	movs	r3, #0
 8012540:	e05c      	b.n	80125fc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012544:	2b00      	cmp	r3, #0
 8012546:	d106      	bne.n	8012556 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012548:	f107 0314 	add.w	r3, r7, #20
 801254c:	4618      	mov	r0, r3
 801254e:	f001 fbab 	bl	8013ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012552:	2301      	movs	r3, #1
 8012554:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012556:	f002 f88d 	bl	8014674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801255a:	f001 f92f 	bl	80137bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801255e:	f002 f855 	bl	801460c <vPortEnterCritical>
 8012562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012568:	b25b      	sxtb	r3, r3
 801256a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801256e:	d103      	bne.n	8012578 <xQueueGenericSend+0x17c>
 8012570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012572:	2200      	movs	r2, #0
 8012574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801257a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801257e:	b25b      	sxtb	r3, r3
 8012580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012584:	d103      	bne.n	801258e <xQueueGenericSend+0x192>
 8012586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012588:	2200      	movs	r2, #0
 801258a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801258e:	f002 f871 	bl	8014674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012592:	1d3a      	adds	r2, r7, #4
 8012594:	f107 0314 	add.w	r3, r7, #20
 8012598:	4611      	mov	r1, r2
 801259a:	4618      	mov	r0, r3
 801259c:	f001 fb9a 	bl	8013cd4 <xTaskCheckForTimeOut>
 80125a0:	4603      	mov	r3, r0
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d124      	bne.n	80125f0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80125a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125a8:	f000 fd59 	bl	801305e <prvIsQueueFull>
 80125ac:	4603      	mov	r3, r0
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d018      	beq.n	80125e4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80125b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b4:	3310      	adds	r3, #16
 80125b6:	687a      	ldr	r2, [r7, #4]
 80125b8:	4611      	mov	r1, r2
 80125ba:	4618      	mov	r0, r3
 80125bc:	f001 faea 	bl	8013b94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80125c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125c2:	f000 fce4 	bl	8012f8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80125c6:	f001 f907 	bl	80137d8 <xTaskResumeAll>
 80125ca:	4603      	mov	r3, r0
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	f47f af7c 	bne.w	80124ca <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80125d2:	4b0c      	ldr	r3, [pc, #48]	; (8012604 <xQueueGenericSend+0x208>)
 80125d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125d8:	601a      	str	r2, [r3, #0]
 80125da:	f3bf 8f4f 	dsb	sy
 80125de:	f3bf 8f6f 	isb	sy
 80125e2:	e772      	b.n	80124ca <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80125e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125e6:	f000 fcd2 	bl	8012f8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80125ea:	f001 f8f5 	bl	80137d8 <xTaskResumeAll>
 80125ee:	e76c      	b.n	80124ca <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80125f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125f2:	f000 fccc 	bl	8012f8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80125f6:	f001 f8ef 	bl	80137d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80125fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3738      	adds	r7, #56	; 0x38
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}
 8012604:	e000ed04 	.word	0xe000ed04

08012608 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b08e      	sub	sp, #56	; 0x38
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	607a      	str	r2, [r7, #4]
 8012614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261c:	2b00      	cmp	r3, #0
 801261e:	d10c      	bne.n	801263a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8012620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012624:	b672      	cpsid	i
 8012626:	f383 8811 	msr	BASEPRI, r3
 801262a:	f3bf 8f6f 	isb	sy
 801262e:	f3bf 8f4f 	dsb	sy
 8012632:	b662      	cpsie	i
 8012634:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012636:	bf00      	nop
 8012638:	e7fe      	b.n	8012638 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801263a:	68bb      	ldr	r3, [r7, #8]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d103      	bne.n	8012648 <xQueueGenericSendFromISR+0x40>
 8012640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012644:	2b00      	cmp	r3, #0
 8012646:	d101      	bne.n	801264c <xQueueGenericSendFromISR+0x44>
 8012648:	2301      	movs	r3, #1
 801264a:	e000      	b.n	801264e <xQueueGenericSendFromISR+0x46>
 801264c:	2300      	movs	r3, #0
 801264e:	2b00      	cmp	r3, #0
 8012650:	d10c      	bne.n	801266c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8012652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012656:	b672      	cpsid	i
 8012658:	f383 8811 	msr	BASEPRI, r3
 801265c:	f3bf 8f6f 	isb	sy
 8012660:	f3bf 8f4f 	dsb	sy
 8012664:	b662      	cpsie	i
 8012666:	623b      	str	r3, [r7, #32]
}
 8012668:	bf00      	nop
 801266a:	e7fe      	b.n	801266a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	2b02      	cmp	r3, #2
 8012670:	d103      	bne.n	801267a <xQueueGenericSendFromISR+0x72>
 8012672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012676:	2b01      	cmp	r3, #1
 8012678:	d101      	bne.n	801267e <xQueueGenericSendFromISR+0x76>
 801267a:	2301      	movs	r3, #1
 801267c:	e000      	b.n	8012680 <xQueueGenericSendFromISR+0x78>
 801267e:	2300      	movs	r3, #0
 8012680:	2b00      	cmp	r3, #0
 8012682:	d10c      	bne.n	801269e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8012684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012688:	b672      	cpsid	i
 801268a:	f383 8811 	msr	BASEPRI, r3
 801268e:	f3bf 8f6f 	isb	sy
 8012692:	f3bf 8f4f 	dsb	sy
 8012696:	b662      	cpsie	i
 8012698:	61fb      	str	r3, [r7, #28]
}
 801269a:	bf00      	nop
 801269c:	e7fe      	b.n	801269c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801269e:	f002 f89d 	bl	80147dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80126a2:	f3ef 8211 	mrs	r2, BASEPRI
 80126a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126aa:	b672      	cpsid	i
 80126ac:	f383 8811 	msr	BASEPRI, r3
 80126b0:	f3bf 8f6f 	isb	sy
 80126b4:	f3bf 8f4f 	dsb	sy
 80126b8:	b662      	cpsie	i
 80126ba:	61ba      	str	r2, [r7, #24]
 80126bc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80126be:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80126c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80126c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80126c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d302      	bcc.n	80126d4 <xQueueGenericSendFromISR+0xcc>
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	2b02      	cmp	r3, #2
 80126d2:	d12c      	bne.n	801272e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80126d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80126da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80126de:	683a      	ldr	r2, [r7, #0]
 80126e0:	68b9      	ldr	r1, [r7, #8]
 80126e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126e4:	f000 fbc3 	bl	8012e6e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80126e8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80126ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126f0:	d112      	bne.n	8012718 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80126f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d016      	beq.n	8012728 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80126fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126fc:	3324      	adds	r3, #36	; 0x24
 80126fe:	4618      	mov	r0, r3
 8012700:	f001 fa6e 	bl	8013be0 <xTaskRemoveFromEventList>
 8012704:	4603      	mov	r3, r0
 8012706:	2b00      	cmp	r3, #0
 8012708:	d00e      	beq.n	8012728 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00b      	beq.n	8012728 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2201      	movs	r2, #1
 8012714:	601a      	str	r2, [r3, #0]
 8012716:	e007      	b.n	8012728 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012718:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801271c:	3301      	adds	r3, #1
 801271e:	b2db      	uxtb	r3, r3
 8012720:	b25a      	sxtb	r2, r3
 8012722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012728:	2301      	movs	r3, #1
 801272a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801272c:	e001      	b.n	8012732 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801272e:	2300      	movs	r3, #0
 8012730:	637b      	str	r3, [r7, #52]	; 0x34
 8012732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012734:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012736:	693b      	ldr	r3, [r7, #16]
 8012738:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801273c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801273e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012740:	4618      	mov	r0, r3
 8012742:	3738      	adds	r7, #56	; 0x38
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}

08012748 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b08e      	sub	sp, #56	; 0x38
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012758:	2b00      	cmp	r3, #0
 801275a:	d10c      	bne.n	8012776 <xQueueGiveFromISR+0x2e>
	__asm volatile
 801275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012760:	b672      	cpsid	i
 8012762:	f383 8811 	msr	BASEPRI, r3
 8012766:	f3bf 8f6f 	isb	sy
 801276a:	f3bf 8f4f 	dsb	sy
 801276e:	b662      	cpsie	i
 8012770:	623b      	str	r3, [r7, #32]
}
 8012772:	bf00      	nop
 8012774:	e7fe      	b.n	8012774 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801277a:	2b00      	cmp	r3, #0
 801277c:	d00c      	beq.n	8012798 <xQueueGiveFromISR+0x50>
	__asm volatile
 801277e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012782:	b672      	cpsid	i
 8012784:	f383 8811 	msr	BASEPRI, r3
 8012788:	f3bf 8f6f 	isb	sy
 801278c:	f3bf 8f4f 	dsb	sy
 8012790:	b662      	cpsie	i
 8012792:	61fb      	str	r3, [r7, #28]
}
 8012794:	bf00      	nop
 8012796:	e7fe      	b.n	8012796 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d103      	bne.n	80127a8 <xQueueGiveFromISR+0x60>
 80127a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a2:	689b      	ldr	r3, [r3, #8]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d101      	bne.n	80127ac <xQueueGiveFromISR+0x64>
 80127a8:	2301      	movs	r3, #1
 80127aa:	e000      	b.n	80127ae <xQueueGiveFromISR+0x66>
 80127ac:	2300      	movs	r3, #0
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d10c      	bne.n	80127cc <xQueueGiveFromISR+0x84>
	__asm volatile
 80127b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b6:	b672      	cpsid	i
 80127b8:	f383 8811 	msr	BASEPRI, r3
 80127bc:	f3bf 8f6f 	isb	sy
 80127c0:	f3bf 8f4f 	dsb	sy
 80127c4:	b662      	cpsie	i
 80127c6:	61bb      	str	r3, [r7, #24]
}
 80127c8:	bf00      	nop
 80127ca:	e7fe      	b.n	80127ca <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80127cc:	f002 f806 	bl	80147dc <vPortValidateInterruptPriority>
	__asm volatile
 80127d0:	f3ef 8211 	mrs	r2, BASEPRI
 80127d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127d8:	b672      	cpsid	i
 80127da:	f383 8811 	msr	BASEPRI, r3
 80127de:	f3bf 8f6f 	isb	sy
 80127e2:	f3bf 8f4f 	dsb	sy
 80127e6:	b662      	cpsie	i
 80127e8:	617a      	str	r2, [r7, #20]
 80127ea:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80127ec:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80127ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80127f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127f4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80127f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127fc:	429a      	cmp	r2, r3
 80127fe:	d22b      	bcs.n	8012858 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280c:	1c5a      	adds	r2, r3, #1
 801280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012810:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012812:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801281a:	d112      	bne.n	8012842 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012820:	2b00      	cmp	r3, #0
 8012822:	d016      	beq.n	8012852 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012826:	3324      	adds	r3, #36	; 0x24
 8012828:	4618      	mov	r0, r3
 801282a:	f001 f9d9 	bl	8013be0 <xTaskRemoveFromEventList>
 801282e:	4603      	mov	r3, r0
 8012830:	2b00      	cmp	r3, #0
 8012832:	d00e      	beq.n	8012852 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d00b      	beq.n	8012852 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	2201      	movs	r2, #1
 801283e:	601a      	str	r2, [r3, #0]
 8012840:	e007      	b.n	8012852 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012846:	3301      	adds	r3, #1
 8012848:	b2db      	uxtb	r3, r3
 801284a:	b25a      	sxtb	r2, r3
 801284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801284e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012852:	2301      	movs	r3, #1
 8012854:	637b      	str	r3, [r7, #52]	; 0x34
 8012856:	e001      	b.n	801285c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012858:	2300      	movs	r3, #0
 801285a:	637b      	str	r3, [r7, #52]	; 0x34
 801285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801285e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	f383 8811 	msr	BASEPRI, r3
}
 8012866:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801286a:	4618      	mov	r0, r3
 801286c:	3738      	adds	r7, #56	; 0x38
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
	...

08012874 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b08c      	sub	sp, #48	; 0x30
 8012878:	af00      	add	r7, sp, #0
 801287a:	60f8      	str	r0, [r7, #12]
 801287c:	60b9      	str	r1, [r7, #8]
 801287e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012880:	2300      	movs	r3, #0
 8012882:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801288a:	2b00      	cmp	r3, #0
 801288c:	d10c      	bne.n	80128a8 <xQueueReceive+0x34>
	__asm volatile
 801288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012892:	b672      	cpsid	i
 8012894:	f383 8811 	msr	BASEPRI, r3
 8012898:	f3bf 8f6f 	isb	sy
 801289c:	f3bf 8f4f 	dsb	sy
 80128a0:	b662      	cpsie	i
 80128a2:	623b      	str	r3, [r7, #32]
}
 80128a4:	bf00      	nop
 80128a6:	e7fe      	b.n	80128a6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d103      	bne.n	80128b6 <xQueueReceive+0x42>
 80128ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d101      	bne.n	80128ba <xQueueReceive+0x46>
 80128b6:	2301      	movs	r3, #1
 80128b8:	e000      	b.n	80128bc <xQueueReceive+0x48>
 80128ba:	2300      	movs	r3, #0
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d10c      	bne.n	80128da <xQueueReceive+0x66>
	__asm volatile
 80128c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128c4:	b672      	cpsid	i
 80128c6:	f383 8811 	msr	BASEPRI, r3
 80128ca:	f3bf 8f6f 	isb	sy
 80128ce:	f3bf 8f4f 	dsb	sy
 80128d2:	b662      	cpsie	i
 80128d4:	61fb      	str	r3, [r7, #28]
}
 80128d6:	bf00      	nop
 80128d8:	e7fe      	b.n	80128d8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80128da:	f001 fb49 	bl	8013f70 <xTaskGetSchedulerState>
 80128de:	4603      	mov	r3, r0
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d102      	bne.n	80128ea <xQueueReceive+0x76>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d101      	bne.n	80128ee <xQueueReceive+0x7a>
 80128ea:	2301      	movs	r3, #1
 80128ec:	e000      	b.n	80128f0 <xQueueReceive+0x7c>
 80128ee:	2300      	movs	r3, #0
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d10c      	bne.n	801290e <xQueueReceive+0x9a>
	__asm volatile
 80128f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f8:	b672      	cpsid	i
 80128fa:	f383 8811 	msr	BASEPRI, r3
 80128fe:	f3bf 8f6f 	isb	sy
 8012902:	f3bf 8f4f 	dsb	sy
 8012906:	b662      	cpsie	i
 8012908:	61bb      	str	r3, [r7, #24]
}
 801290a:	bf00      	nop
 801290c:	e7fe      	b.n	801290c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801290e:	f001 fe7d 	bl	801460c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012916:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291a:	2b00      	cmp	r3, #0
 801291c:	d01f      	beq.n	801295e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801291e:	68b9      	ldr	r1, [r7, #8]
 8012920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012922:	f000 fb0e 	bl	8012f42 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012928:	1e5a      	subs	r2, r3, #1
 801292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012930:	691b      	ldr	r3, [r3, #16]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d00f      	beq.n	8012956 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012938:	3310      	adds	r3, #16
 801293a:	4618      	mov	r0, r3
 801293c:	f001 f950 	bl	8013be0 <xTaskRemoveFromEventList>
 8012940:	4603      	mov	r3, r0
 8012942:	2b00      	cmp	r3, #0
 8012944:	d007      	beq.n	8012956 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012946:	4b3d      	ldr	r3, [pc, #244]	; (8012a3c <xQueueReceive+0x1c8>)
 8012948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801294c:	601a      	str	r2, [r3, #0]
 801294e:	f3bf 8f4f 	dsb	sy
 8012952:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012956:	f001 fe8d 	bl	8014674 <vPortExitCritical>
				return pdPASS;
 801295a:	2301      	movs	r3, #1
 801295c:	e069      	b.n	8012a32 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d103      	bne.n	801296c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012964:	f001 fe86 	bl	8014674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012968:	2300      	movs	r3, #0
 801296a:	e062      	b.n	8012a32 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 801296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801296e:	2b00      	cmp	r3, #0
 8012970:	d106      	bne.n	8012980 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012972:	f107 0310 	add.w	r3, r7, #16
 8012976:	4618      	mov	r0, r3
 8012978:	f001 f996 	bl	8013ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801297c:	2301      	movs	r3, #1
 801297e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012980:	f001 fe78 	bl	8014674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012984:	f000 ff1a 	bl	80137bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012988:	f001 fe40 	bl	801460c <vPortEnterCritical>
 801298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801298e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012992:	b25b      	sxtb	r3, r3
 8012994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012998:	d103      	bne.n	80129a2 <xQueueReceive+0x12e>
 801299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299c:	2200      	movs	r2, #0
 801299e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80129a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80129a8:	b25b      	sxtb	r3, r3
 80129aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80129ae:	d103      	bne.n	80129b8 <xQueueReceive+0x144>
 80129b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b2:	2200      	movs	r2, #0
 80129b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80129b8:	f001 fe5c 	bl	8014674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80129bc:	1d3a      	adds	r2, r7, #4
 80129be:	f107 0310 	add.w	r3, r7, #16
 80129c2:	4611      	mov	r1, r2
 80129c4:	4618      	mov	r0, r3
 80129c6:	f001 f985 	bl	8013cd4 <xTaskCheckForTimeOut>
 80129ca:	4603      	mov	r3, r0
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d123      	bne.n	8012a18 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80129d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129d2:	f000 fb2e 	bl	8013032 <prvIsQueueEmpty>
 80129d6:	4603      	mov	r3, r0
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d017      	beq.n	8012a0c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80129dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129de:	3324      	adds	r3, #36	; 0x24
 80129e0:	687a      	ldr	r2, [r7, #4]
 80129e2:	4611      	mov	r1, r2
 80129e4:	4618      	mov	r0, r3
 80129e6:	f001 f8d5 	bl	8013b94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80129ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129ec:	f000 facf 	bl	8012f8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80129f0:	f000 fef2 	bl	80137d8 <xTaskResumeAll>
 80129f4:	4603      	mov	r3, r0
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d189      	bne.n	801290e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80129fa:	4b10      	ldr	r3, [pc, #64]	; (8012a3c <xQueueReceive+0x1c8>)
 80129fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a00:	601a      	str	r2, [r3, #0]
 8012a02:	f3bf 8f4f 	dsb	sy
 8012a06:	f3bf 8f6f 	isb	sy
 8012a0a:	e780      	b.n	801290e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a0e:	f000 fabe 	bl	8012f8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012a12:	f000 fee1 	bl	80137d8 <xTaskResumeAll>
 8012a16:	e77a      	b.n	801290e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a1a:	f000 fab8 	bl	8012f8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012a1e:	f000 fedb 	bl	80137d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a24:	f000 fb05 	bl	8013032 <prvIsQueueEmpty>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	f43f af6f 	beq.w	801290e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012a30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3730      	adds	r7, #48	; 0x30
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	e000ed04 	.word	0xe000ed04

08012a40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b08e      	sub	sp, #56	; 0x38
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012a52:	2300      	movs	r3, #0
 8012a54:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d10c      	bne.n	8012a76 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8012a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a60:	b672      	cpsid	i
 8012a62:	f383 8811 	msr	BASEPRI, r3
 8012a66:	f3bf 8f6f 	isb	sy
 8012a6a:	f3bf 8f4f 	dsb	sy
 8012a6e:	b662      	cpsie	i
 8012a70:	623b      	str	r3, [r7, #32]
}
 8012a72:	bf00      	nop
 8012a74:	e7fe      	b.n	8012a74 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d00c      	beq.n	8012a98 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8012a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a82:	b672      	cpsid	i
 8012a84:	f383 8811 	msr	BASEPRI, r3
 8012a88:	f3bf 8f6f 	isb	sy
 8012a8c:	f3bf 8f4f 	dsb	sy
 8012a90:	b662      	cpsie	i
 8012a92:	61fb      	str	r3, [r7, #28]
}
 8012a94:	bf00      	nop
 8012a96:	e7fe      	b.n	8012a96 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012a98:	f001 fa6a 	bl	8013f70 <xTaskGetSchedulerState>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d102      	bne.n	8012aa8 <xQueueSemaphoreTake+0x68>
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d101      	bne.n	8012aac <xQueueSemaphoreTake+0x6c>
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	e000      	b.n	8012aae <xQueueSemaphoreTake+0x6e>
 8012aac:	2300      	movs	r3, #0
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d10c      	bne.n	8012acc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8012ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab6:	b672      	cpsid	i
 8012ab8:	f383 8811 	msr	BASEPRI, r3
 8012abc:	f3bf 8f6f 	isb	sy
 8012ac0:	f3bf 8f4f 	dsb	sy
 8012ac4:	b662      	cpsie	i
 8012ac6:	61bb      	str	r3, [r7, #24]
}
 8012ac8:	bf00      	nop
 8012aca:	e7fe      	b.n	8012aca <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012acc:	f001 fd9e 	bl	801460c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ad4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d024      	beq.n	8012b26 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ade:	1e5a      	subs	r2, r3, #1
 8012ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d104      	bne.n	8012af6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012aec:	f001 fc06 	bl	80142fc <pvTaskIncrementMutexHeldCount>
 8012af0:	4602      	mov	r2, r0
 8012af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af8:	691b      	ldr	r3, [r3, #16]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d00f      	beq.n	8012b1e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b00:	3310      	adds	r3, #16
 8012b02:	4618      	mov	r0, r3
 8012b04:	f001 f86c 	bl	8013be0 <xTaskRemoveFromEventList>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d007      	beq.n	8012b1e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012b0e:	4b55      	ldr	r3, [pc, #340]	; (8012c64 <xQueueSemaphoreTake+0x224>)
 8012b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b14:	601a      	str	r2, [r3, #0]
 8012b16:	f3bf 8f4f 	dsb	sy
 8012b1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012b1e:	f001 fda9 	bl	8014674 <vPortExitCritical>
				return pdPASS;
 8012b22:	2301      	movs	r3, #1
 8012b24:	e099      	b.n	8012c5a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d113      	bne.n	8012b54 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d00c      	beq.n	8012b4c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8012b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b36:	b672      	cpsid	i
 8012b38:	f383 8811 	msr	BASEPRI, r3
 8012b3c:	f3bf 8f6f 	isb	sy
 8012b40:	f3bf 8f4f 	dsb	sy
 8012b44:	b662      	cpsie	i
 8012b46:	617b      	str	r3, [r7, #20]
}
 8012b48:	bf00      	nop
 8012b4a:	e7fe      	b.n	8012b4a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012b4c:	f001 fd92 	bl	8014674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012b50:	2300      	movs	r3, #0
 8012b52:	e082      	b.n	8012c5a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d106      	bne.n	8012b68 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012b5a:	f107 030c 	add.w	r3, r7, #12
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f001 f8a2 	bl	8013ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012b64:	2301      	movs	r3, #1
 8012b66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012b68:	f001 fd84 	bl	8014674 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012b6c:	f000 fe26 	bl	80137bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012b70:	f001 fd4c 	bl	801460c <vPortEnterCritical>
 8012b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012b7a:	b25b      	sxtb	r3, r3
 8012b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b80:	d103      	bne.n	8012b8a <xQueueSemaphoreTake+0x14a>
 8012b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b84:	2200      	movs	r2, #0
 8012b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b90:	b25b      	sxtb	r3, r3
 8012b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b96:	d103      	bne.n	8012ba0 <xQueueSemaphoreTake+0x160>
 8012b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012ba0:	f001 fd68 	bl	8014674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012ba4:	463a      	mov	r2, r7
 8012ba6:	f107 030c 	add.w	r3, r7, #12
 8012baa:	4611      	mov	r1, r2
 8012bac:	4618      	mov	r0, r3
 8012bae:	f001 f891 	bl	8013cd4 <xTaskCheckForTimeOut>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d132      	bne.n	8012c1e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bba:	f000 fa3a 	bl	8013032 <prvIsQueueEmpty>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d026      	beq.n	8012c12 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d109      	bne.n	8012be0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8012bcc:	f001 fd1e 	bl	801460c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd2:	689b      	ldr	r3, [r3, #8]
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f001 f9e9 	bl	8013fac <xTaskPriorityInherit>
 8012bda:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012bdc:	f001 fd4a 	bl	8014674 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be2:	3324      	adds	r3, #36	; 0x24
 8012be4:	683a      	ldr	r2, [r7, #0]
 8012be6:	4611      	mov	r1, r2
 8012be8:	4618      	mov	r0, r3
 8012bea:	f000 ffd3 	bl	8013b94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012bee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bf0:	f000 f9cd 	bl	8012f8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012bf4:	f000 fdf0 	bl	80137d8 <xTaskResumeAll>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	f47f af66 	bne.w	8012acc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8012c00:	4b18      	ldr	r3, [pc, #96]	; (8012c64 <xQueueSemaphoreTake+0x224>)
 8012c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c06:	601a      	str	r2, [r3, #0]
 8012c08:	f3bf 8f4f 	dsb	sy
 8012c0c:	f3bf 8f6f 	isb	sy
 8012c10:	e75c      	b.n	8012acc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c14:	f000 f9bb 	bl	8012f8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012c18:	f000 fdde 	bl	80137d8 <xTaskResumeAll>
 8012c1c:	e756      	b.n	8012acc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c20:	f000 f9b5 	bl	8012f8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012c24:	f000 fdd8 	bl	80137d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c2a:	f000 fa02 	bl	8013032 <prvIsQueueEmpty>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	f43f af4b 	beq.w	8012acc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d00d      	beq.n	8012c58 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8012c3c:	f001 fce6 	bl	801460c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c42:	f000 f8fc 	bl	8012e3e <prvGetDisinheritPriorityAfterTimeout>
 8012c46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4a:	689b      	ldr	r3, [r3, #8]
 8012c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f001 fab6 	bl	80141c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012c54:	f001 fd0e 	bl	8014674 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012c58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3738      	adds	r7, #56	; 0x38
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	e000ed04 	.word	0xe000ed04

08012c68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b08e      	sub	sp, #56	; 0x38
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	60f8      	str	r0, [r7, #12]
 8012c70:	60b9      	str	r1, [r7, #8]
 8012c72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d10c      	bne.n	8012c98 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8012c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c82:	b672      	cpsid	i
 8012c84:	f383 8811 	msr	BASEPRI, r3
 8012c88:	f3bf 8f6f 	isb	sy
 8012c8c:	f3bf 8f4f 	dsb	sy
 8012c90:	b662      	cpsie	i
 8012c92:	623b      	str	r3, [r7, #32]
}
 8012c94:	bf00      	nop
 8012c96:	e7fe      	b.n	8012c96 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d103      	bne.n	8012ca6 <xQueueReceiveFromISR+0x3e>
 8012c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d101      	bne.n	8012caa <xQueueReceiveFromISR+0x42>
 8012ca6:	2301      	movs	r3, #1
 8012ca8:	e000      	b.n	8012cac <xQueueReceiveFromISR+0x44>
 8012caa:	2300      	movs	r3, #0
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d10c      	bne.n	8012cca <xQueueReceiveFromISR+0x62>
	__asm volatile
 8012cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cb4:	b672      	cpsid	i
 8012cb6:	f383 8811 	msr	BASEPRI, r3
 8012cba:	f3bf 8f6f 	isb	sy
 8012cbe:	f3bf 8f4f 	dsb	sy
 8012cc2:	b662      	cpsie	i
 8012cc4:	61fb      	str	r3, [r7, #28]
}
 8012cc6:	bf00      	nop
 8012cc8:	e7fe      	b.n	8012cc8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012cca:	f001 fd87 	bl	80147dc <vPortValidateInterruptPriority>
	__asm volatile
 8012cce:	f3ef 8211 	mrs	r2, BASEPRI
 8012cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cd6:	b672      	cpsid	i
 8012cd8:	f383 8811 	msr	BASEPRI, r3
 8012cdc:	f3bf 8f6f 	isb	sy
 8012ce0:	f3bf 8f4f 	dsb	sy
 8012ce4:	b662      	cpsie	i
 8012ce6:	61ba      	str	r2, [r7, #24]
 8012ce8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012cea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012cec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cf2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d02f      	beq.n	8012d5a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012d04:	68b9      	ldr	r1, [r7, #8]
 8012d06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d08:	f000 f91b 	bl	8012f42 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d0e:	1e5a      	subs	r2, r3, #1
 8012d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d12:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012d14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d1c:	d112      	bne.n	8012d44 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d20:	691b      	ldr	r3, [r3, #16]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d016      	beq.n	8012d54 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d28:	3310      	adds	r3, #16
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f000 ff58 	bl	8013be0 <xTaskRemoveFromEventList>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d00e      	beq.n	8012d54 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d00b      	beq.n	8012d54 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2201      	movs	r2, #1
 8012d40:	601a      	str	r2, [r3, #0]
 8012d42:	e007      	b.n	8012d54 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d48:	3301      	adds	r3, #1
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	b25a      	sxtb	r2, r3
 8012d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012d54:	2301      	movs	r3, #1
 8012d56:	637b      	str	r3, [r7, #52]	; 0x34
 8012d58:	e001      	b.n	8012d5e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8012d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d60:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	f383 8811 	msr	BASEPRI, r3
}
 8012d68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	3738      	adds	r7, #56	; 0x38
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}

08012d74 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b084      	sub	sp, #16
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d10c      	bne.n	8012d9c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8012d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d86:	b672      	cpsid	i
 8012d88:	f383 8811 	msr	BASEPRI, r3
 8012d8c:	f3bf 8f6f 	isb	sy
 8012d90:	f3bf 8f4f 	dsb	sy
 8012d94:	b662      	cpsie	i
 8012d96:	60bb      	str	r3, [r7, #8]
}
 8012d98:	bf00      	nop
 8012d9a:	e7fe      	b.n	8012d9a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8012d9c:	f001 fc36 	bl	801460c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012da4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8012da6:	f001 fc65 	bl	8014674 <vPortExitCritical>

	return uxReturn;
 8012daa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012dac:	4618      	mov	r0, r3
 8012dae:	3710      	adds	r7, #16
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}

08012db4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8012db4:	b480      	push	{r7}
 8012db6:	b087      	sub	sp, #28
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8012dc0:	697b      	ldr	r3, [r7, #20]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d10c      	bne.n	8012de0 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8012dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dca:	b672      	cpsid	i
 8012dcc:	f383 8811 	msr	BASEPRI, r3
 8012dd0:	f3bf 8f6f 	isb	sy
 8012dd4:	f3bf 8f4f 	dsb	sy
 8012dd8:	b662      	cpsie	i
 8012dda:	60fb      	str	r3, [r7, #12]
}
 8012ddc:	bf00      	nop
 8012dde:	e7fe      	b.n	8012dde <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012de4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8012de6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012de8:	4618      	mov	r0, r3
 8012dea:	371c      	adds	r7, #28
 8012dec:	46bd      	mov	sp, r7
 8012dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df2:	4770      	bx	lr

08012df4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b084      	sub	sp, #16
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d10c      	bne.n	8012e20 <vQueueDelete+0x2c>
	__asm volatile
 8012e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e0a:	b672      	cpsid	i
 8012e0c:	f383 8811 	msr	BASEPRI, r3
 8012e10:	f3bf 8f6f 	isb	sy
 8012e14:	f3bf 8f4f 	dsb	sy
 8012e18:	b662      	cpsie	i
 8012e1a:	60bb      	str	r3, [r7, #8]
}
 8012e1c:	bf00      	nop
 8012e1e:	e7fe      	b.n	8012e1e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012e20:	68f8      	ldr	r0, [r7, #12]
 8012e22:	f000 f935 	bl	8013090 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d102      	bne.n	8012e36 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8012e30:	68f8      	ldr	r0, [r7, #12]
 8012e32:	f7ee fae6 	bl	8001402 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012e36:	bf00      	nop
 8012e38:	3710      	adds	r7, #16
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bd80      	pop	{r7, pc}

08012e3e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012e3e:	b480      	push	{r7}
 8012e40:	b085      	sub	sp, #20
 8012e42:	af00      	add	r7, sp, #0
 8012e44:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d006      	beq.n	8012e5c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	f1c3 0307 	rsb	r3, r3, #7
 8012e58:	60fb      	str	r3, [r7, #12]
 8012e5a:	e001      	b.n	8012e60 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012e60:	68fb      	ldr	r3, [r7, #12]
	}
 8012e62:	4618      	mov	r0, r3
 8012e64:	3714      	adds	r7, #20
 8012e66:	46bd      	mov	sp, r7
 8012e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6c:	4770      	bx	lr

08012e6e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012e6e:	b580      	push	{r7, lr}
 8012e70:	b086      	sub	sp, #24
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	60f8      	str	r0, [r7, #12]
 8012e76:	60b9      	str	r1, [r7, #8]
 8012e78:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e82:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d10d      	bne.n	8012ea8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d14d      	bne.n	8012f30 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	689b      	ldr	r3, [r3, #8]
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f001 f907 	bl	80140ac <xTaskPriorityDisinherit>
 8012e9e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	609a      	str	r2, [r3, #8]
 8012ea6:	e043      	b.n	8012f30 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d119      	bne.n	8012ee2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	6858      	ldr	r0, [r3, #4]
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eb6:	461a      	mov	r2, r3
 8012eb8:	68b9      	ldr	r1, [r7, #8]
 8012eba:	f010 ff11 	bl	8023ce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	685a      	ldr	r2, [r3, #4]
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ec6:	441a      	add	r2, r3
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	685a      	ldr	r2, [r3, #4]
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	689b      	ldr	r3, [r3, #8]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	d32b      	bcc.n	8012f30 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	681a      	ldr	r2, [r3, #0]
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	605a      	str	r2, [r3, #4]
 8012ee0:	e026      	b.n	8012f30 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	68d8      	ldr	r0, [r3, #12]
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eea:	461a      	mov	r2, r3
 8012eec:	68b9      	ldr	r1, [r7, #8]
 8012eee:	f010 fef7 	bl	8023ce0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	68da      	ldr	r2, [r3, #12]
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012efa:	425b      	negs	r3, r3
 8012efc:	441a      	add	r2, r3
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	68da      	ldr	r2, [r3, #12]
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d207      	bcs.n	8012f1e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	689a      	ldr	r2, [r3, #8]
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f16:	425b      	negs	r3, r3
 8012f18:	441a      	add	r2, r3
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2b02      	cmp	r3, #2
 8012f22:	d105      	bne.n	8012f30 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d002      	beq.n	8012f30 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	3b01      	subs	r3, #1
 8012f2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	1c5a      	adds	r2, r3, #1
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012f38:	697b      	ldr	r3, [r7, #20]
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3718      	adds	r7, #24
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}

08012f42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012f42:	b580      	push	{r7, lr}
 8012f44:	b082      	sub	sp, #8
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
 8012f4a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d018      	beq.n	8012f86 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	68da      	ldr	r2, [r3, #12]
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f5c:	441a      	add	r2, r3
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	68da      	ldr	r2, [r3, #12]
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	689b      	ldr	r3, [r3, #8]
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	d303      	bcc.n	8012f76 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	68d9      	ldr	r1, [r3, #12]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f7e:	461a      	mov	r2, r3
 8012f80:	6838      	ldr	r0, [r7, #0]
 8012f82:	f010 fead 	bl	8023ce0 <memcpy>
	}
}
 8012f86:	bf00      	nop
 8012f88:	3708      	adds	r7, #8
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	bd80      	pop	{r7, pc}

08012f8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012f8e:	b580      	push	{r7, lr}
 8012f90:	b084      	sub	sp, #16
 8012f92:	af00      	add	r7, sp, #0
 8012f94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012f96:	f001 fb39 	bl	801460c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012fa0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012fa2:	e011      	b.n	8012fc8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d012      	beq.n	8012fd2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	3324      	adds	r3, #36	; 0x24
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f000 fe15 	bl	8013be0 <xTaskRemoveFromEventList>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d001      	beq.n	8012fc0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012fbc:	f000 fef0 	bl	8013da0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012fc0:	7bfb      	ldrb	r3, [r7, #15]
 8012fc2:	3b01      	subs	r3, #1
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	dce9      	bgt.n	8012fa4 <prvUnlockQueue+0x16>
 8012fd0:	e000      	b.n	8012fd4 <prvUnlockQueue+0x46>
					break;
 8012fd2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	22ff      	movs	r2, #255	; 0xff
 8012fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012fdc:	f001 fb4a 	bl	8014674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012fe0:	f001 fb14 	bl	801460c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012fea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012fec:	e011      	b.n	8013012 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	691b      	ldr	r3, [r3, #16]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d012      	beq.n	801301c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	3310      	adds	r3, #16
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f000 fdf0 	bl	8013be0 <xTaskRemoveFromEventList>
 8013000:	4603      	mov	r3, r0
 8013002:	2b00      	cmp	r3, #0
 8013004:	d001      	beq.n	801300a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013006:	f000 fecb 	bl	8013da0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801300a:	7bbb      	ldrb	r3, [r7, #14]
 801300c:	3b01      	subs	r3, #1
 801300e:	b2db      	uxtb	r3, r3
 8013010:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013012:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013016:	2b00      	cmp	r3, #0
 8013018:	dce9      	bgt.n	8012fee <prvUnlockQueue+0x60>
 801301a:	e000      	b.n	801301e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801301c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	22ff      	movs	r2, #255	; 0xff
 8013022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013026:	f001 fb25 	bl	8014674 <vPortExitCritical>
}
 801302a:	bf00      	nop
 801302c:	3710      	adds	r7, #16
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}

08013032 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013032:	b580      	push	{r7, lr}
 8013034:	b084      	sub	sp, #16
 8013036:	af00      	add	r7, sp, #0
 8013038:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801303a:	f001 fae7 	bl	801460c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013042:	2b00      	cmp	r3, #0
 8013044:	d102      	bne.n	801304c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013046:	2301      	movs	r3, #1
 8013048:	60fb      	str	r3, [r7, #12]
 801304a:	e001      	b.n	8013050 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801304c:	2300      	movs	r3, #0
 801304e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013050:	f001 fb10 	bl	8014674 <vPortExitCritical>

	return xReturn;
 8013054:	68fb      	ldr	r3, [r7, #12]
}
 8013056:	4618      	mov	r0, r3
 8013058:	3710      	adds	r7, #16
 801305a:	46bd      	mov	sp, r7
 801305c:	bd80      	pop	{r7, pc}

0801305e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801305e:	b580      	push	{r7, lr}
 8013060:	b084      	sub	sp, #16
 8013062:	af00      	add	r7, sp, #0
 8013064:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013066:	f001 fad1 	bl	801460c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013072:	429a      	cmp	r2, r3
 8013074:	d102      	bne.n	801307c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013076:	2301      	movs	r3, #1
 8013078:	60fb      	str	r3, [r7, #12]
 801307a:	e001      	b.n	8013080 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801307c:	2300      	movs	r3, #0
 801307e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013080:	f001 faf8 	bl	8014674 <vPortExitCritical>

	return xReturn;
 8013084:	68fb      	ldr	r3, [r7, #12]
}
 8013086:	4618      	mov	r0, r3
 8013088:	3710      	adds	r7, #16
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}
	...

08013090 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013090:	b480      	push	{r7}
 8013092:	b085      	sub	sp, #20
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013098:	2300      	movs	r3, #0
 801309a:	60fb      	str	r3, [r7, #12]
 801309c:	e016      	b.n	80130cc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801309e:	4a10      	ldr	r2, [pc, #64]	; (80130e0 <vQueueUnregisterQueue+0x50>)
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	00db      	lsls	r3, r3, #3
 80130a4:	4413      	add	r3, r2
 80130a6:	685b      	ldr	r3, [r3, #4]
 80130a8:	687a      	ldr	r2, [r7, #4]
 80130aa:	429a      	cmp	r2, r3
 80130ac:	d10b      	bne.n	80130c6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80130ae:	4a0c      	ldr	r2, [pc, #48]	; (80130e0 <vQueueUnregisterQueue+0x50>)
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	2100      	movs	r1, #0
 80130b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80130b8:	4a09      	ldr	r2, [pc, #36]	; (80130e0 <vQueueUnregisterQueue+0x50>)
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	00db      	lsls	r3, r3, #3
 80130be:	4413      	add	r3, r2
 80130c0:	2200      	movs	r2, #0
 80130c2:	605a      	str	r2, [r3, #4]
				break;
 80130c4:	e006      	b.n	80130d4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	3301      	adds	r3, #1
 80130ca:	60fb      	str	r3, [r7, #12]
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2b07      	cmp	r3, #7
 80130d0:	d9e5      	bls.n	801309e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80130d2:	bf00      	nop
 80130d4:	bf00      	nop
 80130d6:	3714      	adds	r7, #20
 80130d8:	46bd      	mov	sp, r7
 80130da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130de:	4770      	bx	lr
 80130e0:	20006514 	.word	0x20006514

080130e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b08e      	sub	sp, #56	; 0x38
 80130e8:	af04      	add	r7, sp, #16
 80130ea:	60f8      	str	r0, [r7, #12]
 80130ec:	60b9      	str	r1, [r7, #8]
 80130ee:	607a      	str	r2, [r7, #4]
 80130f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80130f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d10c      	bne.n	8013112 <xTaskCreateStatic+0x2e>
	__asm volatile
 80130f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130fc:	b672      	cpsid	i
 80130fe:	f383 8811 	msr	BASEPRI, r3
 8013102:	f3bf 8f6f 	isb	sy
 8013106:	f3bf 8f4f 	dsb	sy
 801310a:	b662      	cpsie	i
 801310c:	623b      	str	r3, [r7, #32]
}
 801310e:	bf00      	nop
 8013110:	e7fe      	b.n	8013110 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8013112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013114:	2b00      	cmp	r3, #0
 8013116:	d10c      	bne.n	8013132 <xTaskCreateStatic+0x4e>
	__asm volatile
 8013118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801311c:	b672      	cpsid	i
 801311e:	f383 8811 	msr	BASEPRI, r3
 8013122:	f3bf 8f6f 	isb	sy
 8013126:	f3bf 8f4f 	dsb	sy
 801312a:	b662      	cpsie	i
 801312c:	61fb      	str	r3, [r7, #28]
}
 801312e:	bf00      	nop
 8013130:	e7fe      	b.n	8013130 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013132:	23b4      	movs	r3, #180	; 0xb4
 8013134:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013136:	693b      	ldr	r3, [r7, #16]
 8013138:	2bb4      	cmp	r3, #180	; 0xb4
 801313a:	d00c      	beq.n	8013156 <xTaskCreateStatic+0x72>
	__asm volatile
 801313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013140:	b672      	cpsid	i
 8013142:	f383 8811 	msr	BASEPRI, r3
 8013146:	f3bf 8f6f 	isb	sy
 801314a:	f3bf 8f4f 	dsb	sy
 801314e:	b662      	cpsie	i
 8013150:	61bb      	str	r3, [r7, #24]
}
 8013152:	bf00      	nop
 8013154:	e7fe      	b.n	8013154 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013156:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801315a:	2b00      	cmp	r3, #0
 801315c:	d01e      	beq.n	801319c <xTaskCreateStatic+0xb8>
 801315e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013160:	2b00      	cmp	r3, #0
 8013162:	d01b      	beq.n	801319c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013166:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801316c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013170:	2202      	movs	r2, #2
 8013172:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013176:	2300      	movs	r3, #0
 8013178:	9303      	str	r3, [sp, #12]
 801317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317c:	9302      	str	r3, [sp, #8]
 801317e:	f107 0314 	add.w	r3, r7, #20
 8013182:	9301      	str	r3, [sp, #4]
 8013184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013186:	9300      	str	r3, [sp, #0]
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	687a      	ldr	r2, [r7, #4]
 801318c:	68b9      	ldr	r1, [r7, #8]
 801318e:	68f8      	ldr	r0, [r7, #12]
 8013190:	f000 f850 	bl	8013234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013196:	f000 f8ed 	bl	8013374 <prvAddNewTaskToReadyList>
 801319a:	e001      	b.n	80131a0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 801319c:	2300      	movs	r3, #0
 801319e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80131a0:	697b      	ldr	r3, [r7, #20]
	}
 80131a2:	4618      	mov	r0, r3
 80131a4:	3728      	adds	r7, #40	; 0x28
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}

080131aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80131aa:	b580      	push	{r7, lr}
 80131ac:	b08c      	sub	sp, #48	; 0x30
 80131ae:	af04      	add	r7, sp, #16
 80131b0:	60f8      	str	r0, [r7, #12]
 80131b2:	60b9      	str	r1, [r7, #8]
 80131b4:	603b      	str	r3, [r7, #0]
 80131b6:	4613      	mov	r3, r2
 80131b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80131ba:	88fb      	ldrh	r3, [r7, #6]
 80131bc:	009b      	lsls	r3, r3, #2
 80131be:	4618      	mov	r0, r3
 80131c0:	f7ee f911 	bl	80013e6 <pvPortMalloc>
 80131c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d00e      	beq.n	80131ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80131cc:	20b4      	movs	r0, #180	; 0xb4
 80131ce:	f7ee f90a 	bl	80013e6 <pvPortMalloc>
 80131d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80131d4:	69fb      	ldr	r3, [r7, #28]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d003      	beq.n	80131e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80131da:	69fb      	ldr	r3, [r7, #28]
 80131dc:	697a      	ldr	r2, [r7, #20]
 80131de:	631a      	str	r2, [r3, #48]	; 0x30
 80131e0:	e005      	b.n	80131ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80131e2:	6978      	ldr	r0, [r7, #20]
 80131e4:	f7ee f90d 	bl	8001402 <vPortFree>
 80131e8:	e001      	b.n	80131ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80131ea:	2300      	movs	r3, #0
 80131ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80131ee:	69fb      	ldr	r3, [r7, #28]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d017      	beq.n	8013224 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80131f4:	69fb      	ldr	r3, [r7, #28]
 80131f6:	2200      	movs	r2, #0
 80131f8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80131fc:	88fa      	ldrh	r2, [r7, #6]
 80131fe:	2300      	movs	r3, #0
 8013200:	9303      	str	r3, [sp, #12]
 8013202:	69fb      	ldr	r3, [r7, #28]
 8013204:	9302      	str	r3, [sp, #8]
 8013206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013208:	9301      	str	r3, [sp, #4]
 801320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801320c:	9300      	str	r3, [sp, #0]
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	68b9      	ldr	r1, [r7, #8]
 8013212:	68f8      	ldr	r0, [r7, #12]
 8013214:	f000 f80e 	bl	8013234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013218:	69f8      	ldr	r0, [r7, #28]
 801321a:	f000 f8ab 	bl	8013374 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801321e:	2301      	movs	r3, #1
 8013220:	61bb      	str	r3, [r7, #24]
 8013222:	e002      	b.n	801322a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013228:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801322a:	69bb      	ldr	r3, [r7, #24]
	}
 801322c:	4618      	mov	r0, r3
 801322e:	3720      	adds	r7, #32
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b088      	sub	sp, #32
 8013238:	af00      	add	r7, sp, #0
 801323a:	60f8      	str	r0, [r7, #12]
 801323c:	60b9      	str	r1, [r7, #8]
 801323e:	607a      	str	r2, [r7, #4]
 8013240:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013246:	6879      	ldr	r1, [r7, #4]
 8013248:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801324c:	440b      	add	r3, r1
 801324e:	009b      	lsls	r3, r3, #2
 8013250:	4413      	add	r3, r2
 8013252:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013254:	69bb      	ldr	r3, [r7, #24]
 8013256:	f023 0307 	bic.w	r3, r3, #7
 801325a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801325c:	69bb      	ldr	r3, [r7, #24]
 801325e:	f003 0307 	and.w	r3, r3, #7
 8013262:	2b00      	cmp	r3, #0
 8013264:	d00c      	beq.n	8013280 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8013266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801326a:	b672      	cpsid	i
 801326c:	f383 8811 	msr	BASEPRI, r3
 8013270:	f3bf 8f6f 	isb	sy
 8013274:	f3bf 8f4f 	dsb	sy
 8013278:	b662      	cpsie	i
 801327a:	617b      	str	r3, [r7, #20]
}
 801327c:	bf00      	nop
 801327e:	e7fe      	b.n	801327e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013280:	68bb      	ldr	r3, [r7, #8]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d01f      	beq.n	80132c6 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013286:	2300      	movs	r3, #0
 8013288:	61fb      	str	r3, [r7, #28]
 801328a:	e012      	b.n	80132b2 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801328c:	68ba      	ldr	r2, [r7, #8]
 801328e:	69fb      	ldr	r3, [r7, #28]
 8013290:	4413      	add	r3, r2
 8013292:	7819      	ldrb	r1, [r3, #0]
 8013294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013296:	69fb      	ldr	r3, [r7, #28]
 8013298:	4413      	add	r3, r2
 801329a:	3334      	adds	r3, #52	; 0x34
 801329c:	460a      	mov	r2, r1
 801329e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80132a0:	68ba      	ldr	r2, [r7, #8]
 80132a2:	69fb      	ldr	r3, [r7, #28]
 80132a4:	4413      	add	r3, r2
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d006      	beq.n	80132ba <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80132ac:	69fb      	ldr	r3, [r7, #28]
 80132ae:	3301      	adds	r3, #1
 80132b0:	61fb      	str	r3, [r7, #28]
 80132b2:	69fb      	ldr	r3, [r7, #28]
 80132b4:	2b0f      	cmp	r3, #15
 80132b6:	d9e9      	bls.n	801328c <prvInitialiseNewTask+0x58>
 80132b8:	e000      	b.n	80132bc <prvInitialiseNewTask+0x88>
			{
				break;
 80132ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80132bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132be:	2200      	movs	r2, #0
 80132c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80132c4:	e003      	b.n	80132ce <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80132c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c8:	2200      	movs	r2, #0
 80132ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80132ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d0:	2b06      	cmp	r3, #6
 80132d2:	d901      	bls.n	80132d8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80132d4:	2306      	movs	r3, #6
 80132d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80132d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80132de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80132e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e6:	2200      	movs	r2, #0
 80132e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80132ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ec:	3304      	adds	r3, #4
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7fe fe55 	bl	8011f9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80132f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f6:	3318      	adds	r3, #24
 80132f8:	4618      	mov	r0, r3
 80132fa:	f7fe fe50 	bl	8011f9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80132fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013302:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013306:	f1c3 0207 	rsb	r2, r3, #7
 801330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801330c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013312:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013316:	2200      	movs	r2, #0
 8013318:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801331e:	2200      	movs	r2, #0
 8013320:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013326:	334c      	adds	r3, #76	; 0x4c
 8013328:	2260      	movs	r2, #96	; 0x60
 801332a:	2100      	movs	r1, #0
 801332c:	4618      	mov	r0, r3
 801332e:	f010 fcff 	bl	8023d30 <memset>
 8013332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013334:	4a0c      	ldr	r2, [pc, #48]	; (8013368 <prvInitialiseNewTask+0x134>)
 8013336:	651a      	str	r2, [r3, #80]	; 0x50
 8013338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801333a:	4a0c      	ldr	r2, [pc, #48]	; (801336c <prvInitialiseNewTask+0x138>)
 801333c:	655a      	str	r2, [r3, #84]	; 0x54
 801333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013340:	4a0b      	ldr	r2, [pc, #44]	; (8013370 <prvInitialiseNewTask+0x13c>)
 8013342:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013344:	683a      	ldr	r2, [r7, #0]
 8013346:	68f9      	ldr	r1, [r7, #12]
 8013348:	69b8      	ldr	r0, [r7, #24]
 801334a:	f001 f851 	bl	80143f0 <pxPortInitialiseStack>
 801334e:	4602      	mov	r2, r0
 8013350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013352:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013356:	2b00      	cmp	r3, #0
 8013358:	d002      	beq.n	8013360 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801335c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801335e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013360:	bf00      	nop
 8013362:	3720      	adds	r7, #32
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}
 8013368:	08028bd8 	.word	0x08028bd8
 801336c:	08028bf8 	.word	0x08028bf8
 8013370:	08028bb8 	.word	0x08028bb8

08013374 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b082      	sub	sp, #8
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801337c:	f001 f946 	bl	801460c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013380:	4b2a      	ldr	r3, [pc, #168]	; (801342c <prvAddNewTaskToReadyList+0xb8>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	3301      	adds	r3, #1
 8013386:	4a29      	ldr	r2, [pc, #164]	; (801342c <prvAddNewTaskToReadyList+0xb8>)
 8013388:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801338a:	4b29      	ldr	r3, [pc, #164]	; (8013430 <prvAddNewTaskToReadyList+0xbc>)
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d109      	bne.n	80133a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013392:	4a27      	ldr	r2, [pc, #156]	; (8013430 <prvAddNewTaskToReadyList+0xbc>)
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013398:	4b24      	ldr	r3, [pc, #144]	; (801342c <prvAddNewTaskToReadyList+0xb8>)
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	2b01      	cmp	r3, #1
 801339e:	d110      	bne.n	80133c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80133a0:	f000 fd22 	bl	8013de8 <prvInitialiseTaskLists>
 80133a4:	e00d      	b.n	80133c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80133a6:	4b23      	ldr	r3, [pc, #140]	; (8013434 <prvAddNewTaskToReadyList+0xc0>)
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d109      	bne.n	80133c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80133ae:	4b20      	ldr	r3, [pc, #128]	; (8013430 <prvAddNewTaskToReadyList+0xbc>)
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d802      	bhi.n	80133c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80133bc:	4a1c      	ldr	r2, [pc, #112]	; (8013430 <prvAddNewTaskToReadyList+0xbc>)
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80133c2:	4b1d      	ldr	r3, [pc, #116]	; (8013438 <prvAddNewTaskToReadyList+0xc4>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	3301      	adds	r3, #1
 80133c8:	4a1b      	ldr	r2, [pc, #108]	; (8013438 <prvAddNewTaskToReadyList+0xc4>)
 80133ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133d0:	2201      	movs	r2, #1
 80133d2:	409a      	lsls	r2, r3
 80133d4:	4b19      	ldr	r3, [pc, #100]	; (801343c <prvAddNewTaskToReadyList+0xc8>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	4313      	orrs	r3, r2
 80133da:	4a18      	ldr	r2, [pc, #96]	; (801343c <prvAddNewTaskToReadyList+0xc8>)
 80133dc:	6013      	str	r3, [r2, #0]
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133e2:	4613      	mov	r3, r2
 80133e4:	009b      	lsls	r3, r3, #2
 80133e6:	4413      	add	r3, r2
 80133e8:	009b      	lsls	r3, r3, #2
 80133ea:	4a15      	ldr	r2, [pc, #84]	; (8013440 <prvAddNewTaskToReadyList+0xcc>)
 80133ec:	441a      	add	r2, r3
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	3304      	adds	r3, #4
 80133f2:	4619      	mov	r1, r3
 80133f4:	4610      	mov	r0, r2
 80133f6:	f7fe fddf 	bl	8011fb8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80133fa:	f001 f93b 	bl	8014674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80133fe:	4b0d      	ldr	r3, [pc, #52]	; (8013434 <prvAddNewTaskToReadyList+0xc0>)
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d00e      	beq.n	8013424 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013406:	4b0a      	ldr	r3, [pc, #40]	; (8013430 <prvAddNewTaskToReadyList+0xbc>)
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013410:	429a      	cmp	r2, r3
 8013412:	d207      	bcs.n	8013424 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013414:	4b0b      	ldr	r3, [pc, #44]	; (8013444 <prvAddNewTaskToReadyList+0xd0>)
 8013416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801341a:	601a      	str	r2, [r3, #0]
 801341c:	f3bf 8f4f 	dsb	sy
 8013420:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013424:	bf00      	nop
 8013426:	3708      	adds	r7, #8
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	20006654 	.word	0x20006654
 8013430:	20006554 	.word	0x20006554
 8013434:	20006660 	.word	0x20006660
 8013438:	20006670 	.word	0x20006670
 801343c:	2000665c 	.word	0x2000665c
 8013440:	20006558 	.word	0x20006558
 8013444:	e000ed04 	.word	0xe000ed04

08013448 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8013448:	b580      	push	{r7, lr}
 801344a:	b084      	sub	sp, #16
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013450:	f001 f8dc 	bl	801460c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d102      	bne.n	8013460 <vTaskDelete+0x18>
 801345a:	4b3a      	ldr	r3, [pc, #232]	; (8013544 <vTaskDelete+0xfc>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	e000      	b.n	8013462 <vTaskDelete+0x1a>
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	3304      	adds	r3, #4
 8013468:	4618      	mov	r0, r3
 801346a:	f7fe fe02 	bl	8012072 <uxListRemove>
 801346e:	4603      	mov	r3, r0
 8013470:	2b00      	cmp	r3, #0
 8013472:	d115      	bne.n	80134a0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013478:	4933      	ldr	r1, [pc, #204]	; (8013548 <vTaskDelete+0x100>)
 801347a:	4613      	mov	r3, r2
 801347c:	009b      	lsls	r3, r3, #2
 801347e:	4413      	add	r3, r2
 8013480:	009b      	lsls	r3, r3, #2
 8013482:	440b      	add	r3, r1
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d10a      	bne.n	80134a0 <vTaskDelete+0x58>
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801348e:	2201      	movs	r2, #1
 8013490:	fa02 f303 	lsl.w	r3, r2, r3
 8013494:	43da      	mvns	r2, r3
 8013496:	4b2d      	ldr	r3, [pc, #180]	; (801354c <vTaskDelete+0x104>)
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	4013      	ands	r3, r2
 801349c:	4a2b      	ldr	r2, [pc, #172]	; (801354c <vTaskDelete+0x104>)
 801349e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d004      	beq.n	80134b2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	3318      	adds	r3, #24
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7fe fde0 	bl	8012072 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80134b2:	4b27      	ldr	r3, [pc, #156]	; (8013550 <vTaskDelete+0x108>)
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	3301      	adds	r3, #1
 80134b8:	4a25      	ldr	r2, [pc, #148]	; (8013550 <vTaskDelete+0x108>)
 80134ba:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80134bc:	4b21      	ldr	r3, [pc, #132]	; (8013544 <vTaskDelete+0xfc>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	68fa      	ldr	r2, [r7, #12]
 80134c2:	429a      	cmp	r2, r3
 80134c4:	d10b      	bne.n	80134de <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	3304      	adds	r3, #4
 80134ca:	4619      	mov	r1, r3
 80134cc:	4821      	ldr	r0, [pc, #132]	; (8013554 <vTaskDelete+0x10c>)
 80134ce:	f7fe fd73 	bl	8011fb8 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80134d2:	4b21      	ldr	r3, [pc, #132]	; (8013558 <vTaskDelete+0x110>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	3301      	adds	r3, #1
 80134d8:	4a1f      	ldr	r2, [pc, #124]	; (8013558 <vTaskDelete+0x110>)
 80134da:	6013      	str	r3, [r2, #0]
 80134dc:	e009      	b.n	80134f2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80134de:	4b1f      	ldr	r3, [pc, #124]	; (801355c <vTaskDelete+0x114>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	3b01      	subs	r3, #1
 80134e4:	4a1d      	ldr	r2, [pc, #116]	; (801355c <vTaskDelete+0x114>)
 80134e6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80134e8:	68f8      	ldr	r0, [r7, #12]
 80134ea:	f000 fceb 	bl	8013ec4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80134ee:	f000 fd1f 	bl	8013f30 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80134f2:	f001 f8bf 	bl	8014674 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80134f6:	4b1a      	ldr	r3, [pc, #104]	; (8013560 <vTaskDelete+0x118>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d01d      	beq.n	801353a <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 80134fe:	4b11      	ldr	r3, [pc, #68]	; (8013544 <vTaskDelete+0xfc>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	68fa      	ldr	r2, [r7, #12]
 8013504:	429a      	cmp	r2, r3
 8013506:	d118      	bne.n	801353a <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8013508:	4b16      	ldr	r3, [pc, #88]	; (8013564 <vTaskDelete+0x11c>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d00c      	beq.n	801352a <vTaskDelete+0xe2>
	__asm volatile
 8013510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013514:	b672      	cpsid	i
 8013516:	f383 8811 	msr	BASEPRI, r3
 801351a:	f3bf 8f6f 	isb	sy
 801351e:	f3bf 8f4f 	dsb	sy
 8013522:	b662      	cpsie	i
 8013524:	60bb      	str	r3, [r7, #8]
}
 8013526:	bf00      	nop
 8013528:	e7fe      	b.n	8013528 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 801352a:	4b0f      	ldr	r3, [pc, #60]	; (8013568 <vTaskDelete+0x120>)
 801352c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013530:	601a      	str	r2, [r3, #0]
 8013532:	f3bf 8f4f 	dsb	sy
 8013536:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801353a:	bf00      	nop
 801353c:	3710      	adds	r7, #16
 801353e:	46bd      	mov	sp, r7
 8013540:	bd80      	pop	{r7, pc}
 8013542:	bf00      	nop
 8013544:	20006554 	.word	0x20006554
 8013548:	20006558 	.word	0x20006558
 801354c:	2000665c 	.word	0x2000665c
 8013550:	20006670 	.word	0x20006670
 8013554:	20006628 	.word	0x20006628
 8013558:	2000663c 	.word	0x2000663c
 801355c:	20006654 	.word	0x20006654
 8013560:	20006660 	.word	0x20006660
 8013564:	2000667c 	.word	0x2000667c
 8013568:	e000ed04 	.word	0xe000ed04

0801356c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801356c:	b580      	push	{r7, lr}
 801356e:	b08a      	sub	sp, #40	; 0x28
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
 8013574:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8013576:	2300      	movs	r3, #0
 8013578:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d10c      	bne.n	801359a <vTaskDelayUntil+0x2e>
	__asm volatile
 8013580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013584:	b672      	cpsid	i
 8013586:	f383 8811 	msr	BASEPRI, r3
 801358a:	f3bf 8f6f 	isb	sy
 801358e:	f3bf 8f4f 	dsb	sy
 8013592:	b662      	cpsie	i
 8013594:	617b      	str	r3, [r7, #20]
}
 8013596:	bf00      	nop
 8013598:	e7fe      	b.n	8013598 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 801359a:	683b      	ldr	r3, [r7, #0]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d10c      	bne.n	80135ba <vTaskDelayUntil+0x4e>
	__asm volatile
 80135a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a4:	b672      	cpsid	i
 80135a6:	f383 8811 	msr	BASEPRI, r3
 80135aa:	f3bf 8f6f 	isb	sy
 80135ae:	f3bf 8f4f 	dsb	sy
 80135b2:	b662      	cpsie	i
 80135b4:	613b      	str	r3, [r7, #16]
}
 80135b6:	bf00      	nop
 80135b8:	e7fe      	b.n	80135b8 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 80135ba:	4b2b      	ldr	r3, [pc, #172]	; (8013668 <vTaskDelayUntil+0xfc>)
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d00c      	beq.n	80135dc <vTaskDelayUntil+0x70>
	__asm volatile
 80135c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135c6:	b672      	cpsid	i
 80135c8:	f383 8811 	msr	BASEPRI, r3
 80135cc:	f3bf 8f6f 	isb	sy
 80135d0:	f3bf 8f4f 	dsb	sy
 80135d4:	b662      	cpsie	i
 80135d6:	60fb      	str	r3, [r7, #12]
}
 80135d8:	bf00      	nop
 80135da:	e7fe      	b.n	80135da <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 80135dc:	f000 f8ee 	bl	80137bc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80135e0:	4b22      	ldr	r3, [pc, #136]	; (801366c <vTaskDelayUntil+0x100>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	683a      	ldr	r2, [r7, #0]
 80135ec:	4413      	add	r3, r2
 80135ee:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	6a3a      	ldr	r2, [r7, #32]
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d20b      	bcs.n	8013612 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	69fa      	ldr	r2, [r7, #28]
 8013600:	429a      	cmp	r2, r3
 8013602:	d211      	bcs.n	8013628 <vTaskDelayUntil+0xbc>
 8013604:	69fa      	ldr	r2, [r7, #28]
 8013606:	6a3b      	ldr	r3, [r7, #32]
 8013608:	429a      	cmp	r2, r3
 801360a:	d90d      	bls.n	8013628 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 801360c:	2301      	movs	r3, #1
 801360e:	627b      	str	r3, [r7, #36]	; 0x24
 8013610:	e00a      	b.n	8013628 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	69fa      	ldr	r2, [r7, #28]
 8013618:	429a      	cmp	r2, r3
 801361a:	d303      	bcc.n	8013624 <vTaskDelayUntil+0xb8>
 801361c:	69fa      	ldr	r2, [r7, #28]
 801361e:	6a3b      	ldr	r3, [r7, #32]
 8013620:	429a      	cmp	r2, r3
 8013622:	d901      	bls.n	8013628 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8013624:	2301      	movs	r3, #1
 8013626:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	69fa      	ldr	r2, [r7, #28]
 801362c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013630:	2b00      	cmp	r3, #0
 8013632:	d006      	beq.n	8013642 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8013634:	69fa      	ldr	r2, [r7, #28]
 8013636:	6a3b      	ldr	r3, [r7, #32]
 8013638:	1ad3      	subs	r3, r2, r3
 801363a:	2100      	movs	r1, #0
 801363c:	4618      	mov	r0, r3
 801363e:	f000 fe71 	bl	8014324 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8013642:	f000 f8c9 	bl	80137d8 <xTaskResumeAll>
 8013646:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013648:	69bb      	ldr	r3, [r7, #24]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d107      	bne.n	801365e <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 801364e:	4b08      	ldr	r3, [pc, #32]	; (8013670 <vTaskDelayUntil+0x104>)
 8013650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013654:	601a      	str	r2, [r3, #0]
 8013656:	f3bf 8f4f 	dsb	sy
 801365a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801365e:	bf00      	nop
 8013660:	3728      	adds	r7, #40	; 0x28
 8013662:	46bd      	mov	sp, r7
 8013664:	bd80      	pop	{r7, pc}
 8013666:	bf00      	nop
 8013668:	2000667c 	.word	0x2000667c
 801366c:	20006658 	.word	0x20006658
 8013670:	e000ed04 	.word	0xe000ed04

08013674 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013674:	b580      	push	{r7, lr}
 8013676:	b084      	sub	sp, #16
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801367c:	2300      	movs	r3, #0
 801367e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d019      	beq.n	80136ba <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013686:	4b14      	ldr	r3, [pc, #80]	; (80136d8 <vTaskDelay+0x64>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d00c      	beq.n	80136a8 <vTaskDelay+0x34>
	__asm volatile
 801368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013692:	b672      	cpsid	i
 8013694:	f383 8811 	msr	BASEPRI, r3
 8013698:	f3bf 8f6f 	isb	sy
 801369c:	f3bf 8f4f 	dsb	sy
 80136a0:	b662      	cpsie	i
 80136a2:	60bb      	str	r3, [r7, #8]
}
 80136a4:	bf00      	nop
 80136a6:	e7fe      	b.n	80136a6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80136a8:	f000 f888 	bl	80137bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80136ac:	2100      	movs	r1, #0
 80136ae:	6878      	ldr	r0, [r7, #4]
 80136b0:	f000 fe38 	bl	8014324 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80136b4:	f000 f890 	bl	80137d8 <xTaskResumeAll>
 80136b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d107      	bne.n	80136d0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80136c0:	4b06      	ldr	r3, [pc, #24]	; (80136dc <vTaskDelay+0x68>)
 80136c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136c6:	601a      	str	r2, [r3, #0]
 80136c8:	f3bf 8f4f 	dsb	sy
 80136cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80136d0:	bf00      	nop
 80136d2:	3710      	adds	r7, #16
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}
 80136d8:	2000667c 	.word	0x2000667c
 80136dc:	e000ed04 	.word	0xe000ed04

080136e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b08a      	sub	sp, #40	; 0x28
 80136e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80136e6:	2300      	movs	r3, #0
 80136e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80136ea:	2300      	movs	r3, #0
 80136ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80136ee:	463a      	mov	r2, r7
 80136f0:	1d39      	adds	r1, r7, #4
 80136f2:	f107 0308 	add.w	r3, r7, #8
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7f6 fc2c 	bl	8009f54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80136fc:	6839      	ldr	r1, [r7, #0]
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	68ba      	ldr	r2, [r7, #8]
 8013702:	9202      	str	r2, [sp, #8]
 8013704:	9301      	str	r3, [sp, #4]
 8013706:	2300      	movs	r3, #0
 8013708:	9300      	str	r3, [sp, #0]
 801370a:	2300      	movs	r3, #0
 801370c:	460a      	mov	r2, r1
 801370e:	4923      	ldr	r1, [pc, #140]	; (801379c <vTaskStartScheduler+0xbc>)
 8013710:	4823      	ldr	r0, [pc, #140]	; (80137a0 <vTaskStartScheduler+0xc0>)
 8013712:	f7ff fce7 	bl	80130e4 <xTaskCreateStatic>
 8013716:	4603      	mov	r3, r0
 8013718:	4a22      	ldr	r2, [pc, #136]	; (80137a4 <vTaskStartScheduler+0xc4>)
 801371a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801371c:	4b21      	ldr	r3, [pc, #132]	; (80137a4 <vTaskStartScheduler+0xc4>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d002      	beq.n	801372a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013724:	2301      	movs	r3, #1
 8013726:	617b      	str	r3, [r7, #20]
 8013728:	e001      	b.n	801372e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801372a:	2300      	movs	r3, #0
 801372c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	2b01      	cmp	r3, #1
 8013732:	d11d      	bne.n	8013770 <vTaskStartScheduler+0x90>
	__asm volatile
 8013734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013738:	b672      	cpsid	i
 801373a:	f383 8811 	msr	BASEPRI, r3
 801373e:	f3bf 8f6f 	isb	sy
 8013742:	f3bf 8f4f 	dsb	sy
 8013746:	b662      	cpsie	i
 8013748:	613b      	str	r3, [r7, #16]
}
 801374a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801374c:	4b16      	ldr	r3, [pc, #88]	; (80137a8 <vTaskStartScheduler+0xc8>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	334c      	adds	r3, #76	; 0x4c
 8013752:	4a16      	ldr	r2, [pc, #88]	; (80137ac <vTaskStartScheduler+0xcc>)
 8013754:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013756:	4b16      	ldr	r3, [pc, #88]	; (80137b0 <vTaskStartScheduler+0xd0>)
 8013758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801375c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801375e:	4b15      	ldr	r3, [pc, #84]	; (80137b4 <vTaskStartScheduler+0xd4>)
 8013760:	2201      	movs	r2, #1
 8013762:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013764:	4b14      	ldr	r3, [pc, #80]	; (80137b8 <vTaskStartScheduler+0xd8>)
 8013766:	2200      	movs	r2, #0
 8013768:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801376a:	f000 fed1 	bl	8014510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801376e:	e010      	b.n	8013792 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013776:	d10c      	bne.n	8013792 <vTaskStartScheduler+0xb2>
	__asm volatile
 8013778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801377c:	b672      	cpsid	i
 801377e:	f383 8811 	msr	BASEPRI, r3
 8013782:	f3bf 8f6f 	isb	sy
 8013786:	f3bf 8f4f 	dsb	sy
 801378a:	b662      	cpsie	i
 801378c:	60fb      	str	r3, [r7, #12]
}
 801378e:	bf00      	nop
 8013790:	e7fe      	b.n	8013790 <vTaskStartScheduler+0xb0>
}
 8013792:	bf00      	nop
 8013794:	3718      	adds	r7, #24
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}
 801379a:	bf00      	nop
 801379c:	08025498 	.word	0x08025498
 80137a0:	08013db9 	.word	0x08013db9
 80137a4:	20006678 	.word	0x20006678
 80137a8:	20006554 	.word	0x20006554
 80137ac:	20000040 	.word	0x20000040
 80137b0:	20006674 	.word	0x20006674
 80137b4:	20006660 	.word	0x20006660
 80137b8:	20006658 	.word	0x20006658

080137bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80137bc:	b480      	push	{r7}
 80137be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80137c0:	4b04      	ldr	r3, [pc, #16]	; (80137d4 <vTaskSuspendAll+0x18>)
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	3301      	adds	r3, #1
 80137c6:	4a03      	ldr	r2, [pc, #12]	; (80137d4 <vTaskSuspendAll+0x18>)
 80137c8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80137ca:	bf00      	nop
 80137cc:	46bd      	mov	sp, r7
 80137ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d2:	4770      	bx	lr
 80137d4:	2000667c 	.word	0x2000667c

080137d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b084      	sub	sp, #16
 80137dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80137de:	2300      	movs	r3, #0
 80137e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80137e2:	2300      	movs	r3, #0
 80137e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80137e6:	4b42      	ldr	r3, [pc, #264]	; (80138f0 <xTaskResumeAll+0x118>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d10c      	bne.n	8013808 <xTaskResumeAll+0x30>
	__asm volatile
 80137ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f2:	b672      	cpsid	i
 80137f4:	f383 8811 	msr	BASEPRI, r3
 80137f8:	f3bf 8f6f 	isb	sy
 80137fc:	f3bf 8f4f 	dsb	sy
 8013800:	b662      	cpsie	i
 8013802:	603b      	str	r3, [r7, #0]
}
 8013804:	bf00      	nop
 8013806:	e7fe      	b.n	8013806 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013808:	f000 ff00 	bl	801460c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801380c:	4b38      	ldr	r3, [pc, #224]	; (80138f0 <xTaskResumeAll+0x118>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	3b01      	subs	r3, #1
 8013812:	4a37      	ldr	r2, [pc, #220]	; (80138f0 <xTaskResumeAll+0x118>)
 8013814:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013816:	4b36      	ldr	r3, [pc, #216]	; (80138f0 <xTaskResumeAll+0x118>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d161      	bne.n	80138e2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801381e:	4b35      	ldr	r3, [pc, #212]	; (80138f4 <xTaskResumeAll+0x11c>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d05d      	beq.n	80138e2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013826:	e02e      	b.n	8013886 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013828:	4b33      	ldr	r3, [pc, #204]	; (80138f8 <xTaskResumeAll+0x120>)
 801382a:	68db      	ldr	r3, [r3, #12]
 801382c:	68db      	ldr	r3, [r3, #12]
 801382e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	3318      	adds	r3, #24
 8013834:	4618      	mov	r0, r3
 8013836:	f7fe fc1c 	bl	8012072 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	3304      	adds	r3, #4
 801383e:	4618      	mov	r0, r3
 8013840:	f7fe fc17 	bl	8012072 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013848:	2201      	movs	r2, #1
 801384a:	409a      	lsls	r2, r3
 801384c:	4b2b      	ldr	r3, [pc, #172]	; (80138fc <xTaskResumeAll+0x124>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	4313      	orrs	r3, r2
 8013852:	4a2a      	ldr	r2, [pc, #168]	; (80138fc <xTaskResumeAll+0x124>)
 8013854:	6013      	str	r3, [r2, #0]
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801385a:	4613      	mov	r3, r2
 801385c:	009b      	lsls	r3, r3, #2
 801385e:	4413      	add	r3, r2
 8013860:	009b      	lsls	r3, r3, #2
 8013862:	4a27      	ldr	r2, [pc, #156]	; (8013900 <xTaskResumeAll+0x128>)
 8013864:	441a      	add	r2, r3
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	3304      	adds	r3, #4
 801386a:	4619      	mov	r1, r3
 801386c:	4610      	mov	r0, r2
 801386e:	f7fe fba3 	bl	8011fb8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013876:	4b23      	ldr	r3, [pc, #140]	; (8013904 <xTaskResumeAll+0x12c>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801387c:	429a      	cmp	r2, r3
 801387e:	d302      	bcc.n	8013886 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013880:	4b21      	ldr	r3, [pc, #132]	; (8013908 <xTaskResumeAll+0x130>)
 8013882:	2201      	movs	r2, #1
 8013884:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013886:	4b1c      	ldr	r3, [pc, #112]	; (80138f8 <xTaskResumeAll+0x120>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d1cc      	bne.n	8013828 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d001      	beq.n	8013898 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013894:	f000 fb4c 	bl	8013f30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013898:	4b1c      	ldr	r3, [pc, #112]	; (801390c <xTaskResumeAll+0x134>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d010      	beq.n	80138c6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80138a4:	f000 f858 	bl	8013958 <xTaskIncrementTick>
 80138a8:	4603      	mov	r3, r0
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d002      	beq.n	80138b4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80138ae:	4b16      	ldr	r3, [pc, #88]	; (8013908 <xTaskResumeAll+0x130>)
 80138b0:	2201      	movs	r2, #1
 80138b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	3b01      	subs	r3, #1
 80138b8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d1f1      	bne.n	80138a4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80138c0:	4b12      	ldr	r3, [pc, #72]	; (801390c <xTaskResumeAll+0x134>)
 80138c2:	2200      	movs	r2, #0
 80138c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80138c6:	4b10      	ldr	r3, [pc, #64]	; (8013908 <xTaskResumeAll+0x130>)
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d009      	beq.n	80138e2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80138ce:	2301      	movs	r3, #1
 80138d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80138d2:	4b0f      	ldr	r3, [pc, #60]	; (8013910 <xTaskResumeAll+0x138>)
 80138d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138d8:	601a      	str	r2, [r3, #0]
 80138da:	f3bf 8f4f 	dsb	sy
 80138de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80138e2:	f000 fec7 	bl	8014674 <vPortExitCritical>

	return xAlreadyYielded;
 80138e6:	68bb      	ldr	r3, [r7, #8]
}
 80138e8:	4618      	mov	r0, r3
 80138ea:	3710      	adds	r7, #16
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bd80      	pop	{r7, pc}
 80138f0:	2000667c 	.word	0x2000667c
 80138f4:	20006654 	.word	0x20006654
 80138f8:	20006614 	.word	0x20006614
 80138fc:	2000665c 	.word	0x2000665c
 8013900:	20006558 	.word	0x20006558
 8013904:	20006554 	.word	0x20006554
 8013908:	20006668 	.word	0x20006668
 801390c:	20006664 	.word	0x20006664
 8013910:	e000ed04 	.word	0xe000ed04

08013914 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013914:	b480      	push	{r7}
 8013916:	b083      	sub	sp, #12
 8013918:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801391a:	4b05      	ldr	r3, [pc, #20]	; (8013930 <xTaskGetTickCount+0x1c>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013920:	687b      	ldr	r3, [r7, #4]
}
 8013922:	4618      	mov	r0, r3
 8013924:	370c      	adds	r7, #12
 8013926:	46bd      	mov	sp, r7
 8013928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392c:	4770      	bx	lr
 801392e:	bf00      	nop
 8013930:	20006658 	.word	0x20006658

08013934 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b082      	sub	sp, #8
 8013938:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801393a:	f000 ff4f 	bl	80147dc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801393e:	2300      	movs	r3, #0
 8013940:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013942:	4b04      	ldr	r3, [pc, #16]	; (8013954 <xTaskGetTickCountFromISR+0x20>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013948:	683b      	ldr	r3, [r7, #0]
}
 801394a:	4618      	mov	r0, r3
 801394c:	3708      	adds	r7, #8
 801394e:	46bd      	mov	sp, r7
 8013950:	bd80      	pop	{r7, pc}
 8013952:	bf00      	nop
 8013954:	20006658 	.word	0x20006658

08013958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b086      	sub	sp, #24
 801395c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801395e:	2300      	movs	r3, #0
 8013960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013962:	4b4f      	ldr	r3, [pc, #316]	; (8013aa0 <xTaskIncrementTick+0x148>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	2b00      	cmp	r3, #0
 8013968:	f040 808a 	bne.w	8013a80 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801396c:	4b4d      	ldr	r3, [pc, #308]	; (8013aa4 <xTaskIncrementTick+0x14c>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	3301      	adds	r3, #1
 8013972:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013974:	4a4b      	ldr	r2, [pc, #300]	; (8013aa4 <xTaskIncrementTick+0x14c>)
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d122      	bne.n	80139c6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8013980:	4b49      	ldr	r3, [pc, #292]	; (8013aa8 <xTaskIncrementTick+0x150>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d00c      	beq.n	80139a4 <xTaskIncrementTick+0x4c>
	__asm volatile
 801398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801398e:	b672      	cpsid	i
 8013990:	f383 8811 	msr	BASEPRI, r3
 8013994:	f3bf 8f6f 	isb	sy
 8013998:	f3bf 8f4f 	dsb	sy
 801399c:	b662      	cpsie	i
 801399e:	603b      	str	r3, [r7, #0]
}
 80139a0:	bf00      	nop
 80139a2:	e7fe      	b.n	80139a2 <xTaskIncrementTick+0x4a>
 80139a4:	4b40      	ldr	r3, [pc, #256]	; (8013aa8 <xTaskIncrementTick+0x150>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	60fb      	str	r3, [r7, #12]
 80139aa:	4b40      	ldr	r3, [pc, #256]	; (8013aac <xTaskIncrementTick+0x154>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	4a3e      	ldr	r2, [pc, #248]	; (8013aa8 <xTaskIncrementTick+0x150>)
 80139b0:	6013      	str	r3, [r2, #0]
 80139b2:	4a3e      	ldr	r2, [pc, #248]	; (8013aac <xTaskIncrementTick+0x154>)
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	6013      	str	r3, [r2, #0]
 80139b8:	4b3d      	ldr	r3, [pc, #244]	; (8013ab0 <xTaskIncrementTick+0x158>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	3301      	adds	r3, #1
 80139be:	4a3c      	ldr	r2, [pc, #240]	; (8013ab0 <xTaskIncrementTick+0x158>)
 80139c0:	6013      	str	r3, [r2, #0]
 80139c2:	f000 fab5 	bl	8013f30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80139c6:	4b3b      	ldr	r3, [pc, #236]	; (8013ab4 <xTaskIncrementTick+0x15c>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	693a      	ldr	r2, [r7, #16]
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d348      	bcc.n	8013a62 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80139d0:	4b35      	ldr	r3, [pc, #212]	; (8013aa8 <xTaskIncrementTick+0x150>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d104      	bne.n	80139e4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139da:	4b36      	ldr	r3, [pc, #216]	; (8013ab4 <xTaskIncrementTick+0x15c>)
 80139dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80139e0:	601a      	str	r2, [r3, #0]
					break;
 80139e2:	e03e      	b.n	8013a62 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139e4:	4b30      	ldr	r3, [pc, #192]	; (8013aa8 <xTaskIncrementTick+0x150>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	68db      	ldr	r3, [r3, #12]
 80139ea:	68db      	ldr	r3, [r3, #12]
 80139ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	685b      	ldr	r3, [r3, #4]
 80139f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80139f4:	693a      	ldr	r2, [r7, #16]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d203      	bcs.n	8013a04 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80139fc:	4a2d      	ldr	r2, [pc, #180]	; (8013ab4 <xTaskIncrementTick+0x15c>)
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013a02:	e02e      	b.n	8013a62 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	3304      	adds	r3, #4
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f7fe fb32 	bl	8012072 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d004      	beq.n	8013a20 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	3318      	adds	r3, #24
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7fe fb29 	bl	8012072 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a24:	2201      	movs	r2, #1
 8013a26:	409a      	lsls	r2, r3
 8013a28:	4b23      	ldr	r3, [pc, #140]	; (8013ab8 <xTaskIncrementTick+0x160>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	4313      	orrs	r3, r2
 8013a2e:	4a22      	ldr	r2, [pc, #136]	; (8013ab8 <xTaskIncrementTick+0x160>)
 8013a30:	6013      	str	r3, [r2, #0]
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a36:	4613      	mov	r3, r2
 8013a38:	009b      	lsls	r3, r3, #2
 8013a3a:	4413      	add	r3, r2
 8013a3c:	009b      	lsls	r3, r3, #2
 8013a3e:	4a1f      	ldr	r2, [pc, #124]	; (8013abc <xTaskIncrementTick+0x164>)
 8013a40:	441a      	add	r2, r3
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	3304      	adds	r3, #4
 8013a46:	4619      	mov	r1, r3
 8013a48:	4610      	mov	r0, r2
 8013a4a:	f7fe fab5 	bl	8011fb8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a52:	4b1b      	ldr	r3, [pc, #108]	; (8013ac0 <xTaskIncrementTick+0x168>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	d3b9      	bcc.n	80139d0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8013a5c:	2301      	movs	r3, #1
 8013a5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013a60:	e7b6      	b.n	80139d0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013a62:	4b17      	ldr	r3, [pc, #92]	; (8013ac0 <xTaskIncrementTick+0x168>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a68:	4914      	ldr	r1, [pc, #80]	; (8013abc <xTaskIncrementTick+0x164>)
 8013a6a:	4613      	mov	r3, r2
 8013a6c:	009b      	lsls	r3, r3, #2
 8013a6e:	4413      	add	r3, r2
 8013a70:	009b      	lsls	r3, r3, #2
 8013a72:	440b      	add	r3, r1
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	2b01      	cmp	r3, #1
 8013a78:	d907      	bls.n	8013a8a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	617b      	str	r3, [r7, #20]
 8013a7e:	e004      	b.n	8013a8a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013a80:	4b10      	ldr	r3, [pc, #64]	; (8013ac4 <xTaskIncrementTick+0x16c>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	3301      	adds	r3, #1
 8013a86:	4a0f      	ldr	r2, [pc, #60]	; (8013ac4 <xTaskIncrementTick+0x16c>)
 8013a88:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013a8a:	4b0f      	ldr	r3, [pc, #60]	; (8013ac8 <xTaskIncrementTick+0x170>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d001      	beq.n	8013a96 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8013a92:	2301      	movs	r3, #1
 8013a94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013a96:	697b      	ldr	r3, [r7, #20]
}
 8013a98:	4618      	mov	r0, r3
 8013a9a:	3718      	adds	r7, #24
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}
 8013aa0:	2000667c 	.word	0x2000667c
 8013aa4:	20006658 	.word	0x20006658
 8013aa8:	2000660c 	.word	0x2000660c
 8013aac:	20006610 	.word	0x20006610
 8013ab0:	2000666c 	.word	0x2000666c
 8013ab4:	20006674 	.word	0x20006674
 8013ab8:	2000665c 	.word	0x2000665c
 8013abc:	20006558 	.word	0x20006558
 8013ac0:	20006554 	.word	0x20006554
 8013ac4:	20006664 	.word	0x20006664
 8013ac8:	20006668 	.word	0x20006668

08013acc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013acc:	b480      	push	{r7}
 8013ace:	b087      	sub	sp, #28
 8013ad0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013ad2:	4b2a      	ldr	r3, [pc, #168]	; (8013b7c <vTaskSwitchContext+0xb0>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d003      	beq.n	8013ae2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013ada:	4b29      	ldr	r3, [pc, #164]	; (8013b80 <vTaskSwitchContext+0xb4>)
 8013adc:	2201      	movs	r2, #1
 8013ade:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013ae0:	e046      	b.n	8013b70 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8013ae2:	4b27      	ldr	r3, [pc, #156]	; (8013b80 <vTaskSwitchContext+0xb4>)
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ae8:	4b26      	ldr	r3, [pc, #152]	; (8013b84 <vTaskSwitchContext+0xb8>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	fab3 f383 	clz	r3, r3
 8013af4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013af6:	7afb      	ldrb	r3, [r7, #11]
 8013af8:	f1c3 031f 	rsb	r3, r3, #31
 8013afc:	617b      	str	r3, [r7, #20]
 8013afe:	4922      	ldr	r1, [pc, #136]	; (8013b88 <vTaskSwitchContext+0xbc>)
 8013b00:	697a      	ldr	r2, [r7, #20]
 8013b02:	4613      	mov	r3, r2
 8013b04:	009b      	lsls	r3, r3, #2
 8013b06:	4413      	add	r3, r2
 8013b08:	009b      	lsls	r3, r3, #2
 8013b0a:	440b      	add	r3, r1
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d10c      	bne.n	8013b2c <vTaskSwitchContext+0x60>
	__asm volatile
 8013b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b16:	b672      	cpsid	i
 8013b18:	f383 8811 	msr	BASEPRI, r3
 8013b1c:	f3bf 8f6f 	isb	sy
 8013b20:	f3bf 8f4f 	dsb	sy
 8013b24:	b662      	cpsie	i
 8013b26:	607b      	str	r3, [r7, #4]
}
 8013b28:	bf00      	nop
 8013b2a:	e7fe      	b.n	8013b2a <vTaskSwitchContext+0x5e>
 8013b2c:	697a      	ldr	r2, [r7, #20]
 8013b2e:	4613      	mov	r3, r2
 8013b30:	009b      	lsls	r3, r3, #2
 8013b32:	4413      	add	r3, r2
 8013b34:	009b      	lsls	r3, r3, #2
 8013b36:	4a14      	ldr	r2, [pc, #80]	; (8013b88 <vTaskSwitchContext+0xbc>)
 8013b38:	4413      	add	r3, r2
 8013b3a:	613b      	str	r3, [r7, #16]
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	685b      	ldr	r3, [r3, #4]
 8013b40:	685a      	ldr	r2, [r3, #4]
 8013b42:	693b      	ldr	r3, [r7, #16]
 8013b44:	605a      	str	r2, [r3, #4]
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	685a      	ldr	r2, [r3, #4]
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	3308      	adds	r3, #8
 8013b4e:	429a      	cmp	r2, r3
 8013b50:	d104      	bne.n	8013b5c <vTaskSwitchContext+0x90>
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	685b      	ldr	r3, [r3, #4]
 8013b56:	685a      	ldr	r2, [r3, #4]
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	605a      	str	r2, [r3, #4]
 8013b5c:	693b      	ldr	r3, [r7, #16]
 8013b5e:	685b      	ldr	r3, [r3, #4]
 8013b60:	68db      	ldr	r3, [r3, #12]
 8013b62:	4a0a      	ldr	r2, [pc, #40]	; (8013b8c <vTaskSwitchContext+0xc0>)
 8013b64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013b66:	4b09      	ldr	r3, [pc, #36]	; (8013b8c <vTaskSwitchContext+0xc0>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	334c      	adds	r3, #76	; 0x4c
 8013b6c:	4a08      	ldr	r2, [pc, #32]	; (8013b90 <vTaskSwitchContext+0xc4>)
 8013b6e:	6013      	str	r3, [r2, #0]
}
 8013b70:	bf00      	nop
 8013b72:	371c      	adds	r7, #28
 8013b74:	46bd      	mov	sp, r7
 8013b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7a:	4770      	bx	lr
 8013b7c:	2000667c 	.word	0x2000667c
 8013b80:	20006668 	.word	0x20006668
 8013b84:	2000665c 	.word	0x2000665c
 8013b88:	20006558 	.word	0x20006558
 8013b8c:	20006554 	.word	0x20006554
 8013b90:	20000040 	.word	0x20000040

08013b94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b084      	sub	sp, #16
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
 8013b9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d10c      	bne.n	8013bbe <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8013ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba8:	b672      	cpsid	i
 8013baa:	f383 8811 	msr	BASEPRI, r3
 8013bae:	f3bf 8f6f 	isb	sy
 8013bb2:	f3bf 8f4f 	dsb	sy
 8013bb6:	b662      	cpsie	i
 8013bb8:	60fb      	str	r3, [r7, #12]
}
 8013bba:	bf00      	nop
 8013bbc:	e7fe      	b.n	8013bbc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013bbe:	4b07      	ldr	r3, [pc, #28]	; (8013bdc <vTaskPlaceOnEventList+0x48>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	3318      	adds	r3, #24
 8013bc4:	4619      	mov	r1, r3
 8013bc6:	6878      	ldr	r0, [r7, #4]
 8013bc8:	f7fe fa1a 	bl	8012000 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013bcc:	2101      	movs	r1, #1
 8013bce:	6838      	ldr	r0, [r7, #0]
 8013bd0:	f000 fba8 	bl	8014324 <prvAddCurrentTaskToDelayedList>
}
 8013bd4:	bf00      	nop
 8013bd6:	3710      	adds	r7, #16
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}
 8013bdc:	20006554 	.word	0x20006554

08013be0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b086      	sub	sp, #24
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	68db      	ldr	r3, [r3, #12]
 8013bec:	68db      	ldr	r3, [r3, #12]
 8013bee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d10c      	bne.n	8013c10 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8013bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bfa:	b672      	cpsid	i
 8013bfc:	f383 8811 	msr	BASEPRI, r3
 8013c00:	f3bf 8f6f 	isb	sy
 8013c04:	f3bf 8f4f 	dsb	sy
 8013c08:	b662      	cpsie	i
 8013c0a:	60fb      	str	r3, [r7, #12]
}
 8013c0c:	bf00      	nop
 8013c0e:	e7fe      	b.n	8013c0e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	3318      	adds	r3, #24
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7fe fa2c 	bl	8012072 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c1a:	4b1d      	ldr	r3, [pc, #116]	; (8013c90 <xTaskRemoveFromEventList+0xb0>)
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d11c      	bne.n	8013c5c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013c22:	693b      	ldr	r3, [r7, #16]
 8013c24:	3304      	adds	r3, #4
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7fe fa23 	bl	8012072 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c30:	2201      	movs	r2, #1
 8013c32:	409a      	lsls	r2, r3
 8013c34:	4b17      	ldr	r3, [pc, #92]	; (8013c94 <xTaskRemoveFromEventList+0xb4>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	4313      	orrs	r3, r2
 8013c3a:	4a16      	ldr	r2, [pc, #88]	; (8013c94 <xTaskRemoveFromEventList+0xb4>)
 8013c3c:	6013      	str	r3, [r2, #0]
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c42:	4613      	mov	r3, r2
 8013c44:	009b      	lsls	r3, r3, #2
 8013c46:	4413      	add	r3, r2
 8013c48:	009b      	lsls	r3, r3, #2
 8013c4a:	4a13      	ldr	r2, [pc, #76]	; (8013c98 <xTaskRemoveFromEventList+0xb8>)
 8013c4c:	441a      	add	r2, r3
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	3304      	adds	r3, #4
 8013c52:	4619      	mov	r1, r3
 8013c54:	4610      	mov	r0, r2
 8013c56:	f7fe f9af 	bl	8011fb8 <vListInsertEnd>
 8013c5a:	e005      	b.n	8013c68 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	3318      	adds	r3, #24
 8013c60:	4619      	mov	r1, r3
 8013c62:	480e      	ldr	r0, [pc, #56]	; (8013c9c <xTaskRemoveFromEventList+0xbc>)
 8013c64:	f7fe f9a8 	bl	8011fb8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c6c:	4b0c      	ldr	r3, [pc, #48]	; (8013ca0 <xTaskRemoveFromEventList+0xc0>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c72:	429a      	cmp	r2, r3
 8013c74:	d905      	bls.n	8013c82 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013c76:	2301      	movs	r3, #1
 8013c78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013c7a:	4b0a      	ldr	r3, [pc, #40]	; (8013ca4 <xTaskRemoveFromEventList+0xc4>)
 8013c7c:	2201      	movs	r2, #1
 8013c7e:	601a      	str	r2, [r3, #0]
 8013c80:	e001      	b.n	8013c86 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8013c82:	2300      	movs	r3, #0
 8013c84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013c86:	697b      	ldr	r3, [r7, #20]
}
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3718      	adds	r7, #24
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}
 8013c90:	2000667c 	.word	0x2000667c
 8013c94:	2000665c 	.word	0x2000665c
 8013c98:	20006558 	.word	0x20006558
 8013c9c:	20006614 	.word	0x20006614
 8013ca0:	20006554 	.word	0x20006554
 8013ca4:	20006668 	.word	0x20006668

08013ca8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013ca8:	b480      	push	{r7}
 8013caa:	b083      	sub	sp, #12
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013cb0:	4b06      	ldr	r3, [pc, #24]	; (8013ccc <vTaskInternalSetTimeOutState+0x24>)
 8013cb2:	681a      	ldr	r2, [r3, #0]
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013cb8:	4b05      	ldr	r3, [pc, #20]	; (8013cd0 <vTaskInternalSetTimeOutState+0x28>)
 8013cba:	681a      	ldr	r2, [r3, #0]
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	605a      	str	r2, [r3, #4]
}
 8013cc0:	bf00      	nop
 8013cc2:	370c      	adds	r7, #12
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr
 8013ccc:	2000666c 	.word	0x2000666c
 8013cd0:	20006658 	.word	0x20006658

08013cd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b088      	sub	sp, #32
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
 8013cdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d10c      	bne.n	8013cfe <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8013ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce8:	b672      	cpsid	i
 8013cea:	f383 8811 	msr	BASEPRI, r3
 8013cee:	f3bf 8f6f 	isb	sy
 8013cf2:	f3bf 8f4f 	dsb	sy
 8013cf6:	b662      	cpsie	i
 8013cf8:	613b      	str	r3, [r7, #16]
}
 8013cfa:	bf00      	nop
 8013cfc:	e7fe      	b.n	8013cfc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8013cfe:	683b      	ldr	r3, [r7, #0]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d10c      	bne.n	8013d1e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8013d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d08:	b672      	cpsid	i
 8013d0a:	f383 8811 	msr	BASEPRI, r3
 8013d0e:	f3bf 8f6f 	isb	sy
 8013d12:	f3bf 8f4f 	dsb	sy
 8013d16:	b662      	cpsie	i
 8013d18:	60fb      	str	r3, [r7, #12]
}
 8013d1a:	bf00      	nop
 8013d1c:	e7fe      	b.n	8013d1c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8013d1e:	f000 fc75 	bl	801460c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013d22:	4b1d      	ldr	r3, [pc, #116]	; (8013d98 <xTaskCheckForTimeOut+0xc4>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	685b      	ldr	r3, [r3, #4]
 8013d2c:	69ba      	ldr	r2, [r7, #24]
 8013d2e:	1ad3      	subs	r3, r2, r3
 8013d30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d3a:	d102      	bne.n	8013d42 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	61fb      	str	r3, [r7, #28]
 8013d40:	e023      	b.n	8013d8a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	681a      	ldr	r2, [r3, #0]
 8013d46:	4b15      	ldr	r3, [pc, #84]	; (8013d9c <xTaskCheckForTimeOut+0xc8>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d007      	beq.n	8013d5e <xTaskCheckForTimeOut+0x8a>
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	685b      	ldr	r3, [r3, #4]
 8013d52:	69ba      	ldr	r2, [r7, #24]
 8013d54:	429a      	cmp	r2, r3
 8013d56:	d302      	bcc.n	8013d5e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013d58:	2301      	movs	r3, #1
 8013d5a:	61fb      	str	r3, [r7, #28]
 8013d5c:	e015      	b.n	8013d8a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	697a      	ldr	r2, [r7, #20]
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d20b      	bcs.n	8013d80 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	1ad2      	subs	r2, r2, r3
 8013d70:	683b      	ldr	r3, [r7, #0]
 8013d72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013d74:	6878      	ldr	r0, [r7, #4]
 8013d76:	f7ff ff97 	bl	8013ca8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	61fb      	str	r3, [r7, #28]
 8013d7e:	e004      	b.n	8013d8a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8013d80:	683b      	ldr	r3, [r7, #0]
 8013d82:	2200      	movs	r2, #0
 8013d84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013d86:	2301      	movs	r3, #1
 8013d88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013d8a:	f000 fc73 	bl	8014674 <vPortExitCritical>

	return xReturn;
 8013d8e:	69fb      	ldr	r3, [r7, #28]
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	3720      	adds	r7, #32
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}
 8013d98:	20006658 	.word	0x20006658
 8013d9c:	2000666c 	.word	0x2000666c

08013da0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013da0:	b480      	push	{r7}
 8013da2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013da4:	4b03      	ldr	r3, [pc, #12]	; (8013db4 <vTaskMissedYield+0x14>)
 8013da6:	2201      	movs	r2, #1
 8013da8:	601a      	str	r2, [r3, #0]
}
 8013daa:	bf00      	nop
 8013dac:	46bd      	mov	sp, r7
 8013dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db2:	4770      	bx	lr
 8013db4:	20006668 	.word	0x20006668

08013db8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013dc0:	f000 f852 	bl	8013e68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013dc4:	4b06      	ldr	r3, [pc, #24]	; (8013de0 <prvIdleTask+0x28>)
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	2b01      	cmp	r3, #1
 8013dca:	d9f9      	bls.n	8013dc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013dcc:	4b05      	ldr	r3, [pc, #20]	; (8013de4 <prvIdleTask+0x2c>)
 8013dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dd2:	601a      	str	r2, [r3, #0]
 8013dd4:	f3bf 8f4f 	dsb	sy
 8013dd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013ddc:	e7f0      	b.n	8013dc0 <prvIdleTask+0x8>
 8013dde:	bf00      	nop
 8013de0:	20006558 	.word	0x20006558
 8013de4:	e000ed04 	.word	0xe000ed04

08013de8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013dee:	2300      	movs	r3, #0
 8013df0:	607b      	str	r3, [r7, #4]
 8013df2:	e00c      	b.n	8013e0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013df4:	687a      	ldr	r2, [r7, #4]
 8013df6:	4613      	mov	r3, r2
 8013df8:	009b      	lsls	r3, r3, #2
 8013dfa:	4413      	add	r3, r2
 8013dfc:	009b      	lsls	r3, r3, #2
 8013dfe:	4a12      	ldr	r2, [pc, #72]	; (8013e48 <prvInitialiseTaskLists+0x60>)
 8013e00:	4413      	add	r3, r2
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7fe f8ab 	bl	8011f5e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	607b      	str	r3, [r7, #4]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	2b06      	cmp	r3, #6
 8013e12:	d9ef      	bls.n	8013df4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013e14:	480d      	ldr	r0, [pc, #52]	; (8013e4c <prvInitialiseTaskLists+0x64>)
 8013e16:	f7fe f8a2 	bl	8011f5e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013e1a:	480d      	ldr	r0, [pc, #52]	; (8013e50 <prvInitialiseTaskLists+0x68>)
 8013e1c:	f7fe f89f 	bl	8011f5e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013e20:	480c      	ldr	r0, [pc, #48]	; (8013e54 <prvInitialiseTaskLists+0x6c>)
 8013e22:	f7fe f89c 	bl	8011f5e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013e26:	480c      	ldr	r0, [pc, #48]	; (8013e58 <prvInitialiseTaskLists+0x70>)
 8013e28:	f7fe f899 	bl	8011f5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013e2c:	480b      	ldr	r0, [pc, #44]	; (8013e5c <prvInitialiseTaskLists+0x74>)
 8013e2e:	f7fe f896 	bl	8011f5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013e32:	4b0b      	ldr	r3, [pc, #44]	; (8013e60 <prvInitialiseTaskLists+0x78>)
 8013e34:	4a05      	ldr	r2, [pc, #20]	; (8013e4c <prvInitialiseTaskLists+0x64>)
 8013e36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013e38:	4b0a      	ldr	r3, [pc, #40]	; (8013e64 <prvInitialiseTaskLists+0x7c>)
 8013e3a:	4a05      	ldr	r2, [pc, #20]	; (8013e50 <prvInitialiseTaskLists+0x68>)
 8013e3c:	601a      	str	r2, [r3, #0]
}
 8013e3e:	bf00      	nop
 8013e40:	3708      	adds	r7, #8
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}
 8013e46:	bf00      	nop
 8013e48:	20006558 	.word	0x20006558
 8013e4c:	200065e4 	.word	0x200065e4
 8013e50:	200065f8 	.word	0x200065f8
 8013e54:	20006614 	.word	0x20006614
 8013e58:	20006628 	.word	0x20006628
 8013e5c:	20006640 	.word	0x20006640
 8013e60:	2000660c 	.word	0x2000660c
 8013e64:	20006610 	.word	0x20006610

08013e68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b082      	sub	sp, #8
 8013e6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e6e:	e019      	b.n	8013ea4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013e70:	f000 fbcc 	bl	801460c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e74:	4b10      	ldr	r3, [pc, #64]	; (8013eb8 <prvCheckTasksWaitingTermination+0x50>)
 8013e76:	68db      	ldr	r3, [r3, #12]
 8013e78:	68db      	ldr	r3, [r3, #12]
 8013e7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	3304      	adds	r3, #4
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7fe f8f6 	bl	8012072 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013e86:	4b0d      	ldr	r3, [pc, #52]	; (8013ebc <prvCheckTasksWaitingTermination+0x54>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	3b01      	subs	r3, #1
 8013e8c:	4a0b      	ldr	r2, [pc, #44]	; (8013ebc <prvCheckTasksWaitingTermination+0x54>)
 8013e8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013e90:	4b0b      	ldr	r3, [pc, #44]	; (8013ec0 <prvCheckTasksWaitingTermination+0x58>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	3b01      	subs	r3, #1
 8013e96:	4a0a      	ldr	r2, [pc, #40]	; (8013ec0 <prvCheckTasksWaitingTermination+0x58>)
 8013e98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013e9a:	f000 fbeb 	bl	8014674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f000 f810 	bl	8013ec4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013ea4:	4b06      	ldr	r3, [pc, #24]	; (8013ec0 <prvCheckTasksWaitingTermination+0x58>)
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d1e1      	bne.n	8013e70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013eac:	bf00      	nop
 8013eae:	bf00      	nop
 8013eb0:	3708      	adds	r7, #8
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	20006628 	.word	0x20006628
 8013ebc:	20006654 	.word	0x20006654
 8013ec0:	2000663c 	.word	0x2000663c

08013ec4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b084      	sub	sp, #16
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	334c      	adds	r3, #76	; 0x4c
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f010 f879 	bl	8023fc8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d108      	bne.n	8013ef2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7ed fa8c 	bl	8001402 <vPortFree>
				vPortFree( pxTCB );
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	f7ed fa89 	bl	8001402 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013ef0:	e01a      	b.n	8013f28 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013ef8:	2b01      	cmp	r3, #1
 8013efa:	d103      	bne.n	8013f04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	f7ed fa80 	bl	8001402 <vPortFree>
	}
 8013f02:	e011      	b.n	8013f28 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013f0a:	2b02      	cmp	r3, #2
 8013f0c:	d00c      	beq.n	8013f28 <prvDeleteTCB+0x64>
	__asm volatile
 8013f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f12:	b672      	cpsid	i
 8013f14:	f383 8811 	msr	BASEPRI, r3
 8013f18:	f3bf 8f6f 	isb	sy
 8013f1c:	f3bf 8f4f 	dsb	sy
 8013f20:	b662      	cpsie	i
 8013f22:	60fb      	str	r3, [r7, #12]
}
 8013f24:	bf00      	nop
 8013f26:	e7fe      	b.n	8013f26 <prvDeleteTCB+0x62>
	}
 8013f28:	bf00      	nop
 8013f2a:	3710      	adds	r7, #16
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013f30:	b480      	push	{r7}
 8013f32:	b083      	sub	sp, #12
 8013f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f36:	4b0c      	ldr	r3, [pc, #48]	; (8013f68 <prvResetNextTaskUnblockTime+0x38>)
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d104      	bne.n	8013f4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013f40:	4b0a      	ldr	r3, [pc, #40]	; (8013f6c <prvResetNextTaskUnblockTime+0x3c>)
 8013f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013f46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013f48:	e008      	b.n	8013f5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f4a:	4b07      	ldr	r3, [pc, #28]	; (8013f68 <prvResetNextTaskUnblockTime+0x38>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	68db      	ldr	r3, [r3, #12]
 8013f50:	68db      	ldr	r3, [r3, #12]
 8013f52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	685b      	ldr	r3, [r3, #4]
 8013f58:	4a04      	ldr	r2, [pc, #16]	; (8013f6c <prvResetNextTaskUnblockTime+0x3c>)
 8013f5a:	6013      	str	r3, [r2, #0]
}
 8013f5c:	bf00      	nop
 8013f5e:	370c      	adds	r7, #12
 8013f60:	46bd      	mov	sp, r7
 8013f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f66:	4770      	bx	lr
 8013f68:	2000660c 	.word	0x2000660c
 8013f6c:	20006674 	.word	0x20006674

08013f70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013f70:	b480      	push	{r7}
 8013f72:	b083      	sub	sp, #12
 8013f74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013f76:	4b0b      	ldr	r3, [pc, #44]	; (8013fa4 <xTaskGetSchedulerState+0x34>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d102      	bne.n	8013f84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013f7e:	2301      	movs	r3, #1
 8013f80:	607b      	str	r3, [r7, #4]
 8013f82:	e008      	b.n	8013f96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f84:	4b08      	ldr	r3, [pc, #32]	; (8013fa8 <xTaskGetSchedulerState+0x38>)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d102      	bne.n	8013f92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013f8c:	2302      	movs	r3, #2
 8013f8e:	607b      	str	r3, [r7, #4]
 8013f90:	e001      	b.n	8013f96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013f92:	2300      	movs	r3, #0
 8013f94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013f96:	687b      	ldr	r3, [r7, #4]
	}
 8013f98:	4618      	mov	r0, r3
 8013f9a:	370c      	adds	r7, #12
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa2:	4770      	bx	lr
 8013fa4:	20006660 	.word	0x20006660
 8013fa8:	2000667c 	.word	0x2000667c

08013fac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b084      	sub	sp, #16
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013fb8:	2300      	movs	r3, #0
 8013fba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d069      	beq.n	8014096 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013fc2:	68bb      	ldr	r3, [r7, #8]
 8013fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fc6:	4b36      	ldr	r3, [pc, #216]	; (80140a0 <xTaskPriorityInherit+0xf4>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d259      	bcs.n	8014084 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	699b      	ldr	r3, [r3, #24]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	db06      	blt.n	8013fe6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013fd8:	4b31      	ldr	r3, [pc, #196]	; (80140a0 <xTaskPriorityInherit+0xf4>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fde:	f1c3 0207 	rsb	r2, r3, #7
 8013fe2:	68bb      	ldr	r3, [r7, #8]
 8013fe4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013fe6:	68bb      	ldr	r3, [r7, #8]
 8013fe8:	6959      	ldr	r1, [r3, #20]
 8013fea:	68bb      	ldr	r3, [r7, #8]
 8013fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fee:	4613      	mov	r3, r2
 8013ff0:	009b      	lsls	r3, r3, #2
 8013ff2:	4413      	add	r3, r2
 8013ff4:	009b      	lsls	r3, r3, #2
 8013ff6:	4a2b      	ldr	r2, [pc, #172]	; (80140a4 <xTaskPriorityInherit+0xf8>)
 8013ff8:	4413      	add	r3, r2
 8013ffa:	4299      	cmp	r1, r3
 8013ffc:	d13a      	bne.n	8014074 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	3304      	adds	r3, #4
 8014002:	4618      	mov	r0, r3
 8014004:	f7fe f835 	bl	8012072 <uxListRemove>
 8014008:	4603      	mov	r3, r0
 801400a:	2b00      	cmp	r3, #0
 801400c:	d115      	bne.n	801403a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014012:	4924      	ldr	r1, [pc, #144]	; (80140a4 <xTaskPriorityInherit+0xf8>)
 8014014:	4613      	mov	r3, r2
 8014016:	009b      	lsls	r3, r3, #2
 8014018:	4413      	add	r3, r2
 801401a:	009b      	lsls	r3, r3, #2
 801401c:	440b      	add	r3, r1
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d10a      	bne.n	801403a <xTaskPriorityInherit+0x8e>
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014028:	2201      	movs	r2, #1
 801402a:	fa02 f303 	lsl.w	r3, r2, r3
 801402e:	43da      	mvns	r2, r3
 8014030:	4b1d      	ldr	r3, [pc, #116]	; (80140a8 <xTaskPriorityInherit+0xfc>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	4013      	ands	r3, r2
 8014036:	4a1c      	ldr	r2, [pc, #112]	; (80140a8 <xTaskPriorityInherit+0xfc>)
 8014038:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801403a:	4b19      	ldr	r3, [pc, #100]	; (80140a0 <xTaskPriorityInherit+0xf4>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014040:	68bb      	ldr	r3, [r7, #8]
 8014042:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014048:	2201      	movs	r2, #1
 801404a:	409a      	lsls	r2, r3
 801404c:	4b16      	ldr	r3, [pc, #88]	; (80140a8 <xTaskPriorityInherit+0xfc>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	4313      	orrs	r3, r2
 8014052:	4a15      	ldr	r2, [pc, #84]	; (80140a8 <xTaskPriorityInherit+0xfc>)
 8014054:	6013      	str	r3, [r2, #0]
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801405a:	4613      	mov	r3, r2
 801405c:	009b      	lsls	r3, r3, #2
 801405e:	4413      	add	r3, r2
 8014060:	009b      	lsls	r3, r3, #2
 8014062:	4a10      	ldr	r2, [pc, #64]	; (80140a4 <xTaskPriorityInherit+0xf8>)
 8014064:	441a      	add	r2, r3
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	3304      	adds	r3, #4
 801406a:	4619      	mov	r1, r3
 801406c:	4610      	mov	r0, r2
 801406e:	f7fd ffa3 	bl	8011fb8 <vListInsertEnd>
 8014072:	e004      	b.n	801407e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014074:	4b0a      	ldr	r3, [pc, #40]	; (80140a0 <xTaskPriorityInherit+0xf4>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801407e:	2301      	movs	r3, #1
 8014080:	60fb      	str	r3, [r7, #12]
 8014082:	e008      	b.n	8014096 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014084:	68bb      	ldr	r3, [r7, #8]
 8014086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014088:	4b05      	ldr	r3, [pc, #20]	; (80140a0 <xTaskPriorityInherit+0xf4>)
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801408e:	429a      	cmp	r2, r3
 8014090:	d201      	bcs.n	8014096 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014092:	2301      	movs	r3, #1
 8014094:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014096:	68fb      	ldr	r3, [r7, #12]
	}
 8014098:	4618      	mov	r0, r3
 801409a:	3710      	adds	r7, #16
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}
 80140a0:	20006554 	.word	0x20006554
 80140a4:	20006558 	.word	0x20006558
 80140a8:	2000665c 	.word	0x2000665c

080140ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b086      	sub	sp, #24
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80140b8:	2300      	movs	r3, #0
 80140ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d072      	beq.n	80141a8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80140c2:	4b3c      	ldr	r3, [pc, #240]	; (80141b4 <xTaskPriorityDisinherit+0x108>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	693a      	ldr	r2, [r7, #16]
 80140c8:	429a      	cmp	r2, r3
 80140ca:	d00c      	beq.n	80140e6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80140cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d0:	b672      	cpsid	i
 80140d2:	f383 8811 	msr	BASEPRI, r3
 80140d6:	f3bf 8f6f 	isb	sy
 80140da:	f3bf 8f4f 	dsb	sy
 80140de:	b662      	cpsie	i
 80140e0:	60fb      	str	r3, [r7, #12]
}
 80140e2:	bf00      	nop
 80140e4:	e7fe      	b.n	80140e4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d10c      	bne.n	8014108 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80140ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140f2:	b672      	cpsid	i
 80140f4:	f383 8811 	msr	BASEPRI, r3
 80140f8:	f3bf 8f6f 	isb	sy
 80140fc:	f3bf 8f4f 	dsb	sy
 8014100:	b662      	cpsie	i
 8014102:	60bb      	str	r3, [r7, #8]
}
 8014104:	bf00      	nop
 8014106:	e7fe      	b.n	8014106 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8014108:	693b      	ldr	r3, [r7, #16]
 801410a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801410c:	1e5a      	subs	r2, r3, #1
 801410e:	693b      	ldr	r3, [r7, #16]
 8014110:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014116:	693b      	ldr	r3, [r7, #16]
 8014118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801411a:	429a      	cmp	r2, r3
 801411c:	d044      	beq.n	80141a8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801411e:	693b      	ldr	r3, [r7, #16]
 8014120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014122:	2b00      	cmp	r3, #0
 8014124:	d140      	bne.n	80141a8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014126:	693b      	ldr	r3, [r7, #16]
 8014128:	3304      	adds	r3, #4
 801412a:	4618      	mov	r0, r3
 801412c:	f7fd ffa1 	bl	8012072 <uxListRemove>
 8014130:	4603      	mov	r3, r0
 8014132:	2b00      	cmp	r3, #0
 8014134:	d115      	bne.n	8014162 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014136:	693b      	ldr	r3, [r7, #16]
 8014138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801413a:	491f      	ldr	r1, [pc, #124]	; (80141b8 <xTaskPriorityDisinherit+0x10c>)
 801413c:	4613      	mov	r3, r2
 801413e:	009b      	lsls	r3, r3, #2
 8014140:	4413      	add	r3, r2
 8014142:	009b      	lsls	r3, r3, #2
 8014144:	440b      	add	r3, r1
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d10a      	bne.n	8014162 <xTaskPriorityDisinherit+0xb6>
 801414c:	693b      	ldr	r3, [r7, #16]
 801414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014150:	2201      	movs	r2, #1
 8014152:	fa02 f303 	lsl.w	r3, r2, r3
 8014156:	43da      	mvns	r2, r3
 8014158:	4b18      	ldr	r3, [pc, #96]	; (80141bc <xTaskPriorityDisinherit+0x110>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	4013      	ands	r3, r2
 801415e:	4a17      	ldr	r2, [pc, #92]	; (80141bc <xTaskPriorityDisinherit+0x110>)
 8014160:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014162:	693b      	ldr	r3, [r7, #16]
 8014164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014166:	693b      	ldr	r3, [r7, #16]
 8014168:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801416a:	693b      	ldr	r3, [r7, #16]
 801416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801416e:	f1c3 0207 	rsb	r2, r3, #7
 8014172:	693b      	ldr	r3, [r7, #16]
 8014174:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014176:	693b      	ldr	r3, [r7, #16]
 8014178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801417a:	2201      	movs	r2, #1
 801417c:	409a      	lsls	r2, r3
 801417e:	4b0f      	ldr	r3, [pc, #60]	; (80141bc <xTaskPriorityDisinherit+0x110>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	4313      	orrs	r3, r2
 8014184:	4a0d      	ldr	r2, [pc, #52]	; (80141bc <xTaskPriorityDisinherit+0x110>)
 8014186:	6013      	str	r3, [r2, #0]
 8014188:	693b      	ldr	r3, [r7, #16]
 801418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801418c:	4613      	mov	r3, r2
 801418e:	009b      	lsls	r3, r3, #2
 8014190:	4413      	add	r3, r2
 8014192:	009b      	lsls	r3, r3, #2
 8014194:	4a08      	ldr	r2, [pc, #32]	; (80141b8 <xTaskPriorityDisinherit+0x10c>)
 8014196:	441a      	add	r2, r3
 8014198:	693b      	ldr	r3, [r7, #16]
 801419a:	3304      	adds	r3, #4
 801419c:	4619      	mov	r1, r3
 801419e:	4610      	mov	r0, r2
 80141a0:	f7fd ff0a 	bl	8011fb8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80141a4:	2301      	movs	r3, #1
 80141a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80141a8:	697b      	ldr	r3, [r7, #20]
	}
 80141aa:	4618      	mov	r0, r3
 80141ac:	3718      	adds	r7, #24
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}
 80141b2:	bf00      	nop
 80141b4:	20006554 	.word	0x20006554
 80141b8:	20006558 	.word	0x20006558
 80141bc:	2000665c 	.word	0x2000665c

080141c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b088      	sub	sp, #32
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80141ce:	2301      	movs	r3, #1
 80141d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	f000 8087 	beq.w	80142e8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80141da:	69bb      	ldr	r3, [r7, #24]
 80141dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d10c      	bne.n	80141fc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80141e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e6:	b672      	cpsid	i
 80141e8:	f383 8811 	msr	BASEPRI, r3
 80141ec:	f3bf 8f6f 	isb	sy
 80141f0:	f3bf 8f4f 	dsb	sy
 80141f4:	b662      	cpsie	i
 80141f6:	60fb      	str	r3, [r7, #12]
}
 80141f8:	bf00      	nop
 80141fa:	e7fe      	b.n	80141fa <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80141fc:	69bb      	ldr	r3, [r7, #24]
 80141fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014200:	683a      	ldr	r2, [r7, #0]
 8014202:	429a      	cmp	r2, r3
 8014204:	d902      	bls.n	801420c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	61fb      	str	r3, [r7, #28]
 801420a:	e002      	b.n	8014212 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801420c:	69bb      	ldr	r3, [r7, #24]
 801420e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014210:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014212:	69bb      	ldr	r3, [r7, #24]
 8014214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014216:	69fa      	ldr	r2, [r7, #28]
 8014218:	429a      	cmp	r2, r3
 801421a:	d065      	beq.n	80142e8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801421c:	69bb      	ldr	r3, [r7, #24]
 801421e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014220:	697a      	ldr	r2, [r7, #20]
 8014222:	429a      	cmp	r2, r3
 8014224:	d160      	bne.n	80142e8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014226:	4b32      	ldr	r3, [pc, #200]	; (80142f0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	69ba      	ldr	r2, [r7, #24]
 801422c:	429a      	cmp	r2, r3
 801422e:	d10c      	bne.n	801424a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8014230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014234:	b672      	cpsid	i
 8014236:	f383 8811 	msr	BASEPRI, r3
 801423a:	f3bf 8f6f 	isb	sy
 801423e:	f3bf 8f4f 	dsb	sy
 8014242:	b662      	cpsie	i
 8014244:	60bb      	str	r3, [r7, #8]
}
 8014246:	bf00      	nop
 8014248:	e7fe      	b.n	8014248 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801424a:	69bb      	ldr	r3, [r7, #24]
 801424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801424e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014250:	69bb      	ldr	r3, [r7, #24]
 8014252:	69fa      	ldr	r2, [r7, #28]
 8014254:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014256:	69bb      	ldr	r3, [r7, #24]
 8014258:	699b      	ldr	r3, [r3, #24]
 801425a:	2b00      	cmp	r3, #0
 801425c:	db04      	blt.n	8014268 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801425e:	69fb      	ldr	r3, [r7, #28]
 8014260:	f1c3 0207 	rsb	r2, r3, #7
 8014264:	69bb      	ldr	r3, [r7, #24]
 8014266:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014268:	69bb      	ldr	r3, [r7, #24]
 801426a:	6959      	ldr	r1, [r3, #20]
 801426c:	693a      	ldr	r2, [r7, #16]
 801426e:	4613      	mov	r3, r2
 8014270:	009b      	lsls	r3, r3, #2
 8014272:	4413      	add	r3, r2
 8014274:	009b      	lsls	r3, r3, #2
 8014276:	4a1f      	ldr	r2, [pc, #124]	; (80142f4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014278:	4413      	add	r3, r2
 801427a:	4299      	cmp	r1, r3
 801427c:	d134      	bne.n	80142e8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801427e:	69bb      	ldr	r3, [r7, #24]
 8014280:	3304      	adds	r3, #4
 8014282:	4618      	mov	r0, r3
 8014284:	f7fd fef5 	bl	8012072 <uxListRemove>
 8014288:	4603      	mov	r3, r0
 801428a:	2b00      	cmp	r3, #0
 801428c:	d115      	bne.n	80142ba <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801428e:	69bb      	ldr	r3, [r7, #24]
 8014290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014292:	4918      	ldr	r1, [pc, #96]	; (80142f4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014294:	4613      	mov	r3, r2
 8014296:	009b      	lsls	r3, r3, #2
 8014298:	4413      	add	r3, r2
 801429a:	009b      	lsls	r3, r3, #2
 801429c:	440b      	add	r3, r1
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d10a      	bne.n	80142ba <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80142a4:	69bb      	ldr	r3, [r7, #24]
 80142a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142a8:	2201      	movs	r2, #1
 80142aa:	fa02 f303 	lsl.w	r3, r2, r3
 80142ae:	43da      	mvns	r2, r3
 80142b0:	4b11      	ldr	r3, [pc, #68]	; (80142f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	4013      	ands	r3, r2
 80142b6:	4a10      	ldr	r2, [pc, #64]	; (80142f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80142b8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80142ba:	69bb      	ldr	r3, [r7, #24]
 80142bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142be:	2201      	movs	r2, #1
 80142c0:	409a      	lsls	r2, r3
 80142c2:	4b0d      	ldr	r3, [pc, #52]	; (80142f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	4313      	orrs	r3, r2
 80142c8:	4a0b      	ldr	r2, [pc, #44]	; (80142f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80142ca:	6013      	str	r3, [r2, #0]
 80142cc:	69bb      	ldr	r3, [r7, #24]
 80142ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142d0:	4613      	mov	r3, r2
 80142d2:	009b      	lsls	r3, r3, #2
 80142d4:	4413      	add	r3, r2
 80142d6:	009b      	lsls	r3, r3, #2
 80142d8:	4a06      	ldr	r2, [pc, #24]	; (80142f4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80142da:	441a      	add	r2, r3
 80142dc:	69bb      	ldr	r3, [r7, #24]
 80142de:	3304      	adds	r3, #4
 80142e0:	4619      	mov	r1, r3
 80142e2:	4610      	mov	r0, r2
 80142e4:	f7fd fe68 	bl	8011fb8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80142e8:	bf00      	nop
 80142ea:	3720      	adds	r7, #32
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}
 80142f0:	20006554 	.word	0x20006554
 80142f4:	20006558 	.word	0x20006558
 80142f8:	2000665c 	.word	0x2000665c

080142fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80142fc:	b480      	push	{r7}
 80142fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014300:	4b07      	ldr	r3, [pc, #28]	; (8014320 <pvTaskIncrementMutexHeldCount+0x24>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d004      	beq.n	8014312 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014308:	4b05      	ldr	r3, [pc, #20]	; (8014320 <pvTaskIncrementMutexHeldCount+0x24>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801430e:	3201      	adds	r2, #1
 8014310:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8014312:	4b03      	ldr	r3, [pc, #12]	; (8014320 <pvTaskIncrementMutexHeldCount+0x24>)
 8014314:	681b      	ldr	r3, [r3, #0]
	}
 8014316:	4618      	mov	r0, r3
 8014318:	46bd      	mov	sp, r7
 801431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431e:	4770      	bx	lr
 8014320:	20006554 	.word	0x20006554

08014324 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b084      	sub	sp, #16
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
 801432c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801432e:	4b29      	ldr	r3, [pc, #164]	; (80143d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014334:	4b28      	ldr	r3, [pc, #160]	; (80143d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	3304      	adds	r3, #4
 801433a:	4618      	mov	r0, r3
 801433c:	f7fd fe99 	bl	8012072 <uxListRemove>
 8014340:	4603      	mov	r3, r0
 8014342:	2b00      	cmp	r3, #0
 8014344:	d10b      	bne.n	801435e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014346:	4b24      	ldr	r3, [pc, #144]	; (80143d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801434c:	2201      	movs	r2, #1
 801434e:	fa02 f303 	lsl.w	r3, r2, r3
 8014352:	43da      	mvns	r2, r3
 8014354:	4b21      	ldr	r3, [pc, #132]	; (80143dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	4013      	ands	r3, r2
 801435a:	4a20      	ldr	r2, [pc, #128]	; (80143dc <prvAddCurrentTaskToDelayedList+0xb8>)
 801435c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014364:	d10a      	bne.n	801437c <prvAddCurrentTaskToDelayedList+0x58>
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d007      	beq.n	801437c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801436c:	4b1a      	ldr	r3, [pc, #104]	; (80143d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	3304      	adds	r3, #4
 8014372:	4619      	mov	r1, r3
 8014374:	481a      	ldr	r0, [pc, #104]	; (80143e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014376:	f7fd fe1f 	bl	8011fb8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801437a:	e026      	b.n	80143ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801437c:	68fa      	ldr	r2, [r7, #12]
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	4413      	add	r3, r2
 8014382:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014384:	4b14      	ldr	r3, [pc, #80]	; (80143d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	68ba      	ldr	r2, [r7, #8]
 801438a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801438c:	68ba      	ldr	r2, [r7, #8]
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	429a      	cmp	r2, r3
 8014392:	d209      	bcs.n	80143a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014394:	4b13      	ldr	r3, [pc, #76]	; (80143e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014396:	681a      	ldr	r2, [r3, #0]
 8014398:	4b0f      	ldr	r3, [pc, #60]	; (80143d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	3304      	adds	r3, #4
 801439e:	4619      	mov	r1, r3
 80143a0:	4610      	mov	r0, r2
 80143a2:	f7fd fe2d 	bl	8012000 <vListInsert>
}
 80143a6:	e010      	b.n	80143ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80143a8:	4b0f      	ldr	r3, [pc, #60]	; (80143e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80143aa:	681a      	ldr	r2, [r3, #0]
 80143ac:	4b0a      	ldr	r3, [pc, #40]	; (80143d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	3304      	adds	r3, #4
 80143b2:	4619      	mov	r1, r3
 80143b4:	4610      	mov	r0, r2
 80143b6:	f7fd fe23 	bl	8012000 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80143ba:	4b0c      	ldr	r3, [pc, #48]	; (80143ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	68ba      	ldr	r2, [r7, #8]
 80143c0:	429a      	cmp	r2, r3
 80143c2:	d202      	bcs.n	80143ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80143c4:	4a09      	ldr	r2, [pc, #36]	; (80143ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	6013      	str	r3, [r2, #0]
}
 80143ca:	bf00      	nop
 80143cc:	3710      	adds	r7, #16
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}
 80143d2:	bf00      	nop
 80143d4:	20006658 	.word	0x20006658
 80143d8:	20006554 	.word	0x20006554
 80143dc:	2000665c 	.word	0x2000665c
 80143e0:	20006640 	.word	0x20006640
 80143e4:	20006610 	.word	0x20006610
 80143e8:	2000660c 	.word	0x2000660c
 80143ec:	20006674 	.word	0x20006674

080143f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80143f0:	b480      	push	{r7}
 80143f2:	b085      	sub	sp, #20
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	60f8      	str	r0, [r7, #12]
 80143f8:	60b9      	str	r1, [r7, #8]
 80143fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	3b04      	subs	r3, #4
 8014400:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	3b04      	subs	r3, #4
 801440e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	f023 0201 	bic.w	r2, r3, #1
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	3b04      	subs	r3, #4
 801441e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014420:	4a0c      	ldr	r2, [pc, #48]	; (8014454 <pxPortInitialiseStack+0x64>)
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	3b14      	subs	r3, #20
 801442a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801442c:	687a      	ldr	r2, [r7, #4]
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	3b04      	subs	r3, #4
 8014436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	f06f 0202 	mvn.w	r2, #2
 801443e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	3b20      	subs	r3, #32
 8014444:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014446:	68fb      	ldr	r3, [r7, #12]
}
 8014448:	4618      	mov	r0, r3
 801444a:	3714      	adds	r7, #20
 801444c:	46bd      	mov	sp, r7
 801444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014452:	4770      	bx	lr
 8014454:	08014459 	.word	0x08014459

08014458 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014458:	b480      	push	{r7}
 801445a:	b085      	sub	sp, #20
 801445c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801445e:	2300      	movs	r3, #0
 8014460:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014462:	4b14      	ldr	r3, [pc, #80]	; (80144b4 <prvTaskExitError+0x5c>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801446a:	d00c      	beq.n	8014486 <prvTaskExitError+0x2e>
	__asm volatile
 801446c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014470:	b672      	cpsid	i
 8014472:	f383 8811 	msr	BASEPRI, r3
 8014476:	f3bf 8f6f 	isb	sy
 801447a:	f3bf 8f4f 	dsb	sy
 801447e:	b662      	cpsie	i
 8014480:	60fb      	str	r3, [r7, #12]
}
 8014482:	bf00      	nop
 8014484:	e7fe      	b.n	8014484 <prvTaskExitError+0x2c>
	__asm volatile
 8014486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801448a:	b672      	cpsid	i
 801448c:	f383 8811 	msr	BASEPRI, r3
 8014490:	f3bf 8f6f 	isb	sy
 8014494:	f3bf 8f4f 	dsb	sy
 8014498:	b662      	cpsie	i
 801449a:	60bb      	str	r3, [r7, #8]
}
 801449c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801449e:	bf00      	nop
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d0fc      	beq.n	80144a0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80144a6:	bf00      	nop
 80144a8:	bf00      	nop
 80144aa:	3714      	adds	r7, #20
 80144ac:	46bd      	mov	sp, r7
 80144ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b2:	4770      	bx	lr
 80144b4:	2000002c 	.word	0x2000002c
	...

080144c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80144c0:	4b07      	ldr	r3, [pc, #28]	; (80144e0 <pxCurrentTCBConst2>)
 80144c2:	6819      	ldr	r1, [r3, #0]
 80144c4:	6808      	ldr	r0, [r1, #0]
 80144c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144ca:	f380 8809 	msr	PSP, r0
 80144ce:	f3bf 8f6f 	isb	sy
 80144d2:	f04f 0000 	mov.w	r0, #0
 80144d6:	f380 8811 	msr	BASEPRI, r0
 80144da:	4770      	bx	lr
 80144dc:	f3af 8000 	nop.w

080144e0 <pxCurrentTCBConst2>:
 80144e0:	20006554 	.word	0x20006554
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80144e4:	bf00      	nop
 80144e6:	bf00      	nop

080144e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80144e8:	4808      	ldr	r0, [pc, #32]	; (801450c <prvPortStartFirstTask+0x24>)
 80144ea:	6800      	ldr	r0, [r0, #0]
 80144ec:	6800      	ldr	r0, [r0, #0]
 80144ee:	f380 8808 	msr	MSP, r0
 80144f2:	f04f 0000 	mov.w	r0, #0
 80144f6:	f380 8814 	msr	CONTROL, r0
 80144fa:	b662      	cpsie	i
 80144fc:	b661      	cpsie	f
 80144fe:	f3bf 8f4f 	dsb	sy
 8014502:	f3bf 8f6f 	isb	sy
 8014506:	df00      	svc	0
 8014508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801450a:	bf00      	nop
 801450c:	e000ed08 	.word	0xe000ed08

08014510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b084      	sub	sp, #16
 8014514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014516:	4b37      	ldr	r3, [pc, #220]	; (80145f4 <xPortStartScheduler+0xe4>)
 8014518:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	781b      	ldrb	r3, [r3, #0]
 801451e:	b2db      	uxtb	r3, r3
 8014520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	22ff      	movs	r2, #255	; 0xff
 8014526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	781b      	ldrb	r3, [r3, #0]
 801452c:	b2db      	uxtb	r3, r3
 801452e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014530:	78fb      	ldrb	r3, [r7, #3]
 8014532:	b2db      	uxtb	r3, r3
 8014534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014538:	b2da      	uxtb	r2, r3
 801453a:	4b2f      	ldr	r3, [pc, #188]	; (80145f8 <xPortStartScheduler+0xe8>)
 801453c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801453e:	4b2f      	ldr	r3, [pc, #188]	; (80145fc <xPortStartScheduler+0xec>)
 8014540:	2207      	movs	r2, #7
 8014542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014544:	e009      	b.n	801455a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014546:	4b2d      	ldr	r3, [pc, #180]	; (80145fc <xPortStartScheduler+0xec>)
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	3b01      	subs	r3, #1
 801454c:	4a2b      	ldr	r2, [pc, #172]	; (80145fc <xPortStartScheduler+0xec>)
 801454e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014550:	78fb      	ldrb	r3, [r7, #3]
 8014552:	b2db      	uxtb	r3, r3
 8014554:	005b      	lsls	r3, r3, #1
 8014556:	b2db      	uxtb	r3, r3
 8014558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801455a:	78fb      	ldrb	r3, [r7, #3]
 801455c:	b2db      	uxtb	r3, r3
 801455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014562:	2b80      	cmp	r3, #128	; 0x80
 8014564:	d0ef      	beq.n	8014546 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014566:	4b25      	ldr	r3, [pc, #148]	; (80145fc <xPortStartScheduler+0xec>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	f1c3 0307 	rsb	r3, r3, #7
 801456e:	2b04      	cmp	r3, #4
 8014570:	d00c      	beq.n	801458c <xPortStartScheduler+0x7c>
	__asm volatile
 8014572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014576:	b672      	cpsid	i
 8014578:	f383 8811 	msr	BASEPRI, r3
 801457c:	f3bf 8f6f 	isb	sy
 8014580:	f3bf 8f4f 	dsb	sy
 8014584:	b662      	cpsie	i
 8014586:	60bb      	str	r3, [r7, #8]
}
 8014588:	bf00      	nop
 801458a:	e7fe      	b.n	801458a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801458c:	4b1b      	ldr	r3, [pc, #108]	; (80145fc <xPortStartScheduler+0xec>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	021b      	lsls	r3, r3, #8
 8014592:	4a1a      	ldr	r2, [pc, #104]	; (80145fc <xPortStartScheduler+0xec>)
 8014594:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014596:	4b19      	ldr	r3, [pc, #100]	; (80145fc <xPortStartScheduler+0xec>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801459e:	4a17      	ldr	r2, [pc, #92]	; (80145fc <xPortStartScheduler+0xec>)
 80145a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	b2da      	uxtb	r2, r3
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80145aa:	4b15      	ldr	r3, [pc, #84]	; (8014600 <xPortStartScheduler+0xf0>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	4a14      	ldr	r2, [pc, #80]	; (8014600 <xPortStartScheduler+0xf0>)
 80145b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80145b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80145b6:	4b12      	ldr	r3, [pc, #72]	; (8014600 <xPortStartScheduler+0xf0>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	4a11      	ldr	r2, [pc, #68]	; (8014600 <xPortStartScheduler+0xf0>)
 80145bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80145c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80145c2:	f000 f8dd 	bl	8014780 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80145c6:	4b0f      	ldr	r3, [pc, #60]	; (8014604 <xPortStartScheduler+0xf4>)
 80145c8:	2200      	movs	r2, #0
 80145ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80145cc:	f000 f8fc 	bl	80147c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80145d0:	4b0d      	ldr	r3, [pc, #52]	; (8014608 <xPortStartScheduler+0xf8>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	4a0c      	ldr	r2, [pc, #48]	; (8014608 <xPortStartScheduler+0xf8>)
 80145d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80145da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80145dc:	f7ff ff84 	bl	80144e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80145e0:	f7ff fa74 	bl	8013acc <vTaskSwitchContext>
	prvTaskExitError();
 80145e4:	f7ff ff38 	bl	8014458 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80145e8:	2300      	movs	r3, #0
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	3710      	adds	r7, #16
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}
 80145f2:	bf00      	nop
 80145f4:	e000e400 	.word	0xe000e400
 80145f8:	20006680 	.word	0x20006680
 80145fc:	20006684 	.word	0x20006684
 8014600:	e000ed20 	.word	0xe000ed20
 8014604:	2000002c 	.word	0x2000002c
 8014608:	e000ef34 	.word	0xe000ef34

0801460c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801460c:	b480      	push	{r7}
 801460e:	b083      	sub	sp, #12
 8014610:	af00      	add	r7, sp, #0
	__asm volatile
 8014612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014616:	b672      	cpsid	i
 8014618:	f383 8811 	msr	BASEPRI, r3
 801461c:	f3bf 8f6f 	isb	sy
 8014620:	f3bf 8f4f 	dsb	sy
 8014624:	b662      	cpsie	i
 8014626:	607b      	str	r3, [r7, #4]
}
 8014628:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801462a:	4b10      	ldr	r3, [pc, #64]	; (801466c <vPortEnterCritical+0x60>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	3301      	adds	r3, #1
 8014630:	4a0e      	ldr	r2, [pc, #56]	; (801466c <vPortEnterCritical+0x60>)
 8014632:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014634:	4b0d      	ldr	r3, [pc, #52]	; (801466c <vPortEnterCritical+0x60>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	2b01      	cmp	r3, #1
 801463a:	d111      	bne.n	8014660 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801463c:	4b0c      	ldr	r3, [pc, #48]	; (8014670 <vPortEnterCritical+0x64>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	b2db      	uxtb	r3, r3
 8014642:	2b00      	cmp	r3, #0
 8014644:	d00c      	beq.n	8014660 <vPortEnterCritical+0x54>
	__asm volatile
 8014646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801464a:	b672      	cpsid	i
 801464c:	f383 8811 	msr	BASEPRI, r3
 8014650:	f3bf 8f6f 	isb	sy
 8014654:	f3bf 8f4f 	dsb	sy
 8014658:	b662      	cpsie	i
 801465a:	603b      	str	r3, [r7, #0]
}
 801465c:	bf00      	nop
 801465e:	e7fe      	b.n	801465e <vPortEnterCritical+0x52>
	}
}
 8014660:	bf00      	nop
 8014662:	370c      	adds	r7, #12
 8014664:	46bd      	mov	sp, r7
 8014666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466a:	4770      	bx	lr
 801466c:	2000002c 	.word	0x2000002c
 8014670:	e000ed04 	.word	0xe000ed04

08014674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014674:	b480      	push	{r7}
 8014676:	b083      	sub	sp, #12
 8014678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801467a:	4b13      	ldr	r3, [pc, #76]	; (80146c8 <vPortExitCritical+0x54>)
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d10c      	bne.n	801469c <vPortExitCritical+0x28>
	__asm volatile
 8014682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014686:	b672      	cpsid	i
 8014688:	f383 8811 	msr	BASEPRI, r3
 801468c:	f3bf 8f6f 	isb	sy
 8014690:	f3bf 8f4f 	dsb	sy
 8014694:	b662      	cpsie	i
 8014696:	607b      	str	r3, [r7, #4]
}
 8014698:	bf00      	nop
 801469a:	e7fe      	b.n	801469a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801469c:	4b0a      	ldr	r3, [pc, #40]	; (80146c8 <vPortExitCritical+0x54>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	3b01      	subs	r3, #1
 80146a2:	4a09      	ldr	r2, [pc, #36]	; (80146c8 <vPortExitCritical+0x54>)
 80146a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80146a6:	4b08      	ldr	r3, [pc, #32]	; (80146c8 <vPortExitCritical+0x54>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d105      	bne.n	80146ba <vPortExitCritical+0x46>
 80146ae:	2300      	movs	r3, #0
 80146b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	f383 8811 	msr	BASEPRI, r3
}
 80146b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80146ba:	bf00      	nop
 80146bc:	370c      	adds	r7, #12
 80146be:	46bd      	mov	sp, r7
 80146c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c4:	4770      	bx	lr
 80146c6:	bf00      	nop
 80146c8:	2000002c 	.word	0x2000002c
 80146cc:	00000000 	.word	0x00000000

080146d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80146d0:	f3ef 8009 	mrs	r0, PSP
 80146d4:	f3bf 8f6f 	isb	sy
 80146d8:	4b15      	ldr	r3, [pc, #84]	; (8014730 <pxCurrentTCBConst>)
 80146da:	681a      	ldr	r2, [r3, #0]
 80146dc:	f01e 0f10 	tst.w	lr, #16
 80146e0:	bf08      	it	eq
 80146e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80146e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146ea:	6010      	str	r0, [r2, #0]
 80146ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80146f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80146f4:	b672      	cpsid	i
 80146f6:	f380 8811 	msr	BASEPRI, r0
 80146fa:	f3bf 8f4f 	dsb	sy
 80146fe:	f3bf 8f6f 	isb	sy
 8014702:	b662      	cpsie	i
 8014704:	f7ff f9e2 	bl	8013acc <vTaskSwitchContext>
 8014708:	f04f 0000 	mov.w	r0, #0
 801470c:	f380 8811 	msr	BASEPRI, r0
 8014710:	bc09      	pop	{r0, r3}
 8014712:	6819      	ldr	r1, [r3, #0]
 8014714:	6808      	ldr	r0, [r1, #0]
 8014716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801471a:	f01e 0f10 	tst.w	lr, #16
 801471e:	bf08      	it	eq
 8014720:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014724:	f380 8809 	msr	PSP, r0
 8014728:	f3bf 8f6f 	isb	sy
 801472c:	4770      	bx	lr
 801472e:	bf00      	nop

08014730 <pxCurrentTCBConst>:
 8014730:	20006554 	.word	0x20006554
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014734:	bf00      	nop
 8014736:	bf00      	nop

08014738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b082      	sub	sp, #8
 801473c:	af00      	add	r7, sp, #0
	__asm volatile
 801473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014742:	b672      	cpsid	i
 8014744:	f383 8811 	msr	BASEPRI, r3
 8014748:	f3bf 8f6f 	isb	sy
 801474c:	f3bf 8f4f 	dsb	sy
 8014750:	b662      	cpsie	i
 8014752:	607b      	str	r3, [r7, #4]
}
 8014754:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014756:	f7ff f8ff 	bl	8013958 <xTaskIncrementTick>
 801475a:	4603      	mov	r3, r0
 801475c:	2b00      	cmp	r3, #0
 801475e:	d003      	beq.n	8014768 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014760:	4b06      	ldr	r3, [pc, #24]	; (801477c <SysTick_Handler+0x44>)
 8014762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014766:	601a      	str	r2, [r3, #0]
 8014768:	2300      	movs	r3, #0
 801476a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	f383 8811 	msr	BASEPRI, r3
}
 8014772:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014774:	bf00      	nop
 8014776:	3708      	adds	r7, #8
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}
 801477c:	e000ed04 	.word	0xe000ed04

08014780 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014780:	b480      	push	{r7}
 8014782:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014784:	4b0b      	ldr	r3, [pc, #44]	; (80147b4 <vPortSetupTimerInterrupt+0x34>)
 8014786:	2200      	movs	r2, #0
 8014788:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801478a:	4b0b      	ldr	r3, [pc, #44]	; (80147b8 <vPortSetupTimerInterrupt+0x38>)
 801478c:	2200      	movs	r2, #0
 801478e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014790:	4b0a      	ldr	r3, [pc, #40]	; (80147bc <vPortSetupTimerInterrupt+0x3c>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	4a0a      	ldr	r2, [pc, #40]	; (80147c0 <vPortSetupTimerInterrupt+0x40>)
 8014796:	fba2 2303 	umull	r2, r3, r2, r3
 801479a:	099b      	lsrs	r3, r3, #6
 801479c:	4a09      	ldr	r2, [pc, #36]	; (80147c4 <vPortSetupTimerInterrupt+0x44>)
 801479e:	3b01      	subs	r3, #1
 80147a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80147a2:	4b04      	ldr	r3, [pc, #16]	; (80147b4 <vPortSetupTimerInterrupt+0x34>)
 80147a4:	2207      	movs	r2, #7
 80147a6:	601a      	str	r2, [r3, #0]
}
 80147a8:	bf00      	nop
 80147aa:	46bd      	mov	sp, r7
 80147ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b0:	4770      	bx	lr
 80147b2:	bf00      	nop
 80147b4:	e000e010 	.word	0xe000e010
 80147b8:	e000e018 	.word	0xe000e018
 80147bc:	2000000c 	.word	0x2000000c
 80147c0:	10624dd3 	.word	0x10624dd3
 80147c4:	e000e014 	.word	0xe000e014

080147c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80147c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80147d8 <vPortEnableVFP+0x10>
 80147cc:	6801      	ldr	r1, [r0, #0]
 80147ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80147d2:	6001      	str	r1, [r0, #0]
 80147d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80147d6:	bf00      	nop
 80147d8:	e000ed88 	.word	0xe000ed88

080147dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80147dc:	b480      	push	{r7}
 80147de:	b085      	sub	sp, #20
 80147e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80147e2:	f3ef 8305 	mrs	r3, IPSR
 80147e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	2b0f      	cmp	r3, #15
 80147ec:	d916      	bls.n	801481c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80147ee:	4a19      	ldr	r2, [pc, #100]	; (8014854 <vPortValidateInterruptPriority+0x78>)
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	4413      	add	r3, r2
 80147f4:	781b      	ldrb	r3, [r3, #0]
 80147f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80147f8:	4b17      	ldr	r3, [pc, #92]	; (8014858 <vPortValidateInterruptPriority+0x7c>)
 80147fa:	781b      	ldrb	r3, [r3, #0]
 80147fc:	7afa      	ldrb	r2, [r7, #11]
 80147fe:	429a      	cmp	r2, r3
 8014800:	d20c      	bcs.n	801481c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8014802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014806:	b672      	cpsid	i
 8014808:	f383 8811 	msr	BASEPRI, r3
 801480c:	f3bf 8f6f 	isb	sy
 8014810:	f3bf 8f4f 	dsb	sy
 8014814:	b662      	cpsie	i
 8014816:	607b      	str	r3, [r7, #4]
}
 8014818:	bf00      	nop
 801481a:	e7fe      	b.n	801481a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801481c:	4b0f      	ldr	r3, [pc, #60]	; (801485c <vPortValidateInterruptPriority+0x80>)
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014824:	4b0e      	ldr	r3, [pc, #56]	; (8014860 <vPortValidateInterruptPriority+0x84>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	429a      	cmp	r2, r3
 801482a:	d90c      	bls.n	8014846 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014830:	b672      	cpsid	i
 8014832:	f383 8811 	msr	BASEPRI, r3
 8014836:	f3bf 8f6f 	isb	sy
 801483a:	f3bf 8f4f 	dsb	sy
 801483e:	b662      	cpsie	i
 8014840:	603b      	str	r3, [r7, #0]
}
 8014842:	bf00      	nop
 8014844:	e7fe      	b.n	8014844 <vPortValidateInterruptPriority+0x68>
	}
 8014846:	bf00      	nop
 8014848:	3714      	adds	r7, #20
 801484a:	46bd      	mov	sp, r7
 801484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014850:	4770      	bx	lr
 8014852:	bf00      	nop
 8014854:	e000e3f0 	.word	0xe000e3f0
 8014858:	20006680 	.word	0x20006680
 801485c:	e000ed0c 	.word	0xe000ed0c
 8014860:	20006684 	.word	0x20006684

08014864 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b084      	sub	sp, #16
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
 801486c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	330c      	adds	r3, #12
 8014874:	461a      	mov	r2, r3
 8014876:	6839      	ldr	r1, [r7, #0]
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f002 fcb7 	bl	80171ec <tcpip_send_msg_wait_sem>
 801487e:	4603      	mov	r3, r0
 8014880:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8014882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d103      	bne.n	8014892 <netconn_apimsg+0x2e>
    return apimsg->err;
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014890:	e001      	b.n	8014896 <netconn_apimsg+0x32>
  }
  return err;
 8014892:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014896:	4618      	mov	r0, r3
 8014898:	3710      	adds	r7, #16
 801489a:	46bd      	mov	sp, r7
 801489c:	bd80      	pop	{r7, pc}
	...

080148a0 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b08c      	sub	sp, #48	; 0x30
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	4603      	mov	r3, r0
 80148a8:	603a      	str	r2, [r7, #0]
 80148aa:	71fb      	strb	r3, [r7, #7]
 80148ac:	460b      	mov	r3, r1
 80148ae:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80148b0:	79fb      	ldrb	r3, [r7, #7]
 80148b2:	6839      	ldr	r1, [r7, #0]
 80148b4:	4618      	mov	r0, r3
 80148b6:	f001 f989 	bl	8015bcc <netconn_alloc>
 80148ba:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80148bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d054      	beq.n	801496c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80148c2:	79bb      	ldrb	r3, [r7, #6]
 80148c4:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80148c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148c8:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80148ca:	f107 0308 	add.w	r3, r7, #8
 80148ce:	4619      	mov	r1, r3
 80148d0:	4829      	ldr	r0, [pc, #164]	; (8014978 <netconn_new_with_proto_and_callback+0xd8>)
 80148d2:	f7ff ffc7 	bl	8014864 <netconn_apimsg>
 80148d6:	4603      	mov	r3, r0
 80148d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80148dc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d043      	beq.n	801496c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80148e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148e6:	685b      	ldr	r3, [r3, #4]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d005      	beq.n	80148f8 <netconn_new_with_proto_and_callback+0x58>
 80148ec:	4b23      	ldr	r3, [pc, #140]	; (801497c <netconn_new_with_proto_and_callback+0xdc>)
 80148ee:	22a3      	movs	r2, #163	; 0xa3
 80148f0:	4923      	ldr	r1, [pc, #140]	; (8014980 <netconn_new_with_proto_and_callback+0xe0>)
 80148f2:	4824      	ldr	r0, [pc, #144]	; (8014984 <netconn_new_with_proto_and_callback+0xe4>)
 80148f4:	f00f fb04 	bl	8023f00 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80148f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148fa:	3310      	adds	r3, #16
 80148fc:	4618      	mov	r0, r3
 80148fe:	f00d ff50 	bl	80227a2 <sys_mbox_valid>
 8014902:	4603      	mov	r3, r0
 8014904:	2b00      	cmp	r3, #0
 8014906:	d105      	bne.n	8014914 <netconn_new_with_proto_and_callback+0x74>
 8014908:	4b1c      	ldr	r3, [pc, #112]	; (801497c <netconn_new_with_proto_and_callback+0xdc>)
 801490a:	22a4      	movs	r2, #164	; 0xa4
 801490c:	491e      	ldr	r1, [pc, #120]	; (8014988 <netconn_new_with_proto_and_callback+0xe8>)
 801490e:	481d      	ldr	r0, [pc, #116]	; (8014984 <netconn_new_with_proto_and_callback+0xe4>)
 8014910:	f00f faf6 	bl	8023f00 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8014914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014916:	3314      	adds	r3, #20
 8014918:	4618      	mov	r0, r3
 801491a:	f00d ff42 	bl	80227a2 <sys_mbox_valid>
 801491e:	4603      	mov	r3, r0
 8014920:	2b00      	cmp	r3, #0
 8014922:	d005      	beq.n	8014930 <netconn_new_with_proto_and_callback+0x90>
 8014924:	4b15      	ldr	r3, [pc, #84]	; (801497c <netconn_new_with_proto_and_callback+0xdc>)
 8014926:	22a6      	movs	r2, #166	; 0xa6
 8014928:	4918      	ldr	r1, [pc, #96]	; (801498c <netconn_new_with_proto_and_callback+0xec>)
 801492a:	4816      	ldr	r0, [pc, #88]	; (8014984 <netconn_new_with_proto_and_callback+0xe4>)
 801492c:	f00f fae8 	bl	8023f00 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8014930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014932:	330c      	adds	r3, #12
 8014934:	4618      	mov	r0, r3
 8014936:	f00d ffc5 	bl	80228c4 <sys_sem_valid>
 801493a:	4603      	mov	r3, r0
 801493c:	2b00      	cmp	r3, #0
 801493e:	d105      	bne.n	801494c <netconn_new_with_proto_and_callback+0xac>
 8014940:	4b0e      	ldr	r3, [pc, #56]	; (801497c <netconn_new_with_proto_and_callback+0xdc>)
 8014942:	22a9      	movs	r2, #169	; 0xa9
 8014944:	4912      	ldr	r1, [pc, #72]	; (8014990 <netconn_new_with_proto_and_callback+0xf0>)
 8014946:	480f      	ldr	r0, [pc, #60]	; (8014984 <netconn_new_with_proto_and_callback+0xe4>)
 8014948:	f00f fada 	bl	8023f00 <iprintf>
      sys_sem_free(&conn->op_completed);
 801494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801494e:	330c      	adds	r3, #12
 8014950:	4618      	mov	r0, r3
 8014952:	f00d ffaa 	bl	80228aa <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8014956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014958:	3310      	adds	r3, #16
 801495a:	4618      	mov	r0, r3
 801495c:	f00d fe9a 	bl	8022694 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8014960:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014962:	2007      	movs	r0, #7
 8014964:	f003 f9f0 	bl	8017d48 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8014968:	2300      	movs	r3, #0
 801496a:	e000      	b.n	801496e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 801496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801496e:	4618      	mov	r0, r3
 8014970:	3730      	adds	r7, #48	; 0x30
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}
 8014976:	bf00      	nop
 8014978:	08015ba1 	.word	0x08015ba1
 801497c:	080254a0 	.word	0x080254a0
 8014980:	080254d4 	.word	0x080254d4
 8014984:	080254f8 	.word	0x080254f8
 8014988:	08025520 	.word	0x08025520
 801498c:	08025538 	.word	0x08025538
 8014990:	0802555c 	.word	0x0802555c

08014994 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b08c      	sub	sp, #48	; 0x30
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d101      	bne.n	80149a6 <netconn_prepare_delete+0x12>
    return ERR_OK;
 80149a2:	2300      	movs	r3, #0
 80149a4:	e014      	b.n	80149d0 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80149aa:	2329      	movs	r3, #41	; 0x29
 80149ac:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80149ae:	f107 030c 	add.w	r3, r7, #12
 80149b2:	4619      	mov	r1, r3
 80149b4:	4808      	ldr	r0, [pc, #32]	; (80149d8 <netconn_prepare_delete+0x44>)
 80149b6:	f7ff ff55 	bl	8014864 <netconn_apimsg>
 80149ba:	4603      	mov	r3, r0
 80149bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80149c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d002      	beq.n	80149ce <netconn_prepare_delete+0x3a>
    return err;
 80149c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80149cc:	e000      	b.n	80149d0 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80149ce:	2300      	movs	r3, #0
}
 80149d0:	4618      	mov	r0, r3
 80149d2:	3730      	adds	r7, #48	; 0x30
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bd80      	pop	{r7, pc}
 80149d8:	0801610d 	.word	0x0801610d

080149dc <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b084      	sub	sp, #16
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d101      	bne.n	80149ee <netconn_delete+0x12>
    return ERR_OK;
 80149ea:	2300      	movs	r3, #0
 80149ec:	e00d      	b.n	8014a0a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80149ee:	6878      	ldr	r0, [r7, #4]
 80149f0:	f7ff ffd0 	bl	8014994 <netconn_prepare_delete>
 80149f4:	4603      	mov	r3, r0
 80149f6:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80149f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d102      	bne.n	8014a06 <netconn_delete+0x2a>
    netconn_free(conn);
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f001 f951 	bl	8015ca8 <netconn_free>
  }
  return err;
 8014a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	3710      	adds	r7, #16
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	bd80      	pop	{r7, pc}
	...

08014a14 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b08e      	sub	sp, #56	; 0x38
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	60b9      	str	r1, [r7, #8]
 8014a1e:	4613      	mov	r3, r2
 8014a20:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d109      	bne.n	8014a3c <netconn_bind+0x28>
 8014a28:	4b11      	ldr	r3, [pc, #68]	; (8014a70 <netconn_bind+0x5c>)
 8014a2a:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014a2e:	4911      	ldr	r1, [pc, #68]	; (8014a74 <netconn_bind+0x60>)
 8014a30:	4811      	ldr	r0, [pc, #68]	; (8014a78 <netconn_bind+0x64>)
 8014a32:	f00f fa65 	bl	8023f00 <iprintf>
 8014a36:	f06f 030f 	mvn.w	r3, #15
 8014a3a:	e015      	b.n	8014a68 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8014a3c:	68bb      	ldr	r3, [r7, #8]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d101      	bne.n	8014a46 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8014a42:	4b0e      	ldr	r3, [pc, #56]	; (8014a7c <netconn_bind+0x68>)
 8014a44:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8014a4e:	88fb      	ldrh	r3, [r7, #6]
 8014a50:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8014a52:	f107 0314 	add.w	r3, r7, #20
 8014a56:	4619      	mov	r1, r3
 8014a58:	4809      	ldr	r0, [pc, #36]	; (8014a80 <netconn_bind+0x6c>)
 8014a5a:	f7ff ff03 	bl	8014864 <netconn_apimsg>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8014a64:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8014a68:	4618      	mov	r0, r3
 8014a6a:	3738      	adds	r7, #56	; 0x38
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	080254a0 	.word	0x080254a0
 8014a74:	080255d8 	.word	0x080255d8
 8014a78:	080254f8 	.word	0x080254f8
 8014a7c:	08028af8 	.word	0x08028af8
 8014a80:	080162d5 	.word	0x080162d5

08014a84 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b08e      	sub	sp, #56	; 0x38
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	60f8      	str	r0, [r7, #12]
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	4613      	mov	r3, r2
 8014a90:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d109      	bne.n	8014aac <netconn_connect+0x28>
 8014a98:	4b11      	ldr	r3, [pc, #68]	; (8014ae0 <netconn_connect+0x5c>)
 8014a9a:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8014a9e:	4911      	ldr	r1, [pc, #68]	; (8014ae4 <netconn_connect+0x60>)
 8014aa0:	4811      	ldr	r0, [pc, #68]	; (8014ae8 <netconn_connect+0x64>)
 8014aa2:	f00f fa2d 	bl	8023f00 <iprintf>
 8014aa6:	f06f 030f 	mvn.w	r3, #15
 8014aaa:	e015      	b.n	8014ad8 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d101      	bne.n	8014ab6 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8014ab2:	4b0e      	ldr	r3, [pc, #56]	; (8014aec <netconn_connect+0x68>)
 8014ab4:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8014aba:	68bb      	ldr	r3, [r7, #8]
 8014abc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8014abe:	88fb      	ldrh	r3, [r7, #6]
 8014ac0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8014ac2:	f107 0314 	add.w	r3, r7, #20
 8014ac6:	4619      	mov	r1, r3
 8014ac8:	4809      	ldr	r0, [pc, #36]	; (8014af0 <netconn_connect+0x6c>)
 8014aca:	f7ff fecb 	bl	8014864 <netconn_apimsg>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8014ad4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3738      	adds	r7, #56	; 0x38
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}
 8014ae0:	080254a0 	.word	0x080254a0
 8014ae4:	08025614 	.word	0x08025614
 8014ae8:	080254f8 	.word	0x080254f8
 8014aec:	08028af8 	.word	0x08028af8
 8014af0:	08016469 	.word	0x08016469

08014af4 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b08c      	sub	sp, #48	; 0x30
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	460b      	mov	r3, r1
 8014afe:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d109      	bne.n	8014b1a <netconn_listen_with_backlog+0x26>
 8014b06:	4b0d      	ldr	r3, [pc, #52]	; (8014b3c <netconn_listen_with_backlog+0x48>)
 8014b08:	f240 12bb 	movw	r2, #443	; 0x1bb
 8014b0c:	490c      	ldr	r1, [pc, #48]	; (8014b40 <netconn_listen_with_backlog+0x4c>)
 8014b0e:	480d      	ldr	r0, [pc, #52]	; (8014b44 <netconn_listen_with_backlog+0x50>)
 8014b10:	f00f f9f6 	bl	8023f00 <iprintf>
 8014b14:	f06f 030f 	mvn.w	r3, #15
 8014b18:	e00c      	b.n	8014b34 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8014b1e:	f107 030c 	add.w	r3, r7, #12
 8014b22:	4619      	mov	r1, r3
 8014b24:	4808      	ldr	r0, [pc, #32]	; (8014b48 <netconn_listen_with_backlog+0x54>)
 8014b26:	f7ff fe9d 	bl	8014864 <netconn_apimsg>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8014b30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8014b34:	4618      	mov	r0, r3
 8014b36:	3730      	adds	r7, #48	; 0x30
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}
 8014b3c:	080254a0 	.word	0x080254a0
 8014b40:	08025658 	.word	0x08025658
 8014b44:	080254f8 	.word	0x080254f8
 8014b48:	080165e5 	.word	0x080165e5

08014b4c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b086      	sub	sp, #24
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
 8014b54:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d109      	bne.n	8014b70 <netconn_accept+0x24>
 8014b5c:	4b3d      	ldr	r3, [pc, #244]	; (8014c54 <netconn_accept+0x108>)
 8014b5e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014b62:	493d      	ldr	r1, [pc, #244]	; (8014c58 <netconn_accept+0x10c>)
 8014b64:	483d      	ldr	r0, [pc, #244]	; (8014c5c <netconn_accept+0x110>)
 8014b66:	f00f f9cb 	bl	8023f00 <iprintf>
 8014b6a:	f06f 030f 	mvn.w	r3, #15
 8014b6e:	e06c      	b.n	8014c4a <netconn_accept+0xfe>
  *new_conn = NULL;
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	2200      	movs	r2, #0
 8014b74:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d109      	bne.n	8014b90 <netconn_accept+0x44>
 8014b7c:	4b35      	ldr	r3, [pc, #212]	; (8014c54 <netconn_accept+0x108>)
 8014b7e:	f240 12e3 	movw	r2, #483	; 0x1e3
 8014b82:	4937      	ldr	r1, [pc, #220]	; (8014c60 <netconn_accept+0x114>)
 8014b84:	4835      	ldr	r0, [pc, #212]	; (8014c5c <netconn_accept+0x110>)
 8014b86:	f00f f9bb 	bl	8023f00 <iprintf>
 8014b8a:	f06f 030f 	mvn.w	r3, #15
 8014b8e:	e05c      	b.n	8014c4a <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f000 fb9a 	bl	80152ca <netconn_err>
 8014b96:	4603      	mov	r3, r0
 8014b98:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8014b9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d002      	beq.n	8014ba8 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8014ba2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014ba6:	e050      	b.n	8014c4a <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	3314      	adds	r3, #20
 8014bac:	4618      	mov	r0, r3
 8014bae:	f00d fdf8 	bl	80227a2 <sys_mbox_valid>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d005      	beq.n	8014bc4 <netconn_accept+0x78>
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	7f1b      	ldrb	r3, [r3, #28]
 8014bbc:	f003 0301 	and.w	r3, r3, #1
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d002      	beq.n	8014bca <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8014bc4:	f06f 030e 	mvn.w	r3, #14
 8014bc8:	e03f      	b.n	8014c4a <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	7f1b      	ldrb	r3, [r3, #28]
 8014bce:	f003 0302 	and.w	r3, r3, #2
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d00e      	beq.n	8014bf4 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	3314      	adds	r3, #20
 8014bda:	f107 020c 	add.w	r2, r7, #12
 8014bde:	4611      	mov	r1, r2
 8014be0:	4618      	mov	r0, r3
 8014be2:	f00d fdc2 	bl	802276a <sys_arch_mbox_tryfetch>
 8014be6:	4603      	mov	r3, r0
 8014be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014bec:	d10a      	bne.n	8014c04 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8014bee:	f06f 0306 	mvn.w	r3, #6
 8014bf2:	e02a      	b.n	8014c4a <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	3314      	adds	r3, #20
 8014bf8:	f107 010c 	add.w	r1, r7, #12
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f00d fd74 	bl	80226ec <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d005      	beq.n	8014c18 <netconn_accept+0xcc>
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c10:	2200      	movs	r2, #0
 8014c12:	2101      	movs	r1, #1
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	f107 0213 	add.w	r2, r7, #19
 8014c1e:	4611      	mov	r1, r2
 8014c20:	4618      	mov	r0, r3
 8014c22:	f000 fba3 	bl	801536c <lwip_netconn_is_err_msg>
 8014c26:	4603      	mov	r3, r0
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d002      	beq.n	8014c32 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8014c2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014c30:	e00b      	b.n	8014c4a <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d102      	bne.n	8014c3e <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8014c38:	f06f 030e 	mvn.w	r3, #14
 8014c3c:	e005      	b.n	8014c4a <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8014c42:	683b      	ldr	r3, [r7, #0]
 8014c44:	697a      	ldr	r2, [r7, #20]
 8014c46:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8014c48:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3718      	adds	r7, #24
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	bf00      	nop
 8014c54:	080254a0 	.word	0x080254a0
 8014c58:	08025678 	.word	0x08025678
 8014c5c:	080254f8 	.word	0x080254f8
 8014c60:	08025698 	.word	0x08025698

08014c64 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b088      	sub	sp, #32
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	60f8      	str	r0, [r7, #12]
 8014c6c:	60b9      	str	r1, [r7, #8]
 8014c6e:	4613      	mov	r3, r2
 8014c70:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8014c72:	2300      	movs	r3, #0
 8014c74:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014c76:	68bb      	ldr	r3, [r7, #8]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d109      	bne.n	8014c90 <netconn_recv_data+0x2c>
 8014c7c:	4b58      	ldr	r3, [pc, #352]	; (8014de0 <netconn_recv_data+0x17c>)
 8014c7e:	f44f 7212 	mov.w	r2, #584	; 0x248
 8014c82:	4958      	ldr	r1, [pc, #352]	; (8014de4 <netconn_recv_data+0x180>)
 8014c84:	4858      	ldr	r0, [pc, #352]	; (8014de8 <netconn_recv_data+0x184>)
 8014c86:	f00f f93b 	bl	8023f00 <iprintf>
 8014c8a:	f06f 030f 	mvn.w	r3, #15
 8014c8e:	e0a2      	b.n	8014dd6 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	2200      	movs	r2, #0
 8014c94:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d109      	bne.n	8014cb0 <netconn_recv_data+0x4c>
 8014c9c:	4b50      	ldr	r3, [pc, #320]	; (8014de0 <netconn_recv_data+0x17c>)
 8014c9e:	f240 224a 	movw	r2, #586	; 0x24a
 8014ca2:	4952      	ldr	r1, [pc, #328]	; (8014dec <netconn_recv_data+0x188>)
 8014ca4:	4850      	ldr	r0, [pc, #320]	; (8014de8 <netconn_recv_data+0x184>)
 8014ca6:	f00f f92b 	bl	8023f00 <iprintf>
 8014caa:	f06f 030f 	mvn.w	r3, #15
 8014cae:	e092      	b.n	8014dd6 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	3310      	adds	r3, #16
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f00d fd74 	bl	80227a2 <sys_mbox_valid>
 8014cba:	4603      	mov	r3, r0
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d10e      	bne.n	8014cde <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8014cc0:	68f8      	ldr	r0, [r7, #12]
 8014cc2:	f000 fb02 	bl	80152ca <netconn_err>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8014cca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d002      	beq.n	8014cd8 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8014cd2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8014cd6:	e07e      	b.n	8014dd6 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8014cd8:	f06f 030a 	mvn.w	r3, #10
 8014cdc:	e07b      	b.n	8014dd6 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	7f1b      	ldrb	r3, [r3, #28]
 8014ce2:	f003 0302 	and.w	r3, r3, #2
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d10f      	bne.n	8014d0a <netconn_recv_data+0xa6>
 8014cea:	79fb      	ldrb	r3, [r7, #7]
 8014cec:	f003 0304 	and.w	r3, r3, #4
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d10a      	bne.n	8014d0a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	7f1b      	ldrb	r3, [r3, #28]
 8014cf8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d104      	bne.n	8014d0a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d023      	beq.n	8014d52 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	3310      	adds	r3, #16
 8014d0e:	f107 0218 	add.w	r2, r7, #24
 8014d12:	4611      	mov	r1, r2
 8014d14:	4618      	mov	r0, r3
 8014d16:	f00d fd28 	bl	802276a <sys_arch_mbox_tryfetch>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014d20:	d11f      	bne.n	8014d62 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8014d22:	68f8      	ldr	r0, [r7, #12]
 8014d24:	f000 fad1 	bl	80152ca <netconn_err>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8014d2c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d002      	beq.n	8014d3a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8014d34:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014d38:	e04d      	b.n	8014dd6 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	7f1b      	ldrb	r3, [r3, #28]
 8014d3e:	f003 0301 	and.w	r3, r3, #1
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d002      	beq.n	8014d4c <netconn_recv_data+0xe8>
        return ERR_CONN;
 8014d46:	f06f 030a 	mvn.w	r3, #10
 8014d4a:	e044      	b.n	8014dd6 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8014d4c:	f06f 0306 	mvn.w	r3, #6
 8014d50:	e041      	b.n	8014dd6 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	3310      	adds	r3, #16
 8014d56:	f107 0118 	add.w	r1, r7, #24
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f00d fcc5 	bl	80226ec <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014d6a:	2b10      	cmp	r3, #16
 8014d6c:	d117      	bne.n	8014d9e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8014d6e:	69bb      	ldr	r3, [r7, #24]
 8014d70:	f107 0217 	add.w	r2, r7, #23
 8014d74:	4611      	mov	r1, r2
 8014d76:	4618      	mov	r0, r3
 8014d78:	f000 faf8 	bl	801536c <lwip_netconn_is_err_msg>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d009      	beq.n	8014d96 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8014d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014d86:	f113 0f0f 	cmn.w	r3, #15
 8014d8a:	d101      	bne.n	8014d90 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	e022      	b.n	8014dd6 <netconn_recv_data+0x172>
      }
      return err;
 8014d90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014d94:	e01f      	b.n	8014dd6 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8014d96:	69bb      	ldr	r3, [r7, #24]
 8014d98:	891b      	ldrh	r3, [r3, #8]
 8014d9a:	83fb      	strh	r3, [r7, #30]
 8014d9c:	e00d      	b.n	8014dba <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8014d9e:	69bb      	ldr	r3, [r7, #24]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d106      	bne.n	8014db2 <netconn_recv_data+0x14e>
 8014da4:	4b0e      	ldr	r3, [pc, #56]	; (8014de0 <netconn_recv_data+0x17c>)
 8014da6:	f240 2291 	movw	r2, #657	; 0x291
 8014daa:	4911      	ldr	r1, [pc, #68]	; (8014df0 <netconn_recv_data+0x18c>)
 8014dac:	480e      	ldr	r0, [pc, #56]	; (8014de8 <netconn_recv_data+0x184>)
 8014dae:	f00f f8a7 	bl	8023f00 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8014db2:	69bb      	ldr	r3, [r7, #24]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	891b      	ldrh	r3, [r3, #8]
 8014db8:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d005      	beq.n	8014dce <netconn_recv_data+0x16a>
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dc6:	8bfa      	ldrh	r2, [r7, #30]
 8014dc8:	2101      	movs	r1, #1
 8014dca:	68f8      	ldr	r0, [r7, #12]
 8014dcc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8014dce:	69ba      	ldr	r2, [r7, #24]
 8014dd0:	68bb      	ldr	r3, [r7, #8]
 8014dd2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8014dd4:	2300      	movs	r3, #0
}
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	3720      	adds	r7, #32
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}
 8014dde:	bf00      	nop
 8014de0:	080254a0 	.word	0x080254a0
 8014de4:	080256b8 	.word	0x080256b8
 8014de8:	080254f8 	.word	0x080254f8
 8014dec:	080256d8 	.word	0x080256d8
 8014df0:	080256f4 	.word	0x080256f4

08014df4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b084      	sub	sp, #16
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	60b9      	str	r1, [r7, #8]
 8014dfe:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d005      	beq.n	8014e12 <netconn_tcp_recvd_msg+0x1e>
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	781b      	ldrb	r3, [r3, #0]
 8014e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e0e:	2b10      	cmp	r3, #16
 8014e10:	d009      	beq.n	8014e26 <netconn_tcp_recvd_msg+0x32>
 8014e12:	4b0c      	ldr	r3, [pc, #48]	; (8014e44 <netconn_tcp_recvd_msg+0x50>)
 8014e14:	f240 22a7 	movw	r2, #679	; 0x2a7
 8014e18:	490b      	ldr	r1, [pc, #44]	; (8014e48 <netconn_tcp_recvd_msg+0x54>)
 8014e1a:	480c      	ldr	r0, [pc, #48]	; (8014e4c <netconn_tcp_recvd_msg+0x58>)
 8014e1c:	f00f f870 	bl	8023f00 <iprintf>
 8014e20:	f06f 030f 	mvn.w	r3, #15
 8014e24:	e00a      	b.n	8014e3c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	68fa      	ldr	r2, [r7, #12]
 8014e2a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	68ba      	ldr	r2, [r7, #8]
 8014e30:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8014e32:	6879      	ldr	r1, [r7, #4]
 8014e34:	4806      	ldr	r0, [pc, #24]	; (8014e50 <netconn_tcp_recvd_msg+0x5c>)
 8014e36:	f7ff fd15 	bl	8014864 <netconn_apimsg>
 8014e3a:	4603      	mov	r3, r0
}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	3710      	adds	r7, #16
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}
 8014e44:	080254a0 	.word	0x080254a0
 8014e48:	08025700 	.word	0x08025700
 8014e4c:	080254f8 	.word	0x080254f8
 8014e50:	080167af 	.word	0x080167af

08014e54 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b090      	sub	sp, #64	; 0x40
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	60f8      	str	r0, [r7, #12]
 8014e5c:	60b9      	str	r1, [r7, #8]
 8014e5e:	4613      	mov	r3, r2
 8014e60:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	3310      	adds	r3, #16
 8014e66:	4618      	mov	r0, r3
 8014e68:	f00d fc9b 	bl	80227a2 <sys_mbox_valid>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d102      	bne.n	8014e78 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8014e72:	f06f 030a 	mvn.w	r3, #10
 8014e76:	e06d      	b.n	8014f54 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	7f1b      	ldrb	r3, [r3, #28]
 8014e7c:	b25b      	sxtb	r3, r3
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	da07      	bge.n	8014e92 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	7f1b      	ldrb	r3, [r3, #28]
 8014e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e8a:	b2da      	uxtb	r2, r3
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8014e90:	e039      	b.n	8014f06 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8014e92:	79fb      	ldrb	r3, [r7, #7]
 8014e94:	461a      	mov	r2, r3
 8014e96:	68b9      	ldr	r1, [r7, #8]
 8014e98:	68f8      	ldr	r0, [r7, #12]
 8014e9a:	f7ff fee3 	bl	8014c64 <netconn_recv_data>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8014ea4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d002      	beq.n	8014eb2 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8014eac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014eb0:	e050      	b.n	8014f54 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8014eb2:	68bb      	ldr	r3, [r7, #8]
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8014eb8:	79fb      	ldrb	r3, [r7, #7]
 8014eba:	f003 0308 	and.w	r3, r3, #8
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d10e      	bne.n	8014ee0 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8014ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d002      	beq.n	8014ece <netconn_recv_data_tcp+0x7a>
 8014ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eca:	891b      	ldrh	r3, [r3, #8]
 8014ecc:	e000      	b.n	8014ed0 <netconn_recv_data_tcp+0x7c>
 8014ece:	2301      	movs	r3, #1
 8014ed0:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8014ed2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014ed4:	f107 0214 	add.w	r2, r7, #20
 8014ed8:	4619      	mov	r1, r3
 8014eda:	68f8      	ldr	r0, [r7, #12]
 8014edc:	f7ff ff8a 	bl	8014df4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8014ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d134      	bne.n	8014f50 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8014ee6:	79fb      	ldrb	r3, [r7, #7]
 8014ee8:	f003 0310 	and.w	r3, r3, #16
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d009      	beq.n	8014f04 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	7f1b      	ldrb	r3, [r3, #28]
 8014ef4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014ef8:	b2da      	uxtb	r2, r3
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8014efe:	f06f 0306 	mvn.w	r3, #6
 8014f02:	e027      	b.n	8014f54 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8014f04:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d005      	beq.n	8014f1a <netconn_recv_data_tcp+0xc6>
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f12:	2200      	movs	r2, #0
 8014f14:	2101      	movs	r1, #1
 8014f16:	68f8      	ldr	r0, [r7, #12]
 8014f18:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	685b      	ldr	r3, [r3, #4]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d10f      	bne.n	8014f42 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8014f22:	68f8      	ldr	r0, [r7, #12]
 8014f24:	f000 f9d1 	bl	80152ca <netconn_err>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8014f2e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d002      	beq.n	8014f3c <netconn_recv_data_tcp+0xe8>
          return err;
 8014f36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014f3a:	e00b      	b.n	8014f54 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8014f3c:	f06f 030d 	mvn.w	r3, #13
 8014f40:	e008      	b.n	8014f54 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8014f42:	2101      	movs	r1, #1
 8014f44:	68f8      	ldr	r0, [r7, #12]
 8014f46:	f000 f983 	bl	8015250 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8014f4a:	f06f 030e 	mvn.w	r3, #14
 8014f4e:	e001      	b.n	8014f54 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8014f50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8014f54:	4618      	mov	r0, r3
 8014f56:	3740      	adds	r7, #64	; 0x40
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd80      	pop	{r7, pc}

08014f5c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b086      	sub	sp, #24
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
 8014f64:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8014f66:	2300      	movs	r3, #0
 8014f68:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014f6a:	683b      	ldr	r3, [r7, #0]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d109      	bne.n	8014f84 <netconn_recv+0x28>
 8014f70:	4b32      	ldr	r3, [pc, #200]	; (801503c <netconn_recv+0xe0>)
 8014f72:	f240 3263 	movw	r2, #867	; 0x363
 8014f76:	4932      	ldr	r1, [pc, #200]	; (8015040 <netconn_recv+0xe4>)
 8014f78:	4832      	ldr	r0, [pc, #200]	; (8015044 <netconn_recv+0xe8>)
 8014f7a:	f00e ffc1 	bl	8023f00 <iprintf>
 8014f7e:	f06f 030f 	mvn.w	r3, #15
 8014f82:	e056      	b.n	8015032 <netconn_recv+0xd6>
  *new_buf = NULL;
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	2200      	movs	r2, #0
 8014f88:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d109      	bne.n	8014fa4 <netconn_recv+0x48>
 8014f90:	4b2a      	ldr	r3, [pc, #168]	; (801503c <netconn_recv+0xe0>)
 8014f92:	f240 3265 	movw	r2, #869	; 0x365
 8014f96:	492c      	ldr	r1, [pc, #176]	; (8015048 <netconn_recv+0xec>)
 8014f98:	482a      	ldr	r0, [pc, #168]	; (8015044 <netconn_recv+0xe8>)
 8014f9a:	f00e ffb1 	bl	8023f00 <iprintf>
 8014f9e:	f06f 030f 	mvn.w	r3, #15
 8014fa2:	e046      	b.n	8015032 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	781b      	ldrb	r3, [r3, #0]
 8014fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014fac:	2b10      	cmp	r3, #16
 8014fae:	d13a      	bne.n	8015026 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8014fb4:	2006      	movs	r0, #6
 8014fb6:	f002 fe51 	bl	8017c5c <memp_malloc>
 8014fba:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d102      	bne.n	8014fc8 <netconn_recv+0x6c>
      return ERR_MEM;
 8014fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014fc6:	e034      	b.n	8015032 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8014fc8:	f107 030c 	add.w	r3, r7, #12
 8014fcc:	2200      	movs	r2, #0
 8014fce:	4619      	mov	r1, r3
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f7ff ff3f 	bl	8014e54 <netconn_recv_data_tcp>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014fda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d006      	beq.n	8014ff0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8014fe2:	6979      	ldr	r1, [r7, #20]
 8014fe4:	2006      	movs	r0, #6
 8014fe6:	f002 feaf 	bl	8017d48 <memp_free>
      return err;
 8014fea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014fee:	e020      	b.n	8015032 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d106      	bne.n	8015004 <netconn_recv+0xa8>
 8014ff6:	4b11      	ldr	r3, [pc, #68]	; (801503c <netconn_recv+0xe0>)
 8014ff8:	f240 3279 	movw	r2, #889	; 0x379
 8014ffc:	4913      	ldr	r1, [pc, #76]	; (801504c <netconn_recv+0xf0>)
 8014ffe:	4811      	ldr	r0, [pc, #68]	; (8015044 <netconn_recv+0xe8>)
 8015000:	f00e ff7e 	bl	8023f00 <iprintf>

    buf->p = p;
 8015004:	68fa      	ldr	r2, [r7, #12]
 8015006:	697b      	ldr	r3, [r7, #20]
 8015008:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801500a:	68fa      	ldr	r2, [r7, #12]
 801500c:	697b      	ldr	r3, [r7, #20]
 801500e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8015010:	697b      	ldr	r3, [r7, #20]
 8015012:	2200      	movs	r2, #0
 8015014:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8015016:	697b      	ldr	r3, [r7, #20]
 8015018:	2200      	movs	r2, #0
 801501a:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	697a      	ldr	r2, [r7, #20]
 8015020:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8015022:	2300      	movs	r3, #0
 8015024:	e005      	b.n	8015032 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8015026:	2200      	movs	r2, #0
 8015028:	6839      	ldr	r1, [r7, #0]
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	f7ff fe1a 	bl	8014c64 <netconn_recv_data>
 8015030:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8015032:	4618      	mov	r0, r3
 8015034:	3718      	adds	r7, #24
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}
 801503a:	bf00      	nop
 801503c:	080254a0 	.word	0x080254a0
 8015040:	080256b8 	.word	0x080256b8
 8015044:	080254f8 	.word	0x080254f8
 8015048:	080256d8 	.word	0x080256d8
 801504c:	08025750 	.word	0x08025750

08015050 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b08c      	sub	sp, #48	; 0x30
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
 8015058:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d109      	bne.n	8015074 <netconn_send+0x24>
 8015060:	4b0e      	ldr	r3, [pc, #56]	; (801509c <netconn_send+0x4c>)
 8015062:	f240 32b2 	movw	r2, #946	; 0x3b2
 8015066:	490e      	ldr	r1, [pc, #56]	; (80150a0 <netconn_send+0x50>)
 8015068:	480e      	ldr	r0, [pc, #56]	; (80150a4 <netconn_send+0x54>)
 801506a:	f00e ff49 	bl	8023f00 <iprintf>
 801506e:	f06f 030f 	mvn.w	r3, #15
 8015072:	e00e      	b.n	8015092 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8015078:	683b      	ldr	r3, [r7, #0]
 801507a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 801507c:	f107 030c 	add.w	r3, r7, #12
 8015080:	4619      	mov	r1, r3
 8015082:	4809      	ldr	r0, [pc, #36]	; (80150a8 <netconn_send+0x58>)
 8015084:	f7ff fbee 	bl	8014864 <netconn_apimsg>
 8015088:	4603      	mov	r3, r0
 801508a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 801508e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8015092:	4618      	mov	r0, r3
 8015094:	3730      	adds	r7, #48	; 0x30
 8015096:	46bd      	mov	sp, r7
 8015098:	bd80      	pop	{r7, pc}
 801509a:	bf00      	nop
 801509c:	080254a0 	.word	0x080254a0
 80150a0:	0802575c 	.word	0x0802575c
 80150a4:	080254f8 	.word	0x080254f8
 80150a8:	08016715 	.word	0x08016715

080150ac <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b088      	sub	sp, #32
 80150b0:	af02      	add	r7, sp, #8
 80150b2:	60f8      	str	r0, [r7, #12]
 80150b4:	60b9      	str	r1, [r7, #8]
 80150b6:	607a      	str	r2, [r7, #4]
 80150b8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80150ba:	68bb      	ldr	r3, [r7, #8]
 80150bc:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80150c2:	78fa      	ldrb	r2, [r7, #3]
 80150c4:	f107 0110 	add.w	r1, r7, #16
 80150c8:	6a3b      	ldr	r3, [r7, #32]
 80150ca:	9300      	str	r3, [sp, #0]
 80150cc:	4613      	mov	r3, r2
 80150ce:	2201      	movs	r2, #1
 80150d0:	68f8      	ldr	r0, [r7, #12]
 80150d2:	f000 f805 	bl	80150e0 <netconn_write_vectors_partly>
 80150d6:	4603      	mov	r3, r0
}
 80150d8:	4618      	mov	r0, r3
 80150da:	3718      	adds	r7, #24
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}

080150e0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b092      	sub	sp, #72	; 0x48
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	60f8      	str	r0, [r7, #12]
 80150e8:	60b9      	str	r1, [r7, #8]
 80150ea:	4611      	mov	r1, r2
 80150ec:	461a      	mov	r2, r3
 80150ee:	460b      	mov	r3, r1
 80150f0:	80fb      	strh	r3, [r7, #6]
 80150f2:	4613      	mov	r3, r2
 80150f4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d109      	bne.n	8015110 <netconn_write_vectors_partly+0x30>
 80150fc:	4b4e      	ldr	r3, [pc, #312]	; (8015238 <netconn_write_vectors_partly+0x158>)
 80150fe:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8015102:	494e      	ldr	r1, [pc, #312]	; (801523c <netconn_write_vectors_partly+0x15c>)
 8015104:	484e      	ldr	r0, [pc, #312]	; (8015240 <netconn_write_vectors_partly+0x160>)
 8015106:	f00e fefb 	bl	8023f00 <iprintf>
 801510a:	f06f 030f 	mvn.w	r3, #15
 801510e:	e08e      	b.n	801522e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015118:	2b10      	cmp	r3, #16
 801511a:	d009      	beq.n	8015130 <netconn_write_vectors_partly+0x50>
 801511c:	4b46      	ldr	r3, [pc, #280]	; (8015238 <netconn_write_vectors_partly+0x158>)
 801511e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8015122:	4948      	ldr	r1, [pc, #288]	; (8015244 <netconn_write_vectors_partly+0x164>)
 8015124:	4846      	ldr	r0, [pc, #280]	; (8015240 <netconn_write_vectors_partly+0x160>)
 8015126:	f00e feeb 	bl	8023f00 <iprintf>
 801512a:	f06f 0305 	mvn.w	r3, #5
 801512e:	e07e      	b.n	801522e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	7f1b      	ldrb	r3, [r3, #28]
 8015134:	f003 0302 	and.w	r3, r3, #2
 8015138:	2b00      	cmp	r3, #0
 801513a:	d104      	bne.n	8015146 <netconn_write_vectors_partly+0x66>
 801513c:	797b      	ldrb	r3, [r7, #5]
 801513e:	f003 0304 	and.w	r3, r3, #4
 8015142:	2b00      	cmp	r3, #0
 8015144:	d001      	beq.n	801514a <netconn_write_vectors_partly+0x6a>
 8015146:	2301      	movs	r3, #1
 8015148:	e000      	b.n	801514c <netconn_write_vectors_partly+0x6c>
 801514a:	2300      	movs	r3, #0
 801514c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8015150:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015154:	2b00      	cmp	r3, #0
 8015156:	d005      	beq.n	8015164 <netconn_write_vectors_partly+0x84>
 8015158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801515a:	2b00      	cmp	r3, #0
 801515c:	d102      	bne.n	8015164 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 801515e:	f06f 0305 	mvn.w	r3, #5
 8015162:	e064      	b.n	801522e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8015164:	2300      	movs	r3, #0
 8015166:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8015168:	2300      	movs	r3, #0
 801516a:	643b      	str	r3, [r7, #64]	; 0x40
 801516c:	e015      	b.n	801519a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 801516e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015170:	00db      	lsls	r3, r3, #3
 8015172:	68ba      	ldr	r2, [r7, #8]
 8015174:	4413      	add	r3, r2
 8015176:	685b      	ldr	r3, [r3, #4]
 8015178:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801517a:	4413      	add	r3, r2
 801517c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 801517e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015180:	00db      	lsls	r3, r3, #3
 8015182:	68ba      	ldr	r2, [r7, #8]
 8015184:	4413      	add	r3, r2
 8015186:	685b      	ldr	r3, [r3, #4]
 8015188:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801518a:	429a      	cmp	r2, r3
 801518c:	d202      	bcs.n	8015194 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 801518e:	f06f 0305 	mvn.w	r3, #5
 8015192:	e04c      	b.n	801522e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8015194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015196:	3301      	adds	r3, #1
 8015198:	643b      	str	r3, [r7, #64]	; 0x40
 801519a:	88fb      	ldrh	r3, [r7, #6]
 801519c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801519e:	429a      	cmp	r2, r3
 80151a0:	dbe5      	blt.n	801516e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80151a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d101      	bne.n	80151ac <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80151a8:	2300      	movs	r3, #0
 80151aa:	e040      	b.n	801522e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80151ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	da0a      	bge.n	80151c8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80151b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d102      	bne.n	80151be <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80151b8:	f06f 0305 	mvn.w	r3, #5
 80151bc:	e037      	b.n	801522e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80151be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80151c2:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80151c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151c6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80151d0:	88fb      	ldrh	r3, [r7, #6]
 80151d2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80151d4:	2300      	movs	r3, #0
 80151d6:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80151d8:	797b      	ldrb	r3, [r7, #5]
 80151da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80151de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151e0:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80151e2:	2300      	movs	r3, #0
 80151e4:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80151e6:	f107 0314 	add.w	r3, r7, #20
 80151ea:	4619      	mov	r1, r3
 80151ec:	4816      	ldr	r0, [pc, #88]	; (8015248 <netconn_write_vectors_partly+0x168>)
 80151ee:	f7ff fb39 	bl	8014864 <netconn_apimsg>
 80151f2:	4603      	mov	r3, r0
 80151f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80151f8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d114      	bne.n	801522a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8015200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015202:	2b00      	cmp	r3, #0
 8015204:	d002      	beq.n	801520c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8015206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801520a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 801520c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015210:	2b00      	cmp	r3, #0
 8015212:	d10a      	bne.n	801522a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8015214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015218:	429a      	cmp	r2, r3
 801521a:	d006      	beq.n	801522a <netconn_write_vectors_partly+0x14a>
 801521c:	4b06      	ldr	r3, [pc, #24]	; (8015238 <netconn_write_vectors_partly+0x158>)
 801521e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8015222:	490a      	ldr	r1, [pc, #40]	; (801524c <netconn_write_vectors_partly+0x16c>)
 8015224:	4806      	ldr	r0, [pc, #24]	; (8015240 <netconn_write_vectors_partly+0x160>)
 8015226:	f00e fe6b 	bl	8023f00 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 801522a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801522e:	4618      	mov	r0, r3
 8015230:	3748      	adds	r7, #72	; 0x48
 8015232:	46bd      	mov	sp, r7
 8015234:	bd80      	pop	{r7, pc}
 8015236:	bf00      	nop
 8015238:	080254a0 	.word	0x080254a0
 801523c:	08025778 	.word	0x08025778
 8015240:	080254f8 	.word	0x080254f8
 8015244:	08025794 	.word	0x08025794
 8015248:	08016bb1 	.word	0x08016bb1
 801524c:	080257b8 	.word	0x080257b8

08015250 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b08c      	sub	sp, #48	; 0x30
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
 8015258:	460b      	mov	r3, r1
 801525a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d109      	bne.n	8015276 <netconn_close_shutdown+0x26>
 8015262:	4b0f      	ldr	r3, [pc, #60]	; (80152a0 <netconn_close_shutdown+0x50>)
 8015264:	f240 4247 	movw	r2, #1095	; 0x447
 8015268:	490e      	ldr	r1, [pc, #56]	; (80152a4 <netconn_close_shutdown+0x54>)
 801526a:	480f      	ldr	r0, [pc, #60]	; (80152a8 <netconn_close_shutdown+0x58>)
 801526c:	f00e fe48 	bl	8023f00 <iprintf>
 8015270:	f06f 030f 	mvn.w	r3, #15
 8015274:	e010      	b.n	8015298 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 801527a:	78fb      	ldrb	r3, [r7, #3]
 801527c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801527e:	2329      	movs	r3, #41	; 0x29
 8015280:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8015282:	f107 030c 	add.w	r3, r7, #12
 8015286:	4619      	mov	r1, r3
 8015288:	4808      	ldr	r0, [pc, #32]	; (80152ac <netconn_close_shutdown+0x5c>)
 801528a:	f7ff faeb 	bl	8014864 <netconn_apimsg>
 801528e:	4603      	mov	r3, r0
 8015290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8015294:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8015298:	4618      	mov	r0, r3
 801529a:	3730      	adds	r7, #48	; 0x30
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	080254a0 	.word	0x080254a0
 80152a4:	080257dc 	.word	0x080257dc
 80152a8:	080254f8 	.word	0x080254f8
 80152ac:	08016cc9 	.word	0x08016cc9

080152b0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80152b8:	2103      	movs	r1, #3
 80152ba:	6878      	ldr	r0, [r7, #4]
 80152bc:	f7ff ffc8 	bl	8015250 <netconn_close_shutdown>
 80152c0:	4603      	mov	r3, r0
}
 80152c2:	4618      	mov	r0, r3
 80152c4:	3708      	adds	r7, #8
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bd80      	pop	{r7, pc}

080152ca <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80152ca:	b580      	push	{r7, lr}
 80152cc:	b084      	sub	sp, #16
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d101      	bne.n	80152dc <netconn_err+0x12>
    return ERR_OK;
 80152d8:	2300      	movs	r3, #0
 80152da:	e00d      	b.n	80152f8 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80152dc:	f00d fb7c 	bl	80229d8 <sys_arch_protect>
 80152e0:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	7a1b      	ldrb	r3, [r3, #8]
 80152e6:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2200      	movs	r2, #0
 80152ec:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80152ee:	68f8      	ldr	r0, [r7, #12]
 80152f0:	f00d fb80 	bl	80229f4 <sys_arch_unprotect>
  return err;
 80152f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80152f8:	4618      	mov	r0, r3
 80152fa:	3710      	adds	r7, #16
 80152fc:	46bd      	mov	sp, r7
 80152fe:	bd80      	pop	{r7, pc}

08015300 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b082      	sub	sp, #8
 8015304:	af00      	add	r7, sp, #0
 8015306:	4603      	mov	r3, r0
 8015308:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 801530a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801530e:	f113 0f0d 	cmn.w	r3, #13
 8015312:	d009      	beq.n	8015328 <lwip_netconn_err_to_msg+0x28>
 8015314:	f113 0f0d 	cmn.w	r3, #13
 8015318:	dc0c      	bgt.n	8015334 <lwip_netconn_err_to_msg+0x34>
 801531a:	f113 0f0f 	cmn.w	r3, #15
 801531e:	d007      	beq.n	8015330 <lwip_netconn_err_to_msg+0x30>
 8015320:	f113 0f0e 	cmn.w	r3, #14
 8015324:	d002      	beq.n	801532c <lwip_netconn_err_to_msg+0x2c>
 8015326:	e005      	b.n	8015334 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8015328:	4b0a      	ldr	r3, [pc, #40]	; (8015354 <lwip_netconn_err_to_msg+0x54>)
 801532a:	e00e      	b.n	801534a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 801532c:	4b0a      	ldr	r3, [pc, #40]	; (8015358 <lwip_netconn_err_to_msg+0x58>)
 801532e:	e00c      	b.n	801534a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8015330:	4b0a      	ldr	r3, [pc, #40]	; (801535c <lwip_netconn_err_to_msg+0x5c>)
 8015332:	e00a      	b.n	801534a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8015334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d005      	beq.n	8015348 <lwip_netconn_err_to_msg+0x48>
 801533c:	4b08      	ldr	r3, [pc, #32]	; (8015360 <lwip_netconn_err_to_msg+0x60>)
 801533e:	227d      	movs	r2, #125	; 0x7d
 8015340:	4908      	ldr	r1, [pc, #32]	; (8015364 <lwip_netconn_err_to_msg+0x64>)
 8015342:	4809      	ldr	r0, [pc, #36]	; (8015368 <lwip_netconn_err_to_msg+0x68>)
 8015344:	f00e fddc 	bl	8023f00 <iprintf>
      return NULL;
 8015348:	2300      	movs	r3, #0
  }
}
 801534a:	4618      	mov	r0, r3
 801534c:	3708      	adds	r7, #8
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}
 8015352:	bf00      	nop
 8015354:	080289e4 	.word	0x080289e4
 8015358:	080289e5 	.word	0x080289e5
 801535c:	080289e6 	.word	0x080289e6
 8015360:	080257f8 	.word	0x080257f8
 8015364:	0802582c 	.word	0x0802582c
 8015368:	0802583c 	.word	0x0802583c

0801536c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b082      	sub	sp, #8
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d105      	bne.n	8015388 <lwip_netconn_is_err_msg+0x1c>
 801537c:	4b12      	ldr	r3, [pc, #72]	; (80153c8 <lwip_netconn_is_err_msg+0x5c>)
 801537e:	2285      	movs	r2, #133	; 0x85
 8015380:	4912      	ldr	r1, [pc, #72]	; (80153cc <lwip_netconn_is_err_msg+0x60>)
 8015382:	4813      	ldr	r0, [pc, #76]	; (80153d0 <lwip_netconn_is_err_msg+0x64>)
 8015384:	f00e fdbc 	bl	8023f00 <iprintf>

  if (msg == &netconn_aborted) {
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	4a12      	ldr	r2, [pc, #72]	; (80153d4 <lwip_netconn_is_err_msg+0x68>)
 801538c:	4293      	cmp	r3, r2
 801538e:	d104      	bne.n	801539a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	22f3      	movs	r2, #243	; 0xf3
 8015394:	701a      	strb	r2, [r3, #0]
    return 1;
 8015396:	2301      	movs	r3, #1
 8015398:	e012      	b.n	80153c0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	4a0e      	ldr	r2, [pc, #56]	; (80153d8 <lwip_netconn_is_err_msg+0x6c>)
 801539e:	4293      	cmp	r3, r2
 80153a0:	d104      	bne.n	80153ac <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80153a2:	683b      	ldr	r3, [r7, #0]
 80153a4:	22f2      	movs	r2, #242	; 0xf2
 80153a6:	701a      	strb	r2, [r3, #0]
    return 1;
 80153a8:	2301      	movs	r3, #1
 80153aa:	e009      	b.n	80153c0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	4a0b      	ldr	r2, [pc, #44]	; (80153dc <lwip_netconn_is_err_msg+0x70>)
 80153b0:	4293      	cmp	r3, r2
 80153b2:	d104      	bne.n	80153be <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80153b4:	683b      	ldr	r3, [r7, #0]
 80153b6:	22f1      	movs	r2, #241	; 0xf1
 80153b8:	701a      	strb	r2, [r3, #0]
    return 1;
 80153ba:	2301      	movs	r3, #1
 80153bc:	e000      	b.n	80153c0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80153be:	2300      	movs	r3, #0
}
 80153c0:	4618      	mov	r0, r3
 80153c2:	3708      	adds	r7, #8
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}
 80153c8:	080257f8 	.word	0x080257f8
 80153cc:	08025864 	.word	0x08025864
 80153d0:	0802583c 	.word	0x0802583c
 80153d4:	080289e4 	.word	0x080289e4
 80153d8:	080289e5 	.word	0x080289e5
 80153dc:	080289e6 	.word	0x080289e6

080153e0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b088      	sub	sp, #32
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	60f8      	str	r0, [r7, #12]
 80153e8:	60b9      	str	r1, [r7, #8]
 80153ea:	607a      	str	r2, [r7, #4]
 80153ec:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80153ee:	68bb      	ldr	r3, [r7, #8]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d105      	bne.n	8015400 <recv_udp+0x20>
 80153f4:	4b34      	ldr	r3, [pc, #208]	; (80154c8 <recv_udp+0xe8>)
 80153f6:	22e5      	movs	r2, #229	; 0xe5
 80153f8:	4934      	ldr	r1, [pc, #208]	; (80154cc <recv_udp+0xec>)
 80153fa:	4835      	ldr	r0, [pc, #212]	; (80154d0 <recv_udp+0xf0>)
 80153fc:	f00e fd80 	bl	8023f00 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d105      	bne.n	8015412 <recv_udp+0x32>
 8015406:	4b30      	ldr	r3, [pc, #192]	; (80154c8 <recv_udp+0xe8>)
 8015408:	22e6      	movs	r2, #230	; 0xe6
 801540a:	4932      	ldr	r1, [pc, #200]	; (80154d4 <recv_udp+0xf4>)
 801540c:	4830      	ldr	r0, [pc, #192]	; (80154d0 <recv_udp+0xf0>)
 801540e:	f00e fd77 	bl	8023f00 <iprintf>
  conn = (struct netconn *)arg;
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8015416:	69fb      	ldr	r3, [r7, #28]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d103      	bne.n	8015424 <recv_udp+0x44>
    pbuf_free(p);
 801541c:	6878      	ldr	r0, [r7, #4]
 801541e:	f003 fb37 	bl	8018a90 <pbuf_free>
    return;
 8015422:	e04d      	b.n	80154c0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	685b      	ldr	r3, [r3, #4]
 8015428:	68ba      	ldr	r2, [r7, #8]
 801542a:	429a      	cmp	r2, r3
 801542c:	d005      	beq.n	801543a <recv_udp+0x5a>
 801542e:	4b26      	ldr	r3, [pc, #152]	; (80154c8 <recv_udp+0xe8>)
 8015430:	22ee      	movs	r2, #238	; 0xee
 8015432:	4929      	ldr	r1, [pc, #164]	; (80154d8 <recv_udp+0xf8>)
 8015434:	4826      	ldr	r0, [pc, #152]	; (80154d0 <recv_udp+0xf0>)
 8015436:	f00e fd63 	bl	8023f00 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801543a:	69fb      	ldr	r3, [r7, #28]
 801543c:	3310      	adds	r3, #16
 801543e:	4618      	mov	r0, r3
 8015440:	f00d f9af 	bl	80227a2 <sys_mbox_valid>
 8015444:	4603      	mov	r3, r0
 8015446:	2b00      	cmp	r3, #0
 8015448:	d103      	bne.n	8015452 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f003 fb20 	bl	8018a90 <pbuf_free>
    return;
 8015450:	e036      	b.n	80154c0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8015452:	2006      	movs	r0, #6
 8015454:	f002 fc02 	bl	8017c5c <memp_malloc>
 8015458:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 801545a:	69bb      	ldr	r3, [r7, #24]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d103      	bne.n	8015468 <recv_udp+0x88>
    pbuf_free(p);
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	f003 fb15 	bl	8018a90 <pbuf_free>
    return;
 8015466:	e02b      	b.n	80154c0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8015468:	69bb      	ldr	r3, [r7, #24]
 801546a:	687a      	ldr	r2, [r7, #4]
 801546c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801546e:	69bb      	ldr	r3, [r7, #24]
 8015470:	687a      	ldr	r2, [r7, #4]
 8015472:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d002      	beq.n	8015480 <recv_udp+0xa0>
 801547a:	683b      	ldr	r3, [r7, #0]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	e000      	b.n	8015482 <recv_udp+0xa2>
 8015480:	2300      	movs	r3, #0
 8015482:	69ba      	ldr	r2, [r7, #24]
 8015484:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8015486:	69bb      	ldr	r3, [r7, #24]
 8015488:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801548a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	891b      	ldrh	r3, [r3, #8]
 8015490:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8015492:	69fb      	ldr	r3, [r7, #28]
 8015494:	3310      	adds	r3, #16
 8015496:	69b9      	ldr	r1, [r7, #24]
 8015498:	4618      	mov	r0, r3
 801549a:	f00d f90d 	bl	80226b8 <sys_mbox_trypost>
 801549e:	4603      	mov	r3, r0
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d003      	beq.n	80154ac <recv_udp+0xcc>
    netbuf_delete(buf);
 80154a4:	69b8      	ldr	r0, [r7, #24]
 80154a6:	f001 fcaf 	bl	8016e08 <netbuf_delete>
    return;
 80154aa:	e009      	b.n	80154c0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80154ac:	69fb      	ldr	r3, [r7, #28]
 80154ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d005      	beq.n	80154c0 <recv_udp+0xe0>
 80154b4:	69fb      	ldr	r3, [r7, #28]
 80154b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154b8:	8afa      	ldrh	r2, [r7, #22]
 80154ba:	2100      	movs	r1, #0
 80154bc:	69f8      	ldr	r0, [r7, #28]
 80154be:	4798      	blx	r3
  }
}
 80154c0:	3720      	adds	r7, #32
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}
 80154c6:	bf00      	nop
 80154c8:	080257f8 	.word	0x080257f8
 80154cc:	08025870 	.word	0x08025870
 80154d0:	0802583c 	.word	0x0802583c
 80154d4:	08025894 	.word	0x08025894
 80154d8:	080258b4 	.word	0x080258b4

080154dc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b088      	sub	sp, #32
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	60f8      	str	r0, [r7, #12]
 80154e4:	60b9      	str	r1, [r7, #8]
 80154e6:	607a      	str	r2, [r7, #4]
 80154e8:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80154ea:	68bb      	ldr	r3, [r7, #8]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d106      	bne.n	80154fe <recv_tcp+0x22>
 80154f0:	4b36      	ldr	r3, [pc, #216]	; (80155cc <recv_tcp+0xf0>)
 80154f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80154f6:	4936      	ldr	r1, [pc, #216]	; (80155d0 <recv_tcp+0xf4>)
 80154f8:	4836      	ldr	r0, [pc, #216]	; (80155d4 <recv_tcp+0xf8>)
 80154fa:	f00e fd01 	bl	8023f00 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d106      	bne.n	8015512 <recv_tcp+0x36>
 8015504:	4b31      	ldr	r3, [pc, #196]	; (80155cc <recv_tcp+0xf0>)
 8015506:	f240 122d 	movw	r2, #301	; 0x12d
 801550a:	4933      	ldr	r1, [pc, #204]	; (80155d8 <recv_tcp+0xfc>)
 801550c:	4831      	ldr	r0, [pc, #196]	; (80155d4 <recv_tcp+0xf8>)
 801550e:	f00e fcf7 	bl	8023f00 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8015512:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d006      	beq.n	8015528 <recv_tcp+0x4c>
 801551a:	4b2c      	ldr	r3, [pc, #176]	; (80155cc <recv_tcp+0xf0>)
 801551c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8015520:	492e      	ldr	r1, [pc, #184]	; (80155dc <recv_tcp+0x100>)
 8015522:	482c      	ldr	r0, [pc, #176]	; (80155d4 <recv_tcp+0xf8>)
 8015524:	f00e fcec 	bl	8023f00 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d102      	bne.n	8015538 <recv_tcp+0x5c>
    return ERR_VAL;
 8015532:	f06f 0305 	mvn.w	r3, #5
 8015536:	e045      	b.n	80155c4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	685b      	ldr	r3, [r3, #4]
 801553c:	68ba      	ldr	r2, [r7, #8]
 801553e:	429a      	cmp	r2, r3
 8015540:	d006      	beq.n	8015550 <recv_tcp+0x74>
 8015542:	4b22      	ldr	r3, [pc, #136]	; (80155cc <recv_tcp+0xf0>)
 8015544:	f240 1235 	movw	r2, #309	; 0x135
 8015548:	4925      	ldr	r1, [pc, #148]	; (80155e0 <recv_tcp+0x104>)
 801554a:	4822      	ldr	r0, [pc, #136]	; (80155d4 <recv_tcp+0xf8>)
 801554c:	f00e fcd8 	bl	8023f00 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	3310      	adds	r3, #16
 8015554:	4618      	mov	r0, r3
 8015556:	f00d f924 	bl	80227a2 <sys_mbox_valid>
 801555a:	4603      	mov	r3, r0
 801555c:	2b00      	cmp	r3, #0
 801555e:	d10d      	bne.n	801557c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d008      	beq.n	8015578 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	891b      	ldrh	r3, [r3, #8]
 801556a:	4619      	mov	r1, r3
 801556c:	68b8      	ldr	r0, [r7, #8]
 801556e:	f004 fa57 	bl	8019a20 <tcp_recved>
      pbuf_free(p);
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	f003 fa8c 	bl	8018a90 <pbuf_free>
    }
    return ERR_OK;
 8015578:	2300      	movs	r3, #0
 801557a:	e023      	b.n	80155c4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d005      	beq.n	801558e <recv_tcp+0xb2>
    msg = p;
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	891b      	ldrh	r3, [r3, #8]
 801558a:	83fb      	strh	r3, [r7, #30]
 801558c:	e003      	b.n	8015596 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801558e:	4b15      	ldr	r3, [pc, #84]	; (80155e4 <recv_tcp+0x108>)
 8015590:	61bb      	str	r3, [r7, #24]
    len = 0;
 8015592:	2300      	movs	r3, #0
 8015594:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	3310      	adds	r3, #16
 801559a:	69b9      	ldr	r1, [r7, #24]
 801559c:	4618      	mov	r0, r3
 801559e:	f00d f88b 	bl	80226b8 <sys_mbox_trypost>
 80155a2:	4603      	mov	r3, r0
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d002      	beq.n	80155ae <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80155a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80155ac:	e00a      	b.n	80155c4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d005      	beq.n	80155c2 <recv_tcp+0xe6>
 80155b6:	697b      	ldr	r3, [r7, #20]
 80155b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155ba:	8bfa      	ldrh	r2, [r7, #30]
 80155bc:	2100      	movs	r1, #0
 80155be:	6978      	ldr	r0, [r7, #20]
 80155c0:	4798      	blx	r3
  }

  return ERR_OK;
 80155c2:	2300      	movs	r3, #0
}
 80155c4:	4618      	mov	r0, r3
 80155c6:	3720      	adds	r7, #32
 80155c8:	46bd      	mov	sp, r7
 80155ca:	bd80      	pop	{r7, pc}
 80155cc:	080257f8 	.word	0x080257f8
 80155d0:	080258d4 	.word	0x080258d4
 80155d4:	0802583c 	.word	0x0802583c
 80155d8:	080258f8 	.word	0x080258f8
 80155dc:	08025918 	.word	0x08025918
 80155e0:	08025930 	.word	0x08025930
 80155e4:	080289e6 	.word	0x080289e6

080155e8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b084      	sub	sp, #16
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
 80155f0:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d106      	bne.n	801560a <poll_tcp+0x22>
 80155fc:	4b29      	ldr	r3, [pc, #164]	; (80156a4 <poll_tcp+0xbc>)
 80155fe:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8015602:	4929      	ldr	r1, [pc, #164]	; (80156a8 <poll_tcp+0xc0>)
 8015604:	4829      	ldr	r0, [pc, #164]	; (80156ac <poll_tcp+0xc4>)
 8015606:	f00e fc7b 	bl	8023f00 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	785b      	ldrb	r3, [r3, #1]
 801560e:	2b01      	cmp	r3, #1
 8015610:	d104      	bne.n	801561c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8015612:	2101      	movs	r1, #1
 8015614:	68f8      	ldr	r0, [r7, #12]
 8015616:	f001 f8ff 	bl	8016818 <lwip_netconn_do_writemore>
 801561a:	e016      	b.n	801564a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	785b      	ldrb	r3, [r3, #1]
 8015620:	2b04      	cmp	r3, #4
 8015622:	d112      	bne.n	801564a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	6a1b      	ldr	r3, [r3, #32]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d00a      	beq.n	8015642 <poll_tcp+0x5a>
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	6a1b      	ldr	r3, [r3, #32]
 8015630:	7a5b      	ldrb	r3, [r3, #9]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d005      	beq.n	8015642 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	6a1b      	ldr	r3, [r3, #32]
 801563a:	7a5a      	ldrb	r2, [r3, #9]
 801563c:	3a01      	subs	r2, #1
 801563e:	b2d2      	uxtb	r2, r2
 8015640:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8015642:	2101      	movs	r1, #1
 8015644:	68f8      	ldr	r0, [r7, #12]
 8015646:	f000 fbf7 	bl	8015e38 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	7f1b      	ldrb	r3, [r3, #28]
 801564e:	f003 0310 	and.w	r3, r3, #16
 8015652:	2b00      	cmp	r3, #0
 8015654:	d021      	beq.n	801569a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	685b      	ldr	r3, [r3, #4]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d01d      	beq.n	801569a <poll_tcp+0xb2>
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	685b      	ldr	r3, [r3, #4]
 8015662:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015666:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801566a:	d316      	bcc.n	801569a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	685b      	ldr	r3, [r3, #4]
 8015670:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8015674:	2b04      	cmp	r3, #4
 8015676:	d810      	bhi.n	801569a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	7f1b      	ldrb	r3, [r3, #28]
 801567c:	f023 0310 	bic.w	r3, r3, #16
 8015680:	b2da      	uxtb	r2, r3
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801568a:	2b00      	cmp	r3, #0
 801568c:	d005      	beq.n	801569a <poll_tcp+0xb2>
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015692:	2200      	movs	r2, #0
 8015694:	2102      	movs	r1, #2
 8015696:	68f8      	ldr	r0, [r7, #12]
 8015698:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801569a:	2300      	movs	r3, #0
}
 801569c:	4618      	mov	r0, r3
 801569e:	3710      	adds	r7, #16
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}
 80156a4:	080257f8 	.word	0x080257f8
 80156a8:	08025950 	.word	0x08025950
 80156ac:	0802583c 	.word	0x0802583c

080156b0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b086      	sub	sp, #24
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	60f8      	str	r0, [r7, #12]
 80156b8:	60b9      	str	r1, [r7, #8]
 80156ba:	4613      	mov	r3, r2
 80156bc:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80156c2:	697b      	ldr	r3, [r7, #20]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d106      	bne.n	80156d6 <sent_tcp+0x26>
 80156c8:	4b20      	ldr	r3, [pc, #128]	; (801574c <sent_tcp+0x9c>)
 80156ca:	f240 1293 	movw	r2, #403	; 0x193
 80156ce:	4920      	ldr	r1, [pc, #128]	; (8015750 <sent_tcp+0xa0>)
 80156d0:	4820      	ldr	r0, [pc, #128]	; (8015754 <sent_tcp+0xa4>)
 80156d2:	f00e fc15 	bl	8023f00 <iprintf>

  if (conn) {
 80156d6:	697b      	ldr	r3, [r7, #20]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d032      	beq.n	8015742 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80156dc:	697b      	ldr	r3, [r7, #20]
 80156de:	785b      	ldrb	r3, [r3, #1]
 80156e0:	2b01      	cmp	r3, #1
 80156e2:	d104      	bne.n	80156ee <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80156e4:	2101      	movs	r1, #1
 80156e6:	6978      	ldr	r0, [r7, #20]
 80156e8:	f001 f896 	bl	8016818 <lwip_netconn_do_writemore>
 80156ec:	e007      	b.n	80156fe <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80156ee:	697b      	ldr	r3, [r7, #20]
 80156f0:	785b      	ldrb	r3, [r3, #1]
 80156f2:	2b04      	cmp	r3, #4
 80156f4:	d103      	bne.n	80156fe <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80156f6:	2101      	movs	r1, #1
 80156f8:	6978      	ldr	r0, [r7, #20]
 80156fa:	f000 fb9d 	bl	8015e38 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80156fe:	697b      	ldr	r3, [r7, #20]
 8015700:	685b      	ldr	r3, [r3, #4]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d01d      	beq.n	8015742 <sent_tcp+0x92>
 8015706:	697b      	ldr	r3, [r7, #20]
 8015708:	685b      	ldr	r3, [r3, #4]
 801570a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801570e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8015712:	d316      	bcc.n	8015742 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	685b      	ldr	r3, [r3, #4]
 8015718:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801571c:	2b04      	cmp	r3, #4
 801571e:	d810      	bhi.n	8015742 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8015720:	697b      	ldr	r3, [r7, #20]
 8015722:	7f1b      	ldrb	r3, [r3, #28]
 8015724:	f023 0310 	bic.w	r3, r3, #16
 8015728:	b2da      	uxtb	r2, r3
 801572a:	697b      	ldr	r3, [r7, #20]
 801572c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 801572e:	697b      	ldr	r3, [r7, #20]
 8015730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015732:	2b00      	cmp	r3, #0
 8015734:	d005      	beq.n	8015742 <sent_tcp+0x92>
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801573a:	88fa      	ldrh	r2, [r7, #6]
 801573c:	2102      	movs	r1, #2
 801573e:	6978      	ldr	r0, [r7, #20]
 8015740:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8015742:	2300      	movs	r3, #0
}
 8015744:	4618      	mov	r0, r3
 8015746:	3718      	adds	r7, #24
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}
 801574c:	080257f8 	.word	0x080257f8
 8015750:	08025950 	.word	0x08025950
 8015754:	0802583c 	.word	0x0802583c

08015758 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b088      	sub	sp, #32
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
 8015760:	460b      	mov	r3, r1
 8015762:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015768:	69fb      	ldr	r3, [r7, #28]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d106      	bne.n	801577c <err_tcp+0x24>
 801576e:	4b5f      	ldr	r3, [pc, #380]	; (80158ec <err_tcp+0x194>)
 8015770:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015774:	495e      	ldr	r1, [pc, #376]	; (80158f0 <err_tcp+0x198>)
 8015776:	485f      	ldr	r0, [pc, #380]	; (80158f4 <err_tcp+0x19c>)
 8015778:	f00e fbc2 	bl	8023f00 <iprintf>

  SYS_ARCH_PROTECT(lev);
 801577c:	f00d f92c 	bl	80229d8 <sys_arch_protect>
 8015780:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8015782:	69fb      	ldr	r3, [r7, #28]
 8015784:	2200      	movs	r2, #0
 8015786:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8015788:	69fb      	ldr	r3, [r7, #28]
 801578a:	78fa      	ldrb	r2, [r7, #3]
 801578c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 801578e:	69fb      	ldr	r3, [r7, #28]
 8015790:	7f1b      	ldrb	r3, [r3, #28]
 8015792:	f043 0301 	orr.w	r3, r3, #1
 8015796:	b2da      	uxtb	r2, r3
 8015798:	69fb      	ldr	r3, [r7, #28]
 801579a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 801579c:	69fb      	ldr	r3, [r7, #28]
 801579e:	785b      	ldrb	r3, [r3, #1]
 80157a0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80157a2:	69fb      	ldr	r3, [r7, #28]
 80157a4:	2200      	movs	r2, #0
 80157a6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80157a8:	69b8      	ldr	r0, [r7, #24]
 80157aa:	f00d f923 	bl	80229f4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80157ae:	69fb      	ldr	r3, [r7, #28]
 80157b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d005      	beq.n	80157c2 <err_tcp+0x6a>
 80157b6:	69fb      	ldr	r3, [r7, #28]
 80157b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157ba:	2200      	movs	r2, #0
 80157bc:	2104      	movs	r1, #4
 80157be:	69f8      	ldr	r0, [r7, #28]
 80157c0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80157c2:	69fb      	ldr	r3, [r7, #28]
 80157c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d005      	beq.n	80157d6 <err_tcp+0x7e>
 80157ca:	69fb      	ldr	r3, [r7, #28]
 80157cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157ce:	2200      	movs	r2, #0
 80157d0:	2100      	movs	r1, #0
 80157d2:	69f8      	ldr	r0, [r7, #28]
 80157d4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80157d6:	69fb      	ldr	r3, [r7, #28]
 80157d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d005      	beq.n	80157ea <err_tcp+0x92>
 80157de:	69fb      	ldr	r3, [r7, #28]
 80157e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157e2:	2200      	movs	r2, #0
 80157e4:	2102      	movs	r1, #2
 80157e6:	69f8      	ldr	r0, [r7, #28]
 80157e8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80157ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80157ee:	4618      	mov	r0, r3
 80157f0:	f7ff fd86 	bl	8015300 <lwip_netconn_err_to_msg>
 80157f4:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80157f6:	69fb      	ldr	r3, [r7, #28]
 80157f8:	3310      	adds	r3, #16
 80157fa:	4618      	mov	r0, r3
 80157fc:	f00c ffd1 	bl	80227a2 <sys_mbox_valid>
 8015800:	4603      	mov	r3, r0
 8015802:	2b00      	cmp	r3, #0
 8015804:	d005      	beq.n	8015812 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8015806:	69fb      	ldr	r3, [r7, #28]
 8015808:	3310      	adds	r3, #16
 801580a:	6939      	ldr	r1, [r7, #16]
 801580c:	4618      	mov	r0, r3
 801580e:	f00c ff53 	bl	80226b8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8015812:	69fb      	ldr	r3, [r7, #28]
 8015814:	3314      	adds	r3, #20
 8015816:	4618      	mov	r0, r3
 8015818:	f00c ffc3 	bl	80227a2 <sys_mbox_valid>
 801581c:	4603      	mov	r3, r0
 801581e:	2b00      	cmp	r3, #0
 8015820:	d005      	beq.n	801582e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8015822:	69fb      	ldr	r3, [r7, #28]
 8015824:	3314      	adds	r3, #20
 8015826:	6939      	ldr	r1, [r7, #16]
 8015828:	4618      	mov	r0, r3
 801582a:	f00c ff45 	bl	80226b8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801582e:	7dfb      	ldrb	r3, [r7, #23]
 8015830:	2b01      	cmp	r3, #1
 8015832:	d005      	beq.n	8015840 <err_tcp+0xe8>
 8015834:	7dfb      	ldrb	r3, [r7, #23]
 8015836:	2b04      	cmp	r3, #4
 8015838:	d002      	beq.n	8015840 <err_tcp+0xe8>
 801583a:	7dfb      	ldrb	r3, [r7, #23]
 801583c:	2b03      	cmp	r3, #3
 801583e:	d143      	bne.n	80158c8 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8015840:	69fb      	ldr	r3, [r7, #28]
 8015842:	7f1b      	ldrb	r3, [r3, #28]
 8015844:	f003 0304 	and.w	r3, r3, #4
 8015848:	2b00      	cmp	r3, #0
 801584a:	bf14      	ite	ne
 801584c:	2301      	movne	r3, #1
 801584e:	2300      	moveq	r3, #0
 8015850:	b2db      	uxtb	r3, r3
 8015852:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8015854:	69fb      	ldr	r3, [r7, #28]
 8015856:	7f1b      	ldrb	r3, [r3, #28]
 8015858:	f023 0304 	bic.w	r3, r3, #4
 801585c:	b2da      	uxtb	r2, r3
 801585e:	69fb      	ldr	r3, [r7, #28]
 8015860:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d13b      	bne.n	80158e0 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015868:	69fb      	ldr	r3, [r7, #28]
 801586a:	6a1b      	ldr	r3, [r3, #32]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d106      	bne.n	801587e <err_tcp+0x126>
 8015870:	4b1e      	ldr	r3, [pc, #120]	; (80158ec <err_tcp+0x194>)
 8015872:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015876:	4920      	ldr	r1, [pc, #128]	; (80158f8 <err_tcp+0x1a0>)
 8015878:	481e      	ldr	r0, [pc, #120]	; (80158f4 <err_tcp+0x19c>)
 801587a:	f00e fb41 	bl	8023f00 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 801587e:	7dfb      	ldrb	r3, [r7, #23]
 8015880:	2b04      	cmp	r3, #4
 8015882:	d104      	bne.n	801588e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8015884:	69fb      	ldr	r3, [r7, #28]
 8015886:	6a1b      	ldr	r3, [r3, #32]
 8015888:	2200      	movs	r2, #0
 801588a:	711a      	strb	r2, [r3, #4]
 801588c:	e003      	b.n	8015896 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 801588e:	69fb      	ldr	r3, [r7, #28]
 8015890:	6a1b      	ldr	r3, [r3, #32]
 8015892:	78fa      	ldrb	r2, [r7, #3]
 8015894:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015896:	69fb      	ldr	r3, [r7, #28]
 8015898:	6a1b      	ldr	r3, [r3, #32]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	330c      	adds	r3, #12
 801589e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80158a0:	68b8      	ldr	r0, [r7, #8]
 80158a2:	f00d f80f 	bl	80228c4 <sys_sem_valid>
 80158a6:	4603      	mov	r3, r0
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d106      	bne.n	80158ba <err_tcp+0x162>
 80158ac:	4b0f      	ldr	r3, [pc, #60]	; (80158ec <err_tcp+0x194>)
 80158ae:	f240 12ef 	movw	r2, #495	; 0x1ef
 80158b2:	4912      	ldr	r1, [pc, #72]	; (80158fc <err_tcp+0x1a4>)
 80158b4:	480f      	ldr	r0, [pc, #60]	; (80158f4 <err_tcp+0x19c>)
 80158b6:	f00e fb23 	bl	8023f00 <iprintf>
      conn->current_msg = NULL;
 80158ba:	69fb      	ldr	r3, [r7, #28]
 80158bc:	2200      	movs	r2, #0
 80158be:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80158c0:	68b8      	ldr	r0, [r7, #8]
 80158c2:	f00c ffe5 	bl	8022890 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80158c6:	e00b      	b.n	80158e0 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80158c8:	69fb      	ldr	r3, [r7, #28]
 80158ca:	6a1b      	ldr	r3, [r3, #32]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d008      	beq.n	80158e2 <err_tcp+0x18a>
 80158d0:	4b06      	ldr	r3, [pc, #24]	; (80158ec <err_tcp+0x194>)
 80158d2:	f240 12f7 	movw	r2, #503	; 0x1f7
 80158d6:	490a      	ldr	r1, [pc, #40]	; (8015900 <err_tcp+0x1a8>)
 80158d8:	4806      	ldr	r0, [pc, #24]	; (80158f4 <err_tcp+0x19c>)
 80158da:	f00e fb11 	bl	8023f00 <iprintf>
  }
}
 80158de:	e000      	b.n	80158e2 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80158e0:	bf00      	nop
}
 80158e2:	bf00      	nop
 80158e4:	3720      	adds	r7, #32
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bd80      	pop	{r7, pc}
 80158ea:	bf00      	nop
 80158ec:	080257f8 	.word	0x080257f8
 80158f0:	08025950 	.word	0x08025950
 80158f4:	0802583c 	.word	0x0802583c
 80158f8:	08025960 	.word	0x08025960
 80158fc:	0802597c 	.word	0x0802597c
 8015900:	08025998 	.word	0x08025998

08015904 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b084      	sub	sp, #16
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	685b      	ldr	r3, [r3, #4]
 8015910:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8015912:	6879      	ldr	r1, [r7, #4]
 8015914:	68f8      	ldr	r0, [r7, #12]
 8015916:	f005 f861 	bl	801a9dc <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 801591a:	490a      	ldr	r1, [pc, #40]	; (8015944 <setup_tcp+0x40>)
 801591c:	68f8      	ldr	r0, [r7, #12]
 801591e:	f005 f86f 	bl	801aa00 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8015922:	4909      	ldr	r1, [pc, #36]	; (8015948 <setup_tcp+0x44>)
 8015924:	68f8      	ldr	r0, [r7, #12]
 8015926:	f005 f88d 	bl	801aa44 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 801592a:	2202      	movs	r2, #2
 801592c:	4907      	ldr	r1, [pc, #28]	; (801594c <setup_tcp+0x48>)
 801592e:	68f8      	ldr	r0, [r7, #12]
 8015930:	f005 f8e4 	bl	801aafc <tcp_poll>
  tcp_err(pcb, err_tcp);
 8015934:	4906      	ldr	r1, [pc, #24]	; (8015950 <setup_tcp+0x4c>)
 8015936:	68f8      	ldr	r0, [r7, #12]
 8015938:	f005 f8a6 	bl	801aa88 <tcp_err>
}
 801593c:	bf00      	nop
 801593e:	3710      	adds	r7, #16
 8015940:	46bd      	mov	sp, r7
 8015942:	bd80      	pop	{r7, pc}
 8015944:	080154dd 	.word	0x080154dd
 8015948:	080156b1 	.word	0x080156b1
 801594c:	080155e9 	.word	0x080155e9
 8015950:	08015759 	.word	0x08015759

08015954 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8015954:	b590      	push	{r4, r7, lr}
 8015956:	b089      	sub	sp, #36	; 0x24
 8015958:	af00      	add	r7, sp, #0
 801595a:	60f8      	str	r0, [r7, #12]
 801595c:	60b9      	str	r1, [r7, #8]
 801595e:	4613      	mov	r3, r2
 8015960:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8015966:	69fb      	ldr	r3, [r7, #28]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d102      	bne.n	8015972 <accept_function+0x1e>
    return ERR_VAL;
 801596c:	f06f 0305 	mvn.w	r3, #5
 8015970:	e0a1      	b.n	8015ab6 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8015972:	69fb      	ldr	r3, [r7, #28]
 8015974:	3314      	adds	r3, #20
 8015976:	4618      	mov	r0, r3
 8015978:	f00c ff13 	bl	80227a2 <sys_mbox_valid>
 801597c:	4603      	mov	r3, r0
 801597e:	2b00      	cmp	r3, #0
 8015980:	d102      	bne.n	8015988 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8015982:	f06f 0305 	mvn.w	r3, #5
 8015986:	e096      	b.n	8015ab6 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8015988:	68bb      	ldr	r3, [r7, #8]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d11b      	bne.n	80159c6 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 801598e:	69fb      	ldr	r3, [r7, #28]
 8015990:	f103 0414 	add.w	r4, r3, #20
 8015994:	f06f 000c 	mvn.w	r0, #12
 8015998:	f7ff fcb2 	bl	8015300 <lwip_netconn_err_to_msg>
 801599c:	4603      	mov	r3, r0
 801599e:	4619      	mov	r1, r3
 80159a0:	4620      	mov	r0, r4
 80159a2:	f00c fe89 	bl	80226b8 <sys_mbox_trypost>
 80159a6:	4603      	mov	r3, r0
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d109      	bne.n	80159c0 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80159ac:	69fb      	ldr	r3, [r7, #28]
 80159ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d005      	beq.n	80159c0 <accept_function+0x6c>
 80159b4:	69fb      	ldr	r3, [r7, #28]
 80159b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159b8:	2200      	movs	r2, #0
 80159ba:	2100      	movs	r1, #0
 80159bc:	69f8      	ldr	r0, [r7, #28]
 80159be:	4798      	blx	r3
    }
    return ERR_VAL;
 80159c0:	f06f 0305 	mvn.w	r3, #5
 80159c4:	e077      	b.n	8015ab6 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80159c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d006      	beq.n	80159dc <accept_function+0x88>
 80159ce:	4b3c      	ldr	r3, [pc, #240]	; (8015ac0 <accept_function+0x16c>)
 80159d0:	f240 222a 	movw	r2, #554	; 0x22a
 80159d4:	493b      	ldr	r1, [pc, #236]	; (8015ac4 <accept_function+0x170>)
 80159d6:	483c      	ldr	r0, [pc, #240]	; (8015ac8 <accept_function+0x174>)
 80159d8:	f00e fa92 	bl	8023f00 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80159dc:	69fb      	ldr	r3, [r7, #28]
 80159de:	781a      	ldrb	r2, [r3, #0]
 80159e0:	69fb      	ldr	r3, [r7, #28]
 80159e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159e4:	4619      	mov	r1, r3
 80159e6:	4610      	mov	r0, r2
 80159e8:	f000 f8f0 	bl	8015bcc <netconn_alloc>
 80159ec:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80159ee:	69bb      	ldr	r3, [r7, #24]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d11b      	bne.n	8015a2c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80159f4:	69fb      	ldr	r3, [r7, #28]
 80159f6:	f103 0414 	add.w	r4, r3, #20
 80159fa:	f06f 000c 	mvn.w	r0, #12
 80159fe:	f7ff fc7f 	bl	8015300 <lwip_netconn_err_to_msg>
 8015a02:	4603      	mov	r3, r0
 8015a04:	4619      	mov	r1, r3
 8015a06:	4620      	mov	r0, r4
 8015a08:	f00c fe56 	bl	80226b8 <sys_mbox_trypost>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d109      	bne.n	8015a26 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015a12:	69fb      	ldr	r3, [r7, #28]
 8015a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d005      	beq.n	8015a26 <accept_function+0xd2>
 8015a1a:	69fb      	ldr	r3, [r7, #28]
 8015a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a1e:	2200      	movs	r2, #0
 8015a20:	2100      	movs	r1, #0
 8015a22:	69f8      	ldr	r0, [r7, #28]
 8015a24:	4798      	blx	r3
    }
    return ERR_MEM;
 8015a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a2a:	e044      	b.n	8015ab6 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8015a2c:	69bb      	ldr	r3, [r7, #24]
 8015a2e:	68ba      	ldr	r2, [r7, #8]
 8015a30:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8015a32:	69b8      	ldr	r0, [r7, #24]
 8015a34:	f7ff ff66 	bl	8015904 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8015a38:	69fb      	ldr	r3, [r7, #28]
 8015a3a:	3314      	adds	r3, #20
 8015a3c:	69b9      	ldr	r1, [r7, #24]
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f00c fe3a 	bl	80226b8 <sys_mbox_trypost>
 8015a44:	4603      	mov	r3, r0
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d02a      	beq.n	8015aa0 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8015a4a:	69bb      	ldr	r3, [r7, #24]
 8015a4c:	685b      	ldr	r3, [r3, #4]
 8015a4e:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8015a50:	2100      	movs	r1, #0
 8015a52:	6978      	ldr	r0, [r7, #20]
 8015a54:	f004 ffc2 	bl	801a9dc <tcp_arg>
    tcp_recv(pcb, NULL);
 8015a58:	2100      	movs	r1, #0
 8015a5a:	6978      	ldr	r0, [r7, #20]
 8015a5c:	f004 ffd0 	bl	801aa00 <tcp_recv>
    tcp_sent(pcb, NULL);
 8015a60:	2100      	movs	r1, #0
 8015a62:	6978      	ldr	r0, [r7, #20]
 8015a64:	f004 ffee 	bl	801aa44 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8015a68:	2200      	movs	r2, #0
 8015a6a:	2100      	movs	r1, #0
 8015a6c:	6978      	ldr	r0, [r7, #20]
 8015a6e:	f005 f845 	bl	801aafc <tcp_poll>
    tcp_err(pcb, NULL);
 8015a72:	2100      	movs	r1, #0
 8015a74:	6978      	ldr	r0, [r7, #20]
 8015a76:	f005 f807 	bl	801aa88 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8015a7a:	69bb      	ldr	r3, [r7, #24]
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8015a80:	69bb      	ldr	r3, [r7, #24]
 8015a82:	3310      	adds	r3, #16
 8015a84:	4618      	mov	r0, r3
 8015a86:	f00c fe05 	bl	8022694 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8015a8a:	69bb      	ldr	r3, [r7, #24]
 8015a8c:	3310      	adds	r3, #16
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f00c fe98 	bl	80227c4 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8015a94:	69b8      	ldr	r0, [r7, #24]
 8015a96:	f000 f907 	bl	8015ca8 <netconn_free>
    return ERR_MEM;
 8015a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a9e:	e00a      	b.n	8015ab6 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015aa0:	69fb      	ldr	r3, [r7, #28]
 8015aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d005      	beq.n	8015ab4 <accept_function+0x160>
 8015aa8:	69fb      	ldr	r3, [r7, #28]
 8015aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aac:	2200      	movs	r2, #0
 8015aae:	2100      	movs	r1, #0
 8015ab0:	69f8      	ldr	r0, [r7, #28]
 8015ab2:	4798      	blx	r3
  }

  return ERR_OK;
 8015ab4:	2300      	movs	r3, #0
}
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3724      	adds	r7, #36	; 0x24
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd90      	pop	{r4, r7, pc}
 8015abe:	bf00      	nop
 8015ac0:	080257f8 	.word	0x080257f8
 8015ac4:	080259b4 	.word	0x080259b4
 8015ac8:	0802583c 	.word	0x0802583c

08015acc <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8015acc:	b590      	push	{r4, r7, lr}
 8015ace:	b085      	sub	sp, #20
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	685b      	ldr	r3, [r3, #4]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d006      	beq.n	8015af0 <pcb_new+0x24>
 8015ae2:	4b2b      	ldr	r3, [pc, #172]	; (8015b90 <pcb_new+0xc4>)
 8015ae4:	f240 2265 	movw	r2, #613	; 0x265
 8015ae8:	492a      	ldr	r1, [pc, #168]	; (8015b94 <pcb_new+0xc8>)
 8015aea:	482b      	ldr	r0, [pc, #172]	; (8015b98 <pcb_new+0xcc>)
 8015aec:	f00e fa08 	bl	8023f00 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	781b      	ldrb	r3, [r3, #0]
 8015af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015afa:	2b10      	cmp	r3, #16
 8015afc:	d022      	beq.n	8015b44 <pcb_new+0x78>
 8015afe:	2b20      	cmp	r3, #32
 8015b00:	d133      	bne.n	8015b6a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681c      	ldr	r4, [r3, #0]
 8015b06:	7bfb      	ldrb	r3, [r7, #15]
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f00a fa9e 	bl	802004a <udp_new_ip_type>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	685b      	ldr	r3, [r3, #4]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d02a      	beq.n	8015b72 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	781b      	ldrb	r3, [r3, #0]
 8015b22:	2b22      	cmp	r3, #34	; 0x22
 8015b24:	d104      	bne.n	8015b30 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	685b      	ldr	r3, [r3, #4]
 8015b2c:	2201      	movs	r2, #1
 8015b2e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	6858      	ldr	r0, [r3, #4]
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	461a      	mov	r2, r3
 8015b3c:	4917      	ldr	r1, [pc, #92]	; (8015b9c <pcb_new+0xd0>)
 8015b3e:	f00a fa0b 	bl	801ff58 <udp_recv>
      }
      break;
 8015b42:	e016      	b.n	8015b72 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	681c      	ldr	r4, [r3, #0]
 8015b48:	7bfb      	ldrb	r3, [r7, #15]
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f004 ff38 	bl	801a9c0 <tcp_new_ip_type>
 8015b50:	4603      	mov	r3, r0
 8015b52:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	685b      	ldr	r3, [r3, #4]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d00b      	beq.n	8015b76 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	4618      	mov	r0, r3
 8015b64:	f7ff fece 	bl	8015904 <setup_tcp>
      }
      break;
 8015b68:	e005      	b.n	8015b76 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	22fa      	movs	r2, #250	; 0xfa
 8015b6e:	711a      	strb	r2, [r3, #4]
      return;
 8015b70:	e00a      	b.n	8015b88 <pcb_new+0xbc>
      break;
 8015b72:	bf00      	nop
 8015b74:	e000      	b.n	8015b78 <pcb_new+0xac>
      break;
 8015b76:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	685b      	ldr	r3, [r3, #4]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d102      	bne.n	8015b88 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	22ff      	movs	r2, #255	; 0xff
 8015b86:	711a      	strb	r2, [r3, #4]
  }
}
 8015b88:	3714      	adds	r7, #20
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd90      	pop	{r4, r7, pc}
 8015b8e:	bf00      	nop
 8015b90:	080257f8 	.word	0x080257f8
 8015b94:	080259dc 	.word	0x080259dc
 8015b98:	0802583c 	.word	0x0802583c
 8015b9c:	080153e1 	.word	0x080153e1

08015ba0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b084      	sub	sp, #16
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	2200      	movs	r2, #0
 8015bb0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	685b      	ldr	r3, [r3, #4]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d102      	bne.n	8015bc2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8015bbc:	68f8      	ldr	r0, [r7, #12]
 8015bbe:	f7ff ff85 	bl	8015acc <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8015bc2:	bf00      	nop
 8015bc4:	3710      	adds	r7, #16
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	bd80      	pop	{r7, pc}
	...

08015bcc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b086      	sub	sp, #24
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	6039      	str	r1, [r7, #0]
 8015bd6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8015bdc:	2007      	movs	r0, #7
 8015bde:	f002 f83d 	bl	8017c5c <memp_malloc>
 8015be2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d101      	bne.n	8015bee <netconn_alloc+0x22>
    return NULL;
 8015bea:	2300      	movs	r3, #0
 8015bec:	e052      	b.n	8015c94 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	79fa      	ldrb	r2, [r7, #7]
 8015bf8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	2200      	movs	r2, #0
 8015bfe:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8015c00:	79fb      	ldrb	r3, [r7, #7]
 8015c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c06:	2b10      	cmp	r3, #16
 8015c08:	d004      	beq.n	8015c14 <netconn_alloc+0x48>
 8015c0a:	2b20      	cmp	r3, #32
 8015c0c:	d105      	bne.n	8015c1a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8015c0e:	2306      	movs	r3, #6
 8015c10:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8015c12:	e00a      	b.n	8015c2a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8015c14:	2306      	movs	r3, #6
 8015c16:	617b      	str	r3, [r7, #20]
      break;
 8015c18:	e007      	b.n	8015c2a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8015c1a:	4b20      	ldr	r3, [pc, #128]	; (8015c9c <netconn_alloc+0xd0>)
 8015c1c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8015c20:	491f      	ldr	r1, [pc, #124]	; (8015ca0 <netconn_alloc+0xd4>)
 8015c22:	4820      	ldr	r0, [pc, #128]	; (8015ca4 <netconn_alloc+0xd8>)
 8015c24:	f00e f96c 	bl	8023f00 <iprintf>
      goto free_and_return;
 8015c28:	e02f      	b.n	8015c8a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	3310      	adds	r3, #16
 8015c2e:	6979      	ldr	r1, [r7, #20]
 8015c30:	4618      	mov	r0, r3
 8015c32:	f00c fd0d 	bl	8022650 <sys_mbox_new>
 8015c36:	4603      	mov	r3, r0
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d125      	bne.n	8015c88 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	330c      	adds	r3, #12
 8015c40:	2100      	movs	r1, #0
 8015c42:	4618      	mov	r0, r3
 8015c44:	f00c fdcb 	bl	80227de <sys_sem_new>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d005      	beq.n	8015c5a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	3310      	adds	r3, #16
 8015c52:	4618      	mov	r0, r3
 8015c54:	f00c fd1e 	bl	8022694 <sys_mbox_free>
    goto free_and_return;
 8015c58:	e017      	b.n	8015c8a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	3314      	adds	r3, #20
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f00c fdb0 	bl	80227c4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	2200      	movs	r2, #0
 8015c68:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015c70:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	683a      	ldr	r2, [r7, #0]
 8015c76:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	7cfa      	ldrb	r2, [r7, #19]
 8015c82:	771a      	strb	r2, [r3, #28]
  return conn;
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	e005      	b.n	8015c94 <netconn_alloc+0xc8>
    goto free_and_return;
 8015c88:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8015c8a:	68f9      	ldr	r1, [r7, #12]
 8015c8c:	2007      	movs	r0, #7
 8015c8e:	f002 f85b 	bl	8017d48 <memp_free>
  return NULL;
 8015c92:	2300      	movs	r3, #0
}
 8015c94:	4618      	mov	r0, r3
 8015c96:	3718      	adds	r7, #24
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	bd80      	pop	{r7, pc}
 8015c9c:	080257f8 	.word	0x080257f8
 8015ca0:	080259fc 	.word	0x080259fc
 8015ca4:	0802583c 	.word	0x0802583c

08015ca8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b082      	sub	sp, #8
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	685b      	ldr	r3, [r3, #4]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d006      	beq.n	8015cc6 <netconn_free+0x1e>
 8015cb8:	4b1b      	ldr	r3, [pc, #108]	; (8015d28 <netconn_free+0x80>)
 8015cba:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015cbe:	491b      	ldr	r1, [pc, #108]	; (8015d2c <netconn_free+0x84>)
 8015cc0:	481b      	ldr	r0, [pc, #108]	; (8015d30 <netconn_free+0x88>)
 8015cc2:	f00e f91d 	bl	8023f00 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	3310      	adds	r3, #16
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f00c fd69 	bl	80227a2 <sys_mbox_valid>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d006      	beq.n	8015ce4 <netconn_free+0x3c>
 8015cd6:	4b14      	ldr	r3, [pc, #80]	; (8015d28 <netconn_free+0x80>)
 8015cd8:	f240 3223 	movw	r2, #803	; 0x323
 8015cdc:	4915      	ldr	r1, [pc, #84]	; (8015d34 <netconn_free+0x8c>)
 8015cde:	4814      	ldr	r0, [pc, #80]	; (8015d30 <netconn_free+0x88>)
 8015ce0:	f00e f90e 	bl	8023f00 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	3314      	adds	r3, #20
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f00c fd5a 	bl	80227a2 <sys_mbox_valid>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d006      	beq.n	8015d02 <netconn_free+0x5a>
 8015cf4:	4b0c      	ldr	r3, [pc, #48]	; (8015d28 <netconn_free+0x80>)
 8015cf6:	f240 3226 	movw	r2, #806	; 0x326
 8015cfa:	490f      	ldr	r1, [pc, #60]	; (8015d38 <netconn_free+0x90>)
 8015cfc:	480c      	ldr	r0, [pc, #48]	; (8015d30 <netconn_free+0x88>)
 8015cfe:	f00e f8ff 	bl	8023f00 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	330c      	adds	r3, #12
 8015d06:	4618      	mov	r0, r3
 8015d08:	f00c fdcf 	bl	80228aa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	330c      	adds	r3, #12
 8015d10:	4618      	mov	r0, r3
 8015d12:	f00c fde8 	bl	80228e6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8015d16:	6879      	ldr	r1, [r7, #4]
 8015d18:	2007      	movs	r0, #7
 8015d1a:	f002 f815 	bl	8017d48 <memp_free>
}
 8015d1e:	bf00      	nop
 8015d20:	3708      	adds	r7, #8
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bd80      	pop	{r7, pc}
 8015d26:	bf00      	nop
 8015d28:	080257f8 	.word	0x080257f8
 8015d2c:	08025a24 	.word	0x08025a24
 8015d30:	0802583c 	.word	0x0802583c
 8015d34:	08025a54 	.word	0x08025a54
 8015d38:	08025a90 	.word	0x08025a90

08015d3c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b086      	sub	sp, #24
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	3310      	adds	r3, #16
 8015d48:	4618      	mov	r0, r3
 8015d4a:	f00c fd2a 	bl	80227a2 <sys_mbox_valid>
 8015d4e:	4603      	mov	r3, r0
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d02f      	beq.n	8015db4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8015d54:	e018      	b.n	8015d88 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	781b      	ldrb	r3, [r3, #0]
 8015d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d5e:	2b10      	cmp	r3, #16
 8015d60:	d10e      	bne.n	8015d80 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8015d62:	693b      	ldr	r3, [r7, #16]
 8015d64:	f107 020f 	add.w	r2, r7, #15
 8015d68:	4611      	mov	r1, r2
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	f7ff fafe 	bl	801536c <lwip_netconn_is_err_msg>
 8015d70:	4603      	mov	r3, r0
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d108      	bne.n	8015d88 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f002 fe89 	bl	8018a90 <pbuf_free>
 8015d7e:	e003      	b.n	8015d88 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	4618      	mov	r0, r3
 8015d84:	f001 f840 	bl	8016e08 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	3310      	adds	r3, #16
 8015d8c:	f107 0210 	add.w	r2, r7, #16
 8015d90:	4611      	mov	r1, r2
 8015d92:	4618      	mov	r0, r3
 8015d94:	f00c fce9 	bl	802276a <sys_arch_mbox_tryfetch>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015d9e:	d1da      	bne.n	8015d56 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	3310      	adds	r3, #16
 8015da4:	4618      	mov	r0, r3
 8015da6:	f00c fc75 	bl	8022694 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	3310      	adds	r3, #16
 8015dae:	4618      	mov	r0, r3
 8015db0:	f00c fd08 	bl	80227c4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	3314      	adds	r3, #20
 8015db8:	4618      	mov	r0, r3
 8015dba:	f00c fcf2 	bl	80227a2 <sys_mbox_valid>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d034      	beq.n	8015e2e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8015dc4:	e01d      	b.n	8015e02 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8015dc6:	693b      	ldr	r3, [r7, #16]
 8015dc8:	f107 020e 	add.w	r2, r7, #14
 8015dcc:	4611      	mov	r1, r2
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f7ff facc 	bl	801536c <lwip_netconn_is_err_msg>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d113      	bne.n	8015e02 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8015dda:	693b      	ldr	r3, [r7, #16]
 8015ddc:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8015dde:	6978      	ldr	r0, [r7, #20]
 8015de0:	f7ff ffac 	bl	8015d3c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	685b      	ldr	r3, [r3, #4]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d007      	beq.n	8015dfc <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8015dec:	697b      	ldr	r3, [r7, #20]
 8015dee:	685b      	ldr	r3, [r3, #4]
 8015df0:	4618      	mov	r0, r3
 8015df2:	f003 fc4d 	bl	8019690 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8015df6:	697b      	ldr	r3, [r7, #20]
 8015df8:	2200      	movs	r2, #0
 8015dfa:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8015dfc:	6978      	ldr	r0, [r7, #20]
 8015dfe:	f7ff ff53 	bl	8015ca8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	3314      	adds	r3, #20
 8015e06:	f107 0210 	add.w	r2, r7, #16
 8015e0a:	4611      	mov	r1, r2
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f00c fcac 	bl	802276a <sys_arch_mbox_tryfetch>
 8015e12:	4603      	mov	r3, r0
 8015e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e18:	d1d5      	bne.n	8015dc6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	3314      	adds	r3, #20
 8015e1e:	4618      	mov	r0, r3
 8015e20:	f00c fc38 	bl	8022694 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	3314      	adds	r3, #20
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f00c fccb 	bl	80227c4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8015e2e:	bf00      	nop
 8015e30:	3718      	adds	r7, #24
 8015e32:	46bd      	mov	sp, r7
 8015e34:	bd80      	pop	{r7, pc}
	...

08015e38 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b086      	sub	sp, #24
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
 8015e40:	460b      	mov	r3, r1
 8015e42:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8015e44:	2300      	movs	r3, #0
 8015e46:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d106      	bne.n	8015e5c <lwip_netconn_do_close_internal+0x24>
 8015e4e:	4b87      	ldr	r3, [pc, #540]	; (801606c <lwip_netconn_do_close_internal+0x234>)
 8015e50:	f240 32a2 	movw	r2, #930	; 0x3a2
 8015e54:	4986      	ldr	r1, [pc, #536]	; (8016070 <lwip_netconn_do_close_internal+0x238>)
 8015e56:	4887      	ldr	r0, [pc, #540]	; (8016074 <lwip_netconn_do_close_internal+0x23c>)
 8015e58:	f00e f852 	bl	8023f00 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	781b      	ldrb	r3, [r3, #0]
 8015e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015e64:	2b10      	cmp	r3, #16
 8015e66:	d006      	beq.n	8015e76 <lwip_netconn_do_close_internal+0x3e>
 8015e68:	4b80      	ldr	r3, [pc, #512]	; (801606c <lwip_netconn_do_close_internal+0x234>)
 8015e6a:	f240 32a3 	movw	r2, #931	; 0x3a3
 8015e6e:	4982      	ldr	r1, [pc, #520]	; (8016078 <lwip_netconn_do_close_internal+0x240>)
 8015e70:	4880      	ldr	r0, [pc, #512]	; (8016074 <lwip_netconn_do_close_internal+0x23c>)
 8015e72:	f00e f845 	bl	8023f00 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	785b      	ldrb	r3, [r3, #1]
 8015e7a:	2b04      	cmp	r3, #4
 8015e7c:	d006      	beq.n	8015e8c <lwip_netconn_do_close_internal+0x54>
 8015e7e:	4b7b      	ldr	r3, [pc, #492]	; (801606c <lwip_netconn_do_close_internal+0x234>)
 8015e80:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8015e84:	497d      	ldr	r1, [pc, #500]	; (801607c <lwip_netconn_do_close_internal+0x244>)
 8015e86:	487b      	ldr	r0, [pc, #492]	; (8016074 <lwip_netconn_do_close_internal+0x23c>)
 8015e88:	f00e f83a 	bl	8023f00 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	685b      	ldr	r3, [r3, #4]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d106      	bne.n	8015ea2 <lwip_netconn_do_close_internal+0x6a>
 8015e94:	4b75      	ldr	r3, [pc, #468]	; (801606c <lwip_netconn_do_close_internal+0x234>)
 8015e96:	f240 32a5 	movw	r2, #933	; 0x3a5
 8015e9a:	4979      	ldr	r1, [pc, #484]	; (8016080 <lwip_netconn_do_close_internal+0x248>)
 8015e9c:	4875      	ldr	r0, [pc, #468]	; (8016074 <lwip_netconn_do_close_internal+0x23c>)
 8015e9e:	f00e f82f 	bl	8023f00 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	6a1b      	ldr	r3, [r3, #32]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d106      	bne.n	8015eb8 <lwip_netconn_do_close_internal+0x80>
 8015eaa:	4b70      	ldr	r3, [pc, #448]	; (801606c <lwip_netconn_do_close_internal+0x234>)
 8015eac:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015eb0:	4974      	ldr	r1, [pc, #464]	; (8016084 <lwip_netconn_do_close_internal+0x24c>)
 8015eb2:	4870      	ldr	r0, [pc, #448]	; (8016074 <lwip_netconn_do_close_internal+0x23c>)
 8015eb4:	f00e f824 	bl	8023f00 <iprintf>

  tpcb = conn->pcb.tcp;
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	685b      	ldr	r3, [r3, #4]
 8015ebc:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	6a1b      	ldr	r3, [r3, #32]
 8015ec2:	7a1b      	ldrb	r3, [r3, #8]
 8015ec4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8015ec6:	7bfb      	ldrb	r3, [r7, #15]
 8015ec8:	f003 0301 	and.w	r3, r3, #1
 8015ecc:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8015ece:	7bfb      	ldrb	r3, [r7, #15]
 8015ed0:	f003 0302 	and.w	r3, r3, #2
 8015ed4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8015ed6:	7bfb      	ldrb	r3, [r7, #15]
 8015ed8:	2b03      	cmp	r3, #3
 8015eda:	d102      	bne.n	8015ee2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8015edc:	2301      	movs	r3, #1
 8015ede:	75bb      	strb	r3, [r7, #22]
 8015ee0:	e01f      	b.n	8015f22 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8015ee2:	7bbb      	ldrb	r3, [r7, #14]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d00e      	beq.n	8015f06 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8015ee8:	693b      	ldr	r3, [r7, #16]
 8015eea:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8015eec:	2b05      	cmp	r3, #5
 8015eee:	d007      	beq.n	8015f00 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8015ef0:	693b      	ldr	r3, [r7, #16]
 8015ef2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8015ef4:	2b06      	cmp	r3, #6
 8015ef6:	d003      	beq.n	8015f00 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8015ef8:	693b      	ldr	r3, [r7, #16]
 8015efa:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8015efc:	2b08      	cmp	r3, #8
 8015efe:	d102      	bne.n	8015f06 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8015f00:	2301      	movs	r3, #1
 8015f02:	75bb      	strb	r3, [r7, #22]
 8015f04:	e00d      	b.n	8015f22 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8015f06:	7b7b      	ldrb	r3, [r7, #13]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d008      	beq.n	8015f1e <lwip_netconn_do_close_internal+0xe6>
 8015f0c:	693b      	ldr	r3, [r7, #16]
 8015f0e:	8b5b      	ldrh	r3, [r3, #26]
 8015f10:	f003 0310 	and.w	r3, r3, #16
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d002      	beq.n	8015f1e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8015f18:	2301      	movs	r3, #1
 8015f1a:	75bb      	strb	r3, [r7, #22]
 8015f1c:	e001      	b.n	8015f22 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8015f22:	7dbb      	ldrb	r3, [r7, #22]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d003      	beq.n	8015f30 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8015f28:	2100      	movs	r1, #0
 8015f2a:	6938      	ldr	r0, [r7, #16]
 8015f2c:	f004 fd56 	bl	801a9dc <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8015f30:	693b      	ldr	r3, [r7, #16]
 8015f32:	7d1b      	ldrb	r3, [r3, #20]
 8015f34:	2b01      	cmp	r3, #1
 8015f36:	d104      	bne.n	8015f42 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8015f38:	2100      	movs	r1, #0
 8015f3a:	6938      	ldr	r0, [r7, #16]
 8015f3c:	f004 fdc6 	bl	801aacc <tcp_accept>
 8015f40:	e01d      	b.n	8015f7e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8015f42:	7bbb      	ldrb	r3, [r7, #14]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d007      	beq.n	8015f58 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8015f48:	2100      	movs	r1, #0
 8015f4a:	6938      	ldr	r0, [r7, #16]
 8015f4c:	f004 fd58 	bl	801aa00 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8015f50:	2100      	movs	r1, #0
 8015f52:	6938      	ldr	r0, [r7, #16]
 8015f54:	f004 fdba 	bl	801aacc <tcp_accept>
    }
    if (shut_tx) {
 8015f58:	7b7b      	ldrb	r3, [r7, #13]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d003      	beq.n	8015f66 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8015f5e:	2100      	movs	r1, #0
 8015f60:	6938      	ldr	r0, [r7, #16]
 8015f62:	f004 fd6f 	bl	801aa44 <tcp_sent>
    }
    if (shut_close) {
 8015f66:	7dbb      	ldrb	r3, [r7, #22]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d008      	beq.n	8015f7e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	2100      	movs	r1, #0
 8015f70:	6938      	ldr	r0, [r7, #16]
 8015f72:	f004 fdc3 	bl	801aafc <tcp_poll>
      tcp_err(tpcb, NULL);
 8015f76:	2100      	movs	r1, #0
 8015f78:	6938      	ldr	r0, [r7, #16]
 8015f7a:	f004 fd85 	bl	801aa88 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8015f7e:	7dbb      	ldrb	r3, [r7, #22]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d005      	beq.n	8015f90 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8015f84:	6938      	ldr	r0, [r7, #16]
 8015f86:	f003 fa3d 	bl	8019404 <tcp_close>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	75fb      	strb	r3, [r7, #23]
 8015f8e:	e007      	b.n	8015fa0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8015f90:	7bbb      	ldrb	r3, [r7, #14]
 8015f92:	7b7a      	ldrb	r2, [r7, #13]
 8015f94:	4619      	mov	r1, r3
 8015f96:	6938      	ldr	r0, [r7, #16]
 8015f98:	f003 fa60 	bl	801945c <tcp_shutdown>
 8015f9c:	4603      	mov	r3, r0
 8015f9e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8015fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d102      	bne.n	8015fae <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8015fa8:	2301      	movs	r3, #1
 8015faa:	757b      	strb	r3, [r7, #21]
 8015fac:	e016      	b.n	8015fdc <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8015fae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015fb6:	d10f      	bne.n	8015fd8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	6a1b      	ldr	r3, [r3, #32]
 8015fbc:	7a5b      	ldrb	r3, [r3, #9]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d10c      	bne.n	8015fdc <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8015fc2:	2301      	movs	r3, #1
 8015fc4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8015fc6:	7dbb      	ldrb	r3, [r7, #22]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d007      	beq.n	8015fdc <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8015fcc:	6938      	ldr	r0, [r7, #16]
 8015fce:	f003 fb5f 	bl	8019690 <tcp_abort>
          err = ERR_OK;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	75fb      	strb	r3, [r7, #23]
 8015fd6:	e001      	b.n	8015fdc <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8015fd8:	2301      	movs	r3, #1
 8015fda:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8015fdc:	7d7b      	ldrb	r3, [r7, #21]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d052      	beq.n	8016088 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	6a1b      	ldr	r3, [r3, #32]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	330c      	adds	r3, #12
 8015fea:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	6a1b      	ldr	r3, [r3, #32]
 8015ff0:	7dfa      	ldrb	r2, [r7, #23]
 8015ff2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8016000:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d129      	bne.n	801605c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8016008:	7dbb      	ldrb	r3, [r7, #22]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d00c      	beq.n	8016028 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	2200      	movs	r2, #0
 8016012:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016018:	2b00      	cmp	r3, #0
 801601a:	d005      	beq.n	8016028 <lwip_netconn_do_close_internal+0x1f0>
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016020:	2200      	movs	r2, #0
 8016022:	2104      	movs	r1, #4
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	4798      	blx	r3
      }
      if (shut_rx) {
 8016028:	7bbb      	ldrb	r3, [r7, #14]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d009      	beq.n	8016042 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016032:	2b00      	cmp	r3, #0
 8016034:	d005      	beq.n	8016042 <lwip_netconn_do_close_internal+0x20a>
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801603a:	2200      	movs	r2, #0
 801603c:	2100      	movs	r1, #0
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	4798      	blx	r3
      }
      if (shut_tx) {
 8016042:	7b7b      	ldrb	r3, [r7, #13]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d009      	beq.n	801605c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801604c:	2b00      	cmp	r3, #0
 801604e:	d005      	beq.n	801605c <lwip_netconn_do_close_internal+0x224>
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016054:	2200      	movs	r2, #0
 8016056:	2102      	movs	r1, #2
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801605c:	78fb      	ldrb	r3, [r7, #3]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d002      	beq.n	8016068 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8016062:	68b8      	ldr	r0, [r7, #8]
 8016064:	f00c fc14 	bl	8022890 <sys_sem_signal>
    }
    return ERR_OK;
 8016068:	2300      	movs	r3, #0
 801606a:	e03c      	b.n	80160e6 <lwip_netconn_do_close_internal+0x2ae>
 801606c:	080257f8 	.word	0x080257f8
 8016070:	08025acc 	.word	0x08025acc
 8016074:	0802583c 	.word	0x0802583c
 8016078:	08025adc 	.word	0x08025adc
 801607c:	08025afc 	.word	0x08025afc
 8016080:	08025b20 	.word	0x08025b20
 8016084:	08025960 	.word	0x08025960
  }
  if (!close_finished) {
 8016088:	7d7b      	ldrb	r3, [r7, #21]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d11e      	bne.n	80160cc <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801608e:	693b      	ldr	r3, [r7, #16]
 8016090:	7d1b      	ldrb	r3, [r3, #20]
 8016092:	2b01      	cmp	r3, #1
 8016094:	d106      	bne.n	80160a4 <lwip_netconn_do_close_internal+0x26c>
 8016096:	4b16      	ldr	r3, [pc, #88]	; (80160f0 <lwip_netconn_do_close_internal+0x2b8>)
 8016098:	f240 4241 	movw	r2, #1089	; 0x441
 801609c:	4915      	ldr	r1, [pc, #84]	; (80160f4 <lwip_netconn_do_close_internal+0x2bc>)
 801609e:	4816      	ldr	r0, [pc, #88]	; (80160f8 <lwip_netconn_do_close_internal+0x2c0>)
 80160a0:	f00d ff2e 	bl	8023f00 <iprintf>
    if (shut_tx) {
 80160a4:	7b7b      	ldrb	r3, [r7, #13]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d003      	beq.n	80160b2 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80160aa:	4914      	ldr	r1, [pc, #80]	; (80160fc <lwip_netconn_do_close_internal+0x2c4>)
 80160ac:	6938      	ldr	r0, [r7, #16]
 80160ae:	f004 fcc9 	bl	801aa44 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80160b2:	2201      	movs	r2, #1
 80160b4:	4912      	ldr	r1, [pc, #72]	; (8016100 <lwip_netconn_do_close_internal+0x2c8>)
 80160b6:	6938      	ldr	r0, [r7, #16]
 80160b8:	f004 fd20 	bl	801aafc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80160bc:	4911      	ldr	r1, [pc, #68]	; (8016104 <lwip_netconn_do_close_internal+0x2cc>)
 80160be:	6938      	ldr	r0, [r7, #16]
 80160c0:	f004 fce2 	bl	801aa88 <tcp_err>
    tcp_arg(tpcb, conn);
 80160c4:	6879      	ldr	r1, [r7, #4]
 80160c6:	6938      	ldr	r0, [r7, #16]
 80160c8:	f004 fc88 	bl	801a9dc <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80160cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d106      	bne.n	80160e2 <lwip_netconn_do_close_internal+0x2aa>
 80160d4:	4b06      	ldr	r3, [pc, #24]	; (80160f0 <lwip_netconn_do_close_internal+0x2b8>)
 80160d6:	f240 424d 	movw	r2, #1101	; 0x44d
 80160da:	490b      	ldr	r1, [pc, #44]	; (8016108 <lwip_netconn_do_close_internal+0x2d0>)
 80160dc:	4806      	ldr	r0, [pc, #24]	; (80160f8 <lwip_netconn_do_close_internal+0x2c0>)
 80160de:	f00d ff0f 	bl	8023f00 <iprintf>
  return err;
 80160e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80160e6:	4618      	mov	r0, r3
 80160e8:	3718      	adds	r7, #24
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bd80      	pop	{r7, pc}
 80160ee:	bf00      	nop
 80160f0:	080257f8 	.word	0x080257f8
 80160f4:	08025b34 	.word	0x08025b34
 80160f8:	0802583c 	.word	0x0802583c
 80160fc:	080156b1 	.word	0x080156b1
 8016100:	080155e9 	.word	0x080155e9
 8016104:	08015759 	.word	0x08015759
 8016108:	08025b58 	.word	0x08025b58

0801610c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b084      	sub	sp, #16
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	785b      	ldrb	r3, [r3, #1]
 801611e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8016120:	7afb      	ldrb	r3, [r7, #11]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d00d      	beq.n	8016142 <lwip_netconn_do_delconn+0x36>
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	781b      	ldrb	r3, [r3, #0]
 801612c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016130:	2b10      	cmp	r3, #16
 8016132:	d006      	beq.n	8016142 <lwip_netconn_do_delconn+0x36>
 8016134:	4b60      	ldr	r3, [pc, #384]	; (80162b8 <lwip_netconn_do_delconn+0x1ac>)
 8016136:	f240 425e 	movw	r2, #1118	; 0x45e
 801613a:	4960      	ldr	r1, [pc, #384]	; (80162bc <lwip_netconn_do_delconn+0x1b0>)
 801613c:	4860      	ldr	r0, [pc, #384]	; (80162c0 <lwip_netconn_do_delconn+0x1b4>)
 801613e:	f00d fedf 	bl	8023f00 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8016142:	7afb      	ldrb	r3, [r7, #11]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d005      	beq.n	8016154 <lwip_netconn_do_delconn+0x48>
 8016148:	7afb      	ldrb	r3, [r7, #11]
 801614a:	2b02      	cmp	r3, #2
 801614c:	d002      	beq.n	8016154 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801614e:	7afb      	ldrb	r3, [r7, #11]
 8016150:	2b03      	cmp	r3, #3
 8016152:	d109      	bne.n	8016168 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8016154:	7afb      	ldrb	r3, [r7, #11]
 8016156:	2b03      	cmp	r3, #3
 8016158:	d10a      	bne.n	8016170 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	7f1b      	ldrb	r3, [r3, #28]
 8016160:	f003 0304 	and.w	r3, r3, #4
 8016164:	2b00      	cmp	r3, #0
 8016166:	d103      	bne.n	8016170 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	22fb      	movs	r2, #251	; 0xfb
 801616c:	711a      	strb	r2, [r3, #4]
 801616e:	e097      	b.n	80162a0 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8016170:	7afb      	ldrb	r3, [r7, #11]
 8016172:	2b03      	cmp	r3, #3
 8016174:	d10d      	bne.n	8016192 <lwip_netconn_do_delconn+0x86>
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	7f1b      	ldrb	r3, [r3, #28]
 801617c:	f003 0304 	and.w	r3, r3, #4
 8016180:	2b00      	cmp	r3, #0
 8016182:	d106      	bne.n	8016192 <lwip_netconn_do_delconn+0x86>
 8016184:	4b4c      	ldr	r3, [pc, #304]	; (80162b8 <lwip_netconn_do_delconn+0x1ac>)
 8016186:	f240 427a 	movw	r2, #1146	; 0x47a
 801618a:	494e      	ldr	r1, [pc, #312]	; (80162c4 <lwip_netconn_do_delconn+0x1b8>)
 801618c:	484c      	ldr	r0, [pc, #304]	; (80162c0 <lwip_netconn_do_delconn+0x1b4>)
 801618e:	f00d feb7 	bl	8023f00 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	2200      	movs	r2, #0
 8016196:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	4618      	mov	r0, r3
 801619e:	f7ff fdcd 	bl	8015d3c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	685b      	ldr	r3, [r3, #4]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d05f      	beq.n	801626c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	781b      	ldrb	r3, [r3, #0]
 80161b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80161b6:	2b10      	cmp	r3, #16
 80161b8:	d00d      	beq.n	80161d6 <lwip_netconn_do_delconn+0xca>
 80161ba:	2b20      	cmp	r3, #32
 80161bc:	d151      	bne.n	8016262 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	685b      	ldr	r3, [r3, #4]
 80161c4:	2200      	movs	r2, #0
 80161c6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	685b      	ldr	r3, [r3, #4]
 80161ce:	4618      	mov	r0, r3
 80161d0:	f009 fee2 	bl	801ff98 <udp_remove>
          break;
 80161d4:	e046      	b.n	8016264 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	6a1b      	ldr	r3, [r3, #32]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d006      	beq.n	80161ee <lwip_netconn_do_delconn+0xe2>
 80161e0:	4b35      	ldr	r3, [pc, #212]	; (80162b8 <lwip_netconn_do_delconn+0x1ac>)
 80161e2:	f240 4294 	movw	r2, #1172	; 0x494
 80161e6:	4938      	ldr	r1, [pc, #224]	; (80162c8 <lwip_netconn_do_delconn+0x1bc>)
 80161e8:	4835      	ldr	r0, [pc, #212]	; (80162c0 <lwip_netconn_do_delconn+0x1b4>)
 80161ea:	f00d fe89 	bl	8023f00 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	2204      	movs	r2, #4
 80161f4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	2203      	movs	r2, #3
 80161fa:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	68fa      	ldr	r2, [r7, #12]
 8016202:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	2100      	movs	r1, #0
 801620a:	4618      	mov	r0, r3
 801620c:	f7ff fe14 	bl	8015e38 <lwip_netconn_do_close_internal>
 8016210:	4603      	mov	r3, r0
 8016212:	2b00      	cmp	r3, #0
 8016214:	d04b      	beq.n	80162ae <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	785b      	ldrb	r3, [r3, #1]
 801621c:	2b04      	cmp	r3, #4
 801621e:	d006      	beq.n	801622e <lwip_netconn_do_delconn+0x122>
 8016220:	4b25      	ldr	r3, [pc, #148]	; (80162b8 <lwip_netconn_do_delconn+0x1ac>)
 8016222:	f240 429a 	movw	r2, #1178	; 0x49a
 8016226:	4929      	ldr	r1, [pc, #164]	; (80162cc <lwip_netconn_do_delconn+0x1c0>)
 8016228:	4825      	ldr	r0, [pc, #148]	; (80162c0 <lwip_netconn_do_delconn+0x1b4>)
 801622a:	f00d fe69 	bl	8023f00 <iprintf>
            UNLOCK_TCPIP_CORE();
 801622e:	4828      	ldr	r0, [pc, #160]	; (80162d0 <lwip_netconn_do_delconn+0x1c4>)
 8016230:	f00c fb9f 	bl	8022972 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	330c      	adds	r3, #12
 801623a:	2100      	movs	r1, #0
 801623c:	4618      	mov	r0, r3
 801623e:	f00c faf6 	bl	802282e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8016242:	4823      	ldr	r0, [pc, #140]	; (80162d0 <lwip_netconn_do_delconn+0x1c4>)
 8016244:	f00c fb86 	bl	8022954 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	785b      	ldrb	r3, [r3, #1]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d02d      	beq.n	80162ae <lwip_netconn_do_delconn+0x1a2>
 8016252:	4b19      	ldr	r3, [pc, #100]	; (80162b8 <lwip_netconn_do_delconn+0x1ac>)
 8016254:	f240 429e 	movw	r2, #1182	; 0x49e
 8016258:	491c      	ldr	r1, [pc, #112]	; (80162cc <lwip_netconn_do_delconn+0x1c0>)
 801625a:	4819      	ldr	r0, [pc, #100]	; (80162c0 <lwip_netconn_do_delconn+0x1b4>)
 801625c:	f00d fe50 	bl	8023f00 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8016260:	e025      	b.n	80162ae <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8016262:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	2200      	movs	r2, #0
 801626a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016272:	2b00      	cmp	r3, #0
 8016274:	d007      	beq.n	8016286 <lwip_netconn_do_delconn+0x17a>
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801627c:	68fa      	ldr	r2, [r7, #12]
 801627e:	6810      	ldr	r0, [r2, #0]
 8016280:	2200      	movs	r2, #0
 8016282:	2100      	movs	r1, #0
 8016284:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801628c:	2b00      	cmp	r3, #0
 801628e:	d007      	beq.n	80162a0 <lwip_netconn_do_delconn+0x194>
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016296:	68fa      	ldr	r2, [r7, #12]
 8016298:	6810      	ldr	r0, [r2, #0]
 801629a:	2200      	movs	r2, #0
 801629c:	2102      	movs	r1, #2
 801629e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	330c      	adds	r3, #12
 80162a6:	4618      	mov	r0, r3
 80162a8:	f00c fb0c 	bl	80228c4 <sys_sem_valid>
 80162ac:	e000      	b.n	80162b0 <lwip_netconn_do_delconn+0x1a4>
          return;
 80162ae:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80162b0:	3710      	adds	r7, #16
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	080257f8 	.word	0x080257f8
 80162bc:	08025b68 	.word	0x08025b68
 80162c0:	0802583c 	.word	0x0802583c
 80162c4:	08025b7c 	.word	0x08025b7c
 80162c8:	08025b9c 	.word	0x08025b9c
 80162cc:	08025bb8 	.word	0x08025bb8
 80162d0:	20006694 	.word	0x20006694

080162d4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b084      	sub	sp, #16
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80162e0:	68bb      	ldr	r3, [r7, #8]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	685b      	ldr	r3, [r3, #4]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d025      	beq.n	8016336 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80162ea:	68bb      	ldr	r3, [r7, #8]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	781b      	ldrb	r3, [r3, #0]
 80162f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80162f4:	2b10      	cmp	r3, #16
 80162f6:	d00e      	beq.n	8016316 <lwip_netconn_do_bind+0x42>
 80162f8:	2b20      	cmp	r3, #32
 80162fa:	d119      	bne.n	8016330 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80162fc:	68bb      	ldr	r3, [r7, #8]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	6858      	ldr	r0, [r3, #4]
 8016302:	68bb      	ldr	r3, [r7, #8]
 8016304:	6899      	ldr	r1, [r3, #8]
 8016306:	68bb      	ldr	r3, [r7, #8]
 8016308:	899b      	ldrh	r3, [r3, #12]
 801630a:	461a      	mov	r2, r3
 801630c:	f009 fd2e 	bl	801fd6c <udp_bind>
 8016310:	4603      	mov	r3, r0
 8016312:	73fb      	strb	r3, [r7, #15]
        break;
 8016314:	e011      	b.n	801633a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016316:	68bb      	ldr	r3, [r7, #8]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	6858      	ldr	r0, [r3, #4]
 801631c:	68bb      	ldr	r3, [r7, #8]
 801631e:	6899      	ldr	r1, [r3, #8]
 8016320:	68bb      	ldr	r3, [r7, #8]
 8016322:	899b      	ldrh	r3, [r3, #12]
 8016324:	461a      	mov	r2, r3
 8016326:	f003 f9bf 	bl	80196a8 <tcp_bind>
 801632a:	4603      	mov	r3, r0
 801632c:	73fb      	strb	r3, [r7, #15]
        break;
 801632e:	e004      	b.n	801633a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8016330:	23fa      	movs	r3, #250	; 0xfa
 8016332:	73fb      	strb	r3, [r7, #15]
        break;
 8016334:	e001      	b.n	801633a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8016336:	23fa      	movs	r3, #250	; 0xfa
 8016338:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801633a:	68bb      	ldr	r3, [r7, #8]
 801633c:	7bfa      	ldrb	r2, [r7, #15]
 801633e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8016340:	bf00      	nop
 8016342:	3710      	adds	r7, #16
 8016344:	46bd      	mov	sp, r7
 8016346:	bd80      	pop	{r7, pc}

08016348 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b088      	sub	sp, #32
 801634c:	af00      	add	r7, sp, #0
 801634e:	60f8      	str	r0, [r7, #12]
 8016350:	60b9      	str	r1, [r7, #8]
 8016352:	4613      	mov	r3, r2
 8016354:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8016356:	2300      	movs	r3, #0
 8016358:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 801635e:	69bb      	ldr	r3, [r7, #24]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d102      	bne.n	801636a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8016364:	f06f 0305 	mvn.w	r3, #5
 8016368:	e070      	b.n	801644c <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 801636a:	69bb      	ldr	r3, [r7, #24]
 801636c:	785b      	ldrb	r3, [r3, #1]
 801636e:	2b03      	cmp	r3, #3
 8016370:	d006      	beq.n	8016380 <lwip_netconn_do_connected+0x38>
 8016372:	4b38      	ldr	r3, [pc, #224]	; (8016454 <lwip_netconn_do_connected+0x10c>)
 8016374:	f240 5223 	movw	r2, #1315	; 0x523
 8016378:	4937      	ldr	r1, [pc, #220]	; (8016458 <lwip_netconn_do_connected+0x110>)
 801637a:	4838      	ldr	r0, [pc, #224]	; (801645c <lwip_netconn_do_connected+0x114>)
 801637c:	f00d fdc0 	bl	8023f00 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8016380:	69bb      	ldr	r3, [r7, #24]
 8016382:	6a1b      	ldr	r3, [r3, #32]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d10c      	bne.n	80163a2 <lwip_netconn_do_connected+0x5a>
 8016388:	69bb      	ldr	r3, [r7, #24]
 801638a:	7f1b      	ldrb	r3, [r3, #28]
 801638c:	f003 0304 	and.w	r3, r3, #4
 8016390:	2b00      	cmp	r3, #0
 8016392:	d106      	bne.n	80163a2 <lwip_netconn_do_connected+0x5a>
 8016394:	4b2f      	ldr	r3, [pc, #188]	; (8016454 <lwip_netconn_do_connected+0x10c>)
 8016396:	f240 5224 	movw	r2, #1316	; 0x524
 801639a:	4931      	ldr	r1, [pc, #196]	; (8016460 <lwip_netconn_do_connected+0x118>)
 801639c:	482f      	ldr	r0, [pc, #188]	; (801645c <lwip_netconn_do_connected+0x114>)
 801639e:	f00d fdaf 	bl	8023f00 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 80163a2:	69bb      	ldr	r3, [r7, #24]
 80163a4:	6a1b      	ldr	r3, [r3, #32]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d008      	beq.n	80163bc <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 80163aa:	69bb      	ldr	r3, [r7, #24]
 80163ac:	6a1b      	ldr	r3, [r3, #32]
 80163ae:	79fa      	ldrb	r2, [r7, #7]
 80163b0:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80163b2:	69bb      	ldr	r3, [r7, #24]
 80163b4:	6a1b      	ldr	r3, [r3, #32]
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	330c      	adds	r3, #12
 80163ba:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 80163bc:	69bb      	ldr	r3, [r7, #24]
 80163be:	781b      	ldrb	r3, [r3, #0]
 80163c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80163c4:	2b10      	cmp	r3, #16
 80163c6:	d106      	bne.n	80163d6 <lwip_netconn_do_connected+0x8e>
 80163c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d102      	bne.n	80163d6 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 80163d0:	69b8      	ldr	r0, [r7, #24]
 80163d2:	f7ff fa97 	bl	8015904 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 80163d6:	69bb      	ldr	r3, [r7, #24]
 80163d8:	7f1b      	ldrb	r3, [r3, #28]
 80163da:	f003 0304 	and.w	r3, r3, #4
 80163de:	2b00      	cmp	r3, #0
 80163e0:	bf0c      	ite	eq
 80163e2:	2301      	moveq	r3, #1
 80163e4:	2300      	movne	r3, #0
 80163e6:	b2db      	uxtb	r3, r3
 80163e8:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 80163ea:	69bb      	ldr	r3, [r7, #24]
 80163ec:	7f1b      	ldrb	r3, [r3, #28]
 80163ee:	f023 0304 	bic.w	r3, r3, #4
 80163f2:	b2da      	uxtb	r2, r3
 80163f4:	69bb      	ldr	r3, [r7, #24]
 80163f6:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 80163f8:	697b      	ldr	r3, [r7, #20]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d002      	beq.n	8016404 <lwip_netconn_do_connected+0xbc>
 80163fe:	69fb      	ldr	r3, [r7, #28]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d10c      	bne.n	801641e <lwip_netconn_do_connected+0xd6>
 8016404:	697b      	ldr	r3, [r7, #20]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d102      	bne.n	8016410 <lwip_netconn_do_connected+0xc8>
 801640a:	69fb      	ldr	r3, [r7, #28]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d006      	beq.n	801641e <lwip_netconn_do_connected+0xd6>
 8016410:	4b10      	ldr	r3, [pc, #64]	; (8016454 <lwip_netconn_do_connected+0x10c>)
 8016412:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8016416:	4913      	ldr	r1, [pc, #76]	; (8016464 <lwip_netconn_do_connected+0x11c>)
 8016418:	4810      	ldr	r0, [pc, #64]	; (801645c <lwip_netconn_do_connected+0x114>)
 801641a:	f00d fd71 	bl	8023f00 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 801641e:	69bb      	ldr	r3, [r7, #24]
 8016420:	2200      	movs	r2, #0
 8016422:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8016424:	69bb      	ldr	r3, [r7, #24]
 8016426:	2200      	movs	r2, #0
 8016428:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801642a:	69bb      	ldr	r3, [r7, #24]
 801642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801642e:	2b00      	cmp	r3, #0
 8016430:	d005      	beq.n	801643e <lwip_netconn_do_connected+0xf6>
 8016432:	69bb      	ldr	r3, [r7, #24]
 8016434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016436:	2200      	movs	r2, #0
 8016438:	2102      	movs	r1, #2
 801643a:	69b8      	ldr	r0, [r7, #24]
 801643c:	4798      	blx	r3

  if (was_blocking) {
 801643e:	697b      	ldr	r3, [r7, #20]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d002      	beq.n	801644a <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8016444:	69f8      	ldr	r0, [r7, #28]
 8016446:	f00c fa23 	bl	8022890 <sys_sem_signal>
  }
  return ERR_OK;
 801644a:	2300      	movs	r3, #0
}
 801644c:	4618      	mov	r0, r3
 801644e:	3720      	adds	r7, #32
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}
 8016454:	080257f8 	.word	0x080257f8
 8016458:	08025bc0 	.word	0x08025bc0
 801645c:	0802583c 	.word	0x0802583c
 8016460:	08025be0 	.word	0x08025be0
 8016464:	08025c20 	.word	0x08025c20

08016468 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b086      	sub	sp, #24
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8016474:	693b      	ldr	r3, [r7, #16]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	685b      	ldr	r3, [r3, #4]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d102      	bne.n	8016484 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 801647e:	23f1      	movs	r3, #241	; 0xf1
 8016480:	75fb      	strb	r3, [r7, #23]
 8016482:	e09b      	b.n	80165bc <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016484:	693b      	ldr	r3, [r7, #16]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	781b      	ldrb	r3, [r3, #0]
 801648a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801648e:	2b10      	cmp	r3, #16
 8016490:	d00f      	beq.n	80164b2 <lwip_netconn_do_connect+0x4a>
 8016492:	2b20      	cmp	r3, #32
 8016494:	f040 8087 	bne.w	80165a6 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016498:	693b      	ldr	r3, [r7, #16]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	6858      	ldr	r0, [r3, #4]
 801649e:	693b      	ldr	r3, [r7, #16]
 80164a0:	6899      	ldr	r1, [r3, #8]
 80164a2:	693b      	ldr	r3, [r7, #16]
 80164a4:	899b      	ldrh	r3, [r3, #12]
 80164a6:	461a      	mov	r2, r3
 80164a8:	f009 fce8 	bl	801fe7c <udp_connect>
 80164ac:	4603      	mov	r3, r0
 80164ae:	75fb      	strb	r3, [r7, #23]
        break;
 80164b0:	e084      	b.n	80165bc <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 80164b2:	693b      	ldr	r3, [r7, #16]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	785b      	ldrb	r3, [r3, #1]
 80164b8:	2b03      	cmp	r3, #3
 80164ba:	d102      	bne.n	80164c2 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 80164bc:	23f7      	movs	r3, #247	; 0xf7
 80164be:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 80164c0:	e07b      	b.n	80165ba <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 80164c2:	693b      	ldr	r3, [r7, #16]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	785b      	ldrb	r3, [r3, #1]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d002      	beq.n	80164d2 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 80164cc:	23f6      	movs	r3, #246	; 0xf6
 80164ce:	75fb      	strb	r3, [r7, #23]
        break;
 80164d0:	e073      	b.n	80165ba <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 80164d2:	693b      	ldr	r3, [r7, #16]
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	4618      	mov	r0, r3
 80164d8:	f7ff fa14 	bl	8015904 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80164dc:	693b      	ldr	r3, [r7, #16]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	6858      	ldr	r0, [r3, #4]
 80164e2:	693b      	ldr	r3, [r7, #16]
 80164e4:	6899      	ldr	r1, [r3, #8]
 80164e6:	693b      	ldr	r3, [r7, #16]
 80164e8:	899a      	ldrh	r2, [r3, #12]
 80164ea:	4b38      	ldr	r3, [pc, #224]	; (80165cc <lwip_netconn_do_connect+0x164>)
 80164ec:	f003 fb2e 	bl	8019b4c <tcp_connect>
 80164f0:	4603      	mov	r3, r0
 80164f2:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 80164f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d15e      	bne.n	80165ba <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80164fc:	693b      	ldr	r3, [r7, #16]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	7f1b      	ldrb	r3, [r3, #28]
 8016502:	f003 0302 	and.w	r3, r3, #2
 8016506:	2b00      	cmp	r3, #0
 8016508:	bf14      	ite	ne
 801650a:	2301      	movne	r3, #1
 801650c:	2300      	moveq	r3, #0
 801650e:	b2db      	uxtb	r3, r3
 8016510:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	2203      	movs	r2, #3
 8016518:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 801651a:	7bfb      	ldrb	r3, [r7, #15]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d009      	beq.n	8016534 <lwip_netconn_do_connect+0xcc>
 8016520:	693b      	ldr	r3, [r7, #16]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	7f1a      	ldrb	r2, [r3, #28]
 8016526:	693b      	ldr	r3, [r7, #16]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	f042 0204 	orr.w	r2, r2, #4
 801652e:	b2d2      	uxtb	r2, r2
 8016530:	771a      	strb	r2, [r3, #28]
 8016532:	e008      	b.n	8016546 <lwip_netconn_do_connect+0xde>
 8016534:	693b      	ldr	r3, [r7, #16]
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	7f1a      	ldrb	r2, [r3, #28]
 801653a:	693b      	ldr	r3, [r7, #16]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	f022 0204 	bic.w	r2, r2, #4
 8016542:	b2d2      	uxtb	r2, r2
 8016544:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8016546:	7bfb      	ldrb	r3, [r7, #15]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d002      	beq.n	8016552 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 801654c:	23fb      	movs	r3, #251	; 0xfb
 801654e:	75fb      	strb	r3, [r7, #23]
        break;
 8016550:	e033      	b.n	80165ba <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8016552:	693b      	ldr	r3, [r7, #16]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	693a      	ldr	r2, [r7, #16]
 8016558:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 801655a:	693b      	ldr	r3, [r7, #16]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	785b      	ldrb	r3, [r3, #1]
 8016560:	2b03      	cmp	r3, #3
 8016562:	d006      	beq.n	8016572 <lwip_netconn_do_connect+0x10a>
 8016564:	4b1a      	ldr	r3, [pc, #104]	; (80165d0 <lwip_netconn_do_connect+0x168>)
 8016566:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 801656a:	491a      	ldr	r1, [pc, #104]	; (80165d4 <lwip_netconn_do_connect+0x16c>)
 801656c:	481a      	ldr	r0, [pc, #104]	; (80165d8 <lwip_netconn_do_connect+0x170>)
 801656e:	f00d fcc7 	bl	8023f00 <iprintf>
              UNLOCK_TCPIP_CORE();
 8016572:	481a      	ldr	r0, [pc, #104]	; (80165dc <lwip_netconn_do_connect+0x174>)
 8016574:	f00c f9fd 	bl	8022972 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016578:	693b      	ldr	r3, [r7, #16]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	330c      	adds	r3, #12
 801657e:	2100      	movs	r1, #0
 8016580:	4618      	mov	r0, r3
 8016582:	f00c f954 	bl	802282e <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8016586:	4815      	ldr	r0, [pc, #84]	; (80165dc <lwip_netconn_do_connect+0x174>)
 8016588:	f00c f9e4 	bl	8022954 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 801658c:	693b      	ldr	r3, [r7, #16]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	785b      	ldrb	r3, [r3, #1]
 8016592:	2b03      	cmp	r3, #3
 8016594:	d116      	bne.n	80165c4 <lwip_netconn_do_connect+0x15c>
 8016596:	4b0e      	ldr	r3, [pc, #56]	; (80165d0 <lwip_netconn_do_connect+0x168>)
 8016598:	f240 5274 	movw	r2, #1396	; 0x574
 801659c:	490d      	ldr	r1, [pc, #52]	; (80165d4 <lwip_netconn_do_connect+0x16c>)
 801659e:	480e      	ldr	r0, [pc, #56]	; (80165d8 <lwip_netconn_do_connect+0x170>)
 80165a0:	f00d fcae 	bl	8023f00 <iprintf>
              return;
 80165a4:	e00e      	b.n	80165c4 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 80165a6:	4b0a      	ldr	r3, [pc, #40]	; (80165d0 <lwip_netconn_do_connect+0x168>)
 80165a8:	f240 527d 	movw	r2, #1405	; 0x57d
 80165ac:	490c      	ldr	r1, [pc, #48]	; (80165e0 <lwip_netconn_do_connect+0x178>)
 80165ae:	480a      	ldr	r0, [pc, #40]	; (80165d8 <lwip_netconn_do_connect+0x170>)
 80165b0:	f00d fca6 	bl	8023f00 <iprintf>
 80165b4:	23fa      	movs	r3, #250	; 0xfa
 80165b6:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 80165b8:	e000      	b.n	80165bc <lwip_netconn_do_connect+0x154>
        break;
 80165ba:	bf00      	nop
    }
  }
  msg->err = err;
 80165bc:	693b      	ldr	r3, [r7, #16]
 80165be:	7dfa      	ldrb	r2, [r7, #23]
 80165c0:	711a      	strb	r2, [r3, #4]
 80165c2:	e000      	b.n	80165c6 <lwip_netconn_do_connect+0x15e>
              return;
 80165c4:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 80165c6:	3718      	adds	r7, #24
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bd80      	pop	{r7, pc}
 80165cc:	08016349 	.word	0x08016349
 80165d0:	080257f8 	.word	0x080257f8
 80165d4:	08025bb8 	.word	0x08025bb8
 80165d8:	0802583c 	.word	0x0802583c
 80165dc:	20006694 	.word	0x20006694
 80165e0:	08025c40 	.word	0x08025c40

080165e4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b086      	sub	sp, #24
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80165f0:	697b      	ldr	r3, [r7, #20]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	685b      	ldr	r3, [r3, #4]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d07f      	beq.n	80166fa <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80165fa:	697b      	ldr	r3, [r7, #20]
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	781b      	ldrb	r3, [r3, #0]
 8016600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016604:	2b10      	cmp	r3, #16
 8016606:	d175      	bne.n	80166f4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8016608:	697b      	ldr	r3, [r7, #20]
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	785b      	ldrb	r3, [r3, #1]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d165      	bne.n	80166de <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8016612:	697b      	ldr	r3, [r7, #20]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	685b      	ldr	r3, [r3, #4]
 8016618:	7d1b      	ldrb	r3, [r3, #20]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d002      	beq.n	8016624 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 801661e:	23fa      	movs	r3, #250	; 0xfa
 8016620:	72fb      	strb	r3, [r7, #11]
 8016622:	e06c      	b.n	80166fe <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8016624:	23ff      	movs	r3, #255	; 0xff
 8016626:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8016628:	697b      	ldr	r3, [r7, #20]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	685b      	ldr	r3, [r3, #4]
 801662e:	f107 020b 	add.w	r2, r7, #11
 8016632:	7cf9      	ldrb	r1, [r7, #19]
 8016634:	4618      	mov	r0, r3
 8016636:	f003 f8ef 	bl	8019818 <tcp_listen_with_backlog_and_err>
 801663a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d05d      	beq.n	80166fe <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8016642:	697b      	ldr	r3, [r7, #20]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	3310      	adds	r3, #16
 8016648:	4618      	mov	r0, r3
 801664a:	f00c f8aa 	bl	80227a2 <sys_mbox_valid>
 801664e:	4603      	mov	r3, r0
 8016650:	2b00      	cmp	r3, #0
 8016652:	d00b      	beq.n	801666c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8016654:	697b      	ldr	r3, [r7, #20]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	3310      	adds	r3, #16
 801665a:	4618      	mov	r0, r3
 801665c:	f00c f81a 	bl	8022694 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8016660:	697b      	ldr	r3, [r7, #20]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	3310      	adds	r3, #16
 8016666:	4618      	mov	r0, r3
 8016668:	f00c f8ac 	bl	80227c4 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 801666c:	2300      	movs	r3, #0
 801666e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	3314      	adds	r3, #20
 8016676:	4618      	mov	r0, r3
 8016678:	f00c f893 	bl	80227a2 <sys_mbox_valid>
 801667c:	4603      	mov	r3, r0
 801667e:	2b00      	cmp	r3, #0
 8016680:	d108      	bne.n	8016694 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8016682:	697b      	ldr	r3, [r7, #20]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	3314      	adds	r3, #20
 8016688:	2106      	movs	r1, #6
 801668a:	4618      	mov	r0, r3
 801668c:	f00b ffe0 	bl	8022650 <sys_mbox_new>
 8016690:	4603      	mov	r3, r0
 8016692:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8016694:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d118      	bne.n	80166ce <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 801669c:	697b      	ldr	r3, [r7, #20]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	2202      	movs	r2, #2
 80166a2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80166a4:	697b      	ldr	r3, [r7, #20]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	68fa      	ldr	r2, [r7, #12]
 80166aa:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80166ac:	697b      	ldr	r3, [r7, #20]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	685a      	ldr	r2, [r3, #4]
 80166b2:	697b      	ldr	r3, [r7, #20]
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	4619      	mov	r1, r3
 80166b8:	4610      	mov	r0, r2
 80166ba:	f004 f98f 	bl	801a9dc <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80166be:	697b      	ldr	r3, [r7, #20]
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	685b      	ldr	r3, [r3, #4]
 80166c4:	4912      	ldr	r1, [pc, #72]	; (8016710 <lwip_netconn_do_listen+0x12c>)
 80166c6:	4618      	mov	r0, r3
 80166c8:	f004 fa00 	bl	801aacc <tcp_accept>
 80166cc:	e017      	b.n	80166fe <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80166ce:	68f8      	ldr	r0, [r7, #12]
 80166d0:	f002 fe98 	bl	8019404 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80166d4:	697b      	ldr	r3, [r7, #20]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	2200      	movs	r2, #0
 80166da:	605a      	str	r2, [r3, #4]
 80166dc:	e00f      	b.n	80166fe <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80166de:	697b      	ldr	r3, [r7, #20]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	785b      	ldrb	r3, [r3, #1]
 80166e4:	2b02      	cmp	r3, #2
 80166e6:	d102      	bne.n	80166ee <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80166e8:	2300      	movs	r3, #0
 80166ea:	72fb      	strb	r3, [r7, #11]
 80166ec:	e007      	b.n	80166fe <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80166ee:	23f5      	movs	r3, #245	; 0xf5
 80166f0:	72fb      	strb	r3, [r7, #11]
 80166f2:	e004      	b.n	80166fe <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80166f4:	23f0      	movs	r3, #240	; 0xf0
 80166f6:	72fb      	strb	r3, [r7, #11]
 80166f8:	e001      	b.n	80166fe <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80166fa:	23f5      	movs	r3, #245	; 0xf5
 80166fc:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80166fe:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8016702:	697b      	ldr	r3, [r7, #20]
 8016704:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8016706:	bf00      	nop
 8016708:	3718      	adds	r7, #24
 801670a:	46bd      	mov	sp, r7
 801670c:	bd80      	pop	{r7, pc}
 801670e:	bf00      	nop
 8016710:	08015955 	.word	0x08015955

08016714 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b084      	sub	sp, #16
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8016720:	68bb      	ldr	r3, [r7, #8]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	4618      	mov	r0, r3
 8016726:	f7fe fdd0 	bl	80152ca <netconn_err>
 801672a:	4603      	mov	r3, r0
 801672c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801672e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d134      	bne.n	80167a0 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8016736:	68bb      	ldr	r3, [r7, #8]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	685b      	ldr	r3, [r3, #4]
 801673c:	2b00      	cmp	r3, #0
 801673e:	d02d      	beq.n	801679c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016740:	68bb      	ldr	r3, [r7, #8]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	781b      	ldrb	r3, [r3, #0]
 8016746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801674a:	2b20      	cmp	r3, #32
 801674c:	d123      	bne.n	8016796 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 801674e:	68bb      	ldr	r3, [r7, #8]
 8016750:	689b      	ldr	r3, [r3, #8]
 8016752:	689b      	ldr	r3, [r3, #8]
 8016754:	2b00      	cmp	r3, #0
 8016756:	d10c      	bne.n	8016772 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8016758:	68bb      	ldr	r3, [r7, #8]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	685a      	ldr	r2, [r3, #4]
 801675e:	68bb      	ldr	r3, [r7, #8]
 8016760:	689b      	ldr	r3, [r3, #8]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	4619      	mov	r1, r3
 8016766:	4610      	mov	r0, r2
 8016768:	f009 f916 	bl	801f998 <udp_send>
 801676c:	4603      	mov	r3, r0
 801676e:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8016770:	e016      	b.n	80167a0 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8016772:	68bb      	ldr	r3, [r7, #8]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	6858      	ldr	r0, [r3, #4]
 8016778:	68bb      	ldr	r3, [r7, #8]
 801677a:	689b      	ldr	r3, [r3, #8]
 801677c:	6819      	ldr	r1, [r3, #0]
 801677e:	68bb      	ldr	r3, [r7, #8]
 8016780:	689b      	ldr	r3, [r3, #8]
 8016782:	f103 0208 	add.w	r2, r3, #8
 8016786:	68bb      	ldr	r3, [r7, #8]
 8016788:	689b      	ldr	r3, [r3, #8]
 801678a:	899b      	ldrh	r3, [r3, #12]
 801678c:	f009 f938 	bl	801fa00 <udp_sendto>
 8016790:	4603      	mov	r3, r0
 8016792:	73fb      	strb	r3, [r7, #15]
          break;
 8016794:	e004      	b.n	80167a0 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8016796:	23f5      	movs	r3, #245	; 0xf5
 8016798:	73fb      	strb	r3, [r7, #15]
          break;
 801679a:	e001      	b.n	80167a0 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 801679c:	23f5      	movs	r3, #245	; 0xf5
 801679e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80167a0:	68bb      	ldr	r3, [r7, #8]
 80167a2:	7bfa      	ldrb	r2, [r7, #15]
 80167a4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80167a6:	bf00      	nop
 80167a8:	3710      	adds	r7, #16
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bd80      	pop	{r7, pc}

080167ae <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80167ae:	b580      	push	{r7, lr}
 80167b0:	b086      	sub	sp, #24
 80167b2:	af00      	add	r7, sp, #0
 80167b4:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80167ba:	693b      	ldr	r3, [r7, #16]
 80167bc:	2200      	movs	r2, #0
 80167be:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80167c0:	693b      	ldr	r3, [r7, #16]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	685b      	ldr	r3, [r3, #4]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d022      	beq.n	8016810 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80167ca:	693b      	ldr	r3, [r7, #16]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	781b      	ldrb	r3, [r3, #0]
 80167d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80167d4:	2b10      	cmp	r3, #16
 80167d6:	d11b      	bne.n	8016810 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80167d8:	693b      	ldr	r3, [r7, #16]
 80167da:	689b      	ldr	r3, [r3, #8]
 80167dc:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80167de:	697b      	ldr	r3, [r7, #20]
 80167e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80167e4:	d202      	bcs.n	80167ec <lwip_netconn_do_recv+0x3e>
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	b29b      	uxth	r3, r3
 80167ea:	e001      	b.n	80167f0 <lwip_netconn_do_recv+0x42>
 80167ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80167f0:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80167f2:	693b      	ldr	r3, [r7, #16]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	685b      	ldr	r3, [r3, #4]
 80167f8:	89fa      	ldrh	r2, [r7, #14]
 80167fa:	4611      	mov	r1, r2
 80167fc:	4618      	mov	r0, r3
 80167fe:	f003 f90f 	bl	8019a20 <tcp_recved>
        remaining -= recved;
 8016802:	89fb      	ldrh	r3, [r7, #14]
 8016804:	697a      	ldr	r2, [r7, #20]
 8016806:	1ad3      	subs	r3, r2, r3
 8016808:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 801680a:	697b      	ldr	r3, [r7, #20]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d1e6      	bne.n	80167de <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8016810:	bf00      	nop
 8016812:	3718      	adds	r7, #24
 8016814:	46bd      	mov	sp, r7
 8016816:	bd80      	pop	{r7, pc}

08016818 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8016818:	b580      	push	{r7, lr}
 801681a:	b088      	sub	sp, #32
 801681c:	af00      	add	r7, sp, #0
 801681e:	6078      	str	r0, [r7, #4]
 8016820:	460b      	mov	r3, r1
 8016822:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8016824:	2300      	movs	r3, #0
 8016826:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d106      	bne.n	801683c <lwip_netconn_do_writemore+0x24>
 801682e:	4b96      	ldr	r3, [pc, #600]	; (8016a88 <lwip_netconn_do_writemore+0x270>)
 8016830:	f240 6273 	movw	r2, #1651	; 0x673
 8016834:	4995      	ldr	r1, [pc, #596]	; (8016a8c <lwip_netconn_do_writemore+0x274>)
 8016836:	4896      	ldr	r0, [pc, #600]	; (8016a90 <lwip_netconn_do_writemore+0x278>)
 8016838:	f00d fb62 	bl	8023f00 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	785b      	ldrb	r3, [r3, #1]
 8016840:	2b01      	cmp	r3, #1
 8016842:	d006      	beq.n	8016852 <lwip_netconn_do_writemore+0x3a>
 8016844:	4b90      	ldr	r3, [pc, #576]	; (8016a88 <lwip_netconn_do_writemore+0x270>)
 8016846:	f240 6274 	movw	r2, #1652	; 0x674
 801684a:	4992      	ldr	r1, [pc, #584]	; (8016a94 <lwip_netconn_do_writemore+0x27c>)
 801684c:	4890      	ldr	r0, [pc, #576]	; (8016a90 <lwip_netconn_do_writemore+0x278>)
 801684e:	f00d fb57 	bl	8023f00 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	6a1b      	ldr	r3, [r3, #32]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d106      	bne.n	8016868 <lwip_netconn_do_writemore+0x50>
 801685a:	4b8b      	ldr	r3, [pc, #556]	; (8016a88 <lwip_netconn_do_writemore+0x270>)
 801685c:	f240 6275 	movw	r2, #1653	; 0x675
 8016860:	498d      	ldr	r1, [pc, #564]	; (8016a98 <lwip_netconn_do_writemore+0x280>)
 8016862:	488b      	ldr	r0, [pc, #556]	; (8016a90 <lwip_netconn_do_writemore+0x278>)
 8016864:	f00d fb4c 	bl	8023f00 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	685b      	ldr	r3, [r3, #4]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d106      	bne.n	801687e <lwip_netconn_do_writemore+0x66>
 8016870:	4b85      	ldr	r3, [pc, #532]	; (8016a88 <lwip_netconn_do_writemore+0x270>)
 8016872:	f240 6276 	movw	r2, #1654	; 0x676
 8016876:	4989      	ldr	r1, [pc, #548]	; (8016a9c <lwip_netconn_do_writemore+0x284>)
 8016878:	4885      	ldr	r0, [pc, #532]	; (8016a90 <lwip_netconn_do_writemore+0x278>)
 801687a:	f00d fb41 	bl	8023f00 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	6a1b      	ldr	r3, [r3, #32]
 8016882:	699a      	ldr	r2, [r3, #24]
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	6a1b      	ldr	r3, [r3, #32]
 8016888:	695b      	ldr	r3, [r3, #20]
 801688a:	429a      	cmp	r2, r3
 801688c:	d306      	bcc.n	801689c <lwip_netconn_do_writemore+0x84>
 801688e:	4b7e      	ldr	r3, [pc, #504]	; (8016a88 <lwip_netconn_do_writemore+0x270>)
 8016890:	f240 6277 	movw	r2, #1655	; 0x677
 8016894:	4982      	ldr	r1, [pc, #520]	; (8016aa0 <lwip_netconn_do_writemore+0x288>)
 8016896:	487e      	ldr	r0, [pc, #504]	; (8016a90 <lwip_netconn_do_writemore+0x278>)
 8016898:	f00d fb32 	bl	8023f00 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	6a1b      	ldr	r3, [r3, #32]
 80168a0:	899b      	ldrh	r3, [r3, #12]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d106      	bne.n	80168b4 <lwip_netconn_do_writemore+0x9c>
 80168a6:	4b78      	ldr	r3, [pc, #480]	; (8016a88 <lwip_netconn_do_writemore+0x270>)
 80168a8:	f240 6279 	movw	r2, #1657	; 0x679
 80168ac:	497d      	ldr	r1, [pc, #500]	; (8016aa4 <lwip_netconn_do_writemore+0x28c>)
 80168ae:	4878      	ldr	r0, [pc, #480]	; (8016a90 <lwip_netconn_do_writemore+0x278>)
 80168b0:	f00d fb26 	bl	8023f00 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	6a1b      	ldr	r3, [r3, #32]
 80168b8:	7f1b      	ldrb	r3, [r3, #28]
 80168ba:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	7f1b      	ldrb	r3, [r3, #28]
 80168c0:	f003 0302 	and.w	r3, r3, #2
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d104      	bne.n	80168d2 <lwip_netconn_do_writemore+0xba>
 80168c8:	7ebb      	ldrb	r3, [r7, #26]
 80168ca:	f003 0304 	and.w	r3, r3, #4
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d001      	beq.n	80168d6 <lwip_netconn_do_writemore+0xbe>
 80168d2:	2301      	movs	r3, #1
 80168d4:	e000      	b.n	80168d8 <lwip_netconn_do_writemore+0xc0>
 80168d6:	2300      	movs	r3, #0
 80168d8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	6a1b      	ldr	r3, [r3, #32]
 80168de:	689b      	ldr	r3, [r3, #8]
 80168e0:	681a      	ldr	r2, [r3, #0]
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	6a1b      	ldr	r3, [r3, #32]
 80168e6:	691b      	ldr	r3, [r3, #16]
 80168e8:	4413      	add	r3, r2
 80168ea:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	6a1b      	ldr	r3, [r3, #32]
 80168f0:	689b      	ldr	r3, [r3, #8]
 80168f2:	685a      	ldr	r2, [r3, #4]
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	6a1b      	ldr	r3, [r3, #32]
 80168f8:	691b      	ldr	r3, [r3, #16]
 80168fa:	1ad3      	subs	r3, r2, r3
 80168fc:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80168fe:	693b      	ldr	r3, [r7, #16]
 8016900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016904:	d307      	bcc.n	8016916 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8016906:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801690a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 801690c:	7ebb      	ldrb	r3, [r7, #26]
 801690e:	f043 0302 	orr.w	r3, r3, #2
 8016912:	76bb      	strb	r3, [r7, #26]
 8016914:	e001      	b.n	801691a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8016916:	693b      	ldr	r3, [r7, #16]
 8016918:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	685b      	ldr	r3, [r3, #4]
 801691e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016922:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8016924:	89fa      	ldrh	r2, [r7, #14]
 8016926:	8bbb      	ldrh	r3, [r7, #28]
 8016928:	429a      	cmp	r2, r3
 801692a:	d216      	bcs.n	801695a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 801692c:	89fb      	ldrh	r3, [r7, #14]
 801692e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8016930:	7e3b      	ldrb	r3, [r7, #24]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d00d      	beq.n	8016952 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8016936:	8bbb      	ldrh	r3, [r7, #28]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d10e      	bne.n	801695a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	6a1b      	ldr	r3, [r3, #32]
 8016940:	699b      	ldr	r3, [r3, #24]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d102      	bne.n	801694c <lwip_netconn_do_writemore+0x134>
 8016946:	f06f 0306 	mvn.w	r3, #6
 801694a:	e000      	b.n	801694e <lwip_netconn_do_writemore+0x136>
 801694c:	2300      	movs	r3, #0
 801694e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8016950:	e07d      	b.n	8016a4e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8016952:	7ebb      	ldrb	r3, [r7, #26]
 8016954:	f043 0302 	orr.w	r3, r3, #2
 8016958:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	6a1b      	ldr	r3, [r3, #32]
 801695e:	691a      	ldr	r2, [r3, #16]
 8016960:	8bbb      	ldrh	r3, [r7, #28]
 8016962:	441a      	add	r2, r3
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	6a1b      	ldr	r3, [r3, #32]
 8016968:	689b      	ldr	r3, [r3, #8]
 801696a:	685b      	ldr	r3, [r3, #4]
 801696c:	429a      	cmp	r2, r3
 801696e:	d906      	bls.n	801697e <lwip_netconn_do_writemore+0x166>
 8016970:	4b45      	ldr	r3, [pc, #276]	; (8016a88 <lwip_netconn_do_writemore+0x270>)
 8016972:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8016976:	494c      	ldr	r1, [pc, #304]	; (8016aa8 <lwip_netconn_do_writemore+0x290>)
 8016978:	4845      	ldr	r0, [pc, #276]	; (8016a90 <lwip_netconn_do_writemore+0x278>)
 801697a:	f00d fac1 	bl	8023f00 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 801697e:	8bbb      	ldrh	r3, [r7, #28]
 8016980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016984:	4293      	cmp	r3, r2
 8016986:	d103      	bne.n	8016990 <lwip_netconn_do_writemore+0x178>
 8016988:	693b      	ldr	r3, [r7, #16]
 801698a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801698e:	d209      	bcs.n	80169a4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8016990:	693b      	ldr	r3, [r7, #16]
 8016992:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8016994:	8bba      	ldrh	r2, [r7, #28]
 8016996:	429a      	cmp	r2, r3
 8016998:	d10b      	bne.n	80169b2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	6a1b      	ldr	r3, [r3, #32]
 801699e:	899b      	ldrh	r3, [r3, #12]
 80169a0:	2b01      	cmp	r3, #1
 80169a2:	d906      	bls.n	80169b2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80169a4:	2301      	movs	r3, #1
 80169a6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80169a8:	7ebb      	ldrb	r3, [r7, #26]
 80169aa:	f043 0302 	orr.w	r3, r3, #2
 80169ae:	76bb      	strb	r3, [r7, #26]
 80169b0:	e001      	b.n	80169b6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80169b2:	2300      	movs	r3, #0
 80169b4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	6858      	ldr	r0, [r3, #4]
 80169ba:	7ebb      	ldrb	r3, [r7, #26]
 80169bc:	8bba      	ldrh	r2, [r7, #28]
 80169be:	6979      	ldr	r1, [r7, #20]
 80169c0:	f006 ff4e 	bl	801d860 <tcp_write>
 80169c4:	4603      	mov	r3, r0
 80169c6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80169c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d12c      	bne.n	8016a2a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	6a1b      	ldr	r3, [r3, #32]
 80169d4:	6999      	ldr	r1, [r3, #24]
 80169d6:	8bba      	ldrh	r2, [r7, #28]
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	6a1b      	ldr	r3, [r3, #32]
 80169dc:	440a      	add	r2, r1
 80169de:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	6a1b      	ldr	r3, [r3, #32]
 80169e4:	6919      	ldr	r1, [r3, #16]
 80169e6:	8bba      	ldrh	r2, [r7, #28]
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	6a1b      	ldr	r3, [r3, #32]
 80169ec:	440a      	add	r2, r1
 80169ee:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	6a1b      	ldr	r3, [r3, #32]
 80169f4:	691a      	ldr	r2, [r3, #16]
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	6a1b      	ldr	r3, [r3, #32]
 80169fa:	689b      	ldr	r3, [r3, #8]
 80169fc:	685b      	ldr	r3, [r3, #4]
 80169fe:	429a      	cmp	r2, r3
 8016a00:	d113      	bne.n	8016a2a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	6a1b      	ldr	r3, [r3, #32]
 8016a06:	899a      	ldrh	r2, [r3, #12]
 8016a08:	3a01      	subs	r2, #1
 8016a0a:	b292      	uxth	r2, r2
 8016a0c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	6a1b      	ldr	r3, [r3, #32]
 8016a12:	899b      	ldrh	r3, [r3, #12]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d008      	beq.n	8016a2a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	6a1b      	ldr	r3, [r3, #32]
 8016a1c:	689a      	ldr	r2, [r3, #8]
 8016a1e:	3208      	adds	r2, #8
 8016a20:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	6a1b      	ldr	r3, [r3, #32]
 8016a26:	2200      	movs	r2, #0
 8016a28:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8016a2a:	7e7b      	ldrb	r3, [r7, #25]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d004      	beq.n	8016a3a <lwip_netconn_do_writemore+0x222>
 8016a30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	f43f af50 	beq.w	80168da <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8016a3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d004      	beq.n	8016a4c <lwip_netconn_do_writemore+0x234>
 8016a42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016a4a:	d146      	bne.n	8016ada <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8016a4c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8016a4e:	7e3b      	ldrb	r3, [r7, #24]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d02b      	beq.n	8016aac <lwip_netconn_do_writemore+0x294>
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	6a1b      	ldr	r3, [r3, #32]
 8016a58:	699a      	ldr	r2, [r3, #24]
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	6a1b      	ldr	r3, [r3, #32]
 8016a5e:	695b      	ldr	r3, [r3, #20]
 8016a60:	429a      	cmp	r2, r3
 8016a62:	d223      	bcs.n	8016aac <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d005      	beq.n	8016a78 <lwip_netconn_do_writemore+0x260>
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a70:	2200      	movs	r2, #0
 8016a72:	2103      	movs	r1, #3
 8016a74:	6878      	ldr	r0, [r7, #4]
 8016a76:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	7f1b      	ldrb	r3, [r3, #28]
 8016a7c:	f043 0310 	orr.w	r3, r3, #16
 8016a80:	b2da      	uxtb	r2, r3
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	771a      	strb	r2, [r3, #28]
 8016a86:	e028      	b.n	8016ada <lwip_netconn_do_writemore+0x2c2>
 8016a88:	080257f8 	.word	0x080257f8
 8016a8c:	08025950 	.word	0x08025950
 8016a90:	0802583c 	.word	0x0802583c
 8016a94:	08025c58 	.word	0x08025c58
 8016a98:	08025960 	.word	0x08025960
 8016a9c:	08025c78 	.word	0x08025c78
 8016aa0:	08025c90 	.word	0x08025c90
 8016aa4:	08025cd0 	.word	0x08025cd0
 8016aa8:	08025cf8 	.word	0x08025cf8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	685b      	ldr	r3, [r3, #4]
 8016ab0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016ab4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8016ab8:	d305      	bcc.n	8016ac6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	685b      	ldr	r3, [r3, #4]
 8016abe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8016ac2:	2b04      	cmp	r3, #4
 8016ac4:	d909      	bls.n	8016ada <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d005      	beq.n	8016ada <lwip_netconn_do_writemore+0x2c2>
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	2103      	movs	r1, #3
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8016ada:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d11d      	bne.n	8016b1e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	6a1b      	ldr	r3, [r3, #32]
 8016ae6:	699a      	ldr	r2, [r3, #24]
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	6a1b      	ldr	r3, [r3, #32]
 8016aec:	695b      	ldr	r3, [r3, #20]
 8016aee:	429a      	cmp	r2, r3
 8016af0:	d002      	beq.n	8016af8 <lwip_netconn_do_writemore+0x2e0>
 8016af2:	7e3b      	ldrb	r3, [r7, #24]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d001      	beq.n	8016afc <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8016af8:	2301      	movs	r3, #1
 8016afa:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	685b      	ldr	r3, [r3, #4]
 8016b00:	4618      	mov	r0, r3
 8016b02:	f007 fc97 	bl	801e434 <tcp_output>
 8016b06:	4603      	mov	r3, r0
 8016b08:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8016b0a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8016b0e:	f113 0f04 	cmn.w	r3, #4
 8016b12:	d12c      	bne.n	8016b6e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8016b14:	7b3b      	ldrb	r3, [r7, #12]
 8016b16:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016b18:	2301      	movs	r3, #1
 8016b1a:	76fb      	strb	r3, [r7, #27]
 8016b1c:	e027      	b.n	8016b6e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8016b1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016b26:	d120      	bne.n	8016b6a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	685b      	ldr	r3, [r3, #4]
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f007 fc81 	bl	801e434 <tcp_output>
 8016b32:	4603      	mov	r3, r0
 8016b34:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8016b36:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8016b3a:	f113 0f04 	cmn.w	r3, #4
 8016b3e:	d104      	bne.n	8016b4a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8016b40:	7b7b      	ldrb	r3, [r7, #13]
 8016b42:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016b44:	2301      	movs	r3, #1
 8016b46:	76fb      	strb	r3, [r7, #27]
 8016b48:	e011      	b.n	8016b6e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8016b4a:	7e3b      	ldrb	r3, [r7, #24]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d00e      	beq.n	8016b6e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	6a1b      	ldr	r3, [r3, #32]
 8016b54:	699b      	ldr	r3, [r3, #24]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d102      	bne.n	8016b60 <lwip_netconn_do_writemore+0x348>
 8016b5a:	f06f 0306 	mvn.w	r3, #6
 8016b5e:	e000      	b.n	8016b62 <lwip_netconn_do_writemore+0x34a>
 8016b60:	2300      	movs	r3, #0
 8016b62:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016b64:	2301      	movs	r3, #1
 8016b66:	76fb      	strb	r3, [r7, #27]
 8016b68:	e001      	b.n	8016b6e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8016b6a:	2301      	movs	r3, #1
 8016b6c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8016b6e:	7efb      	ldrb	r3, [r7, #27]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d015      	beq.n	8016ba0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	6a1b      	ldr	r3, [r3, #32]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	330c      	adds	r3, #12
 8016b7c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	6a1b      	ldr	r3, [r3, #32]
 8016b82:	7ffa      	ldrb	r2, [r7, #31]
 8016b84:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	2200      	movs	r2, #0
 8016b8a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2200      	movs	r2, #0
 8016b90:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8016b92:	78fb      	ldrb	r3, [r7, #3]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d006      	beq.n	8016ba6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8016b98:	68b8      	ldr	r0, [r7, #8]
 8016b9a:	f00b fe79 	bl	8022890 <sys_sem_signal>
 8016b9e:	e002      	b.n	8016ba6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8016ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ba4:	e000      	b.n	8016ba8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8016ba6:	2300      	movs	r3, #0
}
 8016ba8:	4618      	mov	r0, r3
 8016baa:	3720      	adds	r7, #32
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bd80      	pop	{r7, pc}

08016bb0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b084      	sub	sp, #16
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8016bbc:	68bb      	ldr	r3, [r7, #8]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f7fe fb82 	bl	80152ca <netconn_err>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8016bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d166      	bne.n	8016ca0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8016bd2:	68bb      	ldr	r3, [r7, #8]
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	781b      	ldrb	r3, [r3, #0]
 8016bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016bdc:	2b10      	cmp	r3, #16
 8016bde:	d15d      	bne.n	8016c9c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	785b      	ldrb	r3, [r3, #1]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d002      	beq.n	8016bf0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8016bea:	23fb      	movs	r3, #251	; 0xfb
 8016bec:	73fb      	strb	r3, [r7, #15]
 8016bee:	e057      	b.n	8016ca0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8016bf0:	68bb      	ldr	r3, [r7, #8]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	685b      	ldr	r3, [r3, #4]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d04d      	beq.n	8016c96 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8016bfa:	68bb      	ldr	r3, [r7, #8]
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	2201      	movs	r2, #1
 8016c00:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	6a1b      	ldr	r3, [r3, #32]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d006      	beq.n	8016c1a <lwip_netconn_do_write+0x6a>
 8016c0c:	4b28      	ldr	r3, [pc, #160]	; (8016cb0 <lwip_netconn_do_write+0x100>)
 8016c0e:	f240 7223 	movw	r2, #1827	; 0x723
 8016c12:	4928      	ldr	r1, [pc, #160]	; (8016cb4 <lwip_netconn_do_write+0x104>)
 8016c14:	4828      	ldr	r0, [pc, #160]	; (8016cb8 <lwip_netconn_do_write+0x108>)
 8016c16:	f00d f973 	bl	8023f00 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8016c1a:	68bb      	ldr	r3, [r7, #8]
 8016c1c:	695b      	ldr	r3, [r3, #20]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d106      	bne.n	8016c30 <lwip_netconn_do_write+0x80>
 8016c22:	4b23      	ldr	r3, [pc, #140]	; (8016cb0 <lwip_netconn_do_write+0x100>)
 8016c24:	f240 7224 	movw	r2, #1828	; 0x724
 8016c28:	4924      	ldr	r1, [pc, #144]	; (8016cbc <lwip_netconn_do_write+0x10c>)
 8016c2a:	4823      	ldr	r0, [pc, #140]	; (8016cb8 <lwip_netconn_do_write+0x108>)
 8016c2c:	f00d f968 	bl	8023f00 <iprintf>
        msg->conn->current_msg = msg;
 8016c30:	68bb      	ldr	r3, [r7, #8]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	68ba      	ldr	r2, [r7, #8]
 8016c36:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	2100      	movs	r1, #0
 8016c3e:	4618      	mov	r0, r3
 8016c40:	f7ff fdea 	bl	8016818 <lwip_netconn_do_writemore>
 8016c44:	4603      	mov	r3, r0
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d02e      	beq.n	8016ca8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8016c4a:	68bb      	ldr	r3, [r7, #8]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	785b      	ldrb	r3, [r3, #1]
 8016c50:	2b01      	cmp	r3, #1
 8016c52:	d006      	beq.n	8016c62 <lwip_netconn_do_write+0xb2>
 8016c54:	4b16      	ldr	r3, [pc, #88]	; (8016cb0 <lwip_netconn_do_write+0x100>)
 8016c56:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8016c5a:	4919      	ldr	r1, [pc, #100]	; (8016cc0 <lwip_netconn_do_write+0x110>)
 8016c5c:	4816      	ldr	r0, [pc, #88]	; (8016cb8 <lwip_netconn_do_write+0x108>)
 8016c5e:	f00d f94f 	bl	8023f00 <iprintf>
          UNLOCK_TCPIP_CORE();
 8016c62:	4818      	ldr	r0, [pc, #96]	; (8016cc4 <lwip_netconn_do_write+0x114>)
 8016c64:	f00b fe85 	bl	8022972 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016c68:	68bb      	ldr	r3, [r7, #8]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	330c      	adds	r3, #12
 8016c6e:	2100      	movs	r1, #0
 8016c70:	4618      	mov	r0, r3
 8016c72:	f00b fddc 	bl	802282e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8016c76:	4813      	ldr	r0, [pc, #76]	; (8016cc4 <lwip_netconn_do_write+0x114>)
 8016c78:	f00b fe6c 	bl	8022954 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8016c7c:	68bb      	ldr	r3, [r7, #8]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	785b      	ldrb	r3, [r3, #1]
 8016c82:	2b01      	cmp	r3, #1
 8016c84:	d110      	bne.n	8016ca8 <lwip_netconn_do_write+0xf8>
 8016c86:	4b0a      	ldr	r3, [pc, #40]	; (8016cb0 <lwip_netconn_do_write+0x100>)
 8016c88:	f240 722c 	movw	r2, #1836	; 0x72c
 8016c8c:	490c      	ldr	r1, [pc, #48]	; (8016cc0 <lwip_netconn_do_write+0x110>)
 8016c8e:	480a      	ldr	r0, [pc, #40]	; (8016cb8 <lwip_netconn_do_write+0x108>)
 8016c90:	f00d f936 	bl	8023f00 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8016c94:	e008      	b.n	8016ca8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8016c96:	23f5      	movs	r3, #245	; 0xf5
 8016c98:	73fb      	strb	r3, [r7, #15]
 8016c9a:	e001      	b.n	8016ca0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8016c9c:	23fa      	movs	r3, #250	; 0xfa
 8016c9e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8016ca0:	68bb      	ldr	r3, [r7, #8]
 8016ca2:	7bfa      	ldrb	r2, [r7, #15]
 8016ca4:	711a      	strb	r2, [r3, #4]
 8016ca6:	e000      	b.n	8016caa <lwip_netconn_do_write+0xfa>
        return;
 8016ca8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8016caa:	3710      	adds	r7, #16
 8016cac:	46bd      	mov	sp, r7
 8016cae:	bd80      	pop	{r7, pc}
 8016cb0:	080257f8 	.word	0x080257f8
 8016cb4:	08025b9c 	.word	0x08025b9c
 8016cb8:	0802583c 	.word	0x0802583c
 8016cbc:	08025d24 	.word	0x08025d24
 8016cc0:	08025bb8 	.word	0x08025bb8
 8016cc4:	20006694 	.word	0x20006694

08016cc8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b084      	sub	sp, #16
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	785b      	ldrb	r3, [r3, #1]
 8016cda:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	685b      	ldr	r3, [r3, #4]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d069      	beq.n	8016dba <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	781b      	ldrb	r3, [r3, #0]
 8016cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8016cf0:	2b10      	cmp	r3, #16
 8016cf2:	d162      	bne.n	8016dba <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8016cf8:	2b03      	cmp	r3, #3
 8016cfa:	d002      	beq.n	8016d02 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8016cfc:	7afb      	ldrb	r3, [r7, #11]
 8016cfe:	2b02      	cmp	r3, #2
 8016d00:	d05b      	beq.n	8016dba <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8016d02:	7afb      	ldrb	r3, [r7, #11]
 8016d04:	2b03      	cmp	r3, #3
 8016d06:	d103      	bne.n	8016d10 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	22f5      	movs	r2, #245	; 0xf5
 8016d0c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8016d0e:	e059      	b.n	8016dc4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8016d10:	7afb      	ldrb	r3, [r7, #11]
 8016d12:	2b01      	cmp	r3, #1
 8016d14:	d103      	bne.n	8016d1e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	22fb      	movs	r2, #251	; 0xfb
 8016d1a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8016d1c:	e052      	b.n	8016dc4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	7a1b      	ldrb	r3, [r3, #8]
 8016d22:	f003 0301 	and.w	r3, r3, #1
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d004      	beq.n	8016d34 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7ff f804 	bl	8015d3c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	6a1b      	ldr	r3, [r3, #32]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d006      	beq.n	8016d4c <lwip_netconn_do_close+0x84>
 8016d3e:	4b23      	ldr	r3, [pc, #140]	; (8016dcc <lwip_netconn_do_close+0x104>)
 8016d40:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8016d44:	4922      	ldr	r1, [pc, #136]	; (8016dd0 <lwip_netconn_do_close+0x108>)
 8016d46:	4823      	ldr	r0, [pc, #140]	; (8016dd4 <lwip_netconn_do_close+0x10c>)
 8016d48:	f00d f8da 	bl	8023f00 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	2204      	movs	r2, #4
 8016d52:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	68fa      	ldr	r2, [r7, #12]
 8016d5a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	2100      	movs	r1, #0
 8016d62:	4618      	mov	r0, r3
 8016d64:	f7ff f868 	bl	8015e38 <lwip_netconn_do_close_internal>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d029      	beq.n	8016dc2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	785b      	ldrb	r3, [r3, #1]
 8016d74:	2b04      	cmp	r3, #4
 8016d76:	d006      	beq.n	8016d86 <lwip_netconn_do_close+0xbe>
 8016d78:	4b14      	ldr	r3, [pc, #80]	; (8016dcc <lwip_netconn_do_close+0x104>)
 8016d7a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8016d7e:	4916      	ldr	r1, [pc, #88]	; (8016dd8 <lwip_netconn_do_close+0x110>)
 8016d80:	4814      	ldr	r0, [pc, #80]	; (8016dd4 <lwip_netconn_do_close+0x10c>)
 8016d82:	f00d f8bd 	bl	8023f00 <iprintf>
        UNLOCK_TCPIP_CORE();
 8016d86:	4815      	ldr	r0, [pc, #84]	; (8016ddc <lwip_netconn_do_close+0x114>)
 8016d88:	f00b fdf3 	bl	8022972 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	330c      	adds	r3, #12
 8016d92:	2100      	movs	r1, #0
 8016d94:	4618      	mov	r0, r3
 8016d96:	f00b fd4a 	bl	802282e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8016d9a:	4810      	ldr	r0, [pc, #64]	; (8016ddc <lwip_netconn_do_close+0x114>)
 8016d9c:	f00b fdda 	bl	8022954 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	785b      	ldrb	r3, [r3, #1]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d00b      	beq.n	8016dc2 <lwip_netconn_do_close+0xfa>
 8016daa:	4b08      	ldr	r3, [pc, #32]	; (8016dcc <lwip_netconn_do_close+0x104>)
 8016dac:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8016db0:	4909      	ldr	r1, [pc, #36]	; (8016dd8 <lwip_netconn_do_close+0x110>)
 8016db2:	4808      	ldr	r0, [pc, #32]	; (8016dd4 <lwip_netconn_do_close+0x10c>)
 8016db4:	f00d f8a4 	bl	8023f00 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8016db8:	e003      	b.n	8016dc2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	22f5      	movs	r2, #245	; 0xf5
 8016dbe:	711a      	strb	r2, [r3, #4]
 8016dc0:	e000      	b.n	8016dc4 <lwip_netconn_do_close+0xfc>
      return;
 8016dc2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8016dc4:	3710      	adds	r7, #16
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	bd80      	pop	{r7, pc}
 8016dca:	bf00      	nop
 8016dcc:	080257f8 	.word	0x080257f8
 8016dd0:	08025b9c 	.word	0x08025b9c
 8016dd4:	0802583c 	.word	0x0802583c
 8016dd8:	08025bb8 	.word	0x08025bb8
 8016ddc:	20006694 	.word	0x20006694

08016de0 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b082      	sub	sp, #8
 8016de4:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8016de6:	2006      	movs	r0, #6
 8016de8:	f000 ff38 	bl	8017c5c <memp_malloc>
 8016dec:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d004      	beq.n	8016dfe <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8016df4:	2210      	movs	r2, #16
 8016df6:	2100      	movs	r1, #0
 8016df8:	6878      	ldr	r0, [r7, #4]
 8016dfa:	f00c ff99 	bl	8023d30 <memset>
  }
  return buf;
 8016dfe:	687b      	ldr	r3, [r7, #4]
}
 8016e00:	4618      	mov	r0, r3
 8016e02:	3708      	adds	r7, #8
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bd80      	pop	{r7, pc}

08016e08 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	b082      	sub	sp, #8
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d013      	beq.n	8016e3e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d00b      	beq.n	8016e36 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	4618      	mov	r0, r3
 8016e24:	f001 fe34 	bl	8018a90 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	605a      	str	r2, [r3, #4]
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	685a      	ldr	r2, [r3, #4]
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8016e36:	6879      	ldr	r1, [r7, #4]
 8016e38:	2006      	movs	r0, #6
 8016e3a:	f000 ff85 	bl	8017d48 <memp_free>
  }
}
 8016e3e:	bf00      	nop
 8016e40:	3708      	adds	r7, #8
 8016e42:	46bd      	mov	sp, r7
 8016e44:	bd80      	pop	{r7, pc}
	...

08016e48 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b084      	sub	sp, #16
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	60f8      	str	r0, [r7, #12]
 8016e50:	60b9      	str	r1, [r7, #8]
 8016e52:	4613      	mov	r3, r2
 8016e54:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d108      	bne.n	8016e6e <netbuf_ref+0x26>
 8016e5c:	4b1c      	ldr	r3, [pc, #112]	; (8016ed0 <netbuf_ref+0x88>)
 8016e5e:	2299      	movs	r2, #153	; 0x99
 8016e60:	491c      	ldr	r1, [pc, #112]	; (8016ed4 <netbuf_ref+0x8c>)
 8016e62:	481d      	ldr	r0, [pc, #116]	; (8016ed8 <netbuf_ref+0x90>)
 8016e64:	f00d f84c 	bl	8023f00 <iprintf>
 8016e68:	f06f 030f 	mvn.w	r3, #15
 8016e6c:	e02b      	b.n	8016ec6 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d004      	beq.n	8016e80 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	f001 fe08 	bl	8018a90 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8016e80:	2241      	movs	r2, #65	; 0x41
 8016e82:	2100      	movs	r1, #0
 8016e84:	2036      	movs	r0, #54	; 0x36
 8016e86:	f001 fb1f 	bl	80184c8 <pbuf_alloc>
 8016e8a:	4602      	mov	r2, r0
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d105      	bne.n	8016ea4 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8016e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ea2:	e010      	b.n	8016ec6 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	68ba      	ldr	r2, [r7, #8]
 8016eaa:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	88fa      	ldrh	r2, [r7, #6]
 8016eb2:	811a      	strh	r2, [r3, #8]
 8016eb4:	68fa      	ldr	r2, [r7, #12]
 8016eb6:	6812      	ldr	r2, [r2, #0]
 8016eb8:	891b      	ldrh	r3, [r3, #8]
 8016eba:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	681a      	ldr	r2, [r3, #0]
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8016ec4:	2300      	movs	r3, #0
}
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	3710      	adds	r7, #16
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	bd80      	pop	{r7, pc}
 8016ece:	bf00      	nop
 8016ed0:	08025d50 	.word	0x08025d50
 8016ed4:	08025e08 	.word	0x08025e08
 8016ed8:	08025da0 	.word	0x08025da0

08016edc <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b082      	sub	sp, #8
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d108      	bne.n	8016efc <netbuf_next+0x20>
 8016eea:	4b11      	ldr	r3, [pc, #68]	; (8016f30 <netbuf_next+0x54>)
 8016eec:	22e0      	movs	r2, #224	; 0xe0
 8016eee:	4911      	ldr	r1, [pc, #68]	; (8016f34 <netbuf_next+0x58>)
 8016ef0:	4811      	ldr	r0, [pc, #68]	; (8016f38 <netbuf_next+0x5c>)
 8016ef2:	f00d f805 	bl	8023f00 <iprintf>
 8016ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016efa:	e014      	b.n	8016f26 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	685b      	ldr	r3, [r3, #4]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d102      	bne.n	8016f0c <netbuf_next+0x30>
    return -1;
 8016f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f0a:	e00c      	b.n	8016f26 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	685b      	ldr	r3, [r3, #4]
 8016f10:	681a      	ldr	r2, [r3, #0]
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	685b      	ldr	r3, [r3, #4]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d101      	bne.n	8016f24 <netbuf_next+0x48>
    return 1;
 8016f20:	2301      	movs	r3, #1
 8016f22:	e000      	b.n	8016f26 <netbuf_next+0x4a>
  }
  return 0;
 8016f24:	2300      	movs	r3, #0
}
 8016f26:	4618      	mov	r0, r3
 8016f28:	3708      	adds	r7, #8
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bd80      	pop	{r7, pc}
 8016f2e:	bf00      	nop
 8016f30:	08025d50 	.word	0x08025d50
 8016f34:	08025eb0 	.word	0x08025eb0
 8016f38:	08025da0 	.word	0x08025da0

08016f3c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b084      	sub	sp, #16
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]
 8016f44:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8016f46:	f008 fb2d 	bl	801f5a4 <sys_timeouts_sleeptime>
 8016f4a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016f52:	d10b      	bne.n	8016f6c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8016f54:	4813      	ldr	r0, [pc, #76]	; (8016fa4 <tcpip_timeouts_mbox_fetch+0x68>)
 8016f56:	f00b fd0c 	bl	8022972 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	6839      	ldr	r1, [r7, #0]
 8016f5e:	6878      	ldr	r0, [r7, #4]
 8016f60:	f00b fbc4 	bl	80226ec <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8016f64:	480f      	ldr	r0, [pc, #60]	; (8016fa4 <tcpip_timeouts_mbox_fetch+0x68>)
 8016f66:	f00b fcf5 	bl	8022954 <sys_mutex_lock>
    return;
 8016f6a:	e018      	b.n	8016f9e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d102      	bne.n	8016f78 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8016f72:	f008 fadd 	bl	801f530 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016f76:	e7e6      	b.n	8016f46 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8016f78:	480a      	ldr	r0, [pc, #40]	; (8016fa4 <tcpip_timeouts_mbox_fetch+0x68>)
 8016f7a:	f00b fcfa 	bl	8022972 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8016f7e:	68fa      	ldr	r2, [r7, #12]
 8016f80:	6839      	ldr	r1, [r7, #0]
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f00b fbb2 	bl	80226ec <sys_arch_mbox_fetch>
 8016f88:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8016f8a:	4806      	ldr	r0, [pc, #24]	; (8016fa4 <tcpip_timeouts_mbox_fetch+0x68>)
 8016f8c:	f00b fce2 	bl	8022954 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8016f90:	68bb      	ldr	r3, [r7, #8]
 8016f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016f96:	d102      	bne.n	8016f9e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016f98:	f008 faca 	bl	801f530 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016f9c:	e7d3      	b.n	8016f46 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8016f9e:	3710      	adds	r7, #16
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd80      	pop	{r7, pc}
 8016fa4:	20006694 	.word	0x20006694

08016fa8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b084      	sub	sp, #16
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8016fb0:	4810      	ldr	r0, [pc, #64]	; (8016ff4 <tcpip_thread+0x4c>)
 8016fb2:	f00b fccf 	bl	8022954 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8016fb6:	4b10      	ldr	r3, [pc, #64]	; (8016ff8 <tcpip_thread+0x50>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d005      	beq.n	8016fca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8016fbe:	4b0e      	ldr	r3, [pc, #56]	; (8016ff8 <tcpip_thread+0x50>)
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	4a0e      	ldr	r2, [pc, #56]	; (8016ffc <tcpip_thread+0x54>)
 8016fc4:	6812      	ldr	r2, [r2, #0]
 8016fc6:	4610      	mov	r0, r2
 8016fc8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016fca:	f107 030c 	add.w	r3, r7, #12
 8016fce:	4619      	mov	r1, r3
 8016fd0:	480b      	ldr	r0, [pc, #44]	; (8017000 <tcpip_thread+0x58>)
 8016fd2:	f7ff ffb3 	bl	8016f3c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d106      	bne.n	8016fea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016fdc:	4b09      	ldr	r3, [pc, #36]	; (8017004 <tcpip_thread+0x5c>)
 8016fde:	2291      	movs	r2, #145	; 0x91
 8016fe0:	4909      	ldr	r1, [pc, #36]	; (8017008 <tcpip_thread+0x60>)
 8016fe2:	480a      	ldr	r0, [pc, #40]	; (801700c <tcpip_thread+0x64>)
 8016fe4:	f00c ff8c 	bl	8023f00 <iprintf>
      continue;
 8016fe8:	e003      	b.n	8016ff2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	4618      	mov	r0, r3
 8016fee:	f000 f80f 	bl	8017010 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016ff2:	e7ea      	b.n	8016fca <tcpip_thread+0x22>
 8016ff4:	20006694 	.word	0x20006694
 8016ff8:	20006688 	.word	0x20006688
 8016ffc:	2000668c 	.word	0x2000668c
 8017000:	20006690 	.word	0x20006690
 8017004:	08025ee8 	.word	0x08025ee8
 8017008:	08025f18 	.word	0x08025f18
 801700c:	08025f38 	.word	0x08025f38

08017010 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8017010:	b580      	push	{r7, lr}
 8017012:	b082      	sub	sp, #8
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	781b      	ldrb	r3, [r3, #0]
 801701c:	2b02      	cmp	r3, #2
 801701e:	d026      	beq.n	801706e <tcpip_thread_handle_msg+0x5e>
 8017020:	2b02      	cmp	r3, #2
 8017022:	dc2b      	bgt.n	801707c <tcpip_thread_handle_msg+0x6c>
 8017024:	2b00      	cmp	r3, #0
 8017026:	d002      	beq.n	801702e <tcpip_thread_handle_msg+0x1e>
 8017028:	2b01      	cmp	r3, #1
 801702a:	d015      	beq.n	8017058 <tcpip_thread_handle_msg+0x48>
 801702c:	e026      	b.n	801707c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	68db      	ldr	r3, [r3, #12]
 8017032:	687a      	ldr	r2, [r7, #4]
 8017034:	6850      	ldr	r0, [r2, #4]
 8017036:	687a      	ldr	r2, [r7, #4]
 8017038:	6892      	ldr	r2, [r2, #8]
 801703a:	4611      	mov	r1, r2
 801703c:	4798      	blx	r3
 801703e:	4603      	mov	r3, r0
 8017040:	2b00      	cmp	r3, #0
 8017042:	d004      	beq.n	801704e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	685b      	ldr	r3, [r3, #4]
 8017048:	4618      	mov	r0, r3
 801704a:	f001 fd21 	bl	8018a90 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801704e:	6879      	ldr	r1, [r7, #4]
 8017050:	2009      	movs	r0, #9
 8017052:	f000 fe79 	bl	8017d48 <memp_free>
      break;
 8017056:	e018      	b.n	801708a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	685b      	ldr	r3, [r3, #4]
 801705c:	687a      	ldr	r2, [r7, #4]
 801705e:	6892      	ldr	r2, [r2, #8]
 8017060:	4610      	mov	r0, r2
 8017062:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017064:	6879      	ldr	r1, [r7, #4]
 8017066:	2008      	movs	r0, #8
 8017068:	f000 fe6e 	bl	8017d48 <memp_free>
      break;
 801706c:	e00d      	b.n	801708a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	685b      	ldr	r3, [r3, #4]
 8017072:	687a      	ldr	r2, [r7, #4]
 8017074:	6892      	ldr	r2, [r2, #8]
 8017076:	4610      	mov	r0, r2
 8017078:	4798      	blx	r3
      break;
 801707a:	e006      	b.n	801708a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801707c:	4b05      	ldr	r3, [pc, #20]	; (8017094 <tcpip_thread_handle_msg+0x84>)
 801707e:	22cf      	movs	r2, #207	; 0xcf
 8017080:	4905      	ldr	r1, [pc, #20]	; (8017098 <tcpip_thread_handle_msg+0x88>)
 8017082:	4806      	ldr	r0, [pc, #24]	; (801709c <tcpip_thread_handle_msg+0x8c>)
 8017084:	f00c ff3c 	bl	8023f00 <iprintf>
      break;
 8017088:	bf00      	nop
  }
}
 801708a:	bf00      	nop
 801708c:	3708      	adds	r7, #8
 801708e:	46bd      	mov	sp, r7
 8017090:	bd80      	pop	{r7, pc}
 8017092:	bf00      	nop
 8017094:	08025ee8 	.word	0x08025ee8
 8017098:	08025f18 	.word	0x08025f18
 801709c:	08025f38 	.word	0x08025f38

080170a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80170a0:	b580      	push	{r7, lr}
 80170a2:	b086      	sub	sp, #24
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	60f8      	str	r0, [r7, #12]
 80170a8:	60b9      	str	r1, [r7, #8]
 80170aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80170ac:	481a      	ldr	r0, [pc, #104]	; (8017118 <tcpip_inpkt+0x78>)
 80170ae:	f00b fb78 	bl	80227a2 <sys_mbox_valid>
 80170b2:	4603      	mov	r3, r0
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d105      	bne.n	80170c4 <tcpip_inpkt+0x24>
 80170b8:	4b18      	ldr	r3, [pc, #96]	; (801711c <tcpip_inpkt+0x7c>)
 80170ba:	22fc      	movs	r2, #252	; 0xfc
 80170bc:	4918      	ldr	r1, [pc, #96]	; (8017120 <tcpip_inpkt+0x80>)
 80170be:	4819      	ldr	r0, [pc, #100]	; (8017124 <tcpip_inpkt+0x84>)
 80170c0:	f00c ff1e 	bl	8023f00 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80170c4:	2009      	movs	r0, #9
 80170c6:	f000 fdc9 	bl	8017c5c <memp_malloc>
 80170ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80170cc:	697b      	ldr	r3, [r7, #20]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d102      	bne.n	80170d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80170d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80170d6:	e01a      	b.n	801710e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80170d8:	697b      	ldr	r3, [r7, #20]
 80170da:	2200      	movs	r2, #0
 80170dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80170de:	697b      	ldr	r3, [r7, #20]
 80170e0:	68fa      	ldr	r2, [r7, #12]
 80170e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	68ba      	ldr	r2, [r7, #8]
 80170e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	687a      	ldr	r2, [r7, #4]
 80170ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80170f0:	6979      	ldr	r1, [r7, #20]
 80170f2:	4809      	ldr	r0, [pc, #36]	; (8017118 <tcpip_inpkt+0x78>)
 80170f4:	f00b fae0 	bl	80226b8 <sys_mbox_trypost>
 80170f8:	4603      	mov	r3, r0
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d006      	beq.n	801710c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80170fe:	6979      	ldr	r1, [r7, #20]
 8017100:	2009      	movs	r0, #9
 8017102:	f000 fe21 	bl	8017d48 <memp_free>
    return ERR_MEM;
 8017106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801710a:	e000      	b.n	801710e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801710c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801710e:	4618      	mov	r0, r3
 8017110:	3718      	adds	r7, #24
 8017112:	46bd      	mov	sp, r7
 8017114:	bd80      	pop	{r7, pc}
 8017116:	bf00      	nop
 8017118:	20006690 	.word	0x20006690
 801711c:	08025ee8 	.word	0x08025ee8
 8017120:	08025f60 	.word	0x08025f60
 8017124:	08025f38 	.word	0x08025f38

08017128 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8017128:	b580      	push	{r7, lr}
 801712a:	b082      	sub	sp, #8
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
 8017130:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8017132:	683b      	ldr	r3, [r7, #0]
 8017134:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017138:	f003 0318 	and.w	r3, r3, #24
 801713c:	2b00      	cmp	r3, #0
 801713e:	d006      	beq.n	801714e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8017140:	4a08      	ldr	r2, [pc, #32]	; (8017164 <tcpip_input+0x3c>)
 8017142:	6839      	ldr	r1, [r7, #0]
 8017144:	6878      	ldr	r0, [r7, #4]
 8017146:	f7ff ffab 	bl	80170a0 <tcpip_inpkt>
 801714a:	4603      	mov	r3, r0
 801714c:	e005      	b.n	801715a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801714e:	4a06      	ldr	r2, [pc, #24]	; (8017168 <tcpip_input+0x40>)
 8017150:	6839      	ldr	r1, [r7, #0]
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f7ff ffa4 	bl	80170a0 <tcpip_inpkt>
 8017158:	4603      	mov	r3, r0
}
 801715a:	4618      	mov	r0, r3
 801715c:	3708      	adds	r7, #8
 801715e:	46bd      	mov	sp, r7
 8017160:	bd80      	pop	{r7, pc}
 8017162:	bf00      	nop
 8017164:	080224a5 	.word	0x080224a5
 8017168:	080213ad 	.word	0x080213ad

0801716c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801716c:	b580      	push	{r7, lr}
 801716e:	b084      	sub	sp, #16
 8017170:	af00      	add	r7, sp, #0
 8017172:	6078      	str	r0, [r7, #4]
 8017174:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017176:	4819      	ldr	r0, [pc, #100]	; (80171dc <tcpip_try_callback+0x70>)
 8017178:	f00b fb13 	bl	80227a2 <sys_mbox_valid>
 801717c:	4603      	mov	r3, r0
 801717e:	2b00      	cmp	r3, #0
 8017180:	d106      	bne.n	8017190 <tcpip_try_callback+0x24>
 8017182:	4b17      	ldr	r3, [pc, #92]	; (80171e0 <tcpip_try_callback+0x74>)
 8017184:	f240 125d 	movw	r2, #349	; 0x15d
 8017188:	4916      	ldr	r1, [pc, #88]	; (80171e4 <tcpip_try_callback+0x78>)
 801718a:	4817      	ldr	r0, [pc, #92]	; (80171e8 <tcpip_try_callback+0x7c>)
 801718c:	f00c feb8 	bl	8023f00 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8017190:	2008      	movs	r0, #8
 8017192:	f000 fd63 	bl	8017c5c <memp_malloc>
 8017196:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d102      	bne.n	80171a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801719e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80171a2:	e017      	b.n	80171d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	2201      	movs	r2, #1
 80171a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	687a      	ldr	r2, [r7, #4]
 80171ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	683a      	ldr	r2, [r7, #0]
 80171b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80171b6:	68f9      	ldr	r1, [r7, #12]
 80171b8:	4808      	ldr	r0, [pc, #32]	; (80171dc <tcpip_try_callback+0x70>)
 80171ba:	f00b fa7d 	bl	80226b8 <sys_mbox_trypost>
 80171be:	4603      	mov	r3, r0
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d006      	beq.n	80171d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80171c4:	68f9      	ldr	r1, [r7, #12]
 80171c6:	2008      	movs	r0, #8
 80171c8:	f000 fdbe 	bl	8017d48 <memp_free>
    return ERR_MEM;
 80171cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80171d0:	e000      	b.n	80171d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80171d2:	2300      	movs	r3, #0
}
 80171d4:	4618      	mov	r0, r3
 80171d6:	3710      	adds	r7, #16
 80171d8:	46bd      	mov	sp, r7
 80171da:	bd80      	pop	{r7, pc}
 80171dc:	20006690 	.word	0x20006690
 80171e0:	08025ee8 	.word	0x08025ee8
 80171e4:	08025f60 	.word	0x08025f60
 80171e8:	08025f38 	.word	0x08025f38

080171ec <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b084      	sub	sp, #16
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	60f8      	str	r0, [r7, #12]
 80171f4:	60b9      	str	r1, [r7, #8]
 80171f6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80171f8:	4806      	ldr	r0, [pc, #24]	; (8017214 <tcpip_send_msg_wait_sem+0x28>)
 80171fa:	f00b fbab 	bl	8022954 <sys_mutex_lock>
  fn(apimsg);
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	68b8      	ldr	r0, [r7, #8]
 8017202:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8017204:	4803      	ldr	r0, [pc, #12]	; (8017214 <tcpip_send_msg_wait_sem+0x28>)
 8017206:	f00b fbb4 	bl	8022972 <sys_mutex_unlock>
  return ERR_OK;
 801720a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801720c:	4618      	mov	r0, r3
 801720e:	3710      	adds	r7, #16
 8017210:	46bd      	mov	sp, r7
 8017212:	bd80      	pop	{r7, pc}
 8017214:	20006694 	.word	0x20006694

08017218 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8017218:	b580      	push	{r7, lr}
 801721a:	b084      	sub	sp, #16
 801721c:	af02      	add	r7, sp, #8
 801721e:	6078      	str	r0, [r7, #4]
 8017220:	6039      	str	r1, [r7, #0]
  lwip_init();
 8017222:	f000 f871 	bl	8017308 <lwip_init>

  tcpip_init_done = initfunc;
 8017226:	4a17      	ldr	r2, [pc, #92]	; (8017284 <tcpip_init+0x6c>)
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801722c:	4a16      	ldr	r2, [pc, #88]	; (8017288 <tcpip_init+0x70>)
 801722e:	683b      	ldr	r3, [r7, #0]
 8017230:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8017232:	2106      	movs	r1, #6
 8017234:	4815      	ldr	r0, [pc, #84]	; (801728c <tcpip_init+0x74>)
 8017236:	f00b fa0b 	bl	8022650 <sys_mbox_new>
 801723a:	4603      	mov	r3, r0
 801723c:	2b00      	cmp	r3, #0
 801723e:	d006      	beq.n	801724e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8017240:	4b13      	ldr	r3, [pc, #76]	; (8017290 <tcpip_init+0x78>)
 8017242:	f240 2261 	movw	r2, #609	; 0x261
 8017246:	4913      	ldr	r1, [pc, #76]	; (8017294 <tcpip_init+0x7c>)
 8017248:	4813      	ldr	r0, [pc, #76]	; (8017298 <tcpip_init+0x80>)
 801724a:	f00c fe59 	bl	8023f00 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801724e:	4813      	ldr	r0, [pc, #76]	; (801729c <tcpip_init+0x84>)
 8017250:	f00b fb64 	bl	802291c <sys_mutex_new>
 8017254:	4603      	mov	r3, r0
 8017256:	2b00      	cmp	r3, #0
 8017258:	d006      	beq.n	8017268 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801725a:	4b0d      	ldr	r3, [pc, #52]	; (8017290 <tcpip_init+0x78>)
 801725c:	f240 2265 	movw	r2, #613	; 0x265
 8017260:	490f      	ldr	r1, [pc, #60]	; (80172a0 <tcpip_init+0x88>)
 8017262:	480d      	ldr	r0, [pc, #52]	; (8017298 <tcpip_init+0x80>)
 8017264:	f00c fe4c 	bl	8023f00 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8017268:	2300      	movs	r3, #0
 801726a:	9300      	str	r3, [sp, #0]
 801726c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017270:	2200      	movs	r2, #0
 8017272:	490c      	ldr	r1, [pc, #48]	; (80172a4 <tcpip_init+0x8c>)
 8017274:	480c      	ldr	r0, [pc, #48]	; (80172a8 <tcpip_init+0x90>)
 8017276:	f00b fb89 	bl	802298c <sys_thread_new>
}
 801727a:	bf00      	nop
 801727c:	3708      	adds	r7, #8
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}
 8017282:	bf00      	nop
 8017284:	20006688 	.word	0x20006688
 8017288:	2000668c 	.word	0x2000668c
 801728c:	20006690 	.word	0x20006690
 8017290:	08025ee8 	.word	0x08025ee8
 8017294:	08025f70 	.word	0x08025f70
 8017298:	08025f38 	.word	0x08025f38
 801729c:	20006694 	.word	0x20006694
 80172a0:	08025f94 	.word	0x08025f94
 80172a4:	08016fa9 	.word	0x08016fa9
 80172a8:	08025fb8 	.word	0x08025fb8

080172ac <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80172ac:	b480      	push	{r7}
 80172ae:	b083      	sub	sp, #12
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	4603      	mov	r3, r0
 80172b4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80172b6:	88fb      	ldrh	r3, [r7, #6]
 80172b8:	021b      	lsls	r3, r3, #8
 80172ba:	b21a      	sxth	r2, r3
 80172bc:	88fb      	ldrh	r3, [r7, #6]
 80172be:	0a1b      	lsrs	r3, r3, #8
 80172c0:	b29b      	uxth	r3, r3
 80172c2:	b21b      	sxth	r3, r3
 80172c4:	4313      	orrs	r3, r2
 80172c6:	b21b      	sxth	r3, r3
 80172c8:	b29b      	uxth	r3, r3
}
 80172ca:	4618      	mov	r0, r3
 80172cc:	370c      	adds	r7, #12
 80172ce:	46bd      	mov	sp, r7
 80172d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d4:	4770      	bx	lr

080172d6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80172d6:	b480      	push	{r7}
 80172d8:	b083      	sub	sp, #12
 80172da:	af00      	add	r7, sp, #0
 80172dc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	061a      	lsls	r2, r3, #24
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	021b      	lsls	r3, r3, #8
 80172e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80172ea:	431a      	orrs	r2, r3
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	0a1b      	lsrs	r3, r3, #8
 80172f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80172f4:	431a      	orrs	r2, r3
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	0e1b      	lsrs	r3, r3, #24
 80172fa:	4313      	orrs	r3, r2
}
 80172fc:	4618      	mov	r0, r3
 80172fe:	370c      	adds	r7, #12
 8017300:	46bd      	mov	sp, r7
 8017302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017306:	4770      	bx	lr

08017308 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8017308:	b580      	push	{r7, lr}
 801730a:	b082      	sub	sp, #8
 801730c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801730e:	2300      	movs	r3, #0
 8017310:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8017312:	f00b faf5 	bl	8022900 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8017316:	f000 f8d5 	bl	80174c4 <mem_init>
  memp_init();
 801731a:	f000 fc31 	bl	8017b80 <memp_init>
  pbuf_init();
  netif_init();
 801731e:	f000 fd3d 	bl	8017d9c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8017322:	f008 f977 	bl	801f614 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8017326:	f001 fe5d 	bl	8018fe4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801732a:	f008 f8b9 	bl	801f4a0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801732e:	bf00      	nop
 8017330:	3708      	adds	r7, #8
 8017332:	46bd      	mov	sp, r7
 8017334:	bd80      	pop	{r7, pc}
	...

08017338 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8017338:	b480      	push	{r7}
 801733a:	b083      	sub	sp, #12
 801733c:	af00      	add	r7, sp, #0
 801733e:	4603      	mov	r3, r0
 8017340:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8017342:	4b05      	ldr	r3, [pc, #20]	; (8017358 <ptr_to_mem+0x20>)
 8017344:	681a      	ldr	r2, [r3, #0]
 8017346:	88fb      	ldrh	r3, [r7, #6]
 8017348:	4413      	add	r3, r2
}
 801734a:	4618      	mov	r0, r3
 801734c:	370c      	adds	r7, #12
 801734e:	46bd      	mov	sp, r7
 8017350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017354:	4770      	bx	lr
 8017356:	bf00      	nop
 8017358:	20008ec4 	.word	0x20008ec4

0801735c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801735c:	b480      	push	{r7}
 801735e:	b083      	sub	sp, #12
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8017364:	4b05      	ldr	r3, [pc, #20]	; (801737c <mem_to_ptr+0x20>)
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	687a      	ldr	r2, [r7, #4]
 801736a:	1ad3      	subs	r3, r2, r3
 801736c:	b29b      	uxth	r3, r3
}
 801736e:	4618      	mov	r0, r3
 8017370:	370c      	adds	r7, #12
 8017372:	46bd      	mov	sp, r7
 8017374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017378:	4770      	bx	lr
 801737a:	bf00      	nop
 801737c:	20008ec4 	.word	0x20008ec4

08017380 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8017380:	b590      	push	{r4, r7, lr}
 8017382:	b085      	sub	sp, #20
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017388:	4b45      	ldr	r3, [pc, #276]	; (80174a0 <plug_holes+0x120>)
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	687a      	ldr	r2, [r7, #4]
 801738e:	429a      	cmp	r2, r3
 8017390:	d206      	bcs.n	80173a0 <plug_holes+0x20>
 8017392:	4b44      	ldr	r3, [pc, #272]	; (80174a4 <plug_holes+0x124>)
 8017394:	f240 12df 	movw	r2, #479	; 0x1df
 8017398:	4943      	ldr	r1, [pc, #268]	; (80174a8 <plug_holes+0x128>)
 801739a:	4844      	ldr	r0, [pc, #272]	; (80174ac <plug_holes+0x12c>)
 801739c:	f00c fdb0 	bl	8023f00 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80173a0:	4b43      	ldr	r3, [pc, #268]	; (80174b0 <plug_holes+0x130>)
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	687a      	ldr	r2, [r7, #4]
 80173a6:	429a      	cmp	r2, r3
 80173a8:	d306      	bcc.n	80173b8 <plug_holes+0x38>
 80173aa:	4b3e      	ldr	r3, [pc, #248]	; (80174a4 <plug_holes+0x124>)
 80173ac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80173b0:	4940      	ldr	r1, [pc, #256]	; (80174b4 <plug_holes+0x134>)
 80173b2:	483e      	ldr	r0, [pc, #248]	; (80174ac <plug_holes+0x12c>)
 80173b4:	f00c fda4 	bl	8023f00 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	791b      	ldrb	r3, [r3, #4]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d006      	beq.n	80173ce <plug_holes+0x4e>
 80173c0:	4b38      	ldr	r3, [pc, #224]	; (80174a4 <plug_holes+0x124>)
 80173c2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80173c6:	493c      	ldr	r1, [pc, #240]	; (80174b8 <plug_holes+0x138>)
 80173c8:	4838      	ldr	r0, [pc, #224]	; (80174ac <plug_holes+0x12c>)
 80173ca:	f00c fd99 	bl	8023f00 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	881b      	ldrh	r3, [r3, #0]
 80173d2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80173d6:	d906      	bls.n	80173e6 <plug_holes+0x66>
 80173d8:	4b32      	ldr	r3, [pc, #200]	; (80174a4 <plug_holes+0x124>)
 80173da:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80173de:	4937      	ldr	r1, [pc, #220]	; (80174bc <plug_holes+0x13c>)
 80173e0:	4832      	ldr	r0, [pc, #200]	; (80174ac <plug_holes+0x12c>)
 80173e2:	f00c fd8d 	bl	8023f00 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	881b      	ldrh	r3, [r3, #0]
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7ff ffa4 	bl	8017338 <ptr_to_mem>
 80173f0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80173f2:	687a      	ldr	r2, [r7, #4]
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	429a      	cmp	r2, r3
 80173f8:	d024      	beq.n	8017444 <plug_holes+0xc4>
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	791b      	ldrb	r3, [r3, #4]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d120      	bne.n	8017444 <plug_holes+0xc4>
 8017402:	4b2b      	ldr	r3, [pc, #172]	; (80174b0 <plug_holes+0x130>)
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	68fa      	ldr	r2, [r7, #12]
 8017408:	429a      	cmp	r2, r3
 801740a:	d01b      	beq.n	8017444 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801740c:	4b2c      	ldr	r3, [pc, #176]	; (80174c0 <plug_holes+0x140>)
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	68fa      	ldr	r2, [r7, #12]
 8017412:	429a      	cmp	r2, r3
 8017414:	d102      	bne.n	801741c <plug_holes+0x9c>
      lfree = mem;
 8017416:	4a2a      	ldr	r2, [pc, #168]	; (80174c0 <plug_holes+0x140>)
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	881a      	ldrh	r2, [r3, #0]
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	881b      	ldrh	r3, [r3, #0]
 8017428:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801742c:	d00a      	beq.n	8017444 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	881b      	ldrh	r3, [r3, #0]
 8017432:	4618      	mov	r0, r3
 8017434:	f7ff ff80 	bl	8017338 <ptr_to_mem>
 8017438:	4604      	mov	r4, r0
 801743a:	6878      	ldr	r0, [r7, #4]
 801743c:	f7ff ff8e 	bl	801735c <mem_to_ptr>
 8017440:	4603      	mov	r3, r0
 8017442:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	885b      	ldrh	r3, [r3, #2]
 8017448:	4618      	mov	r0, r3
 801744a:	f7ff ff75 	bl	8017338 <ptr_to_mem>
 801744e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8017450:	68ba      	ldr	r2, [r7, #8]
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	429a      	cmp	r2, r3
 8017456:	d01f      	beq.n	8017498 <plug_holes+0x118>
 8017458:	68bb      	ldr	r3, [r7, #8]
 801745a:	791b      	ldrb	r3, [r3, #4]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d11b      	bne.n	8017498 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8017460:	4b17      	ldr	r3, [pc, #92]	; (80174c0 <plug_holes+0x140>)
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	687a      	ldr	r2, [r7, #4]
 8017466:	429a      	cmp	r2, r3
 8017468:	d102      	bne.n	8017470 <plug_holes+0xf0>
      lfree = pmem;
 801746a:	4a15      	ldr	r2, [pc, #84]	; (80174c0 <plug_holes+0x140>)
 801746c:	68bb      	ldr	r3, [r7, #8]
 801746e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	881a      	ldrh	r2, [r3, #0]
 8017474:	68bb      	ldr	r3, [r7, #8]
 8017476:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	881b      	ldrh	r3, [r3, #0]
 801747c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017480:	d00a      	beq.n	8017498 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	881b      	ldrh	r3, [r3, #0]
 8017486:	4618      	mov	r0, r3
 8017488:	f7ff ff56 	bl	8017338 <ptr_to_mem>
 801748c:	4604      	mov	r4, r0
 801748e:	68b8      	ldr	r0, [r7, #8]
 8017490:	f7ff ff64 	bl	801735c <mem_to_ptr>
 8017494:	4603      	mov	r3, r0
 8017496:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8017498:	bf00      	nop
 801749a:	3714      	adds	r7, #20
 801749c:	46bd      	mov	sp, r7
 801749e:	bd90      	pop	{r4, r7, pc}
 80174a0:	20008ec4 	.word	0x20008ec4
 80174a4:	08025fc8 	.word	0x08025fc8
 80174a8:	08025ff8 	.word	0x08025ff8
 80174ac:	08026010 	.word	0x08026010
 80174b0:	20008ec8 	.word	0x20008ec8
 80174b4:	08026038 	.word	0x08026038
 80174b8:	08026054 	.word	0x08026054
 80174bc:	08026070 	.word	0x08026070
 80174c0:	20008ed0 	.word	0x20008ed0

080174c4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b082      	sub	sp, #8
 80174c8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80174ca:	4b1f      	ldr	r3, [pc, #124]	; (8017548 <mem_init+0x84>)
 80174cc:	3303      	adds	r3, #3
 80174ce:	f023 0303 	bic.w	r3, r3, #3
 80174d2:	461a      	mov	r2, r3
 80174d4:	4b1d      	ldr	r3, [pc, #116]	; (801754c <mem_init+0x88>)
 80174d6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80174d8:	4b1c      	ldr	r3, [pc, #112]	; (801754c <mem_init+0x88>)
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80174e4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	2200      	movs	r2, #0
 80174ea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	2200      	movs	r2, #0
 80174f0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80174f2:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80174f6:	f7ff ff1f 	bl	8017338 <ptr_to_mem>
 80174fa:	4603      	mov	r3, r0
 80174fc:	4a14      	ldr	r2, [pc, #80]	; (8017550 <mem_init+0x8c>)
 80174fe:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8017500:	4b13      	ldr	r3, [pc, #76]	; (8017550 <mem_init+0x8c>)
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	2201      	movs	r2, #1
 8017506:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8017508:	4b11      	ldr	r3, [pc, #68]	; (8017550 <mem_init+0x8c>)
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017510:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8017512:	4b0f      	ldr	r3, [pc, #60]	; (8017550 <mem_init+0x8c>)
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 801751a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801751c:	4b0b      	ldr	r3, [pc, #44]	; (801754c <mem_init+0x88>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	4a0c      	ldr	r2, [pc, #48]	; (8017554 <mem_init+0x90>)
 8017522:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8017524:	480c      	ldr	r0, [pc, #48]	; (8017558 <mem_init+0x94>)
 8017526:	f00b f9f9 	bl	802291c <sys_mutex_new>
 801752a:	4603      	mov	r3, r0
 801752c:	2b00      	cmp	r3, #0
 801752e:	d006      	beq.n	801753e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8017530:	4b0a      	ldr	r3, [pc, #40]	; (801755c <mem_init+0x98>)
 8017532:	f240 221f 	movw	r2, #543	; 0x21f
 8017536:	490a      	ldr	r1, [pc, #40]	; (8017560 <mem_init+0x9c>)
 8017538:	480a      	ldr	r0, [pc, #40]	; (8017564 <mem_init+0xa0>)
 801753a:	f00c fce1 	bl	8023f00 <iprintf>
  }
}
 801753e:	bf00      	nop
 8017540:	3708      	adds	r7, #8
 8017542:	46bd      	mov	sp, r7
 8017544:	bd80      	pop	{r7, pc}
 8017546:	bf00      	nop
 8017548:	200066b0 	.word	0x200066b0
 801754c:	20008ec4 	.word	0x20008ec4
 8017550:	20008ec8 	.word	0x20008ec8
 8017554:	20008ed0 	.word	0x20008ed0
 8017558:	20008ecc 	.word	0x20008ecc
 801755c:	08025fc8 	.word	0x08025fc8
 8017560:	0802609c 	.word	0x0802609c
 8017564:	08026010 	.word	0x08026010

08017568 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b086      	sub	sp, #24
 801756c:	af00      	add	r7, sp, #0
 801756e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8017570:	6878      	ldr	r0, [r7, #4]
 8017572:	f7ff fef3 	bl	801735c <mem_to_ptr>
 8017576:	4603      	mov	r3, r0
 8017578:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	881b      	ldrh	r3, [r3, #0]
 801757e:	4618      	mov	r0, r3
 8017580:	f7ff feda 	bl	8017338 <ptr_to_mem>
 8017584:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	885b      	ldrh	r3, [r3, #2]
 801758a:	4618      	mov	r0, r3
 801758c:	f7ff fed4 	bl	8017338 <ptr_to_mem>
 8017590:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	881b      	ldrh	r3, [r3, #0]
 8017596:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801759a:	d818      	bhi.n	80175ce <mem_link_valid+0x66>
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	885b      	ldrh	r3, [r3, #2]
 80175a0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80175a4:	d813      	bhi.n	80175ce <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80175aa:	8afa      	ldrh	r2, [r7, #22]
 80175ac:	429a      	cmp	r2, r3
 80175ae:	d004      	beq.n	80175ba <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	881b      	ldrh	r3, [r3, #0]
 80175b4:	8afa      	ldrh	r2, [r7, #22]
 80175b6:	429a      	cmp	r2, r3
 80175b8:	d109      	bne.n	80175ce <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80175ba:	4b08      	ldr	r3, [pc, #32]	; (80175dc <mem_link_valid+0x74>)
 80175bc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80175be:	693a      	ldr	r2, [r7, #16]
 80175c0:	429a      	cmp	r2, r3
 80175c2:	d006      	beq.n	80175d2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80175c4:	693b      	ldr	r3, [r7, #16]
 80175c6:	885b      	ldrh	r3, [r3, #2]
 80175c8:	8afa      	ldrh	r2, [r7, #22]
 80175ca:	429a      	cmp	r2, r3
 80175cc:	d001      	beq.n	80175d2 <mem_link_valid+0x6a>
    return 0;
 80175ce:	2300      	movs	r3, #0
 80175d0:	e000      	b.n	80175d4 <mem_link_valid+0x6c>
  }
  return 1;
 80175d2:	2301      	movs	r3, #1
}
 80175d4:	4618      	mov	r0, r3
 80175d6:	3718      	adds	r7, #24
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd80      	pop	{r7, pc}
 80175dc:	20008ec8 	.word	0x20008ec8

080175e0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b088      	sub	sp, #32
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d070      	beq.n	80176d0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	f003 0303 	and.w	r3, r3, #3
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d00d      	beq.n	8017614 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80175f8:	4b37      	ldr	r3, [pc, #220]	; (80176d8 <mem_free+0xf8>)
 80175fa:	f240 2273 	movw	r2, #627	; 0x273
 80175fe:	4937      	ldr	r1, [pc, #220]	; (80176dc <mem_free+0xfc>)
 8017600:	4837      	ldr	r0, [pc, #220]	; (80176e0 <mem_free+0x100>)
 8017602:	f00c fc7d 	bl	8023f00 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017606:	f00b f9e7 	bl	80229d8 <sys_arch_protect>
 801760a:	60f8      	str	r0, [r7, #12]
 801760c:	68f8      	ldr	r0, [r7, #12]
 801760e:	f00b f9f1 	bl	80229f4 <sys_arch_unprotect>
    return;
 8017612:	e05e      	b.n	80176d2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	3b08      	subs	r3, #8
 8017618:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801761a:	4b32      	ldr	r3, [pc, #200]	; (80176e4 <mem_free+0x104>)
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	69fa      	ldr	r2, [r7, #28]
 8017620:	429a      	cmp	r2, r3
 8017622:	d306      	bcc.n	8017632 <mem_free+0x52>
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	f103 020c 	add.w	r2, r3, #12
 801762a:	4b2f      	ldr	r3, [pc, #188]	; (80176e8 <mem_free+0x108>)
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	429a      	cmp	r2, r3
 8017630:	d90d      	bls.n	801764e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8017632:	4b29      	ldr	r3, [pc, #164]	; (80176d8 <mem_free+0xf8>)
 8017634:	f240 227f 	movw	r2, #639	; 0x27f
 8017638:	492c      	ldr	r1, [pc, #176]	; (80176ec <mem_free+0x10c>)
 801763a:	4829      	ldr	r0, [pc, #164]	; (80176e0 <mem_free+0x100>)
 801763c:	f00c fc60 	bl	8023f00 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017640:	f00b f9ca 	bl	80229d8 <sys_arch_protect>
 8017644:	6138      	str	r0, [r7, #16]
 8017646:	6938      	ldr	r0, [r7, #16]
 8017648:	f00b f9d4 	bl	80229f4 <sys_arch_unprotect>
    return;
 801764c:	e041      	b.n	80176d2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801764e:	4828      	ldr	r0, [pc, #160]	; (80176f0 <mem_free+0x110>)
 8017650:	f00b f980 	bl	8022954 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8017654:	69fb      	ldr	r3, [r7, #28]
 8017656:	791b      	ldrb	r3, [r3, #4]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d110      	bne.n	801767e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801765c:	4b1e      	ldr	r3, [pc, #120]	; (80176d8 <mem_free+0xf8>)
 801765e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8017662:	4924      	ldr	r1, [pc, #144]	; (80176f4 <mem_free+0x114>)
 8017664:	481e      	ldr	r0, [pc, #120]	; (80176e0 <mem_free+0x100>)
 8017666:	f00c fc4b 	bl	8023f00 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801766a:	4821      	ldr	r0, [pc, #132]	; (80176f0 <mem_free+0x110>)
 801766c:	f00b f981 	bl	8022972 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017670:	f00b f9b2 	bl	80229d8 <sys_arch_protect>
 8017674:	6178      	str	r0, [r7, #20]
 8017676:	6978      	ldr	r0, [r7, #20]
 8017678:	f00b f9bc 	bl	80229f4 <sys_arch_unprotect>
    return;
 801767c:	e029      	b.n	80176d2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801767e:	69f8      	ldr	r0, [r7, #28]
 8017680:	f7ff ff72 	bl	8017568 <mem_link_valid>
 8017684:	4603      	mov	r3, r0
 8017686:	2b00      	cmp	r3, #0
 8017688:	d110      	bne.n	80176ac <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801768a:	4b13      	ldr	r3, [pc, #76]	; (80176d8 <mem_free+0xf8>)
 801768c:	f240 2295 	movw	r2, #661	; 0x295
 8017690:	4919      	ldr	r1, [pc, #100]	; (80176f8 <mem_free+0x118>)
 8017692:	4813      	ldr	r0, [pc, #76]	; (80176e0 <mem_free+0x100>)
 8017694:	f00c fc34 	bl	8023f00 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8017698:	4815      	ldr	r0, [pc, #84]	; (80176f0 <mem_free+0x110>)
 801769a:	f00b f96a 	bl	8022972 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801769e:	f00b f99b 	bl	80229d8 <sys_arch_protect>
 80176a2:	61b8      	str	r0, [r7, #24]
 80176a4:	69b8      	ldr	r0, [r7, #24]
 80176a6:	f00b f9a5 	bl	80229f4 <sys_arch_unprotect>
    return;
 80176aa:	e012      	b.n	80176d2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80176ac:	69fb      	ldr	r3, [r7, #28]
 80176ae:	2200      	movs	r2, #0
 80176b0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80176b2:	4b12      	ldr	r3, [pc, #72]	; (80176fc <mem_free+0x11c>)
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	69fa      	ldr	r2, [r7, #28]
 80176b8:	429a      	cmp	r2, r3
 80176ba:	d202      	bcs.n	80176c2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80176bc:	4a0f      	ldr	r2, [pc, #60]	; (80176fc <mem_free+0x11c>)
 80176be:	69fb      	ldr	r3, [r7, #28]
 80176c0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80176c2:	69f8      	ldr	r0, [r7, #28]
 80176c4:	f7ff fe5c 	bl	8017380 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80176c8:	4809      	ldr	r0, [pc, #36]	; (80176f0 <mem_free+0x110>)
 80176ca:	f00b f952 	bl	8022972 <sys_mutex_unlock>
 80176ce:	e000      	b.n	80176d2 <mem_free+0xf2>
    return;
 80176d0:	bf00      	nop
}
 80176d2:	3720      	adds	r7, #32
 80176d4:	46bd      	mov	sp, r7
 80176d6:	bd80      	pop	{r7, pc}
 80176d8:	08025fc8 	.word	0x08025fc8
 80176dc:	080260b8 	.word	0x080260b8
 80176e0:	08026010 	.word	0x08026010
 80176e4:	20008ec4 	.word	0x20008ec4
 80176e8:	20008ec8 	.word	0x20008ec8
 80176ec:	080260dc 	.word	0x080260dc
 80176f0:	20008ecc 	.word	0x20008ecc
 80176f4:	080260f8 	.word	0x080260f8
 80176f8:	08026120 	.word	0x08026120
 80176fc:	20008ed0 	.word	0x20008ed0

08017700 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b088      	sub	sp, #32
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
 8017708:	460b      	mov	r3, r1
 801770a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801770c:	887b      	ldrh	r3, [r7, #2]
 801770e:	3303      	adds	r3, #3
 8017710:	b29b      	uxth	r3, r3
 8017712:	f023 0303 	bic.w	r3, r3, #3
 8017716:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8017718:	8bfb      	ldrh	r3, [r7, #30]
 801771a:	2b0b      	cmp	r3, #11
 801771c:	d801      	bhi.n	8017722 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801771e:	230c      	movs	r3, #12
 8017720:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8017722:	8bfb      	ldrh	r3, [r7, #30]
 8017724:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017728:	d803      	bhi.n	8017732 <mem_trim+0x32>
 801772a:	8bfa      	ldrh	r2, [r7, #30]
 801772c:	887b      	ldrh	r3, [r7, #2]
 801772e:	429a      	cmp	r2, r3
 8017730:	d201      	bcs.n	8017736 <mem_trim+0x36>
    return NULL;
 8017732:	2300      	movs	r3, #0
 8017734:	e0d8      	b.n	80178e8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017736:	4b6e      	ldr	r3, [pc, #440]	; (80178f0 <mem_trim+0x1f0>)
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	687a      	ldr	r2, [r7, #4]
 801773c:	429a      	cmp	r2, r3
 801773e:	d304      	bcc.n	801774a <mem_trim+0x4a>
 8017740:	4b6c      	ldr	r3, [pc, #432]	; (80178f4 <mem_trim+0x1f4>)
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	687a      	ldr	r2, [r7, #4]
 8017746:	429a      	cmp	r2, r3
 8017748:	d306      	bcc.n	8017758 <mem_trim+0x58>
 801774a:	4b6b      	ldr	r3, [pc, #428]	; (80178f8 <mem_trim+0x1f8>)
 801774c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8017750:	496a      	ldr	r1, [pc, #424]	; (80178fc <mem_trim+0x1fc>)
 8017752:	486b      	ldr	r0, [pc, #428]	; (8017900 <mem_trim+0x200>)
 8017754:	f00c fbd4 	bl	8023f00 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017758:	4b65      	ldr	r3, [pc, #404]	; (80178f0 <mem_trim+0x1f0>)
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	687a      	ldr	r2, [r7, #4]
 801775e:	429a      	cmp	r2, r3
 8017760:	d304      	bcc.n	801776c <mem_trim+0x6c>
 8017762:	4b64      	ldr	r3, [pc, #400]	; (80178f4 <mem_trim+0x1f4>)
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	687a      	ldr	r2, [r7, #4]
 8017768:	429a      	cmp	r2, r3
 801776a:	d307      	bcc.n	801777c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801776c:	f00b f934 	bl	80229d8 <sys_arch_protect>
 8017770:	60b8      	str	r0, [r7, #8]
 8017772:	68b8      	ldr	r0, [r7, #8]
 8017774:	f00b f93e 	bl	80229f4 <sys_arch_unprotect>
    return rmem;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	e0b5      	b.n	80178e8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	3b08      	subs	r3, #8
 8017780:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8017782:	69b8      	ldr	r0, [r7, #24]
 8017784:	f7ff fdea 	bl	801735c <mem_to_ptr>
 8017788:	4603      	mov	r3, r0
 801778a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801778c:	69bb      	ldr	r3, [r7, #24]
 801778e:	881a      	ldrh	r2, [r3, #0]
 8017790:	8afb      	ldrh	r3, [r7, #22]
 8017792:	1ad3      	subs	r3, r2, r3
 8017794:	b29b      	uxth	r3, r3
 8017796:	3b08      	subs	r3, #8
 8017798:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801779a:	8bfa      	ldrh	r2, [r7, #30]
 801779c:	8abb      	ldrh	r3, [r7, #20]
 801779e:	429a      	cmp	r2, r3
 80177a0:	d906      	bls.n	80177b0 <mem_trim+0xb0>
 80177a2:	4b55      	ldr	r3, [pc, #340]	; (80178f8 <mem_trim+0x1f8>)
 80177a4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80177a8:	4956      	ldr	r1, [pc, #344]	; (8017904 <mem_trim+0x204>)
 80177aa:	4855      	ldr	r0, [pc, #340]	; (8017900 <mem_trim+0x200>)
 80177ac:	f00c fba8 	bl	8023f00 <iprintf>
  if (newsize > size) {
 80177b0:	8bfa      	ldrh	r2, [r7, #30]
 80177b2:	8abb      	ldrh	r3, [r7, #20]
 80177b4:	429a      	cmp	r2, r3
 80177b6:	d901      	bls.n	80177bc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80177b8:	2300      	movs	r3, #0
 80177ba:	e095      	b.n	80178e8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80177bc:	8bfa      	ldrh	r2, [r7, #30]
 80177be:	8abb      	ldrh	r3, [r7, #20]
 80177c0:	429a      	cmp	r2, r3
 80177c2:	d101      	bne.n	80177c8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	e08f      	b.n	80178e8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80177c8:	484f      	ldr	r0, [pc, #316]	; (8017908 <mem_trim+0x208>)
 80177ca:	f00b f8c3 	bl	8022954 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80177ce:	69bb      	ldr	r3, [r7, #24]
 80177d0:	881b      	ldrh	r3, [r3, #0]
 80177d2:	4618      	mov	r0, r3
 80177d4:	f7ff fdb0 	bl	8017338 <ptr_to_mem>
 80177d8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80177da:	693b      	ldr	r3, [r7, #16]
 80177dc:	791b      	ldrb	r3, [r3, #4]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d13f      	bne.n	8017862 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80177e2:	69bb      	ldr	r3, [r7, #24]
 80177e4:	881b      	ldrh	r3, [r3, #0]
 80177e6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80177ea:	d106      	bne.n	80177fa <mem_trim+0xfa>
 80177ec:	4b42      	ldr	r3, [pc, #264]	; (80178f8 <mem_trim+0x1f8>)
 80177ee:	f240 22f5 	movw	r2, #757	; 0x2f5
 80177f2:	4946      	ldr	r1, [pc, #280]	; (801790c <mem_trim+0x20c>)
 80177f4:	4842      	ldr	r0, [pc, #264]	; (8017900 <mem_trim+0x200>)
 80177f6:	f00c fb83 	bl	8023f00 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80177fa:	693b      	ldr	r3, [r7, #16]
 80177fc:	881b      	ldrh	r3, [r3, #0]
 80177fe:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017800:	8afa      	ldrh	r2, [r7, #22]
 8017802:	8bfb      	ldrh	r3, [r7, #30]
 8017804:	4413      	add	r3, r2
 8017806:	b29b      	uxth	r3, r3
 8017808:	3308      	adds	r3, #8
 801780a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801780c:	4b40      	ldr	r3, [pc, #256]	; (8017910 <mem_trim+0x210>)
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	693a      	ldr	r2, [r7, #16]
 8017812:	429a      	cmp	r2, r3
 8017814:	d106      	bne.n	8017824 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8017816:	89fb      	ldrh	r3, [r7, #14]
 8017818:	4618      	mov	r0, r3
 801781a:	f7ff fd8d 	bl	8017338 <ptr_to_mem>
 801781e:	4603      	mov	r3, r0
 8017820:	4a3b      	ldr	r2, [pc, #236]	; (8017910 <mem_trim+0x210>)
 8017822:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8017824:	89fb      	ldrh	r3, [r7, #14]
 8017826:	4618      	mov	r0, r3
 8017828:	f7ff fd86 	bl	8017338 <ptr_to_mem>
 801782c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801782e:	693b      	ldr	r3, [r7, #16]
 8017830:	2200      	movs	r2, #0
 8017832:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8017834:	693b      	ldr	r3, [r7, #16]
 8017836:	89ba      	ldrh	r2, [r7, #12]
 8017838:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801783a:	693b      	ldr	r3, [r7, #16]
 801783c:	8afa      	ldrh	r2, [r7, #22]
 801783e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8017840:	69bb      	ldr	r3, [r7, #24]
 8017842:	89fa      	ldrh	r2, [r7, #14]
 8017844:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017846:	693b      	ldr	r3, [r7, #16]
 8017848:	881b      	ldrh	r3, [r3, #0]
 801784a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801784e:	d047      	beq.n	80178e0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017850:	693b      	ldr	r3, [r7, #16]
 8017852:	881b      	ldrh	r3, [r3, #0]
 8017854:	4618      	mov	r0, r3
 8017856:	f7ff fd6f 	bl	8017338 <ptr_to_mem>
 801785a:	4602      	mov	r2, r0
 801785c:	89fb      	ldrh	r3, [r7, #14]
 801785e:	8053      	strh	r3, [r2, #2]
 8017860:	e03e      	b.n	80178e0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8017862:	8bfb      	ldrh	r3, [r7, #30]
 8017864:	f103 0214 	add.w	r2, r3, #20
 8017868:	8abb      	ldrh	r3, [r7, #20]
 801786a:	429a      	cmp	r2, r3
 801786c:	d838      	bhi.n	80178e0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801786e:	8afa      	ldrh	r2, [r7, #22]
 8017870:	8bfb      	ldrh	r3, [r7, #30]
 8017872:	4413      	add	r3, r2
 8017874:	b29b      	uxth	r3, r3
 8017876:	3308      	adds	r3, #8
 8017878:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801787a:	69bb      	ldr	r3, [r7, #24]
 801787c:	881b      	ldrh	r3, [r3, #0]
 801787e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017882:	d106      	bne.n	8017892 <mem_trim+0x192>
 8017884:	4b1c      	ldr	r3, [pc, #112]	; (80178f8 <mem_trim+0x1f8>)
 8017886:	f240 3216 	movw	r2, #790	; 0x316
 801788a:	4920      	ldr	r1, [pc, #128]	; (801790c <mem_trim+0x20c>)
 801788c:	481c      	ldr	r0, [pc, #112]	; (8017900 <mem_trim+0x200>)
 801788e:	f00c fb37 	bl	8023f00 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8017892:	89fb      	ldrh	r3, [r7, #14]
 8017894:	4618      	mov	r0, r3
 8017896:	f7ff fd4f 	bl	8017338 <ptr_to_mem>
 801789a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801789c:	4b1c      	ldr	r3, [pc, #112]	; (8017910 <mem_trim+0x210>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	693a      	ldr	r2, [r7, #16]
 80178a2:	429a      	cmp	r2, r3
 80178a4:	d202      	bcs.n	80178ac <mem_trim+0x1ac>
      lfree = mem2;
 80178a6:	4a1a      	ldr	r2, [pc, #104]	; (8017910 <mem_trim+0x210>)
 80178a8:	693b      	ldr	r3, [r7, #16]
 80178aa:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80178ac:	693b      	ldr	r3, [r7, #16]
 80178ae:	2200      	movs	r2, #0
 80178b0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80178b2:	69bb      	ldr	r3, [r7, #24]
 80178b4:	881a      	ldrh	r2, [r3, #0]
 80178b6:	693b      	ldr	r3, [r7, #16]
 80178b8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80178ba:	693b      	ldr	r3, [r7, #16]
 80178bc:	8afa      	ldrh	r2, [r7, #22]
 80178be:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80178c0:	69bb      	ldr	r3, [r7, #24]
 80178c2:	89fa      	ldrh	r2, [r7, #14]
 80178c4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80178c6:	693b      	ldr	r3, [r7, #16]
 80178c8:	881b      	ldrh	r3, [r3, #0]
 80178ca:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80178ce:	d007      	beq.n	80178e0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80178d0:	693b      	ldr	r3, [r7, #16]
 80178d2:	881b      	ldrh	r3, [r3, #0]
 80178d4:	4618      	mov	r0, r3
 80178d6:	f7ff fd2f 	bl	8017338 <ptr_to_mem>
 80178da:	4602      	mov	r2, r0
 80178dc:	89fb      	ldrh	r3, [r7, #14]
 80178de:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80178e0:	4809      	ldr	r0, [pc, #36]	; (8017908 <mem_trim+0x208>)
 80178e2:	f00b f846 	bl	8022972 <sys_mutex_unlock>
  return rmem;
 80178e6:	687b      	ldr	r3, [r7, #4]
}
 80178e8:	4618      	mov	r0, r3
 80178ea:	3720      	adds	r7, #32
 80178ec:	46bd      	mov	sp, r7
 80178ee:	bd80      	pop	{r7, pc}
 80178f0:	20008ec4 	.word	0x20008ec4
 80178f4:	20008ec8 	.word	0x20008ec8
 80178f8:	08025fc8 	.word	0x08025fc8
 80178fc:	08026154 	.word	0x08026154
 8017900:	08026010 	.word	0x08026010
 8017904:	0802616c 	.word	0x0802616c
 8017908:	20008ecc 	.word	0x20008ecc
 801790c:	0802618c 	.word	0x0802618c
 8017910:	20008ed0 	.word	0x20008ed0

08017914 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b088      	sub	sp, #32
 8017918:	af00      	add	r7, sp, #0
 801791a:	4603      	mov	r3, r0
 801791c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801791e:	88fb      	ldrh	r3, [r7, #6]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d101      	bne.n	8017928 <mem_malloc+0x14>
    return NULL;
 8017924:	2300      	movs	r3, #0
 8017926:	e0e2      	b.n	8017aee <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8017928:	88fb      	ldrh	r3, [r7, #6]
 801792a:	3303      	adds	r3, #3
 801792c:	b29b      	uxth	r3, r3
 801792e:	f023 0303 	bic.w	r3, r3, #3
 8017932:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8017934:	8bbb      	ldrh	r3, [r7, #28]
 8017936:	2b0b      	cmp	r3, #11
 8017938:	d801      	bhi.n	801793e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801793a:	230c      	movs	r3, #12
 801793c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801793e:	8bbb      	ldrh	r3, [r7, #28]
 8017940:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017944:	d803      	bhi.n	801794e <mem_malloc+0x3a>
 8017946:	8bba      	ldrh	r2, [r7, #28]
 8017948:	88fb      	ldrh	r3, [r7, #6]
 801794a:	429a      	cmp	r2, r3
 801794c:	d201      	bcs.n	8017952 <mem_malloc+0x3e>
    return NULL;
 801794e:	2300      	movs	r3, #0
 8017950:	e0cd      	b.n	8017aee <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8017952:	4869      	ldr	r0, [pc, #420]	; (8017af8 <mem_malloc+0x1e4>)
 8017954:	f00a fffe 	bl	8022954 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017958:	4b68      	ldr	r3, [pc, #416]	; (8017afc <mem_malloc+0x1e8>)
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	4618      	mov	r0, r3
 801795e:	f7ff fcfd 	bl	801735c <mem_to_ptr>
 8017962:	4603      	mov	r3, r0
 8017964:	83fb      	strh	r3, [r7, #30]
 8017966:	e0b7      	b.n	8017ad8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8017968:	8bfb      	ldrh	r3, [r7, #30]
 801796a:	4618      	mov	r0, r3
 801796c:	f7ff fce4 	bl	8017338 <ptr_to_mem>
 8017970:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8017972:	697b      	ldr	r3, [r7, #20]
 8017974:	791b      	ldrb	r3, [r3, #4]
 8017976:	2b00      	cmp	r3, #0
 8017978:	f040 80a7 	bne.w	8017aca <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801797c:	697b      	ldr	r3, [r7, #20]
 801797e:	881b      	ldrh	r3, [r3, #0]
 8017980:	461a      	mov	r2, r3
 8017982:	8bfb      	ldrh	r3, [r7, #30]
 8017984:	1ad3      	subs	r3, r2, r3
 8017986:	f1a3 0208 	sub.w	r2, r3, #8
 801798a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801798c:	429a      	cmp	r2, r3
 801798e:	f0c0 809c 	bcc.w	8017aca <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017992:	697b      	ldr	r3, [r7, #20]
 8017994:	881b      	ldrh	r3, [r3, #0]
 8017996:	461a      	mov	r2, r3
 8017998:	8bfb      	ldrh	r3, [r7, #30]
 801799a:	1ad3      	subs	r3, r2, r3
 801799c:	f1a3 0208 	sub.w	r2, r3, #8
 80179a0:	8bbb      	ldrh	r3, [r7, #28]
 80179a2:	3314      	adds	r3, #20
 80179a4:	429a      	cmp	r2, r3
 80179a6:	d333      	bcc.n	8017a10 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80179a8:	8bfa      	ldrh	r2, [r7, #30]
 80179aa:	8bbb      	ldrh	r3, [r7, #28]
 80179ac:	4413      	add	r3, r2
 80179ae:	b29b      	uxth	r3, r3
 80179b0:	3308      	adds	r3, #8
 80179b2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80179b4:	8a7b      	ldrh	r3, [r7, #18]
 80179b6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80179ba:	d106      	bne.n	80179ca <mem_malloc+0xb6>
 80179bc:	4b50      	ldr	r3, [pc, #320]	; (8017b00 <mem_malloc+0x1ec>)
 80179be:	f240 3287 	movw	r2, #903	; 0x387
 80179c2:	4950      	ldr	r1, [pc, #320]	; (8017b04 <mem_malloc+0x1f0>)
 80179c4:	4850      	ldr	r0, [pc, #320]	; (8017b08 <mem_malloc+0x1f4>)
 80179c6:	f00c fa9b 	bl	8023f00 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80179ca:	8a7b      	ldrh	r3, [r7, #18]
 80179cc:	4618      	mov	r0, r3
 80179ce:	f7ff fcb3 	bl	8017338 <ptr_to_mem>
 80179d2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	2200      	movs	r2, #0
 80179d8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80179da:	697b      	ldr	r3, [r7, #20]
 80179dc:	881a      	ldrh	r2, [r3, #0]
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	8bfa      	ldrh	r2, [r7, #30]
 80179e6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80179e8:	697b      	ldr	r3, [r7, #20]
 80179ea:	8a7a      	ldrh	r2, [r7, #18]
 80179ec:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80179ee:	697b      	ldr	r3, [r7, #20]
 80179f0:	2201      	movs	r2, #1
 80179f2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	881b      	ldrh	r3, [r3, #0]
 80179f8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80179fc:	d00b      	beq.n	8017a16 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	881b      	ldrh	r3, [r3, #0]
 8017a02:	4618      	mov	r0, r3
 8017a04:	f7ff fc98 	bl	8017338 <ptr_to_mem>
 8017a08:	4602      	mov	r2, r0
 8017a0a:	8a7b      	ldrh	r3, [r7, #18]
 8017a0c:	8053      	strh	r3, [r2, #2]
 8017a0e:	e002      	b.n	8017a16 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8017a10:	697b      	ldr	r3, [r7, #20]
 8017a12:	2201      	movs	r2, #1
 8017a14:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8017a16:	4b39      	ldr	r3, [pc, #228]	; (8017afc <mem_malloc+0x1e8>)
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	697a      	ldr	r2, [r7, #20]
 8017a1c:	429a      	cmp	r2, r3
 8017a1e:	d127      	bne.n	8017a70 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8017a20:	4b36      	ldr	r3, [pc, #216]	; (8017afc <mem_malloc+0x1e8>)
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8017a26:	e005      	b.n	8017a34 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8017a28:	69bb      	ldr	r3, [r7, #24]
 8017a2a:	881b      	ldrh	r3, [r3, #0]
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	f7ff fc83 	bl	8017338 <ptr_to_mem>
 8017a32:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8017a34:	69bb      	ldr	r3, [r7, #24]
 8017a36:	791b      	ldrb	r3, [r3, #4]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d004      	beq.n	8017a46 <mem_malloc+0x132>
 8017a3c:	4b33      	ldr	r3, [pc, #204]	; (8017b0c <mem_malloc+0x1f8>)
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	69ba      	ldr	r2, [r7, #24]
 8017a42:	429a      	cmp	r2, r3
 8017a44:	d1f0      	bne.n	8017a28 <mem_malloc+0x114>
          }
          lfree = cur;
 8017a46:	4a2d      	ldr	r2, [pc, #180]	; (8017afc <mem_malloc+0x1e8>)
 8017a48:	69bb      	ldr	r3, [r7, #24]
 8017a4a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8017a4c:	4b2b      	ldr	r3, [pc, #172]	; (8017afc <mem_malloc+0x1e8>)
 8017a4e:	681a      	ldr	r2, [r3, #0]
 8017a50:	4b2e      	ldr	r3, [pc, #184]	; (8017b0c <mem_malloc+0x1f8>)
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	429a      	cmp	r2, r3
 8017a56:	d00b      	beq.n	8017a70 <mem_malloc+0x15c>
 8017a58:	4b28      	ldr	r3, [pc, #160]	; (8017afc <mem_malloc+0x1e8>)
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	791b      	ldrb	r3, [r3, #4]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d006      	beq.n	8017a70 <mem_malloc+0x15c>
 8017a62:	4b27      	ldr	r3, [pc, #156]	; (8017b00 <mem_malloc+0x1ec>)
 8017a64:	f240 32b5 	movw	r2, #949	; 0x3b5
 8017a68:	4929      	ldr	r1, [pc, #164]	; (8017b10 <mem_malloc+0x1fc>)
 8017a6a:	4827      	ldr	r0, [pc, #156]	; (8017b08 <mem_malloc+0x1f4>)
 8017a6c:	f00c fa48 	bl	8023f00 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8017a70:	4821      	ldr	r0, [pc, #132]	; (8017af8 <mem_malloc+0x1e4>)
 8017a72:	f00a ff7e 	bl	8022972 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017a76:	8bba      	ldrh	r2, [r7, #28]
 8017a78:	697b      	ldr	r3, [r7, #20]
 8017a7a:	4413      	add	r3, r2
 8017a7c:	3308      	adds	r3, #8
 8017a7e:	4a23      	ldr	r2, [pc, #140]	; (8017b0c <mem_malloc+0x1f8>)
 8017a80:	6812      	ldr	r2, [r2, #0]
 8017a82:	4293      	cmp	r3, r2
 8017a84:	d906      	bls.n	8017a94 <mem_malloc+0x180>
 8017a86:	4b1e      	ldr	r3, [pc, #120]	; (8017b00 <mem_malloc+0x1ec>)
 8017a88:	f240 32b9 	movw	r2, #953	; 0x3b9
 8017a8c:	4921      	ldr	r1, [pc, #132]	; (8017b14 <mem_malloc+0x200>)
 8017a8e:	481e      	ldr	r0, [pc, #120]	; (8017b08 <mem_malloc+0x1f4>)
 8017a90:	f00c fa36 	bl	8023f00 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017a94:	697b      	ldr	r3, [r7, #20]
 8017a96:	f003 0303 	and.w	r3, r3, #3
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d006      	beq.n	8017aac <mem_malloc+0x198>
 8017a9e:	4b18      	ldr	r3, [pc, #96]	; (8017b00 <mem_malloc+0x1ec>)
 8017aa0:	f240 32bb 	movw	r2, #955	; 0x3bb
 8017aa4:	491c      	ldr	r1, [pc, #112]	; (8017b18 <mem_malloc+0x204>)
 8017aa6:	4818      	ldr	r0, [pc, #96]	; (8017b08 <mem_malloc+0x1f4>)
 8017aa8:	f00c fa2a 	bl	8023f00 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017aac:	697b      	ldr	r3, [r7, #20]
 8017aae:	f003 0303 	and.w	r3, r3, #3
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d006      	beq.n	8017ac4 <mem_malloc+0x1b0>
 8017ab6:	4b12      	ldr	r3, [pc, #72]	; (8017b00 <mem_malloc+0x1ec>)
 8017ab8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8017abc:	4917      	ldr	r1, [pc, #92]	; (8017b1c <mem_malloc+0x208>)
 8017abe:	4812      	ldr	r0, [pc, #72]	; (8017b08 <mem_malloc+0x1f4>)
 8017ac0:	f00c fa1e 	bl	8023f00 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8017ac4:	697b      	ldr	r3, [r7, #20]
 8017ac6:	3308      	adds	r3, #8
 8017ac8:	e011      	b.n	8017aee <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8017aca:	8bfb      	ldrh	r3, [r7, #30]
 8017acc:	4618      	mov	r0, r3
 8017ace:	f7ff fc33 	bl	8017338 <ptr_to_mem>
 8017ad2:	4603      	mov	r3, r0
 8017ad4:	881b      	ldrh	r3, [r3, #0]
 8017ad6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017ad8:	8bfa      	ldrh	r2, [r7, #30]
 8017ada:	8bbb      	ldrh	r3, [r7, #28]
 8017adc:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8017ae0:	429a      	cmp	r2, r3
 8017ae2:	f4ff af41 	bcc.w	8017968 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8017ae6:	4804      	ldr	r0, [pc, #16]	; (8017af8 <mem_malloc+0x1e4>)
 8017ae8:	f00a ff43 	bl	8022972 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8017aec:	2300      	movs	r3, #0
}
 8017aee:	4618      	mov	r0, r3
 8017af0:	3720      	adds	r7, #32
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}
 8017af6:	bf00      	nop
 8017af8:	20008ecc 	.word	0x20008ecc
 8017afc:	20008ed0 	.word	0x20008ed0
 8017b00:	08025fc8 	.word	0x08025fc8
 8017b04:	0802618c 	.word	0x0802618c
 8017b08:	08026010 	.word	0x08026010
 8017b0c:	20008ec8 	.word	0x20008ec8
 8017b10:	080261a0 	.word	0x080261a0
 8017b14:	080261bc 	.word	0x080261bc
 8017b18:	080261ec 	.word	0x080261ec
 8017b1c:	0802621c 	.word	0x0802621c

08017b20 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8017b20:	b480      	push	{r7}
 8017b22:	b085      	sub	sp, #20
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	689b      	ldr	r3, [r3, #8]
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	685b      	ldr	r3, [r3, #4]
 8017b34:	3303      	adds	r3, #3
 8017b36:	f023 0303 	bic.w	r3, r3, #3
 8017b3a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	60fb      	str	r3, [r7, #12]
 8017b40:	e011      	b.n	8017b66 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	689b      	ldr	r3, [r3, #8]
 8017b46:	681a      	ldr	r2, [r3, #0]
 8017b48:	68bb      	ldr	r3, [r7, #8]
 8017b4a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	689b      	ldr	r3, [r3, #8]
 8017b50:	68ba      	ldr	r2, [r7, #8]
 8017b52:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	881b      	ldrh	r3, [r3, #0]
 8017b58:	461a      	mov	r2, r3
 8017b5a:	68bb      	ldr	r3, [r7, #8]
 8017b5c:	4413      	add	r3, r2
 8017b5e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	3301      	adds	r3, #1
 8017b64:	60fb      	str	r3, [r7, #12]
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	885b      	ldrh	r3, [r3, #2]
 8017b6a:	461a      	mov	r2, r3
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	4293      	cmp	r3, r2
 8017b70:	dbe7      	blt.n	8017b42 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8017b72:	bf00      	nop
 8017b74:	bf00      	nop
 8017b76:	3714      	adds	r7, #20
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b7e:	4770      	bx	lr

08017b80 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b082      	sub	sp, #8
 8017b84:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017b86:	2300      	movs	r3, #0
 8017b88:	80fb      	strh	r3, [r7, #6]
 8017b8a:	e009      	b.n	8017ba0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8017b8c:	88fb      	ldrh	r3, [r7, #6]
 8017b8e:	4a08      	ldr	r2, [pc, #32]	; (8017bb0 <memp_init+0x30>)
 8017b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b94:	4618      	mov	r0, r3
 8017b96:	f7ff ffc3 	bl	8017b20 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017b9a:	88fb      	ldrh	r3, [r7, #6]
 8017b9c:	3301      	adds	r3, #1
 8017b9e:	80fb      	strh	r3, [r7, #6]
 8017ba0:	88fb      	ldrh	r3, [r7, #6]
 8017ba2:	2b0c      	cmp	r3, #12
 8017ba4:	d9f2      	bls.n	8017b8c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8017ba6:	bf00      	nop
 8017ba8:	bf00      	nop
 8017baa:	3708      	adds	r7, #8
 8017bac:	46bd      	mov	sp, r7
 8017bae:	bd80      	pop	{r7, pc}
 8017bb0:	08028a84 	.word	0x08028a84

08017bb4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b084      	sub	sp, #16
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8017bbc:	f00a ff0c 	bl	80229d8 <sys_arch_protect>
 8017bc0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	689b      	ldr	r3, [r3, #8]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8017bca:	68bb      	ldr	r3, [r7, #8]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d015      	beq.n	8017bfc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	689b      	ldr	r3, [r3, #8]
 8017bd4:	68ba      	ldr	r2, [r7, #8]
 8017bd6:	6812      	ldr	r2, [r2, #0]
 8017bd8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8017bda:	68bb      	ldr	r3, [r7, #8]
 8017bdc:	f003 0303 	and.w	r3, r3, #3
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d006      	beq.n	8017bf2 <do_memp_malloc_pool+0x3e>
 8017be4:	4b09      	ldr	r3, [pc, #36]	; (8017c0c <do_memp_malloc_pool+0x58>)
 8017be6:	f44f 728c 	mov.w	r2, #280	; 0x118
 8017bea:	4909      	ldr	r1, [pc, #36]	; (8017c10 <do_memp_malloc_pool+0x5c>)
 8017bec:	4809      	ldr	r0, [pc, #36]	; (8017c14 <do_memp_malloc_pool+0x60>)
 8017bee:	f00c f987 	bl	8023f00 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017bf2:	68f8      	ldr	r0, [r7, #12]
 8017bf4:	f00a fefe 	bl	80229f4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8017bf8:	68bb      	ldr	r3, [r7, #8]
 8017bfa:	e003      	b.n	8017c04 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017bfc:	68f8      	ldr	r0, [r7, #12]
 8017bfe:	f00a fef9 	bl	80229f4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8017c02:	2300      	movs	r3, #0
}
 8017c04:	4618      	mov	r0, r3
 8017c06:	3710      	adds	r7, #16
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	bd80      	pop	{r7, pc}
 8017c0c:	08026240 	.word	0x08026240
 8017c10:	08026270 	.word	0x08026270
 8017c14:	08026294 	.word	0x08026294

08017c18 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b082      	sub	sp, #8
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d106      	bne.n	8017c34 <memp_malloc_pool+0x1c>
 8017c26:	4b0a      	ldr	r3, [pc, #40]	; (8017c50 <memp_malloc_pool+0x38>)
 8017c28:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8017c2c:	4909      	ldr	r1, [pc, #36]	; (8017c54 <memp_malloc_pool+0x3c>)
 8017c2e:	480a      	ldr	r0, [pc, #40]	; (8017c58 <memp_malloc_pool+0x40>)
 8017c30:	f00c f966 	bl	8023f00 <iprintf>
  if (desc == NULL) {
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d101      	bne.n	8017c3e <memp_malloc_pool+0x26>
    return NULL;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	e003      	b.n	8017c46 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8017c3e:	6878      	ldr	r0, [r7, #4]
 8017c40:	f7ff ffb8 	bl	8017bb4 <do_memp_malloc_pool>
 8017c44:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8017c46:	4618      	mov	r0, r3
 8017c48:	3708      	adds	r7, #8
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	bd80      	pop	{r7, pc}
 8017c4e:	bf00      	nop
 8017c50:	08026240 	.word	0x08026240
 8017c54:	080262bc 	.word	0x080262bc
 8017c58:	08026294 	.word	0x08026294

08017c5c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b084      	sub	sp, #16
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	4603      	mov	r3, r0
 8017c64:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8017c66:	79fb      	ldrb	r3, [r7, #7]
 8017c68:	2b0c      	cmp	r3, #12
 8017c6a:	d908      	bls.n	8017c7e <memp_malloc+0x22>
 8017c6c:	4b0a      	ldr	r3, [pc, #40]	; (8017c98 <memp_malloc+0x3c>)
 8017c6e:	f240 1257 	movw	r2, #343	; 0x157
 8017c72:	490a      	ldr	r1, [pc, #40]	; (8017c9c <memp_malloc+0x40>)
 8017c74:	480a      	ldr	r0, [pc, #40]	; (8017ca0 <memp_malloc+0x44>)
 8017c76:	f00c f943 	bl	8023f00 <iprintf>
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	e008      	b.n	8017c90 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8017c7e:	79fb      	ldrb	r3, [r7, #7]
 8017c80:	4a08      	ldr	r2, [pc, #32]	; (8017ca4 <memp_malloc+0x48>)
 8017c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c86:	4618      	mov	r0, r3
 8017c88:	f7ff ff94 	bl	8017bb4 <do_memp_malloc_pool>
 8017c8c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8017c8e:	68fb      	ldr	r3, [r7, #12]
}
 8017c90:	4618      	mov	r0, r3
 8017c92:	3710      	adds	r7, #16
 8017c94:	46bd      	mov	sp, r7
 8017c96:	bd80      	pop	{r7, pc}
 8017c98:	08026240 	.word	0x08026240
 8017c9c:	080262d0 	.word	0x080262d0
 8017ca0:	08026294 	.word	0x08026294
 8017ca4:	08028a84 	.word	0x08028a84

08017ca8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b084      	sub	sp, #16
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
 8017cb0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8017cb2:	683b      	ldr	r3, [r7, #0]
 8017cb4:	f003 0303 	and.w	r3, r3, #3
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d006      	beq.n	8017cca <do_memp_free_pool+0x22>
 8017cbc:	4b0d      	ldr	r3, [pc, #52]	; (8017cf4 <do_memp_free_pool+0x4c>)
 8017cbe:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8017cc2:	490d      	ldr	r1, [pc, #52]	; (8017cf8 <do_memp_free_pool+0x50>)
 8017cc4:	480d      	ldr	r0, [pc, #52]	; (8017cfc <do_memp_free_pool+0x54>)
 8017cc6:	f00c f91b 	bl	8023f00 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8017cca:	683b      	ldr	r3, [r7, #0]
 8017ccc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8017cce:	f00a fe83 	bl	80229d8 <sys_arch_protect>
 8017cd2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	689b      	ldr	r3, [r3, #8]
 8017cd8:	681a      	ldr	r2, [r3, #0]
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	689b      	ldr	r3, [r3, #8]
 8017ce2:	68fa      	ldr	r2, [r7, #12]
 8017ce4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8017ce6:	68b8      	ldr	r0, [r7, #8]
 8017ce8:	f00a fe84 	bl	80229f4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8017cec:	bf00      	nop
 8017cee:	3710      	adds	r7, #16
 8017cf0:	46bd      	mov	sp, r7
 8017cf2:	bd80      	pop	{r7, pc}
 8017cf4:	08026240 	.word	0x08026240
 8017cf8:	080262f0 	.word	0x080262f0
 8017cfc:	08026294 	.word	0x08026294

08017d00 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b082      	sub	sp, #8
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	6078      	str	r0, [r7, #4]
 8017d08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d106      	bne.n	8017d1e <memp_free_pool+0x1e>
 8017d10:	4b0a      	ldr	r3, [pc, #40]	; (8017d3c <memp_free_pool+0x3c>)
 8017d12:	f240 1295 	movw	r2, #405	; 0x195
 8017d16:	490a      	ldr	r1, [pc, #40]	; (8017d40 <memp_free_pool+0x40>)
 8017d18:	480a      	ldr	r0, [pc, #40]	; (8017d44 <memp_free_pool+0x44>)
 8017d1a:	f00c f8f1 	bl	8023f00 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d007      	beq.n	8017d34 <memp_free_pool+0x34>
 8017d24:	683b      	ldr	r3, [r7, #0]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d004      	beq.n	8017d34 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8017d2a:	6839      	ldr	r1, [r7, #0]
 8017d2c:	6878      	ldr	r0, [r7, #4]
 8017d2e:	f7ff ffbb 	bl	8017ca8 <do_memp_free_pool>
 8017d32:	e000      	b.n	8017d36 <memp_free_pool+0x36>
    return;
 8017d34:	bf00      	nop
}
 8017d36:	3708      	adds	r7, #8
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	bd80      	pop	{r7, pc}
 8017d3c:	08026240 	.word	0x08026240
 8017d40:	080262bc 	.word	0x080262bc
 8017d44:	08026294 	.word	0x08026294

08017d48 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b082      	sub	sp, #8
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	4603      	mov	r3, r0
 8017d50:	6039      	str	r1, [r7, #0]
 8017d52:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8017d54:	79fb      	ldrb	r3, [r7, #7]
 8017d56:	2b0c      	cmp	r3, #12
 8017d58:	d907      	bls.n	8017d6a <memp_free+0x22>
 8017d5a:	4b0c      	ldr	r3, [pc, #48]	; (8017d8c <memp_free+0x44>)
 8017d5c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8017d60:	490b      	ldr	r1, [pc, #44]	; (8017d90 <memp_free+0x48>)
 8017d62:	480c      	ldr	r0, [pc, #48]	; (8017d94 <memp_free+0x4c>)
 8017d64:	f00c f8cc 	bl	8023f00 <iprintf>
 8017d68:	e00c      	b.n	8017d84 <memp_free+0x3c>

  if (mem == NULL) {
 8017d6a:	683b      	ldr	r3, [r7, #0]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d008      	beq.n	8017d82 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8017d70:	79fb      	ldrb	r3, [r7, #7]
 8017d72:	4a09      	ldr	r2, [pc, #36]	; (8017d98 <memp_free+0x50>)
 8017d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017d78:	6839      	ldr	r1, [r7, #0]
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	f7ff ff94 	bl	8017ca8 <do_memp_free_pool>
 8017d80:	e000      	b.n	8017d84 <memp_free+0x3c>
    return;
 8017d82:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8017d84:	3708      	adds	r7, #8
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}
 8017d8a:	bf00      	nop
 8017d8c:	08026240 	.word	0x08026240
 8017d90:	08026310 	.word	0x08026310
 8017d94:	08026294 	.word	0x08026294
 8017d98:	08028a84 	.word	0x08028a84

08017d9c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8017d9c:	b480      	push	{r7}
 8017d9e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8017da0:	bf00      	nop
 8017da2:	46bd      	mov	sp, r7
 8017da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da8:	4770      	bx	lr
	...

08017dac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b086      	sub	sp, #24
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	60f8      	str	r0, [r7, #12]
 8017db4:	60b9      	str	r1, [r7, #8]
 8017db6:	607a      	str	r2, [r7, #4]
 8017db8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d108      	bne.n	8017dd2 <netif_add+0x26>
 8017dc0:	4b57      	ldr	r3, [pc, #348]	; (8017f20 <netif_add+0x174>)
 8017dc2:	f240 1227 	movw	r2, #295	; 0x127
 8017dc6:	4957      	ldr	r1, [pc, #348]	; (8017f24 <netif_add+0x178>)
 8017dc8:	4857      	ldr	r0, [pc, #348]	; (8017f28 <netif_add+0x17c>)
 8017dca:	f00c f899 	bl	8023f00 <iprintf>
 8017dce:	2300      	movs	r3, #0
 8017dd0:	e0a2      	b.n	8017f18 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8017dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d108      	bne.n	8017dea <netif_add+0x3e>
 8017dd8:	4b51      	ldr	r3, [pc, #324]	; (8017f20 <netif_add+0x174>)
 8017dda:	f44f 7294 	mov.w	r2, #296	; 0x128
 8017dde:	4953      	ldr	r1, [pc, #332]	; (8017f2c <netif_add+0x180>)
 8017de0:	4851      	ldr	r0, [pc, #324]	; (8017f28 <netif_add+0x17c>)
 8017de2:	f00c f88d 	bl	8023f00 <iprintf>
 8017de6:	2300      	movs	r3, #0
 8017de8:	e096      	b.n	8017f18 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8017dea:	68bb      	ldr	r3, [r7, #8]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d101      	bne.n	8017df4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8017df0:	4b4f      	ldr	r3, [pc, #316]	; (8017f30 <netif_add+0x184>)
 8017df2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d101      	bne.n	8017dfe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8017dfa:	4b4d      	ldr	r3, [pc, #308]	; (8017f30 <netif_add+0x184>)
 8017dfc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8017dfe:	683b      	ldr	r3, [r7, #0]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d101      	bne.n	8017e08 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8017e04:	4b4a      	ldr	r3, [pc, #296]	; (8017f30 <netif_add+0x184>)
 8017e06:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	2200      	movs	r2, #0
 8017e0c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	2200      	movs	r2, #0
 8017e12:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	2200      	movs	r2, #0
 8017e18:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	4a45      	ldr	r2, [pc, #276]	; (8017f34 <netif_add+0x188>)
 8017e1e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	2200      	movs	r2, #0
 8017e24:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	2200      	movs	r2, #0
 8017e2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	2200      	movs	r2, #0
 8017e32:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	6a3a      	ldr	r2, [r7, #32]
 8017e38:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8017e3a:	4b3f      	ldr	r3, [pc, #252]	; (8017f38 <netif_add+0x18c>)
 8017e3c:	781a      	ldrb	r2, [r3, #0]
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017e48:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8017e4a:	683b      	ldr	r3, [r7, #0]
 8017e4c:	687a      	ldr	r2, [r7, #4]
 8017e4e:	68b9      	ldr	r1, [r7, #8]
 8017e50:	68f8      	ldr	r0, [r7, #12]
 8017e52:	f000 f913 	bl	801807c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8017e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e58:	68f8      	ldr	r0, [r7, #12]
 8017e5a:	4798      	blx	r3
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d001      	beq.n	8017e66 <netif_add+0xba>
    return NULL;
 8017e62:	2300      	movs	r3, #0
 8017e64:	e058      	b.n	8017f18 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e6c:	2bff      	cmp	r3, #255	; 0xff
 8017e6e:	d103      	bne.n	8017e78 <netif_add+0xcc>
        netif->num = 0;
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	2200      	movs	r2, #0
 8017e74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8017e78:	2300      	movs	r3, #0
 8017e7a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8017e7c:	4b2f      	ldr	r3, [pc, #188]	; (8017f3c <netif_add+0x190>)
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	617b      	str	r3, [r7, #20]
 8017e82:	e02b      	b.n	8017edc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8017e84:	697a      	ldr	r2, [r7, #20]
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	429a      	cmp	r2, r3
 8017e8a:	d106      	bne.n	8017e9a <netif_add+0xee>
 8017e8c:	4b24      	ldr	r3, [pc, #144]	; (8017f20 <netif_add+0x174>)
 8017e8e:	f240 128b 	movw	r2, #395	; 0x18b
 8017e92:	492b      	ldr	r1, [pc, #172]	; (8017f40 <netif_add+0x194>)
 8017e94:	4824      	ldr	r0, [pc, #144]	; (8017f28 <netif_add+0x17c>)
 8017e96:	f00c f833 	bl	8023f00 <iprintf>
        num_netifs++;
 8017e9a:	693b      	ldr	r3, [r7, #16]
 8017e9c:	3301      	adds	r3, #1
 8017e9e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8017ea0:	693b      	ldr	r3, [r7, #16]
 8017ea2:	2bff      	cmp	r3, #255	; 0xff
 8017ea4:	dd06      	ble.n	8017eb4 <netif_add+0x108>
 8017ea6:	4b1e      	ldr	r3, [pc, #120]	; (8017f20 <netif_add+0x174>)
 8017ea8:	f240 128d 	movw	r2, #397	; 0x18d
 8017eac:	4925      	ldr	r1, [pc, #148]	; (8017f44 <netif_add+0x198>)
 8017eae:	481e      	ldr	r0, [pc, #120]	; (8017f28 <netif_add+0x17c>)
 8017eb0:	f00c f826 	bl	8023f00 <iprintf>
        if (netif2->num == netif->num) {
 8017eb4:	697b      	ldr	r3, [r7, #20]
 8017eb6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017ec0:	429a      	cmp	r2, r3
 8017ec2:	d108      	bne.n	8017ed6 <netif_add+0x12a>
          netif->num++;
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017eca:	3301      	adds	r3, #1
 8017ecc:	b2da      	uxtb	r2, r3
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8017ed4:	e005      	b.n	8017ee2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8017ed6:	697b      	ldr	r3, [r7, #20]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	617b      	str	r3, [r7, #20]
 8017edc:	697b      	ldr	r3, [r7, #20]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d1d0      	bne.n	8017e84 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8017ee2:	697b      	ldr	r3, [r7, #20]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d1be      	bne.n	8017e66 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017eee:	2bfe      	cmp	r3, #254	; 0xfe
 8017ef0:	d103      	bne.n	8017efa <netif_add+0x14e>
    netif_num = 0;
 8017ef2:	4b11      	ldr	r3, [pc, #68]	; (8017f38 <netif_add+0x18c>)
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	701a      	strb	r2, [r3, #0]
 8017ef8:	e006      	b.n	8017f08 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f00:	3301      	adds	r3, #1
 8017f02:	b2da      	uxtb	r2, r3
 8017f04:	4b0c      	ldr	r3, [pc, #48]	; (8017f38 <netif_add+0x18c>)
 8017f06:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8017f08:	4b0c      	ldr	r3, [pc, #48]	; (8017f3c <netif_add+0x190>)
 8017f0a:	681a      	ldr	r2, [r3, #0]
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8017f10:	4a0a      	ldr	r2, [pc, #40]	; (8017f3c <netif_add+0x190>)
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8017f16:	68fb      	ldr	r3, [r7, #12]
}
 8017f18:	4618      	mov	r0, r3
 8017f1a:	3718      	adds	r7, #24
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	bd80      	pop	{r7, pc}
 8017f20:	0802632c 	.word	0x0802632c
 8017f24:	080263c0 	.word	0x080263c0
 8017f28:	0802637c 	.word	0x0802637c
 8017f2c:	080263dc 	.word	0x080263dc
 8017f30:	08028af8 	.word	0x08028af8
 8017f34:	08018357 	.word	0x08018357
 8017f38:	2000bfa8 	.word	0x2000bfa8
 8017f3c:	2000bfa0 	.word	0x2000bfa0
 8017f40:	08026400 	.word	0x08026400
 8017f44:	08026414 	.word	0x08026414

08017f48 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b082      	sub	sp, #8
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
 8017f50:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8017f52:	6839      	ldr	r1, [r7, #0]
 8017f54:	6878      	ldr	r0, [r7, #4]
 8017f56:	f002 ff77 	bl	801ae48 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8017f5a:	6839      	ldr	r1, [r7, #0]
 8017f5c:	6878      	ldr	r0, [r7, #4]
 8017f5e:	f008 f881 	bl	8020064 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8017f62:	bf00      	nop
 8017f64:	3708      	adds	r7, #8
 8017f66:	46bd      	mov	sp, r7
 8017f68:	bd80      	pop	{r7, pc}
	...

08017f6c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b086      	sub	sp, #24
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	60f8      	str	r0, [r7, #12]
 8017f74:	60b9      	str	r1, [r7, #8]
 8017f76:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8017f78:	68bb      	ldr	r3, [r7, #8]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d106      	bne.n	8017f8c <netif_do_set_ipaddr+0x20>
 8017f7e:	4b1d      	ldr	r3, [pc, #116]	; (8017ff4 <netif_do_set_ipaddr+0x88>)
 8017f80:	f240 12cb 	movw	r2, #459	; 0x1cb
 8017f84:	491c      	ldr	r1, [pc, #112]	; (8017ff8 <netif_do_set_ipaddr+0x8c>)
 8017f86:	481d      	ldr	r0, [pc, #116]	; (8017ffc <netif_do_set_ipaddr+0x90>)
 8017f88:	f00b ffba 	bl	8023f00 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d106      	bne.n	8017fa0 <netif_do_set_ipaddr+0x34>
 8017f92:	4b18      	ldr	r3, [pc, #96]	; (8017ff4 <netif_do_set_ipaddr+0x88>)
 8017f94:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8017f98:	4917      	ldr	r1, [pc, #92]	; (8017ff8 <netif_do_set_ipaddr+0x8c>)
 8017f9a:	4818      	ldr	r0, [pc, #96]	; (8017ffc <netif_do_set_ipaddr+0x90>)
 8017f9c:	f00b ffb0 	bl	8023f00 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8017fa0:	68bb      	ldr	r3, [r7, #8]
 8017fa2:	681a      	ldr	r2, [r3, #0]
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	3304      	adds	r3, #4
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	429a      	cmp	r2, r3
 8017fac:	d01c      	beq.n	8017fe8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8017fae:	68bb      	ldr	r3, [r7, #8]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	3304      	adds	r3, #4
 8017fb8:	681a      	ldr	r2, [r3, #0]
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8017fbe:	f107 0314 	add.w	r3, r7, #20
 8017fc2:	4619      	mov	r1, r3
 8017fc4:	6878      	ldr	r0, [r7, #4]
 8017fc6:	f7ff ffbf 	bl	8017f48 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8017fca:	68bb      	ldr	r3, [r7, #8]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d002      	beq.n	8017fd6 <netif_do_set_ipaddr+0x6a>
 8017fd0:	68bb      	ldr	r3, [r7, #8]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	e000      	b.n	8017fd8 <netif_do_set_ipaddr+0x6c>
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	68fa      	ldr	r2, [r7, #12]
 8017fda:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8017fdc:	2101      	movs	r1, #1
 8017fde:	68f8      	ldr	r0, [r7, #12]
 8017fe0:	f000 f8d2 	bl	8018188 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8017fe4:	2301      	movs	r3, #1
 8017fe6:	e000      	b.n	8017fea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8017fe8:	2300      	movs	r3, #0
}
 8017fea:	4618      	mov	r0, r3
 8017fec:	3718      	adds	r7, #24
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	bd80      	pop	{r7, pc}
 8017ff2:	bf00      	nop
 8017ff4:	0802632c 	.word	0x0802632c
 8017ff8:	08026444 	.word	0x08026444
 8017ffc:	0802637c 	.word	0x0802637c

08018000 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8018000:	b480      	push	{r7}
 8018002:	b085      	sub	sp, #20
 8018004:	af00      	add	r7, sp, #0
 8018006:	60f8      	str	r0, [r7, #12]
 8018008:	60b9      	str	r1, [r7, #8]
 801800a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801800c:	68bb      	ldr	r3, [r7, #8]
 801800e:	681a      	ldr	r2, [r3, #0]
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	3308      	adds	r3, #8
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	429a      	cmp	r2, r3
 8018018:	d00a      	beq.n	8018030 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801801a:	68bb      	ldr	r3, [r7, #8]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d002      	beq.n	8018026 <netif_do_set_netmask+0x26>
 8018020:	68bb      	ldr	r3, [r7, #8]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	e000      	b.n	8018028 <netif_do_set_netmask+0x28>
 8018026:	2300      	movs	r3, #0
 8018028:	68fa      	ldr	r2, [r7, #12]
 801802a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801802c:	2301      	movs	r3, #1
 801802e:	e000      	b.n	8018032 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8018030:	2300      	movs	r3, #0
}
 8018032:	4618      	mov	r0, r3
 8018034:	3714      	adds	r7, #20
 8018036:	46bd      	mov	sp, r7
 8018038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803c:	4770      	bx	lr

0801803e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801803e:	b480      	push	{r7}
 8018040:	b085      	sub	sp, #20
 8018042:	af00      	add	r7, sp, #0
 8018044:	60f8      	str	r0, [r7, #12]
 8018046:	60b9      	str	r1, [r7, #8]
 8018048:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801804a:	68bb      	ldr	r3, [r7, #8]
 801804c:	681a      	ldr	r2, [r3, #0]
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	330c      	adds	r3, #12
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	429a      	cmp	r2, r3
 8018056:	d00a      	beq.n	801806e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8018058:	68bb      	ldr	r3, [r7, #8]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d002      	beq.n	8018064 <netif_do_set_gw+0x26>
 801805e:	68bb      	ldr	r3, [r7, #8]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	e000      	b.n	8018066 <netif_do_set_gw+0x28>
 8018064:	2300      	movs	r3, #0
 8018066:	68fa      	ldr	r2, [r7, #12]
 8018068:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801806a:	2301      	movs	r3, #1
 801806c:	e000      	b.n	8018070 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801806e:	2300      	movs	r3, #0
}
 8018070:	4618      	mov	r0, r3
 8018072:	3714      	adds	r7, #20
 8018074:	46bd      	mov	sp, r7
 8018076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801807a:	4770      	bx	lr

0801807c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801807c:	b580      	push	{r7, lr}
 801807e:	b088      	sub	sp, #32
 8018080:	af00      	add	r7, sp, #0
 8018082:	60f8      	str	r0, [r7, #12]
 8018084:	60b9      	str	r1, [r7, #8]
 8018086:	607a      	str	r2, [r7, #4]
 8018088:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801808a:	2300      	movs	r3, #0
 801808c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801808e:	2300      	movs	r3, #0
 8018090:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018092:	68bb      	ldr	r3, [r7, #8]
 8018094:	2b00      	cmp	r3, #0
 8018096:	d101      	bne.n	801809c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8018098:	4b1c      	ldr	r3, [pc, #112]	; (801810c <netif_set_addr+0x90>)
 801809a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d101      	bne.n	80180a6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80180a2:	4b1a      	ldr	r3, [pc, #104]	; (801810c <netif_set_addr+0x90>)
 80180a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d101      	bne.n	80180b0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80180ac:	4b17      	ldr	r3, [pc, #92]	; (801810c <netif_set_addr+0x90>)
 80180ae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80180b0:	68bb      	ldr	r3, [r7, #8]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d003      	beq.n	80180be <netif_set_addr+0x42>
 80180b6:	68bb      	ldr	r3, [r7, #8]
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d101      	bne.n	80180c2 <netif_set_addr+0x46>
 80180be:	2301      	movs	r3, #1
 80180c0:	e000      	b.n	80180c4 <netif_set_addr+0x48>
 80180c2:	2300      	movs	r3, #0
 80180c4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80180c6:	697b      	ldr	r3, [r7, #20]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d006      	beq.n	80180da <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80180cc:	f107 0310 	add.w	r3, r7, #16
 80180d0:	461a      	mov	r2, r3
 80180d2:	68b9      	ldr	r1, [r7, #8]
 80180d4:	68f8      	ldr	r0, [r7, #12]
 80180d6:	f7ff ff49 	bl	8017f6c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80180da:	69fa      	ldr	r2, [r7, #28]
 80180dc:	6879      	ldr	r1, [r7, #4]
 80180de:	68f8      	ldr	r0, [r7, #12]
 80180e0:	f7ff ff8e 	bl	8018000 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80180e4:	69ba      	ldr	r2, [r7, #24]
 80180e6:	6839      	ldr	r1, [r7, #0]
 80180e8:	68f8      	ldr	r0, [r7, #12]
 80180ea:	f7ff ffa8 	bl	801803e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80180ee:	697b      	ldr	r3, [r7, #20]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d106      	bne.n	8018102 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80180f4:	f107 0310 	add.w	r3, r7, #16
 80180f8:	461a      	mov	r2, r3
 80180fa:	68b9      	ldr	r1, [r7, #8]
 80180fc:	68f8      	ldr	r0, [r7, #12]
 80180fe:	f7ff ff35 	bl	8017f6c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8018102:	bf00      	nop
 8018104:	3720      	adds	r7, #32
 8018106:	46bd      	mov	sp, r7
 8018108:	bd80      	pop	{r7, pc}
 801810a:	bf00      	nop
 801810c:	08028af8 	.word	0x08028af8

08018110 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8018110:	b480      	push	{r7}
 8018112:	b083      	sub	sp, #12
 8018114:	af00      	add	r7, sp, #0
 8018116:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8018118:	4a04      	ldr	r2, [pc, #16]	; (801812c <netif_set_default+0x1c>)
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801811e:	bf00      	nop
 8018120:	370c      	adds	r7, #12
 8018122:	46bd      	mov	sp, r7
 8018124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018128:	4770      	bx	lr
 801812a:	bf00      	nop
 801812c:	2000bfa4 	.word	0x2000bfa4

08018130 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b082      	sub	sp, #8
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d107      	bne.n	801814e <netif_set_up+0x1e>
 801813e:	4b0f      	ldr	r3, [pc, #60]	; (801817c <netif_set_up+0x4c>)
 8018140:	f44f 7254 	mov.w	r2, #848	; 0x350
 8018144:	490e      	ldr	r1, [pc, #56]	; (8018180 <netif_set_up+0x50>)
 8018146:	480f      	ldr	r0, [pc, #60]	; (8018184 <netif_set_up+0x54>)
 8018148:	f00b feda 	bl	8023f00 <iprintf>
 801814c:	e013      	b.n	8018176 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018154:	f003 0301 	and.w	r3, r3, #1
 8018158:	2b00      	cmp	r3, #0
 801815a:	d10c      	bne.n	8018176 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018162:	f043 0301 	orr.w	r3, r3, #1
 8018166:	b2da      	uxtb	r2, r3
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801816e:	2103      	movs	r1, #3
 8018170:	6878      	ldr	r0, [r7, #4]
 8018172:	f000 f809 	bl	8018188 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8018176:	3708      	adds	r7, #8
 8018178:	46bd      	mov	sp, r7
 801817a:	bd80      	pop	{r7, pc}
 801817c:	0802632c 	.word	0x0802632c
 8018180:	080264b4 	.word	0x080264b4
 8018184:	0802637c 	.word	0x0802637c

08018188 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8018188:	b580      	push	{r7, lr}
 801818a:	b082      	sub	sp, #8
 801818c:	af00      	add	r7, sp, #0
 801818e:	6078      	str	r0, [r7, #4]
 8018190:	460b      	mov	r3, r1
 8018192:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d106      	bne.n	80181a8 <netif_issue_reports+0x20>
 801819a:	4b18      	ldr	r3, [pc, #96]	; (80181fc <netif_issue_reports+0x74>)
 801819c:	f240 326d 	movw	r2, #877	; 0x36d
 80181a0:	4917      	ldr	r1, [pc, #92]	; (8018200 <netif_issue_reports+0x78>)
 80181a2:	4818      	ldr	r0, [pc, #96]	; (8018204 <netif_issue_reports+0x7c>)
 80181a4:	f00b feac 	bl	8023f00 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80181ae:	f003 0304 	and.w	r3, r3, #4
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d01e      	beq.n	80181f4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80181bc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d017      	beq.n	80181f4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80181c4:	78fb      	ldrb	r3, [r7, #3]
 80181c6:	f003 0301 	and.w	r3, r3, #1
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d013      	beq.n	80181f6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	3304      	adds	r3, #4
 80181d2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d00e      	beq.n	80181f6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80181de:	f003 0308 	and.w	r3, r3, #8
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d007      	beq.n	80181f6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	3304      	adds	r3, #4
 80181ea:	4619      	mov	r1, r3
 80181ec:	6878      	ldr	r0, [r7, #4]
 80181ee:	f008 fea3 	bl	8020f38 <etharp_request>
 80181f2:	e000      	b.n	80181f6 <netif_issue_reports+0x6e>
    return;
 80181f4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80181f6:	3708      	adds	r7, #8
 80181f8:	46bd      	mov	sp, r7
 80181fa:	bd80      	pop	{r7, pc}
 80181fc:	0802632c 	.word	0x0802632c
 8018200:	080264d0 	.word	0x080264d0
 8018204:	0802637c 	.word	0x0802637c

08018208 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b082      	sub	sp, #8
 801820c:	af00      	add	r7, sp, #0
 801820e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d107      	bne.n	8018226 <netif_set_down+0x1e>
 8018216:	4b12      	ldr	r3, [pc, #72]	; (8018260 <netif_set_down+0x58>)
 8018218:	f240 329b 	movw	r2, #923	; 0x39b
 801821c:	4911      	ldr	r1, [pc, #68]	; (8018264 <netif_set_down+0x5c>)
 801821e:	4812      	ldr	r0, [pc, #72]	; (8018268 <netif_set_down+0x60>)
 8018220:	f00b fe6e 	bl	8023f00 <iprintf>
 8018224:	e019      	b.n	801825a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801822c:	f003 0301 	and.w	r3, r3, #1
 8018230:	2b00      	cmp	r3, #0
 8018232:	d012      	beq.n	801825a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801823a:	f023 0301 	bic.w	r3, r3, #1
 801823e:	b2da      	uxtb	r2, r3
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801824c:	f003 0308 	and.w	r3, r3, #8
 8018250:	2b00      	cmp	r3, #0
 8018252:	d002      	beq.n	801825a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8018254:	6878      	ldr	r0, [r7, #4]
 8018256:	f008 fa2d 	bl	80206b4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801825a:	3708      	adds	r7, #8
 801825c:	46bd      	mov	sp, r7
 801825e:	bd80      	pop	{r7, pc}
 8018260:	0802632c 	.word	0x0802632c
 8018264:	080264f4 	.word	0x080264f4
 8018268:	0802637c 	.word	0x0802637c

0801826c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b082      	sub	sp, #8
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d107      	bne.n	801828a <netif_set_link_up+0x1e>
 801827a:	4b13      	ldr	r3, [pc, #76]	; (80182c8 <netif_set_link_up+0x5c>)
 801827c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8018280:	4912      	ldr	r1, [pc, #72]	; (80182cc <netif_set_link_up+0x60>)
 8018282:	4813      	ldr	r0, [pc, #76]	; (80182d0 <netif_set_link_up+0x64>)
 8018284:	f00b fe3c 	bl	8023f00 <iprintf>
 8018288:	e01b      	b.n	80182c2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018290:	f003 0304 	and.w	r3, r3, #4
 8018294:	2b00      	cmp	r3, #0
 8018296:	d114      	bne.n	80182c2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801829e:	f043 0304 	orr.w	r3, r3, #4
 80182a2:	b2da      	uxtb	r2, r3
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80182aa:	2103      	movs	r1, #3
 80182ac:	6878      	ldr	r0, [r7, #4]
 80182ae:	f7ff ff6b 	bl	8018188 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	69db      	ldr	r3, [r3, #28]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d003      	beq.n	80182c2 <netif_set_link_up+0x56>
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	69db      	ldr	r3, [r3, #28]
 80182be:	6878      	ldr	r0, [r7, #4]
 80182c0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80182c2:	3708      	adds	r7, #8
 80182c4:	46bd      	mov	sp, r7
 80182c6:	bd80      	pop	{r7, pc}
 80182c8:	0802632c 	.word	0x0802632c
 80182cc:	08026514 	.word	0x08026514
 80182d0:	0802637c 	.word	0x0802637c

080182d4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b082      	sub	sp, #8
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d107      	bne.n	80182f2 <netif_set_link_down+0x1e>
 80182e2:	4b11      	ldr	r3, [pc, #68]	; (8018328 <netif_set_link_down+0x54>)
 80182e4:	f240 4206 	movw	r2, #1030	; 0x406
 80182e8:	4910      	ldr	r1, [pc, #64]	; (801832c <netif_set_link_down+0x58>)
 80182ea:	4811      	ldr	r0, [pc, #68]	; (8018330 <netif_set_link_down+0x5c>)
 80182ec:	f00b fe08 	bl	8023f00 <iprintf>
 80182f0:	e017      	b.n	8018322 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80182f8:	f003 0304 	and.w	r3, r3, #4
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d010      	beq.n	8018322 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018306:	f023 0304 	bic.w	r3, r3, #4
 801830a:	b2da      	uxtb	r2, r3
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	69db      	ldr	r3, [r3, #28]
 8018316:	2b00      	cmp	r3, #0
 8018318:	d003      	beq.n	8018322 <netif_set_link_down+0x4e>
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	69db      	ldr	r3, [r3, #28]
 801831e:	6878      	ldr	r0, [r7, #4]
 8018320:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8018322:	3708      	adds	r7, #8
 8018324:	46bd      	mov	sp, r7
 8018326:	bd80      	pop	{r7, pc}
 8018328:	0802632c 	.word	0x0802632c
 801832c:	08026538 	.word	0x08026538
 8018330:	0802637c 	.word	0x0802637c

08018334 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8018334:	b480      	push	{r7}
 8018336:	b083      	sub	sp, #12
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
 801833c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d002      	beq.n	801834a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	683a      	ldr	r2, [r7, #0]
 8018348:	61da      	str	r2, [r3, #28]
  }
}
 801834a:	bf00      	nop
 801834c:	370c      	adds	r7, #12
 801834e:	46bd      	mov	sp, r7
 8018350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018354:	4770      	bx	lr

08018356 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8018356:	b480      	push	{r7}
 8018358:	b085      	sub	sp, #20
 801835a:	af00      	add	r7, sp, #0
 801835c:	60f8      	str	r0, [r7, #12]
 801835e:	60b9      	str	r1, [r7, #8]
 8018360:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8018362:	f06f 030b 	mvn.w	r3, #11
}
 8018366:	4618      	mov	r0, r3
 8018368:	3714      	adds	r7, #20
 801836a:	46bd      	mov	sp, r7
 801836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018370:	4770      	bx	lr
	...

08018374 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8018374:	b480      	push	{r7}
 8018376:	b085      	sub	sp, #20
 8018378:	af00      	add	r7, sp, #0
 801837a:	4603      	mov	r3, r0
 801837c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801837e:	79fb      	ldrb	r3, [r7, #7]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d013      	beq.n	80183ac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8018384:	4b0d      	ldr	r3, [pc, #52]	; (80183bc <netif_get_by_index+0x48>)
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	60fb      	str	r3, [r7, #12]
 801838a:	e00c      	b.n	80183a6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018392:	3301      	adds	r3, #1
 8018394:	b2db      	uxtb	r3, r3
 8018396:	79fa      	ldrb	r2, [r7, #7]
 8018398:	429a      	cmp	r2, r3
 801839a:	d101      	bne.n	80183a0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	e006      	b.n	80183ae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	60fb      	str	r3, [r7, #12]
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d1ef      	bne.n	801838c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80183ac:	2300      	movs	r3, #0
}
 80183ae:	4618      	mov	r0, r3
 80183b0:	3714      	adds	r7, #20
 80183b2:	46bd      	mov	sp, r7
 80183b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b8:	4770      	bx	lr
 80183ba:	bf00      	nop
 80183bc:	2000bfa0 	.word	0x2000bfa0

080183c0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b082      	sub	sp, #8
 80183c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80183c6:	f00a fb07 	bl	80229d8 <sys_arch_protect>
 80183ca:	6038      	str	r0, [r7, #0]
 80183cc:	4b0d      	ldr	r3, [pc, #52]	; (8018404 <pbuf_free_ooseq+0x44>)
 80183ce:	2200      	movs	r2, #0
 80183d0:	701a      	strb	r2, [r3, #0]
 80183d2:	6838      	ldr	r0, [r7, #0]
 80183d4:	f00a fb0e 	bl	80229f4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80183d8:	4b0b      	ldr	r3, [pc, #44]	; (8018408 <pbuf_free_ooseq+0x48>)
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	607b      	str	r3, [r7, #4]
 80183de:	e00a      	b.n	80183f6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d003      	beq.n	80183f0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80183e8:	6878      	ldr	r0, [r7, #4]
 80183ea:	f002 fd6b 	bl	801aec4 <tcp_free_ooseq>
      return;
 80183ee:	e005      	b.n	80183fc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	68db      	ldr	r3, [r3, #12]
 80183f4:	607b      	str	r3, [r7, #4]
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d1f1      	bne.n	80183e0 <pbuf_free_ooseq+0x20>
    }
  }
}
 80183fc:	3708      	adds	r7, #8
 80183fe:	46bd      	mov	sp, r7
 8018400:	bd80      	pop	{r7, pc}
 8018402:	bf00      	nop
 8018404:	2000bfa9 	.word	0x2000bfa9
 8018408:	2000bfb8 	.word	0x2000bfb8

0801840c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b082      	sub	sp, #8
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8018414:	f7ff ffd4 	bl	80183c0 <pbuf_free_ooseq>
}
 8018418:	bf00      	nop
 801841a:	3708      	adds	r7, #8
 801841c:	46bd      	mov	sp, r7
 801841e:	bd80      	pop	{r7, pc}

08018420 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8018420:	b580      	push	{r7, lr}
 8018422:	b082      	sub	sp, #8
 8018424:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8018426:	f00a fad7 	bl	80229d8 <sys_arch_protect>
 801842a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801842c:	4b0f      	ldr	r3, [pc, #60]	; (801846c <pbuf_pool_is_empty+0x4c>)
 801842e:	781b      	ldrb	r3, [r3, #0]
 8018430:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8018432:	4b0e      	ldr	r3, [pc, #56]	; (801846c <pbuf_pool_is_empty+0x4c>)
 8018434:	2201      	movs	r2, #1
 8018436:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8018438:	6878      	ldr	r0, [r7, #4]
 801843a:	f00a fadb 	bl	80229f4 <sys_arch_unprotect>

  if (!queued) {
 801843e:	78fb      	ldrb	r3, [r7, #3]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d10f      	bne.n	8018464 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8018444:	2100      	movs	r1, #0
 8018446:	480a      	ldr	r0, [pc, #40]	; (8018470 <pbuf_pool_is_empty+0x50>)
 8018448:	f7fe fe90 	bl	801716c <tcpip_try_callback>
 801844c:	4603      	mov	r3, r0
 801844e:	2b00      	cmp	r3, #0
 8018450:	d008      	beq.n	8018464 <pbuf_pool_is_empty+0x44>
 8018452:	f00a fac1 	bl	80229d8 <sys_arch_protect>
 8018456:	6078      	str	r0, [r7, #4]
 8018458:	4b04      	ldr	r3, [pc, #16]	; (801846c <pbuf_pool_is_empty+0x4c>)
 801845a:	2200      	movs	r2, #0
 801845c:	701a      	strb	r2, [r3, #0]
 801845e:	6878      	ldr	r0, [r7, #4]
 8018460:	f00a fac8 	bl	80229f4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8018464:	bf00      	nop
 8018466:	3708      	adds	r7, #8
 8018468:	46bd      	mov	sp, r7
 801846a:	bd80      	pop	{r7, pc}
 801846c:	2000bfa9 	.word	0x2000bfa9
 8018470:	0801840d 	.word	0x0801840d

08018474 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8018474:	b480      	push	{r7}
 8018476:	b085      	sub	sp, #20
 8018478:	af00      	add	r7, sp, #0
 801847a:	60f8      	str	r0, [r7, #12]
 801847c:	60b9      	str	r1, [r7, #8]
 801847e:	4611      	mov	r1, r2
 8018480:	461a      	mov	r2, r3
 8018482:	460b      	mov	r3, r1
 8018484:	80fb      	strh	r3, [r7, #6]
 8018486:	4613      	mov	r3, r2
 8018488:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	2200      	movs	r2, #0
 801848e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	68ba      	ldr	r2, [r7, #8]
 8018494:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	88fa      	ldrh	r2, [r7, #6]
 801849a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	88ba      	ldrh	r2, [r7, #4]
 80184a0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80184a2:	8b3b      	ldrh	r3, [r7, #24]
 80184a4:	b2da      	uxtb	r2, r3
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	7f3a      	ldrb	r2, [r7, #28]
 80184ae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	2201      	movs	r2, #1
 80184b4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	2200      	movs	r2, #0
 80184ba:	73da      	strb	r2, [r3, #15]
}
 80184bc:	bf00      	nop
 80184be:	3714      	adds	r7, #20
 80184c0:	46bd      	mov	sp, r7
 80184c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c6:	4770      	bx	lr

080184c8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b08c      	sub	sp, #48	; 0x30
 80184cc:	af02      	add	r7, sp, #8
 80184ce:	4603      	mov	r3, r0
 80184d0:	71fb      	strb	r3, [r7, #7]
 80184d2:	460b      	mov	r3, r1
 80184d4:	80bb      	strh	r3, [r7, #4]
 80184d6:	4613      	mov	r3, r2
 80184d8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80184da:	79fb      	ldrb	r3, [r7, #7]
 80184dc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80184de:	887b      	ldrh	r3, [r7, #2]
 80184e0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80184e4:	d07f      	beq.n	80185e6 <pbuf_alloc+0x11e>
 80184e6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80184ea:	f300 80c8 	bgt.w	801867e <pbuf_alloc+0x1b6>
 80184ee:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80184f2:	d010      	beq.n	8018516 <pbuf_alloc+0x4e>
 80184f4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80184f8:	f300 80c1 	bgt.w	801867e <pbuf_alloc+0x1b6>
 80184fc:	2b01      	cmp	r3, #1
 80184fe:	d002      	beq.n	8018506 <pbuf_alloc+0x3e>
 8018500:	2b41      	cmp	r3, #65	; 0x41
 8018502:	f040 80bc 	bne.w	801867e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8018506:	887a      	ldrh	r2, [r7, #2]
 8018508:	88bb      	ldrh	r3, [r7, #4]
 801850a:	4619      	mov	r1, r3
 801850c:	2000      	movs	r0, #0
 801850e:	f000 f8d1 	bl	80186b4 <pbuf_alloc_reference>
 8018512:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8018514:	e0bd      	b.n	8018692 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8018516:	2300      	movs	r3, #0
 8018518:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801851a:	2300      	movs	r3, #0
 801851c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801851e:	88bb      	ldrh	r3, [r7, #4]
 8018520:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8018522:	200c      	movs	r0, #12
 8018524:	f7ff fb9a 	bl	8017c5c <memp_malloc>
 8018528:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801852a:	693b      	ldr	r3, [r7, #16]
 801852c:	2b00      	cmp	r3, #0
 801852e:	d109      	bne.n	8018544 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8018530:	f7ff ff76 	bl	8018420 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8018534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018536:	2b00      	cmp	r3, #0
 8018538:	d002      	beq.n	8018540 <pbuf_alloc+0x78>
            pbuf_free(p);
 801853a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801853c:	f000 faa8 	bl	8018a90 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8018540:	2300      	movs	r3, #0
 8018542:	e0a7      	b.n	8018694 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8018544:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018546:	3303      	adds	r3, #3
 8018548:	b29b      	uxth	r3, r3
 801854a:	f023 0303 	bic.w	r3, r3, #3
 801854e:	b29b      	uxth	r3, r3
 8018550:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8018554:	b29b      	uxth	r3, r3
 8018556:	8b7a      	ldrh	r2, [r7, #26]
 8018558:	4293      	cmp	r3, r2
 801855a:	bf28      	it	cs
 801855c:	4613      	movcs	r3, r2
 801855e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8018560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018562:	3310      	adds	r3, #16
 8018564:	693a      	ldr	r2, [r7, #16]
 8018566:	4413      	add	r3, r2
 8018568:	3303      	adds	r3, #3
 801856a:	f023 0303 	bic.w	r3, r3, #3
 801856e:	4618      	mov	r0, r3
 8018570:	89f9      	ldrh	r1, [r7, #14]
 8018572:	8b7a      	ldrh	r2, [r7, #26]
 8018574:	2300      	movs	r3, #0
 8018576:	9301      	str	r3, [sp, #4]
 8018578:	887b      	ldrh	r3, [r7, #2]
 801857a:	9300      	str	r3, [sp, #0]
 801857c:	460b      	mov	r3, r1
 801857e:	4601      	mov	r1, r0
 8018580:	6938      	ldr	r0, [r7, #16]
 8018582:	f7ff ff77 	bl	8018474 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8018586:	693b      	ldr	r3, [r7, #16]
 8018588:	685b      	ldr	r3, [r3, #4]
 801858a:	f003 0303 	and.w	r3, r3, #3
 801858e:	2b00      	cmp	r3, #0
 8018590:	d006      	beq.n	80185a0 <pbuf_alloc+0xd8>
 8018592:	4b42      	ldr	r3, [pc, #264]	; (801869c <pbuf_alloc+0x1d4>)
 8018594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018598:	4941      	ldr	r1, [pc, #260]	; (80186a0 <pbuf_alloc+0x1d8>)
 801859a:	4842      	ldr	r0, [pc, #264]	; (80186a4 <pbuf_alloc+0x1dc>)
 801859c:	f00b fcb0 	bl	8023f00 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80185a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80185a2:	3303      	adds	r3, #3
 80185a4:	f023 0303 	bic.w	r3, r3, #3
 80185a8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80185ac:	d106      	bne.n	80185bc <pbuf_alloc+0xf4>
 80185ae:	4b3b      	ldr	r3, [pc, #236]	; (801869c <pbuf_alloc+0x1d4>)
 80185b0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80185b4:	493c      	ldr	r1, [pc, #240]	; (80186a8 <pbuf_alloc+0x1e0>)
 80185b6:	483b      	ldr	r0, [pc, #236]	; (80186a4 <pbuf_alloc+0x1dc>)
 80185b8:	f00b fca2 	bl	8023f00 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80185bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d102      	bne.n	80185c8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80185c2:	693b      	ldr	r3, [r7, #16]
 80185c4:	627b      	str	r3, [r7, #36]	; 0x24
 80185c6:	e002      	b.n	80185ce <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80185c8:	69fb      	ldr	r3, [r7, #28]
 80185ca:	693a      	ldr	r2, [r7, #16]
 80185cc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80185ce:	693b      	ldr	r3, [r7, #16]
 80185d0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80185d2:	8b7a      	ldrh	r2, [r7, #26]
 80185d4:	89fb      	ldrh	r3, [r7, #14]
 80185d6:	1ad3      	subs	r3, r2, r3
 80185d8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80185da:	2300      	movs	r3, #0
 80185dc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80185de:	8b7b      	ldrh	r3, [r7, #26]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d19e      	bne.n	8018522 <pbuf_alloc+0x5a>
      break;
 80185e4:	e055      	b.n	8018692 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80185e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80185e8:	3303      	adds	r3, #3
 80185ea:	b29b      	uxth	r3, r3
 80185ec:	f023 0303 	bic.w	r3, r3, #3
 80185f0:	b29a      	uxth	r2, r3
 80185f2:	88bb      	ldrh	r3, [r7, #4]
 80185f4:	3303      	adds	r3, #3
 80185f6:	b29b      	uxth	r3, r3
 80185f8:	f023 0303 	bic.w	r3, r3, #3
 80185fc:	b29b      	uxth	r3, r3
 80185fe:	4413      	add	r3, r2
 8018600:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8018602:	8b3b      	ldrh	r3, [r7, #24]
 8018604:	3310      	adds	r3, #16
 8018606:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018608:	8b3a      	ldrh	r2, [r7, #24]
 801860a:	88bb      	ldrh	r3, [r7, #4]
 801860c:	3303      	adds	r3, #3
 801860e:	f023 0303 	bic.w	r3, r3, #3
 8018612:	429a      	cmp	r2, r3
 8018614:	d306      	bcc.n	8018624 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8018616:	8afa      	ldrh	r2, [r7, #22]
 8018618:	88bb      	ldrh	r3, [r7, #4]
 801861a:	3303      	adds	r3, #3
 801861c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018620:	429a      	cmp	r2, r3
 8018622:	d201      	bcs.n	8018628 <pbuf_alloc+0x160>
        return NULL;
 8018624:	2300      	movs	r3, #0
 8018626:	e035      	b.n	8018694 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8018628:	8afb      	ldrh	r3, [r7, #22]
 801862a:	4618      	mov	r0, r3
 801862c:	f7ff f972 	bl	8017914 <mem_malloc>
 8018630:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8018632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018634:	2b00      	cmp	r3, #0
 8018636:	d101      	bne.n	801863c <pbuf_alloc+0x174>
        return NULL;
 8018638:	2300      	movs	r3, #0
 801863a:	e02b      	b.n	8018694 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801863c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801863e:	3310      	adds	r3, #16
 8018640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018642:	4413      	add	r3, r2
 8018644:	3303      	adds	r3, #3
 8018646:	f023 0303 	bic.w	r3, r3, #3
 801864a:	4618      	mov	r0, r3
 801864c:	88b9      	ldrh	r1, [r7, #4]
 801864e:	88ba      	ldrh	r2, [r7, #4]
 8018650:	2300      	movs	r3, #0
 8018652:	9301      	str	r3, [sp, #4]
 8018654:	887b      	ldrh	r3, [r7, #2]
 8018656:	9300      	str	r3, [sp, #0]
 8018658:	460b      	mov	r3, r1
 801865a:	4601      	mov	r1, r0
 801865c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801865e:	f7ff ff09 	bl	8018474 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8018662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018664:	685b      	ldr	r3, [r3, #4]
 8018666:	f003 0303 	and.w	r3, r3, #3
 801866a:	2b00      	cmp	r3, #0
 801866c:	d010      	beq.n	8018690 <pbuf_alloc+0x1c8>
 801866e:	4b0b      	ldr	r3, [pc, #44]	; (801869c <pbuf_alloc+0x1d4>)
 8018670:	f44f 7291 	mov.w	r2, #290	; 0x122
 8018674:	490d      	ldr	r1, [pc, #52]	; (80186ac <pbuf_alloc+0x1e4>)
 8018676:	480b      	ldr	r0, [pc, #44]	; (80186a4 <pbuf_alloc+0x1dc>)
 8018678:	f00b fc42 	bl	8023f00 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801867c:	e008      	b.n	8018690 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801867e:	4b07      	ldr	r3, [pc, #28]	; (801869c <pbuf_alloc+0x1d4>)
 8018680:	f240 1227 	movw	r2, #295	; 0x127
 8018684:	490a      	ldr	r1, [pc, #40]	; (80186b0 <pbuf_alloc+0x1e8>)
 8018686:	4807      	ldr	r0, [pc, #28]	; (80186a4 <pbuf_alloc+0x1dc>)
 8018688:	f00b fc3a 	bl	8023f00 <iprintf>
      return NULL;
 801868c:	2300      	movs	r3, #0
 801868e:	e001      	b.n	8018694 <pbuf_alloc+0x1cc>
      break;
 8018690:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8018692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018694:	4618      	mov	r0, r3
 8018696:	3728      	adds	r7, #40	; 0x28
 8018698:	46bd      	mov	sp, r7
 801869a:	bd80      	pop	{r7, pc}
 801869c:	0802655c 	.word	0x0802655c
 80186a0:	0802658c 	.word	0x0802658c
 80186a4:	080265bc 	.word	0x080265bc
 80186a8:	080265e4 	.word	0x080265e4
 80186ac:	08026618 	.word	0x08026618
 80186b0:	08026644 	.word	0x08026644

080186b4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b086      	sub	sp, #24
 80186b8:	af02      	add	r7, sp, #8
 80186ba:	6078      	str	r0, [r7, #4]
 80186bc:	460b      	mov	r3, r1
 80186be:	807b      	strh	r3, [r7, #2]
 80186c0:	4613      	mov	r3, r2
 80186c2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80186c4:	883b      	ldrh	r3, [r7, #0]
 80186c6:	2b41      	cmp	r3, #65	; 0x41
 80186c8:	d009      	beq.n	80186de <pbuf_alloc_reference+0x2a>
 80186ca:	883b      	ldrh	r3, [r7, #0]
 80186cc:	2b01      	cmp	r3, #1
 80186ce:	d006      	beq.n	80186de <pbuf_alloc_reference+0x2a>
 80186d0:	4b0f      	ldr	r3, [pc, #60]	; (8018710 <pbuf_alloc_reference+0x5c>)
 80186d2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80186d6:	490f      	ldr	r1, [pc, #60]	; (8018714 <pbuf_alloc_reference+0x60>)
 80186d8:	480f      	ldr	r0, [pc, #60]	; (8018718 <pbuf_alloc_reference+0x64>)
 80186da:	f00b fc11 	bl	8023f00 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80186de:	200b      	movs	r0, #11
 80186e0:	f7ff fabc 	bl	8017c5c <memp_malloc>
 80186e4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d101      	bne.n	80186f0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80186ec:	2300      	movs	r3, #0
 80186ee:	e00b      	b.n	8018708 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80186f0:	8879      	ldrh	r1, [r7, #2]
 80186f2:	887a      	ldrh	r2, [r7, #2]
 80186f4:	2300      	movs	r3, #0
 80186f6:	9301      	str	r3, [sp, #4]
 80186f8:	883b      	ldrh	r3, [r7, #0]
 80186fa:	9300      	str	r3, [sp, #0]
 80186fc:	460b      	mov	r3, r1
 80186fe:	6879      	ldr	r1, [r7, #4]
 8018700:	68f8      	ldr	r0, [r7, #12]
 8018702:	f7ff feb7 	bl	8018474 <pbuf_init_alloced_pbuf>
  return p;
 8018706:	68fb      	ldr	r3, [r7, #12]
}
 8018708:	4618      	mov	r0, r3
 801870a:	3710      	adds	r7, #16
 801870c:	46bd      	mov	sp, r7
 801870e:	bd80      	pop	{r7, pc}
 8018710:	0802655c 	.word	0x0802655c
 8018714:	08026660 	.word	0x08026660
 8018718:	080265bc 	.word	0x080265bc

0801871c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801871c:	b580      	push	{r7, lr}
 801871e:	b088      	sub	sp, #32
 8018720:	af02      	add	r7, sp, #8
 8018722:	607b      	str	r3, [r7, #4]
 8018724:	4603      	mov	r3, r0
 8018726:	73fb      	strb	r3, [r7, #15]
 8018728:	460b      	mov	r3, r1
 801872a:	81bb      	strh	r3, [r7, #12]
 801872c:	4613      	mov	r3, r2
 801872e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8018730:	7bfb      	ldrb	r3, [r7, #15]
 8018732:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8018734:	8a7b      	ldrh	r3, [r7, #18]
 8018736:	3303      	adds	r3, #3
 8018738:	f023 0203 	bic.w	r2, r3, #3
 801873c:	89bb      	ldrh	r3, [r7, #12]
 801873e:	441a      	add	r2, r3
 8018740:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018742:	429a      	cmp	r2, r3
 8018744:	d901      	bls.n	801874a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8018746:	2300      	movs	r3, #0
 8018748:	e018      	b.n	801877c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801874a:	6a3b      	ldr	r3, [r7, #32]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d007      	beq.n	8018760 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8018750:	8a7b      	ldrh	r3, [r7, #18]
 8018752:	3303      	adds	r3, #3
 8018754:	f023 0303 	bic.w	r3, r3, #3
 8018758:	6a3a      	ldr	r2, [r7, #32]
 801875a:	4413      	add	r3, r2
 801875c:	617b      	str	r3, [r7, #20]
 801875e:	e001      	b.n	8018764 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8018760:	2300      	movs	r3, #0
 8018762:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8018764:	6878      	ldr	r0, [r7, #4]
 8018766:	89b9      	ldrh	r1, [r7, #12]
 8018768:	89ba      	ldrh	r2, [r7, #12]
 801876a:	2302      	movs	r3, #2
 801876c:	9301      	str	r3, [sp, #4]
 801876e:	897b      	ldrh	r3, [r7, #10]
 8018770:	9300      	str	r3, [sp, #0]
 8018772:	460b      	mov	r3, r1
 8018774:	6979      	ldr	r1, [r7, #20]
 8018776:	f7ff fe7d 	bl	8018474 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801877a:	687b      	ldr	r3, [r7, #4]
}
 801877c:	4618      	mov	r0, r3
 801877e:	3718      	adds	r7, #24
 8018780:	46bd      	mov	sp, r7
 8018782:	bd80      	pop	{r7, pc}

08018784 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8018784:	b580      	push	{r7, lr}
 8018786:	b084      	sub	sp, #16
 8018788:	af00      	add	r7, sp, #0
 801878a:	6078      	str	r0, [r7, #4]
 801878c:	460b      	mov	r3, r1
 801878e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	2b00      	cmp	r3, #0
 8018794:	d106      	bne.n	80187a4 <pbuf_realloc+0x20>
 8018796:	4b3a      	ldr	r3, [pc, #232]	; (8018880 <pbuf_realloc+0xfc>)
 8018798:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801879c:	4939      	ldr	r1, [pc, #228]	; (8018884 <pbuf_realloc+0x100>)
 801879e:	483a      	ldr	r0, [pc, #232]	; (8018888 <pbuf_realloc+0x104>)
 80187a0:	f00b fbae 	bl	8023f00 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	891b      	ldrh	r3, [r3, #8]
 80187a8:	887a      	ldrh	r2, [r7, #2]
 80187aa:	429a      	cmp	r2, r3
 80187ac:	d263      	bcs.n	8018876 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	891a      	ldrh	r2, [r3, #8]
 80187b2:	887b      	ldrh	r3, [r7, #2]
 80187b4:	1ad3      	subs	r3, r2, r3
 80187b6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80187b8:	887b      	ldrh	r3, [r7, #2]
 80187ba:	817b      	strh	r3, [r7, #10]
  q = p;
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80187c0:	e018      	b.n	80187f4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	895b      	ldrh	r3, [r3, #10]
 80187c6:	897a      	ldrh	r2, [r7, #10]
 80187c8:	1ad3      	subs	r3, r2, r3
 80187ca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	891a      	ldrh	r2, [r3, #8]
 80187d0:	893b      	ldrh	r3, [r7, #8]
 80187d2:	1ad3      	subs	r3, r2, r3
 80187d4:	b29a      	uxth	r2, r3
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d106      	bne.n	80187f4 <pbuf_realloc+0x70>
 80187e6:	4b26      	ldr	r3, [pc, #152]	; (8018880 <pbuf_realloc+0xfc>)
 80187e8:	f240 12af 	movw	r2, #431	; 0x1af
 80187ec:	4927      	ldr	r1, [pc, #156]	; (801888c <pbuf_realloc+0x108>)
 80187ee:	4826      	ldr	r0, [pc, #152]	; (8018888 <pbuf_realloc+0x104>)
 80187f0:	f00b fb86 	bl	8023f00 <iprintf>
  while (rem_len > q->len) {
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	895b      	ldrh	r3, [r3, #10]
 80187f8:	897a      	ldrh	r2, [r7, #10]
 80187fa:	429a      	cmp	r2, r3
 80187fc:	d8e1      	bhi.n	80187c2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	7b1b      	ldrb	r3, [r3, #12]
 8018802:	f003 030f 	and.w	r3, r3, #15
 8018806:	2b00      	cmp	r3, #0
 8018808:	d121      	bne.n	801884e <pbuf_realloc+0xca>
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	895b      	ldrh	r3, [r3, #10]
 801880e:	897a      	ldrh	r2, [r7, #10]
 8018810:	429a      	cmp	r2, r3
 8018812:	d01c      	beq.n	801884e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	7b5b      	ldrb	r3, [r3, #13]
 8018818:	f003 0302 	and.w	r3, r3, #2
 801881c:	2b00      	cmp	r3, #0
 801881e:	d116      	bne.n	801884e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	685a      	ldr	r2, [r3, #4]
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	1ad3      	subs	r3, r2, r3
 8018828:	b29a      	uxth	r2, r3
 801882a:	897b      	ldrh	r3, [r7, #10]
 801882c:	4413      	add	r3, r2
 801882e:	b29b      	uxth	r3, r3
 8018830:	4619      	mov	r1, r3
 8018832:	68f8      	ldr	r0, [r7, #12]
 8018834:	f7fe ff64 	bl	8017700 <mem_trim>
 8018838:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d106      	bne.n	801884e <pbuf_realloc+0xca>
 8018840:	4b0f      	ldr	r3, [pc, #60]	; (8018880 <pbuf_realloc+0xfc>)
 8018842:	f240 12bd 	movw	r2, #445	; 0x1bd
 8018846:	4912      	ldr	r1, [pc, #72]	; (8018890 <pbuf_realloc+0x10c>)
 8018848:	480f      	ldr	r0, [pc, #60]	; (8018888 <pbuf_realloc+0x104>)
 801884a:	f00b fb59 	bl	8023f00 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	897a      	ldrh	r2, [r7, #10]
 8018852:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	895a      	ldrh	r2, [r3, #10]
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	2b00      	cmp	r3, #0
 8018862:	d004      	beq.n	801886e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	4618      	mov	r0, r3
 801886a:	f000 f911 	bl	8018a90 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	2200      	movs	r2, #0
 8018872:	601a      	str	r2, [r3, #0]
 8018874:	e000      	b.n	8018878 <pbuf_realloc+0xf4>
    return;
 8018876:	bf00      	nop

}
 8018878:	3710      	adds	r7, #16
 801887a:	46bd      	mov	sp, r7
 801887c:	bd80      	pop	{r7, pc}
 801887e:	bf00      	nop
 8018880:	0802655c 	.word	0x0802655c
 8018884:	08026674 	.word	0x08026674
 8018888:	080265bc 	.word	0x080265bc
 801888c:	0802668c 	.word	0x0802668c
 8018890:	080266a4 	.word	0x080266a4

08018894 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8018894:	b580      	push	{r7, lr}
 8018896:	b086      	sub	sp, #24
 8018898:	af00      	add	r7, sp, #0
 801889a:	60f8      	str	r0, [r7, #12]
 801889c:	60b9      	str	r1, [r7, #8]
 801889e:	4613      	mov	r3, r2
 80188a0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d106      	bne.n	80188b6 <pbuf_add_header_impl+0x22>
 80188a8:	4b2b      	ldr	r3, [pc, #172]	; (8018958 <pbuf_add_header_impl+0xc4>)
 80188aa:	f240 12df 	movw	r2, #479	; 0x1df
 80188ae:	492b      	ldr	r1, [pc, #172]	; (801895c <pbuf_add_header_impl+0xc8>)
 80188b0:	482b      	ldr	r0, [pc, #172]	; (8018960 <pbuf_add_header_impl+0xcc>)
 80188b2:	f00b fb25 	bl	8023f00 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d003      	beq.n	80188c4 <pbuf_add_header_impl+0x30>
 80188bc:	68bb      	ldr	r3, [r7, #8]
 80188be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80188c2:	d301      	bcc.n	80188c8 <pbuf_add_header_impl+0x34>
    return 1;
 80188c4:	2301      	movs	r3, #1
 80188c6:	e043      	b.n	8018950 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80188c8:	68bb      	ldr	r3, [r7, #8]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d101      	bne.n	80188d2 <pbuf_add_header_impl+0x3e>
    return 0;
 80188ce:	2300      	movs	r3, #0
 80188d0:	e03e      	b.n	8018950 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80188d2:	68bb      	ldr	r3, [r7, #8]
 80188d4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	891a      	ldrh	r2, [r3, #8]
 80188da:	8a7b      	ldrh	r3, [r7, #18]
 80188dc:	4413      	add	r3, r2
 80188de:	b29b      	uxth	r3, r3
 80188e0:	8a7a      	ldrh	r2, [r7, #18]
 80188e2:	429a      	cmp	r2, r3
 80188e4:	d901      	bls.n	80188ea <pbuf_add_header_impl+0x56>
    return 1;
 80188e6:	2301      	movs	r3, #1
 80188e8:	e032      	b.n	8018950 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	7b1b      	ldrb	r3, [r3, #12]
 80188ee:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80188f0:	8a3b      	ldrh	r3, [r7, #16]
 80188f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d00c      	beq.n	8018914 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80188fa:	68fb      	ldr	r3, [r7, #12]
 80188fc:	685a      	ldr	r2, [r3, #4]
 80188fe:	68bb      	ldr	r3, [r7, #8]
 8018900:	425b      	negs	r3, r3
 8018902:	4413      	add	r3, r2
 8018904:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	3310      	adds	r3, #16
 801890a:	697a      	ldr	r2, [r7, #20]
 801890c:	429a      	cmp	r2, r3
 801890e:	d20d      	bcs.n	801892c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8018910:	2301      	movs	r3, #1
 8018912:	e01d      	b.n	8018950 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8018914:	79fb      	ldrb	r3, [r7, #7]
 8018916:	2b00      	cmp	r3, #0
 8018918:	d006      	beq.n	8018928 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	685a      	ldr	r2, [r3, #4]
 801891e:	68bb      	ldr	r3, [r7, #8]
 8018920:	425b      	negs	r3, r3
 8018922:	4413      	add	r3, r2
 8018924:	617b      	str	r3, [r7, #20]
 8018926:	e001      	b.n	801892c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8018928:	2301      	movs	r3, #1
 801892a:	e011      	b.n	8018950 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	697a      	ldr	r2, [r7, #20]
 8018930:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	895a      	ldrh	r2, [r3, #10]
 8018936:	8a7b      	ldrh	r3, [r7, #18]
 8018938:	4413      	add	r3, r2
 801893a:	b29a      	uxth	r2, r3
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	891a      	ldrh	r2, [r3, #8]
 8018944:	8a7b      	ldrh	r3, [r7, #18]
 8018946:	4413      	add	r3, r2
 8018948:	b29a      	uxth	r2, r3
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	811a      	strh	r2, [r3, #8]


  return 0;
 801894e:	2300      	movs	r3, #0
}
 8018950:	4618      	mov	r0, r3
 8018952:	3718      	adds	r7, #24
 8018954:	46bd      	mov	sp, r7
 8018956:	bd80      	pop	{r7, pc}
 8018958:	0802655c 	.word	0x0802655c
 801895c:	080266c0 	.word	0x080266c0
 8018960:	080265bc 	.word	0x080265bc

08018964 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8018964:	b580      	push	{r7, lr}
 8018966:	b082      	sub	sp, #8
 8018968:	af00      	add	r7, sp, #0
 801896a:	6078      	str	r0, [r7, #4]
 801896c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801896e:	2200      	movs	r2, #0
 8018970:	6839      	ldr	r1, [r7, #0]
 8018972:	6878      	ldr	r0, [r7, #4]
 8018974:	f7ff ff8e 	bl	8018894 <pbuf_add_header_impl>
 8018978:	4603      	mov	r3, r0
}
 801897a:	4618      	mov	r0, r3
 801897c:	3708      	adds	r7, #8
 801897e:	46bd      	mov	sp, r7
 8018980:	bd80      	pop	{r7, pc}
	...

08018984 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b084      	sub	sp, #16
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
 801898c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	2b00      	cmp	r3, #0
 8018992:	d106      	bne.n	80189a2 <pbuf_remove_header+0x1e>
 8018994:	4b20      	ldr	r3, [pc, #128]	; (8018a18 <pbuf_remove_header+0x94>)
 8018996:	f240 224b 	movw	r2, #587	; 0x24b
 801899a:	4920      	ldr	r1, [pc, #128]	; (8018a1c <pbuf_remove_header+0x98>)
 801899c:	4820      	ldr	r0, [pc, #128]	; (8018a20 <pbuf_remove_header+0x9c>)
 801899e:	f00b faaf 	bl	8023f00 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d003      	beq.n	80189b0 <pbuf_remove_header+0x2c>
 80189a8:	683b      	ldr	r3, [r7, #0]
 80189aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80189ae:	d301      	bcc.n	80189b4 <pbuf_remove_header+0x30>
    return 1;
 80189b0:	2301      	movs	r3, #1
 80189b2:	e02c      	b.n	8018a0e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80189b4:	683b      	ldr	r3, [r7, #0]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d101      	bne.n	80189be <pbuf_remove_header+0x3a>
    return 0;
 80189ba:	2300      	movs	r3, #0
 80189bc:	e027      	b.n	8018a0e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80189be:	683b      	ldr	r3, [r7, #0]
 80189c0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	895b      	ldrh	r3, [r3, #10]
 80189c6:	89fa      	ldrh	r2, [r7, #14]
 80189c8:	429a      	cmp	r2, r3
 80189ca:	d908      	bls.n	80189de <pbuf_remove_header+0x5a>
 80189cc:	4b12      	ldr	r3, [pc, #72]	; (8018a18 <pbuf_remove_header+0x94>)
 80189ce:	f240 2255 	movw	r2, #597	; 0x255
 80189d2:	4914      	ldr	r1, [pc, #80]	; (8018a24 <pbuf_remove_header+0xa0>)
 80189d4:	4812      	ldr	r0, [pc, #72]	; (8018a20 <pbuf_remove_header+0x9c>)
 80189d6:	f00b fa93 	bl	8023f00 <iprintf>
 80189da:	2301      	movs	r3, #1
 80189dc:	e017      	b.n	8018a0e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	685b      	ldr	r3, [r3, #4]
 80189e2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	685a      	ldr	r2, [r3, #4]
 80189e8:	683b      	ldr	r3, [r7, #0]
 80189ea:	441a      	add	r2, r3
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	895a      	ldrh	r2, [r3, #10]
 80189f4:	89fb      	ldrh	r3, [r7, #14]
 80189f6:	1ad3      	subs	r3, r2, r3
 80189f8:	b29a      	uxth	r2, r3
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	891a      	ldrh	r2, [r3, #8]
 8018a02:	89fb      	ldrh	r3, [r7, #14]
 8018a04:	1ad3      	subs	r3, r2, r3
 8018a06:	b29a      	uxth	r2, r3
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8018a0c:	2300      	movs	r3, #0
}
 8018a0e:	4618      	mov	r0, r3
 8018a10:	3710      	adds	r7, #16
 8018a12:	46bd      	mov	sp, r7
 8018a14:	bd80      	pop	{r7, pc}
 8018a16:	bf00      	nop
 8018a18:	0802655c 	.word	0x0802655c
 8018a1c:	080266c0 	.word	0x080266c0
 8018a20:	080265bc 	.word	0x080265bc
 8018a24:	080266cc 	.word	0x080266cc

08018a28 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8018a28:	b580      	push	{r7, lr}
 8018a2a:	b082      	sub	sp, #8
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	6078      	str	r0, [r7, #4]
 8018a30:	460b      	mov	r3, r1
 8018a32:	807b      	strh	r3, [r7, #2]
 8018a34:	4613      	mov	r3, r2
 8018a36:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8018a38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	da08      	bge.n	8018a52 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8018a40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018a44:	425b      	negs	r3, r3
 8018a46:	4619      	mov	r1, r3
 8018a48:	6878      	ldr	r0, [r7, #4]
 8018a4a:	f7ff ff9b 	bl	8018984 <pbuf_remove_header>
 8018a4e:	4603      	mov	r3, r0
 8018a50:	e007      	b.n	8018a62 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8018a52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018a56:	787a      	ldrb	r2, [r7, #1]
 8018a58:	4619      	mov	r1, r3
 8018a5a:	6878      	ldr	r0, [r7, #4]
 8018a5c:	f7ff ff1a 	bl	8018894 <pbuf_add_header_impl>
 8018a60:	4603      	mov	r3, r0
  }
}
 8018a62:	4618      	mov	r0, r3
 8018a64:	3708      	adds	r7, #8
 8018a66:	46bd      	mov	sp, r7
 8018a68:	bd80      	pop	{r7, pc}

08018a6a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8018a6a:	b580      	push	{r7, lr}
 8018a6c:	b082      	sub	sp, #8
 8018a6e:	af00      	add	r7, sp, #0
 8018a70:	6078      	str	r0, [r7, #4]
 8018a72:	460b      	mov	r3, r1
 8018a74:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8018a76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018a7a:	2201      	movs	r2, #1
 8018a7c:	4619      	mov	r1, r3
 8018a7e:	6878      	ldr	r0, [r7, #4]
 8018a80:	f7ff ffd2 	bl	8018a28 <pbuf_header_impl>
 8018a84:	4603      	mov	r3, r0
}
 8018a86:	4618      	mov	r0, r3
 8018a88:	3708      	adds	r7, #8
 8018a8a:	46bd      	mov	sp, r7
 8018a8c:	bd80      	pop	{r7, pc}
	...

08018a90 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b088      	sub	sp, #32
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d10b      	bne.n	8018ab6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d106      	bne.n	8018ab2 <pbuf_free+0x22>
 8018aa4:	4b3b      	ldr	r3, [pc, #236]	; (8018b94 <pbuf_free+0x104>)
 8018aa6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8018aaa:	493b      	ldr	r1, [pc, #236]	; (8018b98 <pbuf_free+0x108>)
 8018aac:	483b      	ldr	r0, [pc, #236]	; (8018b9c <pbuf_free+0x10c>)
 8018aae:	f00b fa27 	bl	8023f00 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	e069      	b.n	8018b8a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8018aba:	e062      	b.n	8018b82 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8018abc:	f009 ff8c 	bl	80229d8 <sys_arch_protect>
 8018ac0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	7b9b      	ldrb	r3, [r3, #14]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d106      	bne.n	8018ad8 <pbuf_free+0x48>
 8018aca:	4b32      	ldr	r3, [pc, #200]	; (8018b94 <pbuf_free+0x104>)
 8018acc:	f240 22f1 	movw	r2, #753	; 0x2f1
 8018ad0:	4933      	ldr	r1, [pc, #204]	; (8018ba0 <pbuf_free+0x110>)
 8018ad2:	4832      	ldr	r0, [pc, #200]	; (8018b9c <pbuf_free+0x10c>)
 8018ad4:	f00b fa14 	bl	8023f00 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	7b9b      	ldrb	r3, [r3, #14]
 8018adc:	3b01      	subs	r3, #1
 8018ade:	b2da      	uxtb	r2, r3
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	739a      	strb	r2, [r3, #14]
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	7b9b      	ldrb	r3, [r3, #14]
 8018ae8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8018aea:	69b8      	ldr	r0, [r7, #24]
 8018aec:	f009 ff82 	bl	80229f4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8018af0:	7dfb      	ldrb	r3, [r7, #23]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d143      	bne.n	8018b7e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	7b1b      	ldrb	r3, [r3, #12]
 8018b00:	f003 030f 	and.w	r3, r3, #15
 8018b04:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	7b5b      	ldrb	r3, [r3, #13]
 8018b0a:	f003 0302 	and.w	r3, r3, #2
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d011      	beq.n	8018b36 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8018b16:	68bb      	ldr	r3, [r7, #8]
 8018b18:	691b      	ldr	r3, [r3, #16]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d106      	bne.n	8018b2c <pbuf_free+0x9c>
 8018b1e:	4b1d      	ldr	r3, [pc, #116]	; (8018b94 <pbuf_free+0x104>)
 8018b20:	f240 22ff 	movw	r2, #767	; 0x2ff
 8018b24:	491f      	ldr	r1, [pc, #124]	; (8018ba4 <pbuf_free+0x114>)
 8018b26:	481d      	ldr	r0, [pc, #116]	; (8018b9c <pbuf_free+0x10c>)
 8018b28:	f00b f9ea 	bl	8023f00 <iprintf>
        pc->custom_free_function(p);
 8018b2c:	68bb      	ldr	r3, [r7, #8]
 8018b2e:	691b      	ldr	r3, [r3, #16]
 8018b30:	6878      	ldr	r0, [r7, #4]
 8018b32:	4798      	blx	r3
 8018b34:	e01d      	b.n	8018b72 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8018b36:	7bfb      	ldrb	r3, [r7, #15]
 8018b38:	2b02      	cmp	r3, #2
 8018b3a:	d104      	bne.n	8018b46 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8018b3c:	6879      	ldr	r1, [r7, #4]
 8018b3e:	200c      	movs	r0, #12
 8018b40:	f7ff f902 	bl	8017d48 <memp_free>
 8018b44:	e015      	b.n	8018b72 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8018b46:	7bfb      	ldrb	r3, [r7, #15]
 8018b48:	2b01      	cmp	r3, #1
 8018b4a:	d104      	bne.n	8018b56 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8018b4c:	6879      	ldr	r1, [r7, #4]
 8018b4e:	200b      	movs	r0, #11
 8018b50:	f7ff f8fa 	bl	8017d48 <memp_free>
 8018b54:	e00d      	b.n	8018b72 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8018b56:	7bfb      	ldrb	r3, [r7, #15]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d103      	bne.n	8018b64 <pbuf_free+0xd4>
          mem_free(p);
 8018b5c:	6878      	ldr	r0, [r7, #4]
 8018b5e:	f7fe fd3f 	bl	80175e0 <mem_free>
 8018b62:	e006      	b.n	8018b72 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8018b64:	4b0b      	ldr	r3, [pc, #44]	; (8018b94 <pbuf_free+0x104>)
 8018b66:	f240 320f 	movw	r2, #783	; 0x30f
 8018b6a:	490f      	ldr	r1, [pc, #60]	; (8018ba8 <pbuf_free+0x118>)
 8018b6c:	480b      	ldr	r0, [pc, #44]	; (8018b9c <pbuf_free+0x10c>)
 8018b6e:	f00b f9c7 	bl	8023f00 <iprintf>
        }
      }
      count++;
 8018b72:	7ffb      	ldrb	r3, [r7, #31]
 8018b74:	3301      	adds	r3, #1
 8018b76:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8018b78:	693b      	ldr	r3, [r7, #16]
 8018b7a:	607b      	str	r3, [r7, #4]
 8018b7c:	e001      	b.n	8018b82 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8018b7e:	2300      	movs	r3, #0
 8018b80:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d199      	bne.n	8018abc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8018b88:	7ffb      	ldrb	r3, [r7, #31]
}
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	3720      	adds	r7, #32
 8018b8e:	46bd      	mov	sp, r7
 8018b90:	bd80      	pop	{r7, pc}
 8018b92:	bf00      	nop
 8018b94:	0802655c 	.word	0x0802655c
 8018b98:	080266c0 	.word	0x080266c0
 8018b9c:	080265bc 	.word	0x080265bc
 8018ba0:	080266ec 	.word	0x080266ec
 8018ba4:	08026704 	.word	0x08026704
 8018ba8:	08026728 	.word	0x08026728

08018bac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8018bac:	b480      	push	{r7}
 8018bae:	b085      	sub	sp, #20
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8018bb8:	e005      	b.n	8018bc6 <pbuf_clen+0x1a>
    ++len;
 8018bba:	89fb      	ldrh	r3, [r7, #14]
 8018bbc:	3301      	adds	r3, #1
 8018bbe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d1f6      	bne.n	8018bba <pbuf_clen+0xe>
  }
  return len;
 8018bcc:	89fb      	ldrh	r3, [r7, #14]
}
 8018bce:	4618      	mov	r0, r3
 8018bd0:	3714      	adds	r7, #20
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd8:	4770      	bx	lr
	...

08018bdc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	b084      	sub	sp, #16
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d016      	beq.n	8018c18 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8018bea:	f009 fef5 	bl	80229d8 <sys_arch_protect>
 8018bee:	60f8      	str	r0, [r7, #12]
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	7b9b      	ldrb	r3, [r3, #14]
 8018bf4:	3301      	adds	r3, #1
 8018bf6:	b2da      	uxtb	r2, r3
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	739a      	strb	r2, [r3, #14]
 8018bfc:	68f8      	ldr	r0, [r7, #12]
 8018bfe:	f009 fef9 	bl	80229f4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	7b9b      	ldrb	r3, [r3, #14]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d106      	bne.n	8018c18 <pbuf_ref+0x3c>
 8018c0a:	4b05      	ldr	r3, [pc, #20]	; (8018c20 <pbuf_ref+0x44>)
 8018c0c:	f240 3242 	movw	r2, #834	; 0x342
 8018c10:	4904      	ldr	r1, [pc, #16]	; (8018c24 <pbuf_ref+0x48>)
 8018c12:	4805      	ldr	r0, [pc, #20]	; (8018c28 <pbuf_ref+0x4c>)
 8018c14:	f00b f974 	bl	8023f00 <iprintf>
  }
}
 8018c18:	bf00      	nop
 8018c1a:	3710      	adds	r7, #16
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	bd80      	pop	{r7, pc}
 8018c20:	0802655c 	.word	0x0802655c
 8018c24:	0802673c 	.word	0x0802673c
 8018c28:	080265bc 	.word	0x080265bc

08018c2c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b084      	sub	sp, #16
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
 8018c34:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d002      	beq.n	8018c42 <pbuf_cat+0x16>
 8018c3c:	683b      	ldr	r3, [r7, #0]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d107      	bne.n	8018c52 <pbuf_cat+0x26>
 8018c42:	4b20      	ldr	r3, [pc, #128]	; (8018cc4 <pbuf_cat+0x98>)
 8018c44:	f240 3259 	movw	r2, #857	; 0x359
 8018c48:	491f      	ldr	r1, [pc, #124]	; (8018cc8 <pbuf_cat+0x9c>)
 8018c4a:	4820      	ldr	r0, [pc, #128]	; (8018ccc <pbuf_cat+0xa0>)
 8018c4c:	f00b f958 	bl	8023f00 <iprintf>
 8018c50:	e034      	b.n	8018cbc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	60fb      	str	r3, [r7, #12]
 8018c56:	e00a      	b.n	8018c6e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	891a      	ldrh	r2, [r3, #8]
 8018c5c:	683b      	ldr	r3, [r7, #0]
 8018c5e:	891b      	ldrh	r3, [r3, #8]
 8018c60:	4413      	add	r3, r2
 8018c62:	b29a      	uxth	r2, r3
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	60fb      	str	r3, [r7, #12]
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d1f0      	bne.n	8018c58 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	891a      	ldrh	r2, [r3, #8]
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	895b      	ldrh	r3, [r3, #10]
 8018c7e:	429a      	cmp	r2, r3
 8018c80:	d006      	beq.n	8018c90 <pbuf_cat+0x64>
 8018c82:	4b10      	ldr	r3, [pc, #64]	; (8018cc4 <pbuf_cat+0x98>)
 8018c84:	f240 3262 	movw	r2, #866	; 0x362
 8018c88:	4911      	ldr	r1, [pc, #68]	; (8018cd0 <pbuf_cat+0xa4>)
 8018c8a:	4810      	ldr	r0, [pc, #64]	; (8018ccc <pbuf_cat+0xa0>)
 8018c8c:	f00b f938 	bl	8023f00 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d006      	beq.n	8018ca6 <pbuf_cat+0x7a>
 8018c98:	4b0a      	ldr	r3, [pc, #40]	; (8018cc4 <pbuf_cat+0x98>)
 8018c9a:	f240 3263 	movw	r2, #867	; 0x363
 8018c9e:	490d      	ldr	r1, [pc, #52]	; (8018cd4 <pbuf_cat+0xa8>)
 8018ca0:	480a      	ldr	r0, [pc, #40]	; (8018ccc <pbuf_cat+0xa0>)
 8018ca2:	f00b f92d 	bl	8023f00 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	891a      	ldrh	r2, [r3, #8]
 8018caa:	683b      	ldr	r3, [r7, #0]
 8018cac:	891b      	ldrh	r3, [r3, #8]
 8018cae:	4413      	add	r3, r2
 8018cb0:	b29a      	uxth	r2, r3
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8018cb6:	68fb      	ldr	r3, [r7, #12]
 8018cb8:	683a      	ldr	r2, [r7, #0]
 8018cba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8018cbc:	3710      	adds	r7, #16
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	bd80      	pop	{r7, pc}
 8018cc2:	bf00      	nop
 8018cc4:	0802655c 	.word	0x0802655c
 8018cc8:	08026750 	.word	0x08026750
 8018ccc:	080265bc 	.word	0x080265bc
 8018cd0:	08026788 	.word	0x08026788
 8018cd4:	080267b8 	.word	0x080267b8

08018cd8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8018cd8:	b580      	push	{r7, lr}
 8018cda:	b082      	sub	sp, #8
 8018cdc:	af00      	add	r7, sp, #0
 8018cde:	6078      	str	r0, [r7, #4]
 8018ce0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8018ce2:	6839      	ldr	r1, [r7, #0]
 8018ce4:	6878      	ldr	r0, [r7, #4]
 8018ce6:	f7ff ffa1 	bl	8018c2c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8018cea:	6838      	ldr	r0, [r7, #0]
 8018cec:	f7ff ff76 	bl	8018bdc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8018cf0:	bf00      	nop
 8018cf2:	3708      	adds	r7, #8
 8018cf4:	46bd      	mov	sp, r7
 8018cf6:	bd80      	pop	{r7, pc}

08018cf8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	b086      	sub	sp, #24
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	6078      	str	r0, [r7, #4]
 8018d00:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8018d02:	2300      	movs	r3, #0
 8018d04:	617b      	str	r3, [r7, #20]
 8018d06:	2300      	movs	r3, #0
 8018d08:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d008      	beq.n	8018d22 <pbuf_copy+0x2a>
 8018d10:	683b      	ldr	r3, [r7, #0]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d005      	beq.n	8018d22 <pbuf_copy+0x2a>
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	891a      	ldrh	r2, [r3, #8]
 8018d1a:	683b      	ldr	r3, [r7, #0]
 8018d1c:	891b      	ldrh	r3, [r3, #8]
 8018d1e:	429a      	cmp	r2, r3
 8018d20:	d209      	bcs.n	8018d36 <pbuf_copy+0x3e>
 8018d22:	4b57      	ldr	r3, [pc, #348]	; (8018e80 <pbuf_copy+0x188>)
 8018d24:	f240 32c9 	movw	r2, #969	; 0x3c9
 8018d28:	4956      	ldr	r1, [pc, #344]	; (8018e84 <pbuf_copy+0x18c>)
 8018d2a:	4857      	ldr	r0, [pc, #348]	; (8018e88 <pbuf_copy+0x190>)
 8018d2c:	f00b f8e8 	bl	8023f00 <iprintf>
 8018d30:	f06f 030f 	mvn.w	r3, #15
 8018d34:	e09f      	b.n	8018e76 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	895b      	ldrh	r3, [r3, #10]
 8018d3a:	461a      	mov	r2, r3
 8018d3c:	697b      	ldr	r3, [r7, #20]
 8018d3e:	1ad2      	subs	r2, r2, r3
 8018d40:	683b      	ldr	r3, [r7, #0]
 8018d42:	895b      	ldrh	r3, [r3, #10]
 8018d44:	4619      	mov	r1, r3
 8018d46:	693b      	ldr	r3, [r7, #16]
 8018d48:	1acb      	subs	r3, r1, r3
 8018d4a:	429a      	cmp	r2, r3
 8018d4c:	d306      	bcc.n	8018d5c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8018d4e:	683b      	ldr	r3, [r7, #0]
 8018d50:	895b      	ldrh	r3, [r3, #10]
 8018d52:	461a      	mov	r2, r3
 8018d54:	693b      	ldr	r3, [r7, #16]
 8018d56:	1ad3      	subs	r3, r2, r3
 8018d58:	60fb      	str	r3, [r7, #12]
 8018d5a:	e005      	b.n	8018d68 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	895b      	ldrh	r3, [r3, #10]
 8018d60:	461a      	mov	r2, r3
 8018d62:	697b      	ldr	r3, [r7, #20]
 8018d64:	1ad3      	subs	r3, r2, r3
 8018d66:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	685a      	ldr	r2, [r3, #4]
 8018d6c:	697b      	ldr	r3, [r7, #20]
 8018d6e:	18d0      	adds	r0, r2, r3
 8018d70:	683b      	ldr	r3, [r7, #0]
 8018d72:	685a      	ldr	r2, [r3, #4]
 8018d74:	693b      	ldr	r3, [r7, #16]
 8018d76:	4413      	add	r3, r2
 8018d78:	68fa      	ldr	r2, [r7, #12]
 8018d7a:	4619      	mov	r1, r3
 8018d7c:	f00a ffb0 	bl	8023ce0 <memcpy>
    offset_to += len;
 8018d80:	697a      	ldr	r2, [r7, #20]
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	4413      	add	r3, r2
 8018d86:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8018d88:	693a      	ldr	r2, [r7, #16]
 8018d8a:	68fb      	ldr	r3, [r7, #12]
 8018d8c:	4413      	add	r3, r2
 8018d8e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	895b      	ldrh	r3, [r3, #10]
 8018d94:	461a      	mov	r2, r3
 8018d96:	697b      	ldr	r3, [r7, #20]
 8018d98:	4293      	cmp	r3, r2
 8018d9a:	d906      	bls.n	8018daa <pbuf_copy+0xb2>
 8018d9c:	4b38      	ldr	r3, [pc, #224]	; (8018e80 <pbuf_copy+0x188>)
 8018d9e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8018da2:	493a      	ldr	r1, [pc, #232]	; (8018e8c <pbuf_copy+0x194>)
 8018da4:	4838      	ldr	r0, [pc, #224]	; (8018e88 <pbuf_copy+0x190>)
 8018da6:	f00b f8ab 	bl	8023f00 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8018daa:	683b      	ldr	r3, [r7, #0]
 8018dac:	895b      	ldrh	r3, [r3, #10]
 8018dae:	461a      	mov	r2, r3
 8018db0:	693b      	ldr	r3, [r7, #16]
 8018db2:	4293      	cmp	r3, r2
 8018db4:	d906      	bls.n	8018dc4 <pbuf_copy+0xcc>
 8018db6:	4b32      	ldr	r3, [pc, #200]	; (8018e80 <pbuf_copy+0x188>)
 8018db8:	f240 32da 	movw	r2, #986	; 0x3da
 8018dbc:	4934      	ldr	r1, [pc, #208]	; (8018e90 <pbuf_copy+0x198>)
 8018dbe:	4832      	ldr	r0, [pc, #200]	; (8018e88 <pbuf_copy+0x190>)
 8018dc0:	f00b f89e 	bl	8023f00 <iprintf>
    if (offset_from >= p_from->len) {
 8018dc4:	683b      	ldr	r3, [r7, #0]
 8018dc6:	895b      	ldrh	r3, [r3, #10]
 8018dc8:	461a      	mov	r2, r3
 8018dca:	693b      	ldr	r3, [r7, #16]
 8018dcc:	4293      	cmp	r3, r2
 8018dce:	d304      	bcc.n	8018dda <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	895b      	ldrh	r3, [r3, #10]
 8018dde:	461a      	mov	r2, r3
 8018de0:	697b      	ldr	r3, [r7, #20]
 8018de2:	4293      	cmp	r3, r2
 8018de4:	d114      	bne.n	8018e10 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8018de6:	2300      	movs	r3, #0
 8018de8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d10c      	bne.n	8018e10 <pbuf_copy+0x118>
 8018df6:	683b      	ldr	r3, [r7, #0]
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d009      	beq.n	8018e10 <pbuf_copy+0x118>
 8018dfc:	4b20      	ldr	r3, [pc, #128]	; (8018e80 <pbuf_copy+0x188>)
 8018dfe:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8018e02:	4924      	ldr	r1, [pc, #144]	; (8018e94 <pbuf_copy+0x19c>)
 8018e04:	4820      	ldr	r0, [pc, #128]	; (8018e88 <pbuf_copy+0x190>)
 8018e06:	f00b f87b 	bl	8023f00 <iprintf>
 8018e0a:	f06f 030f 	mvn.w	r3, #15
 8018e0e:	e032      	b.n	8018e76 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8018e10:	683b      	ldr	r3, [r7, #0]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d013      	beq.n	8018e3e <pbuf_copy+0x146>
 8018e16:	683b      	ldr	r3, [r7, #0]
 8018e18:	895a      	ldrh	r2, [r3, #10]
 8018e1a:	683b      	ldr	r3, [r7, #0]
 8018e1c:	891b      	ldrh	r3, [r3, #8]
 8018e1e:	429a      	cmp	r2, r3
 8018e20:	d10d      	bne.n	8018e3e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018e22:	683b      	ldr	r3, [r7, #0]
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d009      	beq.n	8018e3e <pbuf_copy+0x146>
 8018e2a:	4b15      	ldr	r3, [pc, #84]	; (8018e80 <pbuf_copy+0x188>)
 8018e2c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8018e30:	4919      	ldr	r1, [pc, #100]	; (8018e98 <pbuf_copy+0x1a0>)
 8018e32:	4815      	ldr	r0, [pc, #84]	; (8018e88 <pbuf_copy+0x190>)
 8018e34:	f00b f864 	bl	8023f00 <iprintf>
 8018e38:	f06f 0305 	mvn.w	r3, #5
 8018e3c:	e01b      	b.n	8018e76 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d013      	beq.n	8018e6c <pbuf_copy+0x174>
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	895a      	ldrh	r2, [r3, #10]
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	891b      	ldrh	r3, [r3, #8]
 8018e4c:	429a      	cmp	r2, r3
 8018e4e:	d10d      	bne.n	8018e6c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d009      	beq.n	8018e6c <pbuf_copy+0x174>
 8018e58:	4b09      	ldr	r3, [pc, #36]	; (8018e80 <pbuf_copy+0x188>)
 8018e5a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8018e5e:	490e      	ldr	r1, [pc, #56]	; (8018e98 <pbuf_copy+0x1a0>)
 8018e60:	4809      	ldr	r0, [pc, #36]	; (8018e88 <pbuf_copy+0x190>)
 8018e62:	f00b f84d 	bl	8023f00 <iprintf>
 8018e66:	f06f 0305 	mvn.w	r3, #5
 8018e6a:	e004      	b.n	8018e76 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8018e6c:	683b      	ldr	r3, [r7, #0]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	f47f af61 	bne.w	8018d36 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8018e74:	2300      	movs	r3, #0
}
 8018e76:	4618      	mov	r0, r3
 8018e78:	3718      	adds	r7, #24
 8018e7a:	46bd      	mov	sp, r7
 8018e7c:	bd80      	pop	{r7, pc}
 8018e7e:	bf00      	nop
 8018e80:	0802655c 	.word	0x0802655c
 8018e84:	08026804 	.word	0x08026804
 8018e88:	080265bc 	.word	0x080265bc
 8018e8c:	08026834 	.word	0x08026834
 8018e90:	0802684c 	.word	0x0802684c
 8018e94:	08026868 	.word	0x08026868
 8018e98:	08026878 	.word	0x08026878

08018e9c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	b088      	sub	sp, #32
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	60f8      	str	r0, [r7, #12]
 8018ea4:	60b9      	str	r1, [r7, #8]
 8018ea6:	4611      	mov	r1, r2
 8018ea8:	461a      	mov	r2, r3
 8018eaa:	460b      	mov	r3, r1
 8018eac:	80fb      	strh	r3, [r7, #6]
 8018eae:	4613      	mov	r3, r2
 8018eb0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8018eb2:	2300      	movs	r3, #0
 8018eb4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8018eb6:	2300      	movs	r3, #0
 8018eb8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d108      	bne.n	8018ed2 <pbuf_copy_partial+0x36>
 8018ec0:	4b2b      	ldr	r3, [pc, #172]	; (8018f70 <pbuf_copy_partial+0xd4>)
 8018ec2:	f240 420a 	movw	r2, #1034	; 0x40a
 8018ec6:	492b      	ldr	r1, [pc, #172]	; (8018f74 <pbuf_copy_partial+0xd8>)
 8018ec8:	482b      	ldr	r0, [pc, #172]	; (8018f78 <pbuf_copy_partial+0xdc>)
 8018eca:	f00b f819 	bl	8023f00 <iprintf>
 8018ece:	2300      	movs	r3, #0
 8018ed0:	e04a      	b.n	8018f68 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8018ed2:	68bb      	ldr	r3, [r7, #8]
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d108      	bne.n	8018eea <pbuf_copy_partial+0x4e>
 8018ed8:	4b25      	ldr	r3, [pc, #148]	; (8018f70 <pbuf_copy_partial+0xd4>)
 8018eda:	f240 420b 	movw	r2, #1035	; 0x40b
 8018ede:	4927      	ldr	r1, [pc, #156]	; (8018f7c <pbuf_copy_partial+0xe0>)
 8018ee0:	4825      	ldr	r0, [pc, #148]	; (8018f78 <pbuf_copy_partial+0xdc>)
 8018ee2:	f00b f80d 	bl	8023f00 <iprintf>
 8018ee6:	2300      	movs	r3, #0
 8018ee8:	e03e      	b.n	8018f68 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	61fb      	str	r3, [r7, #28]
 8018eee:	e034      	b.n	8018f5a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8018ef0:	88bb      	ldrh	r3, [r7, #4]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d00a      	beq.n	8018f0c <pbuf_copy_partial+0x70>
 8018ef6:	69fb      	ldr	r3, [r7, #28]
 8018ef8:	895b      	ldrh	r3, [r3, #10]
 8018efa:	88ba      	ldrh	r2, [r7, #4]
 8018efc:	429a      	cmp	r2, r3
 8018efe:	d305      	bcc.n	8018f0c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8018f00:	69fb      	ldr	r3, [r7, #28]
 8018f02:	895b      	ldrh	r3, [r3, #10]
 8018f04:	88ba      	ldrh	r2, [r7, #4]
 8018f06:	1ad3      	subs	r3, r2, r3
 8018f08:	80bb      	strh	r3, [r7, #4]
 8018f0a:	e023      	b.n	8018f54 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8018f0c:	69fb      	ldr	r3, [r7, #28]
 8018f0e:	895a      	ldrh	r2, [r3, #10]
 8018f10:	88bb      	ldrh	r3, [r7, #4]
 8018f12:	1ad3      	subs	r3, r2, r3
 8018f14:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8018f16:	8b3a      	ldrh	r2, [r7, #24]
 8018f18:	88fb      	ldrh	r3, [r7, #6]
 8018f1a:	429a      	cmp	r2, r3
 8018f1c:	d901      	bls.n	8018f22 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8018f1e:	88fb      	ldrh	r3, [r7, #6]
 8018f20:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8018f22:	8b7b      	ldrh	r3, [r7, #26]
 8018f24:	68ba      	ldr	r2, [r7, #8]
 8018f26:	18d0      	adds	r0, r2, r3
 8018f28:	69fb      	ldr	r3, [r7, #28]
 8018f2a:	685a      	ldr	r2, [r3, #4]
 8018f2c:	88bb      	ldrh	r3, [r7, #4]
 8018f2e:	4413      	add	r3, r2
 8018f30:	8b3a      	ldrh	r2, [r7, #24]
 8018f32:	4619      	mov	r1, r3
 8018f34:	f00a fed4 	bl	8023ce0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8018f38:	8afa      	ldrh	r2, [r7, #22]
 8018f3a:	8b3b      	ldrh	r3, [r7, #24]
 8018f3c:	4413      	add	r3, r2
 8018f3e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8018f40:	8b7a      	ldrh	r2, [r7, #26]
 8018f42:	8b3b      	ldrh	r3, [r7, #24]
 8018f44:	4413      	add	r3, r2
 8018f46:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8018f48:	88fa      	ldrh	r2, [r7, #6]
 8018f4a:	8b3b      	ldrh	r3, [r7, #24]
 8018f4c:	1ad3      	subs	r3, r2, r3
 8018f4e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8018f50:	2300      	movs	r3, #0
 8018f52:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018f54:	69fb      	ldr	r3, [r7, #28]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	61fb      	str	r3, [r7, #28]
 8018f5a:	88fb      	ldrh	r3, [r7, #6]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d002      	beq.n	8018f66 <pbuf_copy_partial+0xca>
 8018f60:	69fb      	ldr	r3, [r7, #28]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d1c4      	bne.n	8018ef0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8018f66:	8afb      	ldrh	r3, [r7, #22]
}
 8018f68:	4618      	mov	r0, r3
 8018f6a:	3720      	adds	r7, #32
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	bd80      	pop	{r7, pc}
 8018f70:	0802655c 	.word	0x0802655c
 8018f74:	080268a4 	.word	0x080268a4
 8018f78:	080265bc 	.word	0x080265bc
 8018f7c:	080268c4 	.word	0x080268c4

08018f80 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b084      	sub	sp, #16
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	4603      	mov	r3, r0
 8018f88:	603a      	str	r2, [r7, #0]
 8018f8a:	71fb      	strb	r3, [r7, #7]
 8018f8c:	460b      	mov	r3, r1
 8018f8e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8018f90:	683b      	ldr	r3, [r7, #0]
 8018f92:	8919      	ldrh	r1, [r3, #8]
 8018f94:	88ba      	ldrh	r2, [r7, #4]
 8018f96:	79fb      	ldrb	r3, [r7, #7]
 8018f98:	4618      	mov	r0, r3
 8018f9a:	f7ff fa95 	bl	80184c8 <pbuf_alloc>
 8018f9e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d101      	bne.n	8018faa <pbuf_clone+0x2a>
    return NULL;
 8018fa6:	2300      	movs	r3, #0
 8018fa8:	e011      	b.n	8018fce <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8018faa:	6839      	ldr	r1, [r7, #0]
 8018fac:	68f8      	ldr	r0, [r7, #12]
 8018fae:	f7ff fea3 	bl	8018cf8 <pbuf_copy>
 8018fb2:	4603      	mov	r3, r0
 8018fb4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8018fb6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d006      	beq.n	8018fcc <pbuf_clone+0x4c>
 8018fbe:	4b06      	ldr	r3, [pc, #24]	; (8018fd8 <pbuf_clone+0x58>)
 8018fc0:	f240 5224 	movw	r2, #1316	; 0x524
 8018fc4:	4905      	ldr	r1, [pc, #20]	; (8018fdc <pbuf_clone+0x5c>)
 8018fc6:	4806      	ldr	r0, [pc, #24]	; (8018fe0 <pbuf_clone+0x60>)
 8018fc8:	f00a ff9a 	bl	8023f00 <iprintf>
  return q;
 8018fcc:	68fb      	ldr	r3, [r7, #12]
}
 8018fce:	4618      	mov	r0, r3
 8018fd0:	3710      	adds	r7, #16
 8018fd2:	46bd      	mov	sp, r7
 8018fd4:	bd80      	pop	{r7, pc}
 8018fd6:	bf00      	nop
 8018fd8:	0802655c 	.word	0x0802655c
 8018fdc:	080269d0 	.word	0x080269d0
 8018fe0:	080265bc 	.word	0x080265bc

08018fe4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018fe8:	f00a ffa2 	bl	8023f30 <rand>
 8018fec:	4603      	mov	r3, r0
 8018fee:	b29b      	uxth	r3, r3
 8018ff0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018ff4:	b29b      	uxth	r3, r3
 8018ff6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018ffa:	b29a      	uxth	r2, r3
 8018ffc:	4b01      	ldr	r3, [pc, #4]	; (8019004 <tcp_init+0x20>)
 8018ffe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019000:	bf00      	nop
 8019002:	bd80      	pop	{r7, pc}
 8019004:	20000030 	.word	0x20000030

08019008 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8019008:	b580      	push	{r7, lr}
 801900a:	b082      	sub	sp, #8
 801900c:	af00      	add	r7, sp, #0
 801900e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	7d1b      	ldrb	r3, [r3, #20]
 8019014:	2b01      	cmp	r3, #1
 8019016:	d105      	bne.n	8019024 <tcp_free+0x1c>
 8019018:	4b06      	ldr	r3, [pc, #24]	; (8019034 <tcp_free+0x2c>)
 801901a:	22d4      	movs	r2, #212	; 0xd4
 801901c:	4906      	ldr	r1, [pc, #24]	; (8019038 <tcp_free+0x30>)
 801901e:	4807      	ldr	r0, [pc, #28]	; (801903c <tcp_free+0x34>)
 8019020:	f00a ff6e 	bl	8023f00 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8019024:	6879      	ldr	r1, [r7, #4]
 8019026:	2001      	movs	r0, #1
 8019028:	f7fe fe8e 	bl	8017d48 <memp_free>
}
 801902c:	bf00      	nop
 801902e:	3708      	adds	r7, #8
 8019030:	46bd      	mov	sp, r7
 8019032:	bd80      	pop	{r7, pc}
 8019034:	08026a5c 	.word	0x08026a5c
 8019038:	08026a8c 	.word	0x08026a8c
 801903c:	08026aa0 	.word	0x08026aa0

08019040 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8019040:	b580      	push	{r7, lr}
 8019042:	b082      	sub	sp, #8
 8019044:	af00      	add	r7, sp, #0
 8019046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	7d1b      	ldrb	r3, [r3, #20]
 801904c:	2b01      	cmp	r3, #1
 801904e:	d105      	bne.n	801905c <tcp_free_listen+0x1c>
 8019050:	4b06      	ldr	r3, [pc, #24]	; (801906c <tcp_free_listen+0x2c>)
 8019052:	22df      	movs	r2, #223	; 0xdf
 8019054:	4906      	ldr	r1, [pc, #24]	; (8019070 <tcp_free_listen+0x30>)
 8019056:	4807      	ldr	r0, [pc, #28]	; (8019074 <tcp_free_listen+0x34>)
 8019058:	f00a ff52 	bl	8023f00 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801905c:	6879      	ldr	r1, [r7, #4]
 801905e:	2002      	movs	r0, #2
 8019060:	f7fe fe72 	bl	8017d48 <memp_free>
}
 8019064:	bf00      	nop
 8019066:	3708      	adds	r7, #8
 8019068:	46bd      	mov	sp, r7
 801906a:	bd80      	pop	{r7, pc}
 801906c:	08026a5c 	.word	0x08026a5c
 8019070:	08026ac8 	.word	0x08026ac8
 8019074:	08026aa0 	.word	0x08026aa0

08019078 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8019078:	b580      	push	{r7, lr}
 801907a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801907c:	f001 f9be 	bl	801a3fc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8019080:	4b07      	ldr	r3, [pc, #28]	; (80190a0 <tcp_tmr+0x28>)
 8019082:	781b      	ldrb	r3, [r3, #0]
 8019084:	3301      	adds	r3, #1
 8019086:	b2da      	uxtb	r2, r3
 8019088:	4b05      	ldr	r3, [pc, #20]	; (80190a0 <tcp_tmr+0x28>)
 801908a:	701a      	strb	r2, [r3, #0]
 801908c:	4b04      	ldr	r3, [pc, #16]	; (80190a0 <tcp_tmr+0x28>)
 801908e:	781b      	ldrb	r3, [r3, #0]
 8019090:	f003 0301 	and.w	r3, r3, #1
 8019094:	2b00      	cmp	r3, #0
 8019096:	d001      	beq.n	801909c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8019098:	f000 fe70 	bl	8019d7c <tcp_slowtmr>
  }
}
 801909c:	bf00      	nop
 801909e:	bd80      	pop	{r7, pc}
 80190a0:	2000bfc1 	.word	0x2000bfc1

080190a4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b084      	sub	sp, #16
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	6078      	str	r0, [r7, #4]
 80190ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80190ae:	683b      	ldr	r3, [r7, #0]
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d105      	bne.n	80190c0 <tcp_remove_listener+0x1c>
 80190b4:	4b0d      	ldr	r3, [pc, #52]	; (80190ec <tcp_remove_listener+0x48>)
 80190b6:	22ff      	movs	r2, #255	; 0xff
 80190b8:	490d      	ldr	r1, [pc, #52]	; (80190f0 <tcp_remove_listener+0x4c>)
 80190ba:	480e      	ldr	r0, [pc, #56]	; (80190f4 <tcp_remove_listener+0x50>)
 80190bc:	f00a ff20 	bl	8023f00 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	60fb      	str	r3, [r7, #12]
 80190c4:	e00a      	b.n	80190dc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80190ca:	683a      	ldr	r2, [r7, #0]
 80190cc:	429a      	cmp	r2, r3
 80190ce:	d102      	bne.n	80190d6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	2200      	movs	r2, #0
 80190d4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	68db      	ldr	r3, [r3, #12]
 80190da:	60fb      	str	r3, [r7, #12]
 80190dc:	68fb      	ldr	r3, [r7, #12]
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d1f1      	bne.n	80190c6 <tcp_remove_listener+0x22>
    }
  }
}
 80190e2:	bf00      	nop
 80190e4:	bf00      	nop
 80190e6:	3710      	adds	r7, #16
 80190e8:	46bd      	mov	sp, r7
 80190ea:	bd80      	pop	{r7, pc}
 80190ec:	08026a5c 	.word	0x08026a5c
 80190f0:	08026ae4 	.word	0x08026ae4
 80190f4:	08026aa0 	.word	0x08026aa0

080190f8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b084      	sub	sp, #16
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d106      	bne.n	8019114 <tcp_listen_closed+0x1c>
 8019106:	4b14      	ldr	r3, [pc, #80]	; (8019158 <tcp_listen_closed+0x60>)
 8019108:	f240 1211 	movw	r2, #273	; 0x111
 801910c:	4913      	ldr	r1, [pc, #76]	; (801915c <tcp_listen_closed+0x64>)
 801910e:	4814      	ldr	r0, [pc, #80]	; (8019160 <tcp_listen_closed+0x68>)
 8019110:	f00a fef6 	bl	8023f00 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	7d1b      	ldrb	r3, [r3, #20]
 8019118:	2b01      	cmp	r3, #1
 801911a:	d006      	beq.n	801912a <tcp_listen_closed+0x32>
 801911c:	4b0e      	ldr	r3, [pc, #56]	; (8019158 <tcp_listen_closed+0x60>)
 801911e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8019122:	4910      	ldr	r1, [pc, #64]	; (8019164 <tcp_listen_closed+0x6c>)
 8019124:	480e      	ldr	r0, [pc, #56]	; (8019160 <tcp_listen_closed+0x68>)
 8019126:	f00a feeb 	bl	8023f00 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801912a:	2301      	movs	r3, #1
 801912c:	60fb      	str	r3, [r7, #12]
 801912e:	e00b      	b.n	8019148 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8019130:	4a0d      	ldr	r2, [pc, #52]	; (8019168 <tcp_listen_closed+0x70>)
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	6879      	ldr	r1, [r7, #4]
 801913c:	4618      	mov	r0, r3
 801913e:	f7ff ffb1 	bl	80190a4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	3301      	adds	r3, #1
 8019146:	60fb      	str	r3, [r7, #12]
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	2b03      	cmp	r3, #3
 801914c:	d9f0      	bls.n	8019130 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801914e:	bf00      	nop
 8019150:	bf00      	nop
 8019152:	3710      	adds	r7, #16
 8019154:	46bd      	mov	sp, r7
 8019156:	bd80      	pop	{r7, pc}
 8019158:	08026a5c 	.word	0x08026a5c
 801915c:	08026b0c 	.word	0x08026b0c
 8019160:	08026aa0 	.word	0x08026aa0
 8019164:	08026b18 	.word	0x08026b18
 8019168:	08028ad0 	.word	0x08028ad0

0801916c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801916c:	b5b0      	push	{r4, r5, r7, lr}
 801916e:	b088      	sub	sp, #32
 8019170:	af04      	add	r7, sp, #16
 8019172:	6078      	str	r0, [r7, #4]
 8019174:	460b      	mov	r3, r1
 8019176:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d106      	bne.n	801918c <tcp_close_shutdown+0x20>
 801917e:	4b63      	ldr	r3, [pc, #396]	; (801930c <tcp_close_shutdown+0x1a0>)
 8019180:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8019184:	4962      	ldr	r1, [pc, #392]	; (8019310 <tcp_close_shutdown+0x1a4>)
 8019186:	4863      	ldr	r0, [pc, #396]	; (8019314 <tcp_close_shutdown+0x1a8>)
 8019188:	f00a feba 	bl	8023f00 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801918c:	78fb      	ldrb	r3, [r7, #3]
 801918e:	2b00      	cmp	r3, #0
 8019190:	d066      	beq.n	8019260 <tcp_close_shutdown+0xf4>
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	7d1b      	ldrb	r3, [r3, #20]
 8019196:	2b04      	cmp	r3, #4
 8019198:	d003      	beq.n	80191a2 <tcp_close_shutdown+0x36>
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	7d1b      	ldrb	r3, [r3, #20]
 801919e:	2b07      	cmp	r3, #7
 80191a0:	d15e      	bne.n	8019260 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d104      	bne.n	80191b4 <tcp_close_shutdown+0x48>
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80191ae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80191b2:	d055      	beq.n	8019260 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	8b5b      	ldrh	r3, [r3, #26]
 80191b8:	f003 0310 	and.w	r3, r3, #16
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d106      	bne.n	80191ce <tcp_close_shutdown+0x62>
 80191c0:	4b52      	ldr	r3, [pc, #328]	; (801930c <tcp_close_shutdown+0x1a0>)
 80191c2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80191c6:	4954      	ldr	r1, [pc, #336]	; (8019318 <tcp_close_shutdown+0x1ac>)
 80191c8:	4852      	ldr	r0, [pc, #328]	; (8019314 <tcp_close_shutdown+0x1a8>)
 80191ca:	f00a fe99 	bl	8023f00 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80191d6:	687d      	ldr	r5, [r7, #4]
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	3304      	adds	r3, #4
 80191dc:	687a      	ldr	r2, [r7, #4]
 80191de:	8ad2      	ldrh	r2, [r2, #22]
 80191e0:	6879      	ldr	r1, [r7, #4]
 80191e2:	8b09      	ldrh	r1, [r1, #24]
 80191e4:	9102      	str	r1, [sp, #8]
 80191e6:	9201      	str	r2, [sp, #4]
 80191e8:	9300      	str	r3, [sp, #0]
 80191ea:	462b      	mov	r3, r5
 80191ec:	4622      	mov	r2, r4
 80191ee:	4601      	mov	r1, r0
 80191f0:	6878      	ldr	r0, [r7, #4]
 80191f2:	f005 fed3 	bl	801ef9c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80191f6:	6878      	ldr	r0, [r7, #4]
 80191f8:	f001 fcb0 	bl	801ab5c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80191fc:	4b47      	ldr	r3, [pc, #284]	; (801931c <tcp_close_shutdown+0x1b0>)
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	687a      	ldr	r2, [r7, #4]
 8019202:	429a      	cmp	r2, r3
 8019204:	d105      	bne.n	8019212 <tcp_close_shutdown+0xa6>
 8019206:	4b45      	ldr	r3, [pc, #276]	; (801931c <tcp_close_shutdown+0x1b0>)
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	68db      	ldr	r3, [r3, #12]
 801920c:	4a43      	ldr	r2, [pc, #268]	; (801931c <tcp_close_shutdown+0x1b0>)
 801920e:	6013      	str	r3, [r2, #0]
 8019210:	e013      	b.n	801923a <tcp_close_shutdown+0xce>
 8019212:	4b42      	ldr	r3, [pc, #264]	; (801931c <tcp_close_shutdown+0x1b0>)
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	60fb      	str	r3, [r7, #12]
 8019218:	e00c      	b.n	8019234 <tcp_close_shutdown+0xc8>
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	68db      	ldr	r3, [r3, #12]
 801921e:	687a      	ldr	r2, [r7, #4]
 8019220:	429a      	cmp	r2, r3
 8019222:	d104      	bne.n	801922e <tcp_close_shutdown+0xc2>
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	68da      	ldr	r2, [r3, #12]
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	60da      	str	r2, [r3, #12]
 801922c:	e005      	b.n	801923a <tcp_close_shutdown+0xce>
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	68db      	ldr	r3, [r3, #12]
 8019232:	60fb      	str	r3, [r7, #12]
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	2b00      	cmp	r3, #0
 8019238:	d1ef      	bne.n	801921a <tcp_close_shutdown+0xae>
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	2200      	movs	r2, #0
 801923e:	60da      	str	r2, [r3, #12]
 8019240:	4b37      	ldr	r3, [pc, #220]	; (8019320 <tcp_close_shutdown+0x1b4>)
 8019242:	2201      	movs	r2, #1
 8019244:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8019246:	4b37      	ldr	r3, [pc, #220]	; (8019324 <tcp_close_shutdown+0x1b8>)
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	687a      	ldr	r2, [r7, #4]
 801924c:	429a      	cmp	r2, r3
 801924e:	d102      	bne.n	8019256 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8019250:	f004 f948 	bl	801d4e4 <tcp_trigger_input_pcb_close>
 8019254:	e002      	b.n	801925c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8019256:	6878      	ldr	r0, [r7, #4]
 8019258:	f7ff fed6 	bl	8019008 <tcp_free>
      }
      return ERR_OK;
 801925c:	2300      	movs	r3, #0
 801925e:	e050      	b.n	8019302 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	7d1b      	ldrb	r3, [r3, #20]
 8019264:	2b02      	cmp	r3, #2
 8019266:	d03b      	beq.n	80192e0 <tcp_close_shutdown+0x174>
 8019268:	2b02      	cmp	r3, #2
 801926a:	dc44      	bgt.n	80192f6 <tcp_close_shutdown+0x18a>
 801926c:	2b00      	cmp	r3, #0
 801926e:	d002      	beq.n	8019276 <tcp_close_shutdown+0x10a>
 8019270:	2b01      	cmp	r3, #1
 8019272:	d02a      	beq.n	80192ca <tcp_close_shutdown+0x15e>
 8019274:	e03f      	b.n	80192f6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	8adb      	ldrh	r3, [r3, #22]
 801927a:	2b00      	cmp	r3, #0
 801927c:	d021      	beq.n	80192c2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801927e:	4b2a      	ldr	r3, [pc, #168]	; (8019328 <tcp_close_shutdown+0x1bc>)
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	687a      	ldr	r2, [r7, #4]
 8019284:	429a      	cmp	r2, r3
 8019286:	d105      	bne.n	8019294 <tcp_close_shutdown+0x128>
 8019288:	4b27      	ldr	r3, [pc, #156]	; (8019328 <tcp_close_shutdown+0x1bc>)
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	68db      	ldr	r3, [r3, #12]
 801928e:	4a26      	ldr	r2, [pc, #152]	; (8019328 <tcp_close_shutdown+0x1bc>)
 8019290:	6013      	str	r3, [r2, #0]
 8019292:	e013      	b.n	80192bc <tcp_close_shutdown+0x150>
 8019294:	4b24      	ldr	r3, [pc, #144]	; (8019328 <tcp_close_shutdown+0x1bc>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	60bb      	str	r3, [r7, #8]
 801929a:	e00c      	b.n	80192b6 <tcp_close_shutdown+0x14a>
 801929c:	68bb      	ldr	r3, [r7, #8]
 801929e:	68db      	ldr	r3, [r3, #12]
 80192a0:	687a      	ldr	r2, [r7, #4]
 80192a2:	429a      	cmp	r2, r3
 80192a4:	d104      	bne.n	80192b0 <tcp_close_shutdown+0x144>
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	68da      	ldr	r2, [r3, #12]
 80192aa:	68bb      	ldr	r3, [r7, #8]
 80192ac:	60da      	str	r2, [r3, #12]
 80192ae:	e005      	b.n	80192bc <tcp_close_shutdown+0x150>
 80192b0:	68bb      	ldr	r3, [r7, #8]
 80192b2:	68db      	ldr	r3, [r3, #12]
 80192b4:	60bb      	str	r3, [r7, #8]
 80192b6:	68bb      	ldr	r3, [r7, #8]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d1ef      	bne.n	801929c <tcp_close_shutdown+0x130>
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	2200      	movs	r2, #0
 80192c0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80192c2:	6878      	ldr	r0, [r7, #4]
 80192c4:	f7ff fea0 	bl	8019008 <tcp_free>
      break;
 80192c8:	e01a      	b.n	8019300 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80192ca:	6878      	ldr	r0, [r7, #4]
 80192cc:	f7ff ff14 	bl	80190f8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80192d0:	6879      	ldr	r1, [r7, #4]
 80192d2:	4816      	ldr	r0, [pc, #88]	; (801932c <tcp_close_shutdown+0x1c0>)
 80192d4:	f001 fc92 	bl	801abfc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80192d8:	6878      	ldr	r0, [r7, #4]
 80192da:	f7ff feb1 	bl	8019040 <tcp_free_listen>
      break;
 80192de:	e00f      	b.n	8019300 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80192e0:	6879      	ldr	r1, [r7, #4]
 80192e2:	480e      	ldr	r0, [pc, #56]	; (801931c <tcp_close_shutdown+0x1b0>)
 80192e4:	f001 fc8a 	bl	801abfc <tcp_pcb_remove>
 80192e8:	4b0d      	ldr	r3, [pc, #52]	; (8019320 <tcp_close_shutdown+0x1b4>)
 80192ea:	2201      	movs	r2, #1
 80192ec:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80192ee:	6878      	ldr	r0, [r7, #4]
 80192f0:	f7ff fe8a 	bl	8019008 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80192f4:	e004      	b.n	8019300 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80192f6:	6878      	ldr	r0, [r7, #4]
 80192f8:	f000 f81a 	bl	8019330 <tcp_close_shutdown_fin>
 80192fc:	4603      	mov	r3, r0
 80192fe:	e000      	b.n	8019302 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8019300:	2300      	movs	r3, #0
}
 8019302:	4618      	mov	r0, r3
 8019304:	3710      	adds	r7, #16
 8019306:	46bd      	mov	sp, r7
 8019308:	bdb0      	pop	{r4, r5, r7, pc}
 801930a:	bf00      	nop
 801930c:	08026a5c 	.word	0x08026a5c
 8019310:	08026b30 	.word	0x08026b30
 8019314:	08026aa0 	.word	0x08026aa0
 8019318:	08026b50 	.word	0x08026b50
 801931c:	2000bfb8 	.word	0x2000bfb8
 8019320:	2000bfc0 	.word	0x2000bfc0
 8019324:	2000bff8 	.word	0x2000bff8
 8019328:	2000bfb0 	.word	0x2000bfb0
 801932c:	2000bfb4 	.word	0x2000bfb4

08019330 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b084      	sub	sp, #16
 8019334:	af00      	add	r7, sp, #0
 8019336:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	2b00      	cmp	r3, #0
 801933c:	d106      	bne.n	801934c <tcp_close_shutdown_fin+0x1c>
 801933e:	4b2e      	ldr	r3, [pc, #184]	; (80193f8 <tcp_close_shutdown_fin+0xc8>)
 8019340:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8019344:	492d      	ldr	r1, [pc, #180]	; (80193fc <tcp_close_shutdown_fin+0xcc>)
 8019346:	482e      	ldr	r0, [pc, #184]	; (8019400 <tcp_close_shutdown_fin+0xd0>)
 8019348:	f00a fdda 	bl	8023f00 <iprintf>

  switch (pcb->state) {
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	7d1b      	ldrb	r3, [r3, #20]
 8019350:	2b07      	cmp	r3, #7
 8019352:	d020      	beq.n	8019396 <tcp_close_shutdown_fin+0x66>
 8019354:	2b07      	cmp	r3, #7
 8019356:	dc2b      	bgt.n	80193b0 <tcp_close_shutdown_fin+0x80>
 8019358:	2b03      	cmp	r3, #3
 801935a:	d002      	beq.n	8019362 <tcp_close_shutdown_fin+0x32>
 801935c:	2b04      	cmp	r3, #4
 801935e:	d00d      	beq.n	801937c <tcp_close_shutdown_fin+0x4c>
 8019360:	e026      	b.n	80193b0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8019362:	6878      	ldr	r0, [r7, #4]
 8019364:	f004 ff28 	bl	801e1b8 <tcp_send_fin>
 8019368:	4603      	mov	r3, r0
 801936a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801936c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d11f      	bne.n	80193b4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	2205      	movs	r2, #5
 8019378:	751a      	strb	r2, [r3, #20]
      }
      break;
 801937a:	e01b      	b.n	80193b4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801937c:	6878      	ldr	r0, [r7, #4]
 801937e:	f004 ff1b 	bl	801e1b8 <tcp_send_fin>
 8019382:	4603      	mov	r3, r0
 8019384:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d114      	bne.n	80193b8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	2205      	movs	r2, #5
 8019392:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019394:	e010      	b.n	80193b8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8019396:	6878      	ldr	r0, [r7, #4]
 8019398:	f004 ff0e 	bl	801e1b8 <tcp_send_fin>
 801939c:	4603      	mov	r3, r0
 801939e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80193a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d109      	bne.n	80193bc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	2209      	movs	r2, #9
 80193ac:	751a      	strb	r2, [r3, #20]
      }
      break;
 80193ae:	e005      	b.n	80193bc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80193b0:	2300      	movs	r3, #0
 80193b2:	e01c      	b.n	80193ee <tcp_close_shutdown_fin+0xbe>
      break;
 80193b4:	bf00      	nop
 80193b6:	e002      	b.n	80193be <tcp_close_shutdown_fin+0x8e>
      break;
 80193b8:	bf00      	nop
 80193ba:	e000      	b.n	80193be <tcp_close_shutdown_fin+0x8e>
      break;
 80193bc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80193be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d103      	bne.n	80193ce <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80193c6:	6878      	ldr	r0, [r7, #4]
 80193c8:	f005 f834 	bl	801e434 <tcp_output>
 80193cc:	e00d      	b.n	80193ea <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80193ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80193d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80193d6:	d108      	bne.n	80193ea <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	8b5b      	ldrh	r3, [r3, #26]
 80193dc:	f043 0308 	orr.w	r3, r3, #8
 80193e0:	b29a      	uxth	r2, r3
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80193e6:	2300      	movs	r3, #0
 80193e8:	e001      	b.n	80193ee <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80193ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80193ee:	4618      	mov	r0, r3
 80193f0:	3710      	adds	r7, #16
 80193f2:	46bd      	mov	sp, r7
 80193f4:	bd80      	pop	{r7, pc}
 80193f6:	bf00      	nop
 80193f8:	08026a5c 	.word	0x08026a5c
 80193fc:	08026b0c 	.word	0x08026b0c
 8019400:	08026aa0 	.word	0x08026aa0

08019404 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8019404:	b580      	push	{r7, lr}
 8019406:	b082      	sub	sp, #8
 8019408:	af00      	add	r7, sp, #0
 801940a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	2b00      	cmp	r3, #0
 8019410:	d109      	bne.n	8019426 <tcp_close+0x22>
 8019412:	4b0f      	ldr	r3, [pc, #60]	; (8019450 <tcp_close+0x4c>)
 8019414:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8019418:	490e      	ldr	r1, [pc, #56]	; (8019454 <tcp_close+0x50>)
 801941a:	480f      	ldr	r0, [pc, #60]	; (8019458 <tcp_close+0x54>)
 801941c:	f00a fd70 	bl	8023f00 <iprintf>
 8019420:	f06f 030f 	mvn.w	r3, #15
 8019424:	e00f      	b.n	8019446 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	7d1b      	ldrb	r3, [r3, #20]
 801942a:	2b01      	cmp	r3, #1
 801942c:	d006      	beq.n	801943c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	8b5b      	ldrh	r3, [r3, #26]
 8019432:	f043 0310 	orr.w	r3, r3, #16
 8019436:	b29a      	uxth	r2, r3
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801943c:	2101      	movs	r1, #1
 801943e:	6878      	ldr	r0, [r7, #4]
 8019440:	f7ff fe94 	bl	801916c <tcp_close_shutdown>
 8019444:	4603      	mov	r3, r0
}
 8019446:	4618      	mov	r0, r3
 8019448:	3708      	adds	r7, #8
 801944a:	46bd      	mov	sp, r7
 801944c:	bd80      	pop	{r7, pc}
 801944e:	bf00      	nop
 8019450:	08026a5c 	.word	0x08026a5c
 8019454:	08026b6c 	.word	0x08026b6c
 8019458:	08026aa0 	.word	0x08026aa0

0801945c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801945c:	b580      	push	{r7, lr}
 801945e:	b084      	sub	sp, #16
 8019460:	af00      	add	r7, sp, #0
 8019462:	60f8      	str	r0, [r7, #12]
 8019464:	60b9      	str	r1, [r7, #8]
 8019466:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	2b00      	cmp	r3, #0
 801946c:	d109      	bne.n	8019482 <tcp_shutdown+0x26>
 801946e:	4b26      	ldr	r3, [pc, #152]	; (8019508 <tcp_shutdown+0xac>)
 8019470:	f240 2207 	movw	r2, #519	; 0x207
 8019474:	4925      	ldr	r1, [pc, #148]	; (801950c <tcp_shutdown+0xb0>)
 8019476:	4826      	ldr	r0, [pc, #152]	; (8019510 <tcp_shutdown+0xb4>)
 8019478:	f00a fd42 	bl	8023f00 <iprintf>
 801947c:	f06f 030f 	mvn.w	r3, #15
 8019480:	e03d      	b.n	80194fe <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8019482:	68fb      	ldr	r3, [r7, #12]
 8019484:	7d1b      	ldrb	r3, [r3, #20]
 8019486:	2b01      	cmp	r3, #1
 8019488:	d102      	bne.n	8019490 <tcp_shutdown+0x34>
    return ERR_CONN;
 801948a:	f06f 030a 	mvn.w	r3, #10
 801948e:	e036      	b.n	80194fe <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8019490:	68bb      	ldr	r3, [r7, #8]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d01b      	beq.n	80194ce <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	8b5b      	ldrh	r3, [r3, #26]
 801949a:	f043 0310 	orr.w	r3, r3, #16
 801949e:	b29a      	uxth	r2, r3
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d005      	beq.n	80194b6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80194aa:	2101      	movs	r1, #1
 80194ac:	68f8      	ldr	r0, [r7, #12]
 80194ae:	f7ff fe5d 	bl	801916c <tcp_close_shutdown>
 80194b2:	4603      	mov	r3, r0
 80194b4:	e023      	b.n	80194fe <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d007      	beq.n	80194ce <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80194c2:	4618      	mov	r0, r3
 80194c4:	f7ff fae4 	bl	8018a90 <pbuf_free>
      pcb->refused_data = NULL;
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	2200      	movs	r2, #0
 80194cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d013      	beq.n	80194fc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	7d1b      	ldrb	r3, [r3, #20]
 80194d8:	2b04      	cmp	r3, #4
 80194da:	dc02      	bgt.n	80194e2 <tcp_shutdown+0x86>
 80194dc:	2b03      	cmp	r3, #3
 80194de:	da02      	bge.n	80194e6 <tcp_shutdown+0x8a>
 80194e0:	e009      	b.n	80194f6 <tcp_shutdown+0x9a>
 80194e2:	2b07      	cmp	r3, #7
 80194e4:	d107      	bne.n	80194f6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80194e6:	68bb      	ldr	r3, [r7, #8]
 80194e8:	b2db      	uxtb	r3, r3
 80194ea:	4619      	mov	r1, r3
 80194ec:	68f8      	ldr	r0, [r7, #12]
 80194ee:	f7ff fe3d 	bl	801916c <tcp_close_shutdown>
 80194f2:	4603      	mov	r3, r0
 80194f4:	e003      	b.n	80194fe <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80194f6:	f06f 030a 	mvn.w	r3, #10
 80194fa:	e000      	b.n	80194fe <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80194fc:	2300      	movs	r3, #0
}
 80194fe:	4618      	mov	r0, r3
 8019500:	3710      	adds	r7, #16
 8019502:	46bd      	mov	sp, r7
 8019504:	bd80      	pop	{r7, pc}
 8019506:	bf00      	nop
 8019508:	08026a5c 	.word	0x08026a5c
 801950c:	08026b84 	.word	0x08026b84
 8019510:	08026aa0 	.word	0x08026aa0

08019514 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8019514:	b580      	push	{r7, lr}
 8019516:	b08e      	sub	sp, #56	; 0x38
 8019518:	af04      	add	r7, sp, #16
 801951a:	6078      	str	r0, [r7, #4]
 801951c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d107      	bne.n	8019534 <tcp_abandon+0x20>
 8019524:	4b52      	ldr	r3, [pc, #328]	; (8019670 <tcp_abandon+0x15c>)
 8019526:	f240 223d 	movw	r2, #573	; 0x23d
 801952a:	4952      	ldr	r1, [pc, #328]	; (8019674 <tcp_abandon+0x160>)
 801952c:	4852      	ldr	r0, [pc, #328]	; (8019678 <tcp_abandon+0x164>)
 801952e:	f00a fce7 	bl	8023f00 <iprintf>
 8019532:	e099      	b.n	8019668 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	7d1b      	ldrb	r3, [r3, #20]
 8019538:	2b01      	cmp	r3, #1
 801953a:	d106      	bne.n	801954a <tcp_abandon+0x36>
 801953c:	4b4c      	ldr	r3, [pc, #304]	; (8019670 <tcp_abandon+0x15c>)
 801953e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8019542:	494e      	ldr	r1, [pc, #312]	; (801967c <tcp_abandon+0x168>)
 8019544:	484c      	ldr	r0, [pc, #304]	; (8019678 <tcp_abandon+0x164>)
 8019546:	f00a fcdb 	bl	8023f00 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	7d1b      	ldrb	r3, [r3, #20]
 801954e:	2b0a      	cmp	r3, #10
 8019550:	d107      	bne.n	8019562 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8019552:	6879      	ldr	r1, [r7, #4]
 8019554:	484a      	ldr	r0, [pc, #296]	; (8019680 <tcp_abandon+0x16c>)
 8019556:	f001 fb51 	bl	801abfc <tcp_pcb_remove>
    tcp_free(pcb);
 801955a:	6878      	ldr	r0, [r7, #4]
 801955c:	f7ff fd54 	bl	8019008 <tcp_free>
 8019560:	e082      	b.n	8019668 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8019562:	2300      	movs	r3, #0
 8019564:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8019566:	2300      	movs	r3, #0
 8019568:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801956e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019574:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801957c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	691b      	ldr	r3, [r3, #16]
 8019582:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	7d1b      	ldrb	r3, [r3, #20]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d126      	bne.n	80195da <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	8adb      	ldrh	r3, [r3, #22]
 8019590:	2b00      	cmp	r3, #0
 8019592:	d02e      	beq.n	80195f2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019594:	4b3b      	ldr	r3, [pc, #236]	; (8019684 <tcp_abandon+0x170>)
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	687a      	ldr	r2, [r7, #4]
 801959a:	429a      	cmp	r2, r3
 801959c:	d105      	bne.n	80195aa <tcp_abandon+0x96>
 801959e:	4b39      	ldr	r3, [pc, #228]	; (8019684 <tcp_abandon+0x170>)
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	68db      	ldr	r3, [r3, #12]
 80195a4:	4a37      	ldr	r2, [pc, #220]	; (8019684 <tcp_abandon+0x170>)
 80195a6:	6013      	str	r3, [r2, #0]
 80195a8:	e013      	b.n	80195d2 <tcp_abandon+0xbe>
 80195aa:	4b36      	ldr	r3, [pc, #216]	; (8019684 <tcp_abandon+0x170>)
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	61fb      	str	r3, [r7, #28]
 80195b0:	e00c      	b.n	80195cc <tcp_abandon+0xb8>
 80195b2:	69fb      	ldr	r3, [r7, #28]
 80195b4:	68db      	ldr	r3, [r3, #12]
 80195b6:	687a      	ldr	r2, [r7, #4]
 80195b8:	429a      	cmp	r2, r3
 80195ba:	d104      	bne.n	80195c6 <tcp_abandon+0xb2>
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	68da      	ldr	r2, [r3, #12]
 80195c0:	69fb      	ldr	r3, [r7, #28]
 80195c2:	60da      	str	r2, [r3, #12]
 80195c4:	e005      	b.n	80195d2 <tcp_abandon+0xbe>
 80195c6:	69fb      	ldr	r3, [r7, #28]
 80195c8:	68db      	ldr	r3, [r3, #12]
 80195ca:	61fb      	str	r3, [r7, #28]
 80195cc:	69fb      	ldr	r3, [r7, #28]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d1ef      	bne.n	80195b2 <tcp_abandon+0x9e>
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	2200      	movs	r2, #0
 80195d6:	60da      	str	r2, [r3, #12]
 80195d8:	e00b      	b.n	80195f2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80195da:	683b      	ldr	r3, [r7, #0]
 80195dc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	8adb      	ldrh	r3, [r3, #22]
 80195e2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80195e4:	6879      	ldr	r1, [r7, #4]
 80195e6:	4828      	ldr	r0, [pc, #160]	; (8019688 <tcp_abandon+0x174>)
 80195e8:	f001 fb08 	bl	801abfc <tcp_pcb_remove>
 80195ec:	4b27      	ldr	r3, [pc, #156]	; (801968c <tcp_abandon+0x178>)
 80195ee:	2201      	movs	r2, #1
 80195f0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d004      	beq.n	8019604 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195fe:	4618      	mov	r0, r3
 8019600:	f000 ffdc 	bl	801a5bc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019608:	2b00      	cmp	r3, #0
 801960a:	d004      	beq.n	8019616 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019610:	4618      	mov	r0, r3
 8019612:	f000 ffd3 	bl	801a5bc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801961a:	2b00      	cmp	r3, #0
 801961c:	d004      	beq.n	8019628 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019622:	4618      	mov	r0, r3
 8019624:	f000 ffca 	bl	801a5bc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8019628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801962a:	2b00      	cmp	r3, #0
 801962c:	d00e      	beq.n	801964c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801962e:	6879      	ldr	r1, [r7, #4]
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	3304      	adds	r3, #4
 8019634:	687a      	ldr	r2, [r7, #4]
 8019636:	8b12      	ldrh	r2, [r2, #24]
 8019638:	9202      	str	r2, [sp, #8]
 801963a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801963c:	9201      	str	r2, [sp, #4]
 801963e:	9300      	str	r3, [sp, #0]
 8019640:	460b      	mov	r3, r1
 8019642:	697a      	ldr	r2, [r7, #20]
 8019644:	69b9      	ldr	r1, [r7, #24]
 8019646:	6878      	ldr	r0, [r7, #4]
 8019648:	f005 fca8 	bl	801ef9c <tcp_rst>
    }
    last_state = pcb->state;
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	7d1b      	ldrb	r3, [r3, #20]
 8019650:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8019652:	6878      	ldr	r0, [r7, #4]
 8019654:	f7ff fcd8 	bl	8019008 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8019658:	693b      	ldr	r3, [r7, #16]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d004      	beq.n	8019668 <tcp_abandon+0x154>
 801965e:	693b      	ldr	r3, [r7, #16]
 8019660:	f06f 010c 	mvn.w	r1, #12
 8019664:	68f8      	ldr	r0, [r7, #12]
 8019666:	4798      	blx	r3
  }
}
 8019668:	3728      	adds	r7, #40	; 0x28
 801966a:	46bd      	mov	sp, r7
 801966c:	bd80      	pop	{r7, pc}
 801966e:	bf00      	nop
 8019670:	08026a5c 	.word	0x08026a5c
 8019674:	08026ba0 	.word	0x08026ba0
 8019678:	08026aa0 	.word	0x08026aa0
 801967c:	08026bbc 	.word	0x08026bbc
 8019680:	2000bfbc 	.word	0x2000bfbc
 8019684:	2000bfb0 	.word	0x2000bfb0
 8019688:	2000bfb8 	.word	0x2000bfb8
 801968c:	2000bfc0 	.word	0x2000bfc0

08019690 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b082      	sub	sp, #8
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8019698:	2101      	movs	r1, #1
 801969a:	6878      	ldr	r0, [r7, #4]
 801969c:	f7ff ff3a 	bl	8019514 <tcp_abandon>
}
 80196a0:	bf00      	nop
 80196a2:	3708      	adds	r7, #8
 80196a4:	46bd      	mov	sp, r7
 80196a6:	bd80      	pop	{r7, pc}

080196a8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b088      	sub	sp, #32
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	60f8      	str	r0, [r7, #12]
 80196b0:	60b9      	str	r1, [r7, #8]
 80196b2:	4613      	mov	r3, r2
 80196b4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80196b6:	2304      	movs	r3, #4
 80196b8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80196ba:	68bb      	ldr	r3, [r7, #8]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d101      	bne.n	80196c4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80196c0:	4b3e      	ldr	r3, [pc, #248]	; (80197bc <tcp_bind+0x114>)
 80196c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d109      	bne.n	80196de <tcp_bind+0x36>
 80196ca:	4b3d      	ldr	r3, [pc, #244]	; (80197c0 <tcp_bind+0x118>)
 80196cc:	f240 22a9 	movw	r2, #681	; 0x2a9
 80196d0:	493c      	ldr	r1, [pc, #240]	; (80197c4 <tcp_bind+0x11c>)
 80196d2:	483d      	ldr	r0, [pc, #244]	; (80197c8 <tcp_bind+0x120>)
 80196d4:	f00a fc14 	bl	8023f00 <iprintf>
 80196d8:	f06f 030f 	mvn.w	r3, #15
 80196dc:	e06a      	b.n	80197b4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	7d1b      	ldrb	r3, [r3, #20]
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d009      	beq.n	80196fa <tcp_bind+0x52>
 80196e6:	4b36      	ldr	r3, [pc, #216]	; (80197c0 <tcp_bind+0x118>)
 80196e8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80196ec:	4937      	ldr	r1, [pc, #220]	; (80197cc <tcp_bind+0x124>)
 80196ee:	4836      	ldr	r0, [pc, #216]	; (80197c8 <tcp_bind+0x120>)
 80196f0:	f00a fc06 	bl	8023f00 <iprintf>
 80196f4:	f06f 0305 	mvn.w	r3, #5
 80196f8:	e05c      	b.n	80197b4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80196fa:	88fb      	ldrh	r3, [r7, #6]
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d109      	bne.n	8019714 <tcp_bind+0x6c>
    port = tcp_new_port();
 8019700:	f000 f9de 	bl	8019ac0 <tcp_new_port>
 8019704:	4603      	mov	r3, r0
 8019706:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019708:	88fb      	ldrh	r3, [r7, #6]
 801970a:	2b00      	cmp	r3, #0
 801970c:	d135      	bne.n	801977a <tcp_bind+0xd2>
      return ERR_BUF;
 801970e:	f06f 0301 	mvn.w	r3, #1
 8019712:	e04f      	b.n	80197b4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8019714:	2300      	movs	r3, #0
 8019716:	61fb      	str	r3, [r7, #28]
 8019718:	e02b      	b.n	8019772 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801971a:	4a2d      	ldr	r2, [pc, #180]	; (80197d0 <tcp_bind+0x128>)
 801971c:	69fb      	ldr	r3, [r7, #28]
 801971e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	61bb      	str	r3, [r7, #24]
 8019726:	e01e      	b.n	8019766 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8019728:	69bb      	ldr	r3, [r7, #24]
 801972a:	8adb      	ldrh	r3, [r3, #22]
 801972c:	88fa      	ldrh	r2, [r7, #6]
 801972e:	429a      	cmp	r2, r3
 8019730:	d116      	bne.n	8019760 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8019732:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019734:	2b00      	cmp	r3, #0
 8019736:	d010      	beq.n	801975a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8019738:	69bb      	ldr	r3, [r7, #24]
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d00c      	beq.n	801975a <tcp_bind+0xb2>
 8019740:	68bb      	ldr	r3, [r7, #8]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d009      	beq.n	801975a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8019746:	68bb      	ldr	r3, [r7, #8]
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	2b00      	cmp	r3, #0
 801974c:	d005      	beq.n	801975a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801974e:	69bb      	ldr	r3, [r7, #24]
 8019750:	681a      	ldr	r2, [r3, #0]
 8019752:	68bb      	ldr	r3, [r7, #8]
 8019754:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019756:	429a      	cmp	r2, r3
 8019758:	d102      	bne.n	8019760 <tcp_bind+0xb8>
              return ERR_USE;
 801975a:	f06f 0307 	mvn.w	r3, #7
 801975e:	e029      	b.n	80197b4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019760:	69bb      	ldr	r3, [r7, #24]
 8019762:	68db      	ldr	r3, [r3, #12]
 8019764:	61bb      	str	r3, [r7, #24]
 8019766:	69bb      	ldr	r3, [r7, #24]
 8019768:	2b00      	cmp	r3, #0
 801976a:	d1dd      	bne.n	8019728 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801976c:	69fb      	ldr	r3, [r7, #28]
 801976e:	3301      	adds	r3, #1
 8019770:	61fb      	str	r3, [r7, #28]
 8019772:	69fa      	ldr	r2, [r7, #28]
 8019774:	697b      	ldr	r3, [r7, #20]
 8019776:	429a      	cmp	r2, r3
 8019778:	dbcf      	blt.n	801971a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801977a:	68bb      	ldr	r3, [r7, #8]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d00c      	beq.n	801979a <tcp_bind+0xf2>
 8019780:	68bb      	ldr	r3, [r7, #8]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	2b00      	cmp	r3, #0
 8019786:	d008      	beq.n	801979a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8019788:	68bb      	ldr	r3, [r7, #8]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d002      	beq.n	8019794 <tcp_bind+0xec>
 801978e:	68bb      	ldr	r3, [r7, #8]
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	e000      	b.n	8019796 <tcp_bind+0xee>
 8019794:	2300      	movs	r3, #0
 8019796:	68fa      	ldr	r2, [r7, #12]
 8019798:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801979a:	68fb      	ldr	r3, [r7, #12]
 801979c:	88fa      	ldrh	r2, [r7, #6]
 801979e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80197a0:	4b0c      	ldr	r3, [pc, #48]	; (80197d4 <tcp_bind+0x12c>)
 80197a2:	681a      	ldr	r2, [r3, #0]
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	60da      	str	r2, [r3, #12]
 80197a8:	4a0a      	ldr	r2, [pc, #40]	; (80197d4 <tcp_bind+0x12c>)
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	6013      	str	r3, [r2, #0]
 80197ae:	f005 fdb7 	bl	801f320 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80197b2:	2300      	movs	r3, #0
}
 80197b4:	4618      	mov	r0, r3
 80197b6:	3720      	adds	r7, #32
 80197b8:	46bd      	mov	sp, r7
 80197ba:	bd80      	pop	{r7, pc}
 80197bc:	08028af8 	.word	0x08028af8
 80197c0:	08026a5c 	.word	0x08026a5c
 80197c4:	08026bf0 	.word	0x08026bf0
 80197c8:	08026aa0 	.word	0x08026aa0
 80197cc:	08026c08 	.word	0x08026c08
 80197d0:	08028ad0 	.word	0x08028ad0
 80197d4:	2000bfb0 	.word	0x2000bfb0

080197d8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b084      	sub	sp, #16
 80197dc:	af00      	add	r7, sp, #0
 80197de:	60f8      	str	r0, [r7, #12]
 80197e0:	60b9      	str	r1, [r7, #8]
 80197e2:	4613      	mov	r3, r2
 80197e4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80197e6:	68bb      	ldr	r3, [r7, #8]
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d106      	bne.n	80197fa <tcp_accept_null+0x22>
 80197ec:	4b07      	ldr	r3, [pc, #28]	; (801980c <tcp_accept_null+0x34>)
 80197ee:	f240 320f 	movw	r2, #783	; 0x30f
 80197f2:	4907      	ldr	r1, [pc, #28]	; (8019810 <tcp_accept_null+0x38>)
 80197f4:	4807      	ldr	r0, [pc, #28]	; (8019814 <tcp_accept_null+0x3c>)
 80197f6:	f00a fb83 	bl	8023f00 <iprintf>

  tcp_abort(pcb);
 80197fa:	68b8      	ldr	r0, [r7, #8]
 80197fc:	f7ff ff48 	bl	8019690 <tcp_abort>

  return ERR_ABRT;
 8019800:	f06f 030c 	mvn.w	r3, #12
}
 8019804:	4618      	mov	r0, r3
 8019806:	3710      	adds	r7, #16
 8019808:	46bd      	mov	sp, r7
 801980a:	bd80      	pop	{r7, pc}
 801980c:	08026a5c 	.word	0x08026a5c
 8019810:	08026c30 	.word	0x08026c30
 8019814:	08026aa0 	.word	0x08026aa0

08019818 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8019818:	b580      	push	{r7, lr}
 801981a:	b088      	sub	sp, #32
 801981c:	af00      	add	r7, sp, #0
 801981e:	60f8      	str	r0, [r7, #12]
 8019820:	460b      	mov	r3, r1
 8019822:	607a      	str	r2, [r7, #4]
 8019824:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8019826:	2300      	movs	r3, #0
 8019828:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	2b00      	cmp	r3, #0
 801982e:	d109      	bne.n	8019844 <tcp_listen_with_backlog_and_err+0x2c>
 8019830:	4b47      	ldr	r3, [pc, #284]	; (8019950 <tcp_listen_with_backlog_and_err+0x138>)
 8019832:	f240 3259 	movw	r2, #857	; 0x359
 8019836:	4947      	ldr	r1, [pc, #284]	; (8019954 <tcp_listen_with_backlog_and_err+0x13c>)
 8019838:	4847      	ldr	r0, [pc, #284]	; (8019958 <tcp_listen_with_backlog_and_err+0x140>)
 801983a:	f00a fb61 	bl	8023f00 <iprintf>
 801983e:	23f0      	movs	r3, #240	; 0xf0
 8019840:	76fb      	strb	r3, [r7, #27]
 8019842:	e079      	b.n	8019938 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	7d1b      	ldrb	r3, [r3, #20]
 8019848:	2b00      	cmp	r3, #0
 801984a:	d009      	beq.n	8019860 <tcp_listen_with_backlog_and_err+0x48>
 801984c:	4b40      	ldr	r3, [pc, #256]	; (8019950 <tcp_listen_with_backlog_and_err+0x138>)
 801984e:	f240 325a 	movw	r2, #858	; 0x35a
 8019852:	4942      	ldr	r1, [pc, #264]	; (801995c <tcp_listen_with_backlog_and_err+0x144>)
 8019854:	4840      	ldr	r0, [pc, #256]	; (8019958 <tcp_listen_with_backlog_and_err+0x140>)
 8019856:	f00a fb53 	bl	8023f00 <iprintf>
 801985a:	23f1      	movs	r3, #241	; 0xf1
 801985c:	76fb      	strb	r3, [r7, #27]
 801985e:	e06b      	b.n	8019938 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	7d1b      	ldrb	r3, [r3, #20]
 8019864:	2b01      	cmp	r3, #1
 8019866:	d104      	bne.n	8019872 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801986c:	23f7      	movs	r3, #247	; 0xf7
 801986e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8019870:	e062      	b.n	8019938 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8019872:	2002      	movs	r0, #2
 8019874:	f7fe f9f2 	bl	8017c5c <memp_malloc>
 8019878:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801987a:	69fb      	ldr	r3, [r7, #28]
 801987c:	2b00      	cmp	r3, #0
 801987e:	d102      	bne.n	8019886 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8019880:	23ff      	movs	r3, #255	; 0xff
 8019882:	76fb      	strb	r3, [r7, #27]
    goto done;
 8019884:	e058      	b.n	8019938 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	691a      	ldr	r2, [r3, #16]
 801988a:	69fb      	ldr	r3, [r7, #28]
 801988c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	8ada      	ldrh	r2, [r3, #22]
 8019892:	69fb      	ldr	r3, [r7, #28]
 8019894:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8019896:	69fb      	ldr	r3, [r7, #28]
 8019898:	2201      	movs	r2, #1
 801989a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801989c:	68fb      	ldr	r3, [r7, #12]
 801989e:	7d5a      	ldrb	r2, [r3, #21]
 80198a0:	69fb      	ldr	r3, [r7, #28]
 80198a2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	7a5a      	ldrb	r2, [r3, #9]
 80198a8:	69fb      	ldr	r3, [r7, #28]
 80198aa:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80198ac:	69fb      	ldr	r3, [r7, #28]
 80198ae:	2200      	movs	r2, #0
 80198b0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80198b2:	68fb      	ldr	r3, [r7, #12]
 80198b4:	7ada      	ldrb	r2, [r3, #11]
 80198b6:	69fb      	ldr	r3, [r7, #28]
 80198b8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	7a9a      	ldrb	r2, [r3, #10]
 80198be:	69fb      	ldr	r3, [r7, #28]
 80198c0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	681a      	ldr	r2, [r3, #0]
 80198c6:	69fb      	ldr	r3, [r7, #28]
 80198c8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	8adb      	ldrh	r3, [r3, #22]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d021      	beq.n	8019916 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80198d2:	4b23      	ldr	r3, [pc, #140]	; (8019960 <tcp_listen_with_backlog_and_err+0x148>)
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	68fa      	ldr	r2, [r7, #12]
 80198d8:	429a      	cmp	r2, r3
 80198da:	d105      	bne.n	80198e8 <tcp_listen_with_backlog_and_err+0xd0>
 80198dc:	4b20      	ldr	r3, [pc, #128]	; (8019960 <tcp_listen_with_backlog_and_err+0x148>)
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	68db      	ldr	r3, [r3, #12]
 80198e2:	4a1f      	ldr	r2, [pc, #124]	; (8019960 <tcp_listen_with_backlog_and_err+0x148>)
 80198e4:	6013      	str	r3, [r2, #0]
 80198e6:	e013      	b.n	8019910 <tcp_listen_with_backlog_and_err+0xf8>
 80198e8:	4b1d      	ldr	r3, [pc, #116]	; (8019960 <tcp_listen_with_backlog_and_err+0x148>)
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	617b      	str	r3, [r7, #20]
 80198ee:	e00c      	b.n	801990a <tcp_listen_with_backlog_and_err+0xf2>
 80198f0:	697b      	ldr	r3, [r7, #20]
 80198f2:	68db      	ldr	r3, [r3, #12]
 80198f4:	68fa      	ldr	r2, [r7, #12]
 80198f6:	429a      	cmp	r2, r3
 80198f8:	d104      	bne.n	8019904 <tcp_listen_with_backlog_and_err+0xec>
 80198fa:	68fb      	ldr	r3, [r7, #12]
 80198fc:	68da      	ldr	r2, [r3, #12]
 80198fe:	697b      	ldr	r3, [r7, #20]
 8019900:	60da      	str	r2, [r3, #12]
 8019902:	e005      	b.n	8019910 <tcp_listen_with_backlog_and_err+0xf8>
 8019904:	697b      	ldr	r3, [r7, #20]
 8019906:	68db      	ldr	r3, [r3, #12]
 8019908:	617b      	str	r3, [r7, #20]
 801990a:	697b      	ldr	r3, [r7, #20]
 801990c:	2b00      	cmp	r3, #0
 801990e:	d1ef      	bne.n	80198f0 <tcp_listen_with_backlog_and_err+0xd8>
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	2200      	movs	r2, #0
 8019914:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8019916:	68f8      	ldr	r0, [r7, #12]
 8019918:	f7ff fb76 	bl	8019008 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801991c:	69fb      	ldr	r3, [r7, #28]
 801991e:	4a11      	ldr	r2, [pc, #68]	; (8019964 <tcp_listen_with_backlog_and_err+0x14c>)
 8019920:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8019922:	4b11      	ldr	r3, [pc, #68]	; (8019968 <tcp_listen_with_backlog_and_err+0x150>)
 8019924:	681a      	ldr	r2, [r3, #0]
 8019926:	69fb      	ldr	r3, [r7, #28]
 8019928:	60da      	str	r2, [r3, #12]
 801992a:	4a0f      	ldr	r2, [pc, #60]	; (8019968 <tcp_listen_with_backlog_and_err+0x150>)
 801992c:	69fb      	ldr	r3, [r7, #28]
 801992e:	6013      	str	r3, [r2, #0]
 8019930:	f005 fcf6 	bl	801f320 <tcp_timer_needed>
  res = ERR_OK;
 8019934:	2300      	movs	r3, #0
 8019936:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d002      	beq.n	8019944 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	7efa      	ldrb	r2, [r7, #27]
 8019942:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8019944:	69fb      	ldr	r3, [r7, #28]
}
 8019946:	4618      	mov	r0, r3
 8019948:	3720      	adds	r7, #32
 801994a:	46bd      	mov	sp, r7
 801994c:	bd80      	pop	{r7, pc}
 801994e:	bf00      	nop
 8019950:	08026a5c 	.word	0x08026a5c
 8019954:	08026c50 	.word	0x08026c50
 8019958:	08026aa0 	.word	0x08026aa0
 801995c:	08026c80 	.word	0x08026c80
 8019960:	2000bfb0 	.word	0x2000bfb0
 8019964:	080197d9 	.word	0x080197d9
 8019968:	2000bfb4 	.word	0x2000bfb4

0801996c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801996c:	b580      	push	{r7, lr}
 801996e:	b084      	sub	sp, #16
 8019970:	af00      	add	r7, sp, #0
 8019972:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	2b00      	cmp	r3, #0
 8019978:	d106      	bne.n	8019988 <tcp_update_rcv_ann_wnd+0x1c>
 801997a:	4b25      	ldr	r3, [pc, #148]	; (8019a10 <tcp_update_rcv_ann_wnd+0xa4>)
 801997c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8019980:	4924      	ldr	r1, [pc, #144]	; (8019a14 <tcp_update_rcv_ann_wnd+0xa8>)
 8019982:	4825      	ldr	r0, [pc, #148]	; (8019a18 <tcp_update_rcv_ann_wnd+0xac>)
 8019984:	f00a fabc 	bl	8023f00 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801998c:	687a      	ldr	r2, [r7, #4]
 801998e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8019990:	4413      	add	r3, r2
 8019992:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019998:	687a      	ldr	r2, [r7, #4]
 801999a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801999c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80199a0:	bf28      	it	cs
 80199a2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80199a6:	b292      	uxth	r2, r2
 80199a8:	4413      	add	r3, r2
 80199aa:	68fa      	ldr	r2, [r7, #12]
 80199ac:	1ad3      	subs	r3, r2, r3
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	db08      	blt.n	80199c4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199be:	68fa      	ldr	r2, [r7, #12]
 80199c0:	1ad3      	subs	r3, r2, r3
 80199c2:	e020      	b.n	8019a06 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199cc:	1ad3      	subs	r3, r2, r3
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	dd03      	ble.n	80199da <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	2200      	movs	r2, #0
 80199d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80199d8:	e014      	b.n	8019a04 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199e2:	1ad3      	subs	r3, r2, r3
 80199e4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80199e6:	68bb      	ldr	r3, [r7, #8]
 80199e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80199ec:	d306      	bcc.n	80199fc <tcp_update_rcv_ann_wnd+0x90>
 80199ee:	4b08      	ldr	r3, [pc, #32]	; (8019a10 <tcp_update_rcv_ann_wnd+0xa4>)
 80199f0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80199f4:	4909      	ldr	r1, [pc, #36]	; (8019a1c <tcp_update_rcv_ann_wnd+0xb0>)
 80199f6:	4808      	ldr	r0, [pc, #32]	; (8019a18 <tcp_update_rcv_ann_wnd+0xac>)
 80199f8:	f00a fa82 	bl	8023f00 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80199fc:	68bb      	ldr	r3, [r7, #8]
 80199fe:	b29a      	uxth	r2, r3
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8019a04:	2300      	movs	r3, #0
  }
}
 8019a06:	4618      	mov	r0, r3
 8019a08:	3710      	adds	r7, #16
 8019a0a:	46bd      	mov	sp, r7
 8019a0c:	bd80      	pop	{r7, pc}
 8019a0e:	bf00      	nop
 8019a10:	08026a5c 	.word	0x08026a5c
 8019a14:	08026cb8 	.word	0x08026cb8
 8019a18:	08026aa0 	.word	0x08026aa0
 8019a1c:	08026cdc 	.word	0x08026cdc

08019a20 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	b084      	sub	sp, #16
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	6078      	str	r0, [r7, #4]
 8019a28:	460b      	mov	r3, r1
 8019a2a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d107      	bne.n	8019a42 <tcp_recved+0x22>
 8019a32:	4b1f      	ldr	r3, [pc, #124]	; (8019ab0 <tcp_recved+0x90>)
 8019a34:	f240 32cf 	movw	r2, #975	; 0x3cf
 8019a38:	491e      	ldr	r1, [pc, #120]	; (8019ab4 <tcp_recved+0x94>)
 8019a3a:	481f      	ldr	r0, [pc, #124]	; (8019ab8 <tcp_recved+0x98>)
 8019a3c:	f00a fa60 	bl	8023f00 <iprintf>
 8019a40:	e032      	b.n	8019aa8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	7d1b      	ldrb	r3, [r3, #20]
 8019a46:	2b01      	cmp	r3, #1
 8019a48:	d106      	bne.n	8019a58 <tcp_recved+0x38>
 8019a4a:	4b19      	ldr	r3, [pc, #100]	; (8019ab0 <tcp_recved+0x90>)
 8019a4c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8019a50:	491a      	ldr	r1, [pc, #104]	; (8019abc <tcp_recved+0x9c>)
 8019a52:	4819      	ldr	r0, [pc, #100]	; (8019ab8 <tcp_recved+0x98>)
 8019a54:	f00a fa54 	bl	8023f00 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019a5c:	887b      	ldrh	r3, [r7, #2]
 8019a5e:	4413      	add	r3, r2
 8019a60:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8019a62:	89fb      	ldrh	r3, [r7, #14]
 8019a64:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019a68:	d804      	bhi.n	8019a74 <tcp_recved+0x54>
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019a6e:	89fa      	ldrh	r2, [r7, #14]
 8019a70:	429a      	cmp	r2, r3
 8019a72:	d204      	bcs.n	8019a7e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019a7a:	851a      	strh	r2, [r3, #40]	; 0x28
 8019a7c:	e002      	b.n	8019a84 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	89fa      	ldrh	r2, [r7, #14]
 8019a82:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8019a84:	6878      	ldr	r0, [r7, #4]
 8019a86:	f7ff ff71 	bl	801996c <tcp_update_rcv_ann_wnd>
 8019a8a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8019a8c:	68bb      	ldr	r3, [r7, #8]
 8019a8e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8019a92:	d309      	bcc.n	8019aa8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	8b5b      	ldrh	r3, [r3, #26]
 8019a98:	f043 0302 	orr.w	r3, r3, #2
 8019a9c:	b29a      	uxth	r2, r3
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019aa2:	6878      	ldr	r0, [r7, #4]
 8019aa4:	f004 fcc6 	bl	801e434 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8019aa8:	3710      	adds	r7, #16
 8019aaa:	46bd      	mov	sp, r7
 8019aac:	bd80      	pop	{r7, pc}
 8019aae:	bf00      	nop
 8019ab0:	08026a5c 	.word	0x08026a5c
 8019ab4:	08026cf8 	.word	0x08026cf8
 8019ab8:	08026aa0 	.word	0x08026aa0
 8019abc:	08026d10 	.word	0x08026d10

08019ac0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8019ac0:	b480      	push	{r7}
 8019ac2:	b083      	sub	sp, #12
 8019ac4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8019aca:	4b1e      	ldr	r3, [pc, #120]	; (8019b44 <tcp_new_port+0x84>)
 8019acc:	881b      	ldrh	r3, [r3, #0]
 8019ace:	3301      	adds	r3, #1
 8019ad0:	b29a      	uxth	r2, r3
 8019ad2:	4b1c      	ldr	r3, [pc, #112]	; (8019b44 <tcp_new_port+0x84>)
 8019ad4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8019ad6:	4b1b      	ldr	r3, [pc, #108]	; (8019b44 <tcp_new_port+0x84>)
 8019ad8:	881b      	ldrh	r3, [r3, #0]
 8019ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ade:	4293      	cmp	r3, r2
 8019ae0:	d103      	bne.n	8019aea <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8019ae2:	4b18      	ldr	r3, [pc, #96]	; (8019b44 <tcp_new_port+0x84>)
 8019ae4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019ae8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019aea:	2300      	movs	r3, #0
 8019aec:	71fb      	strb	r3, [r7, #7]
 8019aee:	e01e      	b.n	8019b2e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019af0:	79fb      	ldrb	r3, [r7, #7]
 8019af2:	4a15      	ldr	r2, [pc, #84]	; (8019b48 <tcp_new_port+0x88>)
 8019af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	603b      	str	r3, [r7, #0]
 8019afc:	e011      	b.n	8019b22 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8019afe:	683b      	ldr	r3, [r7, #0]
 8019b00:	8ada      	ldrh	r2, [r3, #22]
 8019b02:	4b10      	ldr	r3, [pc, #64]	; (8019b44 <tcp_new_port+0x84>)
 8019b04:	881b      	ldrh	r3, [r3, #0]
 8019b06:	429a      	cmp	r2, r3
 8019b08:	d108      	bne.n	8019b1c <tcp_new_port+0x5c>
        n++;
 8019b0a:	88bb      	ldrh	r3, [r7, #4]
 8019b0c:	3301      	adds	r3, #1
 8019b0e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8019b10:	88bb      	ldrh	r3, [r7, #4]
 8019b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019b16:	d3d8      	bcc.n	8019aca <tcp_new_port+0xa>
          return 0;
 8019b18:	2300      	movs	r3, #0
 8019b1a:	e00d      	b.n	8019b38 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019b1c:	683b      	ldr	r3, [r7, #0]
 8019b1e:	68db      	ldr	r3, [r3, #12]
 8019b20:	603b      	str	r3, [r7, #0]
 8019b22:	683b      	ldr	r3, [r7, #0]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d1ea      	bne.n	8019afe <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019b28:	79fb      	ldrb	r3, [r7, #7]
 8019b2a:	3301      	adds	r3, #1
 8019b2c:	71fb      	strb	r3, [r7, #7]
 8019b2e:	79fb      	ldrb	r3, [r7, #7]
 8019b30:	2b03      	cmp	r3, #3
 8019b32:	d9dd      	bls.n	8019af0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8019b34:	4b03      	ldr	r3, [pc, #12]	; (8019b44 <tcp_new_port+0x84>)
 8019b36:	881b      	ldrh	r3, [r3, #0]
}
 8019b38:	4618      	mov	r0, r3
 8019b3a:	370c      	adds	r7, #12
 8019b3c:	46bd      	mov	sp, r7
 8019b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b42:	4770      	bx	lr
 8019b44:	20000030 	.word	0x20000030
 8019b48:	08028ad0 	.word	0x08028ad0

08019b4c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8019b4c:	b580      	push	{r7, lr}
 8019b4e:	b08a      	sub	sp, #40	; 0x28
 8019b50:	af00      	add	r7, sp, #0
 8019b52:	60f8      	str	r0, [r7, #12]
 8019b54:	60b9      	str	r1, [r7, #8]
 8019b56:	603b      	str	r3, [r7, #0]
 8019b58:	4613      	mov	r3, r2
 8019b5a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8019b5c:	2300      	movs	r3, #0
 8019b5e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d109      	bne.n	8019b7a <tcp_connect+0x2e>
 8019b66:	4b7d      	ldr	r3, [pc, #500]	; (8019d5c <tcp_connect+0x210>)
 8019b68:	f240 4235 	movw	r2, #1077	; 0x435
 8019b6c:	497c      	ldr	r1, [pc, #496]	; (8019d60 <tcp_connect+0x214>)
 8019b6e:	487d      	ldr	r0, [pc, #500]	; (8019d64 <tcp_connect+0x218>)
 8019b70:	f00a f9c6 	bl	8023f00 <iprintf>
 8019b74:	f06f 030f 	mvn.w	r3, #15
 8019b78:	e0ec      	b.n	8019d54 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019b7a:	68bb      	ldr	r3, [r7, #8]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d109      	bne.n	8019b94 <tcp_connect+0x48>
 8019b80:	4b76      	ldr	r3, [pc, #472]	; (8019d5c <tcp_connect+0x210>)
 8019b82:	f240 4236 	movw	r2, #1078	; 0x436
 8019b86:	4978      	ldr	r1, [pc, #480]	; (8019d68 <tcp_connect+0x21c>)
 8019b88:	4876      	ldr	r0, [pc, #472]	; (8019d64 <tcp_connect+0x218>)
 8019b8a:	f00a f9b9 	bl	8023f00 <iprintf>
 8019b8e:	f06f 030f 	mvn.w	r3, #15
 8019b92:	e0df      	b.n	8019d54 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	7d1b      	ldrb	r3, [r3, #20]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d009      	beq.n	8019bb0 <tcp_connect+0x64>
 8019b9c:	4b6f      	ldr	r3, [pc, #444]	; (8019d5c <tcp_connect+0x210>)
 8019b9e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8019ba2:	4972      	ldr	r1, [pc, #456]	; (8019d6c <tcp_connect+0x220>)
 8019ba4:	486f      	ldr	r0, [pc, #444]	; (8019d64 <tcp_connect+0x218>)
 8019ba6:	f00a f9ab 	bl	8023f00 <iprintf>
 8019baa:	f06f 0309 	mvn.w	r3, #9
 8019bae:	e0d1      	b.n	8019d54 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8019bb0:	68bb      	ldr	r3, [r7, #8]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d002      	beq.n	8019bbc <tcp_connect+0x70>
 8019bb6:	68bb      	ldr	r3, [r7, #8]
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	e000      	b.n	8019bbe <tcp_connect+0x72>
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	68fa      	ldr	r2, [r7, #12]
 8019bc0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	88fa      	ldrh	r2, [r7, #6]
 8019bc6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	7a1b      	ldrb	r3, [r3, #8]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d006      	beq.n	8019bde <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	7a1b      	ldrb	r3, [r3, #8]
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	f7fe fbcd 	bl	8018374 <netif_get_by_index>
 8019bda:	6278      	str	r0, [r7, #36]	; 0x24
 8019bdc:	e005      	b.n	8019bea <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	3304      	adds	r3, #4
 8019be2:	4618      	mov	r0, r3
 8019be4:	f007 fb48 	bl	8021278 <ip4_route>
 8019be8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8019bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d102      	bne.n	8019bf6 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8019bf0:	f06f 0303 	mvn.w	r3, #3
 8019bf4:	e0ae      	b.n	8019d54 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019bf6:	68fb      	ldr	r3, [r7, #12]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d003      	beq.n	8019c04 <tcp_connect+0xb8>
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d111      	bne.n	8019c28 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8019c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d002      	beq.n	8019c10 <tcp_connect+0xc4>
 8019c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c0c:	3304      	adds	r3, #4
 8019c0e:	e000      	b.n	8019c12 <tcp_connect+0xc6>
 8019c10:	2300      	movs	r3, #0
 8019c12:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8019c14:	69fb      	ldr	r3, [r7, #28]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d102      	bne.n	8019c20 <tcp_connect+0xd4>
      return ERR_RTE;
 8019c1a:	f06f 0303 	mvn.w	r3, #3
 8019c1e:	e099      	b.n	8019d54 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019c20:	69fb      	ldr	r3, [r7, #28]
 8019c22:	681a      	ldr	r2, [r3, #0]
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	8adb      	ldrh	r3, [r3, #22]
 8019c2c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	8adb      	ldrh	r3, [r3, #22]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d10c      	bne.n	8019c50 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8019c36:	f7ff ff43 	bl	8019ac0 <tcp_new_port>
 8019c3a:	4603      	mov	r3, r0
 8019c3c:	461a      	mov	r2, r3
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	8adb      	ldrh	r3, [r3, #22]
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d102      	bne.n	8019c50 <tcp_connect+0x104>
      return ERR_BUF;
 8019c4a:	f06f 0301 	mvn.w	r3, #1
 8019c4e:	e081      	b.n	8019d54 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8019c50:	68f8      	ldr	r0, [r7, #12]
 8019c52:	f001 f867 	bl	801ad24 <tcp_next_iss>
 8019c56:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	2200      	movs	r2, #0
 8019c5c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8019c5e:	68fb      	ldr	r3, [r7, #12]
 8019c60:	697a      	ldr	r2, [r7, #20]
 8019c62:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8019c64:	697b      	ldr	r3, [r7, #20]
 8019c66:	1e5a      	subs	r2, r3, #1
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8019c6c:	697b      	ldr	r3, [r7, #20]
 8019c6e:	1e5a      	subs	r2, r3, #1
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8019c74:	697b      	ldr	r3, [r7, #20]
 8019c76:	1e5a      	subs	r2, r3, #1
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019c82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019c9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8019c9e:	68fb      	ldr	r3, [r7, #12]
 8019ca0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019ca4:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	3304      	adds	r3, #4
 8019cae:	461a      	mov	r2, r3
 8019cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019cb2:	f001 f85d 	bl	801ad70 <tcp_eff_send_mss_netif>
 8019cb6:	4603      	mov	r3, r0
 8019cb8:	461a      	mov	r2, r3
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	2201      	movs	r2, #1
 8019cc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	683a      	ldr	r2, [r7, #0]
 8019cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8019cce:	2102      	movs	r1, #2
 8019cd0:	68f8      	ldr	r0, [r7, #12]
 8019cd2:	f004 fac1 	bl	801e258 <tcp_enqueue_flags>
 8019cd6:	4603      	mov	r3, r0
 8019cd8:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8019cda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d136      	bne.n	8019d50 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	2202      	movs	r2, #2
 8019ce6:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8019ce8:	8b7b      	ldrh	r3, [r7, #26]
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d021      	beq.n	8019d32 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8019cee:	4b20      	ldr	r3, [pc, #128]	; (8019d70 <tcp_connect+0x224>)
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	68fa      	ldr	r2, [r7, #12]
 8019cf4:	429a      	cmp	r2, r3
 8019cf6:	d105      	bne.n	8019d04 <tcp_connect+0x1b8>
 8019cf8:	4b1d      	ldr	r3, [pc, #116]	; (8019d70 <tcp_connect+0x224>)
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	68db      	ldr	r3, [r3, #12]
 8019cfe:	4a1c      	ldr	r2, [pc, #112]	; (8019d70 <tcp_connect+0x224>)
 8019d00:	6013      	str	r3, [r2, #0]
 8019d02:	e013      	b.n	8019d2c <tcp_connect+0x1e0>
 8019d04:	4b1a      	ldr	r3, [pc, #104]	; (8019d70 <tcp_connect+0x224>)
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	623b      	str	r3, [r7, #32]
 8019d0a:	e00c      	b.n	8019d26 <tcp_connect+0x1da>
 8019d0c:	6a3b      	ldr	r3, [r7, #32]
 8019d0e:	68db      	ldr	r3, [r3, #12]
 8019d10:	68fa      	ldr	r2, [r7, #12]
 8019d12:	429a      	cmp	r2, r3
 8019d14:	d104      	bne.n	8019d20 <tcp_connect+0x1d4>
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	68da      	ldr	r2, [r3, #12]
 8019d1a:	6a3b      	ldr	r3, [r7, #32]
 8019d1c:	60da      	str	r2, [r3, #12]
 8019d1e:	e005      	b.n	8019d2c <tcp_connect+0x1e0>
 8019d20:	6a3b      	ldr	r3, [r7, #32]
 8019d22:	68db      	ldr	r3, [r3, #12]
 8019d24:	623b      	str	r3, [r7, #32]
 8019d26:	6a3b      	ldr	r3, [r7, #32]
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d1ef      	bne.n	8019d0c <tcp_connect+0x1c0>
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	2200      	movs	r2, #0
 8019d30:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8019d32:	4b10      	ldr	r3, [pc, #64]	; (8019d74 <tcp_connect+0x228>)
 8019d34:	681a      	ldr	r2, [r3, #0]
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	60da      	str	r2, [r3, #12]
 8019d3a:	4a0e      	ldr	r2, [pc, #56]	; (8019d74 <tcp_connect+0x228>)
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	6013      	str	r3, [r2, #0]
 8019d40:	f005 faee 	bl	801f320 <tcp_timer_needed>
 8019d44:	4b0c      	ldr	r3, [pc, #48]	; (8019d78 <tcp_connect+0x22c>)
 8019d46:	2201      	movs	r2, #1
 8019d48:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8019d4a:	68f8      	ldr	r0, [r7, #12]
 8019d4c:	f004 fb72 	bl	801e434 <tcp_output>
  }
  return ret;
 8019d50:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8019d54:	4618      	mov	r0, r3
 8019d56:	3728      	adds	r7, #40	; 0x28
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	bd80      	pop	{r7, pc}
 8019d5c:	08026a5c 	.word	0x08026a5c
 8019d60:	08026d38 	.word	0x08026d38
 8019d64:	08026aa0 	.word	0x08026aa0
 8019d68:	08026d54 	.word	0x08026d54
 8019d6c:	08026d70 	.word	0x08026d70
 8019d70:	2000bfb0 	.word	0x2000bfb0
 8019d74:	2000bfb8 	.word	0x2000bfb8
 8019d78:	2000bfc0 	.word	0x2000bfc0

08019d7c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8019d7c:	b5b0      	push	{r4, r5, r7, lr}
 8019d7e:	b090      	sub	sp, #64	; 0x40
 8019d80:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8019d82:	2300      	movs	r3, #0
 8019d84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8019d88:	4b94      	ldr	r3, [pc, #592]	; (8019fdc <tcp_slowtmr+0x260>)
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	3301      	adds	r3, #1
 8019d8e:	4a93      	ldr	r2, [pc, #588]	; (8019fdc <tcp_slowtmr+0x260>)
 8019d90:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8019d92:	4b93      	ldr	r3, [pc, #588]	; (8019fe0 <tcp_slowtmr+0x264>)
 8019d94:	781b      	ldrb	r3, [r3, #0]
 8019d96:	3301      	adds	r3, #1
 8019d98:	b2da      	uxtb	r2, r3
 8019d9a:	4b91      	ldr	r3, [pc, #580]	; (8019fe0 <tcp_slowtmr+0x264>)
 8019d9c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8019d9e:	2300      	movs	r3, #0
 8019da0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8019da2:	4b90      	ldr	r3, [pc, #576]	; (8019fe4 <tcp_slowtmr+0x268>)
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8019da8:	e29d      	b.n	801a2e6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8019daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dac:	7d1b      	ldrb	r3, [r3, #20]
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d106      	bne.n	8019dc0 <tcp_slowtmr+0x44>
 8019db2:	4b8d      	ldr	r3, [pc, #564]	; (8019fe8 <tcp_slowtmr+0x26c>)
 8019db4:	f240 42be 	movw	r2, #1214	; 0x4be
 8019db8:	498c      	ldr	r1, [pc, #560]	; (8019fec <tcp_slowtmr+0x270>)
 8019dba:	488d      	ldr	r0, [pc, #564]	; (8019ff0 <tcp_slowtmr+0x274>)
 8019dbc:	f00a f8a0 	bl	8023f00 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8019dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dc2:	7d1b      	ldrb	r3, [r3, #20]
 8019dc4:	2b01      	cmp	r3, #1
 8019dc6:	d106      	bne.n	8019dd6 <tcp_slowtmr+0x5a>
 8019dc8:	4b87      	ldr	r3, [pc, #540]	; (8019fe8 <tcp_slowtmr+0x26c>)
 8019dca:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8019dce:	4989      	ldr	r1, [pc, #548]	; (8019ff4 <tcp_slowtmr+0x278>)
 8019dd0:	4887      	ldr	r0, [pc, #540]	; (8019ff0 <tcp_slowtmr+0x274>)
 8019dd2:	f00a f895 	bl	8023f00 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8019dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd8:	7d1b      	ldrb	r3, [r3, #20]
 8019dda:	2b0a      	cmp	r3, #10
 8019ddc:	d106      	bne.n	8019dec <tcp_slowtmr+0x70>
 8019dde:	4b82      	ldr	r3, [pc, #520]	; (8019fe8 <tcp_slowtmr+0x26c>)
 8019de0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8019de4:	4984      	ldr	r1, [pc, #528]	; (8019ff8 <tcp_slowtmr+0x27c>)
 8019de6:	4882      	ldr	r0, [pc, #520]	; (8019ff0 <tcp_slowtmr+0x274>)
 8019de8:	f00a f88a 	bl	8023f00 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8019dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dee:	7f9a      	ldrb	r2, [r3, #30]
 8019df0:	4b7b      	ldr	r3, [pc, #492]	; (8019fe0 <tcp_slowtmr+0x264>)
 8019df2:	781b      	ldrb	r3, [r3, #0]
 8019df4:	429a      	cmp	r2, r3
 8019df6:	d105      	bne.n	8019e04 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8019df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dfa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dfe:	68db      	ldr	r3, [r3, #12]
 8019e00:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8019e02:	e270      	b.n	801a2e6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8019e04:	4b76      	ldr	r3, [pc, #472]	; (8019fe0 <tcp_slowtmr+0x264>)
 8019e06:	781a      	ldrb	r2, [r3, #0]
 8019e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e0a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8019e12:	2300      	movs	r3, #0
 8019e14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8019e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e1a:	7d1b      	ldrb	r3, [r3, #20]
 8019e1c:	2b02      	cmp	r3, #2
 8019e1e:	d10a      	bne.n	8019e36 <tcp_slowtmr+0xba>
 8019e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019e26:	2b05      	cmp	r3, #5
 8019e28:	d905      	bls.n	8019e36 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8019e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e2e:	3301      	adds	r3, #1
 8019e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019e34:	e11e      	b.n	801a074 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8019e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019e3c:	2b0b      	cmp	r3, #11
 8019e3e:	d905      	bls.n	8019e4c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8019e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e44:	3301      	adds	r3, #1
 8019e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019e4a:	e113      	b.n	801a074 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8019e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d075      	beq.n	8019f42 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8019e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d006      	beq.n	8019e6c <tcp_slowtmr+0xf0>
 8019e5e:	4b62      	ldr	r3, [pc, #392]	; (8019fe8 <tcp_slowtmr+0x26c>)
 8019e60:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8019e64:	4965      	ldr	r1, [pc, #404]	; (8019ffc <tcp_slowtmr+0x280>)
 8019e66:	4862      	ldr	r0, [pc, #392]	; (8019ff0 <tcp_slowtmr+0x274>)
 8019e68:	f00a f84a 	bl	8023f00 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8019e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d106      	bne.n	8019e82 <tcp_slowtmr+0x106>
 8019e74:	4b5c      	ldr	r3, [pc, #368]	; (8019fe8 <tcp_slowtmr+0x26c>)
 8019e76:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8019e7a:	4961      	ldr	r1, [pc, #388]	; (801a000 <tcp_slowtmr+0x284>)
 8019e7c:	485c      	ldr	r0, [pc, #368]	; (8019ff0 <tcp_slowtmr+0x274>)
 8019e7e:	f00a f83f 	bl	8023f00 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8019e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e84:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019e88:	2b0b      	cmp	r3, #11
 8019e8a:	d905      	bls.n	8019e98 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8019e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e90:	3301      	adds	r3, #1
 8019e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019e96:	e0ed      	b.n	801a074 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8019e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019e9e:	3b01      	subs	r3, #1
 8019ea0:	4a58      	ldr	r2, [pc, #352]	; (801a004 <tcp_slowtmr+0x288>)
 8019ea2:	5cd3      	ldrb	r3, [r2, r3]
 8019ea4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8019ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ea8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019eac:	7c7a      	ldrb	r2, [r7, #17]
 8019eae:	429a      	cmp	r2, r3
 8019eb0:	d907      	bls.n	8019ec2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8019eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019eb8:	3301      	adds	r3, #1
 8019eba:	b2da      	uxtb	r2, r3
 8019ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ebe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8019ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ec4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019ec8:	7c7a      	ldrb	r2, [r7, #17]
 8019eca:	429a      	cmp	r2, r3
 8019ecc:	f200 80d2 	bhi.w	801a074 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8019ed0:	2301      	movs	r3, #1
 8019ed2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8019ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d108      	bne.n	8019ef0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8019ede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019ee0:	f005 f950 	bl	801f184 <tcp_zero_window_probe>
 8019ee4:	4603      	mov	r3, r0
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d014      	beq.n	8019f14 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8019eea:	2300      	movs	r3, #0
 8019eec:	623b      	str	r3, [r7, #32]
 8019eee:	e011      	b.n	8019f14 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8019ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ef2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019ef6:	4619      	mov	r1, r3
 8019ef8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019efa:	f004 f815 	bl	801df28 <tcp_split_unsent_seg>
 8019efe:	4603      	mov	r3, r0
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d107      	bne.n	8019f14 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8019f04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019f06:	f004 fa95 	bl	801e434 <tcp_output>
 8019f0a:	4603      	mov	r3, r0
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d101      	bne.n	8019f14 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8019f10:	2300      	movs	r3, #0
 8019f12:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8019f14:	6a3b      	ldr	r3, [r7, #32]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	f000 80ac 	beq.w	801a074 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8019f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f1e:	2200      	movs	r2, #0
 8019f20:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8019f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f26:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019f2a:	2b06      	cmp	r3, #6
 8019f2c:	f200 80a2 	bhi.w	801a074 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8019f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019f36:	3301      	adds	r3, #1
 8019f38:	b2da      	uxtb	r2, r3
 8019f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f3c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8019f40:	e098      	b.n	801a074 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8019f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	db0f      	blt.n	8019f6c <tcp_slowtmr+0x1f0>
 8019f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f4e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019f52:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019f56:	4293      	cmp	r3, r2
 8019f58:	d008      	beq.n	8019f6c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8019f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019f60:	b29b      	uxth	r3, r3
 8019f62:	3301      	adds	r3, #1
 8019f64:	b29b      	uxth	r3, r3
 8019f66:	b21a      	sxth	r2, r3
 8019f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f6a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8019f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f6e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8019f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f74:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8019f78:	429a      	cmp	r2, r3
 8019f7a:	db7b      	blt.n	801a074 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8019f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019f7e:	f004 fd4b 	bl	801ea18 <tcp_rexmit_rto_prepare>
 8019f82:	4603      	mov	r3, r0
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d007      	beq.n	8019f98 <tcp_slowtmr+0x21c>
 8019f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d171      	bne.n	801a074 <tcp_slowtmr+0x2f8>
 8019f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d06d      	beq.n	801a074 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8019f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f9a:	7d1b      	ldrb	r3, [r3, #20]
 8019f9c:	2b02      	cmp	r3, #2
 8019f9e:	d03a      	beq.n	801a016 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8019fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019fa6:	2b0c      	cmp	r3, #12
 8019fa8:	bf28      	it	cs
 8019faa:	230c      	movcs	r3, #12
 8019fac:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8019fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019fb4:	10db      	asrs	r3, r3, #3
 8019fb6:	b21b      	sxth	r3, r3
 8019fb8:	461a      	mov	r2, r3
 8019fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fbc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019fc0:	4413      	add	r3, r2
 8019fc2:	7efa      	ldrb	r2, [r7, #27]
 8019fc4:	4910      	ldr	r1, [pc, #64]	; (801a008 <tcp_slowtmr+0x28c>)
 8019fc6:	5c8a      	ldrb	r2, [r1, r2]
 8019fc8:	4093      	lsls	r3, r2
 8019fca:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8019fcc:	697b      	ldr	r3, [r7, #20]
 8019fce:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8019fd2:	4293      	cmp	r3, r2
 8019fd4:	dc1a      	bgt.n	801a00c <tcp_slowtmr+0x290>
 8019fd6:	697b      	ldr	r3, [r7, #20]
 8019fd8:	b21a      	sxth	r2, r3
 8019fda:	e019      	b.n	801a010 <tcp_slowtmr+0x294>
 8019fdc:	2000bfac 	.word	0x2000bfac
 8019fe0:	2000bfc2 	.word	0x2000bfc2
 8019fe4:	2000bfb8 	.word	0x2000bfb8
 8019fe8:	08026a5c 	.word	0x08026a5c
 8019fec:	08026da0 	.word	0x08026da0
 8019ff0:	08026aa0 	.word	0x08026aa0
 8019ff4:	08026dcc 	.word	0x08026dcc
 8019ff8:	08026df8 	.word	0x08026df8
 8019ffc:	08026e28 	.word	0x08026e28
 801a000:	08026e5c 	.word	0x08026e5c
 801a004:	08028ac8 	.word	0x08028ac8
 801a008:	08028ab8 	.word	0x08028ab8
 801a00c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a012:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801a016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a018:	2200      	movs	r2, #0
 801a01a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801a01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a01e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a024:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a028:	4293      	cmp	r3, r2
 801a02a:	bf28      	it	cs
 801a02c:	4613      	movcs	r3, r2
 801a02e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801a030:	8a7b      	ldrh	r3, [r7, #18]
 801a032:	085b      	lsrs	r3, r3, #1
 801a034:	b29a      	uxth	r2, r3
 801a036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a038:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801a03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a03e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a046:	005b      	lsls	r3, r3, #1
 801a048:	b29b      	uxth	r3, r3
 801a04a:	429a      	cmp	r2, r3
 801a04c:	d206      	bcs.n	801a05c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801a04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a052:	005b      	lsls	r3, r3, #1
 801a054:	b29a      	uxth	r2, r3
 801a056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a058:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801a05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a05e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801a060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a062:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801a066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a068:	2200      	movs	r2, #0
 801a06a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801a06e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a070:	f004 fd42 	bl	801eaf8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801a074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a076:	7d1b      	ldrb	r3, [r3, #20]
 801a078:	2b06      	cmp	r3, #6
 801a07a:	d111      	bne.n	801a0a0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a07e:	8b5b      	ldrh	r3, [r3, #26]
 801a080:	f003 0310 	and.w	r3, r3, #16
 801a084:	2b00      	cmp	r3, #0
 801a086:	d00b      	beq.n	801a0a0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a088:	4b9c      	ldr	r3, [pc, #624]	; (801a2fc <tcp_slowtmr+0x580>)
 801a08a:	681a      	ldr	r2, [r3, #0]
 801a08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a08e:	6a1b      	ldr	r3, [r3, #32]
 801a090:	1ad3      	subs	r3, r2, r3
 801a092:	2b28      	cmp	r3, #40	; 0x28
 801a094:	d904      	bls.n	801a0a0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801a096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a09a:	3301      	adds	r3, #1
 801a09c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0a2:	7a5b      	ldrb	r3, [r3, #9]
 801a0a4:	f003 0308 	and.w	r3, r3, #8
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d04a      	beq.n	801a142 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801a0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ae:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a0b0:	2b04      	cmp	r3, #4
 801a0b2:	d003      	beq.n	801a0bc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801a0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0b6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801a0b8:	2b07      	cmp	r3, #7
 801a0ba:	d142      	bne.n	801a142 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a0bc:	4b8f      	ldr	r3, [pc, #572]	; (801a2fc <tcp_slowtmr+0x580>)
 801a0be:	681a      	ldr	r2, [r3, #0]
 801a0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0c2:	6a1b      	ldr	r3, [r3, #32]
 801a0c4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0c8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801a0cc:	4b8c      	ldr	r3, [pc, #560]	; (801a300 <tcp_slowtmr+0x584>)
 801a0ce:	440b      	add	r3, r1
 801a0d0:	498c      	ldr	r1, [pc, #560]	; (801a304 <tcp_slowtmr+0x588>)
 801a0d2:	fba1 1303 	umull	r1, r3, r1, r3
 801a0d6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a0d8:	429a      	cmp	r2, r3
 801a0da:	d90a      	bls.n	801a0f2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801a0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a0e0:	3301      	adds	r3, #1
 801a0e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801a0e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a0ea:	3301      	adds	r3, #1
 801a0ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a0f0:	e027      	b.n	801a142 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a0f2:	4b82      	ldr	r3, [pc, #520]	; (801a2fc <tcp_slowtmr+0x580>)
 801a0f4:	681a      	ldr	r2, [r3, #0]
 801a0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0f8:	6a1b      	ldr	r3, [r3, #32]
 801a0fa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801a0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0fe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a104:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801a108:	4618      	mov	r0, r3
 801a10a:	4b7f      	ldr	r3, [pc, #508]	; (801a308 <tcp_slowtmr+0x58c>)
 801a10c:	fb00 f303 	mul.w	r3, r0, r3
 801a110:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801a112:	497c      	ldr	r1, [pc, #496]	; (801a304 <tcp_slowtmr+0x588>)
 801a114:	fba1 1303 	umull	r1, r3, r1, r3
 801a118:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a11a:	429a      	cmp	r2, r3
 801a11c:	d911      	bls.n	801a142 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801a11e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a120:	f004 fff0 	bl	801f104 <tcp_keepalive>
 801a124:	4603      	mov	r3, r0
 801a126:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801a12a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d107      	bne.n	801a142 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a134:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801a138:	3301      	adds	r3, #1
 801a13a:	b2da      	uxtb	r2, r3
 801a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a13e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a146:	2b00      	cmp	r3, #0
 801a148:	d011      	beq.n	801a16e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801a14a:	4b6c      	ldr	r3, [pc, #432]	; (801a2fc <tcp_slowtmr+0x580>)
 801a14c:	681a      	ldr	r2, [r3, #0]
 801a14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a150:	6a1b      	ldr	r3, [r3, #32]
 801a152:	1ad2      	subs	r2, r2, r3
 801a154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a156:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a15a:	4619      	mov	r1, r3
 801a15c:	460b      	mov	r3, r1
 801a15e:	005b      	lsls	r3, r3, #1
 801a160:	440b      	add	r3, r1
 801a162:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801a164:	429a      	cmp	r2, r3
 801a166:	d302      	bcc.n	801a16e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801a168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a16a:	f000 feab 	bl	801aec4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801a16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a170:	7d1b      	ldrb	r3, [r3, #20]
 801a172:	2b03      	cmp	r3, #3
 801a174:	d10b      	bne.n	801a18e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a176:	4b61      	ldr	r3, [pc, #388]	; (801a2fc <tcp_slowtmr+0x580>)
 801a178:	681a      	ldr	r2, [r3, #0]
 801a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a17c:	6a1b      	ldr	r3, [r3, #32]
 801a17e:	1ad3      	subs	r3, r2, r3
 801a180:	2b28      	cmp	r3, #40	; 0x28
 801a182:	d904      	bls.n	801a18e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801a184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a188:	3301      	adds	r3, #1
 801a18a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801a18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a190:	7d1b      	ldrb	r3, [r3, #20]
 801a192:	2b09      	cmp	r3, #9
 801a194:	d10b      	bne.n	801a1ae <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a196:	4b59      	ldr	r3, [pc, #356]	; (801a2fc <tcp_slowtmr+0x580>)
 801a198:	681a      	ldr	r2, [r3, #0]
 801a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a19c:	6a1b      	ldr	r3, [r3, #32]
 801a19e:	1ad3      	subs	r3, r2, r3
 801a1a0:	2bf0      	cmp	r3, #240	; 0xf0
 801a1a2:	d904      	bls.n	801a1ae <tcp_slowtmr+0x432>
        ++pcb_remove;
 801a1a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a1a8:	3301      	adds	r3, #1
 801a1aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a1ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d060      	beq.n	801a278 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801a1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a1bc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801a1be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a1c0:	f000 fccc 	bl	801ab5c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d010      	beq.n	801a1ec <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801a1ca:	4b50      	ldr	r3, [pc, #320]	; (801a30c <tcp_slowtmr+0x590>)
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a1d0:	429a      	cmp	r2, r3
 801a1d2:	d106      	bne.n	801a1e2 <tcp_slowtmr+0x466>
 801a1d4:	4b4e      	ldr	r3, [pc, #312]	; (801a310 <tcp_slowtmr+0x594>)
 801a1d6:	f240 526d 	movw	r2, #1389	; 0x56d
 801a1da:	494e      	ldr	r1, [pc, #312]	; (801a314 <tcp_slowtmr+0x598>)
 801a1dc:	484e      	ldr	r0, [pc, #312]	; (801a318 <tcp_slowtmr+0x59c>)
 801a1de:	f009 fe8f 	bl	8023f00 <iprintf>
        prev->next = pcb->next;
 801a1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1e4:	68da      	ldr	r2, [r3, #12]
 801a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1e8:	60da      	str	r2, [r3, #12]
 801a1ea:	e00f      	b.n	801a20c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801a1ec:	4b47      	ldr	r3, [pc, #284]	; (801a30c <tcp_slowtmr+0x590>)
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a1f2:	429a      	cmp	r2, r3
 801a1f4:	d006      	beq.n	801a204 <tcp_slowtmr+0x488>
 801a1f6:	4b46      	ldr	r3, [pc, #280]	; (801a310 <tcp_slowtmr+0x594>)
 801a1f8:	f240 5271 	movw	r2, #1393	; 0x571
 801a1fc:	4947      	ldr	r1, [pc, #284]	; (801a31c <tcp_slowtmr+0x5a0>)
 801a1fe:	4846      	ldr	r0, [pc, #280]	; (801a318 <tcp_slowtmr+0x59c>)
 801a200:	f009 fe7e 	bl	8023f00 <iprintf>
        tcp_active_pcbs = pcb->next;
 801a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a206:	68db      	ldr	r3, [r3, #12]
 801a208:	4a40      	ldr	r2, [pc, #256]	; (801a30c <tcp_slowtmr+0x590>)
 801a20a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801a20c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a210:	2b00      	cmp	r3, #0
 801a212:	d013      	beq.n	801a23c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a216:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801a218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a21a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a21c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a220:	3304      	adds	r3, #4
 801a222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a224:	8ad2      	ldrh	r2, [r2, #22]
 801a226:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a228:	8b09      	ldrh	r1, [r1, #24]
 801a22a:	9102      	str	r1, [sp, #8]
 801a22c:	9201      	str	r2, [sp, #4]
 801a22e:	9300      	str	r3, [sp, #0]
 801a230:	462b      	mov	r3, r5
 801a232:	4622      	mov	r2, r4
 801a234:	4601      	mov	r1, r0
 801a236:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a238:	f004 feb0 	bl	801ef9c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a23e:	691b      	ldr	r3, [r3, #16]
 801a240:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801a242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a244:	7d1b      	ldrb	r3, [r3, #20]
 801a246:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a24a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a24e:	68db      	ldr	r3, [r3, #12]
 801a250:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a252:	6838      	ldr	r0, [r7, #0]
 801a254:	f7fe fed8 	bl	8019008 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801a258:	4b31      	ldr	r3, [pc, #196]	; (801a320 <tcp_slowtmr+0x5a4>)
 801a25a:	2200      	movs	r2, #0
 801a25c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	2b00      	cmp	r3, #0
 801a262:	d004      	beq.n	801a26e <tcp_slowtmr+0x4f2>
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	f06f 010c 	mvn.w	r1, #12
 801a26a:	68b8      	ldr	r0, [r7, #8]
 801a26c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801a26e:	4b2c      	ldr	r3, [pc, #176]	; (801a320 <tcp_slowtmr+0x5a4>)
 801a270:	781b      	ldrb	r3, [r3, #0]
 801a272:	2b00      	cmp	r3, #0
 801a274:	d037      	beq.n	801a2e6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801a276:	e592      	b.n	8019d9e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801a278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a27a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a27e:	68db      	ldr	r3, [r3, #12]
 801a280:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801a282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a284:	7f1b      	ldrb	r3, [r3, #28]
 801a286:	3301      	adds	r3, #1
 801a288:	b2da      	uxtb	r2, r3
 801a28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a28c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801a28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a290:	7f1a      	ldrb	r2, [r3, #28]
 801a292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a294:	7f5b      	ldrb	r3, [r3, #29]
 801a296:	429a      	cmp	r2, r3
 801a298:	d325      	bcc.n	801a2e6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801a29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a29c:	2200      	movs	r2, #0
 801a29e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801a2a0:	4b1f      	ldr	r3, [pc, #124]	; (801a320 <tcp_slowtmr+0x5a4>)
 801a2a2:	2200      	movs	r2, #0
 801a2a4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801a2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d00b      	beq.n	801a2c8 <tcp_slowtmr+0x54c>
 801a2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a2b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a2b8:	6912      	ldr	r2, [r2, #16]
 801a2ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a2bc:	4610      	mov	r0, r2
 801a2be:	4798      	blx	r3
 801a2c0:	4603      	mov	r3, r0
 801a2c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a2c6:	e002      	b.n	801a2ce <tcp_slowtmr+0x552>
 801a2c8:	2300      	movs	r3, #0
 801a2ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801a2ce:	4b14      	ldr	r3, [pc, #80]	; (801a320 <tcp_slowtmr+0x5a4>)
 801a2d0:	781b      	ldrb	r3, [r3, #0]
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d000      	beq.n	801a2d8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801a2d6:	e562      	b.n	8019d9e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801a2d8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d102      	bne.n	801a2e6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801a2e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a2e2:	f004 f8a7 	bl	801e434 <tcp_output>
  while (pcb != NULL) {
 801a2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	f47f ad5e 	bne.w	8019daa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801a2ee:	2300      	movs	r3, #0
 801a2f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801a2f2:	4b0c      	ldr	r3, [pc, #48]	; (801a324 <tcp_slowtmr+0x5a8>)
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a2f8:	e069      	b.n	801a3ce <tcp_slowtmr+0x652>
 801a2fa:	bf00      	nop
 801a2fc:	2000bfac 	.word	0x2000bfac
 801a300:	000a4cb8 	.word	0x000a4cb8
 801a304:	10624dd3 	.word	0x10624dd3
 801a308:	000124f8 	.word	0x000124f8
 801a30c:	2000bfb8 	.word	0x2000bfb8
 801a310:	08026a5c 	.word	0x08026a5c
 801a314:	08026e94 	.word	0x08026e94
 801a318:	08026aa0 	.word	0x08026aa0
 801a31c:	08026ec0 	.word	0x08026ec0
 801a320:	2000bfc0 	.word	0x2000bfc0
 801a324:	2000bfbc 	.word	0x2000bfbc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a32a:	7d1b      	ldrb	r3, [r3, #20]
 801a32c:	2b0a      	cmp	r3, #10
 801a32e:	d006      	beq.n	801a33e <tcp_slowtmr+0x5c2>
 801a330:	4b2b      	ldr	r3, [pc, #172]	; (801a3e0 <tcp_slowtmr+0x664>)
 801a332:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801a336:	492b      	ldr	r1, [pc, #172]	; (801a3e4 <tcp_slowtmr+0x668>)
 801a338:	482b      	ldr	r0, [pc, #172]	; (801a3e8 <tcp_slowtmr+0x66c>)
 801a33a:	f009 fde1 	bl	8023f00 <iprintf>
    pcb_remove = 0;
 801a33e:	2300      	movs	r3, #0
 801a340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a344:	4b29      	ldr	r3, [pc, #164]	; (801a3ec <tcp_slowtmr+0x670>)
 801a346:	681a      	ldr	r2, [r3, #0]
 801a348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a34a:	6a1b      	ldr	r3, [r3, #32]
 801a34c:	1ad3      	subs	r3, r2, r3
 801a34e:	2bf0      	cmp	r3, #240	; 0xf0
 801a350:	d904      	bls.n	801a35c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801a352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a356:	3301      	adds	r3, #1
 801a358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a360:	2b00      	cmp	r3, #0
 801a362:	d02f      	beq.n	801a3c4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801a364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a366:	f000 fbf9 	bl	801ab5c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d010      	beq.n	801a392 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801a370:	4b1f      	ldr	r3, [pc, #124]	; (801a3f0 <tcp_slowtmr+0x674>)
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a376:	429a      	cmp	r2, r3
 801a378:	d106      	bne.n	801a388 <tcp_slowtmr+0x60c>
 801a37a:	4b19      	ldr	r3, [pc, #100]	; (801a3e0 <tcp_slowtmr+0x664>)
 801a37c:	f240 52af 	movw	r2, #1455	; 0x5af
 801a380:	491c      	ldr	r1, [pc, #112]	; (801a3f4 <tcp_slowtmr+0x678>)
 801a382:	4819      	ldr	r0, [pc, #100]	; (801a3e8 <tcp_slowtmr+0x66c>)
 801a384:	f009 fdbc 	bl	8023f00 <iprintf>
        prev->next = pcb->next;
 801a388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a38a:	68da      	ldr	r2, [r3, #12]
 801a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a38e:	60da      	str	r2, [r3, #12]
 801a390:	e00f      	b.n	801a3b2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801a392:	4b17      	ldr	r3, [pc, #92]	; (801a3f0 <tcp_slowtmr+0x674>)
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a398:	429a      	cmp	r2, r3
 801a39a:	d006      	beq.n	801a3aa <tcp_slowtmr+0x62e>
 801a39c:	4b10      	ldr	r3, [pc, #64]	; (801a3e0 <tcp_slowtmr+0x664>)
 801a39e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801a3a2:	4915      	ldr	r1, [pc, #84]	; (801a3f8 <tcp_slowtmr+0x67c>)
 801a3a4:	4810      	ldr	r0, [pc, #64]	; (801a3e8 <tcp_slowtmr+0x66c>)
 801a3a6:	f009 fdab 	bl	8023f00 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3ac:	68db      	ldr	r3, [r3, #12]
 801a3ae:	4a10      	ldr	r2, [pc, #64]	; (801a3f0 <tcp_slowtmr+0x674>)
 801a3b0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801a3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3b4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801a3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3b8:	68db      	ldr	r3, [r3, #12]
 801a3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a3bc:	69f8      	ldr	r0, [r7, #28]
 801a3be:	f7fe fe23 	bl	8019008 <tcp_free>
 801a3c2:	e004      	b.n	801a3ce <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801a3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3ca:	68db      	ldr	r3, [r3, #12]
 801a3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d1a9      	bne.n	801a328 <tcp_slowtmr+0x5ac>
    }
  }
}
 801a3d4:	bf00      	nop
 801a3d6:	bf00      	nop
 801a3d8:	3730      	adds	r7, #48	; 0x30
 801a3da:	46bd      	mov	sp, r7
 801a3dc:	bdb0      	pop	{r4, r5, r7, pc}
 801a3de:	bf00      	nop
 801a3e0:	08026a5c 	.word	0x08026a5c
 801a3e4:	08026eec 	.word	0x08026eec
 801a3e8:	08026aa0 	.word	0x08026aa0
 801a3ec:	2000bfac 	.word	0x2000bfac
 801a3f0:	2000bfbc 	.word	0x2000bfbc
 801a3f4:	08026f1c 	.word	0x08026f1c
 801a3f8:	08026f44 	.word	0x08026f44

0801a3fc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b082      	sub	sp, #8
 801a400:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801a402:	4b2d      	ldr	r3, [pc, #180]	; (801a4b8 <tcp_fasttmr+0xbc>)
 801a404:	781b      	ldrb	r3, [r3, #0]
 801a406:	3301      	adds	r3, #1
 801a408:	b2da      	uxtb	r2, r3
 801a40a:	4b2b      	ldr	r3, [pc, #172]	; (801a4b8 <tcp_fasttmr+0xbc>)
 801a40c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801a40e:	4b2b      	ldr	r3, [pc, #172]	; (801a4bc <tcp_fasttmr+0xc0>)
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a414:	e048      	b.n	801a4a8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	7f9a      	ldrb	r2, [r3, #30]
 801a41a:	4b27      	ldr	r3, [pc, #156]	; (801a4b8 <tcp_fasttmr+0xbc>)
 801a41c:	781b      	ldrb	r3, [r3, #0]
 801a41e:	429a      	cmp	r2, r3
 801a420:	d03f      	beq.n	801a4a2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801a422:	4b25      	ldr	r3, [pc, #148]	; (801a4b8 <tcp_fasttmr+0xbc>)
 801a424:	781a      	ldrb	r2, [r3, #0]
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	8b5b      	ldrh	r3, [r3, #26]
 801a42e:	f003 0301 	and.w	r3, r3, #1
 801a432:	2b00      	cmp	r3, #0
 801a434:	d010      	beq.n	801a458 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	8b5b      	ldrh	r3, [r3, #26]
 801a43a:	f043 0302 	orr.w	r3, r3, #2
 801a43e:	b29a      	uxth	r2, r3
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801a444:	6878      	ldr	r0, [r7, #4]
 801a446:	f003 fff5 	bl	801e434 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	8b5b      	ldrh	r3, [r3, #26]
 801a44e:	f023 0303 	bic.w	r3, r3, #3
 801a452:	b29a      	uxth	r2, r3
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	8b5b      	ldrh	r3, [r3, #26]
 801a45c:	f003 0308 	and.w	r3, r3, #8
 801a460:	2b00      	cmp	r3, #0
 801a462:	d009      	beq.n	801a478 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	8b5b      	ldrh	r3, [r3, #26]
 801a468:	f023 0308 	bic.w	r3, r3, #8
 801a46c:	b29a      	uxth	r2, r3
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801a472:	6878      	ldr	r0, [r7, #4]
 801a474:	f7fe ff5c 	bl	8019330 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	68db      	ldr	r3, [r3, #12]
 801a47c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a482:	2b00      	cmp	r3, #0
 801a484:	d00a      	beq.n	801a49c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801a486:	4b0e      	ldr	r3, [pc, #56]	; (801a4c0 <tcp_fasttmr+0xc4>)
 801a488:	2200      	movs	r2, #0
 801a48a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801a48c:	6878      	ldr	r0, [r7, #4]
 801a48e:	f000 f819 	bl	801a4c4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801a492:	4b0b      	ldr	r3, [pc, #44]	; (801a4c0 <tcp_fasttmr+0xc4>)
 801a494:	781b      	ldrb	r3, [r3, #0]
 801a496:	2b00      	cmp	r3, #0
 801a498:	d000      	beq.n	801a49c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801a49a:	e7b8      	b.n	801a40e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801a49c:	683b      	ldr	r3, [r7, #0]
 801a49e:	607b      	str	r3, [r7, #4]
 801a4a0:	e002      	b.n	801a4a8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	68db      	ldr	r3, [r3, #12]
 801a4a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d1b3      	bne.n	801a416 <tcp_fasttmr+0x1a>
    }
  }
}
 801a4ae:	bf00      	nop
 801a4b0:	bf00      	nop
 801a4b2:	3708      	adds	r7, #8
 801a4b4:	46bd      	mov	sp, r7
 801a4b6:	bd80      	pop	{r7, pc}
 801a4b8:	2000bfc2 	.word	0x2000bfc2
 801a4bc:	2000bfb8 	.word	0x2000bfb8
 801a4c0:	2000bfc0 	.word	0x2000bfc0

0801a4c4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801a4c4:	b590      	push	{r4, r7, lr}
 801a4c6:	b085      	sub	sp, #20
 801a4c8:	af00      	add	r7, sp, #0
 801a4ca:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d109      	bne.n	801a4e6 <tcp_process_refused_data+0x22>
 801a4d2:	4b37      	ldr	r3, [pc, #220]	; (801a5b0 <tcp_process_refused_data+0xec>)
 801a4d4:	f240 6209 	movw	r2, #1545	; 0x609
 801a4d8:	4936      	ldr	r1, [pc, #216]	; (801a5b4 <tcp_process_refused_data+0xf0>)
 801a4da:	4837      	ldr	r0, [pc, #220]	; (801a5b8 <tcp_process_refused_data+0xf4>)
 801a4dc:	f009 fd10 	bl	8023f00 <iprintf>
 801a4e0:	f06f 030f 	mvn.w	r3, #15
 801a4e4:	e060      	b.n	801a5a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a4ea:	7b5b      	ldrb	r3, [r3, #13]
 801a4ec:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a4f2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	2200      	movs	r2, #0
 801a4f8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a500:	2b00      	cmp	r3, #0
 801a502:	d00b      	beq.n	801a51c <tcp_process_refused_data+0x58>
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	6918      	ldr	r0, [r3, #16]
 801a50e:	2300      	movs	r3, #0
 801a510:	68ba      	ldr	r2, [r7, #8]
 801a512:	6879      	ldr	r1, [r7, #4]
 801a514:	47a0      	blx	r4
 801a516:	4603      	mov	r3, r0
 801a518:	73fb      	strb	r3, [r7, #15]
 801a51a:	e007      	b.n	801a52c <tcp_process_refused_data+0x68>
 801a51c:	2300      	movs	r3, #0
 801a51e:	68ba      	ldr	r2, [r7, #8]
 801a520:	6879      	ldr	r1, [r7, #4]
 801a522:	2000      	movs	r0, #0
 801a524:	f000 f8a4 	bl	801a670 <tcp_recv_null>
 801a528:	4603      	mov	r3, r0
 801a52a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801a52c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a530:	2b00      	cmp	r3, #0
 801a532:	d12a      	bne.n	801a58a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801a534:	7bbb      	ldrb	r3, [r7, #14]
 801a536:	f003 0320 	and.w	r3, r3, #32
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d033      	beq.n	801a5a6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a542:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a546:	d005      	beq.n	801a554 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a54c:	3301      	adds	r3, #1
 801a54e:	b29a      	uxth	r2, r3
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d00b      	beq.n	801a576 <tcp_process_refused_data+0xb2>
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	6918      	ldr	r0, [r3, #16]
 801a568:	2300      	movs	r3, #0
 801a56a:	2200      	movs	r2, #0
 801a56c:	6879      	ldr	r1, [r7, #4]
 801a56e:	47a0      	blx	r4
 801a570:	4603      	mov	r3, r0
 801a572:	73fb      	strb	r3, [r7, #15]
 801a574:	e001      	b.n	801a57a <tcp_process_refused_data+0xb6>
 801a576:	2300      	movs	r3, #0
 801a578:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801a57a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a57e:	f113 0f0d 	cmn.w	r3, #13
 801a582:	d110      	bne.n	801a5a6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801a584:	f06f 030c 	mvn.w	r3, #12
 801a588:	e00e      	b.n	801a5a8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801a58a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a58e:	f113 0f0d 	cmn.w	r3, #13
 801a592:	d102      	bne.n	801a59a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801a594:	f06f 030c 	mvn.w	r3, #12
 801a598:	e006      	b.n	801a5a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	68ba      	ldr	r2, [r7, #8]
 801a59e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801a5a0:	f06f 0304 	mvn.w	r3, #4
 801a5a4:	e000      	b.n	801a5a8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801a5a6:	2300      	movs	r3, #0
}
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	3714      	adds	r7, #20
 801a5ac:	46bd      	mov	sp, r7
 801a5ae:	bd90      	pop	{r4, r7, pc}
 801a5b0:	08026a5c 	.word	0x08026a5c
 801a5b4:	08026f6c 	.word	0x08026f6c
 801a5b8:	08026aa0 	.word	0x08026aa0

0801a5bc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801a5bc:	b580      	push	{r7, lr}
 801a5be:	b084      	sub	sp, #16
 801a5c0:	af00      	add	r7, sp, #0
 801a5c2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801a5c4:	e007      	b.n	801a5d6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801a5cc:	6878      	ldr	r0, [r7, #4]
 801a5ce:	f000 f80a 	bl	801a5e6 <tcp_seg_free>
    seg = next;
 801a5d2:	68fb      	ldr	r3, [r7, #12]
 801a5d4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d1f4      	bne.n	801a5c6 <tcp_segs_free+0xa>
  }
}
 801a5dc:	bf00      	nop
 801a5de:	bf00      	nop
 801a5e0:	3710      	adds	r7, #16
 801a5e2:	46bd      	mov	sp, r7
 801a5e4:	bd80      	pop	{r7, pc}

0801a5e6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801a5e6:	b580      	push	{r7, lr}
 801a5e8:	b082      	sub	sp, #8
 801a5ea:	af00      	add	r7, sp, #0
 801a5ec:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d00c      	beq.n	801a60e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	685b      	ldr	r3, [r3, #4]
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d004      	beq.n	801a606 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	685b      	ldr	r3, [r3, #4]
 801a600:	4618      	mov	r0, r3
 801a602:	f7fe fa45 	bl	8018a90 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801a606:	6879      	ldr	r1, [r7, #4]
 801a608:	2003      	movs	r0, #3
 801a60a:	f7fd fb9d 	bl	8017d48 <memp_free>
  }
}
 801a60e:	bf00      	nop
 801a610:	3708      	adds	r7, #8
 801a612:	46bd      	mov	sp, r7
 801a614:	bd80      	pop	{r7, pc}
	...

0801a618 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801a618:	b580      	push	{r7, lr}
 801a61a:	b084      	sub	sp, #16
 801a61c:	af00      	add	r7, sp, #0
 801a61e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d106      	bne.n	801a634 <tcp_seg_copy+0x1c>
 801a626:	4b0f      	ldr	r3, [pc, #60]	; (801a664 <tcp_seg_copy+0x4c>)
 801a628:	f240 6282 	movw	r2, #1666	; 0x682
 801a62c:	490e      	ldr	r1, [pc, #56]	; (801a668 <tcp_seg_copy+0x50>)
 801a62e:	480f      	ldr	r0, [pc, #60]	; (801a66c <tcp_seg_copy+0x54>)
 801a630:	f009 fc66 	bl	8023f00 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801a634:	2003      	movs	r0, #3
 801a636:	f7fd fb11 	bl	8017c5c <memp_malloc>
 801a63a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801a63c:	68fb      	ldr	r3, [r7, #12]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d101      	bne.n	801a646 <tcp_seg_copy+0x2e>
    return NULL;
 801a642:	2300      	movs	r3, #0
 801a644:	e00a      	b.n	801a65c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801a646:	2210      	movs	r2, #16
 801a648:	6879      	ldr	r1, [r7, #4]
 801a64a:	68f8      	ldr	r0, [r7, #12]
 801a64c:	f009 fb48 	bl	8023ce0 <memcpy>
  pbuf_ref(cseg->p);
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	685b      	ldr	r3, [r3, #4]
 801a654:	4618      	mov	r0, r3
 801a656:	f7fe fac1 	bl	8018bdc <pbuf_ref>
  return cseg;
 801a65a:	68fb      	ldr	r3, [r7, #12]
}
 801a65c:	4618      	mov	r0, r3
 801a65e:	3710      	adds	r7, #16
 801a660:	46bd      	mov	sp, r7
 801a662:	bd80      	pop	{r7, pc}
 801a664:	08026a5c 	.word	0x08026a5c
 801a668:	08026fb0 	.word	0x08026fb0
 801a66c:	08026aa0 	.word	0x08026aa0

0801a670 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801a670:	b580      	push	{r7, lr}
 801a672:	b084      	sub	sp, #16
 801a674:	af00      	add	r7, sp, #0
 801a676:	60f8      	str	r0, [r7, #12]
 801a678:	60b9      	str	r1, [r7, #8]
 801a67a:	607a      	str	r2, [r7, #4]
 801a67c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801a67e:	68bb      	ldr	r3, [r7, #8]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d109      	bne.n	801a698 <tcp_recv_null+0x28>
 801a684:	4b12      	ldr	r3, [pc, #72]	; (801a6d0 <tcp_recv_null+0x60>)
 801a686:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a68a:	4912      	ldr	r1, [pc, #72]	; (801a6d4 <tcp_recv_null+0x64>)
 801a68c:	4812      	ldr	r0, [pc, #72]	; (801a6d8 <tcp_recv_null+0x68>)
 801a68e:	f009 fc37 	bl	8023f00 <iprintf>
 801a692:	f06f 030f 	mvn.w	r3, #15
 801a696:	e016      	b.n	801a6c6 <tcp_recv_null+0x56>

  if (p != NULL) {
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d009      	beq.n	801a6b2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	891b      	ldrh	r3, [r3, #8]
 801a6a2:	4619      	mov	r1, r3
 801a6a4:	68b8      	ldr	r0, [r7, #8]
 801a6a6:	f7ff f9bb 	bl	8019a20 <tcp_recved>
    pbuf_free(p);
 801a6aa:	6878      	ldr	r0, [r7, #4]
 801a6ac:	f7fe f9f0 	bl	8018a90 <pbuf_free>
 801a6b0:	e008      	b.n	801a6c4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801a6b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d104      	bne.n	801a6c4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801a6ba:	68b8      	ldr	r0, [r7, #8]
 801a6bc:	f7fe fea2 	bl	8019404 <tcp_close>
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	e000      	b.n	801a6c6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801a6c4:	2300      	movs	r3, #0
}
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	3710      	adds	r7, #16
 801a6ca:	46bd      	mov	sp, r7
 801a6cc:	bd80      	pop	{r7, pc}
 801a6ce:	bf00      	nop
 801a6d0:	08026a5c 	.word	0x08026a5c
 801a6d4:	08026fcc 	.word	0x08026fcc
 801a6d8:	08026aa0 	.word	0x08026aa0

0801a6dc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801a6dc:	b580      	push	{r7, lr}
 801a6de:	b086      	sub	sp, #24
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	4603      	mov	r3, r0
 801a6e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801a6e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	db01      	blt.n	801a6f2 <tcp_kill_prio+0x16>
 801a6ee:	79fb      	ldrb	r3, [r7, #7]
 801a6f0:	e000      	b.n	801a6f4 <tcp_kill_prio+0x18>
 801a6f2:	237f      	movs	r3, #127	; 0x7f
 801a6f4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801a6f6:	7afb      	ldrb	r3, [r7, #11]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d034      	beq.n	801a766 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801a6fc:	7afb      	ldrb	r3, [r7, #11]
 801a6fe:	3b01      	subs	r3, #1
 801a700:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801a702:	2300      	movs	r3, #0
 801a704:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801a706:	2300      	movs	r3, #0
 801a708:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a70a:	4b19      	ldr	r3, [pc, #100]	; (801a770 <tcp_kill_prio+0x94>)
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	617b      	str	r3, [r7, #20]
 801a710:	e01f      	b.n	801a752 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801a712:	697b      	ldr	r3, [r7, #20]
 801a714:	7d5b      	ldrb	r3, [r3, #21]
 801a716:	7afa      	ldrb	r2, [r7, #11]
 801a718:	429a      	cmp	r2, r3
 801a71a:	d80c      	bhi.n	801a736 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a71c:	697b      	ldr	r3, [r7, #20]
 801a71e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801a720:	7afa      	ldrb	r2, [r7, #11]
 801a722:	429a      	cmp	r2, r3
 801a724:	d112      	bne.n	801a74c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a726:	4b13      	ldr	r3, [pc, #76]	; (801a774 <tcp_kill_prio+0x98>)
 801a728:	681a      	ldr	r2, [r3, #0]
 801a72a:	697b      	ldr	r3, [r7, #20]
 801a72c:	6a1b      	ldr	r3, [r3, #32]
 801a72e:	1ad3      	subs	r3, r2, r3
 801a730:	68fa      	ldr	r2, [r7, #12]
 801a732:	429a      	cmp	r2, r3
 801a734:	d80a      	bhi.n	801a74c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801a736:	4b0f      	ldr	r3, [pc, #60]	; (801a774 <tcp_kill_prio+0x98>)
 801a738:	681a      	ldr	r2, [r3, #0]
 801a73a:	697b      	ldr	r3, [r7, #20]
 801a73c:	6a1b      	ldr	r3, [r3, #32]
 801a73e:	1ad3      	subs	r3, r2, r3
 801a740:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801a742:	697b      	ldr	r3, [r7, #20]
 801a744:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801a746:	697b      	ldr	r3, [r7, #20]
 801a748:	7d5b      	ldrb	r3, [r3, #21]
 801a74a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a74c:	697b      	ldr	r3, [r7, #20]
 801a74e:	68db      	ldr	r3, [r3, #12]
 801a750:	617b      	str	r3, [r7, #20]
 801a752:	697b      	ldr	r3, [r7, #20]
 801a754:	2b00      	cmp	r3, #0
 801a756:	d1dc      	bne.n	801a712 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801a758:	693b      	ldr	r3, [r7, #16]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d004      	beq.n	801a768 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801a75e:	6938      	ldr	r0, [r7, #16]
 801a760:	f7fe ff96 	bl	8019690 <tcp_abort>
 801a764:	e000      	b.n	801a768 <tcp_kill_prio+0x8c>
    return;
 801a766:	bf00      	nop
  }
}
 801a768:	3718      	adds	r7, #24
 801a76a:	46bd      	mov	sp, r7
 801a76c:	bd80      	pop	{r7, pc}
 801a76e:	bf00      	nop
 801a770:	2000bfb8 	.word	0x2000bfb8
 801a774:	2000bfac 	.word	0x2000bfac

0801a778 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801a778:	b580      	push	{r7, lr}
 801a77a:	b086      	sub	sp, #24
 801a77c:	af00      	add	r7, sp, #0
 801a77e:	4603      	mov	r3, r0
 801a780:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801a782:	79fb      	ldrb	r3, [r7, #7]
 801a784:	2b08      	cmp	r3, #8
 801a786:	d009      	beq.n	801a79c <tcp_kill_state+0x24>
 801a788:	79fb      	ldrb	r3, [r7, #7]
 801a78a:	2b09      	cmp	r3, #9
 801a78c:	d006      	beq.n	801a79c <tcp_kill_state+0x24>
 801a78e:	4b1a      	ldr	r3, [pc, #104]	; (801a7f8 <tcp_kill_state+0x80>)
 801a790:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801a794:	4919      	ldr	r1, [pc, #100]	; (801a7fc <tcp_kill_state+0x84>)
 801a796:	481a      	ldr	r0, [pc, #104]	; (801a800 <tcp_kill_state+0x88>)
 801a798:	f009 fbb2 	bl	8023f00 <iprintf>

  inactivity = 0;
 801a79c:	2300      	movs	r3, #0
 801a79e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801a7a0:	2300      	movs	r3, #0
 801a7a2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a7a4:	4b17      	ldr	r3, [pc, #92]	; (801a804 <tcp_kill_state+0x8c>)
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	617b      	str	r3, [r7, #20]
 801a7aa:	e017      	b.n	801a7dc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801a7ac:	697b      	ldr	r3, [r7, #20]
 801a7ae:	7d1b      	ldrb	r3, [r3, #20]
 801a7b0:	79fa      	ldrb	r2, [r7, #7]
 801a7b2:	429a      	cmp	r2, r3
 801a7b4:	d10f      	bne.n	801a7d6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a7b6:	4b14      	ldr	r3, [pc, #80]	; (801a808 <tcp_kill_state+0x90>)
 801a7b8:	681a      	ldr	r2, [r3, #0]
 801a7ba:	697b      	ldr	r3, [r7, #20]
 801a7bc:	6a1b      	ldr	r3, [r3, #32]
 801a7be:	1ad3      	subs	r3, r2, r3
 801a7c0:	68fa      	ldr	r2, [r7, #12]
 801a7c2:	429a      	cmp	r2, r3
 801a7c4:	d807      	bhi.n	801a7d6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801a7c6:	4b10      	ldr	r3, [pc, #64]	; (801a808 <tcp_kill_state+0x90>)
 801a7c8:	681a      	ldr	r2, [r3, #0]
 801a7ca:	697b      	ldr	r3, [r7, #20]
 801a7cc:	6a1b      	ldr	r3, [r3, #32]
 801a7ce:	1ad3      	subs	r3, r2, r3
 801a7d0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801a7d2:	697b      	ldr	r3, [r7, #20]
 801a7d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a7d6:	697b      	ldr	r3, [r7, #20]
 801a7d8:	68db      	ldr	r3, [r3, #12]
 801a7da:	617b      	str	r3, [r7, #20]
 801a7dc:	697b      	ldr	r3, [r7, #20]
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d1e4      	bne.n	801a7ac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801a7e2:	693b      	ldr	r3, [r7, #16]
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	d003      	beq.n	801a7f0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801a7e8:	2100      	movs	r1, #0
 801a7ea:	6938      	ldr	r0, [r7, #16]
 801a7ec:	f7fe fe92 	bl	8019514 <tcp_abandon>
  }
}
 801a7f0:	bf00      	nop
 801a7f2:	3718      	adds	r7, #24
 801a7f4:	46bd      	mov	sp, r7
 801a7f6:	bd80      	pop	{r7, pc}
 801a7f8:	08026a5c 	.word	0x08026a5c
 801a7fc:	08026fe8 	.word	0x08026fe8
 801a800:	08026aa0 	.word	0x08026aa0
 801a804:	2000bfb8 	.word	0x2000bfb8
 801a808:	2000bfac 	.word	0x2000bfac

0801a80c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801a80c:	b580      	push	{r7, lr}
 801a80e:	b084      	sub	sp, #16
 801a810:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801a812:	2300      	movs	r3, #0
 801a814:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801a816:	2300      	movs	r3, #0
 801a818:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a81a:	4b12      	ldr	r3, [pc, #72]	; (801a864 <tcp_kill_timewait+0x58>)
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	60fb      	str	r3, [r7, #12]
 801a820:	e012      	b.n	801a848 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a822:	4b11      	ldr	r3, [pc, #68]	; (801a868 <tcp_kill_timewait+0x5c>)
 801a824:	681a      	ldr	r2, [r3, #0]
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	6a1b      	ldr	r3, [r3, #32]
 801a82a:	1ad3      	subs	r3, r2, r3
 801a82c:	687a      	ldr	r2, [r7, #4]
 801a82e:	429a      	cmp	r2, r3
 801a830:	d807      	bhi.n	801a842 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801a832:	4b0d      	ldr	r3, [pc, #52]	; (801a868 <tcp_kill_timewait+0x5c>)
 801a834:	681a      	ldr	r2, [r3, #0]
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	6a1b      	ldr	r3, [r3, #32]
 801a83a:	1ad3      	subs	r3, r2, r3
 801a83c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801a83e:	68fb      	ldr	r3, [r7, #12]
 801a840:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	68db      	ldr	r3, [r3, #12]
 801a846:	60fb      	str	r3, [r7, #12]
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d1e9      	bne.n	801a822 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801a84e:	68bb      	ldr	r3, [r7, #8]
 801a850:	2b00      	cmp	r3, #0
 801a852:	d002      	beq.n	801a85a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801a854:	68b8      	ldr	r0, [r7, #8]
 801a856:	f7fe ff1b 	bl	8019690 <tcp_abort>
  }
}
 801a85a:	bf00      	nop
 801a85c:	3710      	adds	r7, #16
 801a85e:	46bd      	mov	sp, r7
 801a860:	bd80      	pop	{r7, pc}
 801a862:	bf00      	nop
 801a864:	2000bfbc 	.word	0x2000bfbc
 801a868:	2000bfac 	.word	0x2000bfac

0801a86c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801a86c:	b580      	push	{r7, lr}
 801a86e:	b082      	sub	sp, #8
 801a870:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801a872:	4b10      	ldr	r3, [pc, #64]	; (801a8b4 <tcp_handle_closepend+0x48>)
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a878:	e014      	b.n	801a8a4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	68db      	ldr	r3, [r3, #12]
 801a87e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	8b5b      	ldrh	r3, [r3, #26]
 801a884:	f003 0308 	and.w	r3, r3, #8
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d009      	beq.n	801a8a0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	8b5b      	ldrh	r3, [r3, #26]
 801a890:	f023 0308 	bic.w	r3, r3, #8
 801a894:	b29a      	uxth	r2, r3
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801a89a:	6878      	ldr	r0, [r7, #4]
 801a89c:	f7fe fd48 	bl	8019330 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801a8a0:	683b      	ldr	r3, [r7, #0]
 801a8a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d1e7      	bne.n	801a87a <tcp_handle_closepend+0xe>
  }
}
 801a8aa:	bf00      	nop
 801a8ac:	bf00      	nop
 801a8ae:	3708      	adds	r7, #8
 801a8b0:	46bd      	mov	sp, r7
 801a8b2:	bd80      	pop	{r7, pc}
 801a8b4:	2000bfb8 	.word	0x2000bfb8

0801a8b8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b084      	sub	sp, #16
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	4603      	mov	r3, r0
 801a8c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a8c2:	2001      	movs	r0, #1
 801a8c4:	f7fd f9ca 	bl	8017c5c <memp_malloc>
 801a8c8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d126      	bne.n	801a91e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801a8d0:	f7ff ffcc 	bl	801a86c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801a8d4:	f7ff ff9a 	bl	801a80c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a8d8:	2001      	movs	r0, #1
 801a8da:	f7fd f9bf 	bl	8017c5c <memp_malloc>
 801a8de:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d11b      	bne.n	801a91e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801a8e6:	2009      	movs	r0, #9
 801a8e8:	f7ff ff46 	bl	801a778 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a8ec:	2001      	movs	r0, #1
 801a8ee:	f7fd f9b5 	bl	8017c5c <memp_malloc>
 801a8f2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d111      	bne.n	801a91e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801a8fa:	2008      	movs	r0, #8
 801a8fc:	f7ff ff3c 	bl	801a778 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a900:	2001      	movs	r0, #1
 801a902:	f7fd f9ab 	bl	8017c5c <memp_malloc>
 801a906:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d107      	bne.n	801a91e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801a90e:	79fb      	ldrb	r3, [r7, #7]
 801a910:	4618      	mov	r0, r3
 801a912:	f7ff fee3 	bl	801a6dc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a916:	2001      	movs	r0, #1
 801a918:	f7fd f9a0 	bl	8017c5c <memp_malloc>
 801a91c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	2b00      	cmp	r3, #0
 801a922:	d03f      	beq.n	801a9a4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801a924:	229c      	movs	r2, #156	; 0x9c
 801a926:	2100      	movs	r1, #0
 801a928:	68f8      	ldr	r0, [r7, #12]
 801a92a:	f009 fa01 	bl	8023d30 <memset>
    pcb->prio = prio;
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	79fa      	ldrb	r2, [r7, #7]
 801a932:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801a934:	68fb      	ldr	r3, [r7, #12]
 801a936:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801a93a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a944:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801a94e:	68fb      	ldr	r3, [r7, #12]
 801a950:	22ff      	movs	r2, #255	; 0xff
 801a952:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a95a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	2206      	movs	r2, #6
 801a960:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	2206      	movs	r2, #6
 801a968:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a970:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	2201      	movs	r2, #1
 801a976:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801a97a:	4b0d      	ldr	r3, [pc, #52]	; (801a9b0 <tcp_alloc+0xf8>)
 801a97c:	681a      	ldr	r2, [r3, #0]
 801a97e:	68fb      	ldr	r3, [r7, #12]
 801a980:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801a982:	4b0c      	ldr	r3, [pc, #48]	; (801a9b4 <tcp_alloc+0xfc>)
 801a984:	781a      	ldrb	r2, [r3, #0]
 801a986:	68fb      	ldr	r3, [r7, #12]
 801a988:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801a990:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	4a08      	ldr	r2, [pc, #32]	; (801a9b8 <tcp_alloc+0x100>)
 801a998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	4a07      	ldr	r2, [pc, #28]	; (801a9bc <tcp_alloc+0x104>)
 801a9a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801a9a4:	68fb      	ldr	r3, [r7, #12]
}
 801a9a6:	4618      	mov	r0, r3
 801a9a8:	3710      	adds	r7, #16
 801a9aa:	46bd      	mov	sp, r7
 801a9ac:	bd80      	pop	{r7, pc}
 801a9ae:	bf00      	nop
 801a9b0:	2000bfac 	.word	0x2000bfac
 801a9b4:	2000bfc2 	.word	0x2000bfc2
 801a9b8:	0801a671 	.word	0x0801a671
 801a9bc:	006ddd00 	.word	0x006ddd00

0801a9c0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b084      	sub	sp, #16
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	4603      	mov	r3, r0
 801a9c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801a9ca:	2040      	movs	r0, #64	; 0x40
 801a9cc:	f7ff ff74 	bl	801a8b8 <tcp_alloc>
 801a9d0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a9d2:	68fb      	ldr	r3, [r7, #12]
}
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	3710      	adds	r7, #16
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	bd80      	pop	{r7, pc}

0801a9dc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801a9dc:	b480      	push	{r7}
 801a9de:	b083      	sub	sp, #12
 801a9e0:	af00      	add	r7, sp, #0
 801a9e2:	6078      	str	r0, [r7, #4]
 801a9e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d002      	beq.n	801a9f2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	683a      	ldr	r2, [r7, #0]
 801a9f0:	611a      	str	r2, [r3, #16]
  }
}
 801a9f2:	bf00      	nop
 801a9f4:	370c      	adds	r7, #12
 801a9f6:	46bd      	mov	sp, r7
 801a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9fc:	4770      	bx	lr
	...

0801aa00 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801aa00:	b580      	push	{r7, lr}
 801aa02:	b082      	sub	sp, #8
 801aa04:	af00      	add	r7, sp, #0
 801aa06:	6078      	str	r0, [r7, #4]
 801aa08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d00e      	beq.n	801aa2e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	7d1b      	ldrb	r3, [r3, #20]
 801aa14:	2b01      	cmp	r3, #1
 801aa16:	d106      	bne.n	801aa26 <tcp_recv+0x26>
 801aa18:	4b07      	ldr	r3, [pc, #28]	; (801aa38 <tcp_recv+0x38>)
 801aa1a:	f240 72df 	movw	r2, #2015	; 0x7df
 801aa1e:	4907      	ldr	r1, [pc, #28]	; (801aa3c <tcp_recv+0x3c>)
 801aa20:	4807      	ldr	r0, [pc, #28]	; (801aa40 <tcp_recv+0x40>)
 801aa22:	f009 fa6d 	bl	8023f00 <iprintf>
    pcb->recv = recv;
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	683a      	ldr	r2, [r7, #0]
 801aa2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801aa2e:	bf00      	nop
 801aa30:	3708      	adds	r7, #8
 801aa32:	46bd      	mov	sp, r7
 801aa34:	bd80      	pop	{r7, pc}
 801aa36:	bf00      	nop
 801aa38:	08026a5c 	.word	0x08026a5c
 801aa3c:	08026ff8 	.word	0x08026ff8
 801aa40:	08026aa0 	.word	0x08026aa0

0801aa44 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b082      	sub	sp, #8
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	6078      	str	r0, [r7, #4]
 801aa4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d00e      	beq.n	801aa72 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	7d1b      	ldrb	r3, [r3, #20]
 801aa58:	2b01      	cmp	r3, #1
 801aa5a:	d106      	bne.n	801aa6a <tcp_sent+0x26>
 801aa5c:	4b07      	ldr	r3, [pc, #28]	; (801aa7c <tcp_sent+0x38>)
 801aa5e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801aa62:	4907      	ldr	r1, [pc, #28]	; (801aa80 <tcp_sent+0x3c>)
 801aa64:	4807      	ldr	r0, [pc, #28]	; (801aa84 <tcp_sent+0x40>)
 801aa66:	f009 fa4b 	bl	8023f00 <iprintf>
    pcb->sent = sent;
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	683a      	ldr	r2, [r7, #0]
 801aa6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801aa72:	bf00      	nop
 801aa74:	3708      	adds	r7, #8
 801aa76:	46bd      	mov	sp, r7
 801aa78:	bd80      	pop	{r7, pc}
 801aa7a:	bf00      	nop
 801aa7c:	08026a5c 	.word	0x08026a5c
 801aa80:	08027020 	.word	0x08027020
 801aa84:	08026aa0 	.word	0x08026aa0

0801aa88 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801aa88:	b580      	push	{r7, lr}
 801aa8a:	b082      	sub	sp, #8
 801aa8c:	af00      	add	r7, sp, #0
 801aa8e:	6078      	str	r0, [r7, #4]
 801aa90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d00e      	beq.n	801aab6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	7d1b      	ldrb	r3, [r3, #20]
 801aa9c:	2b01      	cmp	r3, #1
 801aa9e:	d106      	bne.n	801aaae <tcp_err+0x26>
 801aaa0:	4b07      	ldr	r3, [pc, #28]	; (801aac0 <tcp_err+0x38>)
 801aaa2:	f640 020d 	movw	r2, #2061	; 0x80d
 801aaa6:	4907      	ldr	r1, [pc, #28]	; (801aac4 <tcp_err+0x3c>)
 801aaa8:	4807      	ldr	r0, [pc, #28]	; (801aac8 <tcp_err+0x40>)
 801aaaa:	f009 fa29 	bl	8023f00 <iprintf>
    pcb->errf = err;
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	683a      	ldr	r2, [r7, #0]
 801aab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801aab6:	bf00      	nop
 801aab8:	3708      	adds	r7, #8
 801aaba:	46bd      	mov	sp, r7
 801aabc:	bd80      	pop	{r7, pc}
 801aabe:	bf00      	nop
 801aac0:	08026a5c 	.word	0x08026a5c
 801aac4:	08027048 	.word	0x08027048
 801aac8:	08026aa0 	.word	0x08026aa0

0801aacc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801aacc:	b480      	push	{r7}
 801aace:	b085      	sub	sp, #20
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	6078      	str	r0, [r7, #4]
 801aad4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d008      	beq.n	801aaee <tcp_accept+0x22>
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	7d1b      	ldrb	r3, [r3, #20]
 801aae0:	2b01      	cmp	r3, #1
 801aae2:	d104      	bne.n	801aaee <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	683a      	ldr	r2, [r7, #0]
 801aaec:	619a      	str	r2, [r3, #24]
  }
}
 801aaee:	bf00      	nop
 801aaf0:	3714      	adds	r7, #20
 801aaf2:	46bd      	mov	sp, r7
 801aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaf8:	4770      	bx	lr
	...

0801aafc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801aafc:	b580      	push	{r7, lr}
 801aafe:	b084      	sub	sp, #16
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	60f8      	str	r0, [r7, #12]
 801ab04:	60b9      	str	r1, [r7, #8]
 801ab06:	4613      	mov	r3, r2
 801ab08:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d107      	bne.n	801ab20 <tcp_poll+0x24>
 801ab10:	4b0e      	ldr	r3, [pc, #56]	; (801ab4c <tcp_poll+0x50>)
 801ab12:	f640 023d 	movw	r2, #2109	; 0x83d
 801ab16:	490e      	ldr	r1, [pc, #56]	; (801ab50 <tcp_poll+0x54>)
 801ab18:	480e      	ldr	r0, [pc, #56]	; (801ab54 <tcp_poll+0x58>)
 801ab1a:	f009 f9f1 	bl	8023f00 <iprintf>
 801ab1e:	e011      	b.n	801ab44 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	7d1b      	ldrb	r3, [r3, #20]
 801ab24:	2b01      	cmp	r3, #1
 801ab26:	d106      	bne.n	801ab36 <tcp_poll+0x3a>
 801ab28:	4b08      	ldr	r3, [pc, #32]	; (801ab4c <tcp_poll+0x50>)
 801ab2a:	f640 023e 	movw	r2, #2110	; 0x83e
 801ab2e:	490a      	ldr	r1, [pc, #40]	; (801ab58 <tcp_poll+0x5c>)
 801ab30:	4808      	ldr	r0, [pc, #32]	; (801ab54 <tcp_poll+0x58>)
 801ab32:	f009 f9e5 	bl	8023f00 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	68ba      	ldr	r2, [r7, #8]
 801ab3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	79fa      	ldrb	r2, [r7, #7]
 801ab42:	775a      	strb	r2, [r3, #29]
}
 801ab44:	3710      	adds	r7, #16
 801ab46:	46bd      	mov	sp, r7
 801ab48:	bd80      	pop	{r7, pc}
 801ab4a:	bf00      	nop
 801ab4c:	08026a5c 	.word	0x08026a5c
 801ab50:	08027070 	.word	0x08027070
 801ab54:	08026aa0 	.word	0x08026aa0
 801ab58:	08027088 	.word	0x08027088

0801ab5c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801ab5c:	b580      	push	{r7, lr}
 801ab5e:	b082      	sub	sp, #8
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d107      	bne.n	801ab7a <tcp_pcb_purge+0x1e>
 801ab6a:	4b21      	ldr	r3, [pc, #132]	; (801abf0 <tcp_pcb_purge+0x94>)
 801ab6c:	f640 0251 	movw	r2, #2129	; 0x851
 801ab70:	4920      	ldr	r1, [pc, #128]	; (801abf4 <tcp_pcb_purge+0x98>)
 801ab72:	4821      	ldr	r0, [pc, #132]	; (801abf8 <tcp_pcb_purge+0x9c>)
 801ab74:	f009 f9c4 	bl	8023f00 <iprintf>
 801ab78:	e037      	b.n	801abea <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	7d1b      	ldrb	r3, [r3, #20]
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d033      	beq.n	801abea <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801ab86:	2b0a      	cmp	r3, #10
 801ab88:	d02f      	beq.n	801abea <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801ab8e:	2b01      	cmp	r3, #1
 801ab90:	d02b      	beq.n	801abea <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d007      	beq.n	801abaa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ab9e:	4618      	mov	r0, r3
 801aba0:	f7fd ff76 	bl	8018a90 <pbuf_free>
      pcb->refused_data = NULL;
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	2200      	movs	r2, #0
 801aba8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d002      	beq.n	801abb8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801abb2:	6878      	ldr	r0, [r7, #4]
 801abb4:	f000 f986 	bl	801aec4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801abbe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801abc4:	4618      	mov	r0, r3
 801abc6:	f7ff fcf9 	bl	801a5bc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801abce:	4618      	mov	r0, r3
 801abd0:	f7ff fcf4 	bl	801a5bc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	2200      	movs	r2, #0
 801abd8:	66da      	str	r2, [r3, #108]	; 0x6c
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	2200      	movs	r2, #0
 801abe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801abea:	3708      	adds	r7, #8
 801abec:	46bd      	mov	sp, r7
 801abee:	bd80      	pop	{r7, pc}
 801abf0:	08026a5c 	.word	0x08026a5c
 801abf4:	080270a8 	.word	0x080270a8
 801abf8:	08026aa0 	.word	0x08026aa0

0801abfc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b084      	sub	sp, #16
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	6078      	str	r0, [r7, #4]
 801ac04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801ac06:	683b      	ldr	r3, [r7, #0]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d106      	bne.n	801ac1a <tcp_pcb_remove+0x1e>
 801ac0c:	4b3e      	ldr	r3, [pc, #248]	; (801ad08 <tcp_pcb_remove+0x10c>)
 801ac0e:	f640 0283 	movw	r2, #2179	; 0x883
 801ac12:	493e      	ldr	r1, [pc, #248]	; (801ad0c <tcp_pcb_remove+0x110>)
 801ac14:	483e      	ldr	r0, [pc, #248]	; (801ad10 <tcp_pcb_remove+0x114>)
 801ac16:	f009 f973 	bl	8023f00 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d106      	bne.n	801ac2e <tcp_pcb_remove+0x32>
 801ac20:	4b39      	ldr	r3, [pc, #228]	; (801ad08 <tcp_pcb_remove+0x10c>)
 801ac22:	f640 0284 	movw	r2, #2180	; 0x884
 801ac26:	493b      	ldr	r1, [pc, #236]	; (801ad14 <tcp_pcb_remove+0x118>)
 801ac28:	4839      	ldr	r0, [pc, #228]	; (801ad10 <tcp_pcb_remove+0x114>)
 801ac2a:	f009 f969 	bl	8023f00 <iprintf>

  TCP_RMV(pcblist, pcb);
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	683a      	ldr	r2, [r7, #0]
 801ac34:	429a      	cmp	r2, r3
 801ac36:	d105      	bne.n	801ac44 <tcp_pcb_remove+0x48>
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	68da      	ldr	r2, [r3, #12]
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	601a      	str	r2, [r3, #0]
 801ac42:	e013      	b.n	801ac6c <tcp_pcb_remove+0x70>
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	60fb      	str	r3, [r7, #12]
 801ac4a:	e00c      	b.n	801ac66 <tcp_pcb_remove+0x6a>
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	68db      	ldr	r3, [r3, #12]
 801ac50:	683a      	ldr	r2, [r7, #0]
 801ac52:	429a      	cmp	r2, r3
 801ac54:	d104      	bne.n	801ac60 <tcp_pcb_remove+0x64>
 801ac56:	683b      	ldr	r3, [r7, #0]
 801ac58:	68da      	ldr	r2, [r3, #12]
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	60da      	str	r2, [r3, #12]
 801ac5e:	e005      	b.n	801ac6c <tcp_pcb_remove+0x70>
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	68db      	ldr	r3, [r3, #12]
 801ac64:	60fb      	str	r3, [r7, #12]
 801ac66:	68fb      	ldr	r3, [r7, #12]
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d1ef      	bne.n	801ac4c <tcp_pcb_remove+0x50>
 801ac6c:	683b      	ldr	r3, [r7, #0]
 801ac6e:	2200      	movs	r2, #0
 801ac70:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801ac72:	6838      	ldr	r0, [r7, #0]
 801ac74:	f7ff ff72 	bl	801ab5c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801ac78:	683b      	ldr	r3, [r7, #0]
 801ac7a:	7d1b      	ldrb	r3, [r3, #20]
 801ac7c:	2b0a      	cmp	r3, #10
 801ac7e:	d013      	beq.n	801aca8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801ac80:	683b      	ldr	r3, [r7, #0]
 801ac82:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801ac84:	2b01      	cmp	r3, #1
 801ac86:	d00f      	beq.n	801aca8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801ac88:	683b      	ldr	r3, [r7, #0]
 801ac8a:	8b5b      	ldrh	r3, [r3, #26]
 801ac8c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d009      	beq.n	801aca8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801ac94:	683b      	ldr	r3, [r7, #0]
 801ac96:	8b5b      	ldrh	r3, [r3, #26]
 801ac98:	f043 0302 	orr.w	r3, r3, #2
 801ac9c:	b29a      	uxth	r2, r3
 801ac9e:	683b      	ldr	r3, [r7, #0]
 801aca0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801aca2:	6838      	ldr	r0, [r7, #0]
 801aca4:	f003 fbc6 	bl	801e434 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801aca8:	683b      	ldr	r3, [r7, #0]
 801acaa:	7d1b      	ldrb	r3, [r3, #20]
 801acac:	2b01      	cmp	r3, #1
 801acae:	d020      	beq.n	801acf2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801acb0:	683b      	ldr	r3, [r7, #0]
 801acb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d006      	beq.n	801acc6 <tcp_pcb_remove+0xca>
 801acb8:	4b13      	ldr	r3, [pc, #76]	; (801ad08 <tcp_pcb_remove+0x10c>)
 801acba:	f640 0293 	movw	r2, #2195	; 0x893
 801acbe:	4916      	ldr	r1, [pc, #88]	; (801ad18 <tcp_pcb_remove+0x11c>)
 801acc0:	4813      	ldr	r0, [pc, #76]	; (801ad10 <tcp_pcb_remove+0x114>)
 801acc2:	f009 f91d 	bl	8023f00 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801acc6:	683b      	ldr	r3, [r7, #0]
 801acc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801acca:	2b00      	cmp	r3, #0
 801accc:	d006      	beq.n	801acdc <tcp_pcb_remove+0xe0>
 801acce:	4b0e      	ldr	r3, [pc, #56]	; (801ad08 <tcp_pcb_remove+0x10c>)
 801acd0:	f640 0294 	movw	r2, #2196	; 0x894
 801acd4:	4911      	ldr	r1, [pc, #68]	; (801ad1c <tcp_pcb_remove+0x120>)
 801acd6:	480e      	ldr	r0, [pc, #56]	; (801ad10 <tcp_pcb_remove+0x114>)
 801acd8:	f009 f912 	bl	8023f00 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801acdc:	683b      	ldr	r3, [r7, #0]
 801acde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d006      	beq.n	801acf2 <tcp_pcb_remove+0xf6>
 801ace4:	4b08      	ldr	r3, [pc, #32]	; (801ad08 <tcp_pcb_remove+0x10c>)
 801ace6:	f640 0296 	movw	r2, #2198	; 0x896
 801acea:	490d      	ldr	r1, [pc, #52]	; (801ad20 <tcp_pcb_remove+0x124>)
 801acec:	4808      	ldr	r0, [pc, #32]	; (801ad10 <tcp_pcb_remove+0x114>)
 801acee:	f009 f907 	bl	8023f00 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801acf2:	683b      	ldr	r3, [r7, #0]
 801acf4:	2200      	movs	r2, #0
 801acf6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801acf8:	683b      	ldr	r3, [r7, #0]
 801acfa:	2200      	movs	r2, #0
 801acfc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801acfe:	bf00      	nop
 801ad00:	3710      	adds	r7, #16
 801ad02:	46bd      	mov	sp, r7
 801ad04:	bd80      	pop	{r7, pc}
 801ad06:	bf00      	nop
 801ad08:	08026a5c 	.word	0x08026a5c
 801ad0c:	080270c4 	.word	0x080270c4
 801ad10:	08026aa0 	.word	0x08026aa0
 801ad14:	080270e0 	.word	0x080270e0
 801ad18:	08027100 	.word	0x08027100
 801ad1c:	08027118 	.word	0x08027118
 801ad20:	08027134 	.word	0x08027134

0801ad24 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801ad24:	b580      	push	{r7, lr}
 801ad26:	b082      	sub	sp, #8
 801ad28:	af00      	add	r7, sp, #0
 801ad2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d106      	bne.n	801ad40 <tcp_next_iss+0x1c>
 801ad32:	4b0a      	ldr	r3, [pc, #40]	; (801ad5c <tcp_next_iss+0x38>)
 801ad34:	f640 02af 	movw	r2, #2223	; 0x8af
 801ad38:	4909      	ldr	r1, [pc, #36]	; (801ad60 <tcp_next_iss+0x3c>)
 801ad3a:	480a      	ldr	r0, [pc, #40]	; (801ad64 <tcp_next_iss+0x40>)
 801ad3c:	f009 f8e0 	bl	8023f00 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801ad40:	4b09      	ldr	r3, [pc, #36]	; (801ad68 <tcp_next_iss+0x44>)
 801ad42:	681a      	ldr	r2, [r3, #0]
 801ad44:	4b09      	ldr	r3, [pc, #36]	; (801ad6c <tcp_next_iss+0x48>)
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	4413      	add	r3, r2
 801ad4a:	4a07      	ldr	r2, [pc, #28]	; (801ad68 <tcp_next_iss+0x44>)
 801ad4c:	6013      	str	r3, [r2, #0]
  return iss;
 801ad4e:	4b06      	ldr	r3, [pc, #24]	; (801ad68 <tcp_next_iss+0x44>)
 801ad50:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801ad52:	4618      	mov	r0, r3
 801ad54:	3708      	adds	r7, #8
 801ad56:	46bd      	mov	sp, r7
 801ad58:	bd80      	pop	{r7, pc}
 801ad5a:	bf00      	nop
 801ad5c:	08026a5c 	.word	0x08026a5c
 801ad60:	0802714c 	.word	0x0802714c
 801ad64:	08026aa0 	.word	0x08026aa0
 801ad68:	20000034 	.word	0x20000034
 801ad6c:	2000bfac 	.word	0x2000bfac

0801ad70 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801ad70:	b580      	push	{r7, lr}
 801ad72:	b086      	sub	sp, #24
 801ad74:	af00      	add	r7, sp, #0
 801ad76:	4603      	mov	r3, r0
 801ad78:	60b9      	str	r1, [r7, #8]
 801ad7a:	607a      	str	r2, [r7, #4]
 801ad7c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d106      	bne.n	801ad92 <tcp_eff_send_mss_netif+0x22>
 801ad84:	4b14      	ldr	r3, [pc, #80]	; (801add8 <tcp_eff_send_mss_netif+0x68>)
 801ad86:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801ad8a:	4914      	ldr	r1, [pc, #80]	; (801addc <tcp_eff_send_mss_netif+0x6c>)
 801ad8c:	4814      	ldr	r0, [pc, #80]	; (801ade0 <tcp_eff_send_mss_netif+0x70>)
 801ad8e:	f009 f8b7 	bl	8023f00 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801ad92:	68bb      	ldr	r3, [r7, #8]
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	d101      	bne.n	801ad9c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801ad98:	89fb      	ldrh	r3, [r7, #14]
 801ad9a:	e019      	b.n	801add0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801ad9c:	68bb      	ldr	r3, [r7, #8]
 801ad9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ada0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801ada2:	8afb      	ldrh	r3, [r7, #22]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d012      	beq.n	801adce <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801ada8:	2328      	movs	r3, #40	; 0x28
 801adaa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801adac:	8afa      	ldrh	r2, [r7, #22]
 801adae:	8abb      	ldrh	r3, [r7, #20]
 801adb0:	429a      	cmp	r2, r3
 801adb2:	d904      	bls.n	801adbe <tcp_eff_send_mss_netif+0x4e>
 801adb4:	8afa      	ldrh	r2, [r7, #22]
 801adb6:	8abb      	ldrh	r3, [r7, #20]
 801adb8:	1ad3      	subs	r3, r2, r3
 801adba:	b29b      	uxth	r3, r3
 801adbc:	e000      	b.n	801adc0 <tcp_eff_send_mss_netif+0x50>
 801adbe:	2300      	movs	r3, #0
 801adc0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801adc2:	8a7a      	ldrh	r2, [r7, #18]
 801adc4:	89fb      	ldrh	r3, [r7, #14]
 801adc6:	4293      	cmp	r3, r2
 801adc8:	bf28      	it	cs
 801adca:	4613      	movcs	r3, r2
 801adcc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801adce:	89fb      	ldrh	r3, [r7, #14]
}
 801add0:	4618      	mov	r0, r3
 801add2:	3718      	adds	r7, #24
 801add4:	46bd      	mov	sp, r7
 801add6:	bd80      	pop	{r7, pc}
 801add8:	08026a5c 	.word	0x08026a5c
 801addc:	08027168 	.word	0x08027168
 801ade0:	08026aa0 	.word	0x08026aa0

0801ade4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801ade4:	b580      	push	{r7, lr}
 801ade6:	b084      	sub	sp, #16
 801ade8:	af00      	add	r7, sp, #0
 801adea:	6078      	str	r0, [r7, #4]
 801adec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	2b00      	cmp	r3, #0
 801adf6:	d119      	bne.n	801ae2c <tcp_netif_ip_addr_changed_pcblist+0x48>
 801adf8:	4b10      	ldr	r3, [pc, #64]	; (801ae3c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801adfa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801adfe:	4910      	ldr	r1, [pc, #64]	; (801ae40 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801ae00:	4810      	ldr	r0, [pc, #64]	; (801ae44 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801ae02:	f009 f87d 	bl	8023f00 <iprintf>

  while (pcb != NULL) {
 801ae06:	e011      	b.n	801ae2c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	681a      	ldr	r2, [r3, #0]
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	429a      	cmp	r2, r3
 801ae12:	d108      	bne.n	801ae26 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801ae14:	68fb      	ldr	r3, [r7, #12]
 801ae16:	68db      	ldr	r3, [r3, #12]
 801ae18:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801ae1a:	68f8      	ldr	r0, [r7, #12]
 801ae1c:	f7fe fc38 	bl	8019690 <tcp_abort>
      pcb = next;
 801ae20:	68bb      	ldr	r3, [r7, #8]
 801ae22:	60fb      	str	r3, [r7, #12]
 801ae24:	e002      	b.n	801ae2c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	68db      	ldr	r3, [r3, #12]
 801ae2a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d1ea      	bne.n	801ae08 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801ae32:	bf00      	nop
 801ae34:	bf00      	nop
 801ae36:	3710      	adds	r7, #16
 801ae38:	46bd      	mov	sp, r7
 801ae3a:	bd80      	pop	{r7, pc}
 801ae3c:	08026a5c 	.word	0x08026a5c
 801ae40:	08027190 	.word	0x08027190
 801ae44:	08026aa0 	.word	0x08026aa0

0801ae48 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ae48:	b580      	push	{r7, lr}
 801ae4a:	b084      	sub	sp, #16
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	6078      	str	r0, [r7, #4]
 801ae50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d02a      	beq.n	801aeae <tcp_netif_ip_addr_changed+0x66>
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d026      	beq.n	801aeae <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801ae60:	4b15      	ldr	r3, [pc, #84]	; (801aeb8 <tcp_netif_ip_addr_changed+0x70>)
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	4619      	mov	r1, r3
 801ae66:	6878      	ldr	r0, [r7, #4]
 801ae68:	f7ff ffbc 	bl	801ade4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801ae6c:	4b13      	ldr	r3, [pc, #76]	; (801aebc <tcp_netif_ip_addr_changed+0x74>)
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	4619      	mov	r1, r3
 801ae72:	6878      	ldr	r0, [r7, #4]
 801ae74:	f7ff ffb6 	bl	801ade4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801ae78:	683b      	ldr	r3, [r7, #0]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d017      	beq.n	801aeae <tcp_netif_ip_addr_changed+0x66>
 801ae7e:	683b      	ldr	r3, [r7, #0]
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d013      	beq.n	801aeae <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ae86:	4b0e      	ldr	r3, [pc, #56]	; (801aec0 <tcp_netif_ip_addr_changed+0x78>)
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	60fb      	str	r3, [r7, #12]
 801ae8c:	e00c      	b.n	801aea8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801ae8e:	68fb      	ldr	r3, [r7, #12]
 801ae90:	681a      	ldr	r2, [r3, #0]
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	429a      	cmp	r2, r3
 801ae98:	d103      	bne.n	801aea2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801ae9a:	683b      	ldr	r3, [r7, #0]
 801ae9c:	681a      	ldr	r2, [r3, #0]
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	68db      	ldr	r3, [r3, #12]
 801aea6:	60fb      	str	r3, [r7, #12]
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d1ef      	bne.n	801ae8e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801aeae:	bf00      	nop
 801aeb0:	3710      	adds	r7, #16
 801aeb2:	46bd      	mov	sp, r7
 801aeb4:	bd80      	pop	{r7, pc}
 801aeb6:	bf00      	nop
 801aeb8:	2000bfb8 	.word	0x2000bfb8
 801aebc:	2000bfb0 	.word	0x2000bfb0
 801aec0:	2000bfb4 	.word	0x2000bfb4

0801aec4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801aec4:	b580      	push	{r7, lr}
 801aec6:	b082      	sub	sp, #8
 801aec8:	af00      	add	r7, sp, #0
 801aeca:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d007      	beq.n	801aee4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801aed8:	4618      	mov	r0, r3
 801aeda:	f7ff fb6f 	bl	801a5bc <tcp_segs_free>
    pcb->ooseq = NULL;
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	2200      	movs	r2, #0
 801aee2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801aee4:	bf00      	nop
 801aee6:	3708      	adds	r7, #8
 801aee8:	46bd      	mov	sp, r7
 801aeea:	bd80      	pop	{r7, pc}

0801aeec <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801aeec:	b590      	push	{r4, r7, lr}
 801aeee:	b08d      	sub	sp, #52	; 0x34
 801aef0:	af04      	add	r7, sp, #16
 801aef2:	6078      	str	r0, [r7, #4]
 801aef4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d105      	bne.n	801af08 <tcp_input+0x1c>
 801aefc:	4b9b      	ldr	r3, [pc, #620]	; (801b16c <tcp_input+0x280>)
 801aefe:	2283      	movs	r2, #131	; 0x83
 801af00:	499b      	ldr	r1, [pc, #620]	; (801b170 <tcp_input+0x284>)
 801af02:	489c      	ldr	r0, [pc, #624]	; (801b174 <tcp_input+0x288>)
 801af04:	f008 fffc 	bl	8023f00 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	685b      	ldr	r3, [r3, #4]
 801af0c:	4a9a      	ldr	r2, [pc, #616]	; (801b178 <tcp_input+0x28c>)
 801af0e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	895b      	ldrh	r3, [r3, #10]
 801af14:	2b13      	cmp	r3, #19
 801af16:	f240 83d1 	bls.w	801b6bc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801af1a:	4b98      	ldr	r3, [pc, #608]	; (801b17c <tcp_input+0x290>)
 801af1c:	695b      	ldr	r3, [r3, #20]
 801af1e:	4a97      	ldr	r2, [pc, #604]	; (801b17c <tcp_input+0x290>)
 801af20:	6812      	ldr	r2, [r2, #0]
 801af22:	4611      	mov	r1, r2
 801af24:	4618      	mov	r0, r3
 801af26:	f006 fc3d 	bl	80217a4 <ip4_addr_isbroadcast_u32>
 801af2a:	4603      	mov	r3, r0
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	f040 83c7 	bne.w	801b6c0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801af32:	4b92      	ldr	r3, [pc, #584]	; (801b17c <tcp_input+0x290>)
 801af34:	695b      	ldr	r3, [r3, #20]
 801af36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801af3a:	2be0      	cmp	r3, #224	; 0xe0
 801af3c:	f000 83c0 	beq.w	801b6c0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801af40:	4b8d      	ldr	r3, [pc, #564]	; (801b178 <tcp_input+0x28c>)
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	899b      	ldrh	r3, [r3, #12]
 801af46:	b29b      	uxth	r3, r3
 801af48:	4618      	mov	r0, r3
 801af4a:	f7fc f9af 	bl	80172ac <lwip_htons>
 801af4e:	4603      	mov	r3, r0
 801af50:	0b1b      	lsrs	r3, r3, #12
 801af52:	b29b      	uxth	r3, r3
 801af54:	b2db      	uxtb	r3, r3
 801af56:	009b      	lsls	r3, r3, #2
 801af58:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801af5a:	7cbb      	ldrb	r3, [r7, #18]
 801af5c:	2b13      	cmp	r3, #19
 801af5e:	f240 83b1 	bls.w	801b6c4 <tcp_input+0x7d8>
 801af62:	7cbb      	ldrb	r3, [r7, #18]
 801af64:	b29a      	uxth	r2, r3
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	891b      	ldrh	r3, [r3, #8]
 801af6a:	429a      	cmp	r2, r3
 801af6c:	f200 83aa 	bhi.w	801b6c4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801af70:	7cbb      	ldrb	r3, [r7, #18]
 801af72:	b29b      	uxth	r3, r3
 801af74:	3b14      	subs	r3, #20
 801af76:	b29a      	uxth	r2, r3
 801af78:	4b81      	ldr	r3, [pc, #516]	; (801b180 <tcp_input+0x294>)
 801af7a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801af7c:	4b81      	ldr	r3, [pc, #516]	; (801b184 <tcp_input+0x298>)
 801af7e:	2200      	movs	r2, #0
 801af80:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	895a      	ldrh	r2, [r3, #10]
 801af86:	7cbb      	ldrb	r3, [r7, #18]
 801af88:	b29b      	uxth	r3, r3
 801af8a:	429a      	cmp	r2, r3
 801af8c:	d309      	bcc.n	801afa2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801af8e:	4b7c      	ldr	r3, [pc, #496]	; (801b180 <tcp_input+0x294>)
 801af90:	881a      	ldrh	r2, [r3, #0]
 801af92:	4b7d      	ldr	r3, [pc, #500]	; (801b188 <tcp_input+0x29c>)
 801af94:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801af96:	7cbb      	ldrb	r3, [r7, #18]
 801af98:	4619      	mov	r1, r3
 801af9a:	6878      	ldr	r0, [r7, #4]
 801af9c:	f7fd fcf2 	bl	8018984 <pbuf_remove_header>
 801afa0:	e04e      	b.n	801b040 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d105      	bne.n	801afb6 <tcp_input+0xca>
 801afaa:	4b70      	ldr	r3, [pc, #448]	; (801b16c <tcp_input+0x280>)
 801afac:	22c2      	movs	r2, #194	; 0xc2
 801afae:	4977      	ldr	r1, [pc, #476]	; (801b18c <tcp_input+0x2a0>)
 801afb0:	4870      	ldr	r0, [pc, #448]	; (801b174 <tcp_input+0x288>)
 801afb2:	f008 ffa5 	bl	8023f00 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801afb6:	2114      	movs	r1, #20
 801afb8:	6878      	ldr	r0, [r7, #4]
 801afba:	f7fd fce3 	bl	8018984 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	895a      	ldrh	r2, [r3, #10]
 801afc2:	4b71      	ldr	r3, [pc, #452]	; (801b188 <tcp_input+0x29c>)
 801afc4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801afc6:	4b6e      	ldr	r3, [pc, #440]	; (801b180 <tcp_input+0x294>)
 801afc8:	881a      	ldrh	r2, [r3, #0]
 801afca:	4b6f      	ldr	r3, [pc, #444]	; (801b188 <tcp_input+0x29c>)
 801afcc:	881b      	ldrh	r3, [r3, #0]
 801afce:	1ad3      	subs	r3, r2, r3
 801afd0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801afd2:	4b6d      	ldr	r3, [pc, #436]	; (801b188 <tcp_input+0x29c>)
 801afd4:	881b      	ldrh	r3, [r3, #0]
 801afd6:	4619      	mov	r1, r3
 801afd8:	6878      	ldr	r0, [r7, #4]
 801afda:	f7fd fcd3 	bl	8018984 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	895b      	ldrh	r3, [r3, #10]
 801afe4:	8a3a      	ldrh	r2, [r7, #16]
 801afe6:	429a      	cmp	r2, r3
 801afe8:	f200 836e 	bhi.w	801b6c8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	685b      	ldr	r3, [r3, #4]
 801aff2:	4a64      	ldr	r2, [pc, #400]	; (801b184 <tcp_input+0x298>)
 801aff4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	8a3a      	ldrh	r2, [r7, #16]
 801affc:	4611      	mov	r1, r2
 801affe:	4618      	mov	r0, r3
 801b000:	f7fd fcc0 	bl	8018984 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	891a      	ldrh	r2, [r3, #8]
 801b008:	8a3b      	ldrh	r3, [r7, #16]
 801b00a:	1ad3      	subs	r3, r2, r3
 801b00c:	b29a      	uxth	r2, r3
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	895b      	ldrh	r3, [r3, #10]
 801b016:	2b00      	cmp	r3, #0
 801b018:	d005      	beq.n	801b026 <tcp_input+0x13a>
 801b01a:	4b54      	ldr	r3, [pc, #336]	; (801b16c <tcp_input+0x280>)
 801b01c:	22df      	movs	r2, #223	; 0xdf
 801b01e:	495c      	ldr	r1, [pc, #368]	; (801b190 <tcp_input+0x2a4>)
 801b020:	4854      	ldr	r0, [pc, #336]	; (801b174 <tcp_input+0x288>)
 801b022:	f008 ff6d 	bl	8023f00 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	891a      	ldrh	r2, [r3, #8]
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	891b      	ldrh	r3, [r3, #8]
 801b030:	429a      	cmp	r2, r3
 801b032:	d005      	beq.n	801b040 <tcp_input+0x154>
 801b034:	4b4d      	ldr	r3, [pc, #308]	; (801b16c <tcp_input+0x280>)
 801b036:	22e0      	movs	r2, #224	; 0xe0
 801b038:	4956      	ldr	r1, [pc, #344]	; (801b194 <tcp_input+0x2a8>)
 801b03a:	484e      	ldr	r0, [pc, #312]	; (801b174 <tcp_input+0x288>)
 801b03c:	f008 ff60 	bl	8023f00 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801b040:	4b4d      	ldr	r3, [pc, #308]	; (801b178 <tcp_input+0x28c>)
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	881b      	ldrh	r3, [r3, #0]
 801b046:	b29b      	uxth	r3, r3
 801b048:	4a4b      	ldr	r2, [pc, #300]	; (801b178 <tcp_input+0x28c>)
 801b04a:	6814      	ldr	r4, [r2, #0]
 801b04c:	4618      	mov	r0, r3
 801b04e:	f7fc f92d 	bl	80172ac <lwip_htons>
 801b052:	4603      	mov	r3, r0
 801b054:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801b056:	4b48      	ldr	r3, [pc, #288]	; (801b178 <tcp_input+0x28c>)
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	885b      	ldrh	r3, [r3, #2]
 801b05c:	b29b      	uxth	r3, r3
 801b05e:	4a46      	ldr	r2, [pc, #280]	; (801b178 <tcp_input+0x28c>)
 801b060:	6814      	ldr	r4, [r2, #0]
 801b062:	4618      	mov	r0, r3
 801b064:	f7fc f922 	bl	80172ac <lwip_htons>
 801b068:	4603      	mov	r3, r0
 801b06a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801b06c:	4b42      	ldr	r3, [pc, #264]	; (801b178 <tcp_input+0x28c>)
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	685b      	ldr	r3, [r3, #4]
 801b072:	4a41      	ldr	r2, [pc, #260]	; (801b178 <tcp_input+0x28c>)
 801b074:	6814      	ldr	r4, [r2, #0]
 801b076:	4618      	mov	r0, r3
 801b078:	f7fc f92d 	bl	80172d6 <lwip_htonl>
 801b07c:	4603      	mov	r3, r0
 801b07e:	6063      	str	r3, [r4, #4]
 801b080:	6863      	ldr	r3, [r4, #4]
 801b082:	4a45      	ldr	r2, [pc, #276]	; (801b198 <tcp_input+0x2ac>)
 801b084:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801b086:	4b3c      	ldr	r3, [pc, #240]	; (801b178 <tcp_input+0x28c>)
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	689b      	ldr	r3, [r3, #8]
 801b08c:	4a3a      	ldr	r2, [pc, #232]	; (801b178 <tcp_input+0x28c>)
 801b08e:	6814      	ldr	r4, [r2, #0]
 801b090:	4618      	mov	r0, r3
 801b092:	f7fc f920 	bl	80172d6 <lwip_htonl>
 801b096:	4603      	mov	r3, r0
 801b098:	60a3      	str	r3, [r4, #8]
 801b09a:	68a3      	ldr	r3, [r4, #8]
 801b09c:	4a3f      	ldr	r2, [pc, #252]	; (801b19c <tcp_input+0x2b0>)
 801b09e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801b0a0:	4b35      	ldr	r3, [pc, #212]	; (801b178 <tcp_input+0x28c>)
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	89db      	ldrh	r3, [r3, #14]
 801b0a6:	b29b      	uxth	r3, r3
 801b0a8:	4a33      	ldr	r2, [pc, #204]	; (801b178 <tcp_input+0x28c>)
 801b0aa:	6814      	ldr	r4, [r2, #0]
 801b0ac:	4618      	mov	r0, r3
 801b0ae:	f7fc f8fd 	bl	80172ac <lwip_htons>
 801b0b2:	4603      	mov	r3, r0
 801b0b4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801b0b6:	4b30      	ldr	r3, [pc, #192]	; (801b178 <tcp_input+0x28c>)
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	899b      	ldrh	r3, [r3, #12]
 801b0bc:	b29b      	uxth	r3, r3
 801b0be:	4618      	mov	r0, r3
 801b0c0:	f7fc f8f4 	bl	80172ac <lwip_htons>
 801b0c4:	4603      	mov	r3, r0
 801b0c6:	b2db      	uxtb	r3, r3
 801b0c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b0cc:	b2da      	uxtb	r2, r3
 801b0ce:	4b34      	ldr	r3, [pc, #208]	; (801b1a0 <tcp_input+0x2b4>)
 801b0d0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	891a      	ldrh	r2, [r3, #8]
 801b0d6:	4b33      	ldr	r3, [pc, #204]	; (801b1a4 <tcp_input+0x2b8>)
 801b0d8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801b0da:	4b31      	ldr	r3, [pc, #196]	; (801b1a0 <tcp_input+0x2b4>)
 801b0dc:	781b      	ldrb	r3, [r3, #0]
 801b0de:	f003 0303 	and.w	r3, r3, #3
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d00c      	beq.n	801b100 <tcp_input+0x214>
    tcplen++;
 801b0e6:	4b2f      	ldr	r3, [pc, #188]	; (801b1a4 <tcp_input+0x2b8>)
 801b0e8:	881b      	ldrh	r3, [r3, #0]
 801b0ea:	3301      	adds	r3, #1
 801b0ec:	b29a      	uxth	r2, r3
 801b0ee:	4b2d      	ldr	r3, [pc, #180]	; (801b1a4 <tcp_input+0x2b8>)
 801b0f0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	891a      	ldrh	r2, [r3, #8]
 801b0f6:	4b2b      	ldr	r3, [pc, #172]	; (801b1a4 <tcp_input+0x2b8>)
 801b0f8:	881b      	ldrh	r3, [r3, #0]
 801b0fa:	429a      	cmp	r2, r3
 801b0fc:	f200 82e6 	bhi.w	801b6cc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801b100:	2300      	movs	r3, #0
 801b102:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b104:	4b28      	ldr	r3, [pc, #160]	; (801b1a8 <tcp_input+0x2bc>)
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	61fb      	str	r3, [r7, #28]
 801b10a:	e09d      	b.n	801b248 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801b10c:	69fb      	ldr	r3, [r7, #28]
 801b10e:	7d1b      	ldrb	r3, [r3, #20]
 801b110:	2b00      	cmp	r3, #0
 801b112:	d105      	bne.n	801b120 <tcp_input+0x234>
 801b114:	4b15      	ldr	r3, [pc, #84]	; (801b16c <tcp_input+0x280>)
 801b116:	22fb      	movs	r2, #251	; 0xfb
 801b118:	4924      	ldr	r1, [pc, #144]	; (801b1ac <tcp_input+0x2c0>)
 801b11a:	4816      	ldr	r0, [pc, #88]	; (801b174 <tcp_input+0x288>)
 801b11c:	f008 fef0 	bl	8023f00 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801b120:	69fb      	ldr	r3, [r7, #28]
 801b122:	7d1b      	ldrb	r3, [r3, #20]
 801b124:	2b0a      	cmp	r3, #10
 801b126:	d105      	bne.n	801b134 <tcp_input+0x248>
 801b128:	4b10      	ldr	r3, [pc, #64]	; (801b16c <tcp_input+0x280>)
 801b12a:	22fc      	movs	r2, #252	; 0xfc
 801b12c:	4920      	ldr	r1, [pc, #128]	; (801b1b0 <tcp_input+0x2c4>)
 801b12e:	4811      	ldr	r0, [pc, #68]	; (801b174 <tcp_input+0x288>)
 801b130:	f008 fee6 	bl	8023f00 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801b134:	69fb      	ldr	r3, [r7, #28]
 801b136:	7d1b      	ldrb	r3, [r3, #20]
 801b138:	2b01      	cmp	r3, #1
 801b13a:	d105      	bne.n	801b148 <tcp_input+0x25c>
 801b13c:	4b0b      	ldr	r3, [pc, #44]	; (801b16c <tcp_input+0x280>)
 801b13e:	22fd      	movs	r2, #253	; 0xfd
 801b140:	491c      	ldr	r1, [pc, #112]	; (801b1b4 <tcp_input+0x2c8>)
 801b142:	480c      	ldr	r0, [pc, #48]	; (801b174 <tcp_input+0x288>)
 801b144:	f008 fedc 	bl	8023f00 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b148:	69fb      	ldr	r3, [r7, #28]
 801b14a:	7a1b      	ldrb	r3, [r3, #8]
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d033      	beq.n	801b1b8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b150:	69fb      	ldr	r3, [r7, #28]
 801b152:	7a1a      	ldrb	r2, [r3, #8]
 801b154:	4b09      	ldr	r3, [pc, #36]	; (801b17c <tcp_input+0x290>)
 801b156:	685b      	ldr	r3, [r3, #4]
 801b158:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b15c:	3301      	adds	r3, #1
 801b15e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b160:	429a      	cmp	r2, r3
 801b162:	d029      	beq.n	801b1b8 <tcp_input+0x2cc>
      prev = pcb;
 801b164:	69fb      	ldr	r3, [r7, #28]
 801b166:	61bb      	str	r3, [r7, #24]
      continue;
 801b168:	e06b      	b.n	801b242 <tcp_input+0x356>
 801b16a:	bf00      	nop
 801b16c:	080271c4 	.word	0x080271c4
 801b170:	080271f8 	.word	0x080271f8
 801b174:	08027210 	.word	0x08027210
 801b178:	2000bfd4 	.word	0x2000bfd4
 801b17c:	20006698 	.word	0x20006698
 801b180:	2000bfd8 	.word	0x2000bfd8
 801b184:	2000bfdc 	.word	0x2000bfdc
 801b188:	2000bfda 	.word	0x2000bfda
 801b18c:	08027238 	.word	0x08027238
 801b190:	08027248 	.word	0x08027248
 801b194:	08027254 	.word	0x08027254
 801b198:	2000bfe4 	.word	0x2000bfe4
 801b19c:	2000bfe8 	.word	0x2000bfe8
 801b1a0:	2000bff0 	.word	0x2000bff0
 801b1a4:	2000bfee 	.word	0x2000bfee
 801b1a8:	2000bfb8 	.word	0x2000bfb8
 801b1ac:	08027274 	.word	0x08027274
 801b1b0:	0802729c 	.word	0x0802729c
 801b1b4:	080272c8 	.word	0x080272c8
    }

    if (pcb->remote_port == tcphdr->src &&
 801b1b8:	69fb      	ldr	r3, [r7, #28]
 801b1ba:	8b1a      	ldrh	r2, [r3, #24]
 801b1bc:	4b72      	ldr	r3, [pc, #456]	; (801b388 <tcp_input+0x49c>)
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	881b      	ldrh	r3, [r3, #0]
 801b1c2:	b29b      	uxth	r3, r3
 801b1c4:	429a      	cmp	r2, r3
 801b1c6:	d13a      	bne.n	801b23e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801b1c8:	69fb      	ldr	r3, [r7, #28]
 801b1ca:	8ada      	ldrh	r2, [r3, #22]
 801b1cc:	4b6e      	ldr	r3, [pc, #440]	; (801b388 <tcp_input+0x49c>)
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	885b      	ldrh	r3, [r3, #2]
 801b1d2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801b1d4:	429a      	cmp	r2, r3
 801b1d6:	d132      	bne.n	801b23e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b1d8:	69fb      	ldr	r3, [r7, #28]
 801b1da:	685a      	ldr	r2, [r3, #4]
 801b1dc:	4b6b      	ldr	r3, [pc, #428]	; (801b38c <tcp_input+0x4a0>)
 801b1de:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801b1e0:	429a      	cmp	r2, r3
 801b1e2:	d12c      	bne.n	801b23e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b1e4:	69fb      	ldr	r3, [r7, #28]
 801b1e6:	681a      	ldr	r2, [r3, #0]
 801b1e8:	4b68      	ldr	r3, [pc, #416]	; (801b38c <tcp_input+0x4a0>)
 801b1ea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b1ec:	429a      	cmp	r2, r3
 801b1ee:	d126      	bne.n	801b23e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801b1f0:	69fb      	ldr	r3, [r7, #28]
 801b1f2:	68db      	ldr	r3, [r3, #12]
 801b1f4:	69fa      	ldr	r2, [r7, #28]
 801b1f6:	429a      	cmp	r2, r3
 801b1f8:	d106      	bne.n	801b208 <tcp_input+0x31c>
 801b1fa:	4b65      	ldr	r3, [pc, #404]	; (801b390 <tcp_input+0x4a4>)
 801b1fc:	f240 120d 	movw	r2, #269	; 0x10d
 801b200:	4964      	ldr	r1, [pc, #400]	; (801b394 <tcp_input+0x4a8>)
 801b202:	4865      	ldr	r0, [pc, #404]	; (801b398 <tcp_input+0x4ac>)
 801b204:	f008 fe7c 	bl	8023f00 <iprintf>
      if (prev != NULL) {
 801b208:	69bb      	ldr	r3, [r7, #24]
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d00a      	beq.n	801b224 <tcp_input+0x338>
        prev->next = pcb->next;
 801b20e:	69fb      	ldr	r3, [r7, #28]
 801b210:	68da      	ldr	r2, [r3, #12]
 801b212:	69bb      	ldr	r3, [r7, #24]
 801b214:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801b216:	4b61      	ldr	r3, [pc, #388]	; (801b39c <tcp_input+0x4b0>)
 801b218:	681a      	ldr	r2, [r3, #0]
 801b21a:	69fb      	ldr	r3, [r7, #28]
 801b21c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801b21e:	4a5f      	ldr	r2, [pc, #380]	; (801b39c <tcp_input+0x4b0>)
 801b220:	69fb      	ldr	r3, [r7, #28]
 801b222:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801b224:	69fb      	ldr	r3, [r7, #28]
 801b226:	68db      	ldr	r3, [r3, #12]
 801b228:	69fa      	ldr	r2, [r7, #28]
 801b22a:	429a      	cmp	r2, r3
 801b22c:	d111      	bne.n	801b252 <tcp_input+0x366>
 801b22e:	4b58      	ldr	r3, [pc, #352]	; (801b390 <tcp_input+0x4a4>)
 801b230:	f240 1215 	movw	r2, #277	; 0x115
 801b234:	495a      	ldr	r1, [pc, #360]	; (801b3a0 <tcp_input+0x4b4>)
 801b236:	4858      	ldr	r0, [pc, #352]	; (801b398 <tcp_input+0x4ac>)
 801b238:	f008 fe62 	bl	8023f00 <iprintf>
      break;
 801b23c:	e009      	b.n	801b252 <tcp_input+0x366>
    }
    prev = pcb;
 801b23e:	69fb      	ldr	r3, [r7, #28]
 801b240:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b242:	69fb      	ldr	r3, [r7, #28]
 801b244:	68db      	ldr	r3, [r3, #12]
 801b246:	61fb      	str	r3, [r7, #28]
 801b248:	69fb      	ldr	r3, [r7, #28]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	f47f af5e 	bne.w	801b10c <tcp_input+0x220>
 801b250:	e000      	b.n	801b254 <tcp_input+0x368>
      break;
 801b252:	bf00      	nop
  }

  if (pcb == NULL) {
 801b254:	69fb      	ldr	r3, [r7, #28]
 801b256:	2b00      	cmp	r3, #0
 801b258:	f040 80aa 	bne.w	801b3b0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b25c:	4b51      	ldr	r3, [pc, #324]	; (801b3a4 <tcp_input+0x4b8>)
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	61fb      	str	r3, [r7, #28]
 801b262:	e03f      	b.n	801b2e4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b264:	69fb      	ldr	r3, [r7, #28]
 801b266:	7d1b      	ldrb	r3, [r3, #20]
 801b268:	2b0a      	cmp	r3, #10
 801b26a:	d006      	beq.n	801b27a <tcp_input+0x38e>
 801b26c:	4b48      	ldr	r3, [pc, #288]	; (801b390 <tcp_input+0x4a4>)
 801b26e:	f240 121f 	movw	r2, #287	; 0x11f
 801b272:	494d      	ldr	r1, [pc, #308]	; (801b3a8 <tcp_input+0x4bc>)
 801b274:	4848      	ldr	r0, [pc, #288]	; (801b398 <tcp_input+0x4ac>)
 801b276:	f008 fe43 	bl	8023f00 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b27a:	69fb      	ldr	r3, [r7, #28]
 801b27c:	7a1b      	ldrb	r3, [r3, #8]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d009      	beq.n	801b296 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b282:	69fb      	ldr	r3, [r7, #28]
 801b284:	7a1a      	ldrb	r2, [r3, #8]
 801b286:	4b41      	ldr	r3, [pc, #260]	; (801b38c <tcp_input+0x4a0>)
 801b288:	685b      	ldr	r3, [r3, #4]
 801b28a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b28e:	3301      	adds	r3, #1
 801b290:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b292:	429a      	cmp	r2, r3
 801b294:	d122      	bne.n	801b2dc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801b296:	69fb      	ldr	r3, [r7, #28]
 801b298:	8b1a      	ldrh	r2, [r3, #24]
 801b29a:	4b3b      	ldr	r3, [pc, #236]	; (801b388 <tcp_input+0x49c>)
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	881b      	ldrh	r3, [r3, #0]
 801b2a0:	b29b      	uxth	r3, r3
 801b2a2:	429a      	cmp	r2, r3
 801b2a4:	d11b      	bne.n	801b2de <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801b2a6:	69fb      	ldr	r3, [r7, #28]
 801b2a8:	8ada      	ldrh	r2, [r3, #22]
 801b2aa:	4b37      	ldr	r3, [pc, #220]	; (801b388 <tcp_input+0x49c>)
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	885b      	ldrh	r3, [r3, #2]
 801b2b0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801b2b2:	429a      	cmp	r2, r3
 801b2b4:	d113      	bne.n	801b2de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b2b6:	69fb      	ldr	r3, [r7, #28]
 801b2b8:	685a      	ldr	r2, [r3, #4]
 801b2ba:	4b34      	ldr	r3, [pc, #208]	; (801b38c <tcp_input+0x4a0>)
 801b2bc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801b2be:	429a      	cmp	r2, r3
 801b2c0:	d10d      	bne.n	801b2de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b2c2:	69fb      	ldr	r3, [r7, #28]
 801b2c4:	681a      	ldr	r2, [r3, #0]
 801b2c6:	4b31      	ldr	r3, [pc, #196]	; (801b38c <tcp_input+0x4a0>)
 801b2c8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b2ca:	429a      	cmp	r2, r3
 801b2cc:	d107      	bne.n	801b2de <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801b2ce:	69f8      	ldr	r0, [r7, #28]
 801b2d0:	f000 fb56 	bl	801b980 <tcp_timewait_input>
        }
        pbuf_free(p);
 801b2d4:	6878      	ldr	r0, [r7, #4]
 801b2d6:	f7fd fbdb 	bl	8018a90 <pbuf_free>
        return;
 801b2da:	e1fd      	b.n	801b6d8 <tcp_input+0x7ec>
        continue;
 801b2dc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b2de:	69fb      	ldr	r3, [r7, #28]
 801b2e0:	68db      	ldr	r3, [r3, #12]
 801b2e2:	61fb      	str	r3, [r7, #28]
 801b2e4:	69fb      	ldr	r3, [r7, #28]
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d1bc      	bne.n	801b264 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801b2ea:	2300      	movs	r3, #0
 801b2ec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b2ee:	4b2f      	ldr	r3, [pc, #188]	; (801b3ac <tcp_input+0x4c0>)
 801b2f0:	681b      	ldr	r3, [r3, #0]
 801b2f2:	617b      	str	r3, [r7, #20]
 801b2f4:	e02a      	b.n	801b34c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b2f6:	697b      	ldr	r3, [r7, #20]
 801b2f8:	7a1b      	ldrb	r3, [r3, #8]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d00c      	beq.n	801b318 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b2fe:	697b      	ldr	r3, [r7, #20]
 801b300:	7a1a      	ldrb	r2, [r3, #8]
 801b302:	4b22      	ldr	r3, [pc, #136]	; (801b38c <tcp_input+0x4a0>)
 801b304:	685b      	ldr	r3, [r3, #4]
 801b306:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b30a:	3301      	adds	r3, #1
 801b30c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b30e:	429a      	cmp	r2, r3
 801b310:	d002      	beq.n	801b318 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801b312:	697b      	ldr	r3, [r7, #20]
 801b314:	61bb      	str	r3, [r7, #24]
        continue;
 801b316:	e016      	b.n	801b346 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801b318:	697b      	ldr	r3, [r7, #20]
 801b31a:	8ada      	ldrh	r2, [r3, #22]
 801b31c:	4b1a      	ldr	r3, [pc, #104]	; (801b388 <tcp_input+0x49c>)
 801b31e:	681b      	ldr	r3, [r3, #0]
 801b320:	885b      	ldrh	r3, [r3, #2]
 801b322:	b29b      	uxth	r3, r3
 801b324:	429a      	cmp	r2, r3
 801b326:	d10c      	bne.n	801b342 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b328:	697b      	ldr	r3, [r7, #20]
 801b32a:	681a      	ldr	r2, [r3, #0]
 801b32c:	4b17      	ldr	r3, [pc, #92]	; (801b38c <tcp_input+0x4a0>)
 801b32e:	695b      	ldr	r3, [r3, #20]
 801b330:	429a      	cmp	r2, r3
 801b332:	d00f      	beq.n	801b354 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801b334:	697b      	ldr	r3, [r7, #20]
 801b336:	2b00      	cmp	r3, #0
 801b338:	d00d      	beq.n	801b356 <tcp_input+0x46a>
 801b33a:	697b      	ldr	r3, [r7, #20]
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d009      	beq.n	801b356 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801b342:	697b      	ldr	r3, [r7, #20]
 801b344:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b346:	697b      	ldr	r3, [r7, #20]
 801b348:	68db      	ldr	r3, [r3, #12]
 801b34a:	617b      	str	r3, [r7, #20]
 801b34c:	697b      	ldr	r3, [r7, #20]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d1d1      	bne.n	801b2f6 <tcp_input+0x40a>
 801b352:	e000      	b.n	801b356 <tcp_input+0x46a>
            break;
 801b354:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801b356:	697b      	ldr	r3, [r7, #20]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d029      	beq.n	801b3b0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801b35c:	69bb      	ldr	r3, [r7, #24]
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d00a      	beq.n	801b378 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b362:	697b      	ldr	r3, [r7, #20]
 801b364:	68da      	ldr	r2, [r3, #12]
 801b366:	69bb      	ldr	r3, [r7, #24]
 801b368:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801b36a:	4b10      	ldr	r3, [pc, #64]	; (801b3ac <tcp_input+0x4c0>)
 801b36c:	681a      	ldr	r2, [r3, #0]
 801b36e:	697b      	ldr	r3, [r7, #20]
 801b370:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801b372:	4a0e      	ldr	r2, [pc, #56]	; (801b3ac <tcp_input+0x4c0>)
 801b374:	697b      	ldr	r3, [r7, #20]
 801b376:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801b378:	6978      	ldr	r0, [r7, #20]
 801b37a:	f000 fa03 	bl	801b784 <tcp_listen_input>
      }
      pbuf_free(p);
 801b37e:	6878      	ldr	r0, [r7, #4]
 801b380:	f7fd fb86 	bl	8018a90 <pbuf_free>
      return;
 801b384:	e1a8      	b.n	801b6d8 <tcp_input+0x7ec>
 801b386:	bf00      	nop
 801b388:	2000bfd4 	.word	0x2000bfd4
 801b38c:	20006698 	.word	0x20006698
 801b390:	080271c4 	.word	0x080271c4
 801b394:	080272f0 	.word	0x080272f0
 801b398:	08027210 	.word	0x08027210
 801b39c:	2000bfb8 	.word	0x2000bfb8
 801b3a0:	0802731c 	.word	0x0802731c
 801b3a4:	2000bfbc 	.word	0x2000bfbc
 801b3a8:	08027348 	.word	0x08027348
 801b3ac:	2000bfb4 	.word	0x2000bfb4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801b3b0:	69fb      	ldr	r3, [r7, #28]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	f000 8158 	beq.w	801b668 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801b3b8:	4b95      	ldr	r3, [pc, #596]	; (801b610 <tcp_input+0x724>)
 801b3ba:	2200      	movs	r2, #0
 801b3bc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	891a      	ldrh	r2, [r3, #8]
 801b3c2:	4b93      	ldr	r3, [pc, #588]	; (801b610 <tcp_input+0x724>)
 801b3c4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801b3c6:	4a92      	ldr	r2, [pc, #584]	; (801b610 <tcp_input+0x724>)
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801b3cc:	4b91      	ldr	r3, [pc, #580]	; (801b614 <tcp_input+0x728>)
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	4a8f      	ldr	r2, [pc, #572]	; (801b610 <tcp_input+0x724>)
 801b3d2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801b3d4:	4b90      	ldr	r3, [pc, #576]	; (801b618 <tcp_input+0x72c>)
 801b3d6:	2200      	movs	r2, #0
 801b3d8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801b3da:	4b90      	ldr	r3, [pc, #576]	; (801b61c <tcp_input+0x730>)
 801b3dc:	2200      	movs	r2, #0
 801b3de:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801b3e0:	4b8f      	ldr	r3, [pc, #572]	; (801b620 <tcp_input+0x734>)
 801b3e2:	2200      	movs	r2, #0
 801b3e4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801b3e6:	4b8f      	ldr	r3, [pc, #572]	; (801b624 <tcp_input+0x738>)
 801b3e8:	781b      	ldrb	r3, [r3, #0]
 801b3ea:	f003 0308 	and.w	r3, r3, #8
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d006      	beq.n	801b400 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	7b5b      	ldrb	r3, [r3, #13]
 801b3f6:	f043 0301 	orr.w	r3, r3, #1
 801b3fa:	b2da      	uxtb	r2, r3
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801b400:	69fb      	ldr	r3, [r7, #28]
 801b402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b404:	2b00      	cmp	r3, #0
 801b406:	d017      	beq.n	801b438 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b408:	69f8      	ldr	r0, [r7, #28]
 801b40a:	f7ff f85b 	bl	801a4c4 <tcp_process_refused_data>
 801b40e:	4603      	mov	r3, r0
 801b410:	f113 0f0d 	cmn.w	r3, #13
 801b414:	d007      	beq.n	801b426 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b416:	69fb      	ldr	r3, [r7, #28]
 801b418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d00c      	beq.n	801b438 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b41e:	4b82      	ldr	r3, [pc, #520]	; (801b628 <tcp_input+0x73c>)
 801b420:	881b      	ldrh	r3, [r3, #0]
 801b422:	2b00      	cmp	r3, #0
 801b424:	d008      	beq.n	801b438 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801b426:	69fb      	ldr	r3, [r7, #28]
 801b428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	f040 80e3 	bne.w	801b5f6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801b430:	69f8      	ldr	r0, [r7, #28]
 801b432:	f003 fe05 	bl	801f040 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801b436:	e0de      	b.n	801b5f6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801b438:	4a7c      	ldr	r2, [pc, #496]	; (801b62c <tcp_input+0x740>)
 801b43a:	69fb      	ldr	r3, [r7, #28]
 801b43c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801b43e:	69f8      	ldr	r0, [r7, #28]
 801b440:	f000 fb18 	bl	801ba74 <tcp_process>
 801b444:	4603      	mov	r3, r0
 801b446:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801b448:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b44c:	f113 0f0d 	cmn.w	r3, #13
 801b450:	f000 80d3 	beq.w	801b5fa <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801b454:	4b71      	ldr	r3, [pc, #452]	; (801b61c <tcp_input+0x730>)
 801b456:	781b      	ldrb	r3, [r3, #0]
 801b458:	f003 0308 	and.w	r3, r3, #8
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	d015      	beq.n	801b48c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801b460:	69fb      	ldr	r3, [r7, #28]
 801b462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b466:	2b00      	cmp	r3, #0
 801b468:	d008      	beq.n	801b47c <tcp_input+0x590>
 801b46a:	69fb      	ldr	r3, [r7, #28]
 801b46c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b470:	69fa      	ldr	r2, [r7, #28]
 801b472:	6912      	ldr	r2, [r2, #16]
 801b474:	f06f 010d 	mvn.w	r1, #13
 801b478:	4610      	mov	r0, r2
 801b47a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b47c:	69f9      	ldr	r1, [r7, #28]
 801b47e:	486c      	ldr	r0, [pc, #432]	; (801b630 <tcp_input+0x744>)
 801b480:	f7ff fbbc 	bl	801abfc <tcp_pcb_remove>
        tcp_free(pcb);
 801b484:	69f8      	ldr	r0, [r7, #28]
 801b486:	f7fd fdbf 	bl	8019008 <tcp_free>
 801b48a:	e0da      	b.n	801b642 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801b48c:	2300      	movs	r3, #0
 801b48e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801b490:	4b63      	ldr	r3, [pc, #396]	; (801b620 <tcp_input+0x734>)
 801b492:	881b      	ldrh	r3, [r3, #0]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d01d      	beq.n	801b4d4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801b498:	4b61      	ldr	r3, [pc, #388]	; (801b620 <tcp_input+0x734>)
 801b49a:	881b      	ldrh	r3, [r3, #0]
 801b49c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b49e:	69fb      	ldr	r3, [r7, #28]
 801b4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	d00a      	beq.n	801b4be <tcp_input+0x5d2>
 801b4a8:	69fb      	ldr	r3, [r7, #28]
 801b4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b4ae:	69fa      	ldr	r2, [r7, #28]
 801b4b0:	6910      	ldr	r0, [r2, #16]
 801b4b2:	89fa      	ldrh	r2, [r7, #14]
 801b4b4:	69f9      	ldr	r1, [r7, #28]
 801b4b6:	4798      	blx	r3
 801b4b8:	4603      	mov	r3, r0
 801b4ba:	74fb      	strb	r3, [r7, #19]
 801b4bc:	e001      	b.n	801b4c2 <tcp_input+0x5d6>
 801b4be:	2300      	movs	r3, #0
 801b4c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b4c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b4c6:	f113 0f0d 	cmn.w	r3, #13
 801b4ca:	f000 8098 	beq.w	801b5fe <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801b4ce:	4b54      	ldr	r3, [pc, #336]	; (801b620 <tcp_input+0x734>)
 801b4d0:	2200      	movs	r2, #0
 801b4d2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801b4d4:	69f8      	ldr	r0, [r7, #28]
 801b4d6:	f000 f915 	bl	801b704 <tcp_input_delayed_close>
 801b4da:	4603      	mov	r3, r0
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	f040 8090 	bne.w	801b602 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801b4e2:	4b4d      	ldr	r3, [pc, #308]	; (801b618 <tcp_input+0x72c>)
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d041      	beq.n	801b56e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801b4ea:	69fb      	ldr	r3, [r7, #28]
 801b4ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d006      	beq.n	801b500 <tcp_input+0x614>
 801b4f2:	4b50      	ldr	r3, [pc, #320]	; (801b634 <tcp_input+0x748>)
 801b4f4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b4f8:	494f      	ldr	r1, [pc, #316]	; (801b638 <tcp_input+0x74c>)
 801b4fa:	4850      	ldr	r0, [pc, #320]	; (801b63c <tcp_input+0x750>)
 801b4fc:	f008 fd00 	bl	8023f00 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801b500:	69fb      	ldr	r3, [r7, #28]
 801b502:	8b5b      	ldrh	r3, [r3, #26]
 801b504:	f003 0310 	and.w	r3, r3, #16
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d008      	beq.n	801b51e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801b50c:	4b42      	ldr	r3, [pc, #264]	; (801b618 <tcp_input+0x72c>)
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	4618      	mov	r0, r3
 801b512:	f7fd fabd 	bl	8018a90 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801b516:	69f8      	ldr	r0, [r7, #28]
 801b518:	f7fe f8ba 	bl	8019690 <tcp_abort>
            goto aborted;
 801b51c:	e091      	b.n	801b642 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b51e:	69fb      	ldr	r3, [r7, #28]
 801b520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b524:	2b00      	cmp	r3, #0
 801b526:	d00c      	beq.n	801b542 <tcp_input+0x656>
 801b528:	69fb      	ldr	r3, [r7, #28]
 801b52a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b52e:	69fb      	ldr	r3, [r7, #28]
 801b530:	6918      	ldr	r0, [r3, #16]
 801b532:	4b39      	ldr	r3, [pc, #228]	; (801b618 <tcp_input+0x72c>)
 801b534:	681a      	ldr	r2, [r3, #0]
 801b536:	2300      	movs	r3, #0
 801b538:	69f9      	ldr	r1, [r7, #28]
 801b53a:	47a0      	blx	r4
 801b53c:	4603      	mov	r3, r0
 801b53e:	74fb      	strb	r3, [r7, #19]
 801b540:	e008      	b.n	801b554 <tcp_input+0x668>
 801b542:	4b35      	ldr	r3, [pc, #212]	; (801b618 <tcp_input+0x72c>)
 801b544:	681a      	ldr	r2, [r3, #0]
 801b546:	2300      	movs	r3, #0
 801b548:	69f9      	ldr	r1, [r7, #28]
 801b54a:	2000      	movs	r0, #0
 801b54c:	f7ff f890 	bl	801a670 <tcp_recv_null>
 801b550:	4603      	mov	r3, r0
 801b552:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801b554:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b558:	f113 0f0d 	cmn.w	r3, #13
 801b55c:	d053      	beq.n	801b606 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801b55e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b562:	2b00      	cmp	r3, #0
 801b564:	d003      	beq.n	801b56e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801b566:	4b2c      	ldr	r3, [pc, #176]	; (801b618 <tcp_input+0x72c>)
 801b568:	681a      	ldr	r2, [r3, #0]
 801b56a:	69fb      	ldr	r3, [r7, #28]
 801b56c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801b56e:	4b2b      	ldr	r3, [pc, #172]	; (801b61c <tcp_input+0x730>)
 801b570:	781b      	ldrb	r3, [r3, #0]
 801b572:	f003 0320 	and.w	r3, r3, #32
 801b576:	2b00      	cmp	r3, #0
 801b578:	d030      	beq.n	801b5dc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801b57a:	69fb      	ldr	r3, [r7, #28]
 801b57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d009      	beq.n	801b596 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801b582:	69fb      	ldr	r3, [r7, #28]
 801b584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b586:	7b5a      	ldrb	r2, [r3, #13]
 801b588:	69fb      	ldr	r3, [r7, #28]
 801b58a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b58c:	f042 0220 	orr.w	r2, r2, #32
 801b590:	b2d2      	uxtb	r2, r2
 801b592:	735a      	strb	r2, [r3, #13]
 801b594:	e022      	b.n	801b5dc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b596:	69fb      	ldr	r3, [r7, #28]
 801b598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b59a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801b59e:	d005      	beq.n	801b5ac <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801b5a0:	69fb      	ldr	r3, [r7, #28]
 801b5a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b5a4:	3301      	adds	r3, #1
 801b5a6:	b29a      	uxth	r2, r3
 801b5a8:	69fb      	ldr	r3, [r7, #28]
 801b5aa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801b5ac:	69fb      	ldr	r3, [r7, #28]
 801b5ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d00b      	beq.n	801b5ce <tcp_input+0x6e2>
 801b5b6:	69fb      	ldr	r3, [r7, #28]
 801b5b8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b5bc:	69fb      	ldr	r3, [r7, #28]
 801b5be:	6918      	ldr	r0, [r3, #16]
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	2200      	movs	r2, #0
 801b5c4:	69f9      	ldr	r1, [r7, #28]
 801b5c6:	47a0      	blx	r4
 801b5c8:	4603      	mov	r3, r0
 801b5ca:	74fb      	strb	r3, [r7, #19]
 801b5cc:	e001      	b.n	801b5d2 <tcp_input+0x6e6>
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b5d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b5d6:	f113 0f0d 	cmn.w	r3, #13
 801b5da:	d016      	beq.n	801b60a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801b5dc:	4b13      	ldr	r3, [pc, #76]	; (801b62c <tcp_input+0x740>)
 801b5de:	2200      	movs	r2, #0
 801b5e0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b5e2:	69f8      	ldr	r0, [r7, #28]
 801b5e4:	f000 f88e 	bl	801b704 <tcp_input_delayed_close>
 801b5e8:	4603      	mov	r3, r0
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d128      	bne.n	801b640 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801b5ee:	69f8      	ldr	r0, [r7, #28]
 801b5f0:	f002 ff20 	bl	801e434 <tcp_output>
 801b5f4:	e025      	b.n	801b642 <tcp_input+0x756>
        goto aborted;
 801b5f6:	bf00      	nop
 801b5f8:	e023      	b.n	801b642 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801b5fa:	bf00      	nop
 801b5fc:	e021      	b.n	801b642 <tcp_input+0x756>
              goto aborted;
 801b5fe:	bf00      	nop
 801b600:	e01f      	b.n	801b642 <tcp_input+0x756>
          goto aborted;
 801b602:	bf00      	nop
 801b604:	e01d      	b.n	801b642 <tcp_input+0x756>
            goto aborted;
 801b606:	bf00      	nop
 801b608:	e01b      	b.n	801b642 <tcp_input+0x756>
              goto aborted;
 801b60a:	bf00      	nop
 801b60c:	e019      	b.n	801b642 <tcp_input+0x756>
 801b60e:	bf00      	nop
 801b610:	2000bfc4 	.word	0x2000bfc4
 801b614:	2000bfd4 	.word	0x2000bfd4
 801b618:	2000bff4 	.word	0x2000bff4
 801b61c:	2000bff1 	.word	0x2000bff1
 801b620:	2000bfec 	.word	0x2000bfec
 801b624:	2000bff0 	.word	0x2000bff0
 801b628:	2000bfee 	.word	0x2000bfee
 801b62c:	2000bff8 	.word	0x2000bff8
 801b630:	2000bfb8 	.word	0x2000bfb8
 801b634:	080271c4 	.word	0x080271c4
 801b638:	08027378 	.word	0x08027378
 801b63c:	08027210 	.word	0x08027210
          goto aborted;
 801b640:	bf00      	nop
    tcp_input_pcb = NULL;
 801b642:	4b27      	ldr	r3, [pc, #156]	; (801b6e0 <tcp_input+0x7f4>)
 801b644:	2200      	movs	r2, #0
 801b646:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801b648:	4b26      	ldr	r3, [pc, #152]	; (801b6e4 <tcp_input+0x7f8>)
 801b64a:	2200      	movs	r2, #0
 801b64c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801b64e:	4b26      	ldr	r3, [pc, #152]	; (801b6e8 <tcp_input+0x7fc>)
 801b650:	685b      	ldr	r3, [r3, #4]
 801b652:	2b00      	cmp	r3, #0
 801b654:	d03f      	beq.n	801b6d6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801b656:	4b24      	ldr	r3, [pc, #144]	; (801b6e8 <tcp_input+0x7fc>)
 801b658:	685b      	ldr	r3, [r3, #4]
 801b65a:	4618      	mov	r0, r3
 801b65c:	f7fd fa18 	bl	8018a90 <pbuf_free>
      inseg.p = NULL;
 801b660:	4b21      	ldr	r3, [pc, #132]	; (801b6e8 <tcp_input+0x7fc>)
 801b662:	2200      	movs	r2, #0
 801b664:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801b666:	e036      	b.n	801b6d6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801b668:	4b20      	ldr	r3, [pc, #128]	; (801b6ec <tcp_input+0x800>)
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	899b      	ldrh	r3, [r3, #12]
 801b66e:	b29b      	uxth	r3, r3
 801b670:	4618      	mov	r0, r3
 801b672:	f7fb fe1b 	bl	80172ac <lwip_htons>
 801b676:	4603      	mov	r3, r0
 801b678:	b2db      	uxtb	r3, r3
 801b67a:	f003 0304 	and.w	r3, r3, #4
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d118      	bne.n	801b6b4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b682:	4b1b      	ldr	r3, [pc, #108]	; (801b6f0 <tcp_input+0x804>)
 801b684:	6819      	ldr	r1, [r3, #0]
 801b686:	4b1b      	ldr	r3, [pc, #108]	; (801b6f4 <tcp_input+0x808>)
 801b688:	881b      	ldrh	r3, [r3, #0]
 801b68a:	461a      	mov	r2, r3
 801b68c:	4b1a      	ldr	r3, [pc, #104]	; (801b6f8 <tcp_input+0x80c>)
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b692:	4b16      	ldr	r3, [pc, #88]	; (801b6ec <tcp_input+0x800>)
 801b694:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b696:	885b      	ldrh	r3, [r3, #2]
 801b698:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b69a:	4a14      	ldr	r2, [pc, #80]	; (801b6ec <tcp_input+0x800>)
 801b69c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b69e:	8812      	ldrh	r2, [r2, #0]
 801b6a0:	b292      	uxth	r2, r2
 801b6a2:	9202      	str	r2, [sp, #8]
 801b6a4:	9301      	str	r3, [sp, #4]
 801b6a6:	4b15      	ldr	r3, [pc, #84]	; (801b6fc <tcp_input+0x810>)
 801b6a8:	9300      	str	r3, [sp, #0]
 801b6aa:	4b15      	ldr	r3, [pc, #84]	; (801b700 <tcp_input+0x814>)
 801b6ac:	4602      	mov	r2, r0
 801b6ae:	2000      	movs	r0, #0
 801b6b0:	f003 fc74 	bl	801ef9c <tcp_rst>
    pbuf_free(p);
 801b6b4:	6878      	ldr	r0, [r7, #4]
 801b6b6:	f7fd f9eb 	bl	8018a90 <pbuf_free>
  return;
 801b6ba:	e00c      	b.n	801b6d6 <tcp_input+0x7ea>
    goto dropped;
 801b6bc:	bf00      	nop
 801b6be:	e006      	b.n	801b6ce <tcp_input+0x7e2>
    goto dropped;
 801b6c0:	bf00      	nop
 801b6c2:	e004      	b.n	801b6ce <tcp_input+0x7e2>
    goto dropped;
 801b6c4:	bf00      	nop
 801b6c6:	e002      	b.n	801b6ce <tcp_input+0x7e2>
      goto dropped;
 801b6c8:	bf00      	nop
 801b6ca:	e000      	b.n	801b6ce <tcp_input+0x7e2>
      goto dropped;
 801b6cc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801b6ce:	6878      	ldr	r0, [r7, #4]
 801b6d0:	f7fd f9de 	bl	8018a90 <pbuf_free>
 801b6d4:	e000      	b.n	801b6d8 <tcp_input+0x7ec>
  return;
 801b6d6:	bf00      	nop
}
 801b6d8:	3724      	adds	r7, #36	; 0x24
 801b6da:	46bd      	mov	sp, r7
 801b6dc:	bd90      	pop	{r4, r7, pc}
 801b6de:	bf00      	nop
 801b6e0:	2000bff8 	.word	0x2000bff8
 801b6e4:	2000bff4 	.word	0x2000bff4
 801b6e8:	2000bfc4 	.word	0x2000bfc4
 801b6ec:	2000bfd4 	.word	0x2000bfd4
 801b6f0:	2000bfe8 	.word	0x2000bfe8
 801b6f4:	2000bfee 	.word	0x2000bfee
 801b6f8:	2000bfe4 	.word	0x2000bfe4
 801b6fc:	200066a8 	.word	0x200066a8
 801b700:	200066ac 	.word	0x200066ac

0801b704 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801b704:	b580      	push	{r7, lr}
 801b706:	b082      	sub	sp, #8
 801b708:	af00      	add	r7, sp, #0
 801b70a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d106      	bne.n	801b720 <tcp_input_delayed_close+0x1c>
 801b712:	4b17      	ldr	r3, [pc, #92]	; (801b770 <tcp_input_delayed_close+0x6c>)
 801b714:	f240 225a 	movw	r2, #602	; 0x25a
 801b718:	4916      	ldr	r1, [pc, #88]	; (801b774 <tcp_input_delayed_close+0x70>)
 801b71a:	4817      	ldr	r0, [pc, #92]	; (801b778 <tcp_input_delayed_close+0x74>)
 801b71c:	f008 fbf0 	bl	8023f00 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801b720:	4b16      	ldr	r3, [pc, #88]	; (801b77c <tcp_input_delayed_close+0x78>)
 801b722:	781b      	ldrb	r3, [r3, #0]
 801b724:	f003 0310 	and.w	r3, r3, #16
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d01c      	beq.n	801b766 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	8b5b      	ldrh	r3, [r3, #26]
 801b730:	f003 0310 	and.w	r3, r3, #16
 801b734:	2b00      	cmp	r3, #0
 801b736:	d10d      	bne.n	801b754 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d008      	beq.n	801b754 <tcp_input_delayed_close+0x50>
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b748:	687a      	ldr	r2, [r7, #4]
 801b74a:	6912      	ldr	r2, [r2, #16]
 801b74c:	f06f 010e 	mvn.w	r1, #14
 801b750:	4610      	mov	r0, r2
 801b752:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b754:	6879      	ldr	r1, [r7, #4]
 801b756:	480a      	ldr	r0, [pc, #40]	; (801b780 <tcp_input_delayed_close+0x7c>)
 801b758:	f7ff fa50 	bl	801abfc <tcp_pcb_remove>
    tcp_free(pcb);
 801b75c:	6878      	ldr	r0, [r7, #4]
 801b75e:	f7fd fc53 	bl	8019008 <tcp_free>
    return 1;
 801b762:	2301      	movs	r3, #1
 801b764:	e000      	b.n	801b768 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801b766:	2300      	movs	r3, #0
}
 801b768:	4618      	mov	r0, r3
 801b76a:	3708      	adds	r7, #8
 801b76c:	46bd      	mov	sp, r7
 801b76e:	bd80      	pop	{r7, pc}
 801b770:	080271c4 	.word	0x080271c4
 801b774:	08027394 	.word	0x08027394
 801b778:	08027210 	.word	0x08027210
 801b77c:	2000bff1 	.word	0x2000bff1
 801b780:	2000bfb8 	.word	0x2000bfb8

0801b784 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801b784:	b590      	push	{r4, r7, lr}
 801b786:	b08b      	sub	sp, #44	; 0x2c
 801b788:	af04      	add	r7, sp, #16
 801b78a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801b78c:	4b6f      	ldr	r3, [pc, #444]	; (801b94c <tcp_listen_input+0x1c8>)
 801b78e:	781b      	ldrb	r3, [r3, #0]
 801b790:	f003 0304 	and.w	r3, r3, #4
 801b794:	2b00      	cmp	r3, #0
 801b796:	f040 80d2 	bne.w	801b93e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d106      	bne.n	801b7ae <tcp_listen_input+0x2a>
 801b7a0:	4b6b      	ldr	r3, [pc, #428]	; (801b950 <tcp_listen_input+0x1cc>)
 801b7a2:	f240 2281 	movw	r2, #641	; 0x281
 801b7a6:	496b      	ldr	r1, [pc, #428]	; (801b954 <tcp_listen_input+0x1d0>)
 801b7a8:	486b      	ldr	r0, [pc, #428]	; (801b958 <tcp_listen_input+0x1d4>)
 801b7aa:	f008 fba9 	bl	8023f00 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801b7ae:	4b67      	ldr	r3, [pc, #412]	; (801b94c <tcp_listen_input+0x1c8>)
 801b7b0:	781b      	ldrb	r3, [r3, #0]
 801b7b2:	f003 0310 	and.w	r3, r3, #16
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d019      	beq.n	801b7ee <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b7ba:	4b68      	ldr	r3, [pc, #416]	; (801b95c <tcp_listen_input+0x1d8>)
 801b7bc:	6819      	ldr	r1, [r3, #0]
 801b7be:	4b68      	ldr	r3, [pc, #416]	; (801b960 <tcp_listen_input+0x1dc>)
 801b7c0:	881b      	ldrh	r3, [r3, #0]
 801b7c2:	461a      	mov	r2, r3
 801b7c4:	4b67      	ldr	r3, [pc, #412]	; (801b964 <tcp_listen_input+0x1e0>)
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b7ca:	4b67      	ldr	r3, [pc, #412]	; (801b968 <tcp_listen_input+0x1e4>)
 801b7cc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b7ce:	885b      	ldrh	r3, [r3, #2]
 801b7d0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b7d2:	4a65      	ldr	r2, [pc, #404]	; (801b968 <tcp_listen_input+0x1e4>)
 801b7d4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b7d6:	8812      	ldrh	r2, [r2, #0]
 801b7d8:	b292      	uxth	r2, r2
 801b7da:	9202      	str	r2, [sp, #8]
 801b7dc:	9301      	str	r3, [sp, #4]
 801b7de:	4b63      	ldr	r3, [pc, #396]	; (801b96c <tcp_listen_input+0x1e8>)
 801b7e0:	9300      	str	r3, [sp, #0]
 801b7e2:	4b63      	ldr	r3, [pc, #396]	; (801b970 <tcp_listen_input+0x1ec>)
 801b7e4:	4602      	mov	r2, r0
 801b7e6:	6878      	ldr	r0, [r7, #4]
 801b7e8:	f003 fbd8 	bl	801ef9c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801b7ec:	e0a9      	b.n	801b942 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801b7ee:	4b57      	ldr	r3, [pc, #348]	; (801b94c <tcp_listen_input+0x1c8>)
 801b7f0:	781b      	ldrb	r3, [r3, #0]
 801b7f2:	f003 0302 	and.w	r3, r3, #2
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	f000 80a3 	beq.w	801b942 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	7d5b      	ldrb	r3, [r3, #21]
 801b800:	4618      	mov	r0, r3
 801b802:	f7ff f859 	bl	801a8b8 <tcp_alloc>
 801b806:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801b808:	697b      	ldr	r3, [r7, #20]
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d111      	bne.n	801b832 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	699b      	ldr	r3, [r3, #24]
 801b812:	2b00      	cmp	r3, #0
 801b814:	d00a      	beq.n	801b82c <tcp_listen_input+0xa8>
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	699b      	ldr	r3, [r3, #24]
 801b81a:	687a      	ldr	r2, [r7, #4]
 801b81c:	6910      	ldr	r0, [r2, #16]
 801b81e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b822:	2100      	movs	r1, #0
 801b824:	4798      	blx	r3
 801b826:	4603      	mov	r3, r0
 801b828:	73bb      	strb	r3, [r7, #14]
      return;
 801b82a:	e08b      	b.n	801b944 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b82c:	23f0      	movs	r3, #240	; 0xf0
 801b82e:	73bb      	strb	r3, [r7, #14]
      return;
 801b830:	e088      	b.n	801b944 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801b832:	4b50      	ldr	r3, [pc, #320]	; (801b974 <tcp_listen_input+0x1f0>)
 801b834:	695a      	ldr	r2, [r3, #20]
 801b836:	697b      	ldr	r3, [r7, #20]
 801b838:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801b83a:	4b4e      	ldr	r3, [pc, #312]	; (801b974 <tcp_listen_input+0x1f0>)
 801b83c:	691a      	ldr	r2, [r3, #16]
 801b83e:	697b      	ldr	r3, [r7, #20]
 801b840:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	8ada      	ldrh	r2, [r3, #22]
 801b846:	697b      	ldr	r3, [r7, #20]
 801b848:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801b84a:	4b47      	ldr	r3, [pc, #284]	; (801b968 <tcp_listen_input+0x1e4>)
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	881b      	ldrh	r3, [r3, #0]
 801b850:	b29a      	uxth	r2, r3
 801b852:	697b      	ldr	r3, [r7, #20]
 801b854:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801b856:	697b      	ldr	r3, [r7, #20]
 801b858:	2203      	movs	r2, #3
 801b85a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801b85c:	4b41      	ldr	r3, [pc, #260]	; (801b964 <tcp_listen_input+0x1e0>)
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	1c5a      	adds	r2, r3, #1
 801b862:	697b      	ldr	r3, [r7, #20]
 801b864:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801b866:	697b      	ldr	r3, [r7, #20]
 801b868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b86a:	697b      	ldr	r3, [r7, #20]
 801b86c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801b86e:	6978      	ldr	r0, [r7, #20]
 801b870:	f7ff fa58 	bl	801ad24 <tcp_next_iss>
 801b874:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801b876:	697b      	ldr	r3, [r7, #20]
 801b878:	693a      	ldr	r2, [r7, #16]
 801b87a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801b87c:	697b      	ldr	r3, [r7, #20]
 801b87e:	693a      	ldr	r2, [r7, #16]
 801b880:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801b882:	697b      	ldr	r3, [r7, #20]
 801b884:	693a      	ldr	r2, [r7, #16]
 801b886:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801b888:	697b      	ldr	r3, [r7, #20]
 801b88a:	693a      	ldr	r2, [r7, #16]
 801b88c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801b88e:	4b35      	ldr	r3, [pc, #212]	; (801b964 <tcp_listen_input+0x1e0>)
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	1e5a      	subs	r2, r3, #1
 801b894:	697b      	ldr	r3, [r7, #20]
 801b896:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	691a      	ldr	r2, [r3, #16]
 801b89c:	697b      	ldr	r3, [r7, #20]
 801b89e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801b8a0:	697b      	ldr	r3, [r7, #20]
 801b8a2:	687a      	ldr	r2, [r7, #4]
 801b8a4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	7a5b      	ldrb	r3, [r3, #9]
 801b8aa:	f003 030c 	and.w	r3, r3, #12
 801b8ae:	b2da      	uxtb	r2, r3
 801b8b0:	697b      	ldr	r3, [r7, #20]
 801b8b2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	7a1a      	ldrb	r2, [r3, #8]
 801b8b8:	697b      	ldr	r3, [r7, #20]
 801b8ba:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801b8bc:	4b2e      	ldr	r3, [pc, #184]	; (801b978 <tcp_listen_input+0x1f4>)
 801b8be:	681a      	ldr	r2, [r3, #0]
 801b8c0:	697b      	ldr	r3, [r7, #20]
 801b8c2:	60da      	str	r2, [r3, #12]
 801b8c4:	4a2c      	ldr	r2, [pc, #176]	; (801b978 <tcp_listen_input+0x1f4>)
 801b8c6:	697b      	ldr	r3, [r7, #20]
 801b8c8:	6013      	str	r3, [r2, #0]
 801b8ca:	f003 fd29 	bl	801f320 <tcp_timer_needed>
 801b8ce:	4b2b      	ldr	r3, [pc, #172]	; (801b97c <tcp_listen_input+0x1f8>)
 801b8d0:	2201      	movs	r2, #1
 801b8d2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801b8d4:	6978      	ldr	r0, [r7, #20]
 801b8d6:	f001 fd8f 	bl	801d3f8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801b8da:	4b23      	ldr	r3, [pc, #140]	; (801b968 <tcp_listen_input+0x1e4>)
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	89db      	ldrh	r3, [r3, #14]
 801b8e0:	b29a      	uxth	r2, r3
 801b8e2:	697b      	ldr	r3, [r7, #20]
 801b8e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801b8e8:	697b      	ldr	r3, [r7, #20]
 801b8ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b8ee:	697b      	ldr	r3, [r7, #20]
 801b8f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801b8f4:	697b      	ldr	r3, [r7, #20]
 801b8f6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801b8f8:	697b      	ldr	r3, [r7, #20]
 801b8fa:	3304      	adds	r3, #4
 801b8fc:	4618      	mov	r0, r3
 801b8fe:	f005 fcbb 	bl	8021278 <ip4_route>
 801b902:	4601      	mov	r1, r0
 801b904:	697b      	ldr	r3, [r7, #20]
 801b906:	3304      	adds	r3, #4
 801b908:	461a      	mov	r2, r3
 801b90a:	4620      	mov	r0, r4
 801b90c:	f7ff fa30 	bl	801ad70 <tcp_eff_send_mss_netif>
 801b910:	4603      	mov	r3, r0
 801b912:	461a      	mov	r2, r3
 801b914:	697b      	ldr	r3, [r7, #20]
 801b916:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801b918:	2112      	movs	r1, #18
 801b91a:	6978      	ldr	r0, [r7, #20]
 801b91c:	f002 fc9c 	bl	801e258 <tcp_enqueue_flags>
 801b920:	4603      	mov	r3, r0
 801b922:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801b924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b928:	2b00      	cmp	r3, #0
 801b92a:	d004      	beq.n	801b936 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801b92c:	2100      	movs	r1, #0
 801b92e:	6978      	ldr	r0, [r7, #20]
 801b930:	f7fd fdf0 	bl	8019514 <tcp_abandon>
      return;
 801b934:	e006      	b.n	801b944 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801b936:	6978      	ldr	r0, [r7, #20]
 801b938:	f002 fd7c 	bl	801e434 <tcp_output>
  return;
 801b93c:	e001      	b.n	801b942 <tcp_listen_input+0x1be>
    return;
 801b93e:	bf00      	nop
 801b940:	e000      	b.n	801b944 <tcp_listen_input+0x1c0>
  return;
 801b942:	bf00      	nop
}
 801b944:	371c      	adds	r7, #28
 801b946:	46bd      	mov	sp, r7
 801b948:	bd90      	pop	{r4, r7, pc}
 801b94a:	bf00      	nop
 801b94c:	2000bff0 	.word	0x2000bff0
 801b950:	080271c4 	.word	0x080271c4
 801b954:	080273bc 	.word	0x080273bc
 801b958:	08027210 	.word	0x08027210
 801b95c:	2000bfe8 	.word	0x2000bfe8
 801b960:	2000bfee 	.word	0x2000bfee
 801b964:	2000bfe4 	.word	0x2000bfe4
 801b968:	2000bfd4 	.word	0x2000bfd4
 801b96c:	200066a8 	.word	0x200066a8
 801b970:	200066ac 	.word	0x200066ac
 801b974:	20006698 	.word	0x20006698
 801b978:	2000bfb8 	.word	0x2000bfb8
 801b97c:	2000bfc0 	.word	0x2000bfc0

0801b980 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801b980:	b580      	push	{r7, lr}
 801b982:	b086      	sub	sp, #24
 801b984:	af04      	add	r7, sp, #16
 801b986:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801b988:	4b2f      	ldr	r3, [pc, #188]	; (801ba48 <tcp_timewait_input+0xc8>)
 801b98a:	781b      	ldrb	r3, [r3, #0]
 801b98c:	f003 0304 	and.w	r3, r3, #4
 801b990:	2b00      	cmp	r3, #0
 801b992:	d153      	bne.n	801ba3c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	2b00      	cmp	r3, #0
 801b998:	d106      	bne.n	801b9a8 <tcp_timewait_input+0x28>
 801b99a:	4b2c      	ldr	r3, [pc, #176]	; (801ba4c <tcp_timewait_input+0xcc>)
 801b99c:	f240 22ee 	movw	r2, #750	; 0x2ee
 801b9a0:	492b      	ldr	r1, [pc, #172]	; (801ba50 <tcp_timewait_input+0xd0>)
 801b9a2:	482c      	ldr	r0, [pc, #176]	; (801ba54 <tcp_timewait_input+0xd4>)
 801b9a4:	f008 faac 	bl	8023f00 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801b9a8:	4b27      	ldr	r3, [pc, #156]	; (801ba48 <tcp_timewait_input+0xc8>)
 801b9aa:	781b      	ldrb	r3, [r3, #0]
 801b9ac:	f003 0302 	and.w	r3, r3, #2
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d02a      	beq.n	801ba0a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801b9b4:	4b28      	ldr	r3, [pc, #160]	; (801ba58 <tcp_timewait_input+0xd8>)
 801b9b6:	681a      	ldr	r2, [r3, #0]
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b9bc:	1ad3      	subs	r3, r2, r3
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	db2d      	blt.n	801ba1e <tcp_timewait_input+0x9e>
 801b9c2:	4b25      	ldr	r3, [pc, #148]	; (801ba58 <tcp_timewait_input+0xd8>)
 801b9c4:	681a      	ldr	r2, [r3, #0]
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b9ca:	6879      	ldr	r1, [r7, #4]
 801b9cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b9ce:	440b      	add	r3, r1
 801b9d0:	1ad3      	subs	r3, r2, r3
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	dc23      	bgt.n	801ba1e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b9d6:	4b21      	ldr	r3, [pc, #132]	; (801ba5c <tcp_timewait_input+0xdc>)
 801b9d8:	6819      	ldr	r1, [r3, #0]
 801b9da:	4b21      	ldr	r3, [pc, #132]	; (801ba60 <tcp_timewait_input+0xe0>)
 801b9dc:	881b      	ldrh	r3, [r3, #0]
 801b9de:	461a      	mov	r2, r3
 801b9e0:	4b1d      	ldr	r3, [pc, #116]	; (801ba58 <tcp_timewait_input+0xd8>)
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b9e6:	4b1f      	ldr	r3, [pc, #124]	; (801ba64 <tcp_timewait_input+0xe4>)
 801b9e8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b9ea:	885b      	ldrh	r3, [r3, #2]
 801b9ec:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b9ee:	4a1d      	ldr	r2, [pc, #116]	; (801ba64 <tcp_timewait_input+0xe4>)
 801b9f0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b9f2:	8812      	ldrh	r2, [r2, #0]
 801b9f4:	b292      	uxth	r2, r2
 801b9f6:	9202      	str	r2, [sp, #8]
 801b9f8:	9301      	str	r3, [sp, #4]
 801b9fa:	4b1b      	ldr	r3, [pc, #108]	; (801ba68 <tcp_timewait_input+0xe8>)
 801b9fc:	9300      	str	r3, [sp, #0]
 801b9fe:	4b1b      	ldr	r3, [pc, #108]	; (801ba6c <tcp_timewait_input+0xec>)
 801ba00:	4602      	mov	r2, r0
 801ba02:	6878      	ldr	r0, [r7, #4]
 801ba04:	f003 faca 	bl	801ef9c <tcp_rst>
      return;
 801ba08:	e01b      	b.n	801ba42 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801ba0a:	4b0f      	ldr	r3, [pc, #60]	; (801ba48 <tcp_timewait_input+0xc8>)
 801ba0c:	781b      	ldrb	r3, [r3, #0]
 801ba0e:	f003 0301 	and.w	r3, r3, #1
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d003      	beq.n	801ba1e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801ba16:	4b16      	ldr	r3, [pc, #88]	; (801ba70 <tcp_timewait_input+0xf0>)
 801ba18:	681a      	ldr	r2, [r3, #0]
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801ba1e:	4b10      	ldr	r3, [pc, #64]	; (801ba60 <tcp_timewait_input+0xe0>)
 801ba20:	881b      	ldrh	r3, [r3, #0]
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	d00c      	beq.n	801ba40 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	8b5b      	ldrh	r3, [r3, #26]
 801ba2a:	f043 0302 	orr.w	r3, r3, #2
 801ba2e:	b29a      	uxth	r2, r3
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801ba34:	6878      	ldr	r0, [r7, #4]
 801ba36:	f002 fcfd 	bl	801e434 <tcp_output>
  }
  return;
 801ba3a:	e001      	b.n	801ba40 <tcp_timewait_input+0xc0>
    return;
 801ba3c:	bf00      	nop
 801ba3e:	e000      	b.n	801ba42 <tcp_timewait_input+0xc2>
  return;
 801ba40:	bf00      	nop
}
 801ba42:	3708      	adds	r7, #8
 801ba44:	46bd      	mov	sp, r7
 801ba46:	bd80      	pop	{r7, pc}
 801ba48:	2000bff0 	.word	0x2000bff0
 801ba4c:	080271c4 	.word	0x080271c4
 801ba50:	080273dc 	.word	0x080273dc
 801ba54:	08027210 	.word	0x08027210
 801ba58:	2000bfe4 	.word	0x2000bfe4
 801ba5c:	2000bfe8 	.word	0x2000bfe8
 801ba60:	2000bfee 	.word	0x2000bfee
 801ba64:	2000bfd4 	.word	0x2000bfd4
 801ba68:	200066a8 	.word	0x200066a8
 801ba6c:	200066ac 	.word	0x200066ac
 801ba70:	2000bfac 	.word	0x2000bfac

0801ba74 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801ba74:	b590      	push	{r4, r7, lr}
 801ba76:	b08d      	sub	sp, #52	; 0x34
 801ba78:	af04      	add	r7, sp, #16
 801ba7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801ba7c:	2300      	movs	r3, #0
 801ba7e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801ba80:	2300      	movs	r3, #0
 801ba82:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	d106      	bne.n	801ba98 <tcp_process+0x24>
 801ba8a:	4b9d      	ldr	r3, [pc, #628]	; (801bd00 <tcp_process+0x28c>)
 801ba8c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801ba90:	499c      	ldr	r1, [pc, #624]	; (801bd04 <tcp_process+0x290>)
 801ba92:	489d      	ldr	r0, [pc, #628]	; (801bd08 <tcp_process+0x294>)
 801ba94:	f008 fa34 	bl	8023f00 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801ba98:	4b9c      	ldr	r3, [pc, #624]	; (801bd0c <tcp_process+0x298>)
 801ba9a:	781b      	ldrb	r3, [r3, #0]
 801ba9c:	f003 0304 	and.w	r3, r3, #4
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d04e      	beq.n	801bb42 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	7d1b      	ldrb	r3, [r3, #20]
 801baa8:	2b02      	cmp	r3, #2
 801baaa:	d108      	bne.n	801babe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bab0:	4b97      	ldr	r3, [pc, #604]	; (801bd10 <tcp_process+0x29c>)
 801bab2:	681b      	ldr	r3, [r3, #0]
 801bab4:	429a      	cmp	r2, r3
 801bab6:	d123      	bne.n	801bb00 <tcp_process+0x8c>
        acceptable = 1;
 801bab8:	2301      	movs	r3, #1
 801baba:	76fb      	strb	r3, [r7, #27]
 801babc:	e020      	b.n	801bb00 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bac2:	4b94      	ldr	r3, [pc, #592]	; (801bd14 <tcp_process+0x2a0>)
 801bac4:	681b      	ldr	r3, [r3, #0]
 801bac6:	429a      	cmp	r2, r3
 801bac8:	d102      	bne.n	801bad0 <tcp_process+0x5c>
        acceptable = 1;
 801baca:	2301      	movs	r3, #1
 801bacc:	76fb      	strb	r3, [r7, #27]
 801bace:	e017      	b.n	801bb00 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801bad0:	4b90      	ldr	r3, [pc, #576]	; (801bd14 <tcp_process+0x2a0>)
 801bad2:	681a      	ldr	r2, [r3, #0]
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bad8:	1ad3      	subs	r3, r2, r3
 801bada:	2b00      	cmp	r3, #0
 801badc:	db10      	blt.n	801bb00 <tcp_process+0x8c>
 801bade:	4b8d      	ldr	r3, [pc, #564]	; (801bd14 <tcp_process+0x2a0>)
 801bae0:	681a      	ldr	r2, [r3, #0]
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bae6:	6879      	ldr	r1, [r7, #4]
 801bae8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801baea:	440b      	add	r3, r1
 801baec:	1ad3      	subs	r3, r2, r3
 801baee:	2b00      	cmp	r3, #0
 801baf0:	dc06      	bgt.n	801bb00 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	8b5b      	ldrh	r3, [r3, #26]
 801baf6:	f043 0302 	orr.w	r3, r3, #2
 801bafa:	b29a      	uxth	r2, r3
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801bb00:	7efb      	ldrb	r3, [r7, #27]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d01b      	beq.n	801bb3e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	7d1b      	ldrb	r3, [r3, #20]
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d106      	bne.n	801bb1c <tcp_process+0xa8>
 801bb0e:	4b7c      	ldr	r3, [pc, #496]	; (801bd00 <tcp_process+0x28c>)
 801bb10:	f44f 724e 	mov.w	r2, #824	; 0x338
 801bb14:	4980      	ldr	r1, [pc, #512]	; (801bd18 <tcp_process+0x2a4>)
 801bb16:	487c      	ldr	r0, [pc, #496]	; (801bd08 <tcp_process+0x294>)
 801bb18:	f008 f9f2 	bl	8023f00 <iprintf>
      recv_flags |= TF_RESET;
 801bb1c:	4b7f      	ldr	r3, [pc, #508]	; (801bd1c <tcp_process+0x2a8>)
 801bb1e:	781b      	ldrb	r3, [r3, #0]
 801bb20:	f043 0308 	orr.w	r3, r3, #8
 801bb24:	b2da      	uxtb	r2, r3
 801bb26:	4b7d      	ldr	r3, [pc, #500]	; (801bd1c <tcp_process+0x2a8>)
 801bb28:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	8b5b      	ldrh	r3, [r3, #26]
 801bb2e:	f023 0301 	bic.w	r3, r3, #1
 801bb32:	b29a      	uxth	r2, r3
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801bb38:	f06f 030d 	mvn.w	r3, #13
 801bb3c:	e37a      	b.n	801c234 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801bb3e:	2300      	movs	r3, #0
 801bb40:	e378      	b.n	801c234 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801bb42:	4b72      	ldr	r3, [pc, #456]	; (801bd0c <tcp_process+0x298>)
 801bb44:	781b      	ldrb	r3, [r3, #0]
 801bb46:	f003 0302 	and.w	r3, r3, #2
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	d010      	beq.n	801bb70 <tcp_process+0xfc>
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	7d1b      	ldrb	r3, [r3, #20]
 801bb52:	2b02      	cmp	r3, #2
 801bb54:	d00c      	beq.n	801bb70 <tcp_process+0xfc>
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	7d1b      	ldrb	r3, [r3, #20]
 801bb5a:	2b03      	cmp	r3, #3
 801bb5c:	d008      	beq.n	801bb70 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	8b5b      	ldrh	r3, [r3, #26]
 801bb62:	f043 0302 	orr.w	r3, r3, #2
 801bb66:	b29a      	uxth	r2, r3
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801bb6c:	2300      	movs	r3, #0
 801bb6e:	e361      	b.n	801c234 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	8b5b      	ldrh	r3, [r3, #26]
 801bb74:	f003 0310 	and.w	r3, r3, #16
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d103      	bne.n	801bb84 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801bb7c:	4b68      	ldr	r3, [pc, #416]	; (801bd20 <tcp_process+0x2ac>)
 801bb7e:	681a      	ldr	r2, [r3, #0]
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	2200      	movs	r2, #0
 801bb88:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	2200      	movs	r2, #0
 801bb90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801bb94:	6878      	ldr	r0, [r7, #4]
 801bb96:	f001 fc2f 	bl	801d3f8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	7d1b      	ldrb	r3, [r3, #20]
 801bb9e:	3b02      	subs	r3, #2
 801bba0:	2b07      	cmp	r3, #7
 801bba2:	f200 8337 	bhi.w	801c214 <tcp_process+0x7a0>
 801bba6:	a201      	add	r2, pc, #4	; (adr r2, 801bbac <tcp_process+0x138>)
 801bba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bbac:	0801bbcd 	.word	0x0801bbcd
 801bbb0:	0801bdfd 	.word	0x0801bdfd
 801bbb4:	0801bf75 	.word	0x0801bf75
 801bbb8:	0801bf9f 	.word	0x0801bf9f
 801bbbc:	0801c0c3 	.word	0x0801c0c3
 801bbc0:	0801bf75 	.word	0x0801bf75
 801bbc4:	0801c14f 	.word	0x0801c14f
 801bbc8:	0801c1df 	.word	0x0801c1df
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801bbcc:	4b4f      	ldr	r3, [pc, #316]	; (801bd0c <tcp_process+0x298>)
 801bbce:	781b      	ldrb	r3, [r3, #0]
 801bbd0:	f003 0310 	and.w	r3, r3, #16
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	f000 80e4 	beq.w	801bda2 <tcp_process+0x32e>
 801bbda:	4b4c      	ldr	r3, [pc, #304]	; (801bd0c <tcp_process+0x298>)
 801bbdc:	781b      	ldrb	r3, [r3, #0]
 801bbde:	f003 0302 	and.w	r3, r3, #2
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	f000 80dd 	beq.w	801bda2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bbec:	1c5a      	adds	r2, r3, #1
 801bbee:	4b48      	ldr	r3, [pc, #288]	; (801bd10 <tcp_process+0x29c>)
 801bbf0:	681b      	ldr	r3, [r3, #0]
 801bbf2:	429a      	cmp	r2, r3
 801bbf4:	f040 80d5 	bne.w	801bda2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801bbf8:	4b46      	ldr	r3, [pc, #280]	; (801bd14 <tcp_process+0x2a0>)
 801bbfa:	681b      	ldr	r3, [r3, #0]
 801bbfc:	1c5a      	adds	r2, r3, #1
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801bc0a:	4b41      	ldr	r3, [pc, #260]	; (801bd10 <tcp_process+0x29c>)
 801bc0c:	681a      	ldr	r2, [r3, #0]
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801bc12:	4b44      	ldr	r3, [pc, #272]	; (801bd24 <tcp_process+0x2b0>)
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	89db      	ldrh	r3, [r3, #14]
 801bc18:	b29a      	uxth	r2, r3
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801bc2c:	4b39      	ldr	r3, [pc, #228]	; (801bd14 <tcp_process+0x2a0>)
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	1e5a      	subs	r2, r3, #1
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	2204      	movs	r2, #4
 801bc3a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	3304      	adds	r3, #4
 801bc44:	4618      	mov	r0, r3
 801bc46:	f005 fb17 	bl	8021278 <ip4_route>
 801bc4a:	4601      	mov	r1, r0
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	3304      	adds	r3, #4
 801bc50:	461a      	mov	r2, r3
 801bc52:	4620      	mov	r0, r4
 801bc54:	f7ff f88c 	bl	801ad70 <tcp_eff_send_mss_netif>
 801bc58:	4603      	mov	r3, r0
 801bc5a:	461a      	mov	r2, r3
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bc64:	009a      	lsls	r2, r3, #2
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bc6a:	005b      	lsls	r3, r3, #1
 801bc6c:	f241 111c 	movw	r1, #4380	; 0x111c
 801bc70:	428b      	cmp	r3, r1
 801bc72:	bf38      	it	cc
 801bc74:	460b      	movcc	r3, r1
 801bc76:	429a      	cmp	r2, r3
 801bc78:	d204      	bcs.n	801bc84 <tcp_process+0x210>
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bc7e:	009b      	lsls	r3, r3, #2
 801bc80:	b29b      	uxth	r3, r3
 801bc82:	e00d      	b.n	801bca0 <tcp_process+0x22c>
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bc88:	005b      	lsls	r3, r3, #1
 801bc8a:	f241 121c 	movw	r2, #4380	; 0x111c
 801bc8e:	4293      	cmp	r3, r2
 801bc90:	d904      	bls.n	801bc9c <tcp_process+0x228>
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bc96:	005b      	lsls	r3, r3, #1
 801bc98:	b29b      	uxth	r3, r3
 801bc9a:	e001      	b.n	801bca0 <tcp_process+0x22c>
 801bc9c:	f241 131c 	movw	r3, #4380	; 0x111c
 801bca0:	687a      	ldr	r2, [r7, #4]
 801bca2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d106      	bne.n	801bcbe <tcp_process+0x24a>
 801bcb0:	4b13      	ldr	r3, [pc, #76]	; (801bd00 <tcp_process+0x28c>)
 801bcb2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801bcb6:	491c      	ldr	r1, [pc, #112]	; (801bd28 <tcp_process+0x2b4>)
 801bcb8:	4813      	ldr	r0, [pc, #76]	; (801bd08 <tcp_process+0x294>)
 801bcba:	f008 f921 	bl	8023f00 <iprintf>
        --pcb->snd_queuelen;
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bcc4:	3b01      	subs	r3, #1
 801bcc6:	b29a      	uxth	r2, r3
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bcd2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801bcd4:	69fb      	ldr	r3, [r7, #28]
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	d12a      	bne.n	801bd30 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bcde:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801bce0:	69fb      	ldr	r3, [r7, #28]
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d106      	bne.n	801bcf4 <tcp_process+0x280>
 801bce6:	4b06      	ldr	r3, [pc, #24]	; (801bd00 <tcp_process+0x28c>)
 801bce8:	f44f 725d 	mov.w	r2, #884	; 0x374
 801bcec:	490f      	ldr	r1, [pc, #60]	; (801bd2c <tcp_process+0x2b8>)
 801bcee:	4806      	ldr	r0, [pc, #24]	; (801bd08 <tcp_process+0x294>)
 801bcf0:	f008 f906 	bl	8023f00 <iprintf>
          pcb->unsent = rseg->next;
 801bcf4:	69fb      	ldr	r3, [r7, #28]
 801bcf6:	681a      	ldr	r2, [r3, #0]
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	66da      	str	r2, [r3, #108]	; 0x6c
 801bcfc:	e01c      	b.n	801bd38 <tcp_process+0x2c4>
 801bcfe:	bf00      	nop
 801bd00:	080271c4 	.word	0x080271c4
 801bd04:	080273fc 	.word	0x080273fc
 801bd08:	08027210 	.word	0x08027210
 801bd0c:	2000bff0 	.word	0x2000bff0
 801bd10:	2000bfe8 	.word	0x2000bfe8
 801bd14:	2000bfe4 	.word	0x2000bfe4
 801bd18:	08027418 	.word	0x08027418
 801bd1c:	2000bff1 	.word	0x2000bff1
 801bd20:	2000bfac 	.word	0x2000bfac
 801bd24:	2000bfd4 	.word	0x2000bfd4
 801bd28:	08027438 	.word	0x08027438
 801bd2c:	08027450 	.word	0x08027450
        } else {
          pcb->unacked = rseg->next;
 801bd30:	69fb      	ldr	r3, [r7, #28]
 801bd32:	681a      	ldr	r2, [r3, #0]
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801bd38:	69f8      	ldr	r0, [r7, #28]
 801bd3a:	f7fe fc54 	bl	801a5e6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d104      	bne.n	801bd50 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bd4c:	861a      	strh	r2, [r3, #48]	; 0x30
 801bd4e:	e006      	b.n	801bd5e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	2200      	movs	r2, #0
 801bd54:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	2200      	movs	r2, #0
 801bd5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d00a      	beq.n	801bd7e <tcp_process+0x30a>
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bd6e:	687a      	ldr	r2, [r7, #4]
 801bd70:	6910      	ldr	r0, [r2, #16]
 801bd72:	2200      	movs	r2, #0
 801bd74:	6879      	ldr	r1, [r7, #4]
 801bd76:	4798      	blx	r3
 801bd78:	4603      	mov	r3, r0
 801bd7a:	76bb      	strb	r3, [r7, #26]
 801bd7c:	e001      	b.n	801bd82 <tcp_process+0x30e>
 801bd7e:	2300      	movs	r3, #0
 801bd80:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801bd82:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bd86:	f113 0f0d 	cmn.w	r3, #13
 801bd8a:	d102      	bne.n	801bd92 <tcp_process+0x31e>
          return ERR_ABRT;
 801bd8c:	f06f 030c 	mvn.w	r3, #12
 801bd90:	e250      	b.n	801c234 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	8b5b      	ldrh	r3, [r3, #26]
 801bd96:	f043 0302 	orr.w	r3, r3, #2
 801bd9a:	b29a      	uxth	r2, r3
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801bda0:	e23a      	b.n	801c218 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801bda2:	4b98      	ldr	r3, [pc, #608]	; (801c004 <tcp_process+0x590>)
 801bda4:	781b      	ldrb	r3, [r3, #0]
 801bda6:	f003 0310 	and.w	r3, r3, #16
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	f000 8234 	beq.w	801c218 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bdb0:	4b95      	ldr	r3, [pc, #596]	; (801c008 <tcp_process+0x594>)
 801bdb2:	6819      	ldr	r1, [r3, #0]
 801bdb4:	4b95      	ldr	r3, [pc, #596]	; (801c00c <tcp_process+0x598>)
 801bdb6:	881b      	ldrh	r3, [r3, #0]
 801bdb8:	461a      	mov	r2, r3
 801bdba:	4b95      	ldr	r3, [pc, #596]	; (801c010 <tcp_process+0x59c>)
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bdc0:	4b94      	ldr	r3, [pc, #592]	; (801c014 <tcp_process+0x5a0>)
 801bdc2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bdc4:	885b      	ldrh	r3, [r3, #2]
 801bdc6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bdc8:	4a92      	ldr	r2, [pc, #584]	; (801c014 <tcp_process+0x5a0>)
 801bdca:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bdcc:	8812      	ldrh	r2, [r2, #0]
 801bdce:	b292      	uxth	r2, r2
 801bdd0:	9202      	str	r2, [sp, #8]
 801bdd2:	9301      	str	r3, [sp, #4]
 801bdd4:	4b90      	ldr	r3, [pc, #576]	; (801c018 <tcp_process+0x5a4>)
 801bdd6:	9300      	str	r3, [sp, #0]
 801bdd8:	4b90      	ldr	r3, [pc, #576]	; (801c01c <tcp_process+0x5a8>)
 801bdda:	4602      	mov	r2, r0
 801bddc:	6878      	ldr	r0, [r7, #4]
 801bdde:	f003 f8dd 	bl	801ef9c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bde8:	2b05      	cmp	r3, #5
 801bdea:	f200 8215 	bhi.w	801c218 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	2200      	movs	r2, #0
 801bdf2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801bdf4:	6878      	ldr	r0, [r7, #4]
 801bdf6:	f002 fea7 	bl	801eb48 <tcp_rexmit_rto>
      break;
 801bdfa:	e20d      	b.n	801c218 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801bdfc:	4b81      	ldr	r3, [pc, #516]	; (801c004 <tcp_process+0x590>)
 801bdfe:	781b      	ldrb	r3, [r3, #0]
 801be00:	f003 0310 	and.w	r3, r3, #16
 801be04:	2b00      	cmp	r3, #0
 801be06:	f000 80a1 	beq.w	801bf4c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801be0a:	4b7f      	ldr	r3, [pc, #508]	; (801c008 <tcp_process+0x594>)
 801be0c:	681a      	ldr	r2, [r3, #0]
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801be12:	1ad3      	subs	r3, r2, r3
 801be14:	3b01      	subs	r3, #1
 801be16:	2b00      	cmp	r3, #0
 801be18:	db7e      	blt.n	801bf18 <tcp_process+0x4a4>
 801be1a:	4b7b      	ldr	r3, [pc, #492]	; (801c008 <tcp_process+0x594>)
 801be1c:	681a      	ldr	r2, [r3, #0]
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801be22:	1ad3      	subs	r3, r2, r3
 801be24:	2b00      	cmp	r3, #0
 801be26:	dc77      	bgt.n	801bf18 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	2204      	movs	r2, #4
 801be2c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801be32:	2b00      	cmp	r3, #0
 801be34:	d102      	bne.n	801be3c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801be36:	23fa      	movs	r3, #250	; 0xfa
 801be38:	76bb      	strb	r3, [r7, #26]
 801be3a:	e01d      	b.n	801be78 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801be40:	699b      	ldr	r3, [r3, #24]
 801be42:	2b00      	cmp	r3, #0
 801be44:	d106      	bne.n	801be54 <tcp_process+0x3e0>
 801be46:	4b76      	ldr	r3, [pc, #472]	; (801c020 <tcp_process+0x5ac>)
 801be48:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801be4c:	4975      	ldr	r1, [pc, #468]	; (801c024 <tcp_process+0x5b0>)
 801be4e:	4876      	ldr	r0, [pc, #472]	; (801c028 <tcp_process+0x5b4>)
 801be50:	f008 f856 	bl	8023f00 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801be58:	699b      	ldr	r3, [r3, #24]
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d00a      	beq.n	801be74 <tcp_process+0x400>
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801be62:	699b      	ldr	r3, [r3, #24]
 801be64:	687a      	ldr	r2, [r7, #4]
 801be66:	6910      	ldr	r0, [r2, #16]
 801be68:	2200      	movs	r2, #0
 801be6a:	6879      	ldr	r1, [r7, #4]
 801be6c:	4798      	blx	r3
 801be6e:	4603      	mov	r3, r0
 801be70:	76bb      	strb	r3, [r7, #26]
 801be72:	e001      	b.n	801be78 <tcp_process+0x404>
 801be74:	23f0      	movs	r3, #240	; 0xf0
 801be76:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801be78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d00a      	beq.n	801be96 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801be80:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801be84:	f113 0f0d 	cmn.w	r3, #13
 801be88:	d002      	beq.n	801be90 <tcp_process+0x41c>
              tcp_abort(pcb);
 801be8a:	6878      	ldr	r0, [r7, #4]
 801be8c:	f7fd fc00 	bl	8019690 <tcp_abort>
            }
            return ERR_ABRT;
 801be90:	f06f 030c 	mvn.w	r3, #12
 801be94:	e1ce      	b.n	801c234 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801be96:	6878      	ldr	r0, [r7, #4]
 801be98:	f000 fae0 	bl	801c45c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801be9c:	4b63      	ldr	r3, [pc, #396]	; (801c02c <tcp_process+0x5b8>)
 801be9e:	881b      	ldrh	r3, [r3, #0]
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	d005      	beq.n	801beb0 <tcp_process+0x43c>
            recv_acked--;
 801bea4:	4b61      	ldr	r3, [pc, #388]	; (801c02c <tcp_process+0x5b8>)
 801bea6:	881b      	ldrh	r3, [r3, #0]
 801bea8:	3b01      	subs	r3, #1
 801beaa:	b29a      	uxth	r2, r3
 801beac:	4b5f      	ldr	r3, [pc, #380]	; (801c02c <tcp_process+0x5b8>)
 801beae:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801beb4:	009a      	lsls	r2, r3, #2
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801beba:	005b      	lsls	r3, r3, #1
 801bebc:	f241 111c 	movw	r1, #4380	; 0x111c
 801bec0:	428b      	cmp	r3, r1
 801bec2:	bf38      	it	cc
 801bec4:	460b      	movcc	r3, r1
 801bec6:	429a      	cmp	r2, r3
 801bec8:	d204      	bcs.n	801bed4 <tcp_process+0x460>
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bece:	009b      	lsls	r3, r3, #2
 801bed0:	b29b      	uxth	r3, r3
 801bed2:	e00d      	b.n	801bef0 <tcp_process+0x47c>
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bed8:	005b      	lsls	r3, r3, #1
 801beda:	f241 121c 	movw	r2, #4380	; 0x111c
 801bede:	4293      	cmp	r3, r2
 801bee0:	d904      	bls.n	801beec <tcp_process+0x478>
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bee6:	005b      	lsls	r3, r3, #1
 801bee8:	b29b      	uxth	r3, r3
 801beea:	e001      	b.n	801bef0 <tcp_process+0x47c>
 801beec:	f241 131c 	movw	r3, #4380	; 0x111c
 801bef0:	687a      	ldr	r2, [r7, #4]
 801bef2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801bef6:	4b4e      	ldr	r3, [pc, #312]	; (801c030 <tcp_process+0x5bc>)
 801bef8:	781b      	ldrb	r3, [r3, #0]
 801befa:	f003 0320 	and.w	r3, r3, #32
 801befe:	2b00      	cmp	r3, #0
 801bf00:	d037      	beq.n	801bf72 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801bf02:	687b      	ldr	r3, [r7, #4]
 801bf04:	8b5b      	ldrh	r3, [r3, #26]
 801bf06:	f043 0302 	orr.w	r3, r3, #2
 801bf0a:	b29a      	uxth	r2, r3
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	2207      	movs	r2, #7
 801bf14:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801bf16:	e02c      	b.n	801bf72 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bf18:	4b3b      	ldr	r3, [pc, #236]	; (801c008 <tcp_process+0x594>)
 801bf1a:	6819      	ldr	r1, [r3, #0]
 801bf1c:	4b3b      	ldr	r3, [pc, #236]	; (801c00c <tcp_process+0x598>)
 801bf1e:	881b      	ldrh	r3, [r3, #0]
 801bf20:	461a      	mov	r2, r3
 801bf22:	4b3b      	ldr	r3, [pc, #236]	; (801c010 <tcp_process+0x59c>)
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bf28:	4b3a      	ldr	r3, [pc, #232]	; (801c014 <tcp_process+0x5a0>)
 801bf2a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bf2c:	885b      	ldrh	r3, [r3, #2]
 801bf2e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bf30:	4a38      	ldr	r2, [pc, #224]	; (801c014 <tcp_process+0x5a0>)
 801bf32:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bf34:	8812      	ldrh	r2, [r2, #0]
 801bf36:	b292      	uxth	r2, r2
 801bf38:	9202      	str	r2, [sp, #8]
 801bf3a:	9301      	str	r3, [sp, #4]
 801bf3c:	4b36      	ldr	r3, [pc, #216]	; (801c018 <tcp_process+0x5a4>)
 801bf3e:	9300      	str	r3, [sp, #0]
 801bf40:	4b36      	ldr	r3, [pc, #216]	; (801c01c <tcp_process+0x5a8>)
 801bf42:	4602      	mov	r2, r0
 801bf44:	6878      	ldr	r0, [r7, #4]
 801bf46:	f003 f829 	bl	801ef9c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801bf4a:	e167      	b.n	801c21c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801bf4c:	4b2d      	ldr	r3, [pc, #180]	; (801c004 <tcp_process+0x590>)
 801bf4e:	781b      	ldrb	r3, [r3, #0]
 801bf50:	f003 0302 	and.w	r3, r3, #2
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	f000 8161 	beq.w	801c21c <tcp_process+0x7a8>
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf5e:	1e5a      	subs	r2, r3, #1
 801bf60:	4b2b      	ldr	r3, [pc, #172]	; (801c010 <tcp_process+0x59c>)
 801bf62:	681b      	ldr	r3, [r3, #0]
 801bf64:	429a      	cmp	r2, r3
 801bf66:	f040 8159 	bne.w	801c21c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801bf6a:	6878      	ldr	r0, [r7, #4]
 801bf6c:	f002 fe0e 	bl	801eb8c <tcp_rexmit>
      break;
 801bf70:	e154      	b.n	801c21c <tcp_process+0x7a8>
 801bf72:	e153      	b.n	801c21c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801bf74:	6878      	ldr	r0, [r7, #4]
 801bf76:	f000 fa71 	bl	801c45c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801bf7a:	4b2d      	ldr	r3, [pc, #180]	; (801c030 <tcp_process+0x5bc>)
 801bf7c:	781b      	ldrb	r3, [r3, #0]
 801bf7e:	f003 0320 	and.w	r3, r3, #32
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	f000 814c 	beq.w	801c220 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	8b5b      	ldrh	r3, [r3, #26]
 801bf8c:	f043 0302 	orr.w	r3, r3, #2
 801bf90:	b29a      	uxth	r2, r3
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	2207      	movs	r2, #7
 801bf9a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801bf9c:	e140      	b.n	801c220 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801bf9e:	6878      	ldr	r0, [r7, #4]
 801bfa0:	f000 fa5c 	bl	801c45c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801bfa4:	4b22      	ldr	r3, [pc, #136]	; (801c030 <tcp_process+0x5bc>)
 801bfa6:	781b      	ldrb	r3, [r3, #0]
 801bfa8:	f003 0320 	and.w	r3, r3, #32
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d071      	beq.n	801c094 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bfb0:	4b14      	ldr	r3, [pc, #80]	; (801c004 <tcp_process+0x590>)
 801bfb2:	781b      	ldrb	r3, [r3, #0]
 801bfb4:	f003 0310 	and.w	r3, r3, #16
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	d060      	beq.n	801c07e <tcp_process+0x60a>
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bfc0:	4b11      	ldr	r3, [pc, #68]	; (801c008 <tcp_process+0x594>)
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	429a      	cmp	r2, r3
 801bfc6:	d15a      	bne.n	801c07e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	d156      	bne.n	801c07e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	8b5b      	ldrh	r3, [r3, #26]
 801bfd4:	f043 0302 	orr.w	r3, r3, #2
 801bfd8:	b29a      	uxth	r2, r3
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801bfde:	6878      	ldr	r0, [r7, #4]
 801bfe0:	f7fe fdbc 	bl	801ab5c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801bfe4:	4b13      	ldr	r3, [pc, #76]	; (801c034 <tcp_process+0x5c0>)
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	687a      	ldr	r2, [r7, #4]
 801bfea:	429a      	cmp	r2, r3
 801bfec:	d105      	bne.n	801bffa <tcp_process+0x586>
 801bfee:	4b11      	ldr	r3, [pc, #68]	; (801c034 <tcp_process+0x5c0>)
 801bff0:	681b      	ldr	r3, [r3, #0]
 801bff2:	68db      	ldr	r3, [r3, #12]
 801bff4:	4a0f      	ldr	r2, [pc, #60]	; (801c034 <tcp_process+0x5c0>)
 801bff6:	6013      	str	r3, [r2, #0]
 801bff8:	e02e      	b.n	801c058 <tcp_process+0x5e4>
 801bffa:	4b0e      	ldr	r3, [pc, #56]	; (801c034 <tcp_process+0x5c0>)
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	617b      	str	r3, [r7, #20]
 801c000:	e027      	b.n	801c052 <tcp_process+0x5de>
 801c002:	bf00      	nop
 801c004:	2000bff0 	.word	0x2000bff0
 801c008:	2000bfe8 	.word	0x2000bfe8
 801c00c:	2000bfee 	.word	0x2000bfee
 801c010:	2000bfe4 	.word	0x2000bfe4
 801c014:	2000bfd4 	.word	0x2000bfd4
 801c018:	200066a8 	.word	0x200066a8
 801c01c:	200066ac 	.word	0x200066ac
 801c020:	080271c4 	.word	0x080271c4
 801c024:	08027464 	.word	0x08027464
 801c028:	08027210 	.word	0x08027210
 801c02c:	2000bfec 	.word	0x2000bfec
 801c030:	2000bff1 	.word	0x2000bff1
 801c034:	2000bfb8 	.word	0x2000bfb8
 801c038:	697b      	ldr	r3, [r7, #20]
 801c03a:	68db      	ldr	r3, [r3, #12]
 801c03c:	687a      	ldr	r2, [r7, #4]
 801c03e:	429a      	cmp	r2, r3
 801c040:	d104      	bne.n	801c04c <tcp_process+0x5d8>
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	68da      	ldr	r2, [r3, #12]
 801c046:	697b      	ldr	r3, [r7, #20]
 801c048:	60da      	str	r2, [r3, #12]
 801c04a:	e005      	b.n	801c058 <tcp_process+0x5e4>
 801c04c:	697b      	ldr	r3, [r7, #20]
 801c04e:	68db      	ldr	r3, [r3, #12]
 801c050:	617b      	str	r3, [r7, #20]
 801c052:	697b      	ldr	r3, [r7, #20]
 801c054:	2b00      	cmp	r3, #0
 801c056:	d1ef      	bne.n	801c038 <tcp_process+0x5c4>
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	2200      	movs	r2, #0
 801c05c:	60da      	str	r2, [r3, #12]
 801c05e:	4b77      	ldr	r3, [pc, #476]	; (801c23c <tcp_process+0x7c8>)
 801c060:	2201      	movs	r2, #1
 801c062:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	220a      	movs	r2, #10
 801c068:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801c06a:	4b75      	ldr	r3, [pc, #468]	; (801c240 <tcp_process+0x7cc>)
 801c06c:	681a      	ldr	r2, [r3, #0]
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	60da      	str	r2, [r3, #12]
 801c072:	4a73      	ldr	r2, [pc, #460]	; (801c240 <tcp_process+0x7cc>)
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	6013      	str	r3, [r2, #0]
 801c078:	f003 f952 	bl	801f320 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801c07c:	e0d2      	b.n	801c224 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	8b5b      	ldrh	r3, [r3, #26]
 801c082:	f043 0302 	orr.w	r3, r3, #2
 801c086:	b29a      	uxth	r2, r3
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	2208      	movs	r2, #8
 801c090:	751a      	strb	r2, [r3, #20]
      break;
 801c092:	e0c7      	b.n	801c224 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c094:	4b6b      	ldr	r3, [pc, #428]	; (801c244 <tcp_process+0x7d0>)
 801c096:	781b      	ldrb	r3, [r3, #0]
 801c098:	f003 0310 	and.w	r3, r3, #16
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	f000 80c1 	beq.w	801c224 <tcp_process+0x7b0>
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c0a6:	4b68      	ldr	r3, [pc, #416]	; (801c248 <tcp_process+0x7d4>)
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	429a      	cmp	r2, r3
 801c0ac:	f040 80ba 	bne.w	801c224 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	f040 80b5 	bne.w	801c224 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	2206      	movs	r2, #6
 801c0be:	751a      	strb	r2, [r3, #20]
      break;
 801c0c0:	e0b0      	b.n	801c224 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801c0c2:	6878      	ldr	r0, [r7, #4]
 801c0c4:	f000 f9ca 	bl	801c45c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801c0c8:	4b60      	ldr	r3, [pc, #384]	; (801c24c <tcp_process+0x7d8>)
 801c0ca:	781b      	ldrb	r3, [r3, #0]
 801c0cc:	f003 0320 	and.w	r3, r3, #32
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	f000 80a9 	beq.w	801c228 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	8b5b      	ldrh	r3, [r3, #26]
 801c0da:	f043 0302 	orr.w	r3, r3, #2
 801c0de:	b29a      	uxth	r2, r3
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801c0e4:	6878      	ldr	r0, [r7, #4]
 801c0e6:	f7fe fd39 	bl	801ab5c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801c0ea:	4b59      	ldr	r3, [pc, #356]	; (801c250 <tcp_process+0x7dc>)
 801c0ec:	681b      	ldr	r3, [r3, #0]
 801c0ee:	687a      	ldr	r2, [r7, #4]
 801c0f0:	429a      	cmp	r2, r3
 801c0f2:	d105      	bne.n	801c100 <tcp_process+0x68c>
 801c0f4:	4b56      	ldr	r3, [pc, #344]	; (801c250 <tcp_process+0x7dc>)
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	68db      	ldr	r3, [r3, #12]
 801c0fa:	4a55      	ldr	r2, [pc, #340]	; (801c250 <tcp_process+0x7dc>)
 801c0fc:	6013      	str	r3, [r2, #0]
 801c0fe:	e013      	b.n	801c128 <tcp_process+0x6b4>
 801c100:	4b53      	ldr	r3, [pc, #332]	; (801c250 <tcp_process+0x7dc>)
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	613b      	str	r3, [r7, #16]
 801c106:	e00c      	b.n	801c122 <tcp_process+0x6ae>
 801c108:	693b      	ldr	r3, [r7, #16]
 801c10a:	68db      	ldr	r3, [r3, #12]
 801c10c:	687a      	ldr	r2, [r7, #4]
 801c10e:	429a      	cmp	r2, r3
 801c110:	d104      	bne.n	801c11c <tcp_process+0x6a8>
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	68da      	ldr	r2, [r3, #12]
 801c116:	693b      	ldr	r3, [r7, #16]
 801c118:	60da      	str	r2, [r3, #12]
 801c11a:	e005      	b.n	801c128 <tcp_process+0x6b4>
 801c11c:	693b      	ldr	r3, [r7, #16]
 801c11e:	68db      	ldr	r3, [r3, #12]
 801c120:	613b      	str	r3, [r7, #16]
 801c122:	693b      	ldr	r3, [r7, #16]
 801c124:	2b00      	cmp	r3, #0
 801c126:	d1ef      	bne.n	801c108 <tcp_process+0x694>
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	2200      	movs	r2, #0
 801c12c:	60da      	str	r2, [r3, #12]
 801c12e:	4b43      	ldr	r3, [pc, #268]	; (801c23c <tcp_process+0x7c8>)
 801c130:	2201      	movs	r2, #1
 801c132:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	220a      	movs	r2, #10
 801c138:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c13a:	4b41      	ldr	r3, [pc, #260]	; (801c240 <tcp_process+0x7cc>)
 801c13c:	681a      	ldr	r2, [r3, #0]
 801c13e:	687b      	ldr	r3, [r7, #4]
 801c140:	60da      	str	r2, [r3, #12]
 801c142:	4a3f      	ldr	r2, [pc, #252]	; (801c240 <tcp_process+0x7cc>)
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	6013      	str	r3, [r2, #0]
 801c148:	f003 f8ea 	bl	801f320 <tcp_timer_needed>
      }
      break;
 801c14c:	e06c      	b.n	801c228 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801c14e:	6878      	ldr	r0, [r7, #4]
 801c150:	f000 f984 	bl	801c45c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c154:	4b3b      	ldr	r3, [pc, #236]	; (801c244 <tcp_process+0x7d0>)
 801c156:	781b      	ldrb	r3, [r3, #0]
 801c158:	f003 0310 	and.w	r3, r3, #16
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d065      	beq.n	801c22c <tcp_process+0x7b8>
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c164:	4b38      	ldr	r3, [pc, #224]	; (801c248 <tcp_process+0x7d4>)
 801c166:	681b      	ldr	r3, [r3, #0]
 801c168:	429a      	cmp	r2, r3
 801c16a:	d15f      	bne.n	801c22c <tcp_process+0x7b8>
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c170:	2b00      	cmp	r3, #0
 801c172:	d15b      	bne.n	801c22c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801c174:	6878      	ldr	r0, [r7, #4]
 801c176:	f7fe fcf1 	bl	801ab5c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801c17a:	4b35      	ldr	r3, [pc, #212]	; (801c250 <tcp_process+0x7dc>)
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	687a      	ldr	r2, [r7, #4]
 801c180:	429a      	cmp	r2, r3
 801c182:	d105      	bne.n	801c190 <tcp_process+0x71c>
 801c184:	4b32      	ldr	r3, [pc, #200]	; (801c250 <tcp_process+0x7dc>)
 801c186:	681b      	ldr	r3, [r3, #0]
 801c188:	68db      	ldr	r3, [r3, #12]
 801c18a:	4a31      	ldr	r2, [pc, #196]	; (801c250 <tcp_process+0x7dc>)
 801c18c:	6013      	str	r3, [r2, #0]
 801c18e:	e013      	b.n	801c1b8 <tcp_process+0x744>
 801c190:	4b2f      	ldr	r3, [pc, #188]	; (801c250 <tcp_process+0x7dc>)
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	60fb      	str	r3, [r7, #12]
 801c196:	e00c      	b.n	801c1b2 <tcp_process+0x73e>
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	68db      	ldr	r3, [r3, #12]
 801c19c:	687a      	ldr	r2, [r7, #4]
 801c19e:	429a      	cmp	r2, r3
 801c1a0:	d104      	bne.n	801c1ac <tcp_process+0x738>
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	68da      	ldr	r2, [r3, #12]
 801c1a6:	68fb      	ldr	r3, [r7, #12]
 801c1a8:	60da      	str	r2, [r3, #12]
 801c1aa:	e005      	b.n	801c1b8 <tcp_process+0x744>
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	68db      	ldr	r3, [r3, #12]
 801c1b0:	60fb      	str	r3, [r7, #12]
 801c1b2:	68fb      	ldr	r3, [r7, #12]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d1ef      	bne.n	801c198 <tcp_process+0x724>
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	2200      	movs	r2, #0
 801c1bc:	60da      	str	r2, [r3, #12]
 801c1be:	4b1f      	ldr	r3, [pc, #124]	; (801c23c <tcp_process+0x7c8>)
 801c1c0:	2201      	movs	r2, #1
 801c1c2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	220a      	movs	r2, #10
 801c1c8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c1ca:	4b1d      	ldr	r3, [pc, #116]	; (801c240 <tcp_process+0x7cc>)
 801c1cc:	681a      	ldr	r2, [r3, #0]
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	60da      	str	r2, [r3, #12]
 801c1d2:	4a1b      	ldr	r2, [pc, #108]	; (801c240 <tcp_process+0x7cc>)
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	6013      	str	r3, [r2, #0]
 801c1d8:	f003 f8a2 	bl	801f320 <tcp_timer_needed>
      }
      break;
 801c1dc:	e026      	b.n	801c22c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801c1de:	6878      	ldr	r0, [r7, #4]
 801c1e0:	f000 f93c 	bl	801c45c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c1e4:	4b17      	ldr	r3, [pc, #92]	; (801c244 <tcp_process+0x7d0>)
 801c1e6:	781b      	ldrb	r3, [r3, #0]
 801c1e8:	f003 0310 	and.w	r3, r3, #16
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d01f      	beq.n	801c230 <tcp_process+0x7bc>
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c1f4:	4b14      	ldr	r3, [pc, #80]	; (801c248 <tcp_process+0x7d4>)
 801c1f6:	681b      	ldr	r3, [r3, #0]
 801c1f8:	429a      	cmp	r2, r3
 801c1fa:	d119      	bne.n	801c230 <tcp_process+0x7bc>
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c200:	2b00      	cmp	r3, #0
 801c202:	d115      	bne.n	801c230 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801c204:	4b11      	ldr	r3, [pc, #68]	; (801c24c <tcp_process+0x7d8>)
 801c206:	781b      	ldrb	r3, [r3, #0]
 801c208:	f043 0310 	orr.w	r3, r3, #16
 801c20c:	b2da      	uxtb	r2, r3
 801c20e:	4b0f      	ldr	r3, [pc, #60]	; (801c24c <tcp_process+0x7d8>)
 801c210:	701a      	strb	r2, [r3, #0]
      }
      break;
 801c212:	e00d      	b.n	801c230 <tcp_process+0x7bc>
    default:
      break;
 801c214:	bf00      	nop
 801c216:	e00c      	b.n	801c232 <tcp_process+0x7be>
      break;
 801c218:	bf00      	nop
 801c21a:	e00a      	b.n	801c232 <tcp_process+0x7be>
      break;
 801c21c:	bf00      	nop
 801c21e:	e008      	b.n	801c232 <tcp_process+0x7be>
      break;
 801c220:	bf00      	nop
 801c222:	e006      	b.n	801c232 <tcp_process+0x7be>
      break;
 801c224:	bf00      	nop
 801c226:	e004      	b.n	801c232 <tcp_process+0x7be>
      break;
 801c228:	bf00      	nop
 801c22a:	e002      	b.n	801c232 <tcp_process+0x7be>
      break;
 801c22c:	bf00      	nop
 801c22e:	e000      	b.n	801c232 <tcp_process+0x7be>
      break;
 801c230:	bf00      	nop
  }
  return ERR_OK;
 801c232:	2300      	movs	r3, #0
}
 801c234:	4618      	mov	r0, r3
 801c236:	3724      	adds	r7, #36	; 0x24
 801c238:	46bd      	mov	sp, r7
 801c23a:	bd90      	pop	{r4, r7, pc}
 801c23c:	2000bfc0 	.word	0x2000bfc0
 801c240:	2000bfbc 	.word	0x2000bfbc
 801c244:	2000bff0 	.word	0x2000bff0
 801c248:	2000bfe8 	.word	0x2000bfe8
 801c24c:	2000bff1 	.word	0x2000bff1
 801c250:	2000bfb8 	.word	0x2000bfb8

0801c254 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801c254:	b590      	push	{r4, r7, lr}
 801c256:	b085      	sub	sp, #20
 801c258:	af00      	add	r7, sp, #0
 801c25a:	6078      	str	r0, [r7, #4]
 801c25c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	2b00      	cmp	r3, #0
 801c262:	d106      	bne.n	801c272 <tcp_oos_insert_segment+0x1e>
 801c264:	4b3b      	ldr	r3, [pc, #236]	; (801c354 <tcp_oos_insert_segment+0x100>)
 801c266:	f240 421f 	movw	r2, #1055	; 0x41f
 801c26a:	493b      	ldr	r1, [pc, #236]	; (801c358 <tcp_oos_insert_segment+0x104>)
 801c26c:	483b      	ldr	r0, [pc, #236]	; (801c35c <tcp_oos_insert_segment+0x108>)
 801c26e:	f007 fe47 	bl	8023f00 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	68db      	ldr	r3, [r3, #12]
 801c276:	899b      	ldrh	r3, [r3, #12]
 801c278:	b29b      	uxth	r3, r3
 801c27a:	4618      	mov	r0, r3
 801c27c:	f7fb f816 	bl	80172ac <lwip_htons>
 801c280:	4603      	mov	r3, r0
 801c282:	b2db      	uxtb	r3, r3
 801c284:	f003 0301 	and.w	r3, r3, #1
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d028      	beq.n	801c2de <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801c28c:	6838      	ldr	r0, [r7, #0]
 801c28e:	f7fe f995 	bl	801a5bc <tcp_segs_free>
    next = NULL;
 801c292:	2300      	movs	r3, #0
 801c294:	603b      	str	r3, [r7, #0]
 801c296:	e056      	b.n	801c346 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c298:	683b      	ldr	r3, [r7, #0]
 801c29a:	68db      	ldr	r3, [r3, #12]
 801c29c:	899b      	ldrh	r3, [r3, #12]
 801c29e:	b29b      	uxth	r3, r3
 801c2a0:	4618      	mov	r0, r3
 801c2a2:	f7fb f803 	bl	80172ac <lwip_htons>
 801c2a6:	4603      	mov	r3, r0
 801c2a8:	b2db      	uxtb	r3, r3
 801c2aa:	f003 0301 	and.w	r3, r3, #1
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	d00d      	beq.n	801c2ce <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	68db      	ldr	r3, [r3, #12]
 801c2b6:	899b      	ldrh	r3, [r3, #12]
 801c2b8:	b29c      	uxth	r4, r3
 801c2ba:	2001      	movs	r0, #1
 801c2bc:	f7fa fff6 	bl	80172ac <lwip_htons>
 801c2c0:	4603      	mov	r3, r0
 801c2c2:	461a      	mov	r2, r3
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	68db      	ldr	r3, [r3, #12]
 801c2c8:	4322      	orrs	r2, r4
 801c2ca:	b292      	uxth	r2, r2
 801c2cc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801c2ce:	683b      	ldr	r3, [r7, #0]
 801c2d0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801c2d2:	683b      	ldr	r3, [r7, #0]
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801c2d8:	68f8      	ldr	r0, [r7, #12]
 801c2da:	f7fe f984 	bl	801a5e6 <tcp_seg_free>
    while (next &&
 801c2de:	683b      	ldr	r3, [r7, #0]
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d00e      	beq.n	801c302 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	891b      	ldrh	r3, [r3, #8]
 801c2e8:	461a      	mov	r2, r3
 801c2ea:	4b1d      	ldr	r3, [pc, #116]	; (801c360 <tcp_oos_insert_segment+0x10c>)
 801c2ec:	681b      	ldr	r3, [r3, #0]
 801c2ee:	441a      	add	r2, r3
 801c2f0:	683b      	ldr	r3, [r7, #0]
 801c2f2:	68db      	ldr	r3, [r3, #12]
 801c2f4:	685b      	ldr	r3, [r3, #4]
 801c2f6:	6839      	ldr	r1, [r7, #0]
 801c2f8:	8909      	ldrh	r1, [r1, #8]
 801c2fa:	440b      	add	r3, r1
 801c2fc:	1ad3      	subs	r3, r2, r3
    while (next &&
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	daca      	bge.n	801c298 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801c302:	683b      	ldr	r3, [r7, #0]
 801c304:	2b00      	cmp	r3, #0
 801c306:	d01e      	beq.n	801c346 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	891b      	ldrh	r3, [r3, #8]
 801c30c:	461a      	mov	r2, r3
 801c30e:	4b14      	ldr	r3, [pc, #80]	; (801c360 <tcp_oos_insert_segment+0x10c>)
 801c310:	681b      	ldr	r3, [r3, #0]
 801c312:	441a      	add	r2, r3
 801c314:	683b      	ldr	r3, [r7, #0]
 801c316:	68db      	ldr	r3, [r3, #12]
 801c318:	685b      	ldr	r3, [r3, #4]
 801c31a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	dd12      	ble.n	801c346 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c320:	683b      	ldr	r3, [r7, #0]
 801c322:	68db      	ldr	r3, [r3, #12]
 801c324:	685b      	ldr	r3, [r3, #4]
 801c326:	b29a      	uxth	r2, r3
 801c328:	4b0d      	ldr	r3, [pc, #52]	; (801c360 <tcp_oos_insert_segment+0x10c>)
 801c32a:	681b      	ldr	r3, [r3, #0]
 801c32c:	b29b      	uxth	r3, r3
 801c32e:	1ad3      	subs	r3, r2, r3
 801c330:	b29a      	uxth	r2, r3
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	685a      	ldr	r2, [r3, #4]
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	891b      	ldrh	r3, [r3, #8]
 801c33e:	4619      	mov	r1, r3
 801c340:	4610      	mov	r0, r2
 801c342:	f7fc fa1f 	bl	8018784 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	683a      	ldr	r2, [r7, #0]
 801c34a:	601a      	str	r2, [r3, #0]
}
 801c34c:	bf00      	nop
 801c34e:	3714      	adds	r7, #20
 801c350:	46bd      	mov	sp, r7
 801c352:	bd90      	pop	{r4, r7, pc}
 801c354:	080271c4 	.word	0x080271c4
 801c358:	08027484 	.word	0x08027484
 801c35c:	08027210 	.word	0x08027210
 801c360:	2000bfe4 	.word	0x2000bfe4

0801c364 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801c364:	b5b0      	push	{r4, r5, r7, lr}
 801c366:	b086      	sub	sp, #24
 801c368:	af00      	add	r7, sp, #0
 801c36a:	60f8      	str	r0, [r7, #12]
 801c36c:	60b9      	str	r1, [r7, #8]
 801c36e:	607a      	str	r2, [r7, #4]
 801c370:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801c372:	e03e      	b.n	801c3f2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801c374:	68bb      	ldr	r3, [r7, #8]
 801c376:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801c378:	68bb      	ldr	r3, [r7, #8]
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801c37e:	697b      	ldr	r3, [r7, #20]
 801c380:	685b      	ldr	r3, [r3, #4]
 801c382:	4618      	mov	r0, r3
 801c384:	f7fc fc12 	bl	8018bac <pbuf_clen>
 801c388:	4603      	mov	r3, r0
 801c38a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c392:	8a7a      	ldrh	r2, [r7, #18]
 801c394:	429a      	cmp	r2, r3
 801c396:	d906      	bls.n	801c3a6 <tcp_free_acked_segments+0x42>
 801c398:	4b2a      	ldr	r3, [pc, #168]	; (801c444 <tcp_free_acked_segments+0xe0>)
 801c39a:	f240 4257 	movw	r2, #1111	; 0x457
 801c39e:	492a      	ldr	r1, [pc, #168]	; (801c448 <tcp_free_acked_segments+0xe4>)
 801c3a0:	482a      	ldr	r0, [pc, #168]	; (801c44c <tcp_free_acked_segments+0xe8>)
 801c3a2:	f007 fdad 	bl	8023f00 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801c3ac:	8a7b      	ldrh	r3, [r7, #18]
 801c3ae:	1ad3      	subs	r3, r2, r3
 801c3b0:	b29a      	uxth	r2, r3
 801c3b2:	68fb      	ldr	r3, [r7, #12]
 801c3b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c3b8:	697b      	ldr	r3, [r7, #20]
 801c3ba:	891a      	ldrh	r2, [r3, #8]
 801c3bc:	4b24      	ldr	r3, [pc, #144]	; (801c450 <tcp_free_acked_segments+0xec>)
 801c3be:	881b      	ldrh	r3, [r3, #0]
 801c3c0:	4413      	add	r3, r2
 801c3c2:	b29a      	uxth	r2, r3
 801c3c4:	4b22      	ldr	r3, [pc, #136]	; (801c450 <tcp_free_acked_segments+0xec>)
 801c3c6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801c3c8:	6978      	ldr	r0, [r7, #20]
 801c3ca:	f7fe f90c 	bl	801a5e6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d00c      	beq.n	801c3f2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801c3d8:	68bb      	ldr	r3, [r7, #8]
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d109      	bne.n	801c3f2 <tcp_free_acked_segments+0x8e>
 801c3de:	683b      	ldr	r3, [r7, #0]
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	d106      	bne.n	801c3f2 <tcp_free_acked_segments+0x8e>
 801c3e4:	4b17      	ldr	r3, [pc, #92]	; (801c444 <tcp_free_acked_segments+0xe0>)
 801c3e6:	f240 4261 	movw	r2, #1121	; 0x461
 801c3ea:	491a      	ldr	r1, [pc, #104]	; (801c454 <tcp_free_acked_segments+0xf0>)
 801c3ec:	4817      	ldr	r0, [pc, #92]	; (801c44c <tcp_free_acked_segments+0xe8>)
 801c3ee:	f007 fd87 	bl	8023f00 <iprintf>
  while (seg_list != NULL &&
 801c3f2:	68bb      	ldr	r3, [r7, #8]
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d020      	beq.n	801c43a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801c3f8:	68bb      	ldr	r3, [r7, #8]
 801c3fa:	68db      	ldr	r3, [r3, #12]
 801c3fc:	685b      	ldr	r3, [r3, #4]
 801c3fe:	4618      	mov	r0, r3
 801c400:	f7fa ff69 	bl	80172d6 <lwip_htonl>
 801c404:	4604      	mov	r4, r0
 801c406:	68bb      	ldr	r3, [r7, #8]
 801c408:	891b      	ldrh	r3, [r3, #8]
 801c40a:	461d      	mov	r5, r3
 801c40c:	68bb      	ldr	r3, [r7, #8]
 801c40e:	68db      	ldr	r3, [r3, #12]
 801c410:	899b      	ldrh	r3, [r3, #12]
 801c412:	b29b      	uxth	r3, r3
 801c414:	4618      	mov	r0, r3
 801c416:	f7fa ff49 	bl	80172ac <lwip_htons>
 801c41a:	4603      	mov	r3, r0
 801c41c:	b2db      	uxtb	r3, r3
 801c41e:	f003 0303 	and.w	r3, r3, #3
 801c422:	2b00      	cmp	r3, #0
 801c424:	d001      	beq.n	801c42a <tcp_free_acked_segments+0xc6>
 801c426:	2301      	movs	r3, #1
 801c428:	e000      	b.n	801c42c <tcp_free_acked_segments+0xc8>
 801c42a:	2300      	movs	r3, #0
 801c42c:	442b      	add	r3, r5
 801c42e:	18e2      	adds	r2, r4, r3
 801c430:	4b09      	ldr	r3, [pc, #36]	; (801c458 <tcp_free_acked_segments+0xf4>)
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801c436:	2b00      	cmp	r3, #0
 801c438:	dd9c      	ble.n	801c374 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801c43a:	68bb      	ldr	r3, [r7, #8]
}
 801c43c:	4618      	mov	r0, r3
 801c43e:	3718      	adds	r7, #24
 801c440:	46bd      	mov	sp, r7
 801c442:	bdb0      	pop	{r4, r5, r7, pc}
 801c444:	080271c4 	.word	0x080271c4
 801c448:	080274ac 	.word	0x080274ac
 801c44c:	08027210 	.word	0x08027210
 801c450:	2000bfec 	.word	0x2000bfec
 801c454:	080274d4 	.word	0x080274d4
 801c458:	2000bfe8 	.word	0x2000bfe8

0801c45c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801c45c:	b5b0      	push	{r4, r5, r7, lr}
 801c45e:	b094      	sub	sp, #80	; 0x50
 801c460:	af00      	add	r7, sp, #0
 801c462:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801c464:	2300      	movs	r3, #0
 801c466:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d106      	bne.n	801c47c <tcp_receive+0x20>
 801c46e:	4b91      	ldr	r3, [pc, #580]	; (801c6b4 <tcp_receive+0x258>)
 801c470:	f240 427b 	movw	r2, #1147	; 0x47b
 801c474:	4990      	ldr	r1, [pc, #576]	; (801c6b8 <tcp_receive+0x25c>)
 801c476:	4891      	ldr	r0, [pc, #580]	; (801c6bc <tcp_receive+0x260>)
 801c478:	f007 fd42 	bl	8023f00 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	7d1b      	ldrb	r3, [r3, #20]
 801c480:	2b03      	cmp	r3, #3
 801c482:	d806      	bhi.n	801c492 <tcp_receive+0x36>
 801c484:	4b8b      	ldr	r3, [pc, #556]	; (801c6b4 <tcp_receive+0x258>)
 801c486:	f240 427c 	movw	r2, #1148	; 0x47c
 801c48a:	498d      	ldr	r1, [pc, #564]	; (801c6c0 <tcp_receive+0x264>)
 801c48c:	488b      	ldr	r0, [pc, #556]	; (801c6bc <tcp_receive+0x260>)
 801c48e:	f007 fd37 	bl	8023f00 <iprintf>

  if (flags & TCP_ACK) {
 801c492:	4b8c      	ldr	r3, [pc, #560]	; (801c6c4 <tcp_receive+0x268>)
 801c494:	781b      	ldrb	r3, [r3, #0]
 801c496:	f003 0310 	and.w	r3, r3, #16
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	f000 8264 	beq.w	801c968 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c4a6:	461a      	mov	r2, r3
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c4ac:	4413      	add	r3, r2
 801c4ae:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c4b4:	4b84      	ldr	r3, [pc, #528]	; (801c6c8 <tcp_receive+0x26c>)
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	1ad3      	subs	r3, r2, r3
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	db1b      	blt.n	801c4f6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c4c2:	4b81      	ldr	r3, [pc, #516]	; (801c6c8 <tcp_receive+0x26c>)
 801c4c4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c4c6:	429a      	cmp	r2, r3
 801c4c8:	d106      	bne.n	801c4d8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c4ce:	4b7f      	ldr	r3, [pc, #508]	; (801c6cc <tcp_receive+0x270>)
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	1ad3      	subs	r3, r2, r3
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	db0e      	blt.n	801c4f6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c4dc:	4b7b      	ldr	r3, [pc, #492]	; (801c6cc <tcp_receive+0x270>)
 801c4de:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c4e0:	429a      	cmp	r2, r3
 801c4e2:	d125      	bne.n	801c530 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c4e4:	4b7a      	ldr	r3, [pc, #488]	; (801c6d0 <tcp_receive+0x274>)
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	89db      	ldrh	r3, [r3, #14]
 801c4ea:	b29a      	uxth	r2, r3
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c4f2:	429a      	cmp	r2, r3
 801c4f4:	d91c      	bls.n	801c530 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801c4f6:	4b76      	ldr	r3, [pc, #472]	; (801c6d0 <tcp_receive+0x274>)
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	89db      	ldrh	r3, [r3, #14]
 801c4fc:	b29a      	uxth	r2, r3
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c510:	429a      	cmp	r2, r3
 801c512:	d205      	bcs.n	801c520 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801c520:	4b69      	ldr	r3, [pc, #420]	; (801c6c8 <tcp_receive+0x26c>)
 801c522:	681a      	ldr	r2, [r3, #0]
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801c528:	4b68      	ldr	r3, [pc, #416]	; (801c6cc <tcp_receive+0x270>)
 801c52a:	681a      	ldr	r2, [r3, #0]
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801c530:	4b66      	ldr	r3, [pc, #408]	; (801c6cc <tcp_receive+0x270>)
 801c532:	681a      	ldr	r2, [r3, #0]
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c538:	1ad3      	subs	r3, r2, r3
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	dc58      	bgt.n	801c5f0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801c53e:	4b65      	ldr	r3, [pc, #404]	; (801c6d4 <tcp_receive+0x278>)
 801c540:	881b      	ldrh	r3, [r3, #0]
 801c542:	2b00      	cmp	r3, #0
 801c544:	d14b      	bne.n	801c5de <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c54a:	687a      	ldr	r2, [r7, #4]
 801c54c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801c550:	4413      	add	r3, r2
 801c552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c554:	429a      	cmp	r2, r3
 801c556:	d142      	bne.n	801c5de <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c55e:	2b00      	cmp	r3, #0
 801c560:	db3d      	blt.n	801c5de <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c566:	4b59      	ldr	r3, [pc, #356]	; (801c6cc <tcp_receive+0x270>)
 801c568:	681b      	ldr	r3, [r3, #0]
 801c56a:	429a      	cmp	r2, r3
 801c56c:	d137      	bne.n	801c5de <tcp_receive+0x182>
              found_dupack = 1;
 801c56e:	2301      	movs	r3, #1
 801c570:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c578:	2bff      	cmp	r3, #255	; 0xff
 801c57a:	d007      	beq.n	801c58c <tcp_receive+0x130>
                ++pcb->dupacks;
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c582:	3301      	adds	r3, #1
 801c584:	b2da      	uxtb	r2, r3
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c592:	2b03      	cmp	r3, #3
 801c594:	d91b      	bls.n	801c5ce <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c5a0:	4413      	add	r3, r2
 801c5a2:	b29a      	uxth	r2, r3
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c5aa:	429a      	cmp	r2, r3
 801c5ac:	d30a      	bcc.n	801c5c4 <tcp_receive+0x168>
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c5b8:	4413      	add	r3, r2
 801c5ba:	b29a      	uxth	r2, r3
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c5c2:	e004      	b.n	801c5ce <tcp_receive+0x172>
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c5ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c5d4:	2b02      	cmp	r3, #2
 801c5d6:	d902      	bls.n	801c5de <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801c5d8:	6878      	ldr	r0, [r7, #4]
 801c5da:	f002 fb43 	bl	801ec64 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801c5de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	f040 8161 	bne.w	801c8a8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	2200      	movs	r2, #0
 801c5ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801c5ee:	e15b      	b.n	801c8a8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c5f0:	4b36      	ldr	r3, [pc, #216]	; (801c6cc <tcp_receive+0x270>)
 801c5f2:	681a      	ldr	r2, [r3, #0]
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c5f8:	1ad3      	subs	r3, r2, r3
 801c5fa:	3b01      	subs	r3, #1
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	f2c0 814e 	blt.w	801c89e <tcp_receive+0x442>
 801c602:	4b32      	ldr	r3, [pc, #200]	; (801c6cc <tcp_receive+0x270>)
 801c604:	681a      	ldr	r2, [r3, #0]
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c60a:	1ad3      	subs	r3, r2, r3
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	f300 8146 	bgt.w	801c89e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	8b5b      	ldrh	r3, [r3, #26]
 801c616:	f003 0304 	and.w	r3, r3, #4
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d010      	beq.n	801c640 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	8b5b      	ldrh	r3, [r3, #26]
 801c622:	f023 0304 	bic.w	r3, r3, #4
 801c626:	b29a      	uxth	r2, r3
 801c628:	687b      	ldr	r3, [r7, #4]
 801c62a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801c632:	687b      	ldr	r3, [r7, #4]
 801c634:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	2200      	movs	r2, #0
 801c63c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	2200      	movs	r2, #0
 801c644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c64e:	10db      	asrs	r3, r3, #3
 801c650:	b21b      	sxth	r3, r3
 801c652:	b29a      	uxth	r2, r3
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c65a:	b29b      	uxth	r3, r3
 801c65c:	4413      	add	r3, r2
 801c65e:	b29b      	uxth	r3, r3
 801c660:	b21a      	sxth	r2, r3
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801c668:	4b18      	ldr	r3, [pc, #96]	; (801c6cc <tcp_receive+0x270>)
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	b29a      	uxth	r2, r3
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c672:	b29b      	uxth	r3, r3
 801c674:	1ad3      	subs	r3, r2, r3
 801c676:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	2200      	movs	r2, #0
 801c67c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801c680:	4b12      	ldr	r3, [pc, #72]	; (801c6cc <tcp_receive+0x270>)
 801c682:	681a      	ldr	r2, [r3, #0]
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	7d1b      	ldrb	r3, [r3, #20]
 801c68c:	2b03      	cmp	r3, #3
 801c68e:	f240 8097 	bls.w	801c7c0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801c69e:	429a      	cmp	r2, r3
 801c6a0:	d245      	bcs.n	801c72e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	8b5b      	ldrh	r3, [r3, #26]
 801c6a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d014      	beq.n	801c6d8 <tcp_receive+0x27c>
 801c6ae:	2301      	movs	r3, #1
 801c6b0:	e013      	b.n	801c6da <tcp_receive+0x27e>
 801c6b2:	bf00      	nop
 801c6b4:	080271c4 	.word	0x080271c4
 801c6b8:	080274f4 	.word	0x080274f4
 801c6bc:	08027210 	.word	0x08027210
 801c6c0:	08027510 	.word	0x08027510
 801c6c4:	2000bff0 	.word	0x2000bff0
 801c6c8:	2000bfe4 	.word	0x2000bfe4
 801c6cc:	2000bfe8 	.word	0x2000bfe8
 801c6d0:	2000bfd4 	.word	0x2000bfd4
 801c6d4:	2000bfee 	.word	0x2000bfee
 801c6d8:	2302      	movs	r3, #2
 801c6da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801c6de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801c6e2:	b29a      	uxth	r2, r3
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c6e8:	fb12 f303 	smulbb	r3, r2, r3
 801c6ec:	b29b      	uxth	r3, r3
 801c6ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c6f0:	4293      	cmp	r3, r2
 801c6f2:	bf28      	it	cs
 801c6f4:	4613      	movcs	r3, r2
 801c6f6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c6fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c700:	4413      	add	r3, r2
 801c702:	b29a      	uxth	r2, r3
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c70a:	429a      	cmp	r2, r3
 801c70c:	d309      	bcc.n	801c722 <tcp_receive+0x2c6>
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c714:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c716:	4413      	add	r3, r2
 801c718:	b29a      	uxth	r2, r3
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c720:	e04e      	b.n	801c7c0 <tcp_receive+0x364>
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c728:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c72c:	e048      	b.n	801c7c0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c734:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c736:	4413      	add	r3, r2
 801c738:	b29a      	uxth	r2, r3
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801c740:	429a      	cmp	r2, r3
 801c742:	d309      	bcc.n	801c758 <tcp_receive+0x2fc>
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c74a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c74c:	4413      	add	r3, r2
 801c74e:	b29a      	uxth	r2, r3
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801c756:	e004      	b.n	801c762 <tcp_receive+0x306>
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c75e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c76e:	429a      	cmp	r2, r3
 801c770:	d326      	bcc.n	801c7c0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c77e:	1ad3      	subs	r3, r2, r3
 801c780:	b29a      	uxth	r2, r3
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c792:	4413      	add	r3, r2
 801c794:	b29a      	uxth	r2, r3
 801c796:	687b      	ldr	r3, [r7, #4]
 801c798:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c79c:	429a      	cmp	r2, r3
 801c79e:	d30a      	bcc.n	801c7b6 <tcp_receive+0x35a>
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c7aa:	4413      	add	r3, r2
 801c7ac:	b29a      	uxth	r2, r3
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c7b4:	e004      	b.n	801c7c0 <tcp_receive+0x364>
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c7bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801c7c0:	687b      	ldr	r3, [r7, #4]
 801c7c2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c7c8:	4a98      	ldr	r2, [pc, #608]	; (801ca2c <tcp_receive+0x5d0>)
 801c7ca:	6878      	ldr	r0, [r7, #4]
 801c7cc:	f7ff fdca 	bl	801c364 <tcp_free_acked_segments>
 801c7d0:	4602      	mov	r2, r0
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c7de:	4a94      	ldr	r2, [pc, #592]	; (801ca30 <tcp_receive+0x5d4>)
 801c7e0:	6878      	ldr	r0, [r7, #4]
 801c7e2:	f7ff fdbf 	bl	801c364 <tcp_free_acked_segments>
 801c7e6:	4602      	mov	r2, r0
 801c7e8:	687b      	ldr	r3, [r7, #4]
 801c7ea:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	d104      	bne.n	801c7fe <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c7fa:	861a      	strh	r2, [r3, #48]	; 0x30
 801c7fc:	e002      	b.n	801c804 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	2200      	movs	r2, #0
 801c802:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	2200      	movs	r2, #0
 801c808:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c80e:	2b00      	cmp	r3, #0
 801c810:	d103      	bne.n	801c81a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801c812:	687b      	ldr	r3, [r7, #4]
 801c814:	2200      	movs	r2, #0
 801c816:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801c820:	4b84      	ldr	r3, [pc, #528]	; (801ca34 <tcp_receive+0x5d8>)
 801c822:	881b      	ldrh	r3, [r3, #0]
 801c824:	4413      	add	r3, r2
 801c826:	b29a      	uxth	r2, r3
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	8b5b      	ldrh	r3, [r3, #26]
 801c832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c836:	2b00      	cmp	r3, #0
 801c838:	d035      	beq.n	801c8a6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801c83a:	687b      	ldr	r3, [r7, #4]
 801c83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d118      	bne.n	801c874 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c846:	2b00      	cmp	r3, #0
 801c848:	d00c      	beq.n	801c864 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801c84a:	687b      	ldr	r3, [r7, #4]
 801c84c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c852:	68db      	ldr	r3, [r3, #12]
 801c854:	685b      	ldr	r3, [r3, #4]
 801c856:	4618      	mov	r0, r3
 801c858:	f7fa fd3d 	bl	80172d6 <lwip_htonl>
 801c85c:	4603      	mov	r3, r0
 801c85e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801c860:	2b00      	cmp	r3, #0
 801c862:	dc20      	bgt.n	801c8a6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	8b5b      	ldrh	r3, [r3, #26]
 801c868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c86c:	b29a      	uxth	r2, r3
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c872:	e018      	b.n	801c8a6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c87c:	68db      	ldr	r3, [r3, #12]
 801c87e:	685b      	ldr	r3, [r3, #4]
 801c880:	4618      	mov	r0, r3
 801c882:	f7fa fd28 	bl	80172d6 <lwip_htonl>
 801c886:	4603      	mov	r3, r0
 801c888:	1ae3      	subs	r3, r4, r3
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	dc0b      	bgt.n	801c8a6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	8b5b      	ldrh	r3, [r3, #26]
 801c892:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c896:	b29a      	uxth	r2, r3
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c89c:	e003      	b.n	801c8a6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801c89e:	6878      	ldr	r0, [r7, #4]
 801c8a0:	f002 fbce 	bl	801f040 <tcp_send_empty_ack>
 801c8a4:	e000      	b.n	801c8a8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c8a6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	d05b      	beq.n	801c968 <tcp_receive+0x50c>
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c8b4:	4b60      	ldr	r3, [pc, #384]	; (801ca38 <tcp_receive+0x5dc>)
 801c8b6:	681b      	ldr	r3, [r3, #0]
 801c8b8:	1ad3      	subs	r3, r2, r3
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	da54      	bge.n	801c968 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801c8be:	4b5f      	ldr	r3, [pc, #380]	; (801ca3c <tcp_receive+0x5e0>)
 801c8c0:	681b      	ldr	r3, [r3, #0]
 801c8c2:	b29a      	uxth	r2, r3
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c8c8:	b29b      	uxth	r3, r3
 801c8ca:	1ad3      	subs	r3, r2, r3
 801c8cc:	b29b      	uxth	r3, r3
 801c8ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801c8d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c8dc:	10db      	asrs	r3, r3, #3
 801c8de:	b21b      	sxth	r3, r3
 801c8e0:	b29b      	uxth	r3, r3
 801c8e2:	1ad3      	subs	r3, r2, r3
 801c8e4:	b29b      	uxth	r3, r3
 801c8e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801c8ea:	687b      	ldr	r3, [r7, #4]
 801c8ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c8f0:	b29a      	uxth	r2, r3
 801c8f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c8f6:	4413      	add	r3, r2
 801c8f8:	b29b      	uxth	r3, r3
 801c8fa:	b21a      	sxth	r2, r3
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801c900:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801c904:	2b00      	cmp	r3, #0
 801c906:	da05      	bge.n	801c914 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801c908:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c90c:	425b      	negs	r3, r3
 801c90e:	b29b      	uxth	r3, r3
 801c910:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801c914:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c91e:	109b      	asrs	r3, r3, #2
 801c920:	b21b      	sxth	r3, r3
 801c922:	b29b      	uxth	r3, r3
 801c924:	1ad3      	subs	r3, r2, r3
 801c926:	b29b      	uxth	r3, r3
 801c928:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c932:	b29a      	uxth	r2, r3
 801c934:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c938:	4413      	add	r3, r2
 801c93a:	b29b      	uxth	r3, r3
 801c93c:	b21a      	sxth	r2, r3
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c948:	10db      	asrs	r3, r3, #3
 801c94a:	b21b      	sxth	r3, r3
 801c94c:	b29a      	uxth	r2, r3
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c954:	b29b      	uxth	r3, r3
 801c956:	4413      	add	r3, r2
 801c958:	b29b      	uxth	r3, r3
 801c95a:	b21a      	sxth	r2, r3
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	2200      	movs	r2, #0
 801c966:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c968:	4b35      	ldr	r3, [pc, #212]	; (801ca40 <tcp_receive+0x5e4>)
 801c96a:	881b      	ldrh	r3, [r3, #0]
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	f000 84e2 	beq.w	801d336 <tcp_receive+0xeda>
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	7d1b      	ldrb	r3, [r3, #20]
 801c976:	2b06      	cmp	r3, #6
 801c978:	f200 84dd 	bhi.w	801d336 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c980:	4b30      	ldr	r3, [pc, #192]	; (801ca44 <tcp_receive+0x5e8>)
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	1ad3      	subs	r3, r2, r3
 801c986:	3b01      	subs	r3, #1
 801c988:	2b00      	cmp	r3, #0
 801c98a:	f2c0 808f 	blt.w	801caac <tcp_receive+0x650>
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c992:	4b2b      	ldr	r3, [pc, #172]	; (801ca40 <tcp_receive+0x5e4>)
 801c994:	881b      	ldrh	r3, [r3, #0]
 801c996:	4619      	mov	r1, r3
 801c998:	4b2a      	ldr	r3, [pc, #168]	; (801ca44 <tcp_receive+0x5e8>)
 801c99a:	681b      	ldr	r3, [r3, #0]
 801c99c:	440b      	add	r3, r1
 801c99e:	1ad3      	subs	r3, r2, r3
 801c9a0:	3301      	adds	r3, #1
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	f300 8082 	bgt.w	801caac <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801c9a8:	4b27      	ldr	r3, [pc, #156]	; (801ca48 <tcp_receive+0x5ec>)
 801c9aa:	685b      	ldr	r3, [r3, #4]
 801c9ac:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c9b2:	4b24      	ldr	r3, [pc, #144]	; (801ca44 <tcp_receive+0x5e8>)
 801c9b4:	681b      	ldr	r3, [r3, #0]
 801c9b6:	1ad3      	subs	r3, r2, r3
 801c9b8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801c9ba:	4b23      	ldr	r3, [pc, #140]	; (801ca48 <tcp_receive+0x5ec>)
 801c9bc:	685b      	ldr	r3, [r3, #4]
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d106      	bne.n	801c9d0 <tcp_receive+0x574>
 801c9c2:	4b22      	ldr	r3, [pc, #136]	; (801ca4c <tcp_receive+0x5f0>)
 801c9c4:	f240 5294 	movw	r2, #1428	; 0x594
 801c9c8:	4921      	ldr	r1, [pc, #132]	; (801ca50 <tcp_receive+0x5f4>)
 801c9ca:	4822      	ldr	r0, [pc, #136]	; (801ca54 <tcp_receive+0x5f8>)
 801c9cc:	f007 fa98 	bl	8023f00 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c9d6:	4293      	cmp	r3, r2
 801c9d8:	d906      	bls.n	801c9e8 <tcp_receive+0x58c>
 801c9da:	4b1c      	ldr	r3, [pc, #112]	; (801ca4c <tcp_receive+0x5f0>)
 801c9dc:	f240 5295 	movw	r2, #1429	; 0x595
 801c9e0:	491d      	ldr	r1, [pc, #116]	; (801ca58 <tcp_receive+0x5fc>)
 801c9e2:	481c      	ldr	r0, [pc, #112]	; (801ca54 <tcp_receive+0x5f8>)
 801c9e4:	f007 fa8c 	bl	8023f00 <iprintf>
      off = (u16_t)off32;
 801c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801c9ee:	4b16      	ldr	r3, [pc, #88]	; (801ca48 <tcp_receive+0x5ec>)
 801c9f0:	685b      	ldr	r3, [r3, #4]
 801c9f2:	891b      	ldrh	r3, [r3, #8]
 801c9f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c9f8:	429a      	cmp	r2, r3
 801c9fa:	d906      	bls.n	801ca0a <tcp_receive+0x5ae>
 801c9fc:	4b13      	ldr	r3, [pc, #76]	; (801ca4c <tcp_receive+0x5f0>)
 801c9fe:	f240 5297 	movw	r2, #1431	; 0x597
 801ca02:	4916      	ldr	r1, [pc, #88]	; (801ca5c <tcp_receive+0x600>)
 801ca04:	4813      	ldr	r0, [pc, #76]	; (801ca54 <tcp_receive+0x5f8>)
 801ca06:	f007 fa7b 	bl	8023f00 <iprintf>
      inseg.len -= off;
 801ca0a:	4b0f      	ldr	r3, [pc, #60]	; (801ca48 <tcp_receive+0x5ec>)
 801ca0c:	891a      	ldrh	r2, [r3, #8]
 801ca0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ca12:	1ad3      	subs	r3, r2, r3
 801ca14:	b29a      	uxth	r2, r3
 801ca16:	4b0c      	ldr	r3, [pc, #48]	; (801ca48 <tcp_receive+0x5ec>)
 801ca18:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801ca1a:	4b0b      	ldr	r3, [pc, #44]	; (801ca48 <tcp_receive+0x5ec>)
 801ca1c:	685b      	ldr	r3, [r3, #4]
 801ca1e:	891a      	ldrh	r2, [r3, #8]
 801ca20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ca24:	1ad3      	subs	r3, r2, r3
 801ca26:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801ca28:	e02a      	b.n	801ca80 <tcp_receive+0x624>
 801ca2a:	bf00      	nop
 801ca2c:	0802752c 	.word	0x0802752c
 801ca30:	08027534 	.word	0x08027534
 801ca34:	2000bfec 	.word	0x2000bfec
 801ca38:	2000bfe8 	.word	0x2000bfe8
 801ca3c:	2000bfac 	.word	0x2000bfac
 801ca40:	2000bfee 	.word	0x2000bfee
 801ca44:	2000bfe4 	.word	0x2000bfe4
 801ca48:	2000bfc4 	.word	0x2000bfc4
 801ca4c:	080271c4 	.word	0x080271c4
 801ca50:	0802753c 	.word	0x0802753c
 801ca54:	08027210 	.word	0x08027210
 801ca58:	0802754c 	.word	0x0802754c
 801ca5c:	0802755c 	.word	0x0802755c
        off -= p->len;
 801ca60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ca62:	895b      	ldrh	r3, [r3, #10]
 801ca64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ca68:	1ad3      	subs	r3, r2, r3
 801ca6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801ca6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ca70:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ca72:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801ca74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ca76:	2200      	movs	r2, #0
 801ca78:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801ca7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801ca80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ca82:	895b      	ldrh	r3, [r3, #10]
 801ca84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ca88:	429a      	cmp	r2, r3
 801ca8a:	d8e9      	bhi.n	801ca60 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801ca8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ca90:	4619      	mov	r1, r3
 801ca92:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ca94:	f7fb ff76 	bl	8018984 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca9c:	4a91      	ldr	r2, [pc, #580]	; (801cce4 <tcp_receive+0x888>)
 801ca9e:	6013      	str	r3, [r2, #0]
 801caa0:	4b91      	ldr	r3, [pc, #580]	; (801cce8 <tcp_receive+0x88c>)
 801caa2:	68db      	ldr	r3, [r3, #12]
 801caa4:	4a8f      	ldr	r2, [pc, #572]	; (801cce4 <tcp_receive+0x888>)
 801caa6:	6812      	ldr	r2, [r2, #0]
 801caa8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801caaa:	e00d      	b.n	801cac8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801caac:	4b8d      	ldr	r3, [pc, #564]	; (801cce4 <tcp_receive+0x888>)
 801caae:	681a      	ldr	r2, [r3, #0]
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cab4:	1ad3      	subs	r3, r2, r3
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	da06      	bge.n	801cac8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	8b5b      	ldrh	r3, [r3, #26]
 801cabe:	f043 0302 	orr.w	r3, r3, #2
 801cac2:	b29a      	uxth	r2, r3
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801cac8:	4b86      	ldr	r3, [pc, #536]	; (801cce4 <tcp_receive+0x888>)
 801caca:	681a      	ldr	r2, [r3, #0]
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cad0:	1ad3      	subs	r3, r2, r3
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	f2c0 842a 	blt.w	801d32c <tcp_receive+0xed0>
 801cad8:	4b82      	ldr	r3, [pc, #520]	; (801cce4 <tcp_receive+0x888>)
 801cada:	681a      	ldr	r2, [r3, #0]
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cae0:	6879      	ldr	r1, [r7, #4]
 801cae2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801cae4:	440b      	add	r3, r1
 801cae6:	1ad3      	subs	r3, r2, r3
 801cae8:	3301      	adds	r3, #1
 801caea:	2b00      	cmp	r3, #0
 801caec:	f300 841e 	bgt.w	801d32c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801caf4:	4b7b      	ldr	r3, [pc, #492]	; (801cce4 <tcp_receive+0x888>)
 801caf6:	681b      	ldr	r3, [r3, #0]
 801caf8:	429a      	cmp	r2, r3
 801cafa:	f040 829a 	bne.w	801d032 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801cafe:	4b7a      	ldr	r3, [pc, #488]	; (801cce8 <tcp_receive+0x88c>)
 801cb00:	891c      	ldrh	r4, [r3, #8]
 801cb02:	4b79      	ldr	r3, [pc, #484]	; (801cce8 <tcp_receive+0x88c>)
 801cb04:	68db      	ldr	r3, [r3, #12]
 801cb06:	899b      	ldrh	r3, [r3, #12]
 801cb08:	b29b      	uxth	r3, r3
 801cb0a:	4618      	mov	r0, r3
 801cb0c:	f7fa fbce 	bl	80172ac <lwip_htons>
 801cb10:	4603      	mov	r3, r0
 801cb12:	b2db      	uxtb	r3, r3
 801cb14:	f003 0303 	and.w	r3, r3, #3
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	d001      	beq.n	801cb20 <tcp_receive+0x6c4>
 801cb1c:	2301      	movs	r3, #1
 801cb1e:	e000      	b.n	801cb22 <tcp_receive+0x6c6>
 801cb20:	2300      	movs	r3, #0
 801cb22:	4423      	add	r3, r4
 801cb24:	b29a      	uxth	r2, r3
 801cb26:	4b71      	ldr	r3, [pc, #452]	; (801ccec <tcp_receive+0x890>)
 801cb28:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cb2e:	4b6f      	ldr	r3, [pc, #444]	; (801ccec <tcp_receive+0x890>)
 801cb30:	881b      	ldrh	r3, [r3, #0]
 801cb32:	429a      	cmp	r2, r3
 801cb34:	d275      	bcs.n	801cc22 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cb36:	4b6c      	ldr	r3, [pc, #432]	; (801cce8 <tcp_receive+0x88c>)
 801cb38:	68db      	ldr	r3, [r3, #12]
 801cb3a:	899b      	ldrh	r3, [r3, #12]
 801cb3c:	b29b      	uxth	r3, r3
 801cb3e:	4618      	mov	r0, r3
 801cb40:	f7fa fbb4 	bl	80172ac <lwip_htons>
 801cb44:	4603      	mov	r3, r0
 801cb46:	b2db      	uxtb	r3, r3
 801cb48:	f003 0301 	and.w	r3, r3, #1
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d01f      	beq.n	801cb90 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801cb50:	4b65      	ldr	r3, [pc, #404]	; (801cce8 <tcp_receive+0x88c>)
 801cb52:	68db      	ldr	r3, [r3, #12]
 801cb54:	899b      	ldrh	r3, [r3, #12]
 801cb56:	b29b      	uxth	r3, r3
 801cb58:	b21b      	sxth	r3, r3
 801cb5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801cb5e:	b21c      	sxth	r4, r3
 801cb60:	4b61      	ldr	r3, [pc, #388]	; (801cce8 <tcp_receive+0x88c>)
 801cb62:	68db      	ldr	r3, [r3, #12]
 801cb64:	899b      	ldrh	r3, [r3, #12]
 801cb66:	b29b      	uxth	r3, r3
 801cb68:	4618      	mov	r0, r3
 801cb6a:	f7fa fb9f 	bl	80172ac <lwip_htons>
 801cb6e:	4603      	mov	r3, r0
 801cb70:	b2db      	uxtb	r3, r3
 801cb72:	b29b      	uxth	r3, r3
 801cb74:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801cb78:	b29b      	uxth	r3, r3
 801cb7a:	4618      	mov	r0, r3
 801cb7c:	f7fa fb96 	bl	80172ac <lwip_htons>
 801cb80:	4603      	mov	r3, r0
 801cb82:	b21b      	sxth	r3, r3
 801cb84:	4323      	orrs	r3, r4
 801cb86:	b21a      	sxth	r2, r3
 801cb88:	4b57      	ldr	r3, [pc, #348]	; (801cce8 <tcp_receive+0x88c>)
 801cb8a:	68db      	ldr	r3, [r3, #12]
 801cb8c:	b292      	uxth	r2, r2
 801cb8e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cb94:	4b54      	ldr	r3, [pc, #336]	; (801cce8 <tcp_receive+0x88c>)
 801cb96:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801cb98:	4b53      	ldr	r3, [pc, #332]	; (801cce8 <tcp_receive+0x88c>)
 801cb9a:	68db      	ldr	r3, [r3, #12]
 801cb9c:	899b      	ldrh	r3, [r3, #12]
 801cb9e:	b29b      	uxth	r3, r3
 801cba0:	4618      	mov	r0, r3
 801cba2:	f7fa fb83 	bl	80172ac <lwip_htons>
 801cba6:	4603      	mov	r3, r0
 801cba8:	b2db      	uxtb	r3, r3
 801cbaa:	f003 0302 	and.w	r3, r3, #2
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	d005      	beq.n	801cbbe <tcp_receive+0x762>
            inseg.len -= 1;
 801cbb2:	4b4d      	ldr	r3, [pc, #308]	; (801cce8 <tcp_receive+0x88c>)
 801cbb4:	891b      	ldrh	r3, [r3, #8]
 801cbb6:	3b01      	subs	r3, #1
 801cbb8:	b29a      	uxth	r2, r3
 801cbba:	4b4b      	ldr	r3, [pc, #300]	; (801cce8 <tcp_receive+0x88c>)
 801cbbc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801cbbe:	4b4a      	ldr	r3, [pc, #296]	; (801cce8 <tcp_receive+0x88c>)
 801cbc0:	685b      	ldr	r3, [r3, #4]
 801cbc2:	4a49      	ldr	r2, [pc, #292]	; (801cce8 <tcp_receive+0x88c>)
 801cbc4:	8912      	ldrh	r2, [r2, #8]
 801cbc6:	4611      	mov	r1, r2
 801cbc8:	4618      	mov	r0, r3
 801cbca:	f7fb fddb 	bl	8018784 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801cbce:	4b46      	ldr	r3, [pc, #280]	; (801cce8 <tcp_receive+0x88c>)
 801cbd0:	891c      	ldrh	r4, [r3, #8]
 801cbd2:	4b45      	ldr	r3, [pc, #276]	; (801cce8 <tcp_receive+0x88c>)
 801cbd4:	68db      	ldr	r3, [r3, #12]
 801cbd6:	899b      	ldrh	r3, [r3, #12]
 801cbd8:	b29b      	uxth	r3, r3
 801cbda:	4618      	mov	r0, r3
 801cbdc:	f7fa fb66 	bl	80172ac <lwip_htons>
 801cbe0:	4603      	mov	r3, r0
 801cbe2:	b2db      	uxtb	r3, r3
 801cbe4:	f003 0303 	and.w	r3, r3, #3
 801cbe8:	2b00      	cmp	r3, #0
 801cbea:	d001      	beq.n	801cbf0 <tcp_receive+0x794>
 801cbec:	2301      	movs	r3, #1
 801cbee:	e000      	b.n	801cbf2 <tcp_receive+0x796>
 801cbf0:	2300      	movs	r3, #0
 801cbf2:	4423      	add	r3, r4
 801cbf4:	b29a      	uxth	r2, r3
 801cbf6:	4b3d      	ldr	r3, [pc, #244]	; (801ccec <tcp_receive+0x890>)
 801cbf8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cbfa:	4b3c      	ldr	r3, [pc, #240]	; (801ccec <tcp_receive+0x890>)
 801cbfc:	881b      	ldrh	r3, [r3, #0]
 801cbfe:	461a      	mov	r2, r3
 801cc00:	4b38      	ldr	r3, [pc, #224]	; (801cce4 <tcp_receive+0x888>)
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	441a      	add	r2, r3
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc0a:	6879      	ldr	r1, [r7, #4]
 801cc0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801cc0e:	440b      	add	r3, r1
 801cc10:	429a      	cmp	r2, r3
 801cc12:	d006      	beq.n	801cc22 <tcp_receive+0x7c6>
 801cc14:	4b36      	ldr	r3, [pc, #216]	; (801ccf0 <tcp_receive+0x894>)
 801cc16:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801cc1a:	4936      	ldr	r1, [pc, #216]	; (801ccf4 <tcp_receive+0x898>)
 801cc1c:	4836      	ldr	r0, [pc, #216]	; (801ccf8 <tcp_receive+0x89c>)
 801cc1e:	f007 f96f 	bl	8023f00 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	f000 80e7 	beq.w	801cdfa <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cc2c:	4b2e      	ldr	r3, [pc, #184]	; (801cce8 <tcp_receive+0x88c>)
 801cc2e:	68db      	ldr	r3, [r3, #12]
 801cc30:	899b      	ldrh	r3, [r3, #12]
 801cc32:	b29b      	uxth	r3, r3
 801cc34:	4618      	mov	r0, r3
 801cc36:	f7fa fb39 	bl	80172ac <lwip_htons>
 801cc3a:	4603      	mov	r3, r0
 801cc3c:	b2db      	uxtb	r3, r3
 801cc3e:	f003 0301 	and.w	r3, r3, #1
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	d010      	beq.n	801cc68 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801cc46:	e00a      	b.n	801cc5e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cc4c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cc52:	681a      	ldr	r2, [r3, #0]
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801cc58:	68f8      	ldr	r0, [r7, #12]
 801cc5a:	f7fd fcc4 	bl	801a5e6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d1f0      	bne.n	801cc48 <tcp_receive+0x7ec>
 801cc66:	e0c8      	b.n	801cdfa <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801cc6e:	e052      	b.n	801cd16 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801cc70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc72:	68db      	ldr	r3, [r3, #12]
 801cc74:	899b      	ldrh	r3, [r3, #12]
 801cc76:	b29b      	uxth	r3, r3
 801cc78:	4618      	mov	r0, r3
 801cc7a:	f7fa fb17 	bl	80172ac <lwip_htons>
 801cc7e:	4603      	mov	r3, r0
 801cc80:	b2db      	uxtb	r3, r3
 801cc82:	f003 0301 	and.w	r3, r3, #1
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d03d      	beq.n	801cd06 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801cc8a:	4b17      	ldr	r3, [pc, #92]	; (801cce8 <tcp_receive+0x88c>)
 801cc8c:	68db      	ldr	r3, [r3, #12]
 801cc8e:	899b      	ldrh	r3, [r3, #12]
 801cc90:	b29b      	uxth	r3, r3
 801cc92:	4618      	mov	r0, r3
 801cc94:	f7fa fb0a 	bl	80172ac <lwip_htons>
 801cc98:	4603      	mov	r3, r0
 801cc9a:	b2db      	uxtb	r3, r3
 801cc9c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801cca0:	2b00      	cmp	r3, #0
 801cca2:	d130      	bne.n	801cd06 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801cca4:	4b10      	ldr	r3, [pc, #64]	; (801cce8 <tcp_receive+0x88c>)
 801cca6:	68db      	ldr	r3, [r3, #12]
 801cca8:	899b      	ldrh	r3, [r3, #12]
 801ccaa:	b29c      	uxth	r4, r3
 801ccac:	2001      	movs	r0, #1
 801ccae:	f7fa fafd 	bl	80172ac <lwip_htons>
 801ccb2:	4603      	mov	r3, r0
 801ccb4:	461a      	mov	r2, r3
 801ccb6:	4b0c      	ldr	r3, [pc, #48]	; (801cce8 <tcp_receive+0x88c>)
 801ccb8:	68db      	ldr	r3, [r3, #12]
 801ccba:	4322      	orrs	r2, r4
 801ccbc:	b292      	uxth	r2, r2
 801ccbe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801ccc0:	4b09      	ldr	r3, [pc, #36]	; (801cce8 <tcp_receive+0x88c>)
 801ccc2:	891c      	ldrh	r4, [r3, #8]
 801ccc4:	4b08      	ldr	r3, [pc, #32]	; (801cce8 <tcp_receive+0x88c>)
 801ccc6:	68db      	ldr	r3, [r3, #12]
 801ccc8:	899b      	ldrh	r3, [r3, #12]
 801ccca:	b29b      	uxth	r3, r3
 801cccc:	4618      	mov	r0, r3
 801ccce:	f7fa faed 	bl	80172ac <lwip_htons>
 801ccd2:	4603      	mov	r3, r0
 801ccd4:	b2db      	uxtb	r3, r3
 801ccd6:	f003 0303 	and.w	r3, r3, #3
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d00e      	beq.n	801ccfc <tcp_receive+0x8a0>
 801ccde:	2301      	movs	r3, #1
 801cce0:	e00d      	b.n	801ccfe <tcp_receive+0x8a2>
 801cce2:	bf00      	nop
 801cce4:	2000bfe4 	.word	0x2000bfe4
 801cce8:	2000bfc4 	.word	0x2000bfc4
 801ccec:	2000bfee 	.word	0x2000bfee
 801ccf0:	080271c4 	.word	0x080271c4
 801ccf4:	0802756c 	.word	0x0802756c
 801ccf8:	08027210 	.word	0x08027210
 801ccfc:	2300      	movs	r3, #0
 801ccfe:	4423      	add	r3, r4
 801cd00:	b29a      	uxth	r2, r3
 801cd02:	4b98      	ldr	r3, [pc, #608]	; (801cf64 <tcp_receive+0xb08>)
 801cd04:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801cd06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd08:	613b      	str	r3, [r7, #16]
              next = next->next;
 801cd0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801cd10:	6938      	ldr	r0, [r7, #16]
 801cd12:	f7fd fc68 	bl	801a5e6 <tcp_seg_free>
            while (next &&
 801cd16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d00e      	beq.n	801cd3a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801cd1c:	4b91      	ldr	r3, [pc, #580]	; (801cf64 <tcp_receive+0xb08>)
 801cd1e:	881b      	ldrh	r3, [r3, #0]
 801cd20:	461a      	mov	r2, r3
 801cd22:	4b91      	ldr	r3, [pc, #580]	; (801cf68 <tcp_receive+0xb0c>)
 801cd24:	681b      	ldr	r3, [r3, #0]
 801cd26:	441a      	add	r2, r3
 801cd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd2a:	68db      	ldr	r3, [r3, #12]
 801cd2c:	685b      	ldr	r3, [r3, #4]
 801cd2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801cd30:	8909      	ldrh	r1, [r1, #8]
 801cd32:	440b      	add	r3, r1
 801cd34:	1ad3      	subs	r3, r2, r3
            while (next &&
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	da9a      	bge.n	801cc70 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801cd3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	d059      	beq.n	801cdf4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801cd40:	4b88      	ldr	r3, [pc, #544]	; (801cf64 <tcp_receive+0xb08>)
 801cd42:	881b      	ldrh	r3, [r3, #0]
 801cd44:	461a      	mov	r2, r3
 801cd46:	4b88      	ldr	r3, [pc, #544]	; (801cf68 <tcp_receive+0xb0c>)
 801cd48:	681b      	ldr	r3, [r3, #0]
 801cd4a:	441a      	add	r2, r3
 801cd4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd4e:	68db      	ldr	r3, [r3, #12]
 801cd50:	685b      	ldr	r3, [r3, #4]
 801cd52:	1ad3      	subs	r3, r2, r3
            if (next &&
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	dd4d      	ble.n	801cdf4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801cd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd5a:	68db      	ldr	r3, [r3, #12]
 801cd5c:	685b      	ldr	r3, [r3, #4]
 801cd5e:	b29a      	uxth	r2, r3
 801cd60:	4b81      	ldr	r3, [pc, #516]	; (801cf68 <tcp_receive+0xb0c>)
 801cd62:	681b      	ldr	r3, [r3, #0]
 801cd64:	b29b      	uxth	r3, r3
 801cd66:	1ad3      	subs	r3, r2, r3
 801cd68:	b29a      	uxth	r2, r3
 801cd6a:	4b80      	ldr	r3, [pc, #512]	; (801cf6c <tcp_receive+0xb10>)
 801cd6c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801cd6e:	4b7f      	ldr	r3, [pc, #508]	; (801cf6c <tcp_receive+0xb10>)
 801cd70:	68db      	ldr	r3, [r3, #12]
 801cd72:	899b      	ldrh	r3, [r3, #12]
 801cd74:	b29b      	uxth	r3, r3
 801cd76:	4618      	mov	r0, r3
 801cd78:	f7fa fa98 	bl	80172ac <lwip_htons>
 801cd7c:	4603      	mov	r3, r0
 801cd7e:	b2db      	uxtb	r3, r3
 801cd80:	f003 0302 	and.w	r3, r3, #2
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	d005      	beq.n	801cd94 <tcp_receive+0x938>
                inseg.len -= 1;
 801cd88:	4b78      	ldr	r3, [pc, #480]	; (801cf6c <tcp_receive+0xb10>)
 801cd8a:	891b      	ldrh	r3, [r3, #8]
 801cd8c:	3b01      	subs	r3, #1
 801cd8e:	b29a      	uxth	r2, r3
 801cd90:	4b76      	ldr	r3, [pc, #472]	; (801cf6c <tcp_receive+0xb10>)
 801cd92:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801cd94:	4b75      	ldr	r3, [pc, #468]	; (801cf6c <tcp_receive+0xb10>)
 801cd96:	685b      	ldr	r3, [r3, #4]
 801cd98:	4a74      	ldr	r2, [pc, #464]	; (801cf6c <tcp_receive+0xb10>)
 801cd9a:	8912      	ldrh	r2, [r2, #8]
 801cd9c:	4611      	mov	r1, r2
 801cd9e:	4618      	mov	r0, r3
 801cda0:	f7fb fcf0 	bl	8018784 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801cda4:	4b71      	ldr	r3, [pc, #452]	; (801cf6c <tcp_receive+0xb10>)
 801cda6:	891c      	ldrh	r4, [r3, #8]
 801cda8:	4b70      	ldr	r3, [pc, #448]	; (801cf6c <tcp_receive+0xb10>)
 801cdaa:	68db      	ldr	r3, [r3, #12]
 801cdac:	899b      	ldrh	r3, [r3, #12]
 801cdae:	b29b      	uxth	r3, r3
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	f7fa fa7b 	bl	80172ac <lwip_htons>
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	b2db      	uxtb	r3, r3
 801cdba:	f003 0303 	and.w	r3, r3, #3
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d001      	beq.n	801cdc6 <tcp_receive+0x96a>
 801cdc2:	2301      	movs	r3, #1
 801cdc4:	e000      	b.n	801cdc8 <tcp_receive+0x96c>
 801cdc6:	2300      	movs	r3, #0
 801cdc8:	4423      	add	r3, r4
 801cdca:	b29a      	uxth	r2, r3
 801cdcc:	4b65      	ldr	r3, [pc, #404]	; (801cf64 <tcp_receive+0xb08>)
 801cdce:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801cdd0:	4b64      	ldr	r3, [pc, #400]	; (801cf64 <tcp_receive+0xb08>)
 801cdd2:	881b      	ldrh	r3, [r3, #0]
 801cdd4:	461a      	mov	r2, r3
 801cdd6:	4b64      	ldr	r3, [pc, #400]	; (801cf68 <tcp_receive+0xb0c>)
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	441a      	add	r2, r3
 801cddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdde:	68db      	ldr	r3, [r3, #12]
 801cde0:	685b      	ldr	r3, [r3, #4]
 801cde2:	429a      	cmp	r2, r3
 801cde4:	d006      	beq.n	801cdf4 <tcp_receive+0x998>
 801cde6:	4b62      	ldr	r3, [pc, #392]	; (801cf70 <tcp_receive+0xb14>)
 801cde8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801cdec:	4961      	ldr	r1, [pc, #388]	; (801cf74 <tcp_receive+0xb18>)
 801cdee:	4862      	ldr	r0, [pc, #392]	; (801cf78 <tcp_receive+0xb1c>)
 801cdf0:	f007 f886 	bl	8023f00 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cdf8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801cdfa:	4b5a      	ldr	r3, [pc, #360]	; (801cf64 <tcp_receive+0xb08>)
 801cdfc:	881b      	ldrh	r3, [r3, #0]
 801cdfe:	461a      	mov	r2, r3
 801ce00:	4b59      	ldr	r3, [pc, #356]	; (801cf68 <tcp_receive+0xb0c>)
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	441a      	add	r2, r3
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ce0e:	4b55      	ldr	r3, [pc, #340]	; (801cf64 <tcp_receive+0xb08>)
 801ce10:	881b      	ldrh	r3, [r3, #0]
 801ce12:	429a      	cmp	r2, r3
 801ce14:	d206      	bcs.n	801ce24 <tcp_receive+0x9c8>
 801ce16:	4b56      	ldr	r3, [pc, #344]	; (801cf70 <tcp_receive+0xb14>)
 801ce18:	f240 6207 	movw	r2, #1543	; 0x607
 801ce1c:	4957      	ldr	r1, [pc, #348]	; (801cf7c <tcp_receive+0xb20>)
 801ce1e:	4856      	ldr	r0, [pc, #344]	; (801cf78 <tcp_receive+0xb1c>)
 801ce20:	f007 f86e 	bl	8023f00 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ce28:	4b4e      	ldr	r3, [pc, #312]	; (801cf64 <tcp_receive+0xb08>)
 801ce2a:	881b      	ldrh	r3, [r3, #0]
 801ce2c:	1ad3      	subs	r3, r2, r3
 801ce2e:	b29a      	uxth	r2, r3
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801ce34:	6878      	ldr	r0, [r7, #4]
 801ce36:	f7fc fd99 	bl	801996c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801ce3a:	4b4c      	ldr	r3, [pc, #304]	; (801cf6c <tcp_receive+0xb10>)
 801ce3c:	685b      	ldr	r3, [r3, #4]
 801ce3e:	891b      	ldrh	r3, [r3, #8]
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d006      	beq.n	801ce52 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801ce44:	4b49      	ldr	r3, [pc, #292]	; (801cf6c <tcp_receive+0xb10>)
 801ce46:	685b      	ldr	r3, [r3, #4]
 801ce48:	4a4d      	ldr	r2, [pc, #308]	; (801cf80 <tcp_receive+0xb24>)
 801ce4a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801ce4c:	4b47      	ldr	r3, [pc, #284]	; (801cf6c <tcp_receive+0xb10>)
 801ce4e:	2200      	movs	r2, #0
 801ce50:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ce52:	4b46      	ldr	r3, [pc, #280]	; (801cf6c <tcp_receive+0xb10>)
 801ce54:	68db      	ldr	r3, [r3, #12]
 801ce56:	899b      	ldrh	r3, [r3, #12]
 801ce58:	b29b      	uxth	r3, r3
 801ce5a:	4618      	mov	r0, r3
 801ce5c:	f7fa fa26 	bl	80172ac <lwip_htons>
 801ce60:	4603      	mov	r3, r0
 801ce62:	b2db      	uxtb	r3, r3
 801ce64:	f003 0301 	and.w	r3, r3, #1
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	f000 80b8 	beq.w	801cfde <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801ce6e:	4b45      	ldr	r3, [pc, #276]	; (801cf84 <tcp_receive+0xb28>)
 801ce70:	781b      	ldrb	r3, [r3, #0]
 801ce72:	f043 0320 	orr.w	r3, r3, #32
 801ce76:	b2da      	uxtb	r2, r3
 801ce78:	4b42      	ldr	r3, [pc, #264]	; (801cf84 <tcp_receive+0xb28>)
 801ce7a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801ce7c:	e0af      	b.n	801cfde <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801ce7e:	687b      	ldr	r3, [r7, #4]
 801ce80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ce82:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ce88:	68db      	ldr	r3, [r3, #12]
 801ce8a:	685b      	ldr	r3, [r3, #4]
 801ce8c:	4a36      	ldr	r2, [pc, #216]	; (801cf68 <tcp_receive+0xb0c>)
 801ce8e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801ce90:	68bb      	ldr	r3, [r7, #8]
 801ce92:	891b      	ldrh	r3, [r3, #8]
 801ce94:	461c      	mov	r4, r3
 801ce96:	68bb      	ldr	r3, [r7, #8]
 801ce98:	68db      	ldr	r3, [r3, #12]
 801ce9a:	899b      	ldrh	r3, [r3, #12]
 801ce9c:	b29b      	uxth	r3, r3
 801ce9e:	4618      	mov	r0, r3
 801cea0:	f7fa fa04 	bl	80172ac <lwip_htons>
 801cea4:	4603      	mov	r3, r0
 801cea6:	b2db      	uxtb	r3, r3
 801cea8:	f003 0303 	and.w	r3, r3, #3
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d001      	beq.n	801ceb4 <tcp_receive+0xa58>
 801ceb0:	2301      	movs	r3, #1
 801ceb2:	e000      	b.n	801ceb6 <tcp_receive+0xa5a>
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	191a      	adds	r2, r3, r4
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cebc:	441a      	add	r2, r3
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cec6:	461c      	mov	r4, r3
 801cec8:	68bb      	ldr	r3, [r7, #8]
 801ceca:	891b      	ldrh	r3, [r3, #8]
 801cecc:	461d      	mov	r5, r3
 801cece:	68bb      	ldr	r3, [r7, #8]
 801ced0:	68db      	ldr	r3, [r3, #12]
 801ced2:	899b      	ldrh	r3, [r3, #12]
 801ced4:	b29b      	uxth	r3, r3
 801ced6:	4618      	mov	r0, r3
 801ced8:	f7fa f9e8 	bl	80172ac <lwip_htons>
 801cedc:	4603      	mov	r3, r0
 801cede:	b2db      	uxtb	r3, r3
 801cee0:	f003 0303 	and.w	r3, r3, #3
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d001      	beq.n	801ceec <tcp_receive+0xa90>
 801cee8:	2301      	movs	r3, #1
 801ceea:	e000      	b.n	801ceee <tcp_receive+0xa92>
 801ceec:	2300      	movs	r3, #0
 801ceee:	442b      	add	r3, r5
 801cef0:	429c      	cmp	r4, r3
 801cef2:	d206      	bcs.n	801cf02 <tcp_receive+0xaa6>
 801cef4:	4b1e      	ldr	r3, [pc, #120]	; (801cf70 <tcp_receive+0xb14>)
 801cef6:	f240 622b 	movw	r2, #1579	; 0x62b
 801cefa:	4923      	ldr	r1, [pc, #140]	; (801cf88 <tcp_receive+0xb2c>)
 801cefc:	481e      	ldr	r0, [pc, #120]	; (801cf78 <tcp_receive+0xb1c>)
 801cefe:	f006 ffff 	bl	8023f00 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801cf02:	68bb      	ldr	r3, [r7, #8]
 801cf04:	891b      	ldrh	r3, [r3, #8]
 801cf06:	461c      	mov	r4, r3
 801cf08:	68bb      	ldr	r3, [r7, #8]
 801cf0a:	68db      	ldr	r3, [r3, #12]
 801cf0c:	899b      	ldrh	r3, [r3, #12]
 801cf0e:	b29b      	uxth	r3, r3
 801cf10:	4618      	mov	r0, r3
 801cf12:	f7fa f9cb 	bl	80172ac <lwip_htons>
 801cf16:	4603      	mov	r3, r0
 801cf18:	b2db      	uxtb	r3, r3
 801cf1a:	f003 0303 	and.w	r3, r3, #3
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d001      	beq.n	801cf26 <tcp_receive+0xaca>
 801cf22:	2301      	movs	r3, #1
 801cf24:	e000      	b.n	801cf28 <tcp_receive+0xacc>
 801cf26:	2300      	movs	r3, #0
 801cf28:	1919      	adds	r1, r3, r4
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cf2e:	b28b      	uxth	r3, r1
 801cf30:	1ad3      	subs	r3, r2, r3
 801cf32:	b29a      	uxth	r2, r3
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801cf38:	6878      	ldr	r0, [r7, #4]
 801cf3a:	f7fc fd17 	bl	801996c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801cf3e:	68bb      	ldr	r3, [r7, #8]
 801cf40:	685b      	ldr	r3, [r3, #4]
 801cf42:	891b      	ldrh	r3, [r3, #8]
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d028      	beq.n	801cf9a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801cf48:	4b0d      	ldr	r3, [pc, #52]	; (801cf80 <tcp_receive+0xb24>)
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	d01d      	beq.n	801cf8c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801cf50:	4b0b      	ldr	r3, [pc, #44]	; (801cf80 <tcp_receive+0xb24>)
 801cf52:	681a      	ldr	r2, [r3, #0]
 801cf54:	68bb      	ldr	r3, [r7, #8]
 801cf56:	685b      	ldr	r3, [r3, #4]
 801cf58:	4619      	mov	r1, r3
 801cf5a:	4610      	mov	r0, r2
 801cf5c:	f7fb fe66 	bl	8018c2c <pbuf_cat>
 801cf60:	e018      	b.n	801cf94 <tcp_receive+0xb38>
 801cf62:	bf00      	nop
 801cf64:	2000bfee 	.word	0x2000bfee
 801cf68:	2000bfe4 	.word	0x2000bfe4
 801cf6c:	2000bfc4 	.word	0x2000bfc4
 801cf70:	080271c4 	.word	0x080271c4
 801cf74:	080275a4 	.word	0x080275a4
 801cf78:	08027210 	.word	0x08027210
 801cf7c:	080275e0 	.word	0x080275e0
 801cf80:	2000bff4 	.word	0x2000bff4
 801cf84:	2000bff1 	.word	0x2000bff1
 801cf88:	08027600 	.word	0x08027600
            } else {
              recv_data = cseg->p;
 801cf8c:	68bb      	ldr	r3, [r7, #8]
 801cf8e:	685b      	ldr	r3, [r3, #4]
 801cf90:	4a70      	ldr	r2, [pc, #448]	; (801d154 <tcp_receive+0xcf8>)
 801cf92:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801cf94:	68bb      	ldr	r3, [r7, #8]
 801cf96:	2200      	movs	r2, #0
 801cf98:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801cf9a:	68bb      	ldr	r3, [r7, #8]
 801cf9c:	68db      	ldr	r3, [r3, #12]
 801cf9e:	899b      	ldrh	r3, [r3, #12]
 801cfa0:	b29b      	uxth	r3, r3
 801cfa2:	4618      	mov	r0, r3
 801cfa4:	f7fa f982 	bl	80172ac <lwip_htons>
 801cfa8:	4603      	mov	r3, r0
 801cfaa:	b2db      	uxtb	r3, r3
 801cfac:	f003 0301 	and.w	r3, r3, #1
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	d00d      	beq.n	801cfd0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801cfb4:	4b68      	ldr	r3, [pc, #416]	; (801d158 <tcp_receive+0xcfc>)
 801cfb6:	781b      	ldrb	r3, [r3, #0]
 801cfb8:	f043 0320 	orr.w	r3, r3, #32
 801cfbc:	b2da      	uxtb	r2, r3
 801cfbe:	4b66      	ldr	r3, [pc, #408]	; (801d158 <tcp_receive+0xcfc>)
 801cfc0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801cfc2:	687b      	ldr	r3, [r7, #4]
 801cfc4:	7d1b      	ldrb	r3, [r3, #20]
 801cfc6:	2b04      	cmp	r3, #4
 801cfc8:	d102      	bne.n	801cfd0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	2207      	movs	r2, #7
 801cfce:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801cfd0:	68bb      	ldr	r3, [r7, #8]
 801cfd2:	681a      	ldr	r2, [r3, #0]
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801cfd8:	68b8      	ldr	r0, [r7, #8]
 801cfda:	f7fd fb04 	bl	801a5e6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d008      	beq.n	801cff8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cfea:	68db      	ldr	r3, [r3, #12]
 801cfec:	685a      	ldr	r2, [r3, #4]
 801cfee:	687b      	ldr	r3, [r7, #4]
 801cff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801cff2:	429a      	cmp	r2, r3
 801cff4:	f43f af43 	beq.w	801ce7e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	8b5b      	ldrh	r3, [r3, #26]
 801cffc:	f003 0301 	and.w	r3, r3, #1
 801d000:	2b00      	cmp	r3, #0
 801d002:	d00e      	beq.n	801d022 <tcp_receive+0xbc6>
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	8b5b      	ldrh	r3, [r3, #26]
 801d008:	f023 0301 	bic.w	r3, r3, #1
 801d00c:	b29a      	uxth	r2, r3
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	835a      	strh	r2, [r3, #26]
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	8b5b      	ldrh	r3, [r3, #26]
 801d016:	f043 0302 	orr.w	r3, r3, #2
 801d01a:	b29a      	uxth	r2, r3
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d020:	e188      	b.n	801d334 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	8b5b      	ldrh	r3, [r3, #26]
 801d026:	f043 0301 	orr.w	r3, r3, #1
 801d02a:	b29a      	uxth	r2, r3
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d030:	e180      	b.n	801d334 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801d032:	687b      	ldr	r3, [r7, #4]
 801d034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d036:	2b00      	cmp	r3, #0
 801d038:	d106      	bne.n	801d048 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801d03a:	4848      	ldr	r0, [pc, #288]	; (801d15c <tcp_receive+0xd00>)
 801d03c:	f7fd faec 	bl	801a618 <tcp_seg_copy>
 801d040:	4602      	mov	r2, r0
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	675a      	str	r2, [r3, #116]	; 0x74
 801d046:	e16d      	b.n	801d324 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801d048:	2300      	movs	r3, #0
 801d04a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d04c:	687b      	ldr	r3, [r7, #4]
 801d04e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d050:	63bb      	str	r3, [r7, #56]	; 0x38
 801d052:	e157      	b.n	801d304 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801d054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d056:	68db      	ldr	r3, [r3, #12]
 801d058:	685a      	ldr	r2, [r3, #4]
 801d05a:	4b41      	ldr	r3, [pc, #260]	; (801d160 <tcp_receive+0xd04>)
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	429a      	cmp	r2, r3
 801d060:	d11d      	bne.n	801d09e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801d062:	4b3e      	ldr	r3, [pc, #248]	; (801d15c <tcp_receive+0xd00>)
 801d064:	891a      	ldrh	r2, [r3, #8]
 801d066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d068:	891b      	ldrh	r3, [r3, #8]
 801d06a:	429a      	cmp	r2, r3
 801d06c:	f240 814f 	bls.w	801d30e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d070:	483a      	ldr	r0, [pc, #232]	; (801d15c <tcp_receive+0xd00>)
 801d072:	f7fd fad1 	bl	801a618 <tcp_seg_copy>
 801d076:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801d078:	697b      	ldr	r3, [r7, #20]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	f000 8149 	beq.w	801d312 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801d080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d082:	2b00      	cmp	r3, #0
 801d084:	d003      	beq.n	801d08e <tcp_receive+0xc32>
                    prev->next = cseg;
 801d086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d088:	697a      	ldr	r2, [r7, #20]
 801d08a:	601a      	str	r2, [r3, #0]
 801d08c:	e002      	b.n	801d094 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	697a      	ldr	r2, [r7, #20]
 801d092:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801d094:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d096:	6978      	ldr	r0, [r7, #20]
 801d098:	f7ff f8dc 	bl	801c254 <tcp_oos_insert_segment>
                }
                break;
 801d09c:	e139      	b.n	801d312 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801d09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	d117      	bne.n	801d0d4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801d0a4:	4b2e      	ldr	r3, [pc, #184]	; (801d160 <tcp_receive+0xd04>)
 801d0a6:	681a      	ldr	r2, [r3, #0]
 801d0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0aa:	68db      	ldr	r3, [r3, #12]
 801d0ac:	685b      	ldr	r3, [r3, #4]
 801d0ae:	1ad3      	subs	r3, r2, r3
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	da57      	bge.n	801d164 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d0b4:	4829      	ldr	r0, [pc, #164]	; (801d15c <tcp_receive+0xd00>)
 801d0b6:	f7fd faaf 	bl	801a618 <tcp_seg_copy>
 801d0ba:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801d0bc:	69bb      	ldr	r3, [r7, #24]
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	f000 8129 	beq.w	801d316 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	69ba      	ldr	r2, [r7, #24]
 801d0c8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801d0ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d0cc:	69b8      	ldr	r0, [r7, #24]
 801d0ce:	f7ff f8c1 	bl	801c254 <tcp_oos_insert_segment>
                  }
                  break;
 801d0d2:	e120      	b.n	801d316 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801d0d4:	4b22      	ldr	r3, [pc, #136]	; (801d160 <tcp_receive+0xd04>)
 801d0d6:	681a      	ldr	r2, [r3, #0]
 801d0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d0da:	68db      	ldr	r3, [r3, #12]
 801d0dc:	685b      	ldr	r3, [r3, #4]
 801d0de:	1ad3      	subs	r3, r2, r3
 801d0e0:	3b01      	subs	r3, #1
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	db3e      	blt.n	801d164 <tcp_receive+0xd08>
 801d0e6:	4b1e      	ldr	r3, [pc, #120]	; (801d160 <tcp_receive+0xd04>)
 801d0e8:	681a      	ldr	r2, [r3, #0]
 801d0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0ec:	68db      	ldr	r3, [r3, #12]
 801d0ee:	685b      	ldr	r3, [r3, #4]
 801d0f0:	1ad3      	subs	r3, r2, r3
 801d0f2:	3301      	adds	r3, #1
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	dc35      	bgt.n	801d164 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d0f8:	4818      	ldr	r0, [pc, #96]	; (801d15c <tcp_receive+0xd00>)
 801d0fa:	f7fd fa8d 	bl	801a618 <tcp_seg_copy>
 801d0fe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801d100:	69fb      	ldr	r3, [r7, #28]
 801d102:	2b00      	cmp	r3, #0
 801d104:	f000 8109 	beq.w	801d31a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801d108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d10a:	68db      	ldr	r3, [r3, #12]
 801d10c:	685b      	ldr	r3, [r3, #4]
 801d10e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d110:	8912      	ldrh	r2, [r2, #8]
 801d112:	441a      	add	r2, r3
 801d114:	4b12      	ldr	r3, [pc, #72]	; (801d160 <tcp_receive+0xd04>)
 801d116:	681b      	ldr	r3, [r3, #0]
 801d118:	1ad3      	subs	r3, r2, r3
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	dd12      	ble.n	801d144 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d11e:	4b10      	ldr	r3, [pc, #64]	; (801d160 <tcp_receive+0xd04>)
 801d120:	681b      	ldr	r3, [r3, #0]
 801d122:	b29a      	uxth	r2, r3
 801d124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d126:	68db      	ldr	r3, [r3, #12]
 801d128:	685b      	ldr	r3, [r3, #4]
 801d12a:	b29b      	uxth	r3, r3
 801d12c:	1ad3      	subs	r3, r2, r3
 801d12e:	b29a      	uxth	r2, r3
 801d130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d132:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801d134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d136:	685a      	ldr	r2, [r3, #4]
 801d138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d13a:	891b      	ldrh	r3, [r3, #8]
 801d13c:	4619      	mov	r1, r3
 801d13e:	4610      	mov	r0, r2
 801d140:	f7fb fb20 	bl	8018784 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801d144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d146:	69fa      	ldr	r2, [r7, #28]
 801d148:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801d14a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d14c:	69f8      	ldr	r0, [r7, #28]
 801d14e:	f7ff f881 	bl	801c254 <tcp_oos_insert_segment>
                  }
                  break;
 801d152:	e0e2      	b.n	801d31a <tcp_receive+0xebe>
 801d154:	2000bff4 	.word	0x2000bff4
 801d158:	2000bff1 	.word	0x2000bff1
 801d15c:	2000bfc4 	.word	0x2000bfc4
 801d160:	2000bfe4 	.word	0x2000bfe4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d166:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801d168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d16a:	681b      	ldr	r3, [r3, #0]
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	f040 80c6 	bne.w	801d2fe <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801d172:	4b80      	ldr	r3, [pc, #512]	; (801d374 <tcp_receive+0xf18>)
 801d174:	681a      	ldr	r2, [r3, #0]
 801d176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d178:	68db      	ldr	r3, [r3, #12]
 801d17a:	685b      	ldr	r3, [r3, #4]
 801d17c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801d17e:	2b00      	cmp	r3, #0
 801d180:	f340 80bd 	ble.w	801d2fe <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d186:	68db      	ldr	r3, [r3, #12]
 801d188:	899b      	ldrh	r3, [r3, #12]
 801d18a:	b29b      	uxth	r3, r3
 801d18c:	4618      	mov	r0, r3
 801d18e:	f7fa f88d 	bl	80172ac <lwip_htons>
 801d192:	4603      	mov	r3, r0
 801d194:	b2db      	uxtb	r3, r3
 801d196:	f003 0301 	and.w	r3, r3, #1
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	f040 80bf 	bne.w	801d31e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801d1a0:	4875      	ldr	r0, [pc, #468]	; (801d378 <tcp_receive+0xf1c>)
 801d1a2:	f7fd fa39 	bl	801a618 <tcp_seg_copy>
 801d1a6:	4602      	mov	r2, r0
 801d1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1aa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801d1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	f000 80b6 	beq.w	801d322 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801d1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1b8:	68db      	ldr	r3, [r3, #12]
 801d1ba:	685b      	ldr	r3, [r3, #4]
 801d1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d1be:	8912      	ldrh	r2, [r2, #8]
 801d1c0:	441a      	add	r2, r3
 801d1c2:	4b6c      	ldr	r3, [pc, #432]	; (801d374 <tcp_receive+0xf18>)
 801d1c4:	681b      	ldr	r3, [r3, #0]
 801d1c6:	1ad3      	subs	r3, r2, r3
 801d1c8:	2b00      	cmp	r3, #0
 801d1ca:	dd12      	ble.n	801d1f2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801d1cc:	4b69      	ldr	r3, [pc, #420]	; (801d374 <tcp_receive+0xf18>)
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	b29a      	uxth	r2, r3
 801d1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1d4:	68db      	ldr	r3, [r3, #12]
 801d1d6:	685b      	ldr	r3, [r3, #4]
 801d1d8:	b29b      	uxth	r3, r3
 801d1da:	1ad3      	subs	r3, r2, r3
 801d1dc:	b29a      	uxth	r2, r3
 801d1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1e0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801d1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1e4:	685a      	ldr	r2, [r3, #4]
 801d1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1e8:	891b      	ldrh	r3, [r3, #8]
 801d1ea:	4619      	mov	r1, r3
 801d1ec:	4610      	mov	r0, r2
 801d1ee:	f7fb fac9 	bl	8018784 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801d1f2:	4b62      	ldr	r3, [pc, #392]	; (801d37c <tcp_receive+0xf20>)
 801d1f4:	881b      	ldrh	r3, [r3, #0]
 801d1f6:	461a      	mov	r2, r3
 801d1f8:	4b5e      	ldr	r3, [pc, #376]	; (801d374 <tcp_receive+0xf18>)
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	441a      	add	r2, r3
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d202:	6879      	ldr	r1, [r7, #4]
 801d204:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d206:	440b      	add	r3, r1
 801d208:	1ad3      	subs	r3, r2, r3
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	f340 8089 	ble.w	801d322 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801d210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	68db      	ldr	r3, [r3, #12]
 801d216:	899b      	ldrh	r3, [r3, #12]
 801d218:	b29b      	uxth	r3, r3
 801d21a:	4618      	mov	r0, r3
 801d21c:	f7fa f846 	bl	80172ac <lwip_htons>
 801d220:	4603      	mov	r3, r0
 801d222:	b2db      	uxtb	r3, r3
 801d224:	f003 0301 	and.w	r3, r3, #1
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d022      	beq.n	801d272 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	68db      	ldr	r3, [r3, #12]
 801d232:	899b      	ldrh	r3, [r3, #12]
 801d234:	b29b      	uxth	r3, r3
 801d236:	b21b      	sxth	r3, r3
 801d238:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d23c:	b21c      	sxth	r4, r3
 801d23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d240:	681b      	ldr	r3, [r3, #0]
 801d242:	68db      	ldr	r3, [r3, #12]
 801d244:	899b      	ldrh	r3, [r3, #12]
 801d246:	b29b      	uxth	r3, r3
 801d248:	4618      	mov	r0, r3
 801d24a:	f7fa f82f 	bl	80172ac <lwip_htons>
 801d24e:	4603      	mov	r3, r0
 801d250:	b2db      	uxtb	r3, r3
 801d252:	b29b      	uxth	r3, r3
 801d254:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801d258:	b29b      	uxth	r3, r3
 801d25a:	4618      	mov	r0, r3
 801d25c:	f7fa f826 	bl	80172ac <lwip_htons>
 801d260:	4603      	mov	r3, r0
 801d262:	b21b      	sxth	r3, r3
 801d264:	4323      	orrs	r3, r4
 801d266:	b21a      	sxth	r2, r3
 801d268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	68db      	ldr	r3, [r3, #12]
 801d26e:	b292      	uxth	r2, r2
 801d270:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d276:	b29a      	uxth	r2, r3
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d27c:	4413      	add	r3, r2
 801d27e:	b299      	uxth	r1, r3
 801d280:	4b3c      	ldr	r3, [pc, #240]	; (801d374 <tcp_receive+0xf18>)
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	b29a      	uxth	r2, r3
 801d286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d288:	681b      	ldr	r3, [r3, #0]
 801d28a:	1a8a      	subs	r2, r1, r2
 801d28c:	b292      	uxth	r2, r2
 801d28e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801d290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	685a      	ldr	r2, [r3, #4]
 801d296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	891b      	ldrh	r3, [r3, #8]
 801d29c:	4619      	mov	r1, r3
 801d29e:	4610      	mov	r0, r2
 801d2a0:	f7fb fa70 	bl	8018784 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801d2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d2a6:	681b      	ldr	r3, [r3, #0]
 801d2a8:	891c      	ldrh	r4, [r3, #8]
 801d2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d2ac:	681b      	ldr	r3, [r3, #0]
 801d2ae:	68db      	ldr	r3, [r3, #12]
 801d2b0:	899b      	ldrh	r3, [r3, #12]
 801d2b2:	b29b      	uxth	r3, r3
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	f7f9 fff9 	bl	80172ac <lwip_htons>
 801d2ba:	4603      	mov	r3, r0
 801d2bc:	b2db      	uxtb	r3, r3
 801d2be:	f003 0303 	and.w	r3, r3, #3
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	d001      	beq.n	801d2ca <tcp_receive+0xe6e>
 801d2c6:	2301      	movs	r3, #1
 801d2c8:	e000      	b.n	801d2cc <tcp_receive+0xe70>
 801d2ca:	2300      	movs	r3, #0
 801d2cc:	4423      	add	r3, r4
 801d2ce:	b29a      	uxth	r2, r3
 801d2d0:	4b2a      	ldr	r3, [pc, #168]	; (801d37c <tcp_receive+0xf20>)
 801d2d2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d2d4:	4b29      	ldr	r3, [pc, #164]	; (801d37c <tcp_receive+0xf20>)
 801d2d6:	881b      	ldrh	r3, [r3, #0]
 801d2d8:	461a      	mov	r2, r3
 801d2da:	4b26      	ldr	r3, [pc, #152]	; (801d374 <tcp_receive+0xf18>)
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	441a      	add	r2, r3
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2e4:	6879      	ldr	r1, [r7, #4]
 801d2e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d2e8:	440b      	add	r3, r1
 801d2ea:	429a      	cmp	r2, r3
 801d2ec:	d019      	beq.n	801d322 <tcp_receive+0xec6>
 801d2ee:	4b24      	ldr	r3, [pc, #144]	; (801d380 <tcp_receive+0xf24>)
 801d2f0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801d2f4:	4923      	ldr	r1, [pc, #140]	; (801d384 <tcp_receive+0xf28>)
 801d2f6:	4824      	ldr	r0, [pc, #144]	; (801d388 <tcp_receive+0xf2c>)
 801d2f8:	f006 fe02 	bl	8023f00 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801d2fc:	e011      	b.n	801d322 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	63bb      	str	r3, [r7, #56]	; 0x38
 801d304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d306:	2b00      	cmp	r3, #0
 801d308:	f47f aea4 	bne.w	801d054 <tcp_receive+0xbf8>
 801d30c:	e00a      	b.n	801d324 <tcp_receive+0xec8>
                break;
 801d30e:	bf00      	nop
 801d310:	e008      	b.n	801d324 <tcp_receive+0xec8>
                break;
 801d312:	bf00      	nop
 801d314:	e006      	b.n	801d324 <tcp_receive+0xec8>
                  break;
 801d316:	bf00      	nop
 801d318:	e004      	b.n	801d324 <tcp_receive+0xec8>
                  break;
 801d31a:	bf00      	nop
 801d31c:	e002      	b.n	801d324 <tcp_receive+0xec8>
                  break;
 801d31e:	bf00      	nop
 801d320:	e000      	b.n	801d324 <tcp_receive+0xec8>
                break;
 801d322:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801d324:	6878      	ldr	r0, [r7, #4]
 801d326:	f001 fe8b 	bl	801f040 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801d32a:	e003      	b.n	801d334 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801d32c:	6878      	ldr	r0, [r7, #4]
 801d32e:	f001 fe87 	bl	801f040 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d332:	e01a      	b.n	801d36a <tcp_receive+0xf0e>
 801d334:	e019      	b.n	801d36a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801d336:	4b0f      	ldr	r3, [pc, #60]	; (801d374 <tcp_receive+0xf18>)
 801d338:	681a      	ldr	r2, [r3, #0]
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d33e:	1ad3      	subs	r3, r2, r3
 801d340:	2b00      	cmp	r3, #0
 801d342:	db0a      	blt.n	801d35a <tcp_receive+0xefe>
 801d344:	4b0b      	ldr	r3, [pc, #44]	; (801d374 <tcp_receive+0xf18>)
 801d346:	681a      	ldr	r2, [r3, #0]
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d34c:	6879      	ldr	r1, [r7, #4]
 801d34e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d350:	440b      	add	r3, r1
 801d352:	1ad3      	subs	r3, r2, r3
 801d354:	3301      	adds	r3, #1
 801d356:	2b00      	cmp	r3, #0
 801d358:	dd07      	ble.n	801d36a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	8b5b      	ldrh	r3, [r3, #26]
 801d35e:	f043 0302 	orr.w	r3, r3, #2
 801d362:	b29a      	uxth	r2, r3
 801d364:	687b      	ldr	r3, [r7, #4]
 801d366:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801d368:	e7ff      	b.n	801d36a <tcp_receive+0xf0e>
 801d36a:	bf00      	nop
 801d36c:	3750      	adds	r7, #80	; 0x50
 801d36e:	46bd      	mov	sp, r7
 801d370:	bdb0      	pop	{r4, r5, r7, pc}
 801d372:	bf00      	nop
 801d374:	2000bfe4 	.word	0x2000bfe4
 801d378:	2000bfc4 	.word	0x2000bfc4
 801d37c:	2000bfee 	.word	0x2000bfee
 801d380:	080271c4 	.word	0x080271c4
 801d384:	0802756c 	.word	0x0802756c
 801d388:	08027210 	.word	0x08027210

0801d38c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801d38c:	b480      	push	{r7}
 801d38e:	b083      	sub	sp, #12
 801d390:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801d392:	4b15      	ldr	r3, [pc, #84]	; (801d3e8 <tcp_get_next_optbyte+0x5c>)
 801d394:	881b      	ldrh	r3, [r3, #0]
 801d396:	1c5a      	adds	r2, r3, #1
 801d398:	b291      	uxth	r1, r2
 801d39a:	4a13      	ldr	r2, [pc, #76]	; (801d3e8 <tcp_get_next_optbyte+0x5c>)
 801d39c:	8011      	strh	r1, [r2, #0]
 801d39e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d3a0:	4b12      	ldr	r3, [pc, #72]	; (801d3ec <tcp_get_next_optbyte+0x60>)
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d004      	beq.n	801d3b2 <tcp_get_next_optbyte+0x26>
 801d3a8:	4b11      	ldr	r3, [pc, #68]	; (801d3f0 <tcp_get_next_optbyte+0x64>)
 801d3aa:	881b      	ldrh	r3, [r3, #0]
 801d3ac:	88fa      	ldrh	r2, [r7, #6]
 801d3ae:	429a      	cmp	r2, r3
 801d3b0:	d208      	bcs.n	801d3c4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d3b2:	4b10      	ldr	r3, [pc, #64]	; (801d3f4 <tcp_get_next_optbyte+0x68>)
 801d3b4:	681b      	ldr	r3, [r3, #0]
 801d3b6:	3314      	adds	r3, #20
 801d3b8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801d3ba:	88fb      	ldrh	r3, [r7, #6]
 801d3bc:	683a      	ldr	r2, [r7, #0]
 801d3be:	4413      	add	r3, r2
 801d3c0:	781b      	ldrb	r3, [r3, #0]
 801d3c2:	e00b      	b.n	801d3dc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d3c4:	88fb      	ldrh	r3, [r7, #6]
 801d3c6:	b2da      	uxtb	r2, r3
 801d3c8:	4b09      	ldr	r3, [pc, #36]	; (801d3f0 <tcp_get_next_optbyte+0x64>)
 801d3ca:	881b      	ldrh	r3, [r3, #0]
 801d3cc:	b2db      	uxtb	r3, r3
 801d3ce:	1ad3      	subs	r3, r2, r3
 801d3d0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801d3d2:	4b06      	ldr	r3, [pc, #24]	; (801d3ec <tcp_get_next_optbyte+0x60>)
 801d3d4:	681a      	ldr	r2, [r3, #0]
 801d3d6:	797b      	ldrb	r3, [r7, #5]
 801d3d8:	4413      	add	r3, r2
 801d3da:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d3dc:	4618      	mov	r0, r3
 801d3de:	370c      	adds	r7, #12
 801d3e0:	46bd      	mov	sp, r7
 801d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3e6:	4770      	bx	lr
 801d3e8:	2000bfe0 	.word	0x2000bfe0
 801d3ec:	2000bfdc 	.word	0x2000bfdc
 801d3f0:	2000bfda 	.word	0x2000bfda
 801d3f4:	2000bfd4 	.word	0x2000bfd4

0801d3f8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801d3f8:	b580      	push	{r7, lr}
 801d3fa:	b084      	sub	sp, #16
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	2b00      	cmp	r3, #0
 801d404:	d106      	bne.n	801d414 <tcp_parseopt+0x1c>
 801d406:	4b32      	ldr	r3, [pc, #200]	; (801d4d0 <tcp_parseopt+0xd8>)
 801d408:	f240 727d 	movw	r2, #1917	; 0x77d
 801d40c:	4931      	ldr	r1, [pc, #196]	; (801d4d4 <tcp_parseopt+0xdc>)
 801d40e:	4832      	ldr	r0, [pc, #200]	; (801d4d8 <tcp_parseopt+0xe0>)
 801d410:	f006 fd76 	bl	8023f00 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801d414:	4b31      	ldr	r3, [pc, #196]	; (801d4dc <tcp_parseopt+0xe4>)
 801d416:	881b      	ldrh	r3, [r3, #0]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d055      	beq.n	801d4c8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d41c:	4b30      	ldr	r3, [pc, #192]	; (801d4e0 <tcp_parseopt+0xe8>)
 801d41e:	2200      	movs	r2, #0
 801d420:	801a      	strh	r2, [r3, #0]
 801d422:	e045      	b.n	801d4b0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801d424:	f7ff ffb2 	bl	801d38c <tcp_get_next_optbyte>
 801d428:	4603      	mov	r3, r0
 801d42a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801d42c:	7bfb      	ldrb	r3, [r7, #15]
 801d42e:	2b02      	cmp	r3, #2
 801d430:	d006      	beq.n	801d440 <tcp_parseopt+0x48>
 801d432:	2b02      	cmp	r3, #2
 801d434:	dc2b      	bgt.n	801d48e <tcp_parseopt+0x96>
 801d436:	2b00      	cmp	r3, #0
 801d438:	d041      	beq.n	801d4be <tcp_parseopt+0xc6>
 801d43a:	2b01      	cmp	r3, #1
 801d43c:	d127      	bne.n	801d48e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801d43e:	e037      	b.n	801d4b0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d440:	f7ff ffa4 	bl	801d38c <tcp_get_next_optbyte>
 801d444:	4603      	mov	r3, r0
 801d446:	2b04      	cmp	r3, #4
 801d448:	d13b      	bne.n	801d4c2 <tcp_parseopt+0xca>
 801d44a:	4b25      	ldr	r3, [pc, #148]	; (801d4e0 <tcp_parseopt+0xe8>)
 801d44c:	881b      	ldrh	r3, [r3, #0]
 801d44e:	3301      	adds	r3, #1
 801d450:	4a22      	ldr	r2, [pc, #136]	; (801d4dc <tcp_parseopt+0xe4>)
 801d452:	8812      	ldrh	r2, [r2, #0]
 801d454:	4293      	cmp	r3, r2
 801d456:	da34      	bge.n	801d4c2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d458:	f7ff ff98 	bl	801d38c <tcp_get_next_optbyte>
 801d45c:	4603      	mov	r3, r0
 801d45e:	b29b      	uxth	r3, r3
 801d460:	021b      	lsls	r3, r3, #8
 801d462:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801d464:	f7ff ff92 	bl	801d38c <tcp_get_next_optbyte>
 801d468:	4603      	mov	r3, r0
 801d46a:	b29a      	uxth	r2, r3
 801d46c:	89bb      	ldrh	r3, [r7, #12]
 801d46e:	4313      	orrs	r3, r2
 801d470:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d472:	89bb      	ldrh	r3, [r7, #12]
 801d474:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801d478:	d804      	bhi.n	801d484 <tcp_parseopt+0x8c>
 801d47a:	89bb      	ldrh	r3, [r7, #12]
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d001      	beq.n	801d484 <tcp_parseopt+0x8c>
 801d480:	89ba      	ldrh	r2, [r7, #12]
 801d482:	e001      	b.n	801d488 <tcp_parseopt+0x90>
 801d484:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801d48c:	e010      	b.n	801d4b0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801d48e:	f7ff ff7d 	bl	801d38c <tcp_get_next_optbyte>
 801d492:	4603      	mov	r3, r0
 801d494:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801d496:	7afb      	ldrb	r3, [r7, #11]
 801d498:	2b01      	cmp	r3, #1
 801d49a:	d914      	bls.n	801d4c6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d49c:	7afb      	ldrb	r3, [r7, #11]
 801d49e:	b29a      	uxth	r2, r3
 801d4a0:	4b0f      	ldr	r3, [pc, #60]	; (801d4e0 <tcp_parseopt+0xe8>)
 801d4a2:	881b      	ldrh	r3, [r3, #0]
 801d4a4:	4413      	add	r3, r2
 801d4a6:	b29b      	uxth	r3, r3
 801d4a8:	3b02      	subs	r3, #2
 801d4aa:	b29a      	uxth	r2, r3
 801d4ac:	4b0c      	ldr	r3, [pc, #48]	; (801d4e0 <tcp_parseopt+0xe8>)
 801d4ae:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d4b0:	4b0b      	ldr	r3, [pc, #44]	; (801d4e0 <tcp_parseopt+0xe8>)
 801d4b2:	881a      	ldrh	r2, [r3, #0]
 801d4b4:	4b09      	ldr	r3, [pc, #36]	; (801d4dc <tcp_parseopt+0xe4>)
 801d4b6:	881b      	ldrh	r3, [r3, #0]
 801d4b8:	429a      	cmp	r2, r3
 801d4ba:	d3b3      	bcc.n	801d424 <tcp_parseopt+0x2c>
 801d4bc:	e004      	b.n	801d4c8 <tcp_parseopt+0xd0>
          return;
 801d4be:	bf00      	nop
 801d4c0:	e002      	b.n	801d4c8 <tcp_parseopt+0xd0>
            return;
 801d4c2:	bf00      	nop
 801d4c4:	e000      	b.n	801d4c8 <tcp_parseopt+0xd0>
            return;
 801d4c6:	bf00      	nop
      }
    }
  }
}
 801d4c8:	3710      	adds	r7, #16
 801d4ca:	46bd      	mov	sp, r7
 801d4cc:	bd80      	pop	{r7, pc}
 801d4ce:	bf00      	nop
 801d4d0:	080271c4 	.word	0x080271c4
 801d4d4:	08027628 	.word	0x08027628
 801d4d8:	08027210 	.word	0x08027210
 801d4dc:	2000bfd8 	.word	0x2000bfd8
 801d4e0:	2000bfe0 	.word	0x2000bfe0

0801d4e4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801d4e4:	b480      	push	{r7}
 801d4e6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801d4e8:	4b05      	ldr	r3, [pc, #20]	; (801d500 <tcp_trigger_input_pcb_close+0x1c>)
 801d4ea:	781b      	ldrb	r3, [r3, #0]
 801d4ec:	f043 0310 	orr.w	r3, r3, #16
 801d4f0:	b2da      	uxtb	r2, r3
 801d4f2:	4b03      	ldr	r3, [pc, #12]	; (801d500 <tcp_trigger_input_pcb_close+0x1c>)
 801d4f4:	701a      	strb	r2, [r3, #0]
}
 801d4f6:	bf00      	nop
 801d4f8:	46bd      	mov	sp, r7
 801d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4fe:	4770      	bx	lr
 801d500:	2000bff1 	.word	0x2000bff1

0801d504 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801d504:	b580      	push	{r7, lr}
 801d506:	b084      	sub	sp, #16
 801d508:	af00      	add	r7, sp, #0
 801d50a:	60f8      	str	r0, [r7, #12]
 801d50c:	60b9      	str	r1, [r7, #8]
 801d50e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801d510:	68fb      	ldr	r3, [r7, #12]
 801d512:	2b00      	cmp	r3, #0
 801d514:	d00a      	beq.n	801d52c <tcp_route+0x28>
 801d516:	68fb      	ldr	r3, [r7, #12]
 801d518:	7a1b      	ldrb	r3, [r3, #8]
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	d006      	beq.n	801d52c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801d51e:	68fb      	ldr	r3, [r7, #12]
 801d520:	7a1b      	ldrb	r3, [r3, #8]
 801d522:	4618      	mov	r0, r3
 801d524:	f7fa ff26 	bl	8018374 <netif_get_by_index>
 801d528:	4603      	mov	r3, r0
 801d52a:	e003      	b.n	801d534 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801d52c:	6878      	ldr	r0, [r7, #4]
 801d52e:	f003 fea3 	bl	8021278 <ip4_route>
 801d532:	4603      	mov	r3, r0
  }
}
 801d534:	4618      	mov	r0, r3
 801d536:	3710      	adds	r7, #16
 801d538:	46bd      	mov	sp, r7
 801d53a:	bd80      	pop	{r7, pc}

0801d53c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801d53c:	b590      	push	{r4, r7, lr}
 801d53e:	b087      	sub	sp, #28
 801d540:	af00      	add	r7, sp, #0
 801d542:	60f8      	str	r0, [r7, #12]
 801d544:	60b9      	str	r1, [r7, #8]
 801d546:	603b      	str	r3, [r7, #0]
 801d548:	4613      	mov	r3, r2
 801d54a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801d54c:	68fb      	ldr	r3, [r7, #12]
 801d54e:	2b00      	cmp	r3, #0
 801d550:	d105      	bne.n	801d55e <tcp_create_segment+0x22>
 801d552:	4b44      	ldr	r3, [pc, #272]	; (801d664 <tcp_create_segment+0x128>)
 801d554:	22a3      	movs	r2, #163	; 0xa3
 801d556:	4944      	ldr	r1, [pc, #272]	; (801d668 <tcp_create_segment+0x12c>)
 801d558:	4844      	ldr	r0, [pc, #272]	; (801d66c <tcp_create_segment+0x130>)
 801d55a:	f006 fcd1 	bl	8023f00 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801d55e:	68bb      	ldr	r3, [r7, #8]
 801d560:	2b00      	cmp	r3, #0
 801d562:	d105      	bne.n	801d570 <tcp_create_segment+0x34>
 801d564:	4b3f      	ldr	r3, [pc, #252]	; (801d664 <tcp_create_segment+0x128>)
 801d566:	22a4      	movs	r2, #164	; 0xa4
 801d568:	4941      	ldr	r1, [pc, #260]	; (801d670 <tcp_create_segment+0x134>)
 801d56a:	4840      	ldr	r0, [pc, #256]	; (801d66c <tcp_create_segment+0x130>)
 801d56c:	f006 fcc8 	bl	8023f00 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d570:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d574:	009b      	lsls	r3, r3, #2
 801d576:	b2db      	uxtb	r3, r3
 801d578:	f003 0304 	and.w	r3, r3, #4
 801d57c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801d57e:	2003      	movs	r0, #3
 801d580:	f7fa fb6c 	bl	8017c5c <memp_malloc>
 801d584:	6138      	str	r0, [r7, #16]
 801d586:	693b      	ldr	r3, [r7, #16]
 801d588:	2b00      	cmp	r3, #0
 801d58a:	d104      	bne.n	801d596 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801d58c:	68b8      	ldr	r0, [r7, #8]
 801d58e:	f7fb fa7f 	bl	8018a90 <pbuf_free>
    return NULL;
 801d592:	2300      	movs	r3, #0
 801d594:	e061      	b.n	801d65a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801d596:	693b      	ldr	r3, [r7, #16]
 801d598:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d59c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801d59e:	693b      	ldr	r3, [r7, #16]
 801d5a0:	2200      	movs	r2, #0
 801d5a2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801d5a4:	693b      	ldr	r3, [r7, #16]
 801d5a6:	68ba      	ldr	r2, [r7, #8]
 801d5a8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d5aa:	68bb      	ldr	r3, [r7, #8]
 801d5ac:	891a      	ldrh	r2, [r3, #8]
 801d5ae:	7dfb      	ldrb	r3, [r7, #23]
 801d5b0:	b29b      	uxth	r3, r3
 801d5b2:	429a      	cmp	r2, r3
 801d5b4:	d205      	bcs.n	801d5c2 <tcp_create_segment+0x86>
 801d5b6:	4b2b      	ldr	r3, [pc, #172]	; (801d664 <tcp_create_segment+0x128>)
 801d5b8:	22b0      	movs	r2, #176	; 0xb0
 801d5ba:	492e      	ldr	r1, [pc, #184]	; (801d674 <tcp_create_segment+0x138>)
 801d5bc:	482b      	ldr	r0, [pc, #172]	; (801d66c <tcp_create_segment+0x130>)
 801d5be:	f006 fc9f 	bl	8023f00 <iprintf>
  seg->len = p->tot_len - optlen;
 801d5c2:	68bb      	ldr	r3, [r7, #8]
 801d5c4:	891a      	ldrh	r2, [r3, #8]
 801d5c6:	7dfb      	ldrb	r3, [r7, #23]
 801d5c8:	b29b      	uxth	r3, r3
 801d5ca:	1ad3      	subs	r3, r2, r3
 801d5cc:	b29a      	uxth	r2, r3
 801d5ce:	693b      	ldr	r3, [r7, #16]
 801d5d0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801d5d2:	2114      	movs	r1, #20
 801d5d4:	68b8      	ldr	r0, [r7, #8]
 801d5d6:	f7fb f9c5 	bl	8018964 <pbuf_add_header>
 801d5da:	4603      	mov	r3, r0
 801d5dc:	2b00      	cmp	r3, #0
 801d5de:	d004      	beq.n	801d5ea <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801d5e0:	6938      	ldr	r0, [r7, #16]
 801d5e2:	f7fd f800 	bl	801a5e6 <tcp_seg_free>
    return NULL;
 801d5e6:	2300      	movs	r3, #0
 801d5e8:	e037      	b.n	801d65a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d5ea:	693b      	ldr	r3, [r7, #16]
 801d5ec:	685b      	ldr	r3, [r3, #4]
 801d5ee:	685a      	ldr	r2, [r3, #4]
 801d5f0:	693b      	ldr	r3, [r7, #16]
 801d5f2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801d5f4:	68fb      	ldr	r3, [r7, #12]
 801d5f6:	8ada      	ldrh	r2, [r3, #22]
 801d5f8:	693b      	ldr	r3, [r7, #16]
 801d5fa:	68dc      	ldr	r4, [r3, #12]
 801d5fc:	4610      	mov	r0, r2
 801d5fe:	f7f9 fe55 	bl	80172ac <lwip_htons>
 801d602:	4603      	mov	r3, r0
 801d604:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801d606:	68fb      	ldr	r3, [r7, #12]
 801d608:	8b1a      	ldrh	r2, [r3, #24]
 801d60a:	693b      	ldr	r3, [r7, #16]
 801d60c:	68dc      	ldr	r4, [r3, #12]
 801d60e:	4610      	mov	r0, r2
 801d610:	f7f9 fe4c 	bl	80172ac <lwip_htons>
 801d614:	4603      	mov	r3, r0
 801d616:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801d618:	693b      	ldr	r3, [r7, #16]
 801d61a:	68dc      	ldr	r4, [r3, #12]
 801d61c:	6838      	ldr	r0, [r7, #0]
 801d61e:	f7f9 fe5a 	bl	80172d6 <lwip_htonl>
 801d622:	4603      	mov	r3, r0
 801d624:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d626:	7dfb      	ldrb	r3, [r7, #23]
 801d628:	089b      	lsrs	r3, r3, #2
 801d62a:	b2db      	uxtb	r3, r3
 801d62c:	b29b      	uxth	r3, r3
 801d62e:	3305      	adds	r3, #5
 801d630:	b29b      	uxth	r3, r3
 801d632:	031b      	lsls	r3, r3, #12
 801d634:	b29a      	uxth	r2, r3
 801d636:	79fb      	ldrb	r3, [r7, #7]
 801d638:	b29b      	uxth	r3, r3
 801d63a:	4313      	orrs	r3, r2
 801d63c:	b29a      	uxth	r2, r3
 801d63e:	693b      	ldr	r3, [r7, #16]
 801d640:	68dc      	ldr	r4, [r3, #12]
 801d642:	4610      	mov	r0, r2
 801d644:	f7f9 fe32 	bl	80172ac <lwip_htons>
 801d648:	4603      	mov	r3, r0
 801d64a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801d64c:	693b      	ldr	r3, [r7, #16]
 801d64e:	68db      	ldr	r3, [r3, #12]
 801d650:	2200      	movs	r2, #0
 801d652:	749a      	strb	r2, [r3, #18]
 801d654:	2200      	movs	r2, #0
 801d656:	74da      	strb	r2, [r3, #19]
  return seg;
 801d658:	693b      	ldr	r3, [r7, #16]
}
 801d65a:	4618      	mov	r0, r3
 801d65c:	371c      	adds	r7, #28
 801d65e:	46bd      	mov	sp, r7
 801d660:	bd90      	pop	{r4, r7, pc}
 801d662:	bf00      	nop
 801d664:	08027644 	.word	0x08027644
 801d668:	08027678 	.word	0x08027678
 801d66c:	08027698 	.word	0x08027698
 801d670:	080276c0 	.word	0x080276c0
 801d674:	080276e4 	.word	0x080276e4

0801d678 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801d678:	b580      	push	{r7, lr}
 801d67a:	b086      	sub	sp, #24
 801d67c:	af00      	add	r7, sp, #0
 801d67e:	607b      	str	r3, [r7, #4]
 801d680:	4603      	mov	r3, r0
 801d682:	73fb      	strb	r3, [r7, #15]
 801d684:	460b      	mov	r3, r1
 801d686:	81bb      	strh	r3, [r7, #12]
 801d688:	4613      	mov	r3, r2
 801d68a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801d68c:	89bb      	ldrh	r3, [r7, #12]
 801d68e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	2b00      	cmp	r3, #0
 801d694:	d105      	bne.n	801d6a2 <tcp_pbuf_prealloc+0x2a>
 801d696:	4b30      	ldr	r3, [pc, #192]	; (801d758 <tcp_pbuf_prealloc+0xe0>)
 801d698:	22e8      	movs	r2, #232	; 0xe8
 801d69a:	4930      	ldr	r1, [pc, #192]	; (801d75c <tcp_pbuf_prealloc+0xe4>)
 801d69c:	4830      	ldr	r0, [pc, #192]	; (801d760 <tcp_pbuf_prealloc+0xe8>)
 801d69e:	f006 fc2f 	bl	8023f00 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801d6a2:	6a3b      	ldr	r3, [r7, #32]
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	d105      	bne.n	801d6b4 <tcp_pbuf_prealloc+0x3c>
 801d6a8:	4b2b      	ldr	r3, [pc, #172]	; (801d758 <tcp_pbuf_prealloc+0xe0>)
 801d6aa:	22e9      	movs	r2, #233	; 0xe9
 801d6ac:	492d      	ldr	r1, [pc, #180]	; (801d764 <tcp_pbuf_prealloc+0xec>)
 801d6ae:	482c      	ldr	r0, [pc, #176]	; (801d760 <tcp_pbuf_prealloc+0xe8>)
 801d6b0:	f006 fc26 	bl	8023f00 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801d6b4:	89ba      	ldrh	r2, [r7, #12]
 801d6b6:	897b      	ldrh	r3, [r7, #10]
 801d6b8:	429a      	cmp	r2, r3
 801d6ba:	d221      	bcs.n	801d700 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d6bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d6c0:	f003 0302 	and.w	r3, r3, #2
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	d111      	bne.n	801d6ec <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801d6c8:	6a3b      	ldr	r3, [r7, #32]
 801d6ca:	8b5b      	ldrh	r3, [r3, #26]
 801d6cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	d115      	bne.n	801d700 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801d6d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	d007      	beq.n	801d6ec <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801d6dc:	6a3b      	ldr	r3, [r7, #32]
 801d6de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	d103      	bne.n	801d6ec <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801d6e4:	6a3b      	ldr	r3, [r7, #32]
 801d6e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801d6e8:	2b00      	cmp	r3, #0
 801d6ea:	d009      	beq.n	801d700 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801d6ec:	89bb      	ldrh	r3, [r7, #12]
 801d6ee:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801d6f2:	f023 0203 	bic.w	r2, r3, #3
 801d6f6:	897b      	ldrh	r3, [r7, #10]
 801d6f8:	4293      	cmp	r3, r2
 801d6fa:	bf28      	it	cs
 801d6fc:	4613      	movcs	r3, r2
 801d6fe:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801d700:	8af9      	ldrh	r1, [r7, #22]
 801d702:	7bfb      	ldrb	r3, [r7, #15]
 801d704:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d708:	4618      	mov	r0, r3
 801d70a:	f7fa fedd 	bl	80184c8 <pbuf_alloc>
 801d70e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d710:	693b      	ldr	r3, [r7, #16]
 801d712:	2b00      	cmp	r3, #0
 801d714:	d101      	bne.n	801d71a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801d716:	2300      	movs	r3, #0
 801d718:	e019      	b.n	801d74e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801d71a:	693b      	ldr	r3, [r7, #16]
 801d71c:	681b      	ldr	r3, [r3, #0]
 801d71e:	2b00      	cmp	r3, #0
 801d720:	d006      	beq.n	801d730 <tcp_pbuf_prealloc+0xb8>
 801d722:	4b0d      	ldr	r3, [pc, #52]	; (801d758 <tcp_pbuf_prealloc+0xe0>)
 801d724:	f240 120b 	movw	r2, #267	; 0x10b
 801d728:	490f      	ldr	r1, [pc, #60]	; (801d768 <tcp_pbuf_prealloc+0xf0>)
 801d72a:	480d      	ldr	r0, [pc, #52]	; (801d760 <tcp_pbuf_prealloc+0xe8>)
 801d72c:	f006 fbe8 	bl	8023f00 <iprintf>
  *oversize = p->len - length;
 801d730:	693b      	ldr	r3, [r7, #16]
 801d732:	895a      	ldrh	r2, [r3, #10]
 801d734:	89bb      	ldrh	r3, [r7, #12]
 801d736:	1ad3      	subs	r3, r2, r3
 801d738:	b29a      	uxth	r2, r3
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801d73e:	693b      	ldr	r3, [r7, #16]
 801d740:	89ba      	ldrh	r2, [r7, #12]
 801d742:	811a      	strh	r2, [r3, #8]
 801d744:	693b      	ldr	r3, [r7, #16]
 801d746:	891a      	ldrh	r2, [r3, #8]
 801d748:	693b      	ldr	r3, [r7, #16]
 801d74a:	815a      	strh	r2, [r3, #10]
  return p;
 801d74c:	693b      	ldr	r3, [r7, #16]
}
 801d74e:	4618      	mov	r0, r3
 801d750:	3718      	adds	r7, #24
 801d752:	46bd      	mov	sp, r7
 801d754:	bd80      	pop	{r7, pc}
 801d756:	bf00      	nop
 801d758:	08027644 	.word	0x08027644
 801d75c:	080276fc 	.word	0x080276fc
 801d760:	08027698 	.word	0x08027698
 801d764:	08027720 	.word	0x08027720
 801d768:	08027740 	.word	0x08027740

0801d76c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801d76c:	b580      	push	{r7, lr}
 801d76e:	b082      	sub	sp, #8
 801d770:	af00      	add	r7, sp, #0
 801d772:	6078      	str	r0, [r7, #4]
 801d774:	460b      	mov	r3, r1
 801d776:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d106      	bne.n	801d78c <tcp_write_checks+0x20>
 801d77e:	4b33      	ldr	r3, [pc, #204]	; (801d84c <tcp_write_checks+0xe0>)
 801d780:	f240 1233 	movw	r2, #307	; 0x133
 801d784:	4932      	ldr	r1, [pc, #200]	; (801d850 <tcp_write_checks+0xe4>)
 801d786:	4833      	ldr	r0, [pc, #204]	; (801d854 <tcp_write_checks+0xe8>)
 801d788:	f006 fbba 	bl	8023f00 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	7d1b      	ldrb	r3, [r3, #20]
 801d790:	2b04      	cmp	r3, #4
 801d792:	d00e      	beq.n	801d7b2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801d798:	2b07      	cmp	r3, #7
 801d79a:	d00a      	beq.n	801d7b2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801d79c:	687b      	ldr	r3, [r7, #4]
 801d79e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801d7a0:	2b02      	cmp	r3, #2
 801d7a2:	d006      	beq.n	801d7b2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801d7a4:	687b      	ldr	r3, [r7, #4]
 801d7a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801d7a8:	2b03      	cmp	r3, #3
 801d7aa:	d002      	beq.n	801d7b2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801d7ac:	f06f 030a 	mvn.w	r3, #10
 801d7b0:	e048      	b.n	801d844 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801d7b2:	887b      	ldrh	r3, [r7, #2]
 801d7b4:	2b00      	cmp	r3, #0
 801d7b6:	d101      	bne.n	801d7bc <tcp_write_checks+0x50>
    return ERR_OK;
 801d7b8:	2300      	movs	r3, #0
 801d7ba:	e043      	b.n	801d844 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801d7c2:	887a      	ldrh	r2, [r7, #2]
 801d7c4:	429a      	cmp	r2, r3
 801d7c6:	d909      	bls.n	801d7dc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	8b5b      	ldrh	r3, [r3, #26]
 801d7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d7d0:	b29a      	uxth	r2, r3
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801d7d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d7da:	e033      	b.n	801d844 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d7e2:	2b08      	cmp	r3, #8
 801d7e4:	d909      	bls.n	801d7fa <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	8b5b      	ldrh	r3, [r3, #26]
 801d7ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d7ee:	b29a      	uxth	r2, r3
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801d7f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d7f8:	e024      	b.n	801d844 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d800:	2b00      	cmp	r3, #0
 801d802:	d00f      	beq.n	801d824 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d808:	2b00      	cmp	r3, #0
 801d80a:	d11a      	bne.n	801d842 <tcp_write_checks+0xd6>
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d810:	2b00      	cmp	r3, #0
 801d812:	d116      	bne.n	801d842 <tcp_write_checks+0xd6>
 801d814:	4b0d      	ldr	r3, [pc, #52]	; (801d84c <tcp_write_checks+0xe0>)
 801d816:	f240 1255 	movw	r2, #341	; 0x155
 801d81a:	490f      	ldr	r1, [pc, #60]	; (801d858 <tcp_write_checks+0xec>)
 801d81c:	480d      	ldr	r0, [pc, #52]	; (801d854 <tcp_write_checks+0xe8>)
 801d81e:	f006 fb6f 	bl	8023f00 <iprintf>
 801d822:	e00e      	b.n	801d842 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d828:	2b00      	cmp	r3, #0
 801d82a:	d103      	bne.n	801d834 <tcp_write_checks+0xc8>
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d830:	2b00      	cmp	r3, #0
 801d832:	d006      	beq.n	801d842 <tcp_write_checks+0xd6>
 801d834:	4b05      	ldr	r3, [pc, #20]	; (801d84c <tcp_write_checks+0xe0>)
 801d836:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801d83a:	4908      	ldr	r1, [pc, #32]	; (801d85c <tcp_write_checks+0xf0>)
 801d83c:	4805      	ldr	r0, [pc, #20]	; (801d854 <tcp_write_checks+0xe8>)
 801d83e:	f006 fb5f 	bl	8023f00 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801d842:	2300      	movs	r3, #0
}
 801d844:	4618      	mov	r0, r3
 801d846:	3708      	adds	r7, #8
 801d848:	46bd      	mov	sp, r7
 801d84a:	bd80      	pop	{r7, pc}
 801d84c:	08027644 	.word	0x08027644
 801d850:	08027754 	.word	0x08027754
 801d854:	08027698 	.word	0x08027698
 801d858:	08027774 	.word	0x08027774
 801d85c:	080277b0 	.word	0x080277b0

0801d860 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801d860:	b590      	push	{r4, r7, lr}
 801d862:	b09b      	sub	sp, #108	; 0x6c
 801d864:	af04      	add	r7, sp, #16
 801d866:	60f8      	str	r0, [r7, #12]
 801d868:	60b9      	str	r1, [r7, #8]
 801d86a:	4611      	mov	r1, r2
 801d86c:	461a      	mov	r2, r3
 801d86e:	460b      	mov	r3, r1
 801d870:	80fb      	strh	r3, [r7, #6]
 801d872:	4613      	mov	r3, r2
 801d874:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801d876:	2300      	movs	r3, #0
 801d878:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801d87a:	2300      	movs	r3, #0
 801d87c:	653b      	str	r3, [r7, #80]	; 0x50
 801d87e:	2300      	movs	r3, #0
 801d880:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d882:	2300      	movs	r3, #0
 801d884:	64bb      	str	r3, [r7, #72]	; 0x48
 801d886:	2300      	movs	r3, #0
 801d888:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801d88a:	2300      	movs	r3, #0
 801d88c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801d890:	2300      	movs	r3, #0
 801d892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801d896:	2300      	movs	r3, #0
 801d898:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801d89a:	2300      	movs	r3, #0
 801d89c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801d89e:	2300      	movs	r3, #0
 801d8a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801d8a2:	68fb      	ldr	r3, [r7, #12]
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	d109      	bne.n	801d8bc <tcp_write+0x5c>
 801d8a8:	4ba4      	ldr	r3, [pc, #656]	; (801db3c <tcp_write+0x2dc>)
 801d8aa:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801d8ae:	49a4      	ldr	r1, [pc, #656]	; (801db40 <tcp_write+0x2e0>)
 801d8b0:	48a4      	ldr	r0, [pc, #656]	; (801db44 <tcp_write+0x2e4>)
 801d8b2:	f006 fb25 	bl	8023f00 <iprintf>
 801d8b6:	f06f 030f 	mvn.w	r3, #15
 801d8ba:	e32a      	b.n	801df12 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801d8bc:	68fb      	ldr	r3, [r7, #12]
 801d8be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d8c2:	085b      	lsrs	r3, r3, #1
 801d8c4:	b29a      	uxth	r2, r3
 801d8c6:	68fb      	ldr	r3, [r7, #12]
 801d8c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d8ca:	4293      	cmp	r3, r2
 801d8cc:	bf28      	it	cs
 801d8ce:	4613      	movcs	r3, r2
 801d8d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801d8d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	d102      	bne.n	801d8de <tcp_write+0x7e>
 801d8d8:	68fb      	ldr	r3, [r7, #12]
 801d8da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d8dc:	e000      	b.n	801d8e0 <tcp_write+0x80>
 801d8de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d8e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801d8e2:	68bb      	ldr	r3, [r7, #8]
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d109      	bne.n	801d8fc <tcp_write+0x9c>
 801d8e8:	4b94      	ldr	r3, [pc, #592]	; (801db3c <tcp_write+0x2dc>)
 801d8ea:	f240 12ad 	movw	r2, #429	; 0x1ad
 801d8ee:	4996      	ldr	r1, [pc, #600]	; (801db48 <tcp_write+0x2e8>)
 801d8f0:	4894      	ldr	r0, [pc, #592]	; (801db44 <tcp_write+0x2e4>)
 801d8f2:	f006 fb05 	bl	8023f00 <iprintf>
 801d8f6:	f06f 030f 	mvn.w	r3, #15
 801d8fa:	e30a      	b.n	801df12 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801d8fc:	88fb      	ldrh	r3, [r7, #6]
 801d8fe:	4619      	mov	r1, r3
 801d900:	68f8      	ldr	r0, [r7, #12]
 801d902:	f7ff ff33 	bl	801d76c <tcp_write_checks>
 801d906:	4603      	mov	r3, r0
 801d908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801d90c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801d910:	2b00      	cmp	r3, #0
 801d912:	d002      	beq.n	801d91a <tcp_write+0xba>
    return err;
 801d914:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801d918:	e2fb      	b.n	801df12 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d920:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d924:	2300      	movs	r3, #0
 801d926:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801d92a:	68fb      	ldr	r3, [r7, #12]
 801d92c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d92e:	2b00      	cmp	r3, #0
 801d930:	f000 80f6 	beq.w	801db20 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d934:	68fb      	ldr	r3, [r7, #12]
 801d936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d938:	653b      	str	r3, [r7, #80]	; 0x50
 801d93a:	e002      	b.n	801d942 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801d93c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d93e:	681b      	ldr	r3, [r3, #0]
 801d940:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	2b00      	cmp	r3, #0
 801d948:	d1f8      	bne.n	801d93c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801d94a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d94c:	7a9b      	ldrb	r3, [r3, #10]
 801d94e:	009b      	lsls	r3, r3, #2
 801d950:	b29b      	uxth	r3, r3
 801d952:	f003 0304 	and.w	r3, r3, #4
 801d956:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801d958:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d95a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d95c:	891b      	ldrh	r3, [r3, #8]
 801d95e:	4619      	mov	r1, r3
 801d960:	8c3b      	ldrh	r3, [r7, #32]
 801d962:	440b      	add	r3, r1
 801d964:	429a      	cmp	r2, r3
 801d966:	da06      	bge.n	801d976 <tcp_write+0x116>
 801d968:	4b74      	ldr	r3, [pc, #464]	; (801db3c <tcp_write+0x2dc>)
 801d96a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801d96e:	4977      	ldr	r1, [pc, #476]	; (801db4c <tcp_write+0x2ec>)
 801d970:	4874      	ldr	r0, [pc, #464]	; (801db44 <tcp_write+0x2e4>)
 801d972:	f006 fac5 	bl	8023f00 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801d976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d978:	891a      	ldrh	r2, [r3, #8]
 801d97a:	8c3b      	ldrh	r3, [r7, #32]
 801d97c:	4413      	add	r3, r2
 801d97e:	b29b      	uxth	r3, r3
 801d980:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d982:	1ad3      	subs	r3, r2, r3
 801d984:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d98c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801d98e:	8a7b      	ldrh	r3, [r7, #18]
 801d990:	2b00      	cmp	r3, #0
 801d992:	d026      	beq.n	801d9e2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801d994:	8a7b      	ldrh	r3, [r7, #18]
 801d996:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d998:	429a      	cmp	r2, r3
 801d99a:	d206      	bcs.n	801d9aa <tcp_write+0x14a>
 801d99c:	4b67      	ldr	r3, [pc, #412]	; (801db3c <tcp_write+0x2dc>)
 801d99e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801d9a2:	496b      	ldr	r1, [pc, #428]	; (801db50 <tcp_write+0x2f0>)
 801d9a4:	4867      	ldr	r0, [pc, #412]	; (801db44 <tcp_write+0x2e4>)
 801d9a6:	f006 faab 	bl	8023f00 <iprintf>
      seg = last_unsent;
 801d9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d9ac:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801d9ae:	8a7b      	ldrh	r3, [r7, #18]
 801d9b0:	88fa      	ldrh	r2, [r7, #6]
 801d9b2:	4293      	cmp	r3, r2
 801d9b4:	bf28      	it	cs
 801d9b6:	4613      	movcs	r3, r2
 801d9b8:	b29b      	uxth	r3, r3
 801d9ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d9bc:	4293      	cmp	r3, r2
 801d9be:	bf28      	it	cs
 801d9c0:	4613      	movcs	r3, r2
 801d9c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801d9c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d9c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d9ca:	4413      	add	r3, r2
 801d9cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801d9d0:	8a7a      	ldrh	r2, [r7, #18]
 801d9d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d9d4:	1ad3      	subs	r3, r2, r3
 801d9d6:	b29b      	uxth	r3, r3
 801d9d8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801d9da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d9dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d9de:	1ad3      	subs	r3, r2, r3
 801d9e0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801d9e2:	8a7b      	ldrh	r3, [r7, #18]
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	d00b      	beq.n	801da00 <tcp_write+0x1a0>
 801d9e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d9ec:	88fb      	ldrh	r3, [r7, #6]
 801d9ee:	429a      	cmp	r2, r3
 801d9f0:	d006      	beq.n	801da00 <tcp_write+0x1a0>
 801d9f2:	4b52      	ldr	r3, [pc, #328]	; (801db3c <tcp_write+0x2dc>)
 801d9f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d9f8:	4956      	ldr	r1, [pc, #344]	; (801db54 <tcp_write+0x2f4>)
 801d9fa:	4852      	ldr	r0, [pc, #328]	; (801db44 <tcp_write+0x2e4>)
 801d9fc:	f006 fa80 	bl	8023f00 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801da00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801da04:	88fb      	ldrh	r3, [r7, #6]
 801da06:	429a      	cmp	r2, r3
 801da08:	f080 8167 	bcs.w	801dcda <tcp_write+0x47a>
 801da0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801da0e:	2b00      	cmp	r3, #0
 801da10:	f000 8163 	beq.w	801dcda <tcp_write+0x47a>
 801da14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da16:	891b      	ldrh	r3, [r3, #8]
 801da18:	2b00      	cmp	r3, #0
 801da1a:	f000 815e 	beq.w	801dcda <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801da1e:	88fa      	ldrh	r2, [r7, #6]
 801da20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801da24:	1ad2      	subs	r2, r2, r3
 801da26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801da28:	4293      	cmp	r3, r2
 801da2a:	bfa8      	it	ge
 801da2c:	4613      	movge	r3, r2
 801da2e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801da30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da32:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801da34:	797b      	ldrb	r3, [r7, #5]
 801da36:	f003 0301 	and.w	r3, r3, #1
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	d027      	beq.n	801da8e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801da3e:	f107 0012 	add.w	r0, r7, #18
 801da42:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801da44:	8bf9      	ldrh	r1, [r7, #30]
 801da46:	2301      	movs	r3, #1
 801da48:	9302      	str	r3, [sp, #8]
 801da4a:	797b      	ldrb	r3, [r7, #5]
 801da4c:	9301      	str	r3, [sp, #4]
 801da4e:	68fb      	ldr	r3, [r7, #12]
 801da50:	9300      	str	r3, [sp, #0]
 801da52:	4603      	mov	r3, r0
 801da54:	2000      	movs	r0, #0
 801da56:	f7ff fe0f 	bl	801d678 <tcp_pbuf_prealloc>
 801da5a:	6578      	str	r0, [r7, #84]	; 0x54
 801da5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801da5e:	2b00      	cmp	r3, #0
 801da60:	f000 8225 	beq.w	801deae <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801da64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801da66:	6858      	ldr	r0, [r3, #4]
 801da68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801da6c:	68ba      	ldr	r2, [r7, #8]
 801da6e:	4413      	add	r3, r2
 801da70:	8bfa      	ldrh	r2, [r7, #30]
 801da72:	4619      	mov	r1, r3
 801da74:	f006 f934 	bl	8023ce0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801da78:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801da7a:	f7fb f897 	bl	8018bac <pbuf_clen>
 801da7e:	4603      	mov	r3, r0
 801da80:	461a      	mov	r2, r3
 801da82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801da86:	4413      	add	r3, r2
 801da88:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801da8c:	e041      	b.n	801db12 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801da8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da90:	685b      	ldr	r3, [r3, #4]
 801da92:	637b      	str	r3, [r7, #52]	; 0x34
 801da94:	e002      	b.n	801da9c <tcp_write+0x23c>
 801da96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da98:	681b      	ldr	r3, [r3, #0]
 801da9a:	637b      	str	r3, [r7, #52]	; 0x34
 801da9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da9e:	681b      	ldr	r3, [r3, #0]
 801daa0:	2b00      	cmp	r3, #0
 801daa2:	d1f8      	bne.n	801da96 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801daa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801daa6:	7b1b      	ldrb	r3, [r3, #12]
 801daa8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801daac:	2b00      	cmp	r3, #0
 801daae:	d115      	bne.n	801dadc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801dab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dab2:	685b      	ldr	r3, [r3, #4]
 801dab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dab6:	8952      	ldrh	r2, [r2, #10]
 801dab8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801daba:	68ba      	ldr	r2, [r7, #8]
 801dabc:	429a      	cmp	r2, r3
 801dabe:	d10d      	bne.n	801dadc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801dac0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	d006      	beq.n	801dad6 <tcp_write+0x276>
 801dac8:	4b1c      	ldr	r3, [pc, #112]	; (801db3c <tcp_write+0x2dc>)
 801daca:	f240 2231 	movw	r2, #561	; 0x231
 801dace:	4922      	ldr	r1, [pc, #136]	; (801db58 <tcp_write+0x2f8>)
 801dad0:	481c      	ldr	r0, [pc, #112]	; (801db44 <tcp_write+0x2e4>)
 801dad2:	f006 fa15 	bl	8023f00 <iprintf>
          extendlen = seglen;
 801dad6:	8bfb      	ldrh	r3, [r7, #30]
 801dad8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801dada:	e01a      	b.n	801db12 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801dadc:	8bfb      	ldrh	r3, [r7, #30]
 801dade:	2201      	movs	r2, #1
 801dae0:	4619      	mov	r1, r3
 801dae2:	2000      	movs	r0, #0
 801dae4:	f7fa fcf0 	bl	80184c8 <pbuf_alloc>
 801dae8:	6578      	str	r0, [r7, #84]	; 0x54
 801daea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801daec:	2b00      	cmp	r3, #0
 801daee:	f000 81e0 	beq.w	801deb2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801daf2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801daf6:	68ba      	ldr	r2, [r7, #8]
 801daf8:	441a      	add	r2, r3
 801dafa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dafc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801dafe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801db00:	f7fb f854 	bl	8018bac <pbuf_clen>
 801db04:	4603      	mov	r3, r0
 801db06:	461a      	mov	r2, r3
 801db08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801db0c:	4413      	add	r3, r2
 801db0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801db12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801db16:	8bfb      	ldrh	r3, [r7, #30]
 801db18:	4413      	add	r3, r2
 801db1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801db1e:	e0dc      	b.n	801dcda <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801db26:	2b00      	cmp	r3, #0
 801db28:	f000 80d7 	beq.w	801dcda <tcp_write+0x47a>
 801db2c:	4b03      	ldr	r3, [pc, #12]	; (801db3c <tcp_write+0x2dc>)
 801db2e:	f240 224a 	movw	r2, #586	; 0x24a
 801db32:	490a      	ldr	r1, [pc, #40]	; (801db5c <tcp_write+0x2fc>)
 801db34:	4803      	ldr	r0, [pc, #12]	; (801db44 <tcp_write+0x2e4>)
 801db36:	f006 f9e3 	bl	8023f00 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801db3a:	e0ce      	b.n	801dcda <tcp_write+0x47a>
 801db3c:	08027644 	.word	0x08027644
 801db40:	080277e4 	.word	0x080277e4
 801db44:	08027698 	.word	0x08027698
 801db48:	080277fc 	.word	0x080277fc
 801db4c:	08027830 	.word	0x08027830
 801db50:	08027848 	.word	0x08027848
 801db54:	08027868 	.word	0x08027868
 801db58:	08027888 	.word	0x08027888
 801db5c:	080278b4 	.word	0x080278b4
    struct pbuf *p;
    u16_t left = len - pos;
 801db60:	88fa      	ldrh	r2, [r7, #6]
 801db62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801db66:	1ad3      	subs	r3, r2, r3
 801db68:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801db6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801db6e:	b29b      	uxth	r3, r3
 801db70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801db72:	1ad3      	subs	r3, r2, r3
 801db74:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801db76:	8b7a      	ldrh	r2, [r7, #26]
 801db78:	8bbb      	ldrh	r3, [r7, #28]
 801db7a:	4293      	cmp	r3, r2
 801db7c:	bf28      	it	cs
 801db7e:	4613      	movcs	r3, r2
 801db80:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801db82:	797b      	ldrb	r3, [r7, #5]
 801db84:	f003 0301 	and.w	r3, r3, #1
 801db88:	2b00      	cmp	r3, #0
 801db8a:	d036      	beq.n	801dbfa <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801db8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801db90:	b29a      	uxth	r2, r3
 801db92:	8b3b      	ldrh	r3, [r7, #24]
 801db94:	4413      	add	r3, r2
 801db96:	b299      	uxth	r1, r3
 801db98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801db9a:	2b00      	cmp	r3, #0
 801db9c:	bf0c      	ite	eq
 801db9e:	2301      	moveq	r3, #1
 801dba0:	2300      	movne	r3, #0
 801dba2:	b2db      	uxtb	r3, r3
 801dba4:	f107 0012 	add.w	r0, r7, #18
 801dba8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801dbaa:	9302      	str	r3, [sp, #8]
 801dbac:	797b      	ldrb	r3, [r7, #5]
 801dbae:	9301      	str	r3, [sp, #4]
 801dbb0:	68fb      	ldr	r3, [r7, #12]
 801dbb2:	9300      	str	r3, [sp, #0]
 801dbb4:	4603      	mov	r3, r0
 801dbb6:	2036      	movs	r0, #54	; 0x36
 801dbb8:	f7ff fd5e 	bl	801d678 <tcp_pbuf_prealloc>
 801dbbc:	6338      	str	r0, [r7, #48]	; 0x30
 801dbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbc0:	2b00      	cmp	r3, #0
 801dbc2:	f000 8178 	beq.w	801deb6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801dbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbc8:	895b      	ldrh	r3, [r3, #10]
 801dbca:	8b3a      	ldrh	r2, [r7, #24]
 801dbcc:	429a      	cmp	r2, r3
 801dbce:	d906      	bls.n	801dbde <tcp_write+0x37e>
 801dbd0:	4b8c      	ldr	r3, [pc, #560]	; (801de04 <tcp_write+0x5a4>)
 801dbd2:	f240 2266 	movw	r2, #614	; 0x266
 801dbd6:	498c      	ldr	r1, [pc, #560]	; (801de08 <tcp_write+0x5a8>)
 801dbd8:	488c      	ldr	r0, [pc, #560]	; (801de0c <tcp_write+0x5ac>)
 801dbda:	f006 f991 	bl	8023f00 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801dbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbe0:	685a      	ldr	r2, [r3, #4]
 801dbe2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801dbe6:	18d0      	adds	r0, r2, r3
 801dbe8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dbec:	68ba      	ldr	r2, [r7, #8]
 801dbee:	4413      	add	r3, r2
 801dbf0:	8b3a      	ldrh	r2, [r7, #24]
 801dbf2:	4619      	mov	r1, r3
 801dbf4:	f006 f874 	bl	8023ce0 <memcpy>
 801dbf8:	e02f      	b.n	801dc5a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801dbfa:	8a7b      	ldrh	r3, [r7, #18]
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	d006      	beq.n	801dc0e <tcp_write+0x3ae>
 801dc00:	4b80      	ldr	r3, [pc, #512]	; (801de04 <tcp_write+0x5a4>)
 801dc02:	f240 2271 	movw	r2, #625	; 0x271
 801dc06:	4982      	ldr	r1, [pc, #520]	; (801de10 <tcp_write+0x5b0>)
 801dc08:	4880      	ldr	r0, [pc, #512]	; (801de0c <tcp_write+0x5ac>)
 801dc0a:	f006 f979 	bl	8023f00 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801dc0e:	8b3b      	ldrh	r3, [r7, #24]
 801dc10:	2201      	movs	r2, #1
 801dc12:	4619      	mov	r1, r3
 801dc14:	2036      	movs	r0, #54	; 0x36
 801dc16:	f7fa fc57 	bl	80184c8 <pbuf_alloc>
 801dc1a:	6178      	str	r0, [r7, #20]
 801dc1c:	697b      	ldr	r3, [r7, #20]
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	f000 814b 	beq.w	801deba <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801dc24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dc28:	68ba      	ldr	r2, [r7, #8]
 801dc2a:	441a      	add	r2, r3
 801dc2c:	697b      	ldr	r3, [r7, #20]
 801dc2e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801dc30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801dc34:	b29b      	uxth	r3, r3
 801dc36:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dc3a:	4619      	mov	r1, r3
 801dc3c:	2036      	movs	r0, #54	; 0x36
 801dc3e:	f7fa fc43 	bl	80184c8 <pbuf_alloc>
 801dc42:	6338      	str	r0, [r7, #48]	; 0x30
 801dc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d103      	bne.n	801dc52 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801dc4a:	6978      	ldr	r0, [r7, #20]
 801dc4c:	f7fa ff20 	bl	8018a90 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801dc50:	e136      	b.n	801dec0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801dc52:	6979      	ldr	r1, [r7, #20]
 801dc54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dc56:	f7fa ffe9 	bl	8018c2c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801dc5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dc5c:	f7fa ffa6 	bl	8018bac <pbuf_clen>
 801dc60:	4603      	mov	r3, r0
 801dc62:	461a      	mov	r2, r3
 801dc64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801dc68:	4413      	add	r3, r2
 801dc6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801dc6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801dc72:	2b09      	cmp	r3, #9
 801dc74:	d903      	bls.n	801dc7e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801dc76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dc78:	f7fa ff0a 	bl	8018a90 <pbuf_free>
      goto memerr;
 801dc7c:	e120      	b.n	801dec0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801dc7e:	68fb      	ldr	r3, [r7, #12]
 801dc80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801dc82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dc86:	441a      	add	r2, r3
 801dc88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dc8c:	9300      	str	r3, [sp, #0]
 801dc8e:	4613      	mov	r3, r2
 801dc90:	2200      	movs	r2, #0
 801dc92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dc94:	68f8      	ldr	r0, [r7, #12]
 801dc96:	f7ff fc51 	bl	801d53c <tcp_create_segment>
 801dc9a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801dc9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dc9e:	2b00      	cmp	r3, #0
 801dca0:	f000 810d 	beq.w	801debe <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801dca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	d102      	bne.n	801dcb0 <tcp_write+0x450>
      queue = seg;
 801dcaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dcac:	647b      	str	r3, [r7, #68]	; 0x44
 801dcae:	e00c      	b.n	801dcca <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801dcb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d106      	bne.n	801dcc4 <tcp_write+0x464>
 801dcb6:	4b53      	ldr	r3, [pc, #332]	; (801de04 <tcp_write+0x5a4>)
 801dcb8:	f240 22ab 	movw	r2, #683	; 0x2ab
 801dcbc:	4955      	ldr	r1, [pc, #340]	; (801de14 <tcp_write+0x5b4>)
 801dcbe:	4853      	ldr	r0, [pc, #332]	; (801de0c <tcp_write+0x5ac>)
 801dcc0:	f006 f91e 	bl	8023f00 <iprintf>
      prev_seg->next = seg;
 801dcc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dcc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801dcc8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801dcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dccc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801dcce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dcd2:	8b3b      	ldrh	r3, [r7, #24]
 801dcd4:	4413      	add	r3, r2
 801dcd6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801dcda:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dcde:	88fb      	ldrh	r3, [r7, #6]
 801dce0:	429a      	cmp	r2, r3
 801dce2:	f4ff af3d 	bcc.w	801db60 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801dce6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	d02c      	beq.n	801dd46 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801dcec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dcee:	685b      	ldr	r3, [r3, #4]
 801dcf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dcf2:	e01e      	b.n	801dd32 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801dcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dcf6:	891a      	ldrh	r2, [r3, #8]
 801dcf8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dcfa:	4413      	add	r3, r2
 801dcfc:	b29a      	uxth	r2, r3
 801dcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd00:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801dd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	2b00      	cmp	r3, #0
 801dd08:	d110      	bne.n	801dd2c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801dd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd0c:	685b      	ldr	r3, [r3, #4]
 801dd0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dd10:	8952      	ldrh	r2, [r2, #10]
 801dd12:	4413      	add	r3, r2
 801dd14:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801dd16:	68b9      	ldr	r1, [r7, #8]
 801dd18:	4618      	mov	r0, r3
 801dd1a:	f005 ffe1 	bl	8023ce0 <memcpy>
        p->len += oversize_used;
 801dd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd20:	895a      	ldrh	r2, [r3, #10]
 801dd22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dd24:	4413      	add	r3, r2
 801dd26:	b29a      	uxth	r2, r3
 801dd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd2a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801dd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd2e:	681b      	ldr	r3, [r3, #0]
 801dd30:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd34:	2b00      	cmp	r3, #0
 801dd36:	d1dd      	bne.n	801dcf4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801dd38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dd3a:	891a      	ldrh	r2, [r3, #8]
 801dd3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dd3e:	4413      	add	r3, r2
 801dd40:	b29a      	uxth	r2, r3
 801dd42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dd44:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801dd46:	8a7a      	ldrh	r2, [r7, #18]
 801dd48:	68fb      	ldr	r3, [r7, #12]
 801dd4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801dd4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d018      	beq.n	801dd86 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801dd54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	d106      	bne.n	801dd68 <tcp_write+0x508>
 801dd5a:	4b2a      	ldr	r3, [pc, #168]	; (801de04 <tcp_write+0x5a4>)
 801dd5c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801dd60:	492d      	ldr	r1, [pc, #180]	; (801de18 <tcp_write+0x5b8>)
 801dd62:	482a      	ldr	r0, [pc, #168]	; (801de0c <tcp_write+0x5ac>)
 801dd64:	f006 f8cc 	bl	8023f00 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801dd68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dd6a:	685b      	ldr	r3, [r3, #4]
 801dd6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801dd6e:	4618      	mov	r0, r3
 801dd70:	f7fa ff5c 	bl	8018c2c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801dd74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dd76:	891a      	ldrh	r2, [r3, #8]
 801dd78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dd7a:	891b      	ldrh	r3, [r3, #8]
 801dd7c:	4413      	add	r3, r2
 801dd7e:	b29a      	uxth	r2, r3
 801dd80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dd82:	811a      	strh	r2, [r3, #8]
 801dd84:	e037      	b.n	801ddf6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801dd86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	d034      	beq.n	801ddf6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801dd8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d003      	beq.n	801dd9a <tcp_write+0x53a>
 801dd92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dd94:	685b      	ldr	r3, [r3, #4]
 801dd96:	2b00      	cmp	r3, #0
 801dd98:	d106      	bne.n	801dda8 <tcp_write+0x548>
 801dd9a:	4b1a      	ldr	r3, [pc, #104]	; (801de04 <tcp_write+0x5a4>)
 801dd9c:	f240 22e6 	movw	r2, #742	; 0x2e6
 801dda0:	491e      	ldr	r1, [pc, #120]	; (801de1c <tcp_write+0x5bc>)
 801dda2:	481a      	ldr	r0, [pc, #104]	; (801de0c <tcp_write+0x5ac>)
 801dda4:	f006 f8ac 	bl	8023f00 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dda8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ddaa:	685b      	ldr	r3, [r3, #4]
 801ddac:	62bb      	str	r3, [r7, #40]	; 0x28
 801ddae:	e009      	b.n	801ddc4 <tcp_write+0x564>
      p->tot_len += extendlen;
 801ddb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ddb2:	891a      	ldrh	r2, [r3, #8]
 801ddb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ddb6:	4413      	add	r3, r2
 801ddb8:	b29a      	uxth	r2, r3
 801ddba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ddbc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ddbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ddc0:	681b      	ldr	r3, [r3, #0]
 801ddc2:	62bb      	str	r3, [r7, #40]	; 0x28
 801ddc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ddc6:	681b      	ldr	r3, [r3, #0]
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d1f1      	bne.n	801ddb0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801ddcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ddce:	891a      	ldrh	r2, [r3, #8]
 801ddd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ddd2:	4413      	add	r3, r2
 801ddd4:	b29a      	uxth	r2, r3
 801ddd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ddd8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801ddda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dddc:	895a      	ldrh	r2, [r3, #10]
 801ddde:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dde0:	4413      	add	r3, r2
 801dde2:	b29a      	uxth	r2, r3
 801dde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dde6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801dde8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ddea:	891a      	ldrh	r2, [r3, #8]
 801ddec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ddee:	4413      	add	r3, r2
 801ddf0:	b29a      	uxth	r2, r3
 801ddf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ddf4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801ddf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	d111      	bne.n	801de20 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801ddfc:	68fb      	ldr	r3, [r7, #12]
 801ddfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801de00:	66da      	str	r2, [r3, #108]	; 0x6c
 801de02:	e010      	b.n	801de26 <tcp_write+0x5c6>
 801de04:	08027644 	.word	0x08027644
 801de08:	080278e4 	.word	0x080278e4
 801de0c:	08027698 	.word	0x08027698
 801de10:	08027924 	.word	0x08027924
 801de14:	08027934 	.word	0x08027934
 801de18:	08027948 	.word	0x08027948
 801de1c:	08027980 	.word	0x08027980
  } else {
    last_unsent->next = queue;
 801de20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801de22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801de24:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801de26:	68fb      	ldr	r3, [r7, #12]
 801de28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801de2a:	88fb      	ldrh	r3, [r7, #6]
 801de2c:	441a      	add	r2, r3
 801de2e:	68fb      	ldr	r3, [r7, #12]
 801de30:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801de32:	68fb      	ldr	r3, [r7, #12]
 801de34:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801de38:	88fb      	ldrh	r3, [r7, #6]
 801de3a:	1ad3      	subs	r3, r2, r3
 801de3c:	b29a      	uxth	r2, r3
 801de3e:	68fb      	ldr	r3, [r7, #12]
 801de40:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801de4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801de54:	2b00      	cmp	r3, #0
 801de56:	d00e      	beq.n	801de76 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801de58:	68fb      	ldr	r3, [r7, #12]
 801de5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801de5c:	2b00      	cmp	r3, #0
 801de5e:	d10a      	bne.n	801de76 <tcp_write+0x616>
 801de60:	68fb      	ldr	r3, [r7, #12]
 801de62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801de64:	2b00      	cmp	r3, #0
 801de66:	d106      	bne.n	801de76 <tcp_write+0x616>
 801de68:	4b2c      	ldr	r3, [pc, #176]	; (801df1c <tcp_write+0x6bc>)
 801de6a:	f240 3212 	movw	r2, #786	; 0x312
 801de6e:	492c      	ldr	r1, [pc, #176]	; (801df20 <tcp_write+0x6c0>)
 801de70:	482c      	ldr	r0, [pc, #176]	; (801df24 <tcp_write+0x6c4>)
 801de72:	f006 f845 	bl	8023f00 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801de76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801de78:	2b00      	cmp	r3, #0
 801de7a:	d016      	beq.n	801deaa <tcp_write+0x64a>
 801de7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801de7e:	68db      	ldr	r3, [r3, #12]
 801de80:	2b00      	cmp	r3, #0
 801de82:	d012      	beq.n	801deaa <tcp_write+0x64a>
 801de84:	797b      	ldrb	r3, [r7, #5]
 801de86:	f003 0302 	and.w	r3, r3, #2
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d10d      	bne.n	801deaa <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801de8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801de90:	68db      	ldr	r3, [r3, #12]
 801de92:	899b      	ldrh	r3, [r3, #12]
 801de94:	b29c      	uxth	r4, r3
 801de96:	2008      	movs	r0, #8
 801de98:	f7f9 fa08 	bl	80172ac <lwip_htons>
 801de9c:	4603      	mov	r3, r0
 801de9e:	461a      	mov	r2, r3
 801dea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dea2:	68db      	ldr	r3, [r3, #12]
 801dea4:	4322      	orrs	r2, r4
 801dea6:	b292      	uxth	r2, r2
 801dea8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801deaa:	2300      	movs	r3, #0
 801deac:	e031      	b.n	801df12 <tcp_write+0x6b2>
          goto memerr;
 801deae:	bf00      	nop
 801deb0:	e006      	b.n	801dec0 <tcp_write+0x660>
            goto memerr;
 801deb2:	bf00      	nop
 801deb4:	e004      	b.n	801dec0 <tcp_write+0x660>
        goto memerr;
 801deb6:	bf00      	nop
 801deb8:	e002      	b.n	801dec0 <tcp_write+0x660>
        goto memerr;
 801deba:	bf00      	nop
 801debc:	e000      	b.n	801dec0 <tcp_write+0x660>
      goto memerr;
 801debe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dec0:	68fb      	ldr	r3, [r7, #12]
 801dec2:	8b5b      	ldrh	r3, [r3, #26]
 801dec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dec8:	b29a      	uxth	r2, r3
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801dece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	d002      	beq.n	801deda <tcp_write+0x67a>
    pbuf_free(concat_p);
 801ded4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ded6:	f7fa fddb 	bl	8018a90 <pbuf_free>
  }
  if (queue != NULL) {
 801deda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dedc:	2b00      	cmp	r3, #0
 801dede:	d002      	beq.n	801dee6 <tcp_write+0x686>
    tcp_segs_free(queue);
 801dee0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801dee2:	f7fc fb6b 	bl	801a5bc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801dee6:	68fb      	ldr	r3, [r7, #12]
 801dee8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801deec:	2b00      	cmp	r3, #0
 801deee:	d00e      	beq.n	801df0e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801def0:	68fb      	ldr	r3, [r7, #12]
 801def2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801def4:	2b00      	cmp	r3, #0
 801def6:	d10a      	bne.n	801df0e <tcp_write+0x6ae>
 801def8:	68fb      	ldr	r3, [r7, #12]
 801defa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801defc:	2b00      	cmp	r3, #0
 801defe:	d106      	bne.n	801df0e <tcp_write+0x6ae>
 801df00:	4b06      	ldr	r3, [pc, #24]	; (801df1c <tcp_write+0x6bc>)
 801df02:	f240 3227 	movw	r2, #807	; 0x327
 801df06:	4906      	ldr	r1, [pc, #24]	; (801df20 <tcp_write+0x6c0>)
 801df08:	4806      	ldr	r0, [pc, #24]	; (801df24 <tcp_write+0x6c4>)
 801df0a:	f005 fff9 	bl	8023f00 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801df0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801df12:	4618      	mov	r0, r3
 801df14:	375c      	adds	r7, #92	; 0x5c
 801df16:	46bd      	mov	sp, r7
 801df18:	bd90      	pop	{r4, r7, pc}
 801df1a:	bf00      	nop
 801df1c:	08027644 	.word	0x08027644
 801df20:	080279b8 	.word	0x080279b8
 801df24:	08027698 	.word	0x08027698

0801df28 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801df28:	b590      	push	{r4, r7, lr}
 801df2a:	b08b      	sub	sp, #44	; 0x2c
 801df2c:	af02      	add	r7, sp, #8
 801df2e:	6078      	str	r0, [r7, #4]
 801df30:	460b      	mov	r3, r1
 801df32:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801df34:	2300      	movs	r3, #0
 801df36:	61fb      	str	r3, [r7, #28]
 801df38:	2300      	movs	r3, #0
 801df3a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801df3c:	2300      	movs	r3, #0
 801df3e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801df40:	687b      	ldr	r3, [r7, #4]
 801df42:	2b00      	cmp	r3, #0
 801df44:	d106      	bne.n	801df54 <tcp_split_unsent_seg+0x2c>
 801df46:	4b95      	ldr	r3, [pc, #596]	; (801e19c <tcp_split_unsent_seg+0x274>)
 801df48:	f240 324b 	movw	r2, #843	; 0x34b
 801df4c:	4994      	ldr	r1, [pc, #592]	; (801e1a0 <tcp_split_unsent_seg+0x278>)
 801df4e:	4895      	ldr	r0, [pc, #596]	; (801e1a4 <tcp_split_unsent_seg+0x27c>)
 801df50:	f005 ffd6 	bl	8023f00 <iprintf>

  useg = pcb->unsent;
 801df54:	687b      	ldr	r3, [r7, #4]
 801df56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801df58:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801df5a:	697b      	ldr	r3, [r7, #20]
 801df5c:	2b00      	cmp	r3, #0
 801df5e:	d102      	bne.n	801df66 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801df60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801df64:	e116      	b.n	801e194 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801df66:	887b      	ldrh	r3, [r7, #2]
 801df68:	2b00      	cmp	r3, #0
 801df6a:	d109      	bne.n	801df80 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801df6c:	4b8b      	ldr	r3, [pc, #556]	; (801e19c <tcp_split_unsent_seg+0x274>)
 801df6e:	f240 3253 	movw	r2, #851	; 0x353
 801df72:	498d      	ldr	r1, [pc, #564]	; (801e1a8 <tcp_split_unsent_seg+0x280>)
 801df74:	488b      	ldr	r0, [pc, #556]	; (801e1a4 <tcp_split_unsent_seg+0x27c>)
 801df76:	f005 ffc3 	bl	8023f00 <iprintf>
    return ERR_VAL;
 801df7a:	f06f 0305 	mvn.w	r3, #5
 801df7e:	e109      	b.n	801e194 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801df80:	697b      	ldr	r3, [r7, #20]
 801df82:	891b      	ldrh	r3, [r3, #8]
 801df84:	887a      	ldrh	r2, [r7, #2]
 801df86:	429a      	cmp	r2, r3
 801df88:	d301      	bcc.n	801df8e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801df8a:	2300      	movs	r3, #0
 801df8c:	e102      	b.n	801e194 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801df8e:	687b      	ldr	r3, [r7, #4]
 801df90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801df92:	887a      	ldrh	r2, [r7, #2]
 801df94:	429a      	cmp	r2, r3
 801df96:	d906      	bls.n	801dfa6 <tcp_split_unsent_seg+0x7e>
 801df98:	4b80      	ldr	r3, [pc, #512]	; (801e19c <tcp_split_unsent_seg+0x274>)
 801df9a:	f240 325b 	movw	r2, #859	; 0x35b
 801df9e:	4983      	ldr	r1, [pc, #524]	; (801e1ac <tcp_split_unsent_seg+0x284>)
 801dfa0:	4880      	ldr	r0, [pc, #512]	; (801e1a4 <tcp_split_unsent_seg+0x27c>)
 801dfa2:	f005 ffad 	bl	8023f00 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801dfa6:	697b      	ldr	r3, [r7, #20]
 801dfa8:	891b      	ldrh	r3, [r3, #8]
 801dfaa:	2b00      	cmp	r3, #0
 801dfac:	d106      	bne.n	801dfbc <tcp_split_unsent_seg+0x94>
 801dfae:	4b7b      	ldr	r3, [pc, #492]	; (801e19c <tcp_split_unsent_seg+0x274>)
 801dfb0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801dfb4:	497e      	ldr	r1, [pc, #504]	; (801e1b0 <tcp_split_unsent_seg+0x288>)
 801dfb6:	487b      	ldr	r0, [pc, #492]	; (801e1a4 <tcp_split_unsent_seg+0x27c>)
 801dfb8:	f005 ffa2 	bl	8023f00 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801dfbc:	697b      	ldr	r3, [r7, #20]
 801dfbe:	7a9b      	ldrb	r3, [r3, #10]
 801dfc0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801dfc2:	7bfb      	ldrb	r3, [r7, #15]
 801dfc4:	009b      	lsls	r3, r3, #2
 801dfc6:	b2db      	uxtb	r3, r3
 801dfc8:	f003 0304 	and.w	r3, r3, #4
 801dfcc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801dfce:	697b      	ldr	r3, [r7, #20]
 801dfd0:	891a      	ldrh	r2, [r3, #8]
 801dfd2:	887b      	ldrh	r3, [r7, #2]
 801dfd4:	1ad3      	subs	r3, r2, r3
 801dfd6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801dfd8:	7bbb      	ldrb	r3, [r7, #14]
 801dfda:	b29a      	uxth	r2, r3
 801dfdc:	89bb      	ldrh	r3, [r7, #12]
 801dfde:	4413      	add	r3, r2
 801dfe0:	b29b      	uxth	r3, r3
 801dfe2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dfe6:	4619      	mov	r1, r3
 801dfe8:	2036      	movs	r0, #54	; 0x36
 801dfea:	f7fa fa6d 	bl	80184c8 <pbuf_alloc>
 801dfee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801dff0:	693b      	ldr	r3, [r7, #16]
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	f000 80b7 	beq.w	801e166 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801dff8:	697b      	ldr	r3, [r7, #20]
 801dffa:	685b      	ldr	r3, [r3, #4]
 801dffc:	891a      	ldrh	r2, [r3, #8]
 801dffe:	697b      	ldr	r3, [r7, #20]
 801e000:	891b      	ldrh	r3, [r3, #8]
 801e002:	1ad3      	subs	r3, r2, r3
 801e004:	b29a      	uxth	r2, r3
 801e006:	887b      	ldrh	r3, [r7, #2]
 801e008:	4413      	add	r3, r2
 801e00a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801e00c:	697b      	ldr	r3, [r7, #20]
 801e00e:	6858      	ldr	r0, [r3, #4]
 801e010:	693b      	ldr	r3, [r7, #16]
 801e012:	685a      	ldr	r2, [r3, #4]
 801e014:	7bbb      	ldrb	r3, [r7, #14]
 801e016:	18d1      	adds	r1, r2, r3
 801e018:	897b      	ldrh	r3, [r7, #10]
 801e01a:	89ba      	ldrh	r2, [r7, #12]
 801e01c:	f7fa ff3e 	bl	8018e9c <pbuf_copy_partial>
 801e020:	4603      	mov	r3, r0
 801e022:	461a      	mov	r2, r3
 801e024:	89bb      	ldrh	r3, [r7, #12]
 801e026:	4293      	cmp	r3, r2
 801e028:	f040 809f 	bne.w	801e16a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801e02c:	697b      	ldr	r3, [r7, #20]
 801e02e:	68db      	ldr	r3, [r3, #12]
 801e030:	899b      	ldrh	r3, [r3, #12]
 801e032:	b29b      	uxth	r3, r3
 801e034:	4618      	mov	r0, r3
 801e036:	f7f9 f939 	bl	80172ac <lwip_htons>
 801e03a:	4603      	mov	r3, r0
 801e03c:	b2db      	uxtb	r3, r3
 801e03e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e042:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801e044:	2300      	movs	r3, #0
 801e046:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801e048:	7efb      	ldrb	r3, [r7, #27]
 801e04a:	f003 0308 	and.w	r3, r3, #8
 801e04e:	2b00      	cmp	r3, #0
 801e050:	d007      	beq.n	801e062 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801e052:	7efb      	ldrb	r3, [r7, #27]
 801e054:	f023 0308 	bic.w	r3, r3, #8
 801e058:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801e05a:	7ebb      	ldrb	r3, [r7, #26]
 801e05c:	f043 0308 	orr.w	r3, r3, #8
 801e060:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801e062:	7efb      	ldrb	r3, [r7, #27]
 801e064:	f003 0301 	and.w	r3, r3, #1
 801e068:	2b00      	cmp	r3, #0
 801e06a:	d007      	beq.n	801e07c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801e06c:	7efb      	ldrb	r3, [r7, #27]
 801e06e:	f023 0301 	bic.w	r3, r3, #1
 801e072:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801e074:	7ebb      	ldrb	r3, [r7, #26]
 801e076:	f043 0301 	orr.w	r3, r3, #1
 801e07a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801e07c:	697b      	ldr	r3, [r7, #20]
 801e07e:	68db      	ldr	r3, [r3, #12]
 801e080:	685b      	ldr	r3, [r3, #4]
 801e082:	4618      	mov	r0, r3
 801e084:	f7f9 f927 	bl	80172d6 <lwip_htonl>
 801e088:	4602      	mov	r2, r0
 801e08a:	887b      	ldrh	r3, [r7, #2]
 801e08c:	18d1      	adds	r1, r2, r3
 801e08e:	7eba      	ldrb	r2, [r7, #26]
 801e090:	7bfb      	ldrb	r3, [r7, #15]
 801e092:	9300      	str	r3, [sp, #0]
 801e094:	460b      	mov	r3, r1
 801e096:	6939      	ldr	r1, [r7, #16]
 801e098:	6878      	ldr	r0, [r7, #4]
 801e09a:	f7ff fa4f 	bl	801d53c <tcp_create_segment>
 801e09e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801e0a0:	69fb      	ldr	r3, [r7, #28]
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	d063      	beq.n	801e16e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801e0a6:	697b      	ldr	r3, [r7, #20]
 801e0a8:	685b      	ldr	r3, [r3, #4]
 801e0aa:	4618      	mov	r0, r3
 801e0ac:	f7fa fd7e 	bl	8018bac <pbuf_clen>
 801e0b0:	4603      	mov	r3, r0
 801e0b2:	461a      	mov	r2, r3
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e0ba:	1a9b      	subs	r3, r3, r2
 801e0bc:	b29a      	uxth	r2, r3
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801e0c4:	697b      	ldr	r3, [r7, #20]
 801e0c6:	6858      	ldr	r0, [r3, #4]
 801e0c8:	697b      	ldr	r3, [r7, #20]
 801e0ca:	685b      	ldr	r3, [r3, #4]
 801e0cc:	891a      	ldrh	r2, [r3, #8]
 801e0ce:	89bb      	ldrh	r3, [r7, #12]
 801e0d0:	1ad3      	subs	r3, r2, r3
 801e0d2:	b29b      	uxth	r3, r3
 801e0d4:	4619      	mov	r1, r3
 801e0d6:	f7fa fb55 	bl	8018784 <pbuf_realloc>
  useg->len -= remainder;
 801e0da:	697b      	ldr	r3, [r7, #20]
 801e0dc:	891a      	ldrh	r2, [r3, #8]
 801e0de:	89bb      	ldrh	r3, [r7, #12]
 801e0e0:	1ad3      	subs	r3, r2, r3
 801e0e2:	b29a      	uxth	r2, r3
 801e0e4:	697b      	ldr	r3, [r7, #20]
 801e0e6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801e0e8:	697b      	ldr	r3, [r7, #20]
 801e0ea:	68db      	ldr	r3, [r3, #12]
 801e0ec:	899b      	ldrh	r3, [r3, #12]
 801e0ee:	b29c      	uxth	r4, r3
 801e0f0:	7efb      	ldrb	r3, [r7, #27]
 801e0f2:	b29b      	uxth	r3, r3
 801e0f4:	4618      	mov	r0, r3
 801e0f6:	f7f9 f8d9 	bl	80172ac <lwip_htons>
 801e0fa:	4603      	mov	r3, r0
 801e0fc:	461a      	mov	r2, r3
 801e0fe:	697b      	ldr	r3, [r7, #20]
 801e100:	68db      	ldr	r3, [r3, #12]
 801e102:	4322      	orrs	r2, r4
 801e104:	b292      	uxth	r2, r2
 801e106:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801e108:	697b      	ldr	r3, [r7, #20]
 801e10a:	685b      	ldr	r3, [r3, #4]
 801e10c:	4618      	mov	r0, r3
 801e10e:	f7fa fd4d 	bl	8018bac <pbuf_clen>
 801e112:	4603      	mov	r3, r0
 801e114:	461a      	mov	r2, r3
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e11c:	4413      	add	r3, r2
 801e11e:	b29a      	uxth	r2, r3
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e126:	69fb      	ldr	r3, [r7, #28]
 801e128:	685b      	ldr	r3, [r3, #4]
 801e12a:	4618      	mov	r0, r3
 801e12c:	f7fa fd3e 	bl	8018bac <pbuf_clen>
 801e130:	4603      	mov	r3, r0
 801e132:	461a      	mov	r2, r3
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e13a:	4413      	add	r3, r2
 801e13c:	b29a      	uxth	r2, r3
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801e144:	697b      	ldr	r3, [r7, #20]
 801e146:	681a      	ldr	r2, [r3, #0]
 801e148:	69fb      	ldr	r3, [r7, #28]
 801e14a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801e14c:	697b      	ldr	r3, [r7, #20]
 801e14e:	69fa      	ldr	r2, [r7, #28]
 801e150:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801e152:	69fb      	ldr	r3, [r7, #28]
 801e154:	681b      	ldr	r3, [r3, #0]
 801e156:	2b00      	cmp	r3, #0
 801e158:	d103      	bne.n	801e162 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801e15a:	687b      	ldr	r3, [r7, #4]
 801e15c:	2200      	movs	r2, #0
 801e15e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801e162:	2300      	movs	r3, #0
 801e164:	e016      	b.n	801e194 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801e166:	bf00      	nop
 801e168:	e002      	b.n	801e170 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801e16a:	bf00      	nop
 801e16c:	e000      	b.n	801e170 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801e16e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801e170:	69fb      	ldr	r3, [r7, #28]
 801e172:	2b00      	cmp	r3, #0
 801e174:	d006      	beq.n	801e184 <tcp_split_unsent_seg+0x25c>
 801e176:	4b09      	ldr	r3, [pc, #36]	; (801e19c <tcp_split_unsent_seg+0x274>)
 801e178:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801e17c:	490d      	ldr	r1, [pc, #52]	; (801e1b4 <tcp_split_unsent_seg+0x28c>)
 801e17e:	4809      	ldr	r0, [pc, #36]	; (801e1a4 <tcp_split_unsent_seg+0x27c>)
 801e180:	f005 febe 	bl	8023f00 <iprintf>
  if (p != NULL) {
 801e184:	693b      	ldr	r3, [r7, #16]
 801e186:	2b00      	cmp	r3, #0
 801e188:	d002      	beq.n	801e190 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801e18a:	6938      	ldr	r0, [r7, #16]
 801e18c:	f7fa fc80 	bl	8018a90 <pbuf_free>
  }

  return ERR_MEM;
 801e190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801e194:	4618      	mov	r0, r3
 801e196:	3724      	adds	r7, #36	; 0x24
 801e198:	46bd      	mov	sp, r7
 801e19a:	bd90      	pop	{r4, r7, pc}
 801e19c:	08027644 	.word	0x08027644
 801e1a0:	080279d8 	.word	0x080279d8
 801e1a4:	08027698 	.word	0x08027698
 801e1a8:	080279fc 	.word	0x080279fc
 801e1ac:	08027a20 	.word	0x08027a20
 801e1b0:	08027a30 	.word	0x08027a30
 801e1b4:	08027a40 	.word	0x08027a40

0801e1b8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801e1b8:	b590      	push	{r4, r7, lr}
 801e1ba:	b085      	sub	sp, #20
 801e1bc:	af00      	add	r7, sp, #0
 801e1be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	2b00      	cmp	r3, #0
 801e1c4:	d106      	bne.n	801e1d4 <tcp_send_fin+0x1c>
 801e1c6:	4b21      	ldr	r3, [pc, #132]	; (801e24c <tcp_send_fin+0x94>)
 801e1c8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801e1cc:	4920      	ldr	r1, [pc, #128]	; (801e250 <tcp_send_fin+0x98>)
 801e1ce:	4821      	ldr	r0, [pc, #132]	; (801e254 <tcp_send_fin+0x9c>)
 801e1d0:	f005 fe96 	bl	8023f00 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d02e      	beq.n	801e23a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e1dc:	687b      	ldr	r3, [r7, #4]
 801e1de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e1e0:	60fb      	str	r3, [r7, #12]
 801e1e2:	e002      	b.n	801e1ea <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801e1e4:	68fb      	ldr	r3, [r7, #12]
 801e1e6:	681b      	ldr	r3, [r3, #0]
 801e1e8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	681b      	ldr	r3, [r3, #0]
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	d1f8      	bne.n	801e1e4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801e1f2:	68fb      	ldr	r3, [r7, #12]
 801e1f4:	68db      	ldr	r3, [r3, #12]
 801e1f6:	899b      	ldrh	r3, [r3, #12]
 801e1f8:	b29b      	uxth	r3, r3
 801e1fa:	4618      	mov	r0, r3
 801e1fc:	f7f9 f856 	bl	80172ac <lwip_htons>
 801e200:	4603      	mov	r3, r0
 801e202:	b2db      	uxtb	r3, r3
 801e204:	f003 0307 	and.w	r3, r3, #7
 801e208:	2b00      	cmp	r3, #0
 801e20a:	d116      	bne.n	801e23a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801e20c:	68fb      	ldr	r3, [r7, #12]
 801e20e:	68db      	ldr	r3, [r3, #12]
 801e210:	899b      	ldrh	r3, [r3, #12]
 801e212:	b29c      	uxth	r4, r3
 801e214:	2001      	movs	r0, #1
 801e216:	f7f9 f849 	bl	80172ac <lwip_htons>
 801e21a:	4603      	mov	r3, r0
 801e21c:	461a      	mov	r2, r3
 801e21e:	68fb      	ldr	r3, [r7, #12]
 801e220:	68db      	ldr	r3, [r3, #12]
 801e222:	4322      	orrs	r2, r4
 801e224:	b292      	uxth	r2, r2
 801e226:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801e228:	687b      	ldr	r3, [r7, #4]
 801e22a:	8b5b      	ldrh	r3, [r3, #26]
 801e22c:	f043 0320 	orr.w	r3, r3, #32
 801e230:	b29a      	uxth	r2, r3
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801e236:	2300      	movs	r3, #0
 801e238:	e004      	b.n	801e244 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801e23a:	2101      	movs	r1, #1
 801e23c:	6878      	ldr	r0, [r7, #4]
 801e23e:	f000 f80b 	bl	801e258 <tcp_enqueue_flags>
 801e242:	4603      	mov	r3, r0
}
 801e244:	4618      	mov	r0, r3
 801e246:	3714      	adds	r7, #20
 801e248:	46bd      	mov	sp, r7
 801e24a:	bd90      	pop	{r4, r7, pc}
 801e24c:	08027644 	.word	0x08027644
 801e250:	08027a4c 	.word	0x08027a4c
 801e254:	08027698 	.word	0x08027698

0801e258 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801e258:	b580      	push	{r7, lr}
 801e25a:	b08a      	sub	sp, #40	; 0x28
 801e25c:	af02      	add	r7, sp, #8
 801e25e:	6078      	str	r0, [r7, #4]
 801e260:	460b      	mov	r3, r1
 801e262:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801e264:	2300      	movs	r3, #0
 801e266:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801e268:	2300      	movs	r3, #0
 801e26a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e26c:	78fb      	ldrb	r3, [r7, #3]
 801e26e:	f003 0303 	and.w	r3, r3, #3
 801e272:	2b00      	cmp	r3, #0
 801e274:	d106      	bne.n	801e284 <tcp_enqueue_flags+0x2c>
 801e276:	4b67      	ldr	r3, [pc, #412]	; (801e414 <tcp_enqueue_flags+0x1bc>)
 801e278:	f240 4211 	movw	r2, #1041	; 0x411
 801e27c:	4966      	ldr	r1, [pc, #408]	; (801e418 <tcp_enqueue_flags+0x1c0>)
 801e27e:	4867      	ldr	r0, [pc, #412]	; (801e41c <tcp_enqueue_flags+0x1c4>)
 801e280:	f005 fe3e 	bl	8023f00 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801e284:	687b      	ldr	r3, [r7, #4]
 801e286:	2b00      	cmp	r3, #0
 801e288:	d106      	bne.n	801e298 <tcp_enqueue_flags+0x40>
 801e28a:	4b62      	ldr	r3, [pc, #392]	; (801e414 <tcp_enqueue_flags+0x1bc>)
 801e28c:	f240 4213 	movw	r2, #1043	; 0x413
 801e290:	4963      	ldr	r1, [pc, #396]	; (801e420 <tcp_enqueue_flags+0x1c8>)
 801e292:	4862      	ldr	r0, [pc, #392]	; (801e41c <tcp_enqueue_flags+0x1c4>)
 801e294:	f005 fe34 	bl	8023f00 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801e298:	78fb      	ldrb	r3, [r7, #3]
 801e29a:	f003 0302 	and.w	r3, r3, #2
 801e29e:	2b00      	cmp	r3, #0
 801e2a0:	d001      	beq.n	801e2a6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801e2a2:	2301      	movs	r3, #1
 801e2a4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e2a6:	7ffb      	ldrb	r3, [r7, #31]
 801e2a8:	009b      	lsls	r3, r3, #2
 801e2aa:	b2db      	uxtb	r3, r3
 801e2ac:	f003 0304 	and.w	r3, r3, #4
 801e2b0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e2b2:	7dfb      	ldrb	r3, [r7, #23]
 801e2b4:	b29b      	uxth	r3, r3
 801e2b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e2ba:	4619      	mov	r1, r3
 801e2bc:	2036      	movs	r0, #54	; 0x36
 801e2be:	f7fa f903 	bl	80184c8 <pbuf_alloc>
 801e2c2:	6138      	str	r0, [r7, #16]
 801e2c4:	693b      	ldr	r3, [r7, #16]
 801e2c6:	2b00      	cmp	r3, #0
 801e2c8:	d109      	bne.n	801e2de <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e2ca:	687b      	ldr	r3, [r7, #4]
 801e2cc:	8b5b      	ldrh	r3, [r3, #26]
 801e2ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e2d2:	b29a      	uxth	r2, r3
 801e2d4:	687b      	ldr	r3, [r7, #4]
 801e2d6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e2d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e2dc:	e095      	b.n	801e40a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801e2de:	693b      	ldr	r3, [r7, #16]
 801e2e0:	895a      	ldrh	r2, [r3, #10]
 801e2e2:	7dfb      	ldrb	r3, [r7, #23]
 801e2e4:	b29b      	uxth	r3, r3
 801e2e6:	429a      	cmp	r2, r3
 801e2e8:	d206      	bcs.n	801e2f8 <tcp_enqueue_flags+0xa0>
 801e2ea:	4b4a      	ldr	r3, [pc, #296]	; (801e414 <tcp_enqueue_flags+0x1bc>)
 801e2ec:	f240 4239 	movw	r2, #1081	; 0x439
 801e2f0:	494c      	ldr	r1, [pc, #304]	; (801e424 <tcp_enqueue_flags+0x1cc>)
 801e2f2:	484a      	ldr	r0, [pc, #296]	; (801e41c <tcp_enqueue_flags+0x1c4>)
 801e2f4:	f005 fe04 	bl	8023f00 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801e2fc:	78fa      	ldrb	r2, [r7, #3]
 801e2fe:	7ffb      	ldrb	r3, [r7, #31]
 801e300:	9300      	str	r3, [sp, #0]
 801e302:	460b      	mov	r3, r1
 801e304:	6939      	ldr	r1, [r7, #16]
 801e306:	6878      	ldr	r0, [r7, #4]
 801e308:	f7ff f918 	bl	801d53c <tcp_create_segment>
 801e30c:	60f8      	str	r0, [r7, #12]
 801e30e:	68fb      	ldr	r3, [r7, #12]
 801e310:	2b00      	cmp	r3, #0
 801e312:	d109      	bne.n	801e328 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e314:	687b      	ldr	r3, [r7, #4]
 801e316:	8b5b      	ldrh	r3, [r3, #26]
 801e318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e31c:	b29a      	uxth	r2, r3
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e326:	e070      	b.n	801e40a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e328:	68fb      	ldr	r3, [r7, #12]
 801e32a:	68db      	ldr	r3, [r3, #12]
 801e32c:	f003 0303 	and.w	r3, r3, #3
 801e330:	2b00      	cmp	r3, #0
 801e332:	d006      	beq.n	801e342 <tcp_enqueue_flags+0xea>
 801e334:	4b37      	ldr	r3, [pc, #220]	; (801e414 <tcp_enqueue_flags+0x1bc>)
 801e336:	f240 4242 	movw	r2, #1090	; 0x442
 801e33a:	493b      	ldr	r1, [pc, #236]	; (801e428 <tcp_enqueue_flags+0x1d0>)
 801e33c:	4837      	ldr	r0, [pc, #220]	; (801e41c <tcp_enqueue_flags+0x1c4>)
 801e33e:	f005 fddf 	bl	8023f00 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e342:	68fb      	ldr	r3, [r7, #12]
 801e344:	891b      	ldrh	r3, [r3, #8]
 801e346:	2b00      	cmp	r3, #0
 801e348:	d006      	beq.n	801e358 <tcp_enqueue_flags+0x100>
 801e34a:	4b32      	ldr	r3, [pc, #200]	; (801e414 <tcp_enqueue_flags+0x1bc>)
 801e34c:	f240 4243 	movw	r2, #1091	; 0x443
 801e350:	4936      	ldr	r1, [pc, #216]	; (801e42c <tcp_enqueue_flags+0x1d4>)
 801e352:	4832      	ldr	r0, [pc, #200]	; (801e41c <tcp_enqueue_flags+0x1c4>)
 801e354:	f005 fdd4 	bl	8023f00 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e35c:	2b00      	cmp	r3, #0
 801e35e:	d103      	bne.n	801e368 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	68fa      	ldr	r2, [r7, #12]
 801e364:	66da      	str	r2, [r3, #108]	; 0x6c
 801e366:	e00d      	b.n	801e384 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e36c:	61bb      	str	r3, [r7, #24]
 801e36e:	e002      	b.n	801e376 <tcp_enqueue_flags+0x11e>
 801e370:	69bb      	ldr	r3, [r7, #24]
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	61bb      	str	r3, [r7, #24]
 801e376:	69bb      	ldr	r3, [r7, #24]
 801e378:	681b      	ldr	r3, [r3, #0]
 801e37a:	2b00      	cmp	r3, #0
 801e37c:	d1f8      	bne.n	801e370 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801e37e:	69bb      	ldr	r3, [r7, #24]
 801e380:	68fa      	ldr	r2, [r7, #12]
 801e382:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	2200      	movs	r2, #0
 801e388:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801e38c:	78fb      	ldrb	r3, [r7, #3]
 801e38e:	f003 0302 	and.w	r3, r3, #2
 801e392:	2b00      	cmp	r3, #0
 801e394:	d104      	bne.n	801e3a0 <tcp_enqueue_flags+0x148>
 801e396:	78fb      	ldrb	r3, [r7, #3]
 801e398:	f003 0301 	and.w	r3, r3, #1
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	d004      	beq.n	801e3aa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801e3a0:	687b      	ldr	r3, [r7, #4]
 801e3a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e3a4:	1c5a      	adds	r2, r3, #1
 801e3a6:	687b      	ldr	r3, [r7, #4]
 801e3a8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801e3aa:	78fb      	ldrb	r3, [r7, #3]
 801e3ac:	f003 0301 	and.w	r3, r3, #1
 801e3b0:	2b00      	cmp	r3, #0
 801e3b2:	d006      	beq.n	801e3c2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801e3b4:	687b      	ldr	r3, [r7, #4]
 801e3b6:	8b5b      	ldrh	r3, [r3, #26]
 801e3b8:	f043 0320 	orr.w	r3, r3, #32
 801e3bc:	b29a      	uxth	r2, r3
 801e3be:	687b      	ldr	r3, [r7, #4]
 801e3c0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e3c2:	68fb      	ldr	r3, [r7, #12]
 801e3c4:	685b      	ldr	r3, [r3, #4]
 801e3c6:	4618      	mov	r0, r3
 801e3c8:	f7fa fbf0 	bl	8018bac <pbuf_clen>
 801e3cc:	4603      	mov	r3, r0
 801e3ce:	461a      	mov	r2, r3
 801e3d0:	687b      	ldr	r3, [r7, #4]
 801e3d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e3d6:	4413      	add	r3, r2
 801e3d8:	b29a      	uxth	r2, r3
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e3e0:	687b      	ldr	r3, [r7, #4]
 801e3e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e3e6:	2b00      	cmp	r3, #0
 801e3e8:	d00e      	beq.n	801e408 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e3ee:	2b00      	cmp	r3, #0
 801e3f0:	d10a      	bne.n	801e408 <tcp_enqueue_flags+0x1b0>
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d106      	bne.n	801e408 <tcp_enqueue_flags+0x1b0>
 801e3fa:	4b06      	ldr	r3, [pc, #24]	; (801e414 <tcp_enqueue_flags+0x1bc>)
 801e3fc:	f240 4265 	movw	r2, #1125	; 0x465
 801e400:	490b      	ldr	r1, [pc, #44]	; (801e430 <tcp_enqueue_flags+0x1d8>)
 801e402:	4806      	ldr	r0, [pc, #24]	; (801e41c <tcp_enqueue_flags+0x1c4>)
 801e404:	f005 fd7c 	bl	8023f00 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801e408:	2300      	movs	r3, #0
}
 801e40a:	4618      	mov	r0, r3
 801e40c:	3720      	adds	r7, #32
 801e40e:	46bd      	mov	sp, r7
 801e410:	bd80      	pop	{r7, pc}
 801e412:	bf00      	nop
 801e414:	08027644 	.word	0x08027644
 801e418:	08027a68 	.word	0x08027a68
 801e41c:	08027698 	.word	0x08027698
 801e420:	08027ac0 	.word	0x08027ac0
 801e424:	08027ae0 	.word	0x08027ae0
 801e428:	08027b1c 	.word	0x08027b1c
 801e42c:	08027b34 	.word	0x08027b34
 801e430:	08027b60 	.word	0x08027b60

0801e434 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801e434:	b5b0      	push	{r4, r5, r7, lr}
 801e436:	b08a      	sub	sp, #40	; 0x28
 801e438:	af00      	add	r7, sp, #0
 801e43a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	2b00      	cmp	r3, #0
 801e440:	d106      	bne.n	801e450 <tcp_output+0x1c>
 801e442:	4b8a      	ldr	r3, [pc, #552]	; (801e66c <tcp_output+0x238>)
 801e444:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801e448:	4989      	ldr	r1, [pc, #548]	; (801e670 <tcp_output+0x23c>)
 801e44a:	488a      	ldr	r0, [pc, #552]	; (801e674 <tcp_output+0x240>)
 801e44c:	f005 fd58 	bl	8023f00 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	7d1b      	ldrb	r3, [r3, #20]
 801e454:	2b01      	cmp	r3, #1
 801e456:	d106      	bne.n	801e466 <tcp_output+0x32>
 801e458:	4b84      	ldr	r3, [pc, #528]	; (801e66c <tcp_output+0x238>)
 801e45a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801e45e:	4986      	ldr	r1, [pc, #536]	; (801e678 <tcp_output+0x244>)
 801e460:	4884      	ldr	r0, [pc, #528]	; (801e674 <tcp_output+0x240>)
 801e462:	f005 fd4d 	bl	8023f00 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801e466:	4b85      	ldr	r3, [pc, #532]	; (801e67c <tcp_output+0x248>)
 801e468:	681b      	ldr	r3, [r3, #0]
 801e46a:	687a      	ldr	r2, [r7, #4]
 801e46c:	429a      	cmp	r2, r3
 801e46e:	d101      	bne.n	801e474 <tcp_output+0x40>
    return ERR_OK;
 801e470:	2300      	movs	r3, #0
 801e472:	e1ce      	b.n	801e812 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e480:	4293      	cmp	r3, r2
 801e482:	bf28      	it	cs
 801e484:	4613      	movcs	r3, r2
 801e486:	b29b      	uxth	r3, r3
 801e488:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e48e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e492:	2b00      	cmp	r3, #0
 801e494:	d10b      	bne.n	801e4ae <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	8b5b      	ldrh	r3, [r3, #26]
 801e49a:	f003 0302 	and.w	r3, r3, #2
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	f000 81aa 	beq.w	801e7f8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801e4a4:	6878      	ldr	r0, [r7, #4]
 801e4a6:	f000 fdcb 	bl	801f040 <tcp_send_empty_ack>
 801e4aa:	4603      	mov	r3, r0
 801e4ac:	e1b1      	b.n	801e812 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801e4ae:	6879      	ldr	r1, [r7, #4]
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	3304      	adds	r3, #4
 801e4b4:	461a      	mov	r2, r3
 801e4b6:	6878      	ldr	r0, [r7, #4]
 801e4b8:	f7ff f824 	bl	801d504 <tcp_route>
 801e4bc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801e4be:	697b      	ldr	r3, [r7, #20]
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	d102      	bne.n	801e4ca <tcp_output+0x96>
    return ERR_RTE;
 801e4c4:	f06f 0303 	mvn.w	r3, #3
 801e4c8:	e1a3      	b.n	801e812 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	d003      	beq.n	801e4d8 <tcp_output+0xa4>
 801e4d0:	687b      	ldr	r3, [r7, #4]
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d111      	bne.n	801e4fc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801e4d8:	697b      	ldr	r3, [r7, #20]
 801e4da:	2b00      	cmp	r3, #0
 801e4dc:	d002      	beq.n	801e4e4 <tcp_output+0xb0>
 801e4de:	697b      	ldr	r3, [r7, #20]
 801e4e0:	3304      	adds	r3, #4
 801e4e2:	e000      	b.n	801e4e6 <tcp_output+0xb2>
 801e4e4:	2300      	movs	r3, #0
 801e4e6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801e4e8:	693b      	ldr	r3, [r7, #16]
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	d102      	bne.n	801e4f4 <tcp_output+0xc0>
      return ERR_RTE;
 801e4ee:	f06f 0303 	mvn.w	r3, #3
 801e4f2:	e18e      	b.n	801e812 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801e4f4:	693b      	ldr	r3, [r7, #16]
 801e4f6:	681a      	ldr	r2, [r3, #0]
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4fe:	68db      	ldr	r3, [r3, #12]
 801e500:	685b      	ldr	r3, [r3, #4]
 801e502:	4618      	mov	r0, r3
 801e504:	f7f8 fee7 	bl	80172d6 <lwip_htonl>
 801e508:	4602      	mov	r2, r0
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e50e:	1ad3      	subs	r3, r2, r3
 801e510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e512:	8912      	ldrh	r2, [r2, #8]
 801e514:	4413      	add	r3, r2
 801e516:	69ba      	ldr	r2, [r7, #24]
 801e518:	429a      	cmp	r2, r3
 801e51a:	d227      	bcs.n	801e56c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e522:	461a      	mov	r2, r3
 801e524:	69bb      	ldr	r3, [r7, #24]
 801e526:	4293      	cmp	r3, r2
 801e528:	d114      	bne.n	801e554 <tcp_output+0x120>
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e52e:	2b00      	cmp	r3, #0
 801e530:	d110      	bne.n	801e554 <tcp_output+0x120>
 801e532:	687b      	ldr	r3, [r7, #4]
 801e534:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801e538:	2b00      	cmp	r3, #0
 801e53a:	d10b      	bne.n	801e554 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	2200      	movs	r2, #0
 801e540:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	2201      	movs	r2, #1
 801e548:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801e54c:	687b      	ldr	r3, [r7, #4]
 801e54e:	2200      	movs	r2, #0
 801e550:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801e554:	687b      	ldr	r3, [r7, #4]
 801e556:	8b5b      	ldrh	r3, [r3, #26]
 801e558:	f003 0302 	and.w	r3, r3, #2
 801e55c:	2b00      	cmp	r3, #0
 801e55e:	f000 814d 	beq.w	801e7fc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801e562:	6878      	ldr	r0, [r7, #4]
 801e564:	f000 fd6c 	bl	801f040 <tcp_send_empty_ack>
 801e568:	4603      	mov	r3, r0
 801e56a:	e152      	b.n	801e812 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	2200      	movs	r2, #0
 801e570:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e578:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801e57a:	6a3b      	ldr	r3, [r7, #32]
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	f000 811c 	beq.w	801e7ba <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801e582:	e002      	b.n	801e58a <tcp_output+0x156>
 801e584:	6a3b      	ldr	r3, [r7, #32]
 801e586:	681b      	ldr	r3, [r3, #0]
 801e588:	623b      	str	r3, [r7, #32]
 801e58a:	6a3b      	ldr	r3, [r7, #32]
 801e58c:	681b      	ldr	r3, [r3, #0]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d1f8      	bne.n	801e584 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801e592:	e112      	b.n	801e7ba <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e596:	68db      	ldr	r3, [r3, #12]
 801e598:	899b      	ldrh	r3, [r3, #12]
 801e59a:	b29b      	uxth	r3, r3
 801e59c:	4618      	mov	r0, r3
 801e59e:	f7f8 fe85 	bl	80172ac <lwip_htons>
 801e5a2:	4603      	mov	r3, r0
 801e5a4:	b2db      	uxtb	r3, r3
 801e5a6:	f003 0304 	and.w	r3, r3, #4
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	d006      	beq.n	801e5bc <tcp_output+0x188>
 801e5ae:	4b2f      	ldr	r3, [pc, #188]	; (801e66c <tcp_output+0x238>)
 801e5b0:	f240 5236 	movw	r2, #1334	; 0x536
 801e5b4:	4932      	ldr	r1, [pc, #200]	; (801e680 <tcp_output+0x24c>)
 801e5b6:	482f      	ldr	r0, [pc, #188]	; (801e674 <tcp_output+0x240>)
 801e5b8:	f005 fca2 	bl	8023f00 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e5bc:	687b      	ldr	r3, [r7, #4]
 801e5be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e5c0:	2b00      	cmp	r3, #0
 801e5c2:	d01f      	beq.n	801e604 <tcp_output+0x1d0>
 801e5c4:	687b      	ldr	r3, [r7, #4]
 801e5c6:	8b5b      	ldrh	r3, [r3, #26]
 801e5c8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d119      	bne.n	801e604 <tcp_output+0x1d0>
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e5d4:	2b00      	cmp	r3, #0
 801e5d6:	d00b      	beq.n	801e5f0 <tcp_output+0x1bc>
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e5dc:	681b      	ldr	r3, [r3, #0]
 801e5de:	2b00      	cmp	r3, #0
 801e5e0:	d110      	bne.n	801e604 <tcp_output+0x1d0>
 801e5e2:	687b      	ldr	r3, [r7, #4]
 801e5e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e5e6:	891a      	ldrh	r2, [r3, #8]
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e5ec:	429a      	cmp	r2, r3
 801e5ee:	d209      	bcs.n	801e604 <tcp_output+0x1d0>
 801e5f0:	687b      	ldr	r3, [r7, #4]
 801e5f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d004      	beq.n	801e604 <tcp_output+0x1d0>
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e600:	2b08      	cmp	r3, #8
 801e602:	d901      	bls.n	801e608 <tcp_output+0x1d4>
 801e604:	2301      	movs	r3, #1
 801e606:	e000      	b.n	801e60a <tcp_output+0x1d6>
 801e608:	2300      	movs	r3, #0
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	d106      	bne.n	801e61c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801e60e:	687b      	ldr	r3, [r7, #4]
 801e610:	8b5b      	ldrh	r3, [r3, #26]
 801e612:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e616:	2b00      	cmp	r3, #0
 801e618:	f000 80e4 	beq.w	801e7e4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801e61c:	687b      	ldr	r3, [r7, #4]
 801e61e:	7d1b      	ldrb	r3, [r3, #20]
 801e620:	2b02      	cmp	r3, #2
 801e622:	d00d      	beq.n	801e640 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801e624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e626:	68db      	ldr	r3, [r3, #12]
 801e628:	899b      	ldrh	r3, [r3, #12]
 801e62a:	b29c      	uxth	r4, r3
 801e62c:	2010      	movs	r0, #16
 801e62e:	f7f8 fe3d 	bl	80172ac <lwip_htons>
 801e632:	4603      	mov	r3, r0
 801e634:	461a      	mov	r2, r3
 801e636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e638:	68db      	ldr	r3, [r3, #12]
 801e63a:	4322      	orrs	r2, r4
 801e63c:	b292      	uxth	r2, r2
 801e63e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801e640:	697a      	ldr	r2, [r7, #20]
 801e642:	6879      	ldr	r1, [r7, #4]
 801e644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e646:	f000 f909 	bl	801e85c <tcp_output_segment>
 801e64a:	4603      	mov	r3, r0
 801e64c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801e64e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e652:	2b00      	cmp	r3, #0
 801e654:	d016      	beq.n	801e684 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	8b5b      	ldrh	r3, [r3, #26]
 801e65a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e65e:	b29a      	uxth	r2, r3
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	835a      	strh	r2, [r3, #26]
      return err;
 801e664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e668:	e0d3      	b.n	801e812 <tcp_output+0x3de>
 801e66a:	bf00      	nop
 801e66c:	08027644 	.word	0x08027644
 801e670:	08027b88 	.word	0x08027b88
 801e674:	08027698 	.word	0x08027698
 801e678:	08027ba0 	.word	0x08027ba0
 801e67c:	2000bff8 	.word	0x2000bff8
 801e680:	08027bc8 	.word	0x08027bc8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801e684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e686:	681a      	ldr	r2, [r3, #0]
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801e68c:	687b      	ldr	r3, [r7, #4]
 801e68e:	7d1b      	ldrb	r3, [r3, #20]
 801e690:	2b02      	cmp	r3, #2
 801e692:	d006      	beq.n	801e6a2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	8b5b      	ldrh	r3, [r3, #26]
 801e698:	f023 0303 	bic.w	r3, r3, #3
 801e69c:	b29a      	uxth	r2, r3
 801e69e:	687b      	ldr	r3, [r7, #4]
 801e6a0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6a4:	68db      	ldr	r3, [r3, #12]
 801e6a6:	685b      	ldr	r3, [r3, #4]
 801e6a8:	4618      	mov	r0, r3
 801e6aa:	f7f8 fe14 	bl	80172d6 <lwip_htonl>
 801e6ae:	4604      	mov	r4, r0
 801e6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6b2:	891b      	ldrh	r3, [r3, #8]
 801e6b4:	461d      	mov	r5, r3
 801e6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6b8:	68db      	ldr	r3, [r3, #12]
 801e6ba:	899b      	ldrh	r3, [r3, #12]
 801e6bc:	b29b      	uxth	r3, r3
 801e6be:	4618      	mov	r0, r3
 801e6c0:	f7f8 fdf4 	bl	80172ac <lwip_htons>
 801e6c4:	4603      	mov	r3, r0
 801e6c6:	b2db      	uxtb	r3, r3
 801e6c8:	f003 0303 	and.w	r3, r3, #3
 801e6cc:	2b00      	cmp	r3, #0
 801e6ce:	d001      	beq.n	801e6d4 <tcp_output+0x2a0>
 801e6d0:	2301      	movs	r3, #1
 801e6d2:	e000      	b.n	801e6d6 <tcp_output+0x2a2>
 801e6d4:	2300      	movs	r3, #0
 801e6d6:	442b      	add	r3, r5
 801e6d8:	4423      	add	r3, r4
 801e6da:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e6dc:	687b      	ldr	r3, [r7, #4]
 801e6de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e6e0:	68bb      	ldr	r3, [r7, #8]
 801e6e2:	1ad3      	subs	r3, r2, r3
 801e6e4:	2b00      	cmp	r3, #0
 801e6e6:	da02      	bge.n	801e6ee <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801e6e8:	687b      	ldr	r3, [r7, #4]
 801e6ea:	68ba      	ldr	r2, [r7, #8]
 801e6ec:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801e6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6f0:	891b      	ldrh	r3, [r3, #8]
 801e6f2:	461c      	mov	r4, r3
 801e6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6f6:	68db      	ldr	r3, [r3, #12]
 801e6f8:	899b      	ldrh	r3, [r3, #12]
 801e6fa:	b29b      	uxth	r3, r3
 801e6fc:	4618      	mov	r0, r3
 801e6fe:	f7f8 fdd5 	bl	80172ac <lwip_htons>
 801e702:	4603      	mov	r3, r0
 801e704:	b2db      	uxtb	r3, r3
 801e706:	f003 0303 	and.w	r3, r3, #3
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	d001      	beq.n	801e712 <tcp_output+0x2de>
 801e70e:	2301      	movs	r3, #1
 801e710:	e000      	b.n	801e714 <tcp_output+0x2e0>
 801e712:	2300      	movs	r3, #0
 801e714:	4423      	add	r3, r4
 801e716:	2b00      	cmp	r3, #0
 801e718:	d049      	beq.n	801e7ae <tcp_output+0x37a>
      seg->next = NULL;
 801e71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e71c:	2200      	movs	r2, #0
 801e71e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801e720:	687b      	ldr	r3, [r7, #4]
 801e722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e724:	2b00      	cmp	r3, #0
 801e726:	d105      	bne.n	801e734 <tcp_output+0x300>
        pcb->unacked = seg;
 801e728:	687b      	ldr	r3, [r7, #4]
 801e72a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e72c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801e72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e730:	623b      	str	r3, [r7, #32]
 801e732:	e03f      	b.n	801e7b4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801e734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e736:	68db      	ldr	r3, [r3, #12]
 801e738:	685b      	ldr	r3, [r3, #4]
 801e73a:	4618      	mov	r0, r3
 801e73c:	f7f8 fdcb 	bl	80172d6 <lwip_htonl>
 801e740:	4604      	mov	r4, r0
 801e742:	6a3b      	ldr	r3, [r7, #32]
 801e744:	68db      	ldr	r3, [r3, #12]
 801e746:	685b      	ldr	r3, [r3, #4]
 801e748:	4618      	mov	r0, r3
 801e74a:	f7f8 fdc4 	bl	80172d6 <lwip_htonl>
 801e74e:	4603      	mov	r3, r0
 801e750:	1ae3      	subs	r3, r4, r3
 801e752:	2b00      	cmp	r3, #0
 801e754:	da24      	bge.n	801e7a0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	3370      	adds	r3, #112	; 0x70
 801e75a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e75c:	e002      	b.n	801e764 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801e75e:	69fb      	ldr	r3, [r7, #28]
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e764:	69fb      	ldr	r3, [r7, #28]
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d011      	beq.n	801e790 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e76c:	69fb      	ldr	r3, [r7, #28]
 801e76e:	681b      	ldr	r3, [r3, #0]
 801e770:	68db      	ldr	r3, [r3, #12]
 801e772:	685b      	ldr	r3, [r3, #4]
 801e774:	4618      	mov	r0, r3
 801e776:	f7f8 fdae 	bl	80172d6 <lwip_htonl>
 801e77a:	4604      	mov	r4, r0
 801e77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e77e:	68db      	ldr	r3, [r3, #12]
 801e780:	685b      	ldr	r3, [r3, #4]
 801e782:	4618      	mov	r0, r3
 801e784:	f7f8 fda7 	bl	80172d6 <lwip_htonl>
 801e788:	4603      	mov	r3, r0
 801e78a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	dbe6      	blt.n	801e75e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801e790:	69fb      	ldr	r3, [r7, #28]
 801e792:	681a      	ldr	r2, [r3, #0]
 801e794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e796:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801e798:	69fb      	ldr	r3, [r7, #28]
 801e79a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e79c:	601a      	str	r2, [r3, #0]
 801e79e:	e009      	b.n	801e7b4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801e7a0:	6a3b      	ldr	r3, [r7, #32]
 801e7a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e7a4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801e7a6:	6a3b      	ldr	r3, [r7, #32]
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	623b      	str	r3, [r7, #32]
 801e7ac:	e002      	b.n	801e7b4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801e7ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e7b0:	f7fb ff19 	bl	801a5e6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801e7b4:	687b      	ldr	r3, [r7, #4]
 801e7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e7b8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	d012      	beq.n	801e7e6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7c2:	68db      	ldr	r3, [r3, #12]
 801e7c4:	685b      	ldr	r3, [r3, #4]
 801e7c6:	4618      	mov	r0, r3
 801e7c8:	f7f8 fd85 	bl	80172d6 <lwip_htonl>
 801e7cc:	4602      	mov	r2, r0
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e7d2:	1ad3      	subs	r3, r2, r3
 801e7d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e7d6:	8912      	ldrh	r2, [r2, #8]
 801e7d8:	4413      	add	r3, r2
  while (seg != NULL &&
 801e7da:	69ba      	ldr	r2, [r7, #24]
 801e7dc:	429a      	cmp	r2, r3
 801e7de:	f4bf aed9 	bcs.w	801e594 <tcp_output+0x160>
 801e7e2:	e000      	b.n	801e7e6 <tcp_output+0x3b2>
      break;
 801e7e4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801e7e6:	687b      	ldr	r3, [r7, #4]
 801e7e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e7ea:	2b00      	cmp	r3, #0
 801e7ec:	d108      	bne.n	801e800 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801e7ee:	687b      	ldr	r3, [r7, #4]
 801e7f0:	2200      	movs	r2, #0
 801e7f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801e7f6:	e004      	b.n	801e802 <tcp_output+0x3ce>
    goto output_done;
 801e7f8:	bf00      	nop
 801e7fa:	e002      	b.n	801e802 <tcp_output+0x3ce>
    goto output_done;
 801e7fc:	bf00      	nop
 801e7fe:	e000      	b.n	801e802 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801e800:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	8b5b      	ldrh	r3, [r3, #26]
 801e806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e80a:	b29a      	uxth	r2, r3
 801e80c:	687b      	ldr	r3, [r7, #4]
 801e80e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801e810:	2300      	movs	r3, #0
}
 801e812:	4618      	mov	r0, r3
 801e814:	3728      	adds	r7, #40	; 0x28
 801e816:	46bd      	mov	sp, r7
 801e818:	bdb0      	pop	{r4, r5, r7, pc}
 801e81a:	bf00      	nop

0801e81c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801e81c:	b580      	push	{r7, lr}
 801e81e:	b082      	sub	sp, #8
 801e820:	af00      	add	r7, sp, #0
 801e822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801e824:	687b      	ldr	r3, [r7, #4]
 801e826:	2b00      	cmp	r3, #0
 801e828:	d106      	bne.n	801e838 <tcp_output_segment_busy+0x1c>
 801e82a:	4b09      	ldr	r3, [pc, #36]	; (801e850 <tcp_output_segment_busy+0x34>)
 801e82c:	f240 529a 	movw	r2, #1434	; 0x59a
 801e830:	4908      	ldr	r1, [pc, #32]	; (801e854 <tcp_output_segment_busy+0x38>)
 801e832:	4809      	ldr	r0, [pc, #36]	; (801e858 <tcp_output_segment_busy+0x3c>)
 801e834:	f005 fb64 	bl	8023f00 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	685b      	ldr	r3, [r3, #4]
 801e83c:	7b9b      	ldrb	r3, [r3, #14]
 801e83e:	2b01      	cmp	r3, #1
 801e840:	d001      	beq.n	801e846 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801e842:	2301      	movs	r3, #1
 801e844:	e000      	b.n	801e848 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801e846:	2300      	movs	r3, #0
}
 801e848:	4618      	mov	r0, r3
 801e84a:	3708      	adds	r7, #8
 801e84c:	46bd      	mov	sp, r7
 801e84e:	bd80      	pop	{r7, pc}
 801e850:	08027644 	.word	0x08027644
 801e854:	08027be0 	.word	0x08027be0
 801e858:	08027698 	.word	0x08027698

0801e85c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801e85c:	b5b0      	push	{r4, r5, r7, lr}
 801e85e:	b08c      	sub	sp, #48	; 0x30
 801e860:	af04      	add	r7, sp, #16
 801e862:	60f8      	str	r0, [r7, #12]
 801e864:	60b9      	str	r1, [r7, #8]
 801e866:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801e868:	68fb      	ldr	r3, [r7, #12]
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d106      	bne.n	801e87c <tcp_output_segment+0x20>
 801e86e:	4b63      	ldr	r3, [pc, #396]	; (801e9fc <tcp_output_segment+0x1a0>)
 801e870:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801e874:	4962      	ldr	r1, [pc, #392]	; (801ea00 <tcp_output_segment+0x1a4>)
 801e876:	4863      	ldr	r0, [pc, #396]	; (801ea04 <tcp_output_segment+0x1a8>)
 801e878:	f005 fb42 	bl	8023f00 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801e87c:	68bb      	ldr	r3, [r7, #8]
 801e87e:	2b00      	cmp	r3, #0
 801e880:	d106      	bne.n	801e890 <tcp_output_segment+0x34>
 801e882:	4b5e      	ldr	r3, [pc, #376]	; (801e9fc <tcp_output_segment+0x1a0>)
 801e884:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801e888:	495f      	ldr	r1, [pc, #380]	; (801ea08 <tcp_output_segment+0x1ac>)
 801e88a:	485e      	ldr	r0, [pc, #376]	; (801ea04 <tcp_output_segment+0x1a8>)
 801e88c:	f005 fb38 	bl	8023f00 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	2b00      	cmp	r3, #0
 801e894:	d106      	bne.n	801e8a4 <tcp_output_segment+0x48>
 801e896:	4b59      	ldr	r3, [pc, #356]	; (801e9fc <tcp_output_segment+0x1a0>)
 801e898:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801e89c:	495b      	ldr	r1, [pc, #364]	; (801ea0c <tcp_output_segment+0x1b0>)
 801e89e:	4859      	ldr	r0, [pc, #356]	; (801ea04 <tcp_output_segment+0x1a8>)
 801e8a0:	f005 fb2e 	bl	8023f00 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801e8a4:	68f8      	ldr	r0, [r7, #12]
 801e8a6:	f7ff ffb9 	bl	801e81c <tcp_output_segment_busy>
 801e8aa:	4603      	mov	r3, r0
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	d001      	beq.n	801e8b4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801e8b0:	2300      	movs	r3, #0
 801e8b2:	e09f      	b.n	801e9f4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801e8b4:	68bb      	ldr	r3, [r7, #8]
 801e8b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e8b8:	68fb      	ldr	r3, [r7, #12]
 801e8ba:	68dc      	ldr	r4, [r3, #12]
 801e8bc:	4610      	mov	r0, r2
 801e8be:	f7f8 fd0a 	bl	80172d6 <lwip_htonl>
 801e8c2:	4603      	mov	r3, r0
 801e8c4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801e8c6:	68bb      	ldr	r3, [r7, #8]
 801e8c8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801e8ca:	68fb      	ldr	r3, [r7, #12]
 801e8cc:	68dc      	ldr	r4, [r3, #12]
 801e8ce:	4610      	mov	r0, r2
 801e8d0:	f7f8 fcec 	bl	80172ac <lwip_htons>
 801e8d4:	4603      	mov	r3, r0
 801e8d6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e8d8:	68bb      	ldr	r3, [r7, #8]
 801e8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8dc:	68ba      	ldr	r2, [r7, #8]
 801e8de:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801e8e0:	441a      	add	r2, r3
 801e8e2:	68bb      	ldr	r3, [r7, #8]
 801e8e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801e8e6:	68fb      	ldr	r3, [r7, #12]
 801e8e8:	68db      	ldr	r3, [r3, #12]
 801e8ea:	3314      	adds	r3, #20
 801e8ec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801e8ee:	68fb      	ldr	r3, [r7, #12]
 801e8f0:	7a9b      	ldrb	r3, [r3, #10]
 801e8f2:	f003 0301 	and.w	r3, r3, #1
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	d015      	beq.n	801e926 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801e8fa:	68bb      	ldr	r3, [r7, #8]
 801e8fc:	3304      	adds	r3, #4
 801e8fe:	461a      	mov	r2, r3
 801e900:	6879      	ldr	r1, [r7, #4]
 801e902:	f44f 7006 	mov.w	r0, #536	; 0x218
 801e906:	f7fc fa33 	bl	801ad70 <tcp_eff_send_mss_netif>
 801e90a:	4603      	mov	r3, r0
 801e90c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801e90e:	8b7b      	ldrh	r3, [r7, #26]
 801e910:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801e914:	4618      	mov	r0, r3
 801e916:	f7f8 fcde 	bl	80172d6 <lwip_htonl>
 801e91a:	4602      	mov	r2, r0
 801e91c:	69fb      	ldr	r3, [r7, #28]
 801e91e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801e920:	69fb      	ldr	r3, [r7, #28]
 801e922:	3304      	adds	r3, #4
 801e924:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801e926:	68bb      	ldr	r3, [r7, #8]
 801e928:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	da02      	bge.n	801e936 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801e930:	68bb      	ldr	r3, [r7, #8]
 801e932:	2200      	movs	r2, #0
 801e934:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801e936:	68bb      	ldr	r3, [r7, #8]
 801e938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e93a:	2b00      	cmp	r3, #0
 801e93c:	d10c      	bne.n	801e958 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801e93e:	4b34      	ldr	r3, [pc, #208]	; (801ea10 <tcp_output_segment+0x1b4>)
 801e940:	681a      	ldr	r2, [r3, #0]
 801e942:	68bb      	ldr	r3, [r7, #8]
 801e944:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801e946:	68fb      	ldr	r3, [r7, #12]
 801e948:	68db      	ldr	r3, [r3, #12]
 801e94a:	685b      	ldr	r3, [r3, #4]
 801e94c:	4618      	mov	r0, r3
 801e94e:	f7f8 fcc2 	bl	80172d6 <lwip_htonl>
 801e952:	4602      	mov	r2, r0
 801e954:	68bb      	ldr	r3, [r7, #8]
 801e956:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e958:	68fb      	ldr	r3, [r7, #12]
 801e95a:	68da      	ldr	r2, [r3, #12]
 801e95c:	68fb      	ldr	r3, [r7, #12]
 801e95e:	685b      	ldr	r3, [r3, #4]
 801e960:	685b      	ldr	r3, [r3, #4]
 801e962:	1ad3      	subs	r3, r2, r3
 801e964:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801e966:	68fb      	ldr	r3, [r7, #12]
 801e968:	685b      	ldr	r3, [r3, #4]
 801e96a:	8959      	ldrh	r1, [r3, #10]
 801e96c:	68fb      	ldr	r3, [r7, #12]
 801e96e:	685b      	ldr	r3, [r3, #4]
 801e970:	8b3a      	ldrh	r2, [r7, #24]
 801e972:	1a8a      	subs	r2, r1, r2
 801e974:	b292      	uxth	r2, r2
 801e976:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801e978:	68fb      	ldr	r3, [r7, #12]
 801e97a:	685b      	ldr	r3, [r3, #4]
 801e97c:	8919      	ldrh	r1, [r3, #8]
 801e97e:	68fb      	ldr	r3, [r7, #12]
 801e980:	685b      	ldr	r3, [r3, #4]
 801e982:	8b3a      	ldrh	r2, [r7, #24]
 801e984:	1a8a      	subs	r2, r1, r2
 801e986:	b292      	uxth	r2, r2
 801e988:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801e98a:	68fb      	ldr	r3, [r7, #12]
 801e98c:	685b      	ldr	r3, [r3, #4]
 801e98e:	68fa      	ldr	r2, [r7, #12]
 801e990:	68d2      	ldr	r2, [r2, #12]
 801e992:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801e994:	68fb      	ldr	r3, [r7, #12]
 801e996:	68db      	ldr	r3, [r3, #12]
 801e998:	2200      	movs	r2, #0
 801e99a:	741a      	strb	r2, [r3, #16]
 801e99c:	2200      	movs	r2, #0
 801e99e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801e9a0:	68fb      	ldr	r3, [r7, #12]
 801e9a2:	68db      	ldr	r3, [r3, #12]
 801e9a4:	f103 0214 	add.w	r2, r3, #20
 801e9a8:	68fb      	ldr	r3, [r7, #12]
 801e9aa:	7a9b      	ldrb	r3, [r3, #10]
 801e9ac:	009b      	lsls	r3, r3, #2
 801e9ae:	f003 0304 	and.w	r3, r3, #4
 801e9b2:	4413      	add	r3, r2
 801e9b4:	69fa      	ldr	r2, [r7, #28]
 801e9b6:	429a      	cmp	r2, r3
 801e9b8:	d006      	beq.n	801e9c8 <tcp_output_segment+0x16c>
 801e9ba:	4b10      	ldr	r3, [pc, #64]	; (801e9fc <tcp_output_segment+0x1a0>)
 801e9bc:	f240 621c 	movw	r2, #1564	; 0x61c
 801e9c0:	4914      	ldr	r1, [pc, #80]	; (801ea14 <tcp_output_segment+0x1b8>)
 801e9c2:	4810      	ldr	r0, [pc, #64]	; (801ea04 <tcp_output_segment+0x1a8>)
 801e9c4:	f005 fa9c 	bl	8023f00 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801e9c8:	68fb      	ldr	r3, [r7, #12]
 801e9ca:	6858      	ldr	r0, [r3, #4]
 801e9cc:	68b9      	ldr	r1, [r7, #8]
 801e9ce:	68bb      	ldr	r3, [r7, #8]
 801e9d0:	1d1c      	adds	r4, r3, #4
 801e9d2:	68bb      	ldr	r3, [r7, #8]
 801e9d4:	7add      	ldrb	r5, [r3, #11]
 801e9d6:	68bb      	ldr	r3, [r7, #8]
 801e9d8:	7a9b      	ldrb	r3, [r3, #10]
 801e9da:	687a      	ldr	r2, [r7, #4]
 801e9dc:	9202      	str	r2, [sp, #8]
 801e9de:	2206      	movs	r2, #6
 801e9e0:	9201      	str	r2, [sp, #4]
 801e9e2:	9300      	str	r3, [sp, #0]
 801e9e4:	462b      	mov	r3, r5
 801e9e6:	4622      	mov	r2, r4
 801e9e8:	f002 fe04 	bl	80215f4 <ip4_output_if>
 801e9ec:	4603      	mov	r3, r0
 801e9ee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801e9f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e9f4:	4618      	mov	r0, r3
 801e9f6:	3720      	adds	r7, #32
 801e9f8:	46bd      	mov	sp, r7
 801e9fa:	bdb0      	pop	{r4, r5, r7, pc}
 801e9fc:	08027644 	.word	0x08027644
 801ea00:	08027c08 	.word	0x08027c08
 801ea04:	08027698 	.word	0x08027698
 801ea08:	08027c28 	.word	0x08027c28
 801ea0c:	08027c48 	.word	0x08027c48
 801ea10:	2000bfac 	.word	0x2000bfac
 801ea14:	08027c6c 	.word	0x08027c6c

0801ea18 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801ea18:	b5b0      	push	{r4, r5, r7, lr}
 801ea1a:	b084      	sub	sp, #16
 801ea1c:	af00      	add	r7, sp, #0
 801ea1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	2b00      	cmp	r3, #0
 801ea24:	d106      	bne.n	801ea34 <tcp_rexmit_rto_prepare+0x1c>
 801ea26:	4b31      	ldr	r3, [pc, #196]	; (801eaec <tcp_rexmit_rto_prepare+0xd4>)
 801ea28:	f240 6263 	movw	r2, #1635	; 0x663
 801ea2c:	4930      	ldr	r1, [pc, #192]	; (801eaf0 <tcp_rexmit_rto_prepare+0xd8>)
 801ea2e:	4831      	ldr	r0, [pc, #196]	; (801eaf4 <tcp_rexmit_rto_prepare+0xdc>)
 801ea30:	f005 fa66 	bl	8023f00 <iprintf>

  if (pcb->unacked == NULL) {
 801ea34:	687b      	ldr	r3, [r7, #4]
 801ea36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	d102      	bne.n	801ea42 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801ea3c:	f06f 0305 	mvn.w	r3, #5
 801ea40:	e050      	b.n	801eae4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ea42:	687b      	ldr	r3, [r7, #4]
 801ea44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ea46:	60fb      	str	r3, [r7, #12]
 801ea48:	e00b      	b.n	801ea62 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801ea4a:	68f8      	ldr	r0, [r7, #12]
 801ea4c:	f7ff fee6 	bl	801e81c <tcp_output_segment_busy>
 801ea50:	4603      	mov	r3, r0
 801ea52:	2b00      	cmp	r3, #0
 801ea54:	d002      	beq.n	801ea5c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801ea56:	f06f 0305 	mvn.w	r3, #5
 801ea5a:	e043      	b.n	801eae4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ea5c:	68fb      	ldr	r3, [r7, #12]
 801ea5e:	681b      	ldr	r3, [r3, #0]
 801ea60:	60fb      	str	r3, [r7, #12]
 801ea62:	68fb      	ldr	r3, [r7, #12]
 801ea64:	681b      	ldr	r3, [r3, #0]
 801ea66:	2b00      	cmp	r3, #0
 801ea68:	d1ef      	bne.n	801ea4a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801ea6a:	68f8      	ldr	r0, [r7, #12]
 801ea6c:	f7ff fed6 	bl	801e81c <tcp_output_segment_busy>
 801ea70:	4603      	mov	r3, r0
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	d002      	beq.n	801ea7c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801ea76:	f06f 0305 	mvn.w	r3, #5
 801ea7a:	e033      	b.n	801eae4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801ea7c:	687b      	ldr	r3, [r7, #4]
 801ea7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801ea80:	68fb      	ldr	r3, [r7, #12]
 801ea82:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	2200      	movs	r2, #0
 801ea90:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801ea92:	687b      	ldr	r3, [r7, #4]
 801ea94:	8b5b      	ldrh	r3, [r3, #26]
 801ea96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ea9a:	b29a      	uxth	r2, r3
 801ea9c:	687b      	ldr	r3, [r7, #4]
 801ea9e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801eaa0:	68fb      	ldr	r3, [r7, #12]
 801eaa2:	68db      	ldr	r3, [r3, #12]
 801eaa4:	685b      	ldr	r3, [r3, #4]
 801eaa6:	4618      	mov	r0, r3
 801eaa8:	f7f8 fc15 	bl	80172d6 <lwip_htonl>
 801eaac:	4604      	mov	r4, r0
 801eaae:	68fb      	ldr	r3, [r7, #12]
 801eab0:	891b      	ldrh	r3, [r3, #8]
 801eab2:	461d      	mov	r5, r3
 801eab4:	68fb      	ldr	r3, [r7, #12]
 801eab6:	68db      	ldr	r3, [r3, #12]
 801eab8:	899b      	ldrh	r3, [r3, #12]
 801eaba:	b29b      	uxth	r3, r3
 801eabc:	4618      	mov	r0, r3
 801eabe:	f7f8 fbf5 	bl	80172ac <lwip_htons>
 801eac2:	4603      	mov	r3, r0
 801eac4:	b2db      	uxtb	r3, r3
 801eac6:	f003 0303 	and.w	r3, r3, #3
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	d001      	beq.n	801ead2 <tcp_rexmit_rto_prepare+0xba>
 801eace:	2301      	movs	r3, #1
 801ead0:	e000      	b.n	801ead4 <tcp_rexmit_rto_prepare+0xbc>
 801ead2:	2300      	movs	r3, #0
 801ead4:	442b      	add	r3, r5
 801ead6:	18e2      	adds	r2, r4, r3
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	2200      	movs	r2, #0
 801eae0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801eae2:	2300      	movs	r3, #0
}
 801eae4:	4618      	mov	r0, r3
 801eae6:	3710      	adds	r7, #16
 801eae8:	46bd      	mov	sp, r7
 801eaea:	bdb0      	pop	{r4, r5, r7, pc}
 801eaec:	08027644 	.word	0x08027644
 801eaf0:	08027c80 	.word	0x08027c80
 801eaf4:	08027698 	.word	0x08027698

0801eaf8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801eaf8:	b580      	push	{r7, lr}
 801eafa:	b082      	sub	sp, #8
 801eafc:	af00      	add	r7, sp, #0
 801eafe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	d106      	bne.n	801eb14 <tcp_rexmit_rto_commit+0x1c>
 801eb06:	4b0d      	ldr	r3, [pc, #52]	; (801eb3c <tcp_rexmit_rto_commit+0x44>)
 801eb08:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801eb0c:	490c      	ldr	r1, [pc, #48]	; (801eb40 <tcp_rexmit_rto_commit+0x48>)
 801eb0e:	480d      	ldr	r0, [pc, #52]	; (801eb44 <tcp_rexmit_rto_commit+0x4c>)
 801eb10:	f005 f9f6 	bl	8023f00 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eb1a:	2bff      	cmp	r3, #255	; 0xff
 801eb1c:	d007      	beq.n	801eb2e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801eb1e:	687b      	ldr	r3, [r7, #4]
 801eb20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eb24:	3301      	adds	r3, #1
 801eb26:	b2da      	uxtb	r2, r3
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801eb2e:	6878      	ldr	r0, [r7, #4]
 801eb30:	f7ff fc80 	bl	801e434 <tcp_output>
}
 801eb34:	bf00      	nop
 801eb36:	3708      	adds	r7, #8
 801eb38:	46bd      	mov	sp, r7
 801eb3a:	bd80      	pop	{r7, pc}
 801eb3c:	08027644 	.word	0x08027644
 801eb40:	08027ca4 	.word	0x08027ca4
 801eb44:	08027698 	.word	0x08027698

0801eb48 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801eb48:	b580      	push	{r7, lr}
 801eb4a:	b082      	sub	sp, #8
 801eb4c:	af00      	add	r7, sp, #0
 801eb4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	2b00      	cmp	r3, #0
 801eb54:	d106      	bne.n	801eb64 <tcp_rexmit_rto+0x1c>
 801eb56:	4b0a      	ldr	r3, [pc, #40]	; (801eb80 <tcp_rexmit_rto+0x38>)
 801eb58:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801eb5c:	4909      	ldr	r1, [pc, #36]	; (801eb84 <tcp_rexmit_rto+0x3c>)
 801eb5e:	480a      	ldr	r0, [pc, #40]	; (801eb88 <tcp_rexmit_rto+0x40>)
 801eb60:	f005 f9ce 	bl	8023f00 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801eb64:	6878      	ldr	r0, [r7, #4]
 801eb66:	f7ff ff57 	bl	801ea18 <tcp_rexmit_rto_prepare>
 801eb6a:	4603      	mov	r3, r0
 801eb6c:	2b00      	cmp	r3, #0
 801eb6e:	d102      	bne.n	801eb76 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801eb70:	6878      	ldr	r0, [r7, #4]
 801eb72:	f7ff ffc1 	bl	801eaf8 <tcp_rexmit_rto_commit>
  }
}
 801eb76:	bf00      	nop
 801eb78:	3708      	adds	r7, #8
 801eb7a:	46bd      	mov	sp, r7
 801eb7c:	bd80      	pop	{r7, pc}
 801eb7e:	bf00      	nop
 801eb80:	08027644 	.word	0x08027644
 801eb84:	08027cc8 	.word	0x08027cc8
 801eb88:	08027698 	.word	0x08027698

0801eb8c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801eb8c:	b590      	push	{r4, r7, lr}
 801eb8e:	b085      	sub	sp, #20
 801eb90:	af00      	add	r7, sp, #0
 801eb92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801eb94:	687b      	ldr	r3, [r7, #4]
 801eb96:	2b00      	cmp	r3, #0
 801eb98:	d106      	bne.n	801eba8 <tcp_rexmit+0x1c>
 801eb9a:	4b2f      	ldr	r3, [pc, #188]	; (801ec58 <tcp_rexmit+0xcc>)
 801eb9c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801eba0:	492e      	ldr	r1, [pc, #184]	; (801ec5c <tcp_rexmit+0xd0>)
 801eba2:	482f      	ldr	r0, [pc, #188]	; (801ec60 <tcp_rexmit+0xd4>)
 801eba4:	f005 f9ac 	bl	8023f00 <iprintf>

  if (pcb->unacked == NULL) {
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ebac:	2b00      	cmp	r3, #0
 801ebae:	d102      	bne.n	801ebb6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801ebb0:	f06f 0305 	mvn.w	r3, #5
 801ebb4:	e04c      	b.n	801ec50 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801ebb6:	687b      	ldr	r3, [r7, #4]
 801ebb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ebba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801ebbc:	68b8      	ldr	r0, [r7, #8]
 801ebbe:	f7ff fe2d 	bl	801e81c <tcp_output_segment_busy>
 801ebc2:	4603      	mov	r3, r0
 801ebc4:	2b00      	cmp	r3, #0
 801ebc6:	d002      	beq.n	801ebce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801ebc8:	f06f 0305 	mvn.w	r3, #5
 801ebcc:	e040      	b.n	801ec50 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801ebce:	68bb      	ldr	r3, [r7, #8]
 801ebd0:	681a      	ldr	r2, [r3, #0]
 801ebd2:	687b      	ldr	r3, [r7, #4]
 801ebd4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801ebd6:	687b      	ldr	r3, [r7, #4]
 801ebd8:	336c      	adds	r3, #108	; 0x6c
 801ebda:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ebdc:	e002      	b.n	801ebe4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801ebde:	68fb      	ldr	r3, [r7, #12]
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ebe4:	68fb      	ldr	r3, [r7, #12]
 801ebe6:	681b      	ldr	r3, [r3, #0]
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	d011      	beq.n	801ec10 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ebec:	68fb      	ldr	r3, [r7, #12]
 801ebee:	681b      	ldr	r3, [r3, #0]
 801ebf0:	68db      	ldr	r3, [r3, #12]
 801ebf2:	685b      	ldr	r3, [r3, #4]
 801ebf4:	4618      	mov	r0, r3
 801ebf6:	f7f8 fb6e 	bl	80172d6 <lwip_htonl>
 801ebfa:	4604      	mov	r4, r0
 801ebfc:	68bb      	ldr	r3, [r7, #8]
 801ebfe:	68db      	ldr	r3, [r3, #12]
 801ec00:	685b      	ldr	r3, [r3, #4]
 801ec02:	4618      	mov	r0, r3
 801ec04:	f7f8 fb67 	bl	80172d6 <lwip_htonl>
 801ec08:	4603      	mov	r3, r0
 801ec0a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	dbe6      	blt.n	801ebde <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801ec10:	68fb      	ldr	r3, [r7, #12]
 801ec12:	681a      	ldr	r2, [r3, #0]
 801ec14:	68bb      	ldr	r3, [r7, #8]
 801ec16:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801ec18:	68fb      	ldr	r3, [r7, #12]
 801ec1a:	68ba      	ldr	r2, [r7, #8]
 801ec1c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801ec1e:	68bb      	ldr	r3, [r7, #8]
 801ec20:	681b      	ldr	r3, [r3, #0]
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	d103      	bne.n	801ec2e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	2200      	movs	r2, #0
 801ec2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801ec2e:	687b      	ldr	r3, [r7, #4]
 801ec30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ec34:	2bff      	cmp	r3, #255	; 0xff
 801ec36:	d007      	beq.n	801ec48 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ec3e:	3301      	adds	r3, #1
 801ec40:	b2da      	uxtb	r2, r3
 801ec42:	687b      	ldr	r3, [r7, #4]
 801ec44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	2200      	movs	r2, #0
 801ec4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801ec4e:	2300      	movs	r3, #0
}
 801ec50:	4618      	mov	r0, r3
 801ec52:	3714      	adds	r7, #20
 801ec54:	46bd      	mov	sp, r7
 801ec56:	bd90      	pop	{r4, r7, pc}
 801ec58:	08027644 	.word	0x08027644
 801ec5c:	08027ce4 	.word	0x08027ce4
 801ec60:	08027698 	.word	0x08027698

0801ec64 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801ec64:	b580      	push	{r7, lr}
 801ec66:	b082      	sub	sp, #8
 801ec68:	af00      	add	r7, sp, #0
 801ec6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801ec6c:	687b      	ldr	r3, [r7, #4]
 801ec6e:	2b00      	cmp	r3, #0
 801ec70:	d106      	bne.n	801ec80 <tcp_rexmit_fast+0x1c>
 801ec72:	4b2a      	ldr	r3, [pc, #168]	; (801ed1c <tcp_rexmit_fast+0xb8>)
 801ec74:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801ec78:	4929      	ldr	r1, [pc, #164]	; (801ed20 <tcp_rexmit_fast+0xbc>)
 801ec7a:	482a      	ldr	r0, [pc, #168]	; (801ed24 <tcp_rexmit_fast+0xc0>)
 801ec7c:	f005 f940 	bl	8023f00 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801ec80:	687b      	ldr	r3, [r7, #4]
 801ec82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ec84:	2b00      	cmp	r3, #0
 801ec86:	d045      	beq.n	801ed14 <tcp_rexmit_fast+0xb0>
 801ec88:	687b      	ldr	r3, [r7, #4]
 801ec8a:	8b5b      	ldrh	r3, [r3, #26]
 801ec8c:	f003 0304 	and.w	r3, r3, #4
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	d13f      	bne.n	801ed14 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801ec94:	6878      	ldr	r0, [r7, #4]
 801ec96:	f7ff ff79 	bl	801eb8c <tcp_rexmit>
 801ec9a:	4603      	mov	r3, r0
 801ec9c:	2b00      	cmp	r3, #0
 801ec9e:	d139      	bne.n	801ed14 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801eca0:	687b      	ldr	r3, [r7, #4]
 801eca2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ecac:	4293      	cmp	r3, r2
 801ecae:	bf28      	it	cs
 801ecb0:	4613      	movcs	r3, r2
 801ecb2:	b29b      	uxth	r3, r3
 801ecb4:	2b00      	cmp	r3, #0
 801ecb6:	da00      	bge.n	801ecba <tcp_rexmit_fast+0x56>
 801ecb8:	3301      	adds	r3, #1
 801ecba:	105b      	asrs	r3, r3, #1
 801ecbc:	b29a      	uxth	r2, r3
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ecc4:	687b      	ldr	r3, [r7, #4]
 801ecc6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801ecca:	461a      	mov	r2, r3
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ecd0:	005b      	lsls	r3, r3, #1
 801ecd2:	429a      	cmp	r2, r3
 801ecd4:	d206      	bcs.n	801ece4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ecda:	005b      	lsls	r3, r3, #1
 801ecdc:	b29a      	uxth	r2, r3
 801ecde:	687b      	ldr	r3, [r7, #4]
 801ece0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ece4:	687b      	ldr	r3, [r7, #4]
 801ece6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801ecea:	687b      	ldr	r3, [r7, #4]
 801ecec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ecee:	4619      	mov	r1, r3
 801ecf0:	0049      	lsls	r1, r1, #1
 801ecf2:	440b      	add	r3, r1
 801ecf4:	b29b      	uxth	r3, r3
 801ecf6:	4413      	add	r3, r2
 801ecf8:	b29a      	uxth	r2, r3
 801ecfa:	687b      	ldr	r3, [r7, #4]
 801ecfc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	8b5b      	ldrh	r3, [r3, #26]
 801ed04:	f043 0304 	orr.w	r3, r3, #4
 801ed08:	b29a      	uxth	r2, r3
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	2200      	movs	r2, #0
 801ed12:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801ed14:	bf00      	nop
 801ed16:	3708      	adds	r7, #8
 801ed18:	46bd      	mov	sp, r7
 801ed1a:	bd80      	pop	{r7, pc}
 801ed1c:	08027644 	.word	0x08027644
 801ed20:	08027cfc 	.word	0x08027cfc
 801ed24:	08027698 	.word	0x08027698

0801ed28 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ed28:	b580      	push	{r7, lr}
 801ed2a:	b086      	sub	sp, #24
 801ed2c:	af00      	add	r7, sp, #0
 801ed2e:	60f8      	str	r0, [r7, #12]
 801ed30:	607b      	str	r3, [r7, #4]
 801ed32:	460b      	mov	r3, r1
 801ed34:	817b      	strh	r3, [r7, #10]
 801ed36:	4613      	mov	r3, r2
 801ed38:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ed3a:	897a      	ldrh	r2, [r7, #10]
 801ed3c:	893b      	ldrh	r3, [r7, #8]
 801ed3e:	4413      	add	r3, r2
 801ed40:	b29b      	uxth	r3, r3
 801ed42:	3314      	adds	r3, #20
 801ed44:	b29b      	uxth	r3, r3
 801ed46:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ed4a:	4619      	mov	r1, r3
 801ed4c:	2022      	movs	r0, #34	; 0x22
 801ed4e:	f7f9 fbbb 	bl	80184c8 <pbuf_alloc>
 801ed52:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801ed54:	697b      	ldr	r3, [r7, #20]
 801ed56:	2b00      	cmp	r3, #0
 801ed58:	d04d      	beq.n	801edf6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ed5a:	897b      	ldrh	r3, [r7, #10]
 801ed5c:	3313      	adds	r3, #19
 801ed5e:	697a      	ldr	r2, [r7, #20]
 801ed60:	8952      	ldrh	r2, [r2, #10]
 801ed62:	4293      	cmp	r3, r2
 801ed64:	db06      	blt.n	801ed74 <tcp_output_alloc_header_common+0x4c>
 801ed66:	4b26      	ldr	r3, [pc, #152]	; (801ee00 <tcp_output_alloc_header_common+0xd8>)
 801ed68:	f240 7223 	movw	r2, #1827	; 0x723
 801ed6c:	4925      	ldr	r1, [pc, #148]	; (801ee04 <tcp_output_alloc_header_common+0xdc>)
 801ed6e:	4826      	ldr	r0, [pc, #152]	; (801ee08 <tcp_output_alloc_header_common+0xe0>)
 801ed70:	f005 f8c6 	bl	8023f00 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801ed74:	697b      	ldr	r3, [r7, #20]
 801ed76:	685b      	ldr	r3, [r3, #4]
 801ed78:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801ed7a:	8c3b      	ldrh	r3, [r7, #32]
 801ed7c:	4618      	mov	r0, r3
 801ed7e:	f7f8 fa95 	bl	80172ac <lwip_htons>
 801ed82:	4603      	mov	r3, r0
 801ed84:	461a      	mov	r2, r3
 801ed86:	693b      	ldr	r3, [r7, #16]
 801ed88:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801ed8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ed8c:	4618      	mov	r0, r3
 801ed8e:	f7f8 fa8d 	bl	80172ac <lwip_htons>
 801ed92:	4603      	mov	r3, r0
 801ed94:	461a      	mov	r2, r3
 801ed96:	693b      	ldr	r3, [r7, #16]
 801ed98:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801ed9a:	693b      	ldr	r3, [r7, #16]
 801ed9c:	687a      	ldr	r2, [r7, #4]
 801ed9e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801eda0:	68f8      	ldr	r0, [r7, #12]
 801eda2:	f7f8 fa98 	bl	80172d6 <lwip_htonl>
 801eda6:	4602      	mov	r2, r0
 801eda8:	693b      	ldr	r3, [r7, #16]
 801edaa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801edac:	897b      	ldrh	r3, [r7, #10]
 801edae:	089b      	lsrs	r3, r3, #2
 801edb0:	b29b      	uxth	r3, r3
 801edb2:	3305      	adds	r3, #5
 801edb4:	b29b      	uxth	r3, r3
 801edb6:	031b      	lsls	r3, r3, #12
 801edb8:	b29a      	uxth	r2, r3
 801edba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801edbe:	b29b      	uxth	r3, r3
 801edc0:	4313      	orrs	r3, r2
 801edc2:	b29b      	uxth	r3, r3
 801edc4:	4618      	mov	r0, r3
 801edc6:	f7f8 fa71 	bl	80172ac <lwip_htons>
 801edca:	4603      	mov	r3, r0
 801edcc:	461a      	mov	r2, r3
 801edce:	693b      	ldr	r3, [r7, #16]
 801edd0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801edd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801edd4:	4618      	mov	r0, r3
 801edd6:	f7f8 fa69 	bl	80172ac <lwip_htons>
 801edda:	4603      	mov	r3, r0
 801eddc:	461a      	mov	r2, r3
 801edde:	693b      	ldr	r3, [r7, #16]
 801ede0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801ede2:	693b      	ldr	r3, [r7, #16]
 801ede4:	2200      	movs	r2, #0
 801ede6:	741a      	strb	r2, [r3, #16]
 801ede8:	2200      	movs	r2, #0
 801edea:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801edec:	693b      	ldr	r3, [r7, #16]
 801edee:	2200      	movs	r2, #0
 801edf0:	749a      	strb	r2, [r3, #18]
 801edf2:	2200      	movs	r2, #0
 801edf4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801edf6:	697b      	ldr	r3, [r7, #20]
}
 801edf8:	4618      	mov	r0, r3
 801edfa:	3718      	adds	r7, #24
 801edfc:	46bd      	mov	sp, r7
 801edfe:	bd80      	pop	{r7, pc}
 801ee00:	08027644 	.word	0x08027644
 801ee04:	08027d1c 	.word	0x08027d1c
 801ee08:	08027698 	.word	0x08027698

0801ee0c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801ee0c:	b5b0      	push	{r4, r5, r7, lr}
 801ee0e:	b08a      	sub	sp, #40	; 0x28
 801ee10:	af04      	add	r7, sp, #16
 801ee12:	60f8      	str	r0, [r7, #12]
 801ee14:	607b      	str	r3, [r7, #4]
 801ee16:	460b      	mov	r3, r1
 801ee18:	817b      	strh	r3, [r7, #10]
 801ee1a:	4613      	mov	r3, r2
 801ee1c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801ee1e:	68fb      	ldr	r3, [r7, #12]
 801ee20:	2b00      	cmp	r3, #0
 801ee22:	d106      	bne.n	801ee32 <tcp_output_alloc_header+0x26>
 801ee24:	4b15      	ldr	r3, [pc, #84]	; (801ee7c <tcp_output_alloc_header+0x70>)
 801ee26:	f240 7242 	movw	r2, #1858	; 0x742
 801ee2a:	4915      	ldr	r1, [pc, #84]	; (801ee80 <tcp_output_alloc_header+0x74>)
 801ee2c:	4815      	ldr	r0, [pc, #84]	; (801ee84 <tcp_output_alloc_header+0x78>)
 801ee2e:	f005 f867 	bl	8023f00 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801ee32:	68fb      	ldr	r3, [r7, #12]
 801ee34:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801ee36:	68fb      	ldr	r3, [r7, #12]
 801ee38:	8adb      	ldrh	r3, [r3, #22]
 801ee3a:	68fa      	ldr	r2, [r7, #12]
 801ee3c:	8b12      	ldrh	r2, [r2, #24]
 801ee3e:	68f9      	ldr	r1, [r7, #12]
 801ee40:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801ee42:	893d      	ldrh	r5, [r7, #8]
 801ee44:	897c      	ldrh	r4, [r7, #10]
 801ee46:	9103      	str	r1, [sp, #12]
 801ee48:	2110      	movs	r1, #16
 801ee4a:	9102      	str	r1, [sp, #8]
 801ee4c:	9201      	str	r2, [sp, #4]
 801ee4e:	9300      	str	r3, [sp, #0]
 801ee50:	687b      	ldr	r3, [r7, #4]
 801ee52:	462a      	mov	r2, r5
 801ee54:	4621      	mov	r1, r4
 801ee56:	f7ff ff67 	bl	801ed28 <tcp_output_alloc_header_common>
 801ee5a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801ee5c:	697b      	ldr	r3, [r7, #20]
 801ee5e:	2b00      	cmp	r3, #0
 801ee60:	d006      	beq.n	801ee70 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ee62:	68fb      	ldr	r3, [r7, #12]
 801ee64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee66:	68fa      	ldr	r2, [r7, #12]
 801ee68:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ee6a:	441a      	add	r2, r3
 801ee6c:	68fb      	ldr	r3, [r7, #12]
 801ee6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801ee70:	697b      	ldr	r3, [r7, #20]
}
 801ee72:	4618      	mov	r0, r3
 801ee74:	3718      	adds	r7, #24
 801ee76:	46bd      	mov	sp, r7
 801ee78:	bdb0      	pop	{r4, r5, r7, pc}
 801ee7a:	bf00      	nop
 801ee7c:	08027644 	.word	0x08027644
 801ee80:	08027d4c 	.word	0x08027d4c
 801ee84:	08027698 	.word	0x08027698

0801ee88 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801ee88:	b580      	push	{r7, lr}
 801ee8a:	b088      	sub	sp, #32
 801ee8c:	af00      	add	r7, sp, #0
 801ee8e:	60f8      	str	r0, [r7, #12]
 801ee90:	60b9      	str	r1, [r7, #8]
 801ee92:	4611      	mov	r1, r2
 801ee94:	461a      	mov	r2, r3
 801ee96:	460b      	mov	r3, r1
 801ee98:	71fb      	strb	r3, [r7, #7]
 801ee9a:	4613      	mov	r3, r2
 801ee9c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801ee9e:	2300      	movs	r3, #0
 801eea0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801eea2:	68bb      	ldr	r3, [r7, #8]
 801eea4:	2b00      	cmp	r3, #0
 801eea6:	d106      	bne.n	801eeb6 <tcp_output_fill_options+0x2e>
 801eea8:	4b13      	ldr	r3, [pc, #76]	; (801eef8 <tcp_output_fill_options+0x70>)
 801eeaa:	f240 7256 	movw	r2, #1878	; 0x756
 801eeae:	4913      	ldr	r1, [pc, #76]	; (801eefc <tcp_output_fill_options+0x74>)
 801eeb0:	4813      	ldr	r0, [pc, #76]	; (801ef00 <tcp_output_fill_options+0x78>)
 801eeb2:	f005 f825 	bl	8023f00 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801eeb6:	68bb      	ldr	r3, [r7, #8]
 801eeb8:	685b      	ldr	r3, [r3, #4]
 801eeba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801eebc:	69bb      	ldr	r3, [r7, #24]
 801eebe:	3314      	adds	r3, #20
 801eec0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801eec2:	69bb      	ldr	r3, [r7, #24]
 801eec4:	f103 0214 	add.w	r2, r3, #20
 801eec8:	8bfb      	ldrh	r3, [r7, #30]
 801eeca:	009b      	lsls	r3, r3, #2
 801eecc:	4619      	mov	r1, r3
 801eece:	79fb      	ldrb	r3, [r7, #7]
 801eed0:	009b      	lsls	r3, r3, #2
 801eed2:	f003 0304 	and.w	r3, r3, #4
 801eed6:	440b      	add	r3, r1
 801eed8:	4413      	add	r3, r2
 801eeda:	697a      	ldr	r2, [r7, #20]
 801eedc:	429a      	cmp	r2, r3
 801eede:	d006      	beq.n	801eeee <tcp_output_fill_options+0x66>
 801eee0:	4b05      	ldr	r3, [pc, #20]	; (801eef8 <tcp_output_fill_options+0x70>)
 801eee2:	f240 7275 	movw	r2, #1909	; 0x775
 801eee6:	4907      	ldr	r1, [pc, #28]	; (801ef04 <tcp_output_fill_options+0x7c>)
 801eee8:	4805      	ldr	r0, [pc, #20]	; (801ef00 <tcp_output_fill_options+0x78>)
 801eeea:	f005 f809 	bl	8023f00 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801eeee:	bf00      	nop
 801eef0:	3720      	adds	r7, #32
 801eef2:	46bd      	mov	sp, r7
 801eef4:	bd80      	pop	{r7, pc}
 801eef6:	bf00      	nop
 801eef8:	08027644 	.word	0x08027644
 801eefc:	08027d74 	.word	0x08027d74
 801ef00:	08027698 	.word	0x08027698
 801ef04:	08027c6c 	.word	0x08027c6c

0801ef08 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801ef08:	b580      	push	{r7, lr}
 801ef0a:	b08a      	sub	sp, #40	; 0x28
 801ef0c:	af04      	add	r7, sp, #16
 801ef0e:	60f8      	str	r0, [r7, #12]
 801ef10:	60b9      	str	r1, [r7, #8]
 801ef12:	607a      	str	r2, [r7, #4]
 801ef14:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801ef16:	68bb      	ldr	r3, [r7, #8]
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	d106      	bne.n	801ef2a <tcp_output_control_segment+0x22>
 801ef1c:	4b1c      	ldr	r3, [pc, #112]	; (801ef90 <tcp_output_control_segment+0x88>)
 801ef1e:	f240 7287 	movw	r2, #1927	; 0x787
 801ef22:	491c      	ldr	r1, [pc, #112]	; (801ef94 <tcp_output_control_segment+0x8c>)
 801ef24:	481c      	ldr	r0, [pc, #112]	; (801ef98 <tcp_output_control_segment+0x90>)
 801ef26:	f004 ffeb 	bl	8023f00 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801ef2a:	683a      	ldr	r2, [r7, #0]
 801ef2c:	6879      	ldr	r1, [r7, #4]
 801ef2e:	68f8      	ldr	r0, [r7, #12]
 801ef30:	f7fe fae8 	bl	801d504 <tcp_route>
 801ef34:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801ef36:	693b      	ldr	r3, [r7, #16]
 801ef38:	2b00      	cmp	r3, #0
 801ef3a:	d102      	bne.n	801ef42 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801ef3c:	23fc      	movs	r3, #252	; 0xfc
 801ef3e:	75fb      	strb	r3, [r7, #23]
 801ef40:	e01c      	b.n	801ef7c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801ef42:	68fb      	ldr	r3, [r7, #12]
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d006      	beq.n	801ef56 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801ef48:	68fb      	ldr	r3, [r7, #12]
 801ef4a:	7adb      	ldrb	r3, [r3, #11]
 801ef4c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801ef4e:	68fb      	ldr	r3, [r7, #12]
 801ef50:	7a9b      	ldrb	r3, [r3, #10]
 801ef52:	757b      	strb	r3, [r7, #21]
 801ef54:	e003      	b.n	801ef5e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801ef56:	23ff      	movs	r3, #255	; 0xff
 801ef58:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801ef5a:	2300      	movs	r3, #0
 801ef5c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801ef5e:	7dba      	ldrb	r2, [r7, #22]
 801ef60:	693b      	ldr	r3, [r7, #16]
 801ef62:	9302      	str	r3, [sp, #8]
 801ef64:	2306      	movs	r3, #6
 801ef66:	9301      	str	r3, [sp, #4]
 801ef68:	7d7b      	ldrb	r3, [r7, #21]
 801ef6a:	9300      	str	r3, [sp, #0]
 801ef6c:	4613      	mov	r3, r2
 801ef6e:	683a      	ldr	r2, [r7, #0]
 801ef70:	6879      	ldr	r1, [r7, #4]
 801ef72:	68b8      	ldr	r0, [r7, #8]
 801ef74:	f002 fb3e 	bl	80215f4 <ip4_output_if>
 801ef78:	4603      	mov	r3, r0
 801ef7a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801ef7c:	68b8      	ldr	r0, [r7, #8]
 801ef7e:	f7f9 fd87 	bl	8018a90 <pbuf_free>
  return err;
 801ef82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ef86:	4618      	mov	r0, r3
 801ef88:	3718      	adds	r7, #24
 801ef8a:	46bd      	mov	sp, r7
 801ef8c:	bd80      	pop	{r7, pc}
 801ef8e:	bf00      	nop
 801ef90:	08027644 	.word	0x08027644
 801ef94:	08027d9c 	.word	0x08027d9c
 801ef98:	08027698 	.word	0x08027698

0801ef9c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801ef9c:	b590      	push	{r4, r7, lr}
 801ef9e:	b08b      	sub	sp, #44	; 0x2c
 801efa0:	af04      	add	r7, sp, #16
 801efa2:	60f8      	str	r0, [r7, #12]
 801efa4:	60b9      	str	r1, [r7, #8]
 801efa6:	607a      	str	r2, [r7, #4]
 801efa8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801efaa:	683b      	ldr	r3, [r7, #0]
 801efac:	2b00      	cmp	r3, #0
 801efae:	d106      	bne.n	801efbe <tcp_rst+0x22>
 801efb0:	4b1f      	ldr	r3, [pc, #124]	; (801f030 <tcp_rst+0x94>)
 801efb2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801efb6:	491f      	ldr	r1, [pc, #124]	; (801f034 <tcp_rst+0x98>)
 801efb8:	481f      	ldr	r0, [pc, #124]	; (801f038 <tcp_rst+0x9c>)
 801efba:	f004 ffa1 	bl	8023f00 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801efbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801efc0:	2b00      	cmp	r3, #0
 801efc2:	d106      	bne.n	801efd2 <tcp_rst+0x36>
 801efc4:	4b1a      	ldr	r3, [pc, #104]	; (801f030 <tcp_rst+0x94>)
 801efc6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801efca:	491c      	ldr	r1, [pc, #112]	; (801f03c <tcp_rst+0xa0>)
 801efcc:	481a      	ldr	r0, [pc, #104]	; (801f038 <tcp_rst+0x9c>)
 801efce:	f004 ff97 	bl	8023f00 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801efd2:	2300      	movs	r3, #0
 801efd4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801efd6:	f246 0308 	movw	r3, #24584	; 0x6008
 801efda:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801efdc:	7dfb      	ldrb	r3, [r7, #23]
 801efde:	b29c      	uxth	r4, r3
 801efe0:	68b8      	ldr	r0, [r7, #8]
 801efe2:	f7f8 f978 	bl	80172d6 <lwip_htonl>
 801efe6:	4602      	mov	r2, r0
 801efe8:	8abb      	ldrh	r3, [r7, #20]
 801efea:	9303      	str	r3, [sp, #12]
 801efec:	2314      	movs	r3, #20
 801efee:	9302      	str	r3, [sp, #8]
 801eff0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801eff2:	9301      	str	r3, [sp, #4]
 801eff4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801eff6:	9300      	str	r3, [sp, #0]
 801eff8:	4613      	mov	r3, r2
 801effa:	2200      	movs	r2, #0
 801effc:	4621      	mov	r1, r4
 801effe:	6878      	ldr	r0, [r7, #4]
 801f000:	f7ff fe92 	bl	801ed28 <tcp_output_alloc_header_common>
 801f004:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801f006:	693b      	ldr	r3, [r7, #16]
 801f008:	2b00      	cmp	r3, #0
 801f00a:	d00c      	beq.n	801f026 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f00c:	7dfb      	ldrb	r3, [r7, #23]
 801f00e:	2200      	movs	r2, #0
 801f010:	6939      	ldr	r1, [r7, #16]
 801f012:	68f8      	ldr	r0, [r7, #12]
 801f014:	f7ff ff38 	bl	801ee88 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801f018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f01a:	683a      	ldr	r2, [r7, #0]
 801f01c:	6939      	ldr	r1, [r7, #16]
 801f01e:	68f8      	ldr	r0, [r7, #12]
 801f020:	f7ff ff72 	bl	801ef08 <tcp_output_control_segment>
 801f024:	e000      	b.n	801f028 <tcp_rst+0x8c>
    return;
 801f026:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801f028:	371c      	adds	r7, #28
 801f02a:	46bd      	mov	sp, r7
 801f02c:	bd90      	pop	{r4, r7, pc}
 801f02e:	bf00      	nop
 801f030:	08027644 	.word	0x08027644
 801f034:	08027dc8 	.word	0x08027dc8
 801f038:	08027698 	.word	0x08027698
 801f03c:	08027de4 	.word	0x08027de4

0801f040 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801f040:	b590      	push	{r4, r7, lr}
 801f042:	b087      	sub	sp, #28
 801f044:	af00      	add	r7, sp, #0
 801f046:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801f048:	2300      	movs	r3, #0
 801f04a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801f04c:	2300      	movs	r3, #0
 801f04e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	2b00      	cmp	r3, #0
 801f054:	d106      	bne.n	801f064 <tcp_send_empty_ack+0x24>
 801f056:	4b28      	ldr	r3, [pc, #160]	; (801f0f8 <tcp_send_empty_ack+0xb8>)
 801f058:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801f05c:	4927      	ldr	r1, [pc, #156]	; (801f0fc <tcp_send_empty_ack+0xbc>)
 801f05e:	4828      	ldr	r0, [pc, #160]	; (801f100 <tcp_send_empty_ack+0xc0>)
 801f060:	f004 ff4e 	bl	8023f00 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801f064:	7dfb      	ldrb	r3, [r7, #23]
 801f066:	009b      	lsls	r3, r3, #2
 801f068:	b2db      	uxtb	r3, r3
 801f06a:	f003 0304 	and.w	r3, r3, #4
 801f06e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801f070:	7d7b      	ldrb	r3, [r7, #21]
 801f072:	b29c      	uxth	r4, r3
 801f074:	687b      	ldr	r3, [r7, #4]
 801f076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f078:	4618      	mov	r0, r3
 801f07a:	f7f8 f92c 	bl	80172d6 <lwip_htonl>
 801f07e:	4603      	mov	r3, r0
 801f080:	2200      	movs	r2, #0
 801f082:	4621      	mov	r1, r4
 801f084:	6878      	ldr	r0, [r7, #4]
 801f086:	f7ff fec1 	bl	801ee0c <tcp_output_alloc_header>
 801f08a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f08c:	693b      	ldr	r3, [r7, #16]
 801f08e:	2b00      	cmp	r3, #0
 801f090:	d109      	bne.n	801f0a6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	8b5b      	ldrh	r3, [r3, #26]
 801f096:	f043 0303 	orr.w	r3, r3, #3
 801f09a:	b29a      	uxth	r2, r3
 801f09c:	687b      	ldr	r3, [r7, #4]
 801f09e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801f0a0:	f06f 0301 	mvn.w	r3, #1
 801f0a4:	e023      	b.n	801f0ee <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801f0a6:	7dbb      	ldrb	r3, [r7, #22]
 801f0a8:	7dfa      	ldrb	r2, [r7, #23]
 801f0aa:	6939      	ldr	r1, [r7, #16]
 801f0ac:	6878      	ldr	r0, [r7, #4]
 801f0ae:	f7ff feeb 	bl	801ee88 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f0b2:	687a      	ldr	r2, [r7, #4]
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	3304      	adds	r3, #4
 801f0b8:	6939      	ldr	r1, [r7, #16]
 801f0ba:	6878      	ldr	r0, [r7, #4]
 801f0bc:	f7ff ff24 	bl	801ef08 <tcp_output_control_segment>
 801f0c0:	4603      	mov	r3, r0
 801f0c2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801f0c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	d007      	beq.n	801f0dc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	8b5b      	ldrh	r3, [r3, #26]
 801f0d0:	f043 0303 	orr.w	r3, r3, #3
 801f0d4:	b29a      	uxth	r2, r3
 801f0d6:	687b      	ldr	r3, [r7, #4]
 801f0d8:	835a      	strh	r2, [r3, #26]
 801f0da:	e006      	b.n	801f0ea <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f0dc:	687b      	ldr	r3, [r7, #4]
 801f0de:	8b5b      	ldrh	r3, [r3, #26]
 801f0e0:	f023 0303 	bic.w	r3, r3, #3
 801f0e4:	b29a      	uxth	r2, r3
 801f0e6:	687b      	ldr	r3, [r7, #4]
 801f0e8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801f0ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f0ee:	4618      	mov	r0, r3
 801f0f0:	371c      	adds	r7, #28
 801f0f2:	46bd      	mov	sp, r7
 801f0f4:	bd90      	pop	{r4, r7, pc}
 801f0f6:	bf00      	nop
 801f0f8:	08027644 	.word	0x08027644
 801f0fc:	08027e00 	.word	0x08027e00
 801f100:	08027698 	.word	0x08027698

0801f104 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801f104:	b590      	push	{r4, r7, lr}
 801f106:	b087      	sub	sp, #28
 801f108:	af00      	add	r7, sp, #0
 801f10a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f10c:	2300      	movs	r3, #0
 801f10e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801f110:	687b      	ldr	r3, [r7, #4]
 801f112:	2b00      	cmp	r3, #0
 801f114:	d106      	bne.n	801f124 <tcp_keepalive+0x20>
 801f116:	4b18      	ldr	r3, [pc, #96]	; (801f178 <tcp_keepalive+0x74>)
 801f118:	f640 0224 	movw	r2, #2084	; 0x824
 801f11c:	4917      	ldr	r1, [pc, #92]	; (801f17c <tcp_keepalive+0x78>)
 801f11e:	4818      	ldr	r0, [pc, #96]	; (801f180 <tcp_keepalive+0x7c>)
 801f120:	f004 feee 	bl	8023f00 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801f124:	7dfb      	ldrb	r3, [r7, #23]
 801f126:	b29c      	uxth	r4, r3
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f12c:	3b01      	subs	r3, #1
 801f12e:	4618      	mov	r0, r3
 801f130:	f7f8 f8d1 	bl	80172d6 <lwip_htonl>
 801f134:	4603      	mov	r3, r0
 801f136:	2200      	movs	r2, #0
 801f138:	4621      	mov	r1, r4
 801f13a:	6878      	ldr	r0, [r7, #4]
 801f13c:	f7ff fe66 	bl	801ee0c <tcp_output_alloc_header>
 801f140:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f142:	693b      	ldr	r3, [r7, #16]
 801f144:	2b00      	cmp	r3, #0
 801f146:	d102      	bne.n	801f14e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801f148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f14c:	e010      	b.n	801f170 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f14e:	7dfb      	ldrb	r3, [r7, #23]
 801f150:	2200      	movs	r2, #0
 801f152:	6939      	ldr	r1, [r7, #16]
 801f154:	6878      	ldr	r0, [r7, #4]
 801f156:	f7ff fe97 	bl	801ee88 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f15a:	687a      	ldr	r2, [r7, #4]
 801f15c:	687b      	ldr	r3, [r7, #4]
 801f15e:	3304      	adds	r3, #4
 801f160:	6939      	ldr	r1, [r7, #16]
 801f162:	6878      	ldr	r0, [r7, #4]
 801f164:	f7ff fed0 	bl	801ef08 <tcp_output_control_segment>
 801f168:	4603      	mov	r3, r0
 801f16a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801f16c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f170:	4618      	mov	r0, r3
 801f172:	371c      	adds	r7, #28
 801f174:	46bd      	mov	sp, r7
 801f176:	bd90      	pop	{r4, r7, pc}
 801f178:	08027644 	.word	0x08027644
 801f17c:	08027e20 	.word	0x08027e20
 801f180:	08027698 	.word	0x08027698

0801f184 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801f184:	b590      	push	{r4, r7, lr}
 801f186:	b08b      	sub	sp, #44	; 0x2c
 801f188:	af00      	add	r7, sp, #0
 801f18a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f18c:	2300      	movs	r3, #0
 801f18e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801f192:	687b      	ldr	r3, [r7, #4]
 801f194:	2b00      	cmp	r3, #0
 801f196:	d106      	bne.n	801f1a6 <tcp_zero_window_probe+0x22>
 801f198:	4b4c      	ldr	r3, [pc, #304]	; (801f2cc <tcp_zero_window_probe+0x148>)
 801f19a:	f640 024f 	movw	r2, #2127	; 0x84f
 801f19e:	494c      	ldr	r1, [pc, #304]	; (801f2d0 <tcp_zero_window_probe+0x14c>)
 801f1a0:	484c      	ldr	r0, [pc, #304]	; (801f2d4 <tcp_zero_window_probe+0x150>)
 801f1a2:	f004 fead 	bl	8023f00 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801f1a6:	687b      	ldr	r3, [r7, #4]
 801f1a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f1aa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801f1ac:	6a3b      	ldr	r3, [r7, #32]
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	d101      	bne.n	801f1b6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801f1b2:	2300      	movs	r3, #0
 801f1b4:	e086      	b.n	801f2c4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801f1b6:	687b      	ldr	r3, [r7, #4]
 801f1b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801f1bc:	2bff      	cmp	r3, #255	; 0xff
 801f1be:	d007      	beq.n	801f1d0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801f1c6:	3301      	adds	r3, #1
 801f1c8:	b2da      	uxtb	r2, r3
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801f1d0:	6a3b      	ldr	r3, [r7, #32]
 801f1d2:	68db      	ldr	r3, [r3, #12]
 801f1d4:	899b      	ldrh	r3, [r3, #12]
 801f1d6:	b29b      	uxth	r3, r3
 801f1d8:	4618      	mov	r0, r3
 801f1da:	f7f8 f867 	bl	80172ac <lwip_htons>
 801f1de:	4603      	mov	r3, r0
 801f1e0:	b2db      	uxtb	r3, r3
 801f1e2:	f003 0301 	and.w	r3, r3, #1
 801f1e6:	2b00      	cmp	r3, #0
 801f1e8:	d005      	beq.n	801f1f6 <tcp_zero_window_probe+0x72>
 801f1ea:	6a3b      	ldr	r3, [r7, #32]
 801f1ec:	891b      	ldrh	r3, [r3, #8]
 801f1ee:	2b00      	cmp	r3, #0
 801f1f0:	d101      	bne.n	801f1f6 <tcp_zero_window_probe+0x72>
 801f1f2:	2301      	movs	r3, #1
 801f1f4:	e000      	b.n	801f1f8 <tcp_zero_window_probe+0x74>
 801f1f6:	2300      	movs	r3, #0
 801f1f8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801f1fa:	7ffb      	ldrb	r3, [r7, #31]
 801f1fc:	2b00      	cmp	r3, #0
 801f1fe:	bf0c      	ite	eq
 801f200:	2301      	moveq	r3, #1
 801f202:	2300      	movne	r3, #0
 801f204:	b2db      	uxtb	r3, r3
 801f206:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801f208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f20c:	b299      	uxth	r1, r3
 801f20e:	6a3b      	ldr	r3, [r7, #32]
 801f210:	68db      	ldr	r3, [r3, #12]
 801f212:	685b      	ldr	r3, [r3, #4]
 801f214:	8bba      	ldrh	r2, [r7, #28]
 801f216:	6878      	ldr	r0, [r7, #4]
 801f218:	f7ff fdf8 	bl	801ee0c <tcp_output_alloc_header>
 801f21c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801f21e:	69bb      	ldr	r3, [r7, #24]
 801f220:	2b00      	cmp	r3, #0
 801f222:	d102      	bne.n	801f22a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801f224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f228:	e04c      	b.n	801f2c4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801f22a:	69bb      	ldr	r3, [r7, #24]
 801f22c:	685b      	ldr	r3, [r3, #4]
 801f22e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801f230:	7ffb      	ldrb	r3, [r7, #31]
 801f232:	2b00      	cmp	r3, #0
 801f234:	d011      	beq.n	801f25a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801f236:	697b      	ldr	r3, [r7, #20]
 801f238:	899b      	ldrh	r3, [r3, #12]
 801f23a:	b29b      	uxth	r3, r3
 801f23c:	b21b      	sxth	r3, r3
 801f23e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801f242:	b21c      	sxth	r4, r3
 801f244:	2011      	movs	r0, #17
 801f246:	f7f8 f831 	bl	80172ac <lwip_htons>
 801f24a:	4603      	mov	r3, r0
 801f24c:	b21b      	sxth	r3, r3
 801f24e:	4323      	orrs	r3, r4
 801f250:	b21b      	sxth	r3, r3
 801f252:	b29a      	uxth	r2, r3
 801f254:	697b      	ldr	r3, [r7, #20]
 801f256:	819a      	strh	r2, [r3, #12]
 801f258:	e010      	b.n	801f27c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801f25a:	69bb      	ldr	r3, [r7, #24]
 801f25c:	685b      	ldr	r3, [r3, #4]
 801f25e:	3314      	adds	r3, #20
 801f260:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801f262:	6a3b      	ldr	r3, [r7, #32]
 801f264:	6858      	ldr	r0, [r3, #4]
 801f266:	6a3b      	ldr	r3, [r7, #32]
 801f268:	685b      	ldr	r3, [r3, #4]
 801f26a:	891a      	ldrh	r2, [r3, #8]
 801f26c:	6a3b      	ldr	r3, [r7, #32]
 801f26e:	891b      	ldrh	r3, [r3, #8]
 801f270:	1ad3      	subs	r3, r2, r3
 801f272:	b29b      	uxth	r3, r3
 801f274:	2201      	movs	r2, #1
 801f276:	6939      	ldr	r1, [r7, #16]
 801f278:	f7f9 fe10 	bl	8018e9c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801f27c:	6a3b      	ldr	r3, [r7, #32]
 801f27e:	68db      	ldr	r3, [r3, #12]
 801f280:	685b      	ldr	r3, [r3, #4]
 801f282:	4618      	mov	r0, r3
 801f284:	f7f8 f827 	bl	80172d6 <lwip_htonl>
 801f288:	4603      	mov	r3, r0
 801f28a:	3301      	adds	r3, #1
 801f28c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f28e:	687b      	ldr	r3, [r7, #4]
 801f290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f292:	68fb      	ldr	r3, [r7, #12]
 801f294:	1ad3      	subs	r3, r2, r3
 801f296:	2b00      	cmp	r3, #0
 801f298:	da02      	bge.n	801f2a0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801f29a:	687b      	ldr	r3, [r7, #4]
 801f29c:	68fa      	ldr	r2, [r7, #12]
 801f29e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f2a4:	2200      	movs	r2, #0
 801f2a6:	69b9      	ldr	r1, [r7, #24]
 801f2a8:	6878      	ldr	r0, [r7, #4]
 801f2aa:	f7ff fded 	bl	801ee88 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f2ae:	687a      	ldr	r2, [r7, #4]
 801f2b0:	687b      	ldr	r3, [r7, #4]
 801f2b2:	3304      	adds	r3, #4
 801f2b4:	69b9      	ldr	r1, [r7, #24]
 801f2b6:	6878      	ldr	r0, [r7, #4]
 801f2b8:	f7ff fe26 	bl	801ef08 <tcp_output_control_segment>
 801f2bc:	4603      	mov	r3, r0
 801f2be:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801f2c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801f2c4:	4618      	mov	r0, r3
 801f2c6:	372c      	adds	r7, #44	; 0x2c
 801f2c8:	46bd      	mov	sp, r7
 801f2ca:	bd90      	pop	{r4, r7, pc}
 801f2cc:	08027644 	.word	0x08027644
 801f2d0:	08027e3c 	.word	0x08027e3c
 801f2d4:	08027698 	.word	0x08027698

0801f2d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801f2d8:	b580      	push	{r7, lr}
 801f2da:	b082      	sub	sp, #8
 801f2dc:	af00      	add	r7, sp, #0
 801f2de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801f2e0:	f7f9 feca 	bl	8019078 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f2e4:	4b0a      	ldr	r3, [pc, #40]	; (801f310 <tcpip_tcp_timer+0x38>)
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	d103      	bne.n	801f2f4 <tcpip_tcp_timer+0x1c>
 801f2ec:	4b09      	ldr	r3, [pc, #36]	; (801f314 <tcpip_tcp_timer+0x3c>)
 801f2ee:	681b      	ldr	r3, [r3, #0]
 801f2f0:	2b00      	cmp	r3, #0
 801f2f2:	d005      	beq.n	801f300 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f2f4:	2200      	movs	r2, #0
 801f2f6:	4908      	ldr	r1, [pc, #32]	; (801f318 <tcpip_tcp_timer+0x40>)
 801f2f8:	20fa      	movs	r0, #250	; 0xfa
 801f2fa:	f000 f8f3 	bl	801f4e4 <sys_timeout>
 801f2fe:	e003      	b.n	801f308 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801f300:	4b06      	ldr	r3, [pc, #24]	; (801f31c <tcpip_tcp_timer+0x44>)
 801f302:	2200      	movs	r2, #0
 801f304:	601a      	str	r2, [r3, #0]
  }
}
 801f306:	bf00      	nop
 801f308:	bf00      	nop
 801f30a:	3708      	adds	r7, #8
 801f30c:	46bd      	mov	sp, r7
 801f30e:	bd80      	pop	{r7, pc}
 801f310:	2000bfb8 	.word	0x2000bfb8
 801f314:	2000bfbc 	.word	0x2000bfbc
 801f318:	0801f2d9 	.word	0x0801f2d9
 801f31c:	2000c004 	.word	0x2000c004

0801f320 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801f320:	b580      	push	{r7, lr}
 801f322:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f324:	4b0a      	ldr	r3, [pc, #40]	; (801f350 <tcp_timer_needed+0x30>)
 801f326:	681b      	ldr	r3, [r3, #0]
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d10f      	bne.n	801f34c <tcp_timer_needed+0x2c>
 801f32c:	4b09      	ldr	r3, [pc, #36]	; (801f354 <tcp_timer_needed+0x34>)
 801f32e:	681b      	ldr	r3, [r3, #0]
 801f330:	2b00      	cmp	r3, #0
 801f332:	d103      	bne.n	801f33c <tcp_timer_needed+0x1c>
 801f334:	4b08      	ldr	r3, [pc, #32]	; (801f358 <tcp_timer_needed+0x38>)
 801f336:	681b      	ldr	r3, [r3, #0]
 801f338:	2b00      	cmp	r3, #0
 801f33a:	d007      	beq.n	801f34c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801f33c:	4b04      	ldr	r3, [pc, #16]	; (801f350 <tcp_timer_needed+0x30>)
 801f33e:	2201      	movs	r2, #1
 801f340:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f342:	2200      	movs	r2, #0
 801f344:	4905      	ldr	r1, [pc, #20]	; (801f35c <tcp_timer_needed+0x3c>)
 801f346:	20fa      	movs	r0, #250	; 0xfa
 801f348:	f000 f8cc 	bl	801f4e4 <sys_timeout>
  }
}
 801f34c:	bf00      	nop
 801f34e:	bd80      	pop	{r7, pc}
 801f350:	2000c004 	.word	0x2000c004
 801f354:	2000bfb8 	.word	0x2000bfb8
 801f358:	2000bfbc 	.word	0x2000bfbc
 801f35c:	0801f2d9 	.word	0x0801f2d9

0801f360 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f360:	b580      	push	{r7, lr}
 801f362:	b086      	sub	sp, #24
 801f364:	af00      	add	r7, sp, #0
 801f366:	60f8      	str	r0, [r7, #12]
 801f368:	60b9      	str	r1, [r7, #8]
 801f36a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f36c:	200a      	movs	r0, #10
 801f36e:	f7f8 fc75 	bl	8017c5c <memp_malloc>
 801f372:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f374:	693b      	ldr	r3, [r7, #16]
 801f376:	2b00      	cmp	r3, #0
 801f378:	d109      	bne.n	801f38e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f37a:	693b      	ldr	r3, [r7, #16]
 801f37c:	2b00      	cmp	r3, #0
 801f37e:	d151      	bne.n	801f424 <sys_timeout_abs+0xc4>
 801f380:	4b2a      	ldr	r3, [pc, #168]	; (801f42c <sys_timeout_abs+0xcc>)
 801f382:	22be      	movs	r2, #190	; 0xbe
 801f384:	492a      	ldr	r1, [pc, #168]	; (801f430 <sys_timeout_abs+0xd0>)
 801f386:	482b      	ldr	r0, [pc, #172]	; (801f434 <sys_timeout_abs+0xd4>)
 801f388:	f004 fdba 	bl	8023f00 <iprintf>
    return;
 801f38c:	e04a      	b.n	801f424 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f38e:	693b      	ldr	r3, [r7, #16]
 801f390:	2200      	movs	r2, #0
 801f392:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f394:	693b      	ldr	r3, [r7, #16]
 801f396:	68ba      	ldr	r2, [r7, #8]
 801f398:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f39a:	693b      	ldr	r3, [r7, #16]
 801f39c:	687a      	ldr	r2, [r7, #4]
 801f39e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f3a0:	693b      	ldr	r3, [r7, #16]
 801f3a2:	68fa      	ldr	r2, [r7, #12]
 801f3a4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f3a6:	4b24      	ldr	r3, [pc, #144]	; (801f438 <sys_timeout_abs+0xd8>)
 801f3a8:	681b      	ldr	r3, [r3, #0]
 801f3aa:	2b00      	cmp	r3, #0
 801f3ac:	d103      	bne.n	801f3b6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f3ae:	4a22      	ldr	r2, [pc, #136]	; (801f438 <sys_timeout_abs+0xd8>)
 801f3b0:	693b      	ldr	r3, [r7, #16]
 801f3b2:	6013      	str	r3, [r2, #0]
    return;
 801f3b4:	e037      	b.n	801f426 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f3b6:	693b      	ldr	r3, [r7, #16]
 801f3b8:	685a      	ldr	r2, [r3, #4]
 801f3ba:	4b1f      	ldr	r3, [pc, #124]	; (801f438 <sys_timeout_abs+0xd8>)
 801f3bc:	681b      	ldr	r3, [r3, #0]
 801f3be:	685b      	ldr	r3, [r3, #4]
 801f3c0:	1ad3      	subs	r3, r2, r3
 801f3c2:	0fdb      	lsrs	r3, r3, #31
 801f3c4:	f003 0301 	and.w	r3, r3, #1
 801f3c8:	b2db      	uxtb	r3, r3
 801f3ca:	2b00      	cmp	r3, #0
 801f3cc:	d007      	beq.n	801f3de <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f3ce:	4b1a      	ldr	r3, [pc, #104]	; (801f438 <sys_timeout_abs+0xd8>)
 801f3d0:	681a      	ldr	r2, [r3, #0]
 801f3d2:	693b      	ldr	r3, [r7, #16]
 801f3d4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f3d6:	4a18      	ldr	r2, [pc, #96]	; (801f438 <sys_timeout_abs+0xd8>)
 801f3d8:	693b      	ldr	r3, [r7, #16]
 801f3da:	6013      	str	r3, [r2, #0]
 801f3dc:	e023      	b.n	801f426 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f3de:	4b16      	ldr	r3, [pc, #88]	; (801f438 <sys_timeout_abs+0xd8>)
 801f3e0:	681b      	ldr	r3, [r3, #0]
 801f3e2:	617b      	str	r3, [r7, #20]
 801f3e4:	e01a      	b.n	801f41c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f3e6:	697b      	ldr	r3, [r7, #20]
 801f3e8:	681b      	ldr	r3, [r3, #0]
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	d00b      	beq.n	801f406 <sys_timeout_abs+0xa6>
 801f3ee:	693b      	ldr	r3, [r7, #16]
 801f3f0:	685a      	ldr	r2, [r3, #4]
 801f3f2:	697b      	ldr	r3, [r7, #20]
 801f3f4:	681b      	ldr	r3, [r3, #0]
 801f3f6:	685b      	ldr	r3, [r3, #4]
 801f3f8:	1ad3      	subs	r3, r2, r3
 801f3fa:	0fdb      	lsrs	r3, r3, #31
 801f3fc:	f003 0301 	and.w	r3, r3, #1
 801f400:	b2db      	uxtb	r3, r3
 801f402:	2b00      	cmp	r3, #0
 801f404:	d007      	beq.n	801f416 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f406:	697b      	ldr	r3, [r7, #20]
 801f408:	681a      	ldr	r2, [r3, #0]
 801f40a:	693b      	ldr	r3, [r7, #16]
 801f40c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f40e:	697b      	ldr	r3, [r7, #20]
 801f410:	693a      	ldr	r2, [r7, #16]
 801f412:	601a      	str	r2, [r3, #0]
        break;
 801f414:	e007      	b.n	801f426 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f416:	697b      	ldr	r3, [r7, #20]
 801f418:	681b      	ldr	r3, [r3, #0]
 801f41a:	617b      	str	r3, [r7, #20]
 801f41c:	697b      	ldr	r3, [r7, #20]
 801f41e:	2b00      	cmp	r3, #0
 801f420:	d1e1      	bne.n	801f3e6 <sys_timeout_abs+0x86>
 801f422:	e000      	b.n	801f426 <sys_timeout_abs+0xc6>
    return;
 801f424:	bf00      	nop
      }
    }
  }
}
 801f426:	3718      	adds	r7, #24
 801f428:	46bd      	mov	sp, r7
 801f42a:	bd80      	pop	{r7, pc}
 801f42c:	08027e60 	.word	0x08027e60
 801f430:	08027e94 	.word	0x08027e94
 801f434:	08027ed4 	.word	0x08027ed4
 801f438:	2000bffc 	.word	0x2000bffc

0801f43c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f43c:	b580      	push	{r7, lr}
 801f43e:	b086      	sub	sp, #24
 801f440:	af00      	add	r7, sp, #0
 801f442:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f448:	697b      	ldr	r3, [r7, #20]
 801f44a:	685b      	ldr	r3, [r3, #4]
 801f44c:	4798      	blx	r3

  now = sys_now();
 801f44e:	f7f2 f85b 	bl	8011508 <sys_now>
 801f452:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f454:	697b      	ldr	r3, [r7, #20]
 801f456:	681a      	ldr	r2, [r3, #0]
 801f458:	4b0f      	ldr	r3, [pc, #60]	; (801f498 <lwip_cyclic_timer+0x5c>)
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	4413      	add	r3, r2
 801f45e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f460:	68fa      	ldr	r2, [r7, #12]
 801f462:	693b      	ldr	r3, [r7, #16]
 801f464:	1ad3      	subs	r3, r2, r3
 801f466:	0fdb      	lsrs	r3, r3, #31
 801f468:	f003 0301 	and.w	r3, r3, #1
 801f46c:	b2db      	uxtb	r3, r3
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d009      	beq.n	801f486 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f472:	697b      	ldr	r3, [r7, #20]
 801f474:	681a      	ldr	r2, [r3, #0]
 801f476:	693b      	ldr	r3, [r7, #16]
 801f478:	4413      	add	r3, r2
 801f47a:	687a      	ldr	r2, [r7, #4]
 801f47c:	4907      	ldr	r1, [pc, #28]	; (801f49c <lwip_cyclic_timer+0x60>)
 801f47e:	4618      	mov	r0, r3
 801f480:	f7ff ff6e 	bl	801f360 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f484:	e004      	b.n	801f490 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f486:	687a      	ldr	r2, [r7, #4]
 801f488:	4904      	ldr	r1, [pc, #16]	; (801f49c <lwip_cyclic_timer+0x60>)
 801f48a:	68f8      	ldr	r0, [r7, #12]
 801f48c:	f7ff ff68 	bl	801f360 <sys_timeout_abs>
}
 801f490:	bf00      	nop
 801f492:	3718      	adds	r7, #24
 801f494:	46bd      	mov	sp, r7
 801f496:	bd80      	pop	{r7, pc}
 801f498:	2000c000 	.word	0x2000c000
 801f49c:	0801f43d 	.word	0x0801f43d

0801f4a0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f4a0:	b580      	push	{r7, lr}
 801f4a2:	b082      	sub	sp, #8
 801f4a4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f4a6:	2301      	movs	r3, #1
 801f4a8:	607b      	str	r3, [r7, #4]
 801f4aa:	e00e      	b.n	801f4ca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f4ac:	4a0b      	ldr	r2, [pc, #44]	; (801f4dc <sys_timeouts_init+0x3c>)
 801f4ae:	687b      	ldr	r3, [r7, #4]
 801f4b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f4b4:	687b      	ldr	r3, [r7, #4]
 801f4b6:	00db      	lsls	r3, r3, #3
 801f4b8:	4a08      	ldr	r2, [pc, #32]	; (801f4dc <sys_timeouts_init+0x3c>)
 801f4ba:	4413      	add	r3, r2
 801f4bc:	461a      	mov	r2, r3
 801f4be:	4908      	ldr	r1, [pc, #32]	; (801f4e0 <sys_timeouts_init+0x40>)
 801f4c0:	f000 f810 	bl	801f4e4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f4c4:	687b      	ldr	r3, [r7, #4]
 801f4c6:	3301      	adds	r3, #1
 801f4c8:	607b      	str	r3, [r7, #4]
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	2b02      	cmp	r3, #2
 801f4ce:	d9ed      	bls.n	801f4ac <sys_timeouts_init+0xc>
  }
}
 801f4d0:	bf00      	nop
 801f4d2:	bf00      	nop
 801f4d4:	3708      	adds	r7, #8
 801f4d6:	46bd      	mov	sp, r7
 801f4d8:	bd80      	pop	{r7, pc}
 801f4da:	bf00      	nop
 801f4dc:	08028ae0 	.word	0x08028ae0
 801f4e0:	0801f43d 	.word	0x0801f43d

0801f4e4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f4e4:	b580      	push	{r7, lr}
 801f4e6:	b086      	sub	sp, #24
 801f4e8:	af00      	add	r7, sp, #0
 801f4ea:	60f8      	str	r0, [r7, #12]
 801f4ec:	60b9      	str	r1, [r7, #8]
 801f4ee:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f4f0:	68fb      	ldr	r3, [r7, #12]
 801f4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f4f6:	d306      	bcc.n	801f506 <sys_timeout+0x22>
 801f4f8:	4b0a      	ldr	r3, [pc, #40]	; (801f524 <sys_timeout+0x40>)
 801f4fa:	f240 1229 	movw	r2, #297	; 0x129
 801f4fe:	490a      	ldr	r1, [pc, #40]	; (801f528 <sys_timeout+0x44>)
 801f500:	480a      	ldr	r0, [pc, #40]	; (801f52c <sys_timeout+0x48>)
 801f502:	f004 fcfd 	bl	8023f00 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f506:	f7f1 ffff 	bl	8011508 <sys_now>
 801f50a:	4602      	mov	r2, r0
 801f50c:	68fb      	ldr	r3, [r7, #12]
 801f50e:	4413      	add	r3, r2
 801f510:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f512:	687a      	ldr	r2, [r7, #4]
 801f514:	68b9      	ldr	r1, [r7, #8]
 801f516:	6978      	ldr	r0, [r7, #20]
 801f518:	f7ff ff22 	bl	801f360 <sys_timeout_abs>
#endif
}
 801f51c:	bf00      	nop
 801f51e:	3718      	adds	r7, #24
 801f520:	46bd      	mov	sp, r7
 801f522:	bd80      	pop	{r7, pc}
 801f524:	08027e60 	.word	0x08027e60
 801f528:	08027efc 	.word	0x08027efc
 801f52c:	08027ed4 	.word	0x08027ed4

0801f530 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f530:	b580      	push	{r7, lr}
 801f532:	b084      	sub	sp, #16
 801f534:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f536:	f7f1 ffe7 	bl	8011508 <sys_now>
 801f53a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801f53c:	4b17      	ldr	r3, [pc, #92]	; (801f59c <sys_check_timeouts+0x6c>)
 801f53e:	681b      	ldr	r3, [r3, #0]
 801f540:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801f542:	68bb      	ldr	r3, [r7, #8]
 801f544:	2b00      	cmp	r3, #0
 801f546:	d022      	beq.n	801f58e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f548:	68bb      	ldr	r3, [r7, #8]
 801f54a:	685b      	ldr	r3, [r3, #4]
 801f54c:	68fa      	ldr	r2, [r7, #12]
 801f54e:	1ad3      	subs	r3, r2, r3
 801f550:	0fdb      	lsrs	r3, r3, #31
 801f552:	f003 0301 	and.w	r3, r3, #1
 801f556:	b2db      	uxtb	r3, r3
 801f558:	2b00      	cmp	r3, #0
 801f55a:	d11a      	bne.n	801f592 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801f55c:	68bb      	ldr	r3, [r7, #8]
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	4a0e      	ldr	r2, [pc, #56]	; (801f59c <sys_check_timeouts+0x6c>)
 801f562:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801f564:	68bb      	ldr	r3, [r7, #8]
 801f566:	689b      	ldr	r3, [r3, #8]
 801f568:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801f56a:	68bb      	ldr	r3, [r7, #8]
 801f56c:	68db      	ldr	r3, [r3, #12]
 801f56e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801f570:	68bb      	ldr	r3, [r7, #8]
 801f572:	685b      	ldr	r3, [r3, #4]
 801f574:	4a0a      	ldr	r2, [pc, #40]	; (801f5a0 <sys_check_timeouts+0x70>)
 801f576:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f578:	68b9      	ldr	r1, [r7, #8]
 801f57a:	200a      	movs	r0, #10
 801f57c:	f7f8 fbe4 	bl	8017d48 <memp_free>
    if (handler != NULL) {
 801f580:	687b      	ldr	r3, [r7, #4]
 801f582:	2b00      	cmp	r3, #0
 801f584:	d0da      	beq.n	801f53c <sys_check_timeouts+0xc>
      handler(arg);
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	6838      	ldr	r0, [r7, #0]
 801f58a:	4798      	blx	r3
  do {
 801f58c:	e7d6      	b.n	801f53c <sys_check_timeouts+0xc>
      return;
 801f58e:	bf00      	nop
 801f590:	e000      	b.n	801f594 <sys_check_timeouts+0x64>
      return;
 801f592:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f594:	3710      	adds	r7, #16
 801f596:	46bd      	mov	sp, r7
 801f598:	bd80      	pop	{r7, pc}
 801f59a:	bf00      	nop
 801f59c:	2000bffc 	.word	0x2000bffc
 801f5a0:	2000c000 	.word	0x2000c000

0801f5a4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801f5a4:	b580      	push	{r7, lr}
 801f5a6:	b082      	sub	sp, #8
 801f5a8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f5aa:	4b16      	ldr	r3, [pc, #88]	; (801f604 <sys_timeouts_sleeptime+0x60>)
 801f5ac:	681b      	ldr	r3, [r3, #0]
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	d102      	bne.n	801f5b8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801f5b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f5b6:	e020      	b.n	801f5fa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801f5b8:	f7f1 ffa6 	bl	8011508 <sys_now>
 801f5bc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801f5be:	4b11      	ldr	r3, [pc, #68]	; (801f604 <sys_timeouts_sleeptime+0x60>)
 801f5c0:	681b      	ldr	r3, [r3, #0]
 801f5c2:	685a      	ldr	r2, [r3, #4]
 801f5c4:	687b      	ldr	r3, [r7, #4]
 801f5c6:	1ad3      	subs	r3, r2, r3
 801f5c8:	0fdb      	lsrs	r3, r3, #31
 801f5ca:	f003 0301 	and.w	r3, r3, #1
 801f5ce:	b2db      	uxtb	r3, r3
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	d001      	beq.n	801f5d8 <sys_timeouts_sleeptime+0x34>
    return 0;
 801f5d4:	2300      	movs	r3, #0
 801f5d6:	e010      	b.n	801f5fa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801f5d8:	4b0a      	ldr	r3, [pc, #40]	; (801f604 <sys_timeouts_sleeptime+0x60>)
 801f5da:	681b      	ldr	r3, [r3, #0]
 801f5dc:	685a      	ldr	r2, [r3, #4]
 801f5de:	687b      	ldr	r3, [r7, #4]
 801f5e0:	1ad3      	subs	r3, r2, r3
 801f5e2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801f5e4:	683b      	ldr	r3, [r7, #0]
 801f5e6:	2b00      	cmp	r3, #0
 801f5e8:	da06      	bge.n	801f5f8 <sys_timeouts_sleeptime+0x54>
 801f5ea:	4b07      	ldr	r3, [pc, #28]	; (801f608 <sys_timeouts_sleeptime+0x64>)
 801f5ec:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801f5f0:	4906      	ldr	r1, [pc, #24]	; (801f60c <sys_timeouts_sleeptime+0x68>)
 801f5f2:	4807      	ldr	r0, [pc, #28]	; (801f610 <sys_timeouts_sleeptime+0x6c>)
 801f5f4:	f004 fc84 	bl	8023f00 <iprintf>
    return ret;
 801f5f8:	683b      	ldr	r3, [r7, #0]
  }
}
 801f5fa:	4618      	mov	r0, r3
 801f5fc:	3708      	adds	r7, #8
 801f5fe:	46bd      	mov	sp, r7
 801f600:	bd80      	pop	{r7, pc}
 801f602:	bf00      	nop
 801f604:	2000bffc 	.word	0x2000bffc
 801f608:	08027e60 	.word	0x08027e60
 801f60c:	08027f34 	.word	0x08027f34
 801f610:	08027ed4 	.word	0x08027ed4

0801f614 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f614:	b580      	push	{r7, lr}
 801f616:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f618:	f004 fc8a 	bl	8023f30 <rand>
 801f61c:	4603      	mov	r3, r0
 801f61e:	b29b      	uxth	r3, r3
 801f620:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f624:	b29b      	uxth	r3, r3
 801f626:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f62a:	b29a      	uxth	r2, r3
 801f62c:	4b01      	ldr	r3, [pc, #4]	; (801f634 <udp_init+0x20>)
 801f62e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f630:	bf00      	nop
 801f632:	bd80      	pop	{r7, pc}
 801f634:	20000038 	.word	0x20000038

0801f638 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f638:	b480      	push	{r7}
 801f63a:	b083      	sub	sp, #12
 801f63c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f63e:	2300      	movs	r3, #0
 801f640:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f642:	4b17      	ldr	r3, [pc, #92]	; (801f6a0 <udp_new_port+0x68>)
 801f644:	881b      	ldrh	r3, [r3, #0]
 801f646:	1c5a      	adds	r2, r3, #1
 801f648:	b291      	uxth	r1, r2
 801f64a:	4a15      	ldr	r2, [pc, #84]	; (801f6a0 <udp_new_port+0x68>)
 801f64c:	8011      	strh	r1, [r2, #0]
 801f64e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f652:	4293      	cmp	r3, r2
 801f654:	d103      	bne.n	801f65e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f656:	4b12      	ldr	r3, [pc, #72]	; (801f6a0 <udp_new_port+0x68>)
 801f658:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f65c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f65e:	4b11      	ldr	r3, [pc, #68]	; (801f6a4 <udp_new_port+0x6c>)
 801f660:	681b      	ldr	r3, [r3, #0]
 801f662:	603b      	str	r3, [r7, #0]
 801f664:	e011      	b.n	801f68a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f666:	683b      	ldr	r3, [r7, #0]
 801f668:	8a5a      	ldrh	r2, [r3, #18]
 801f66a:	4b0d      	ldr	r3, [pc, #52]	; (801f6a0 <udp_new_port+0x68>)
 801f66c:	881b      	ldrh	r3, [r3, #0]
 801f66e:	429a      	cmp	r2, r3
 801f670:	d108      	bne.n	801f684 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f672:	88fb      	ldrh	r3, [r7, #6]
 801f674:	3301      	adds	r3, #1
 801f676:	80fb      	strh	r3, [r7, #6]
 801f678:	88fb      	ldrh	r3, [r7, #6]
 801f67a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f67e:	d3e0      	bcc.n	801f642 <udp_new_port+0xa>
        return 0;
 801f680:	2300      	movs	r3, #0
 801f682:	e007      	b.n	801f694 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f684:	683b      	ldr	r3, [r7, #0]
 801f686:	68db      	ldr	r3, [r3, #12]
 801f688:	603b      	str	r3, [r7, #0]
 801f68a:	683b      	ldr	r3, [r7, #0]
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	d1ea      	bne.n	801f666 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f690:	4b03      	ldr	r3, [pc, #12]	; (801f6a0 <udp_new_port+0x68>)
 801f692:	881b      	ldrh	r3, [r3, #0]
}
 801f694:	4618      	mov	r0, r3
 801f696:	370c      	adds	r7, #12
 801f698:	46bd      	mov	sp, r7
 801f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f69e:	4770      	bx	lr
 801f6a0:	20000038 	.word	0x20000038
 801f6a4:	2000c008 	.word	0x2000c008

0801f6a8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f6a8:	b580      	push	{r7, lr}
 801f6aa:	b084      	sub	sp, #16
 801f6ac:	af00      	add	r7, sp, #0
 801f6ae:	60f8      	str	r0, [r7, #12]
 801f6b0:	60b9      	str	r1, [r7, #8]
 801f6b2:	4613      	mov	r3, r2
 801f6b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f6b6:	68fb      	ldr	r3, [r7, #12]
 801f6b8:	2b00      	cmp	r3, #0
 801f6ba:	d105      	bne.n	801f6c8 <udp_input_local_match+0x20>
 801f6bc:	4b27      	ldr	r3, [pc, #156]	; (801f75c <udp_input_local_match+0xb4>)
 801f6be:	2287      	movs	r2, #135	; 0x87
 801f6c0:	4927      	ldr	r1, [pc, #156]	; (801f760 <udp_input_local_match+0xb8>)
 801f6c2:	4828      	ldr	r0, [pc, #160]	; (801f764 <udp_input_local_match+0xbc>)
 801f6c4:	f004 fc1c 	bl	8023f00 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f6c8:	68bb      	ldr	r3, [r7, #8]
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	d105      	bne.n	801f6da <udp_input_local_match+0x32>
 801f6ce:	4b23      	ldr	r3, [pc, #140]	; (801f75c <udp_input_local_match+0xb4>)
 801f6d0:	2288      	movs	r2, #136	; 0x88
 801f6d2:	4925      	ldr	r1, [pc, #148]	; (801f768 <udp_input_local_match+0xc0>)
 801f6d4:	4823      	ldr	r0, [pc, #140]	; (801f764 <udp_input_local_match+0xbc>)
 801f6d6:	f004 fc13 	bl	8023f00 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f6da:	68fb      	ldr	r3, [r7, #12]
 801f6dc:	7a1b      	ldrb	r3, [r3, #8]
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	d00b      	beq.n	801f6fa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f6e2:	68fb      	ldr	r3, [r7, #12]
 801f6e4:	7a1a      	ldrb	r2, [r3, #8]
 801f6e6:	4b21      	ldr	r3, [pc, #132]	; (801f76c <udp_input_local_match+0xc4>)
 801f6e8:	685b      	ldr	r3, [r3, #4]
 801f6ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f6ee:	3301      	adds	r3, #1
 801f6f0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f6f2:	429a      	cmp	r2, r3
 801f6f4:	d001      	beq.n	801f6fa <udp_input_local_match+0x52>
    return 0;
 801f6f6:	2300      	movs	r3, #0
 801f6f8:	e02b      	b.n	801f752 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f6fa:	79fb      	ldrb	r3, [r7, #7]
 801f6fc:	2b00      	cmp	r3, #0
 801f6fe:	d018      	beq.n	801f732 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f700:	68fb      	ldr	r3, [r7, #12]
 801f702:	2b00      	cmp	r3, #0
 801f704:	d013      	beq.n	801f72e <udp_input_local_match+0x86>
 801f706:	68fb      	ldr	r3, [r7, #12]
 801f708:	681b      	ldr	r3, [r3, #0]
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	d00f      	beq.n	801f72e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f70e:	4b17      	ldr	r3, [pc, #92]	; (801f76c <udp_input_local_match+0xc4>)
 801f710:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f716:	d00a      	beq.n	801f72e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f718:	68fb      	ldr	r3, [r7, #12]
 801f71a:	681a      	ldr	r2, [r3, #0]
 801f71c:	4b13      	ldr	r3, [pc, #76]	; (801f76c <udp_input_local_match+0xc4>)
 801f71e:	695b      	ldr	r3, [r3, #20]
 801f720:	405a      	eors	r2, r3
 801f722:	68bb      	ldr	r3, [r7, #8]
 801f724:	3308      	adds	r3, #8
 801f726:	681b      	ldr	r3, [r3, #0]
 801f728:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f72a:	2b00      	cmp	r3, #0
 801f72c:	d110      	bne.n	801f750 <udp_input_local_match+0xa8>
          return 1;
 801f72e:	2301      	movs	r3, #1
 801f730:	e00f      	b.n	801f752 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f732:	68fb      	ldr	r3, [r7, #12]
 801f734:	2b00      	cmp	r3, #0
 801f736:	d009      	beq.n	801f74c <udp_input_local_match+0xa4>
 801f738:	68fb      	ldr	r3, [r7, #12]
 801f73a:	681b      	ldr	r3, [r3, #0]
 801f73c:	2b00      	cmp	r3, #0
 801f73e:	d005      	beq.n	801f74c <udp_input_local_match+0xa4>
 801f740:	68fb      	ldr	r3, [r7, #12]
 801f742:	681a      	ldr	r2, [r3, #0]
 801f744:	4b09      	ldr	r3, [pc, #36]	; (801f76c <udp_input_local_match+0xc4>)
 801f746:	695b      	ldr	r3, [r3, #20]
 801f748:	429a      	cmp	r2, r3
 801f74a:	d101      	bne.n	801f750 <udp_input_local_match+0xa8>
        return 1;
 801f74c:	2301      	movs	r3, #1
 801f74e:	e000      	b.n	801f752 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f750:	2300      	movs	r3, #0
}
 801f752:	4618      	mov	r0, r3
 801f754:	3710      	adds	r7, #16
 801f756:	46bd      	mov	sp, r7
 801f758:	bd80      	pop	{r7, pc}
 801f75a:	bf00      	nop
 801f75c:	08027f48 	.word	0x08027f48
 801f760:	08027f78 	.word	0x08027f78
 801f764:	08027f9c 	.word	0x08027f9c
 801f768:	08027fc4 	.word	0x08027fc4
 801f76c:	20006698 	.word	0x20006698

0801f770 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f770:	b590      	push	{r4, r7, lr}
 801f772:	b08d      	sub	sp, #52	; 0x34
 801f774:	af02      	add	r7, sp, #8
 801f776:	6078      	str	r0, [r7, #4]
 801f778:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f77a:	2300      	movs	r3, #0
 801f77c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f77e:	687b      	ldr	r3, [r7, #4]
 801f780:	2b00      	cmp	r3, #0
 801f782:	d105      	bne.n	801f790 <udp_input+0x20>
 801f784:	4b7c      	ldr	r3, [pc, #496]	; (801f978 <udp_input+0x208>)
 801f786:	22cf      	movs	r2, #207	; 0xcf
 801f788:	497c      	ldr	r1, [pc, #496]	; (801f97c <udp_input+0x20c>)
 801f78a:	487d      	ldr	r0, [pc, #500]	; (801f980 <udp_input+0x210>)
 801f78c:	f004 fbb8 	bl	8023f00 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f790:	683b      	ldr	r3, [r7, #0]
 801f792:	2b00      	cmp	r3, #0
 801f794:	d105      	bne.n	801f7a2 <udp_input+0x32>
 801f796:	4b78      	ldr	r3, [pc, #480]	; (801f978 <udp_input+0x208>)
 801f798:	22d0      	movs	r2, #208	; 0xd0
 801f79a:	497a      	ldr	r1, [pc, #488]	; (801f984 <udp_input+0x214>)
 801f79c:	4878      	ldr	r0, [pc, #480]	; (801f980 <udp_input+0x210>)
 801f79e:	f004 fbaf 	bl	8023f00 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f7a2:	687b      	ldr	r3, [r7, #4]
 801f7a4:	895b      	ldrh	r3, [r3, #10]
 801f7a6:	2b07      	cmp	r3, #7
 801f7a8:	d803      	bhi.n	801f7b2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f7aa:	6878      	ldr	r0, [r7, #4]
 801f7ac:	f7f9 f970 	bl	8018a90 <pbuf_free>
    goto end;
 801f7b0:	e0de      	b.n	801f970 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f7b2:	687b      	ldr	r3, [r7, #4]
 801f7b4:	685b      	ldr	r3, [r3, #4]
 801f7b6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f7b8:	4b73      	ldr	r3, [pc, #460]	; (801f988 <udp_input+0x218>)
 801f7ba:	695b      	ldr	r3, [r3, #20]
 801f7bc:	4a72      	ldr	r2, [pc, #456]	; (801f988 <udp_input+0x218>)
 801f7be:	6812      	ldr	r2, [r2, #0]
 801f7c0:	4611      	mov	r1, r2
 801f7c2:	4618      	mov	r0, r3
 801f7c4:	f001 ffee 	bl	80217a4 <ip4_addr_isbroadcast_u32>
 801f7c8:	4603      	mov	r3, r0
 801f7ca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f7cc:	697b      	ldr	r3, [r7, #20]
 801f7ce:	881b      	ldrh	r3, [r3, #0]
 801f7d0:	b29b      	uxth	r3, r3
 801f7d2:	4618      	mov	r0, r3
 801f7d4:	f7f7 fd6a 	bl	80172ac <lwip_htons>
 801f7d8:	4603      	mov	r3, r0
 801f7da:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f7dc:	697b      	ldr	r3, [r7, #20]
 801f7de:	885b      	ldrh	r3, [r3, #2]
 801f7e0:	b29b      	uxth	r3, r3
 801f7e2:	4618      	mov	r0, r3
 801f7e4:	f7f7 fd62 	bl	80172ac <lwip_htons>
 801f7e8:	4603      	mov	r3, r0
 801f7ea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f7ec:	2300      	movs	r3, #0
 801f7ee:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f7f0:	2300      	movs	r3, #0
 801f7f2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f7f4:	2300      	movs	r3, #0
 801f7f6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f7f8:	4b64      	ldr	r3, [pc, #400]	; (801f98c <udp_input+0x21c>)
 801f7fa:	681b      	ldr	r3, [r3, #0]
 801f7fc:	627b      	str	r3, [r7, #36]	; 0x24
 801f7fe:	e054      	b.n	801f8aa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f802:	8a5b      	ldrh	r3, [r3, #18]
 801f804:	89fa      	ldrh	r2, [r7, #14]
 801f806:	429a      	cmp	r2, r3
 801f808:	d14a      	bne.n	801f8a0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f80a:	7cfb      	ldrb	r3, [r7, #19]
 801f80c:	461a      	mov	r2, r3
 801f80e:	6839      	ldr	r1, [r7, #0]
 801f810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f812:	f7ff ff49 	bl	801f6a8 <udp_input_local_match>
 801f816:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f818:	2b00      	cmp	r3, #0
 801f81a:	d041      	beq.n	801f8a0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f81e:	7c1b      	ldrb	r3, [r3, #16]
 801f820:	f003 0304 	and.w	r3, r3, #4
 801f824:	2b00      	cmp	r3, #0
 801f826:	d11d      	bne.n	801f864 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801f828:	69fb      	ldr	r3, [r7, #28]
 801f82a:	2b00      	cmp	r3, #0
 801f82c:	d102      	bne.n	801f834 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801f82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f830:	61fb      	str	r3, [r7, #28]
 801f832:	e017      	b.n	801f864 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f834:	7cfb      	ldrb	r3, [r7, #19]
 801f836:	2b00      	cmp	r3, #0
 801f838:	d014      	beq.n	801f864 <udp_input+0xf4>
 801f83a:	4b53      	ldr	r3, [pc, #332]	; (801f988 <udp_input+0x218>)
 801f83c:	695b      	ldr	r3, [r3, #20]
 801f83e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f842:	d10f      	bne.n	801f864 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f844:	69fb      	ldr	r3, [r7, #28]
 801f846:	681a      	ldr	r2, [r3, #0]
 801f848:	683b      	ldr	r3, [r7, #0]
 801f84a:	3304      	adds	r3, #4
 801f84c:	681b      	ldr	r3, [r3, #0]
 801f84e:	429a      	cmp	r2, r3
 801f850:	d008      	beq.n	801f864 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f854:	681a      	ldr	r2, [r3, #0]
 801f856:	683b      	ldr	r3, [r7, #0]
 801f858:	3304      	adds	r3, #4
 801f85a:	681b      	ldr	r3, [r3, #0]
 801f85c:	429a      	cmp	r2, r3
 801f85e:	d101      	bne.n	801f864 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801f860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f862:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f866:	8a9b      	ldrh	r3, [r3, #20]
 801f868:	8a3a      	ldrh	r2, [r7, #16]
 801f86a:	429a      	cmp	r2, r3
 801f86c:	d118      	bne.n	801f8a0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f870:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801f872:	2b00      	cmp	r3, #0
 801f874:	d005      	beq.n	801f882 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801f876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f878:	685a      	ldr	r2, [r3, #4]
 801f87a:	4b43      	ldr	r3, [pc, #268]	; (801f988 <udp_input+0x218>)
 801f87c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f87e:	429a      	cmp	r2, r3
 801f880:	d10e      	bne.n	801f8a0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f882:	6a3b      	ldr	r3, [r7, #32]
 801f884:	2b00      	cmp	r3, #0
 801f886:	d014      	beq.n	801f8b2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f88a:	68da      	ldr	r2, [r3, #12]
 801f88c:	6a3b      	ldr	r3, [r7, #32]
 801f88e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801f890:	4b3e      	ldr	r3, [pc, #248]	; (801f98c <udp_input+0x21c>)
 801f892:	681a      	ldr	r2, [r3, #0]
 801f894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f896:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801f898:	4a3c      	ldr	r2, [pc, #240]	; (801f98c <udp_input+0x21c>)
 801f89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f89c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801f89e:	e008      	b.n	801f8b2 <udp_input+0x142>
      }
    }

    prev = pcb;
 801f8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8a2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8a6:	68db      	ldr	r3, [r3, #12]
 801f8a8:	627b      	str	r3, [r7, #36]	; 0x24
 801f8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8ac:	2b00      	cmp	r3, #0
 801f8ae:	d1a7      	bne.n	801f800 <udp_input+0x90>
 801f8b0:	e000      	b.n	801f8b4 <udp_input+0x144>
        break;
 801f8b2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801f8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8b6:	2b00      	cmp	r3, #0
 801f8b8:	d101      	bne.n	801f8be <udp_input+0x14e>
    pcb = uncon_pcb;
 801f8ba:	69fb      	ldr	r3, [r7, #28]
 801f8bc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801f8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	d002      	beq.n	801f8ca <udp_input+0x15a>
    for_us = 1;
 801f8c4:	2301      	movs	r3, #1
 801f8c6:	76fb      	strb	r3, [r7, #27]
 801f8c8:	e00a      	b.n	801f8e0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801f8ca:	683b      	ldr	r3, [r7, #0]
 801f8cc:	3304      	adds	r3, #4
 801f8ce:	681a      	ldr	r2, [r3, #0]
 801f8d0:	4b2d      	ldr	r3, [pc, #180]	; (801f988 <udp_input+0x218>)
 801f8d2:	695b      	ldr	r3, [r3, #20]
 801f8d4:	429a      	cmp	r2, r3
 801f8d6:	bf0c      	ite	eq
 801f8d8:	2301      	moveq	r3, #1
 801f8da:	2300      	movne	r3, #0
 801f8dc:	b2db      	uxtb	r3, r3
 801f8de:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801f8e0:	7efb      	ldrb	r3, [r7, #27]
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	d041      	beq.n	801f96a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f8e6:	2108      	movs	r1, #8
 801f8e8:	6878      	ldr	r0, [r7, #4]
 801f8ea:	f7f9 f84b 	bl	8018984 <pbuf_remove_header>
 801f8ee:	4603      	mov	r3, r0
 801f8f0:	2b00      	cmp	r3, #0
 801f8f2:	d00a      	beq.n	801f90a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f8f4:	4b20      	ldr	r3, [pc, #128]	; (801f978 <udp_input+0x208>)
 801f8f6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f8fa:	4925      	ldr	r1, [pc, #148]	; (801f990 <udp_input+0x220>)
 801f8fc:	4820      	ldr	r0, [pc, #128]	; (801f980 <udp_input+0x210>)
 801f8fe:	f004 faff 	bl	8023f00 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801f902:	6878      	ldr	r0, [r7, #4]
 801f904:	f7f9 f8c4 	bl	8018a90 <pbuf_free>
      goto end;
 801f908:	e032      	b.n	801f970 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801f90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	d012      	beq.n	801f936 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f912:	699b      	ldr	r3, [r3, #24]
 801f914:	2b00      	cmp	r3, #0
 801f916:	d00a      	beq.n	801f92e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f91a:	699c      	ldr	r4, [r3, #24]
 801f91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f91e:	69d8      	ldr	r0, [r3, #28]
 801f920:	8a3b      	ldrh	r3, [r7, #16]
 801f922:	9300      	str	r3, [sp, #0]
 801f924:	4b1b      	ldr	r3, [pc, #108]	; (801f994 <udp_input+0x224>)
 801f926:	687a      	ldr	r2, [r7, #4]
 801f928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f92a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801f92c:	e021      	b.n	801f972 <udp_input+0x202>
        pbuf_free(p);
 801f92e:	6878      	ldr	r0, [r7, #4]
 801f930:	f7f9 f8ae 	bl	8018a90 <pbuf_free>
        goto end;
 801f934:	e01c      	b.n	801f970 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f936:	7cfb      	ldrb	r3, [r7, #19]
 801f938:	2b00      	cmp	r3, #0
 801f93a:	d112      	bne.n	801f962 <udp_input+0x1f2>
 801f93c:	4b12      	ldr	r3, [pc, #72]	; (801f988 <udp_input+0x218>)
 801f93e:	695b      	ldr	r3, [r3, #20]
 801f940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f944:	2be0      	cmp	r3, #224	; 0xe0
 801f946:	d00c      	beq.n	801f962 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f948:	4b0f      	ldr	r3, [pc, #60]	; (801f988 <udp_input+0x218>)
 801f94a:	899b      	ldrh	r3, [r3, #12]
 801f94c:	3308      	adds	r3, #8
 801f94e:	b29b      	uxth	r3, r3
 801f950:	b21b      	sxth	r3, r3
 801f952:	4619      	mov	r1, r3
 801f954:	6878      	ldr	r0, [r7, #4]
 801f956:	f7f9 f888 	bl	8018a6a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801f95a:	2103      	movs	r1, #3
 801f95c:	6878      	ldr	r0, [r7, #4]
 801f95e:	f001 fc01 	bl	8021164 <icmp_dest_unreach>
      pbuf_free(p);
 801f962:	6878      	ldr	r0, [r7, #4]
 801f964:	f7f9 f894 	bl	8018a90 <pbuf_free>
  return;
 801f968:	e003      	b.n	801f972 <udp_input+0x202>
    pbuf_free(p);
 801f96a:	6878      	ldr	r0, [r7, #4]
 801f96c:	f7f9 f890 	bl	8018a90 <pbuf_free>
  return;
 801f970:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801f972:	372c      	adds	r7, #44	; 0x2c
 801f974:	46bd      	mov	sp, r7
 801f976:	bd90      	pop	{r4, r7, pc}
 801f978:	08027f48 	.word	0x08027f48
 801f97c:	08027fec 	.word	0x08027fec
 801f980:	08027f9c 	.word	0x08027f9c
 801f984:	08028004 	.word	0x08028004
 801f988:	20006698 	.word	0x20006698
 801f98c:	2000c008 	.word	0x2000c008
 801f990:	08028020 	.word	0x08028020
 801f994:	200066a8 	.word	0x200066a8

0801f998 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801f998:	b580      	push	{r7, lr}
 801f99a:	b082      	sub	sp, #8
 801f99c:	af00      	add	r7, sp, #0
 801f99e:	6078      	str	r0, [r7, #4]
 801f9a0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801f9a2:	687b      	ldr	r3, [r7, #4]
 801f9a4:	2b00      	cmp	r3, #0
 801f9a6:	d109      	bne.n	801f9bc <udp_send+0x24>
 801f9a8:	4b11      	ldr	r3, [pc, #68]	; (801f9f0 <udp_send+0x58>)
 801f9aa:	f240 12d5 	movw	r2, #469	; 0x1d5
 801f9ae:	4911      	ldr	r1, [pc, #68]	; (801f9f4 <udp_send+0x5c>)
 801f9b0:	4811      	ldr	r0, [pc, #68]	; (801f9f8 <udp_send+0x60>)
 801f9b2:	f004 faa5 	bl	8023f00 <iprintf>
 801f9b6:	f06f 030f 	mvn.w	r3, #15
 801f9ba:	e015      	b.n	801f9e8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801f9bc:	683b      	ldr	r3, [r7, #0]
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	d109      	bne.n	801f9d6 <udp_send+0x3e>
 801f9c2:	4b0b      	ldr	r3, [pc, #44]	; (801f9f0 <udp_send+0x58>)
 801f9c4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801f9c8:	490c      	ldr	r1, [pc, #48]	; (801f9fc <udp_send+0x64>)
 801f9ca:	480b      	ldr	r0, [pc, #44]	; (801f9f8 <udp_send+0x60>)
 801f9cc:	f004 fa98 	bl	8023f00 <iprintf>
 801f9d0:	f06f 030f 	mvn.w	r3, #15
 801f9d4:	e008      	b.n	801f9e8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801f9d6:	687b      	ldr	r3, [r7, #4]
 801f9d8:	1d1a      	adds	r2, r3, #4
 801f9da:	687b      	ldr	r3, [r7, #4]
 801f9dc:	8a9b      	ldrh	r3, [r3, #20]
 801f9de:	6839      	ldr	r1, [r7, #0]
 801f9e0:	6878      	ldr	r0, [r7, #4]
 801f9e2:	f000 f80d 	bl	801fa00 <udp_sendto>
 801f9e6:	4603      	mov	r3, r0
}
 801f9e8:	4618      	mov	r0, r3
 801f9ea:	3708      	adds	r7, #8
 801f9ec:	46bd      	mov	sp, r7
 801f9ee:	bd80      	pop	{r7, pc}
 801f9f0:	08027f48 	.word	0x08027f48
 801f9f4:	0802803c 	.word	0x0802803c
 801f9f8:	08027f9c 	.word	0x08027f9c
 801f9fc:	08028054 	.word	0x08028054

0801fa00 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801fa00:	b580      	push	{r7, lr}
 801fa02:	b088      	sub	sp, #32
 801fa04:	af02      	add	r7, sp, #8
 801fa06:	60f8      	str	r0, [r7, #12]
 801fa08:	60b9      	str	r1, [r7, #8]
 801fa0a:	607a      	str	r2, [r7, #4]
 801fa0c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801fa0e:	68fb      	ldr	r3, [r7, #12]
 801fa10:	2b00      	cmp	r3, #0
 801fa12:	d109      	bne.n	801fa28 <udp_sendto+0x28>
 801fa14:	4b23      	ldr	r3, [pc, #140]	; (801faa4 <udp_sendto+0xa4>)
 801fa16:	f44f 7206 	mov.w	r2, #536	; 0x218
 801fa1a:	4923      	ldr	r1, [pc, #140]	; (801faa8 <udp_sendto+0xa8>)
 801fa1c:	4823      	ldr	r0, [pc, #140]	; (801faac <udp_sendto+0xac>)
 801fa1e:	f004 fa6f 	bl	8023f00 <iprintf>
 801fa22:	f06f 030f 	mvn.w	r3, #15
 801fa26:	e038      	b.n	801fa9a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801fa28:	68bb      	ldr	r3, [r7, #8]
 801fa2a:	2b00      	cmp	r3, #0
 801fa2c:	d109      	bne.n	801fa42 <udp_sendto+0x42>
 801fa2e:	4b1d      	ldr	r3, [pc, #116]	; (801faa4 <udp_sendto+0xa4>)
 801fa30:	f240 2219 	movw	r2, #537	; 0x219
 801fa34:	491e      	ldr	r1, [pc, #120]	; (801fab0 <udp_sendto+0xb0>)
 801fa36:	481d      	ldr	r0, [pc, #116]	; (801faac <udp_sendto+0xac>)
 801fa38:	f004 fa62 	bl	8023f00 <iprintf>
 801fa3c:	f06f 030f 	mvn.w	r3, #15
 801fa40:	e02b      	b.n	801fa9a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fa42:	687b      	ldr	r3, [r7, #4]
 801fa44:	2b00      	cmp	r3, #0
 801fa46:	d109      	bne.n	801fa5c <udp_sendto+0x5c>
 801fa48:	4b16      	ldr	r3, [pc, #88]	; (801faa4 <udp_sendto+0xa4>)
 801fa4a:	f240 221a 	movw	r2, #538	; 0x21a
 801fa4e:	4919      	ldr	r1, [pc, #100]	; (801fab4 <udp_sendto+0xb4>)
 801fa50:	4816      	ldr	r0, [pc, #88]	; (801faac <udp_sendto+0xac>)
 801fa52:	f004 fa55 	bl	8023f00 <iprintf>
 801fa56:	f06f 030f 	mvn.w	r3, #15
 801fa5a:	e01e      	b.n	801fa9a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801fa5c:	68fb      	ldr	r3, [r7, #12]
 801fa5e:	7a1b      	ldrb	r3, [r3, #8]
 801fa60:	2b00      	cmp	r3, #0
 801fa62:	d006      	beq.n	801fa72 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801fa64:	68fb      	ldr	r3, [r7, #12]
 801fa66:	7a1b      	ldrb	r3, [r3, #8]
 801fa68:	4618      	mov	r0, r3
 801fa6a:	f7f8 fc83 	bl	8018374 <netif_get_by_index>
 801fa6e:	6178      	str	r0, [r7, #20]
 801fa70:	e003      	b.n	801fa7a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801fa72:	6878      	ldr	r0, [r7, #4]
 801fa74:	f001 fc00 	bl	8021278 <ip4_route>
 801fa78:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801fa7a:	697b      	ldr	r3, [r7, #20]
 801fa7c:	2b00      	cmp	r3, #0
 801fa7e:	d102      	bne.n	801fa86 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801fa80:	f06f 0303 	mvn.w	r3, #3
 801fa84:	e009      	b.n	801fa9a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801fa86:	887a      	ldrh	r2, [r7, #2]
 801fa88:	697b      	ldr	r3, [r7, #20]
 801fa8a:	9300      	str	r3, [sp, #0]
 801fa8c:	4613      	mov	r3, r2
 801fa8e:	687a      	ldr	r2, [r7, #4]
 801fa90:	68b9      	ldr	r1, [r7, #8]
 801fa92:	68f8      	ldr	r0, [r7, #12]
 801fa94:	f000 f810 	bl	801fab8 <udp_sendto_if>
 801fa98:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801fa9a:	4618      	mov	r0, r3
 801fa9c:	3718      	adds	r7, #24
 801fa9e:	46bd      	mov	sp, r7
 801faa0:	bd80      	pop	{r7, pc}
 801faa2:	bf00      	nop
 801faa4:	08027f48 	.word	0x08027f48
 801faa8:	0802806c 	.word	0x0802806c
 801faac:	08027f9c 	.word	0x08027f9c
 801fab0:	08028084 	.word	0x08028084
 801fab4:	080280a0 	.word	0x080280a0

0801fab8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801fab8:	b580      	push	{r7, lr}
 801faba:	b088      	sub	sp, #32
 801fabc:	af02      	add	r7, sp, #8
 801fabe:	60f8      	str	r0, [r7, #12]
 801fac0:	60b9      	str	r1, [r7, #8]
 801fac2:	607a      	str	r2, [r7, #4]
 801fac4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801fac6:	68fb      	ldr	r3, [r7, #12]
 801fac8:	2b00      	cmp	r3, #0
 801faca:	d109      	bne.n	801fae0 <udp_sendto_if+0x28>
 801facc:	4b2e      	ldr	r3, [pc, #184]	; (801fb88 <udp_sendto_if+0xd0>)
 801face:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fad2:	492e      	ldr	r1, [pc, #184]	; (801fb8c <udp_sendto_if+0xd4>)
 801fad4:	482e      	ldr	r0, [pc, #184]	; (801fb90 <udp_sendto_if+0xd8>)
 801fad6:	f004 fa13 	bl	8023f00 <iprintf>
 801fada:	f06f 030f 	mvn.w	r3, #15
 801fade:	e04f      	b.n	801fb80 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801fae0:	68bb      	ldr	r3, [r7, #8]
 801fae2:	2b00      	cmp	r3, #0
 801fae4:	d109      	bne.n	801fafa <udp_sendto_if+0x42>
 801fae6:	4b28      	ldr	r3, [pc, #160]	; (801fb88 <udp_sendto_if+0xd0>)
 801fae8:	f240 2281 	movw	r2, #641	; 0x281
 801faec:	4929      	ldr	r1, [pc, #164]	; (801fb94 <udp_sendto_if+0xdc>)
 801faee:	4828      	ldr	r0, [pc, #160]	; (801fb90 <udp_sendto_if+0xd8>)
 801faf0:	f004 fa06 	bl	8023f00 <iprintf>
 801faf4:	f06f 030f 	mvn.w	r3, #15
 801faf8:	e042      	b.n	801fb80 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fafa:	687b      	ldr	r3, [r7, #4]
 801fafc:	2b00      	cmp	r3, #0
 801fafe:	d109      	bne.n	801fb14 <udp_sendto_if+0x5c>
 801fb00:	4b21      	ldr	r3, [pc, #132]	; (801fb88 <udp_sendto_if+0xd0>)
 801fb02:	f240 2282 	movw	r2, #642	; 0x282
 801fb06:	4924      	ldr	r1, [pc, #144]	; (801fb98 <udp_sendto_if+0xe0>)
 801fb08:	4821      	ldr	r0, [pc, #132]	; (801fb90 <udp_sendto_if+0xd8>)
 801fb0a:	f004 f9f9 	bl	8023f00 <iprintf>
 801fb0e:	f06f 030f 	mvn.w	r3, #15
 801fb12:	e035      	b.n	801fb80 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801fb14:	6a3b      	ldr	r3, [r7, #32]
 801fb16:	2b00      	cmp	r3, #0
 801fb18:	d109      	bne.n	801fb2e <udp_sendto_if+0x76>
 801fb1a:	4b1b      	ldr	r3, [pc, #108]	; (801fb88 <udp_sendto_if+0xd0>)
 801fb1c:	f240 2283 	movw	r2, #643	; 0x283
 801fb20:	491e      	ldr	r1, [pc, #120]	; (801fb9c <udp_sendto_if+0xe4>)
 801fb22:	481b      	ldr	r0, [pc, #108]	; (801fb90 <udp_sendto_if+0xd8>)
 801fb24:	f004 f9ec 	bl	8023f00 <iprintf>
 801fb28:	f06f 030f 	mvn.w	r3, #15
 801fb2c:	e028      	b.n	801fb80 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fb2e:	68fb      	ldr	r3, [r7, #12]
 801fb30:	2b00      	cmp	r3, #0
 801fb32:	d009      	beq.n	801fb48 <udp_sendto_if+0x90>
 801fb34:	68fb      	ldr	r3, [r7, #12]
 801fb36:	681b      	ldr	r3, [r3, #0]
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	d005      	beq.n	801fb48 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801fb3c:	68fb      	ldr	r3, [r7, #12]
 801fb3e:	681b      	ldr	r3, [r3, #0]
 801fb40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fb44:	2be0      	cmp	r3, #224	; 0xe0
 801fb46:	d103      	bne.n	801fb50 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801fb48:	6a3b      	ldr	r3, [r7, #32]
 801fb4a:	3304      	adds	r3, #4
 801fb4c:	617b      	str	r3, [r7, #20]
 801fb4e:	e00b      	b.n	801fb68 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801fb50:	68fb      	ldr	r3, [r7, #12]
 801fb52:	681a      	ldr	r2, [r3, #0]
 801fb54:	6a3b      	ldr	r3, [r7, #32]
 801fb56:	3304      	adds	r3, #4
 801fb58:	681b      	ldr	r3, [r3, #0]
 801fb5a:	429a      	cmp	r2, r3
 801fb5c:	d002      	beq.n	801fb64 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801fb5e:	f06f 0303 	mvn.w	r3, #3
 801fb62:	e00d      	b.n	801fb80 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801fb64:	68fb      	ldr	r3, [r7, #12]
 801fb66:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801fb68:	887a      	ldrh	r2, [r7, #2]
 801fb6a:	697b      	ldr	r3, [r7, #20]
 801fb6c:	9301      	str	r3, [sp, #4]
 801fb6e:	6a3b      	ldr	r3, [r7, #32]
 801fb70:	9300      	str	r3, [sp, #0]
 801fb72:	4613      	mov	r3, r2
 801fb74:	687a      	ldr	r2, [r7, #4]
 801fb76:	68b9      	ldr	r1, [r7, #8]
 801fb78:	68f8      	ldr	r0, [r7, #12]
 801fb7a:	f000 f811 	bl	801fba0 <udp_sendto_if_src>
 801fb7e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801fb80:	4618      	mov	r0, r3
 801fb82:	3718      	adds	r7, #24
 801fb84:	46bd      	mov	sp, r7
 801fb86:	bd80      	pop	{r7, pc}
 801fb88:	08027f48 	.word	0x08027f48
 801fb8c:	080280bc 	.word	0x080280bc
 801fb90:	08027f9c 	.word	0x08027f9c
 801fb94:	080280d8 	.word	0x080280d8
 801fb98:	080280f4 	.word	0x080280f4
 801fb9c:	08028114 	.word	0x08028114

0801fba0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801fba0:	b580      	push	{r7, lr}
 801fba2:	b08c      	sub	sp, #48	; 0x30
 801fba4:	af04      	add	r7, sp, #16
 801fba6:	60f8      	str	r0, [r7, #12]
 801fba8:	60b9      	str	r1, [r7, #8]
 801fbaa:	607a      	str	r2, [r7, #4]
 801fbac:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801fbae:	68fb      	ldr	r3, [r7, #12]
 801fbb0:	2b00      	cmp	r3, #0
 801fbb2:	d109      	bne.n	801fbc8 <udp_sendto_if_src+0x28>
 801fbb4:	4b65      	ldr	r3, [pc, #404]	; (801fd4c <udp_sendto_if_src+0x1ac>)
 801fbb6:	f240 22d1 	movw	r2, #721	; 0x2d1
 801fbba:	4965      	ldr	r1, [pc, #404]	; (801fd50 <udp_sendto_if_src+0x1b0>)
 801fbbc:	4865      	ldr	r0, [pc, #404]	; (801fd54 <udp_sendto_if_src+0x1b4>)
 801fbbe:	f004 f99f 	bl	8023f00 <iprintf>
 801fbc2:	f06f 030f 	mvn.w	r3, #15
 801fbc6:	e0bc      	b.n	801fd42 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801fbc8:	68bb      	ldr	r3, [r7, #8]
 801fbca:	2b00      	cmp	r3, #0
 801fbcc:	d109      	bne.n	801fbe2 <udp_sendto_if_src+0x42>
 801fbce:	4b5f      	ldr	r3, [pc, #380]	; (801fd4c <udp_sendto_if_src+0x1ac>)
 801fbd0:	f240 22d2 	movw	r2, #722	; 0x2d2
 801fbd4:	4960      	ldr	r1, [pc, #384]	; (801fd58 <udp_sendto_if_src+0x1b8>)
 801fbd6:	485f      	ldr	r0, [pc, #380]	; (801fd54 <udp_sendto_if_src+0x1b4>)
 801fbd8:	f004 f992 	bl	8023f00 <iprintf>
 801fbdc:	f06f 030f 	mvn.w	r3, #15
 801fbe0:	e0af      	b.n	801fd42 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fbe2:	687b      	ldr	r3, [r7, #4]
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d109      	bne.n	801fbfc <udp_sendto_if_src+0x5c>
 801fbe8:	4b58      	ldr	r3, [pc, #352]	; (801fd4c <udp_sendto_if_src+0x1ac>)
 801fbea:	f240 22d3 	movw	r2, #723	; 0x2d3
 801fbee:	495b      	ldr	r1, [pc, #364]	; (801fd5c <udp_sendto_if_src+0x1bc>)
 801fbf0:	4858      	ldr	r0, [pc, #352]	; (801fd54 <udp_sendto_if_src+0x1b4>)
 801fbf2:	f004 f985 	bl	8023f00 <iprintf>
 801fbf6:	f06f 030f 	mvn.w	r3, #15
 801fbfa:	e0a2      	b.n	801fd42 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801fbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fbfe:	2b00      	cmp	r3, #0
 801fc00:	d109      	bne.n	801fc16 <udp_sendto_if_src+0x76>
 801fc02:	4b52      	ldr	r3, [pc, #328]	; (801fd4c <udp_sendto_if_src+0x1ac>)
 801fc04:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801fc08:	4955      	ldr	r1, [pc, #340]	; (801fd60 <udp_sendto_if_src+0x1c0>)
 801fc0a:	4852      	ldr	r0, [pc, #328]	; (801fd54 <udp_sendto_if_src+0x1b4>)
 801fc0c:	f004 f978 	bl	8023f00 <iprintf>
 801fc10:	f06f 030f 	mvn.w	r3, #15
 801fc14:	e095      	b.n	801fd42 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801fc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc18:	2b00      	cmp	r3, #0
 801fc1a:	d109      	bne.n	801fc30 <udp_sendto_if_src+0x90>
 801fc1c:	4b4b      	ldr	r3, [pc, #300]	; (801fd4c <udp_sendto_if_src+0x1ac>)
 801fc1e:	f240 22d5 	movw	r2, #725	; 0x2d5
 801fc22:	4950      	ldr	r1, [pc, #320]	; (801fd64 <udp_sendto_if_src+0x1c4>)
 801fc24:	484b      	ldr	r0, [pc, #300]	; (801fd54 <udp_sendto_if_src+0x1b4>)
 801fc26:	f004 f96b 	bl	8023f00 <iprintf>
 801fc2a:	f06f 030f 	mvn.w	r3, #15
 801fc2e:	e088      	b.n	801fd42 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801fc30:	68fb      	ldr	r3, [r7, #12]
 801fc32:	8a5b      	ldrh	r3, [r3, #18]
 801fc34:	2b00      	cmp	r3, #0
 801fc36:	d10f      	bne.n	801fc58 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fc38:	68f9      	ldr	r1, [r7, #12]
 801fc3a:	68fb      	ldr	r3, [r7, #12]
 801fc3c:	8a5b      	ldrh	r3, [r3, #18]
 801fc3e:	461a      	mov	r2, r3
 801fc40:	68f8      	ldr	r0, [r7, #12]
 801fc42:	f000 f893 	bl	801fd6c <udp_bind>
 801fc46:	4603      	mov	r3, r0
 801fc48:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801fc4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fc4e:	2b00      	cmp	r3, #0
 801fc50:	d002      	beq.n	801fc58 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801fc52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fc56:	e074      	b.n	801fd42 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801fc58:	68bb      	ldr	r3, [r7, #8]
 801fc5a:	891b      	ldrh	r3, [r3, #8]
 801fc5c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801fc60:	4293      	cmp	r3, r2
 801fc62:	d902      	bls.n	801fc6a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801fc64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fc68:	e06b      	b.n	801fd42 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801fc6a:	2108      	movs	r1, #8
 801fc6c:	68b8      	ldr	r0, [r7, #8]
 801fc6e:	f7f8 fe79 	bl	8018964 <pbuf_add_header>
 801fc72:	4603      	mov	r3, r0
 801fc74:	2b00      	cmp	r3, #0
 801fc76:	d015      	beq.n	801fca4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801fc78:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fc7c:	2108      	movs	r1, #8
 801fc7e:	2022      	movs	r0, #34	; 0x22
 801fc80:	f7f8 fc22 	bl	80184c8 <pbuf_alloc>
 801fc84:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801fc86:	69fb      	ldr	r3, [r7, #28]
 801fc88:	2b00      	cmp	r3, #0
 801fc8a:	d102      	bne.n	801fc92 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801fc8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fc90:	e057      	b.n	801fd42 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801fc92:	68bb      	ldr	r3, [r7, #8]
 801fc94:	891b      	ldrh	r3, [r3, #8]
 801fc96:	2b00      	cmp	r3, #0
 801fc98:	d006      	beq.n	801fca8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801fc9a:	68b9      	ldr	r1, [r7, #8]
 801fc9c:	69f8      	ldr	r0, [r7, #28]
 801fc9e:	f7f9 f81b 	bl	8018cd8 <pbuf_chain>
 801fca2:	e001      	b.n	801fca8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801fca4:	68bb      	ldr	r3, [r7, #8]
 801fca6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801fca8:	69fb      	ldr	r3, [r7, #28]
 801fcaa:	895b      	ldrh	r3, [r3, #10]
 801fcac:	2b07      	cmp	r3, #7
 801fcae:	d806      	bhi.n	801fcbe <udp_sendto_if_src+0x11e>
 801fcb0:	4b26      	ldr	r3, [pc, #152]	; (801fd4c <udp_sendto_if_src+0x1ac>)
 801fcb2:	f240 320d 	movw	r2, #781	; 0x30d
 801fcb6:	492c      	ldr	r1, [pc, #176]	; (801fd68 <udp_sendto_if_src+0x1c8>)
 801fcb8:	4826      	ldr	r0, [pc, #152]	; (801fd54 <udp_sendto_if_src+0x1b4>)
 801fcba:	f004 f921 	bl	8023f00 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801fcbe:	69fb      	ldr	r3, [r7, #28]
 801fcc0:	685b      	ldr	r3, [r3, #4]
 801fcc2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801fcc4:	68fb      	ldr	r3, [r7, #12]
 801fcc6:	8a5b      	ldrh	r3, [r3, #18]
 801fcc8:	4618      	mov	r0, r3
 801fcca:	f7f7 faef 	bl	80172ac <lwip_htons>
 801fcce:	4603      	mov	r3, r0
 801fcd0:	461a      	mov	r2, r3
 801fcd2:	697b      	ldr	r3, [r7, #20]
 801fcd4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801fcd6:	887b      	ldrh	r3, [r7, #2]
 801fcd8:	4618      	mov	r0, r3
 801fcda:	f7f7 fae7 	bl	80172ac <lwip_htons>
 801fcde:	4603      	mov	r3, r0
 801fce0:	461a      	mov	r2, r3
 801fce2:	697b      	ldr	r3, [r7, #20]
 801fce4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801fce6:	697b      	ldr	r3, [r7, #20]
 801fce8:	2200      	movs	r2, #0
 801fcea:	719a      	strb	r2, [r3, #6]
 801fcec:	2200      	movs	r2, #0
 801fcee:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801fcf0:	69fb      	ldr	r3, [r7, #28]
 801fcf2:	891b      	ldrh	r3, [r3, #8]
 801fcf4:	4618      	mov	r0, r3
 801fcf6:	f7f7 fad9 	bl	80172ac <lwip_htons>
 801fcfa:	4603      	mov	r3, r0
 801fcfc:	461a      	mov	r2, r3
 801fcfe:	697b      	ldr	r3, [r7, #20]
 801fd00:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801fd02:	2311      	movs	r3, #17
 801fd04:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801fd06:	68fb      	ldr	r3, [r7, #12]
 801fd08:	7adb      	ldrb	r3, [r3, #11]
 801fd0a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801fd0c:	68fb      	ldr	r3, [r7, #12]
 801fd0e:	7a9b      	ldrb	r3, [r3, #10]
 801fd10:	7cb9      	ldrb	r1, [r7, #18]
 801fd12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fd14:	9202      	str	r2, [sp, #8]
 801fd16:	7cfa      	ldrb	r2, [r7, #19]
 801fd18:	9201      	str	r2, [sp, #4]
 801fd1a:	9300      	str	r3, [sp, #0]
 801fd1c:	460b      	mov	r3, r1
 801fd1e:	687a      	ldr	r2, [r7, #4]
 801fd20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801fd22:	69f8      	ldr	r0, [r7, #28]
 801fd24:	f001 fc90 	bl	8021648 <ip4_output_if_src>
 801fd28:	4603      	mov	r3, r0
 801fd2a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801fd2c:	69fa      	ldr	r2, [r7, #28]
 801fd2e:	68bb      	ldr	r3, [r7, #8]
 801fd30:	429a      	cmp	r2, r3
 801fd32:	d004      	beq.n	801fd3e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801fd34:	69f8      	ldr	r0, [r7, #28]
 801fd36:	f7f8 feab 	bl	8018a90 <pbuf_free>
    q = NULL;
 801fd3a:	2300      	movs	r3, #0
 801fd3c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801fd3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801fd42:	4618      	mov	r0, r3
 801fd44:	3720      	adds	r7, #32
 801fd46:	46bd      	mov	sp, r7
 801fd48:	bd80      	pop	{r7, pc}
 801fd4a:	bf00      	nop
 801fd4c:	08027f48 	.word	0x08027f48
 801fd50:	08028134 	.word	0x08028134
 801fd54:	08027f9c 	.word	0x08027f9c
 801fd58:	08028154 	.word	0x08028154
 801fd5c:	08028174 	.word	0x08028174
 801fd60:	08028198 	.word	0x08028198
 801fd64:	080281bc 	.word	0x080281bc
 801fd68:	080281e0 	.word	0x080281e0

0801fd6c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fd6c:	b580      	push	{r7, lr}
 801fd6e:	b086      	sub	sp, #24
 801fd70:	af00      	add	r7, sp, #0
 801fd72:	60f8      	str	r0, [r7, #12]
 801fd74:	60b9      	str	r1, [r7, #8]
 801fd76:	4613      	mov	r3, r2
 801fd78:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801fd7a:	68bb      	ldr	r3, [r7, #8]
 801fd7c:	2b00      	cmp	r3, #0
 801fd7e:	d101      	bne.n	801fd84 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801fd80:	4b39      	ldr	r3, [pc, #228]	; (801fe68 <udp_bind+0xfc>)
 801fd82:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801fd84:	68fb      	ldr	r3, [r7, #12]
 801fd86:	2b00      	cmp	r3, #0
 801fd88:	d109      	bne.n	801fd9e <udp_bind+0x32>
 801fd8a:	4b38      	ldr	r3, [pc, #224]	; (801fe6c <udp_bind+0x100>)
 801fd8c:	f240 32b7 	movw	r2, #951	; 0x3b7
 801fd90:	4937      	ldr	r1, [pc, #220]	; (801fe70 <udp_bind+0x104>)
 801fd92:	4838      	ldr	r0, [pc, #224]	; (801fe74 <udp_bind+0x108>)
 801fd94:	f004 f8b4 	bl	8023f00 <iprintf>
 801fd98:	f06f 030f 	mvn.w	r3, #15
 801fd9c:	e060      	b.n	801fe60 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801fd9e:	2300      	movs	r3, #0
 801fda0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fda2:	4b35      	ldr	r3, [pc, #212]	; (801fe78 <udp_bind+0x10c>)
 801fda4:	681b      	ldr	r3, [r3, #0]
 801fda6:	617b      	str	r3, [r7, #20]
 801fda8:	e009      	b.n	801fdbe <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801fdaa:	68fa      	ldr	r2, [r7, #12]
 801fdac:	697b      	ldr	r3, [r7, #20]
 801fdae:	429a      	cmp	r2, r3
 801fdb0:	d102      	bne.n	801fdb8 <udp_bind+0x4c>
      rebind = 1;
 801fdb2:	2301      	movs	r3, #1
 801fdb4:	74fb      	strb	r3, [r7, #19]
      break;
 801fdb6:	e005      	b.n	801fdc4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fdb8:	697b      	ldr	r3, [r7, #20]
 801fdba:	68db      	ldr	r3, [r3, #12]
 801fdbc:	617b      	str	r3, [r7, #20]
 801fdbe:	697b      	ldr	r3, [r7, #20]
 801fdc0:	2b00      	cmp	r3, #0
 801fdc2:	d1f2      	bne.n	801fdaa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801fdc4:	88fb      	ldrh	r3, [r7, #6]
 801fdc6:	2b00      	cmp	r3, #0
 801fdc8:	d109      	bne.n	801fdde <udp_bind+0x72>
    port = udp_new_port();
 801fdca:	f7ff fc35 	bl	801f638 <udp_new_port>
 801fdce:	4603      	mov	r3, r0
 801fdd0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801fdd2:	88fb      	ldrh	r3, [r7, #6]
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	d12c      	bne.n	801fe32 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801fdd8:	f06f 0307 	mvn.w	r3, #7
 801fddc:	e040      	b.n	801fe60 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fdde:	4b26      	ldr	r3, [pc, #152]	; (801fe78 <udp_bind+0x10c>)
 801fde0:	681b      	ldr	r3, [r3, #0]
 801fde2:	617b      	str	r3, [r7, #20]
 801fde4:	e022      	b.n	801fe2c <udp_bind+0xc0>
      if (pcb != ipcb) {
 801fde6:	68fa      	ldr	r2, [r7, #12]
 801fde8:	697b      	ldr	r3, [r7, #20]
 801fdea:	429a      	cmp	r2, r3
 801fdec:	d01b      	beq.n	801fe26 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801fdee:	697b      	ldr	r3, [r7, #20]
 801fdf0:	8a5b      	ldrh	r3, [r3, #18]
 801fdf2:	88fa      	ldrh	r2, [r7, #6]
 801fdf4:	429a      	cmp	r2, r3
 801fdf6:	d116      	bne.n	801fe26 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fdf8:	697b      	ldr	r3, [r7, #20]
 801fdfa:	681a      	ldr	r2, [r3, #0]
 801fdfc:	68bb      	ldr	r3, [r7, #8]
 801fdfe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801fe00:	429a      	cmp	r2, r3
 801fe02:	d00d      	beq.n	801fe20 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fe04:	68bb      	ldr	r3, [r7, #8]
 801fe06:	2b00      	cmp	r3, #0
 801fe08:	d00a      	beq.n	801fe20 <udp_bind+0xb4>
 801fe0a:	68bb      	ldr	r3, [r7, #8]
 801fe0c:	681b      	ldr	r3, [r3, #0]
 801fe0e:	2b00      	cmp	r3, #0
 801fe10:	d006      	beq.n	801fe20 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fe12:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fe14:	2b00      	cmp	r3, #0
 801fe16:	d003      	beq.n	801fe20 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fe18:	697b      	ldr	r3, [r7, #20]
 801fe1a:	681b      	ldr	r3, [r3, #0]
 801fe1c:	2b00      	cmp	r3, #0
 801fe1e:	d102      	bne.n	801fe26 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801fe20:	f06f 0307 	mvn.w	r3, #7
 801fe24:	e01c      	b.n	801fe60 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fe26:	697b      	ldr	r3, [r7, #20]
 801fe28:	68db      	ldr	r3, [r3, #12]
 801fe2a:	617b      	str	r3, [r7, #20]
 801fe2c:	697b      	ldr	r3, [r7, #20]
 801fe2e:	2b00      	cmp	r3, #0
 801fe30:	d1d9      	bne.n	801fde6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801fe32:	68bb      	ldr	r3, [r7, #8]
 801fe34:	2b00      	cmp	r3, #0
 801fe36:	d002      	beq.n	801fe3e <udp_bind+0xd2>
 801fe38:	68bb      	ldr	r3, [r7, #8]
 801fe3a:	681b      	ldr	r3, [r3, #0]
 801fe3c:	e000      	b.n	801fe40 <udp_bind+0xd4>
 801fe3e:	2300      	movs	r3, #0
 801fe40:	68fa      	ldr	r2, [r7, #12]
 801fe42:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801fe44:	68fb      	ldr	r3, [r7, #12]
 801fe46:	88fa      	ldrh	r2, [r7, #6]
 801fe48:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801fe4a:	7cfb      	ldrb	r3, [r7, #19]
 801fe4c:	2b00      	cmp	r3, #0
 801fe4e:	d106      	bne.n	801fe5e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801fe50:	4b09      	ldr	r3, [pc, #36]	; (801fe78 <udp_bind+0x10c>)
 801fe52:	681a      	ldr	r2, [r3, #0]
 801fe54:	68fb      	ldr	r3, [r7, #12]
 801fe56:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801fe58:	4a07      	ldr	r2, [pc, #28]	; (801fe78 <udp_bind+0x10c>)
 801fe5a:	68fb      	ldr	r3, [r7, #12]
 801fe5c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801fe5e:	2300      	movs	r3, #0
}
 801fe60:	4618      	mov	r0, r3
 801fe62:	3718      	adds	r7, #24
 801fe64:	46bd      	mov	sp, r7
 801fe66:	bd80      	pop	{r7, pc}
 801fe68:	08028af8 	.word	0x08028af8
 801fe6c:	08027f48 	.word	0x08027f48
 801fe70:	08028210 	.word	0x08028210
 801fe74:	08027f9c 	.word	0x08027f9c
 801fe78:	2000c008 	.word	0x2000c008

0801fe7c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fe7c:	b580      	push	{r7, lr}
 801fe7e:	b086      	sub	sp, #24
 801fe80:	af00      	add	r7, sp, #0
 801fe82:	60f8      	str	r0, [r7, #12]
 801fe84:	60b9      	str	r1, [r7, #8]
 801fe86:	4613      	mov	r3, r2
 801fe88:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801fe8a:	68fb      	ldr	r3, [r7, #12]
 801fe8c:	2b00      	cmp	r3, #0
 801fe8e:	d109      	bne.n	801fea4 <udp_connect+0x28>
 801fe90:	4b2c      	ldr	r3, [pc, #176]	; (801ff44 <udp_connect+0xc8>)
 801fe92:	f240 4235 	movw	r2, #1077	; 0x435
 801fe96:	492c      	ldr	r1, [pc, #176]	; (801ff48 <udp_connect+0xcc>)
 801fe98:	482c      	ldr	r0, [pc, #176]	; (801ff4c <udp_connect+0xd0>)
 801fe9a:	f004 f831 	bl	8023f00 <iprintf>
 801fe9e:	f06f 030f 	mvn.w	r3, #15
 801fea2:	e04b      	b.n	801ff3c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801fea4:	68bb      	ldr	r3, [r7, #8]
 801fea6:	2b00      	cmp	r3, #0
 801fea8:	d109      	bne.n	801febe <udp_connect+0x42>
 801feaa:	4b26      	ldr	r3, [pc, #152]	; (801ff44 <udp_connect+0xc8>)
 801feac:	f240 4236 	movw	r2, #1078	; 0x436
 801feb0:	4927      	ldr	r1, [pc, #156]	; (801ff50 <udp_connect+0xd4>)
 801feb2:	4826      	ldr	r0, [pc, #152]	; (801ff4c <udp_connect+0xd0>)
 801feb4:	f004 f824 	bl	8023f00 <iprintf>
 801feb8:	f06f 030f 	mvn.w	r3, #15
 801febc:	e03e      	b.n	801ff3c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801febe:	68fb      	ldr	r3, [r7, #12]
 801fec0:	8a5b      	ldrh	r3, [r3, #18]
 801fec2:	2b00      	cmp	r3, #0
 801fec4:	d10f      	bne.n	801fee6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fec6:	68f9      	ldr	r1, [r7, #12]
 801fec8:	68fb      	ldr	r3, [r7, #12]
 801feca:	8a5b      	ldrh	r3, [r3, #18]
 801fecc:	461a      	mov	r2, r3
 801fece:	68f8      	ldr	r0, [r7, #12]
 801fed0:	f7ff ff4c 	bl	801fd6c <udp_bind>
 801fed4:	4603      	mov	r3, r0
 801fed6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801fed8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fedc:	2b00      	cmp	r3, #0
 801fede:	d002      	beq.n	801fee6 <udp_connect+0x6a>
      return err;
 801fee0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fee4:	e02a      	b.n	801ff3c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801fee6:	68bb      	ldr	r3, [r7, #8]
 801fee8:	2b00      	cmp	r3, #0
 801feea:	d002      	beq.n	801fef2 <udp_connect+0x76>
 801feec:	68bb      	ldr	r3, [r7, #8]
 801feee:	681b      	ldr	r3, [r3, #0]
 801fef0:	e000      	b.n	801fef4 <udp_connect+0x78>
 801fef2:	2300      	movs	r3, #0
 801fef4:	68fa      	ldr	r2, [r7, #12]
 801fef6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801fef8:	68fb      	ldr	r3, [r7, #12]
 801fefa:	88fa      	ldrh	r2, [r7, #6]
 801fefc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801fefe:	68fb      	ldr	r3, [r7, #12]
 801ff00:	7c1b      	ldrb	r3, [r3, #16]
 801ff02:	f043 0304 	orr.w	r3, r3, #4
 801ff06:	b2da      	uxtb	r2, r3
 801ff08:	68fb      	ldr	r3, [r7, #12]
 801ff0a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff0c:	4b11      	ldr	r3, [pc, #68]	; (801ff54 <udp_connect+0xd8>)
 801ff0e:	681b      	ldr	r3, [r3, #0]
 801ff10:	617b      	str	r3, [r7, #20]
 801ff12:	e008      	b.n	801ff26 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801ff14:	68fa      	ldr	r2, [r7, #12]
 801ff16:	697b      	ldr	r3, [r7, #20]
 801ff18:	429a      	cmp	r2, r3
 801ff1a:	d101      	bne.n	801ff20 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801ff1c:	2300      	movs	r3, #0
 801ff1e:	e00d      	b.n	801ff3c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff20:	697b      	ldr	r3, [r7, #20]
 801ff22:	68db      	ldr	r3, [r3, #12]
 801ff24:	617b      	str	r3, [r7, #20]
 801ff26:	697b      	ldr	r3, [r7, #20]
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	d1f3      	bne.n	801ff14 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801ff2c:	4b09      	ldr	r3, [pc, #36]	; (801ff54 <udp_connect+0xd8>)
 801ff2e:	681a      	ldr	r2, [r3, #0]
 801ff30:	68fb      	ldr	r3, [r7, #12]
 801ff32:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801ff34:	4a07      	ldr	r2, [pc, #28]	; (801ff54 <udp_connect+0xd8>)
 801ff36:	68fb      	ldr	r3, [r7, #12]
 801ff38:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801ff3a:	2300      	movs	r3, #0
}
 801ff3c:	4618      	mov	r0, r3
 801ff3e:	3718      	adds	r7, #24
 801ff40:	46bd      	mov	sp, r7
 801ff42:	bd80      	pop	{r7, pc}
 801ff44:	08027f48 	.word	0x08027f48
 801ff48:	08028228 	.word	0x08028228
 801ff4c:	08027f9c 	.word	0x08027f9c
 801ff50:	08028244 	.word	0x08028244
 801ff54:	2000c008 	.word	0x2000c008

0801ff58 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801ff58:	b580      	push	{r7, lr}
 801ff5a:	b084      	sub	sp, #16
 801ff5c:	af00      	add	r7, sp, #0
 801ff5e:	60f8      	str	r0, [r7, #12]
 801ff60:	60b9      	str	r1, [r7, #8]
 801ff62:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801ff64:	68fb      	ldr	r3, [r7, #12]
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	d107      	bne.n	801ff7a <udp_recv+0x22>
 801ff6a:	4b08      	ldr	r3, [pc, #32]	; (801ff8c <udp_recv+0x34>)
 801ff6c:	f240 428a 	movw	r2, #1162	; 0x48a
 801ff70:	4907      	ldr	r1, [pc, #28]	; (801ff90 <udp_recv+0x38>)
 801ff72:	4808      	ldr	r0, [pc, #32]	; (801ff94 <udp_recv+0x3c>)
 801ff74:	f003 ffc4 	bl	8023f00 <iprintf>
 801ff78:	e005      	b.n	801ff86 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801ff7a:	68fb      	ldr	r3, [r7, #12]
 801ff7c:	68ba      	ldr	r2, [r7, #8]
 801ff7e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801ff80:	68fb      	ldr	r3, [r7, #12]
 801ff82:	687a      	ldr	r2, [r7, #4]
 801ff84:	61da      	str	r2, [r3, #28]
}
 801ff86:	3710      	adds	r7, #16
 801ff88:	46bd      	mov	sp, r7
 801ff8a:	bd80      	pop	{r7, pc}
 801ff8c:	08027f48 	.word	0x08027f48
 801ff90:	0802827c 	.word	0x0802827c
 801ff94:	08027f9c 	.word	0x08027f9c

0801ff98 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801ff98:	b580      	push	{r7, lr}
 801ff9a:	b084      	sub	sp, #16
 801ff9c:	af00      	add	r7, sp, #0
 801ff9e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801ffa0:	687b      	ldr	r3, [r7, #4]
 801ffa2:	2b00      	cmp	r3, #0
 801ffa4:	d107      	bne.n	801ffb6 <udp_remove+0x1e>
 801ffa6:	4b19      	ldr	r3, [pc, #100]	; (802000c <udp_remove+0x74>)
 801ffa8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801ffac:	4918      	ldr	r1, [pc, #96]	; (8020010 <udp_remove+0x78>)
 801ffae:	4819      	ldr	r0, [pc, #100]	; (8020014 <udp_remove+0x7c>)
 801ffb0:	f003 ffa6 	bl	8023f00 <iprintf>
 801ffb4:	e026      	b.n	8020004 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801ffb6:	4b18      	ldr	r3, [pc, #96]	; (8020018 <udp_remove+0x80>)
 801ffb8:	681b      	ldr	r3, [r3, #0]
 801ffba:	687a      	ldr	r2, [r7, #4]
 801ffbc:	429a      	cmp	r2, r3
 801ffbe:	d105      	bne.n	801ffcc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801ffc0:	4b15      	ldr	r3, [pc, #84]	; (8020018 <udp_remove+0x80>)
 801ffc2:	681b      	ldr	r3, [r3, #0]
 801ffc4:	68db      	ldr	r3, [r3, #12]
 801ffc6:	4a14      	ldr	r2, [pc, #80]	; (8020018 <udp_remove+0x80>)
 801ffc8:	6013      	str	r3, [r2, #0]
 801ffca:	e017      	b.n	801fffc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ffcc:	4b12      	ldr	r3, [pc, #72]	; (8020018 <udp_remove+0x80>)
 801ffce:	681b      	ldr	r3, [r3, #0]
 801ffd0:	60fb      	str	r3, [r7, #12]
 801ffd2:	e010      	b.n	801fff6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801ffd4:	68fb      	ldr	r3, [r7, #12]
 801ffd6:	68db      	ldr	r3, [r3, #12]
 801ffd8:	2b00      	cmp	r3, #0
 801ffda:	d009      	beq.n	801fff0 <udp_remove+0x58>
 801ffdc:	68fb      	ldr	r3, [r7, #12]
 801ffde:	68db      	ldr	r3, [r3, #12]
 801ffe0:	687a      	ldr	r2, [r7, #4]
 801ffe2:	429a      	cmp	r2, r3
 801ffe4:	d104      	bne.n	801fff0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801ffe6:	687b      	ldr	r3, [r7, #4]
 801ffe8:	68da      	ldr	r2, [r3, #12]
 801ffea:	68fb      	ldr	r3, [r7, #12]
 801ffec:	60da      	str	r2, [r3, #12]
        break;
 801ffee:	e005      	b.n	801fffc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fff0:	68fb      	ldr	r3, [r7, #12]
 801fff2:	68db      	ldr	r3, [r3, #12]
 801fff4:	60fb      	str	r3, [r7, #12]
 801fff6:	68fb      	ldr	r3, [r7, #12]
 801fff8:	2b00      	cmp	r3, #0
 801fffa:	d1eb      	bne.n	801ffd4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801fffc:	6879      	ldr	r1, [r7, #4]
 801fffe:	2000      	movs	r0, #0
 8020000:	f7f7 fea2 	bl	8017d48 <memp_free>
}
 8020004:	3710      	adds	r7, #16
 8020006:	46bd      	mov	sp, r7
 8020008:	bd80      	pop	{r7, pc}
 802000a:	bf00      	nop
 802000c:	08027f48 	.word	0x08027f48
 8020010:	08028294 	.word	0x08028294
 8020014:	08027f9c 	.word	0x08027f9c
 8020018:	2000c008 	.word	0x2000c008

0802001c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 802001c:	b580      	push	{r7, lr}
 802001e:	b082      	sub	sp, #8
 8020020:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8020022:	2000      	movs	r0, #0
 8020024:	f7f7 fe1a 	bl	8017c5c <memp_malloc>
 8020028:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 802002a:	687b      	ldr	r3, [r7, #4]
 802002c:	2b00      	cmp	r3, #0
 802002e:	d007      	beq.n	8020040 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8020030:	2220      	movs	r2, #32
 8020032:	2100      	movs	r1, #0
 8020034:	6878      	ldr	r0, [r7, #4]
 8020036:	f003 fe7b 	bl	8023d30 <memset>
    pcb->ttl = UDP_TTL;
 802003a:	687b      	ldr	r3, [r7, #4]
 802003c:	22ff      	movs	r2, #255	; 0xff
 802003e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8020040:	687b      	ldr	r3, [r7, #4]
}
 8020042:	4618      	mov	r0, r3
 8020044:	3708      	adds	r7, #8
 8020046:	46bd      	mov	sp, r7
 8020048:	bd80      	pop	{r7, pc}

0802004a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 802004a:	b580      	push	{r7, lr}
 802004c:	b084      	sub	sp, #16
 802004e:	af00      	add	r7, sp, #0
 8020050:	4603      	mov	r3, r0
 8020052:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8020054:	f7ff ffe2 	bl	802001c <udp_new>
 8020058:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 802005a:	68fb      	ldr	r3, [r7, #12]
}
 802005c:	4618      	mov	r0, r3
 802005e:	3710      	adds	r7, #16
 8020060:	46bd      	mov	sp, r7
 8020062:	bd80      	pop	{r7, pc}

08020064 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8020064:	b480      	push	{r7}
 8020066:	b085      	sub	sp, #20
 8020068:	af00      	add	r7, sp, #0
 802006a:	6078      	str	r0, [r7, #4]
 802006c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 802006e:	687b      	ldr	r3, [r7, #4]
 8020070:	2b00      	cmp	r3, #0
 8020072:	d01e      	beq.n	80200b2 <udp_netif_ip_addr_changed+0x4e>
 8020074:	687b      	ldr	r3, [r7, #4]
 8020076:	681b      	ldr	r3, [r3, #0]
 8020078:	2b00      	cmp	r3, #0
 802007a:	d01a      	beq.n	80200b2 <udp_netif_ip_addr_changed+0x4e>
 802007c:	683b      	ldr	r3, [r7, #0]
 802007e:	2b00      	cmp	r3, #0
 8020080:	d017      	beq.n	80200b2 <udp_netif_ip_addr_changed+0x4e>
 8020082:	683b      	ldr	r3, [r7, #0]
 8020084:	681b      	ldr	r3, [r3, #0]
 8020086:	2b00      	cmp	r3, #0
 8020088:	d013      	beq.n	80200b2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802008a:	4b0d      	ldr	r3, [pc, #52]	; (80200c0 <udp_netif_ip_addr_changed+0x5c>)
 802008c:	681b      	ldr	r3, [r3, #0]
 802008e:	60fb      	str	r3, [r7, #12]
 8020090:	e00c      	b.n	80200ac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8020092:	68fb      	ldr	r3, [r7, #12]
 8020094:	681a      	ldr	r2, [r3, #0]
 8020096:	687b      	ldr	r3, [r7, #4]
 8020098:	681b      	ldr	r3, [r3, #0]
 802009a:	429a      	cmp	r2, r3
 802009c:	d103      	bne.n	80200a6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802009e:	683b      	ldr	r3, [r7, #0]
 80200a0:	681a      	ldr	r2, [r3, #0]
 80200a2:	68fb      	ldr	r3, [r7, #12]
 80200a4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80200a6:	68fb      	ldr	r3, [r7, #12]
 80200a8:	68db      	ldr	r3, [r3, #12]
 80200aa:	60fb      	str	r3, [r7, #12]
 80200ac:	68fb      	ldr	r3, [r7, #12]
 80200ae:	2b00      	cmp	r3, #0
 80200b0:	d1ef      	bne.n	8020092 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80200b2:	bf00      	nop
 80200b4:	3714      	adds	r7, #20
 80200b6:	46bd      	mov	sp, r7
 80200b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200bc:	4770      	bx	lr
 80200be:	bf00      	nop
 80200c0:	2000c008 	.word	0x2000c008

080200c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80200c4:	b580      	push	{r7, lr}
 80200c6:	b082      	sub	sp, #8
 80200c8:	af00      	add	r7, sp, #0
 80200ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80200cc:	4915      	ldr	r1, [pc, #84]	; (8020124 <etharp_free_entry+0x60>)
 80200ce:	687a      	ldr	r2, [r7, #4]
 80200d0:	4613      	mov	r3, r2
 80200d2:	005b      	lsls	r3, r3, #1
 80200d4:	4413      	add	r3, r2
 80200d6:	00db      	lsls	r3, r3, #3
 80200d8:	440b      	add	r3, r1
 80200da:	681b      	ldr	r3, [r3, #0]
 80200dc:	2b00      	cmp	r3, #0
 80200de:	d013      	beq.n	8020108 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80200e0:	4910      	ldr	r1, [pc, #64]	; (8020124 <etharp_free_entry+0x60>)
 80200e2:	687a      	ldr	r2, [r7, #4]
 80200e4:	4613      	mov	r3, r2
 80200e6:	005b      	lsls	r3, r3, #1
 80200e8:	4413      	add	r3, r2
 80200ea:	00db      	lsls	r3, r3, #3
 80200ec:	440b      	add	r3, r1
 80200ee:	681b      	ldr	r3, [r3, #0]
 80200f0:	4618      	mov	r0, r3
 80200f2:	f7f8 fccd 	bl	8018a90 <pbuf_free>
    arp_table[i].q = NULL;
 80200f6:	490b      	ldr	r1, [pc, #44]	; (8020124 <etharp_free_entry+0x60>)
 80200f8:	687a      	ldr	r2, [r7, #4]
 80200fa:	4613      	mov	r3, r2
 80200fc:	005b      	lsls	r3, r3, #1
 80200fe:	4413      	add	r3, r2
 8020100:	00db      	lsls	r3, r3, #3
 8020102:	440b      	add	r3, r1
 8020104:	2200      	movs	r2, #0
 8020106:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8020108:	4906      	ldr	r1, [pc, #24]	; (8020124 <etharp_free_entry+0x60>)
 802010a:	687a      	ldr	r2, [r7, #4]
 802010c:	4613      	mov	r3, r2
 802010e:	005b      	lsls	r3, r3, #1
 8020110:	4413      	add	r3, r2
 8020112:	00db      	lsls	r3, r3, #3
 8020114:	440b      	add	r3, r1
 8020116:	3314      	adds	r3, #20
 8020118:	2200      	movs	r2, #0
 802011a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 802011c:	bf00      	nop
 802011e:	3708      	adds	r7, #8
 8020120:	46bd      	mov	sp, r7
 8020122:	bd80      	pop	{r7, pc}
 8020124:	2000c00c 	.word	0x2000c00c

08020128 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8020128:	b580      	push	{r7, lr}
 802012a:	b082      	sub	sp, #8
 802012c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802012e:	2300      	movs	r3, #0
 8020130:	607b      	str	r3, [r7, #4]
 8020132:	e096      	b.n	8020262 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8020134:	494f      	ldr	r1, [pc, #316]	; (8020274 <etharp_tmr+0x14c>)
 8020136:	687a      	ldr	r2, [r7, #4]
 8020138:	4613      	mov	r3, r2
 802013a:	005b      	lsls	r3, r3, #1
 802013c:	4413      	add	r3, r2
 802013e:	00db      	lsls	r3, r3, #3
 8020140:	440b      	add	r3, r1
 8020142:	3314      	adds	r3, #20
 8020144:	781b      	ldrb	r3, [r3, #0]
 8020146:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8020148:	78fb      	ldrb	r3, [r7, #3]
 802014a:	2b00      	cmp	r3, #0
 802014c:	f000 8086 	beq.w	802025c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8020150:	4948      	ldr	r1, [pc, #288]	; (8020274 <etharp_tmr+0x14c>)
 8020152:	687a      	ldr	r2, [r7, #4]
 8020154:	4613      	mov	r3, r2
 8020156:	005b      	lsls	r3, r3, #1
 8020158:	4413      	add	r3, r2
 802015a:	00db      	lsls	r3, r3, #3
 802015c:	440b      	add	r3, r1
 802015e:	3312      	adds	r3, #18
 8020160:	881b      	ldrh	r3, [r3, #0]
 8020162:	3301      	adds	r3, #1
 8020164:	b298      	uxth	r0, r3
 8020166:	4943      	ldr	r1, [pc, #268]	; (8020274 <etharp_tmr+0x14c>)
 8020168:	687a      	ldr	r2, [r7, #4]
 802016a:	4613      	mov	r3, r2
 802016c:	005b      	lsls	r3, r3, #1
 802016e:	4413      	add	r3, r2
 8020170:	00db      	lsls	r3, r3, #3
 8020172:	440b      	add	r3, r1
 8020174:	3312      	adds	r3, #18
 8020176:	4602      	mov	r2, r0
 8020178:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802017a:	493e      	ldr	r1, [pc, #248]	; (8020274 <etharp_tmr+0x14c>)
 802017c:	687a      	ldr	r2, [r7, #4]
 802017e:	4613      	mov	r3, r2
 8020180:	005b      	lsls	r3, r3, #1
 8020182:	4413      	add	r3, r2
 8020184:	00db      	lsls	r3, r3, #3
 8020186:	440b      	add	r3, r1
 8020188:	3312      	adds	r3, #18
 802018a:	881b      	ldrh	r3, [r3, #0]
 802018c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8020190:	d215      	bcs.n	80201be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8020192:	4938      	ldr	r1, [pc, #224]	; (8020274 <etharp_tmr+0x14c>)
 8020194:	687a      	ldr	r2, [r7, #4]
 8020196:	4613      	mov	r3, r2
 8020198:	005b      	lsls	r3, r3, #1
 802019a:	4413      	add	r3, r2
 802019c:	00db      	lsls	r3, r3, #3
 802019e:	440b      	add	r3, r1
 80201a0:	3314      	adds	r3, #20
 80201a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80201a4:	2b01      	cmp	r3, #1
 80201a6:	d10e      	bne.n	80201c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80201a8:	4932      	ldr	r1, [pc, #200]	; (8020274 <etharp_tmr+0x14c>)
 80201aa:	687a      	ldr	r2, [r7, #4]
 80201ac:	4613      	mov	r3, r2
 80201ae:	005b      	lsls	r3, r3, #1
 80201b0:	4413      	add	r3, r2
 80201b2:	00db      	lsls	r3, r3, #3
 80201b4:	440b      	add	r3, r1
 80201b6:	3312      	adds	r3, #18
 80201b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80201ba:	2b04      	cmp	r3, #4
 80201bc:	d903      	bls.n	80201c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80201be:	6878      	ldr	r0, [r7, #4]
 80201c0:	f7ff ff80 	bl	80200c4 <etharp_free_entry>
 80201c4:	e04a      	b.n	802025c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80201c6:	492b      	ldr	r1, [pc, #172]	; (8020274 <etharp_tmr+0x14c>)
 80201c8:	687a      	ldr	r2, [r7, #4]
 80201ca:	4613      	mov	r3, r2
 80201cc:	005b      	lsls	r3, r3, #1
 80201ce:	4413      	add	r3, r2
 80201d0:	00db      	lsls	r3, r3, #3
 80201d2:	440b      	add	r3, r1
 80201d4:	3314      	adds	r3, #20
 80201d6:	781b      	ldrb	r3, [r3, #0]
 80201d8:	2b03      	cmp	r3, #3
 80201da:	d10a      	bne.n	80201f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80201dc:	4925      	ldr	r1, [pc, #148]	; (8020274 <etharp_tmr+0x14c>)
 80201de:	687a      	ldr	r2, [r7, #4]
 80201e0:	4613      	mov	r3, r2
 80201e2:	005b      	lsls	r3, r3, #1
 80201e4:	4413      	add	r3, r2
 80201e6:	00db      	lsls	r3, r3, #3
 80201e8:	440b      	add	r3, r1
 80201ea:	3314      	adds	r3, #20
 80201ec:	2204      	movs	r2, #4
 80201ee:	701a      	strb	r2, [r3, #0]
 80201f0:	e034      	b.n	802025c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80201f2:	4920      	ldr	r1, [pc, #128]	; (8020274 <etharp_tmr+0x14c>)
 80201f4:	687a      	ldr	r2, [r7, #4]
 80201f6:	4613      	mov	r3, r2
 80201f8:	005b      	lsls	r3, r3, #1
 80201fa:	4413      	add	r3, r2
 80201fc:	00db      	lsls	r3, r3, #3
 80201fe:	440b      	add	r3, r1
 8020200:	3314      	adds	r3, #20
 8020202:	781b      	ldrb	r3, [r3, #0]
 8020204:	2b04      	cmp	r3, #4
 8020206:	d10a      	bne.n	802021e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8020208:	491a      	ldr	r1, [pc, #104]	; (8020274 <etharp_tmr+0x14c>)
 802020a:	687a      	ldr	r2, [r7, #4]
 802020c:	4613      	mov	r3, r2
 802020e:	005b      	lsls	r3, r3, #1
 8020210:	4413      	add	r3, r2
 8020212:	00db      	lsls	r3, r3, #3
 8020214:	440b      	add	r3, r1
 8020216:	3314      	adds	r3, #20
 8020218:	2202      	movs	r2, #2
 802021a:	701a      	strb	r2, [r3, #0]
 802021c:	e01e      	b.n	802025c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802021e:	4915      	ldr	r1, [pc, #84]	; (8020274 <etharp_tmr+0x14c>)
 8020220:	687a      	ldr	r2, [r7, #4]
 8020222:	4613      	mov	r3, r2
 8020224:	005b      	lsls	r3, r3, #1
 8020226:	4413      	add	r3, r2
 8020228:	00db      	lsls	r3, r3, #3
 802022a:	440b      	add	r3, r1
 802022c:	3314      	adds	r3, #20
 802022e:	781b      	ldrb	r3, [r3, #0]
 8020230:	2b01      	cmp	r3, #1
 8020232:	d113      	bne.n	802025c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8020234:	490f      	ldr	r1, [pc, #60]	; (8020274 <etharp_tmr+0x14c>)
 8020236:	687a      	ldr	r2, [r7, #4]
 8020238:	4613      	mov	r3, r2
 802023a:	005b      	lsls	r3, r3, #1
 802023c:	4413      	add	r3, r2
 802023e:	00db      	lsls	r3, r3, #3
 8020240:	440b      	add	r3, r1
 8020242:	3308      	adds	r3, #8
 8020244:	6818      	ldr	r0, [r3, #0]
 8020246:	687a      	ldr	r2, [r7, #4]
 8020248:	4613      	mov	r3, r2
 802024a:	005b      	lsls	r3, r3, #1
 802024c:	4413      	add	r3, r2
 802024e:	00db      	lsls	r3, r3, #3
 8020250:	4a08      	ldr	r2, [pc, #32]	; (8020274 <etharp_tmr+0x14c>)
 8020252:	4413      	add	r3, r2
 8020254:	3304      	adds	r3, #4
 8020256:	4619      	mov	r1, r3
 8020258:	f000 fe6e 	bl	8020f38 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	3301      	adds	r3, #1
 8020260:	607b      	str	r3, [r7, #4]
 8020262:	687b      	ldr	r3, [r7, #4]
 8020264:	2b09      	cmp	r3, #9
 8020266:	f77f af65 	ble.w	8020134 <etharp_tmr+0xc>
      }
    }
  }
}
 802026a:	bf00      	nop
 802026c:	bf00      	nop
 802026e:	3708      	adds	r7, #8
 8020270:	46bd      	mov	sp, r7
 8020272:	bd80      	pop	{r7, pc}
 8020274:	2000c00c 	.word	0x2000c00c

08020278 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8020278:	b580      	push	{r7, lr}
 802027a:	b08a      	sub	sp, #40	; 0x28
 802027c:	af00      	add	r7, sp, #0
 802027e:	60f8      	str	r0, [r7, #12]
 8020280:	460b      	mov	r3, r1
 8020282:	607a      	str	r2, [r7, #4]
 8020284:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8020286:	230a      	movs	r3, #10
 8020288:	84fb      	strh	r3, [r7, #38]	; 0x26
 802028a:	230a      	movs	r3, #10
 802028c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 802028e:	230a      	movs	r3, #10
 8020290:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8020292:	2300      	movs	r3, #0
 8020294:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8020296:	230a      	movs	r3, #10
 8020298:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 802029a:	2300      	movs	r3, #0
 802029c:	83bb      	strh	r3, [r7, #28]
 802029e:	2300      	movs	r3, #0
 80202a0:	837b      	strh	r3, [r7, #26]
 80202a2:	2300      	movs	r3, #0
 80202a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80202a6:	2300      	movs	r3, #0
 80202a8:	843b      	strh	r3, [r7, #32]
 80202aa:	e0ae      	b.n	802040a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80202ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80202b0:	49a6      	ldr	r1, [pc, #664]	; (802054c <etharp_find_entry+0x2d4>)
 80202b2:	4613      	mov	r3, r2
 80202b4:	005b      	lsls	r3, r3, #1
 80202b6:	4413      	add	r3, r2
 80202b8:	00db      	lsls	r3, r3, #3
 80202ba:	440b      	add	r3, r1
 80202bc:	3314      	adds	r3, #20
 80202be:	781b      	ldrb	r3, [r3, #0]
 80202c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80202c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80202c6:	2b0a      	cmp	r3, #10
 80202c8:	d105      	bne.n	80202d6 <etharp_find_entry+0x5e>
 80202ca:	7dfb      	ldrb	r3, [r7, #23]
 80202cc:	2b00      	cmp	r3, #0
 80202ce:	d102      	bne.n	80202d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80202d0:	8c3b      	ldrh	r3, [r7, #32]
 80202d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80202d4:	e095      	b.n	8020402 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80202d6:	7dfb      	ldrb	r3, [r7, #23]
 80202d8:	2b00      	cmp	r3, #0
 80202da:	f000 8092 	beq.w	8020402 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80202de:	7dfb      	ldrb	r3, [r7, #23]
 80202e0:	2b01      	cmp	r3, #1
 80202e2:	d009      	beq.n	80202f8 <etharp_find_entry+0x80>
 80202e4:	7dfb      	ldrb	r3, [r7, #23]
 80202e6:	2b01      	cmp	r3, #1
 80202e8:	d806      	bhi.n	80202f8 <etharp_find_entry+0x80>
 80202ea:	4b99      	ldr	r3, [pc, #612]	; (8020550 <etharp_find_entry+0x2d8>)
 80202ec:	f240 1223 	movw	r2, #291	; 0x123
 80202f0:	4998      	ldr	r1, [pc, #608]	; (8020554 <etharp_find_entry+0x2dc>)
 80202f2:	4899      	ldr	r0, [pc, #612]	; (8020558 <etharp_find_entry+0x2e0>)
 80202f4:	f003 fe04 	bl	8023f00 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80202f8:	68fb      	ldr	r3, [r7, #12]
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	d020      	beq.n	8020340 <etharp_find_entry+0xc8>
 80202fe:	68fb      	ldr	r3, [r7, #12]
 8020300:	6819      	ldr	r1, [r3, #0]
 8020302:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020306:	4891      	ldr	r0, [pc, #580]	; (802054c <etharp_find_entry+0x2d4>)
 8020308:	4613      	mov	r3, r2
 802030a:	005b      	lsls	r3, r3, #1
 802030c:	4413      	add	r3, r2
 802030e:	00db      	lsls	r3, r3, #3
 8020310:	4403      	add	r3, r0
 8020312:	3304      	adds	r3, #4
 8020314:	681b      	ldr	r3, [r3, #0]
 8020316:	4299      	cmp	r1, r3
 8020318:	d112      	bne.n	8020340 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 802031a:	687b      	ldr	r3, [r7, #4]
 802031c:	2b00      	cmp	r3, #0
 802031e:	d00c      	beq.n	802033a <etharp_find_entry+0xc2>
 8020320:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020324:	4989      	ldr	r1, [pc, #548]	; (802054c <etharp_find_entry+0x2d4>)
 8020326:	4613      	mov	r3, r2
 8020328:	005b      	lsls	r3, r3, #1
 802032a:	4413      	add	r3, r2
 802032c:	00db      	lsls	r3, r3, #3
 802032e:	440b      	add	r3, r1
 8020330:	3308      	adds	r3, #8
 8020332:	681b      	ldr	r3, [r3, #0]
 8020334:	687a      	ldr	r2, [r7, #4]
 8020336:	429a      	cmp	r2, r3
 8020338:	d102      	bne.n	8020340 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 802033a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802033e:	e100      	b.n	8020542 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8020340:	7dfb      	ldrb	r3, [r7, #23]
 8020342:	2b01      	cmp	r3, #1
 8020344:	d140      	bne.n	80203c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8020346:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802034a:	4980      	ldr	r1, [pc, #512]	; (802054c <etharp_find_entry+0x2d4>)
 802034c:	4613      	mov	r3, r2
 802034e:	005b      	lsls	r3, r3, #1
 8020350:	4413      	add	r3, r2
 8020352:	00db      	lsls	r3, r3, #3
 8020354:	440b      	add	r3, r1
 8020356:	681b      	ldr	r3, [r3, #0]
 8020358:	2b00      	cmp	r3, #0
 802035a:	d01a      	beq.n	8020392 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 802035c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020360:	497a      	ldr	r1, [pc, #488]	; (802054c <etharp_find_entry+0x2d4>)
 8020362:	4613      	mov	r3, r2
 8020364:	005b      	lsls	r3, r3, #1
 8020366:	4413      	add	r3, r2
 8020368:	00db      	lsls	r3, r3, #3
 802036a:	440b      	add	r3, r1
 802036c:	3312      	adds	r3, #18
 802036e:	881b      	ldrh	r3, [r3, #0]
 8020370:	8bba      	ldrh	r2, [r7, #28]
 8020372:	429a      	cmp	r2, r3
 8020374:	d845      	bhi.n	8020402 <etharp_find_entry+0x18a>
            old_queue = i;
 8020376:	8c3b      	ldrh	r3, [r7, #32]
 8020378:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 802037a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802037e:	4973      	ldr	r1, [pc, #460]	; (802054c <etharp_find_entry+0x2d4>)
 8020380:	4613      	mov	r3, r2
 8020382:	005b      	lsls	r3, r3, #1
 8020384:	4413      	add	r3, r2
 8020386:	00db      	lsls	r3, r3, #3
 8020388:	440b      	add	r3, r1
 802038a:	3312      	adds	r3, #18
 802038c:	881b      	ldrh	r3, [r3, #0]
 802038e:	83bb      	strh	r3, [r7, #28]
 8020390:	e037      	b.n	8020402 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8020392:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020396:	496d      	ldr	r1, [pc, #436]	; (802054c <etharp_find_entry+0x2d4>)
 8020398:	4613      	mov	r3, r2
 802039a:	005b      	lsls	r3, r3, #1
 802039c:	4413      	add	r3, r2
 802039e:	00db      	lsls	r3, r3, #3
 80203a0:	440b      	add	r3, r1
 80203a2:	3312      	adds	r3, #18
 80203a4:	881b      	ldrh	r3, [r3, #0]
 80203a6:	8b7a      	ldrh	r2, [r7, #26]
 80203a8:	429a      	cmp	r2, r3
 80203aa:	d82a      	bhi.n	8020402 <etharp_find_entry+0x18a>
            old_pending = i;
 80203ac:	8c3b      	ldrh	r3, [r7, #32]
 80203ae:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80203b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80203b4:	4965      	ldr	r1, [pc, #404]	; (802054c <etharp_find_entry+0x2d4>)
 80203b6:	4613      	mov	r3, r2
 80203b8:	005b      	lsls	r3, r3, #1
 80203ba:	4413      	add	r3, r2
 80203bc:	00db      	lsls	r3, r3, #3
 80203be:	440b      	add	r3, r1
 80203c0:	3312      	adds	r3, #18
 80203c2:	881b      	ldrh	r3, [r3, #0]
 80203c4:	837b      	strh	r3, [r7, #26]
 80203c6:	e01c      	b.n	8020402 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80203c8:	7dfb      	ldrb	r3, [r7, #23]
 80203ca:	2b01      	cmp	r3, #1
 80203cc:	d919      	bls.n	8020402 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80203ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80203d2:	495e      	ldr	r1, [pc, #376]	; (802054c <etharp_find_entry+0x2d4>)
 80203d4:	4613      	mov	r3, r2
 80203d6:	005b      	lsls	r3, r3, #1
 80203d8:	4413      	add	r3, r2
 80203da:	00db      	lsls	r3, r3, #3
 80203dc:	440b      	add	r3, r1
 80203de:	3312      	adds	r3, #18
 80203e0:	881b      	ldrh	r3, [r3, #0]
 80203e2:	8b3a      	ldrh	r2, [r7, #24]
 80203e4:	429a      	cmp	r2, r3
 80203e6:	d80c      	bhi.n	8020402 <etharp_find_entry+0x18a>
            old_stable = i;
 80203e8:	8c3b      	ldrh	r3, [r7, #32]
 80203ea:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80203ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80203f0:	4956      	ldr	r1, [pc, #344]	; (802054c <etharp_find_entry+0x2d4>)
 80203f2:	4613      	mov	r3, r2
 80203f4:	005b      	lsls	r3, r3, #1
 80203f6:	4413      	add	r3, r2
 80203f8:	00db      	lsls	r3, r3, #3
 80203fa:	440b      	add	r3, r1
 80203fc:	3312      	adds	r3, #18
 80203fe:	881b      	ldrh	r3, [r3, #0]
 8020400:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020402:	8c3b      	ldrh	r3, [r7, #32]
 8020404:	3301      	adds	r3, #1
 8020406:	b29b      	uxth	r3, r3
 8020408:	843b      	strh	r3, [r7, #32]
 802040a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802040e:	2b09      	cmp	r3, #9
 8020410:	f77f af4c 	ble.w	80202ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8020414:	7afb      	ldrb	r3, [r7, #11]
 8020416:	f003 0302 	and.w	r3, r3, #2
 802041a:	2b00      	cmp	r3, #0
 802041c:	d108      	bne.n	8020430 <etharp_find_entry+0x1b8>
 802041e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020422:	2b0a      	cmp	r3, #10
 8020424:	d107      	bne.n	8020436 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8020426:	7afb      	ldrb	r3, [r7, #11]
 8020428:	f003 0301 	and.w	r3, r3, #1
 802042c:	2b00      	cmp	r3, #0
 802042e:	d102      	bne.n	8020436 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8020430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020434:	e085      	b.n	8020542 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8020436:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802043a:	2b09      	cmp	r3, #9
 802043c:	dc02      	bgt.n	8020444 <etharp_find_entry+0x1cc>
    i = empty;
 802043e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020440:	843b      	strh	r3, [r7, #32]
 8020442:	e039      	b.n	80204b8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8020444:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8020448:	2b09      	cmp	r3, #9
 802044a:	dc14      	bgt.n	8020476 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 802044c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802044e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8020450:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020454:	493d      	ldr	r1, [pc, #244]	; (802054c <etharp_find_entry+0x2d4>)
 8020456:	4613      	mov	r3, r2
 8020458:	005b      	lsls	r3, r3, #1
 802045a:	4413      	add	r3, r2
 802045c:	00db      	lsls	r3, r3, #3
 802045e:	440b      	add	r3, r1
 8020460:	681b      	ldr	r3, [r3, #0]
 8020462:	2b00      	cmp	r3, #0
 8020464:	d018      	beq.n	8020498 <etharp_find_entry+0x220>
 8020466:	4b3a      	ldr	r3, [pc, #232]	; (8020550 <etharp_find_entry+0x2d8>)
 8020468:	f240 126d 	movw	r2, #365	; 0x16d
 802046c:	493b      	ldr	r1, [pc, #236]	; (802055c <etharp_find_entry+0x2e4>)
 802046e:	483a      	ldr	r0, [pc, #232]	; (8020558 <etharp_find_entry+0x2e0>)
 8020470:	f003 fd46 	bl	8023f00 <iprintf>
 8020474:	e010      	b.n	8020498 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8020476:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 802047a:	2b09      	cmp	r3, #9
 802047c:	dc02      	bgt.n	8020484 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 802047e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020480:	843b      	strh	r3, [r7, #32]
 8020482:	e009      	b.n	8020498 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8020484:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8020488:	2b09      	cmp	r3, #9
 802048a:	dc02      	bgt.n	8020492 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 802048c:	8bfb      	ldrh	r3, [r7, #30]
 802048e:	843b      	strh	r3, [r7, #32]
 8020490:	e002      	b.n	8020498 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8020492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020496:	e054      	b.n	8020542 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020498:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802049c:	2b09      	cmp	r3, #9
 802049e:	dd06      	ble.n	80204ae <etharp_find_entry+0x236>
 80204a0:	4b2b      	ldr	r3, [pc, #172]	; (8020550 <etharp_find_entry+0x2d8>)
 80204a2:	f240 127f 	movw	r2, #383	; 0x17f
 80204a6:	492e      	ldr	r1, [pc, #184]	; (8020560 <etharp_find_entry+0x2e8>)
 80204a8:	482b      	ldr	r0, [pc, #172]	; (8020558 <etharp_find_entry+0x2e0>)
 80204aa:	f003 fd29 	bl	8023f00 <iprintf>
    etharp_free_entry(i);
 80204ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80204b2:	4618      	mov	r0, r3
 80204b4:	f7ff fe06 	bl	80200c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80204b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80204bc:	2b09      	cmp	r3, #9
 80204be:	dd06      	ble.n	80204ce <etharp_find_entry+0x256>
 80204c0:	4b23      	ldr	r3, [pc, #140]	; (8020550 <etharp_find_entry+0x2d8>)
 80204c2:	f240 1283 	movw	r2, #387	; 0x183
 80204c6:	4926      	ldr	r1, [pc, #152]	; (8020560 <etharp_find_entry+0x2e8>)
 80204c8:	4823      	ldr	r0, [pc, #140]	; (8020558 <etharp_find_entry+0x2e0>)
 80204ca:	f003 fd19 	bl	8023f00 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80204ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80204d2:	491e      	ldr	r1, [pc, #120]	; (802054c <etharp_find_entry+0x2d4>)
 80204d4:	4613      	mov	r3, r2
 80204d6:	005b      	lsls	r3, r3, #1
 80204d8:	4413      	add	r3, r2
 80204da:	00db      	lsls	r3, r3, #3
 80204dc:	440b      	add	r3, r1
 80204de:	3314      	adds	r3, #20
 80204e0:	781b      	ldrb	r3, [r3, #0]
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	d006      	beq.n	80204f4 <etharp_find_entry+0x27c>
 80204e6:	4b1a      	ldr	r3, [pc, #104]	; (8020550 <etharp_find_entry+0x2d8>)
 80204e8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80204ec:	491d      	ldr	r1, [pc, #116]	; (8020564 <etharp_find_entry+0x2ec>)
 80204ee:	481a      	ldr	r0, [pc, #104]	; (8020558 <etharp_find_entry+0x2e0>)
 80204f0:	f003 fd06 	bl	8023f00 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80204f4:	68fb      	ldr	r3, [r7, #12]
 80204f6:	2b00      	cmp	r3, #0
 80204f8:	d00b      	beq.n	8020512 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80204fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80204fe:	68fb      	ldr	r3, [r7, #12]
 8020500:	6819      	ldr	r1, [r3, #0]
 8020502:	4812      	ldr	r0, [pc, #72]	; (802054c <etharp_find_entry+0x2d4>)
 8020504:	4613      	mov	r3, r2
 8020506:	005b      	lsls	r3, r3, #1
 8020508:	4413      	add	r3, r2
 802050a:	00db      	lsls	r3, r3, #3
 802050c:	4403      	add	r3, r0
 802050e:	3304      	adds	r3, #4
 8020510:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8020512:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020516:	490d      	ldr	r1, [pc, #52]	; (802054c <etharp_find_entry+0x2d4>)
 8020518:	4613      	mov	r3, r2
 802051a:	005b      	lsls	r3, r3, #1
 802051c:	4413      	add	r3, r2
 802051e:	00db      	lsls	r3, r3, #3
 8020520:	440b      	add	r3, r1
 8020522:	3312      	adds	r3, #18
 8020524:	2200      	movs	r2, #0
 8020526:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8020528:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802052c:	4907      	ldr	r1, [pc, #28]	; (802054c <etharp_find_entry+0x2d4>)
 802052e:	4613      	mov	r3, r2
 8020530:	005b      	lsls	r3, r3, #1
 8020532:	4413      	add	r3, r2
 8020534:	00db      	lsls	r3, r3, #3
 8020536:	440b      	add	r3, r1
 8020538:	3308      	adds	r3, #8
 802053a:	687a      	ldr	r2, [r7, #4]
 802053c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 802053e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8020542:	4618      	mov	r0, r3
 8020544:	3728      	adds	r7, #40	; 0x28
 8020546:	46bd      	mov	sp, r7
 8020548:	bd80      	pop	{r7, pc}
 802054a:	bf00      	nop
 802054c:	2000c00c 	.word	0x2000c00c
 8020550:	080282ac 	.word	0x080282ac
 8020554:	080282e4 	.word	0x080282e4
 8020558:	08028324 	.word	0x08028324
 802055c:	0802834c 	.word	0x0802834c
 8020560:	08028364 	.word	0x08028364
 8020564:	08028378 	.word	0x08028378

08020568 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8020568:	b580      	push	{r7, lr}
 802056a:	b088      	sub	sp, #32
 802056c:	af02      	add	r7, sp, #8
 802056e:	60f8      	str	r0, [r7, #12]
 8020570:	60b9      	str	r1, [r7, #8]
 8020572:	607a      	str	r2, [r7, #4]
 8020574:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8020576:	68fb      	ldr	r3, [r7, #12]
 8020578:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802057c:	2b06      	cmp	r3, #6
 802057e:	d006      	beq.n	802058e <etharp_update_arp_entry+0x26>
 8020580:	4b48      	ldr	r3, [pc, #288]	; (80206a4 <etharp_update_arp_entry+0x13c>)
 8020582:	f240 12a9 	movw	r2, #425	; 0x1a9
 8020586:	4948      	ldr	r1, [pc, #288]	; (80206a8 <etharp_update_arp_entry+0x140>)
 8020588:	4848      	ldr	r0, [pc, #288]	; (80206ac <etharp_update_arp_entry+0x144>)
 802058a:	f003 fcb9 	bl	8023f00 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 802058e:	68bb      	ldr	r3, [r7, #8]
 8020590:	2b00      	cmp	r3, #0
 8020592:	d012      	beq.n	80205ba <etharp_update_arp_entry+0x52>
 8020594:	68bb      	ldr	r3, [r7, #8]
 8020596:	681b      	ldr	r3, [r3, #0]
 8020598:	2b00      	cmp	r3, #0
 802059a:	d00e      	beq.n	80205ba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802059c:	68bb      	ldr	r3, [r7, #8]
 802059e:	681b      	ldr	r3, [r3, #0]
 80205a0:	68f9      	ldr	r1, [r7, #12]
 80205a2:	4618      	mov	r0, r3
 80205a4:	f001 f8fe 	bl	80217a4 <ip4_addr_isbroadcast_u32>
 80205a8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80205aa:	2b00      	cmp	r3, #0
 80205ac:	d105      	bne.n	80205ba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80205ae:	68bb      	ldr	r3, [r7, #8]
 80205b0:	681b      	ldr	r3, [r3, #0]
 80205b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80205b6:	2be0      	cmp	r3, #224	; 0xe0
 80205b8:	d102      	bne.n	80205c0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80205ba:	f06f 030f 	mvn.w	r3, #15
 80205be:	e06c      	b.n	802069a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80205c0:	78fb      	ldrb	r3, [r7, #3]
 80205c2:	68fa      	ldr	r2, [r7, #12]
 80205c4:	4619      	mov	r1, r3
 80205c6:	68b8      	ldr	r0, [r7, #8]
 80205c8:	f7ff fe56 	bl	8020278 <etharp_find_entry>
 80205cc:	4603      	mov	r3, r0
 80205ce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80205d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80205d4:	2b00      	cmp	r3, #0
 80205d6:	da02      	bge.n	80205de <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80205d8:	8afb      	ldrh	r3, [r7, #22]
 80205da:	b25b      	sxtb	r3, r3
 80205dc:	e05d      	b.n	802069a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80205de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80205e2:	4933      	ldr	r1, [pc, #204]	; (80206b0 <etharp_update_arp_entry+0x148>)
 80205e4:	4613      	mov	r3, r2
 80205e6:	005b      	lsls	r3, r3, #1
 80205e8:	4413      	add	r3, r2
 80205ea:	00db      	lsls	r3, r3, #3
 80205ec:	440b      	add	r3, r1
 80205ee:	3314      	adds	r3, #20
 80205f0:	2202      	movs	r2, #2
 80205f2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80205f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80205f8:	492d      	ldr	r1, [pc, #180]	; (80206b0 <etharp_update_arp_entry+0x148>)
 80205fa:	4613      	mov	r3, r2
 80205fc:	005b      	lsls	r3, r3, #1
 80205fe:	4413      	add	r3, r2
 8020600:	00db      	lsls	r3, r3, #3
 8020602:	440b      	add	r3, r1
 8020604:	3308      	adds	r3, #8
 8020606:	68fa      	ldr	r2, [r7, #12]
 8020608:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 802060a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802060e:	4613      	mov	r3, r2
 8020610:	005b      	lsls	r3, r3, #1
 8020612:	4413      	add	r3, r2
 8020614:	00db      	lsls	r3, r3, #3
 8020616:	3308      	adds	r3, #8
 8020618:	4a25      	ldr	r2, [pc, #148]	; (80206b0 <etharp_update_arp_entry+0x148>)
 802061a:	4413      	add	r3, r2
 802061c:	3304      	adds	r3, #4
 802061e:	2206      	movs	r2, #6
 8020620:	6879      	ldr	r1, [r7, #4]
 8020622:	4618      	mov	r0, r3
 8020624:	f003 fb5c 	bl	8023ce0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8020628:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802062c:	4920      	ldr	r1, [pc, #128]	; (80206b0 <etharp_update_arp_entry+0x148>)
 802062e:	4613      	mov	r3, r2
 8020630:	005b      	lsls	r3, r3, #1
 8020632:	4413      	add	r3, r2
 8020634:	00db      	lsls	r3, r3, #3
 8020636:	440b      	add	r3, r1
 8020638:	3312      	adds	r3, #18
 802063a:	2200      	movs	r2, #0
 802063c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 802063e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020642:	491b      	ldr	r1, [pc, #108]	; (80206b0 <etharp_update_arp_entry+0x148>)
 8020644:	4613      	mov	r3, r2
 8020646:	005b      	lsls	r3, r3, #1
 8020648:	4413      	add	r3, r2
 802064a:	00db      	lsls	r3, r3, #3
 802064c:	440b      	add	r3, r1
 802064e:	681b      	ldr	r3, [r3, #0]
 8020650:	2b00      	cmp	r3, #0
 8020652:	d021      	beq.n	8020698 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8020654:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020658:	4915      	ldr	r1, [pc, #84]	; (80206b0 <etharp_update_arp_entry+0x148>)
 802065a:	4613      	mov	r3, r2
 802065c:	005b      	lsls	r3, r3, #1
 802065e:	4413      	add	r3, r2
 8020660:	00db      	lsls	r3, r3, #3
 8020662:	440b      	add	r3, r1
 8020664:	681b      	ldr	r3, [r3, #0]
 8020666:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8020668:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802066c:	4910      	ldr	r1, [pc, #64]	; (80206b0 <etharp_update_arp_entry+0x148>)
 802066e:	4613      	mov	r3, r2
 8020670:	005b      	lsls	r3, r3, #1
 8020672:	4413      	add	r3, r2
 8020674:	00db      	lsls	r3, r3, #3
 8020676:	440b      	add	r3, r1
 8020678:	2200      	movs	r2, #0
 802067a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 802067c:	68fb      	ldr	r3, [r7, #12]
 802067e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8020682:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020686:	9300      	str	r3, [sp, #0]
 8020688:	687b      	ldr	r3, [r7, #4]
 802068a:	6939      	ldr	r1, [r7, #16]
 802068c:	68f8      	ldr	r0, [r7, #12]
 802068e:	f001 ff97 	bl	80225c0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8020692:	6938      	ldr	r0, [r7, #16]
 8020694:	f7f8 f9fc 	bl	8018a90 <pbuf_free>
  }
  return ERR_OK;
 8020698:	2300      	movs	r3, #0
}
 802069a:	4618      	mov	r0, r3
 802069c:	3718      	adds	r7, #24
 802069e:	46bd      	mov	sp, r7
 80206a0:	bd80      	pop	{r7, pc}
 80206a2:	bf00      	nop
 80206a4:	080282ac 	.word	0x080282ac
 80206a8:	080283a4 	.word	0x080283a4
 80206ac:	08028324 	.word	0x08028324
 80206b0:	2000c00c 	.word	0x2000c00c

080206b4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80206b4:	b580      	push	{r7, lr}
 80206b6:	b084      	sub	sp, #16
 80206b8:	af00      	add	r7, sp, #0
 80206ba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80206bc:	2300      	movs	r3, #0
 80206be:	60fb      	str	r3, [r7, #12]
 80206c0:	e01e      	b.n	8020700 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80206c2:	4913      	ldr	r1, [pc, #76]	; (8020710 <etharp_cleanup_netif+0x5c>)
 80206c4:	68fa      	ldr	r2, [r7, #12]
 80206c6:	4613      	mov	r3, r2
 80206c8:	005b      	lsls	r3, r3, #1
 80206ca:	4413      	add	r3, r2
 80206cc:	00db      	lsls	r3, r3, #3
 80206ce:	440b      	add	r3, r1
 80206d0:	3314      	adds	r3, #20
 80206d2:	781b      	ldrb	r3, [r3, #0]
 80206d4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80206d6:	7afb      	ldrb	r3, [r7, #11]
 80206d8:	2b00      	cmp	r3, #0
 80206da:	d00e      	beq.n	80206fa <etharp_cleanup_netif+0x46>
 80206dc:	490c      	ldr	r1, [pc, #48]	; (8020710 <etharp_cleanup_netif+0x5c>)
 80206de:	68fa      	ldr	r2, [r7, #12]
 80206e0:	4613      	mov	r3, r2
 80206e2:	005b      	lsls	r3, r3, #1
 80206e4:	4413      	add	r3, r2
 80206e6:	00db      	lsls	r3, r3, #3
 80206e8:	440b      	add	r3, r1
 80206ea:	3308      	adds	r3, #8
 80206ec:	681b      	ldr	r3, [r3, #0]
 80206ee:	687a      	ldr	r2, [r7, #4]
 80206f0:	429a      	cmp	r2, r3
 80206f2:	d102      	bne.n	80206fa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80206f4:	68f8      	ldr	r0, [r7, #12]
 80206f6:	f7ff fce5 	bl	80200c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80206fa:	68fb      	ldr	r3, [r7, #12]
 80206fc:	3301      	adds	r3, #1
 80206fe:	60fb      	str	r3, [r7, #12]
 8020700:	68fb      	ldr	r3, [r7, #12]
 8020702:	2b09      	cmp	r3, #9
 8020704:	dddd      	ble.n	80206c2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8020706:	bf00      	nop
 8020708:	bf00      	nop
 802070a:	3710      	adds	r7, #16
 802070c:	46bd      	mov	sp, r7
 802070e:	bd80      	pop	{r7, pc}
 8020710:	2000c00c 	.word	0x2000c00c

08020714 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8020714:	b5b0      	push	{r4, r5, r7, lr}
 8020716:	b08a      	sub	sp, #40	; 0x28
 8020718:	af04      	add	r7, sp, #16
 802071a:	6078      	str	r0, [r7, #4]
 802071c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802071e:	683b      	ldr	r3, [r7, #0]
 8020720:	2b00      	cmp	r3, #0
 8020722:	d107      	bne.n	8020734 <etharp_input+0x20>
 8020724:	4b3d      	ldr	r3, [pc, #244]	; (802081c <etharp_input+0x108>)
 8020726:	f240 228a 	movw	r2, #650	; 0x28a
 802072a:	493d      	ldr	r1, [pc, #244]	; (8020820 <etharp_input+0x10c>)
 802072c:	483d      	ldr	r0, [pc, #244]	; (8020824 <etharp_input+0x110>)
 802072e:	f003 fbe7 	bl	8023f00 <iprintf>
 8020732:	e06f      	b.n	8020814 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8020734:	687b      	ldr	r3, [r7, #4]
 8020736:	685b      	ldr	r3, [r3, #4]
 8020738:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 802073a:	693b      	ldr	r3, [r7, #16]
 802073c:	881b      	ldrh	r3, [r3, #0]
 802073e:	b29b      	uxth	r3, r3
 8020740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020744:	d10c      	bne.n	8020760 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8020746:	693b      	ldr	r3, [r7, #16]
 8020748:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 802074a:	2b06      	cmp	r3, #6
 802074c:	d108      	bne.n	8020760 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 802074e:	693b      	ldr	r3, [r7, #16]
 8020750:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8020752:	2b04      	cmp	r3, #4
 8020754:	d104      	bne.n	8020760 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8020756:	693b      	ldr	r3, [r7, #16]
 8020758:	885b      	ldrh	r3, [r3, #2]
 802075a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 802075c:	2b08      	cmp	r3, #8
 802075e:	d003      	beq.n	8020768 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8020760:	6878      	ldr	r0, [r7, #4]
 8020762:	f7f8 f995 	bl	8018a90 <pbuf_free>
    return;
 8020766:	e055      	b.n	8020814 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8020768:	693b      	ldr	r3, [r7, #16]
 802076a:	330e      	adds	r3, #14
 802076c:	681b      	ldr	r3, [r3, #0]
 802076e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8020770:	693b      	ldr	r3, [r7, #16]
 8020772:	3318      	adds	r3, #24
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020778:	683b      	ldr	r3, [r7, #0]
 802077a:	3304      	adds	r3, #4
 802077c:	681b      	ldr	r3, [r3, #0]
 802077e:	2b00      	cmp	r3, #0
 8020780:	d102      	bne.n	8020788 <etharp_input+0x74>
    for_us = 0;
 8020782:	2300      	movs	r3, #0
 8020784:	75fb      	strb	r3, [r7, #23]
 8020786:	e009      	b.n	802079c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8020788:	68ba      	ldr	r2, [r7, #8]
 802078a:	683b      	ldr	r3, [r7, #0]
 802078c:	3304      	adds	r3, #4
 802078e:	681b      	ldr	r3, [r3, #0]
 8020790:	429a      	cmp	r2, r3
 8020792:	bf0c      	ite	eq
 8020794:	2301      	moveq	r3, #1
 8020796:	2300      	movne	r3, #0
 8020798:	b2db      	uxtb	r3, r3
 802079a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 802079c:	693b      	ldr	r3, [r7, #16]
 802079e:	f103 0208 	add.w	r2, r3, #8
 80207a2:	7dfb      	ldrb	r3, [r7, #23]
 80207a4:	2b00      	cmp	r3, #0
 80207a6:	d001      	beq.n	80207ac <etharp_input+0x98>
 80207a8:	2301      	movs	r3, #1
 80207aa:	e000      	b.n	80207ae <etharp_input+0x9a>
 80207ac:	2302      	movs	r3, #2
 80207ae:	f107 010c 	add.w	r1, r7, #12
 80207b2:	6838      	ldr	r0, [r7, #0]
 80207b4:	f7ff fed8 	bl	8020568 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80207b8:	693b      	ldr	r3, [r7, #16]
 80207ba:	88db      	ldrh	r3, [r3, #6]
 80207bc:	b29b      	uxth	r3, r3
 80207be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80207c2:	d003      	beq.n	80207cc <etharp_input+0xb8>
 80207c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80207c8:	d01e      	beq.n	8020808 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80207ca:	e020      	b.n	802080e <etharp_input+0xfa>
      if (for_us) {
 80207cc:	7dfb      	ldrb	r3, [r7, #23]
 80207ce:	2b00      	cmp	r3, #0
 80207d0:	d01c      	beq.n	802080c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80207d2:	683b      	ldr	r3, [r7, #0]
 80207d4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80207d8:	693b      	ldr	r3, [r7, #16]
 80207da:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80207de:	683b      	ldr	r3, [r7, #0]
 80207e0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80207e4:	683b      	ldr	r3, [r7, #0]
 80207e6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80207e8:	693a      	ldr	r2, [r7, #16]
 80207ea:	3208      	adds	r2, #8
        etharp_raw(netif,
 80207ec:	2102      	movs	r1, #2
 80207ee:	9103      	str	r1, [sp, #12]
 80207f0:	f107 010c 	add.w	r1, r7, #12
 80207f4:	9102      	str	r1, [sp, #8]
 80207f6:	9201      	str	r2, [sp, #4]
 80207f8:	9300      	str	r3, [sp, #0]
 80207fa:	462b      	mov	r3, r5
 80207fc:	4622      	mov	r2, r4
 80207fe:	4601      	mov	r1, r0
 8020800:	6838      	ldr	r0, [r7, #0]
 8020802:	f000 faeb 	bl	8020ddc <etharp_raw>
      break;
 8020806:	e001      	b.n	802080c <etharp_input+0xf8>
      break;
 8020808:	bf00      	nop
 802080a:	e000      	b.n	802080e <etharp_input+0xfa>
      break;
 802080c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 802080e:	6878      	ldr	r0, [r7, #4]
 8020810:	f7f8 f93e 	bl	8018a90 <pbuf_free>
}
 8020814:	3718      	adds	r7, #24
 8020816:	46bd      	mov	sp, r7
 8020818:	bdb0      	pop	{r4, r5, r7, pc}
 802081a:	bf00      	nop
 802081c:	080282ac 	.word	0x080282ac
 8020820:	080283fc 	.word	0x080283fc
 8020824:	08028324 	.word	0x08028324

08020828 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8020828:	b580      	push	{r7, lr}
 802082a:	b086      	sub	sp, #24
 802082c:	af02      	add	r7, sp, #8
 802082e:	60f8      	str	r0, [r7, #12]
 8020830:	60b9      	str	r1, [r7, #8]
 8020832:	4613      	mov	r3, r2
 8020834:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8020836:	79fa      	ldrb	r2, [r7, #7]
 8020838:	4944      	ldr	r1, [pc, #272]	; (802094c <etharp_output_to_arp_index+0x124>)
 802083a:	4613      	mov	r3, r2
 802083c:	005b      	lsls	r3, r3, #1
 802083e:	4413      	add	r3, r2
 8020840:	00db      	lsls	r3, r3, #3
 8020842:	440b      	add	r3, r1
 8020844:	3314      	adds	r3, #20
 8020846:	781b      	ldrb	r3, [r3, #0]
 8020848:	2b01      	cmp	r3, #1
 802084a:	d806      	bhi.n	802085a <etharp_output_to_arp_index+0x32>
 802084c:	4b40      	ldr	r3, [pc, #256]	; (8020950 <etharp_output_to_arp_index+0x128>)
 802084e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8020852:	4940      	ldr	r1, [pc, #256]	; (8020954 <etharp_output_to_arp_index+0x12c>)
 8020854:	4840      	ldr	r0, [pc, #256]	; (8020958 <etharp_output_to_arp_index+0x130>)
 8020856:	f003 fb53 	bl	8023f00 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 802085a:	79fa      	ldrb	r2, [r7, #7]
 802085c:	493b      	ldr	r1, [pc, #236]	; (802094c <etharp_output_to_arp_index+0x124>)
 802085e:	4613      	mov	r3, r2
 8020860:	005b      	lsls	r3, r3, #1
 8020862:	4413      	add	r3, r2
 8020864:	00db      	lsls	r3, r3, #3
 8020866:	440b      	add	r3, r1
 8020868:	3314      	adds	r3, #20
 802086a:	781b      	ldrb	r3, [r3, #0]
 802086c:	2b02      	cmp	r3, #2
 802086e:	d153      	bne.n	8020918 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8020870:	79fa      	ldrb	r2, [r7, #7]
 8020872:	4936      	ldr	r1, [pc, #216]	; (802094c <etharp_output_to_arp_index+0x124>)
 8020874:	4613      	mov	r3, r2
 8020876:	005b      	lsls	r3, r3, #1
 8020878:	4413      	add	r3, r2
 802087a:	00db      	lsls	r3, r3, #3
 802087c:	440b      	add	r3, r1
 802087e:	3312      	adds	r3, #18
 8020880:	881b      	ldrh	r3, [r3, #0]
 8020882:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8020886:	d919      	bls.n	80208bc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8020888:	79fa      	ldrb	r2, [r7, #7]
 802088a:	4613      	mov	r3, r2
 802088c:	005b      	lsls	r3, r3, #1
 802088e:	4413      	add	r3, r2
 8020890:	00db      	lsls	r3, r3, #3
 8020892:	4a2e      	ldr	r2, [pc, #184]	; (802094c <etharp_output_to_arp_index+0x124>)
 8020894:	4413      	add	r3, r2
 8020896:	3304      	adds	r3, #4
 8020898:	4619      	mov	r1, r3
 802089a:	68f8      	ldr	r0, [r7, #12]
 802089c:	f000 fb4c 	bl	8020f38 <etharp_request>
 80208a0:	4603      	mov	r3, r0
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	d138      	bne.n	8020918 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80208a6:	79fa      	ldrb	r2, [r7, #7]
 80208a8:	4928      	ldr	r1, [pc, #160]	; (802094c <etharp_output_to_arp_index+0x124>)
 80208aa:	4613      	mov	r3, r2
 80208ac:	005b      	lsls	r3, r3, #1
 80208ae:	4413      	add	r3, r2
 80208b0:	00db      	lsls	r3, r3, #3
 80208b2:	440b      	add	r3, r1
 80208b4:	3314      	adds	r3, #20
 80208b6:	2203      	movs	r2, #3
 80208b8:	701a      	strb	r2, [r3, #0]
 80208ba:	e02d      	b.n	8020918 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80208bc:	79fa      	ldrb	r2, [r7, #7]
 80208be:	4923      	ldr	r1, [pc, #140]	; (802094c <etharp_output_to_arp_index+0x124>)
 80208c0:	4613      	mov	r3, r2
 80208c2:	005b      	lsls	r3, r3, #1
 80208c4:	4413      	add	r3, r2
 80208c6:	00db      	lsls	r3, r3, #3
 80208c8:	440b      	add	r3, r1
 80208ca:	3312      	adds	r3, #18
 80208cc:	881b      	ldrh	r3, [r3, #0]
 80208ce:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80208d2:	d321      	bcc.n	8020918 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80208d4:	79fa      	ldrb	r2, [r7, #7]
 80208d6:	4613      	mov	r3, r2
 80208d8:	005b      	lsls	r3, r3, #1
 80208da:	4413      	add	r3, r2
 80208dc:	00db      	lsls	r3, r3, #3
 80208de:	4a1b      	ldr	r2, [pc, #108]	; (802094c <etharp_output_to_arp_index+0x124>)
 80208e0:	4413      	add	r3, r2
 80208e2:	1d19      	adds	r1, r3, #4
 80208e4:	79fa      	ldrb	r2, [r7, #7]
 80208e6:	4613      	mov	r3, r2
 80208e8:	005b      	lsls	r3, r3, #1
 80208ea:	4413      	add	r3, r2
 80208ec:	00db      	lsls	r3, r3, #3
 80208ee:	3308      	adds	r3, #8
 80208f0:	4a16      	ldr	r2, [pc, #88]	; (802094c <etharp_output_to_arp_index+0x124>)
 80208f2:	4413      	add	r3, r2
 80208f4:	3304      	adds	r3, #4
 80208f6:	461a      	mov	r2, r3
 80208f8:	68f8      	ldr	r0, [r7, #12]
 80208fa:	f000 fafb 	bl	8020ef4 <etharp_request_dst>
 80208fe:	4603      	mov	r3, r0
 8020900:	2b00      	cmp	r3, #0
 8020902:	d109      	bne.n	8020918 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020904:	79fa      	ldrb	r2, [r7, #7]
 8020906:	4911      	ldr	r1, [pc, #68]	; (802094c <etharp_output_to_arp_index+0x124>)
 8020908:	4613      	mov	r3, r2
 802090a:	005b      	lsls	r3, r3, #1
 802090c:	4413      	add	r3, r2
 802090e:	00db      	lsls	r3, r3, #3
 8020910:	440b      	add	r3, r1
 8020912:	3314      	adds	r3, #20
 8020914:	2203      	movs	r2, #3
 8020916:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8020918:	68fb      	ldr	r3, [r7, #12]
 802091a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 802091e:	79fa      	ldrb	r2, [r7, #7]
 8020920:	4613      	mov	r3, r2
 8020922:	005b      	lsls	r3, r3, #1
 8020924:	4413      	add	r3, r2
 8020926:	00db      	lsls	r3, r3, #3
 8020928:	3308      	adds	r3, #8
 802092a:	4a08      	ldr	r2, [pc, #32]	; (802094c <etharp_output_to_arp_index+0x124>)
 802092c:	4413      	add	r3, r2
 802092e:	3304      	adds	r3, #4
 8020930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020934:	9200      	str	r2, [sp, #0]
 8020936:	460a      	mov	r2, r1
 8020938:	68b9      	ldr	r1, [r7, #8]
 802093a:	68f8      	ldr	r0, [r7, #12]
 802093c:	f001 fe40 	bl	80225c0 <ethernet_output>
 8020940:	4603      	mov	r3, r0
}
 8020942:	4618      	mov	r0, r3
 8020944:	3710      	adds	r7, #16
 8020946:	46bd      	mov	sp, r7
 8020948:	bd80      	pop	{r7, pc}
 802094a:	bf00      	nop
 802094c:	2000c00c 	.word	0x2000c00c
 8020950:	080282ac 	.word	0x080282ac
 8020954:	0802841c 	.word	0x0802841c
 8020958:	08028324 	.word	0x08028324

0802095c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 802095c:	b580      	push	{r7, lr}
 802095e:	b08a      	sub	sp, #40	; 0x28
 8020960:	af02      	add	r7, sp, #8
 8020962:	60f8      	str	r0, [r7, #12]
 8020964:	60b9      	str	r1, [r7, #8]
 8020966:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8020968:	687b      	ldr	r3, [r7, #4]
 802096a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802096c:	68fb      	ldr	r3, [r7, #12]
 802096e:	2b00      	cmp	r3, #0
 8020970:	d106      	bne.n	8020980 <etharp_output+0x24>
 8020972:	4b73      	ldr	r3, [pc, #460]	; (8020b40 <etharp_output+0x1e4>)
 8020974:	f240 321e 	movw	r2, #798	; 0x31e
 8020978:	4972      	ldr	r1, [pc, #456]	; (8020b44 <etharp_output+0x1e8>)
 802097a:	4873      	ldr	r0, [pc, #460]	; (8020b48 <etharp_output+0x1ec>)
 802097c:	f003 fac0 	bl	8023f00 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8020980:	68bb      	ldr	r3, [r7, #8]
 8020982:	2b00      	cmp	r3, #0
 8020984:	d106      	bne.n	8020994 <etharp_output+0x38>
 8020986:	4b6e      	ldr	r3, [pc, #440]	; (8020b40 <etharp_output+0x1e4>)
 8020988:	f240 321f 	movw	r2, #799	; 0x31f
 802098c:	496f      	ldr	r1, [pc, #444]	; (8020b4c <etharp_output+0x1f0>)
 802098e:	486e      	ldr	r0, [pc, #440]	; (8020b48 <etharp_output+0x1ec>)
 8020990:	f003 fab6 	bl	8023f00 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	2b00      	cmp	r3, #0
 8020998:	d106      	bne.n	80209a8 <etharp_output+0x4c>
 802099a:	4b69      	ldr	r3, [pc, #420]	; (8020b40 <etharp_output+0x1e4>)
 802099c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80209a0:	496b      	ldr	r1, [pc, #428]	; (8020b50 <etharp_output+0x1f4>)
 80209a2:	4869      	ldr	r0, [pc, #420]	; (8020b48 <etharp_output+0x1ec>)
 80209a4:	f003 faac 	bl	8023f00 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	681b      	ldr	r3, [r3, #0]
 80209ac:	68f9      	ldr	r1, [r7, #12]
 80209ae:	4618      	mov	r0, r3
 80209b0:	f000 fef8 	bl	80217a4 <ip4_addr_isbroadcast_u32>
 80209b4:	4603      	mov	r3, r0
 80209b6:	2b00      	cmp	r3, #0
 80209b8:	d002      	beq.n	80209c0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80209ba:	4b66      	ldr	r3, [pc, #408]	; (8020b54 <etharp_output+0x1f8>)
 80209bc:	61fb      	str	r3, [r7, #28]
 80209be:	e0af      	b.n	8020b20 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80209c0:	687b      	ldr	r3, [r7, #4]
 80209c2:	681b      	ldr	r3, [r3, #0]
 80209c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80209c8:	2be0      	cmp	r3, #224	; 0xe0
 80209ca:	d118      	bne.n	80209fe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80209cc:	2301      	movs	r3, #1
 80209ce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80209d0:	2300      	movs	r3, #0
 80209d2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80209d4:	235e      	movs	r3, #94	; 0x5e
 80209d6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80209d8:	687b      	ldr	r3, [r7, #4]
 80209da:	3301      	adds	r3, #1
 80209dc:	781b      	ldrb	r3, [r3, #0]
 80209de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80209e2:	b2db      	uxtb	r3, r3
 80209e4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	3302      	adds	r3, #2
 80209ea:	781b      	ldrb	r3, [r3, #0]
 80209ec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80209ee:	687b      	ldr	r3, [r7, #4]
 80209f0:	3303      	adds	r3, #3
 80209f2:	781b      	ldrb	r3, [r3, #0]
 80209f4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80209f6:	f107 0310 	add.w	r3, r7, #16
 80209fa:	61fb      	str	r3, [r7, #28]
 80209fc:	e090      	b.n	8020b20 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80209fe:	687b      	ldr	r3, [r7, #4]
 8020a00:	681a      	ldr	r2, [r3, #0]
 8020a02:	68fb      	ldr	r3, [r7, #12]
 8020a04:	3304      	adds	r3, #4
 8020a06:	681b      	ldr	r3, [r3, #0]
 8020a08:	405a      	eors	r2, r3
 8020a0a:	68fb      	ldr	r3, [r7, #12]
 8020a0c:	3308      	adds	r3, #8
 8020a0e:	681b      	ldr	r3, [r3, #0]
 8020a10:	4013      	ands	r3, r2
 8020a12:	2b00      	cmp	r3, #0
 8020a14:	d012      	beq.n	8020a3c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8020a16:	687b      	ldr	r3, [r7, #4]
 8020a18:	681b      	ldr	r3, [r3, #0]
 8020a1a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020a1c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8020a20:	4293      	cmp	r3, r2
 8020a22:	d00b      	beq.n	8020a3c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8020a24:	68fb      	ldr	r3, [r7, #12]
 8020a26:	330c      	adds	r3, #12
 8020a28:	681b      	ldr	r3, [r3, #0]
 8020a2a:	2b00      	cmp	r3, #0
 8020a2c:	d003      	beq.n	8020a36 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8020a2e:	68fb      	ldr	r3, [r7, #12]
 8020a30:	330c      	adds	r3, #12
 8020a32:	61bb      	str	r3, [r7, #24]
 8020a34:	e002      	b.n	8020a3c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8020a36:	f06f 0303 	mvn.w	r3, #3
 8020a3a:	e07d      	b.n	8020b38 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020a3c:	4b46      	ldr	r3, [pc, #280]	; (8020b58 <etharp_output+0x1fc>)
 8020a3e:	781b      	ldrb	r3, [r3, #0]
 8020a40:	4619      	mov	r1, r3
 8020a42:	4a46      	ldr	r2, [pc, #280]	; (8020b5c <etharp_output+0x200>)
 8020a44:	460b      	mov	r3, r1
 8020a46:	005b      	lsls	r3, r3, #1
 8020a48:	440b      	add	r3, r1
 8020a4a:	00db      	lsls	r3, r3, #3
 8020a4c:	4413      	add	r3, r2
 8020a4e:	3314      	adds	r3, #20
 8020a50:	781b      	ldrb	r3, [r3, #0]
 8020a52:	2b01      	cmp	r3, #1
 8020a54:	d925      	bls.n	8020aa2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8020a56:	4b40      	ldr	r3, [pc, #256]	; (8020b58 <etharp_output+0x1fc>)
 8020a58:	781b      	ldrb	r3, [r3, #0]
 8020a5a:	4619      	mov	r1, r3
 8020a5c:	4a3f      	ldr	r2, [pc, #252]	; (8020b5c <etharp_output+0x200>)
 8020a5e:	460b      	mov	r3, r1
 8020a60:	005b      	lsls	r3, r3, #1
 8020a62:	440b      	add	r3, r1
 8020a64:	00db      	lsls	r3, r3, #3
 8020a66:	4413      	add	r3, r2
 8020a68:	3308      	adds	r3, #8
 8020a6a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020a6c:	68fa      	ldr	r2, [r7, #12]
 8020a6e:	429a      	cmp	r2, r3
 8020a70:	d117      	bne.n	8020aa2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8020a72:	69bb      	ldr	r3, [r7, #24]
 8020a74:	681a      	ldr	r2, [r3, #0]
 8020a76:	4b38      	ldr	r3, [pc, #224]	; (8020b58 <etharp_output+0x1fc>)
 8020a78:	781b      	ldrb	r3, [r3, #0]
 8020a7a:	4618      	mov	r0, r3
 8020a7c:	4937      	ldr	r1, [pc, #220]	; (8020b5c <etharp_output+0x200>)
 8020a7e:	4603      	mov	r3, r0
 8020a80:	005b      	lsls	r3, r3, #1
 8020a82:	4403      	add	r3, r0
 8020a84:	00db      	lsls	r3, r3, #3
 8020a86:	440b      	add	r3, r1
 8020a88:	3304      	adds	r3, #4
 8020a8a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8020a8c:	429a      	cmp	r2, r3
 8020a8e:	d108      	bne.n	8020aa2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8020a90:	4b31      	ldr	r3, [pc, #196]	; (8020b58 <etharp_output+0x1fc>)
 8020a92:	781b      	ldrb	r3, [r3, #0]
 8020a94:	461a      	mov	r2, r3
 8020a96:	68b9      	ldr	r1, [r7, #8]
 8020a98:	68f8      	ldr	r0, [r7, #12]
 8020a9a:	f7ff fec5 	bl	8020828 <etharp_output_to_arp_index>
 8020a9e:	4603      	mov	r3, r0
 8020aa0:	e04a      	b.n	8020b38 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020aa2:	2300      	movs	r3, #0
 8020aa4:	75fb      	strb	r3, [r7, #23]
 8020aa6:	e031      	b.n	8020b0c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020aa8:	7dfa      	ldrb	r2, [r7, #23]
 8020aaa:	492c      	ldr	r1, [pc, #176]	; (8020b5c <etharp_output+0x200>)
 8020aac:	4613      	mov	r3, r2
 8020aae:	005b      	lsls	r3, r3, #1
 8020ab0:	4413      	add	r3, r2
 8020ab2:	00db      	lsls	r3, r3, #3
 8020ab4:	440b      	add	r3, r1
 8020ab6:	3314      	adds	r3, #20
 8020ab8:	781b      	ldrb	r3, [r3, #0]
 8020aba:	2b01      	cmp	r3, #1
 8020abc:	d923      	bls.n	8020b06 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8020abe:	7dfa      	ldrb	r2, [r7, #23]
 8020ac0:	4926      	ldr	r1, [pc, #152]	; (8020b5c <etharp_output+0x200>)
 8020ac2:	4613      	mov	r3, r2
 8020ac4:	005b      	lsls	r3, r3, #1
 8020ac6:	4413      	add	r3, r2
 8020ac8:	00db      	lsls	r3, r3, #3
 8020aca:	440b      	add	r3, r1
 8020acc:	3308      	adds	r3, #8
 8020ace:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020ad0:	68fa      	ldr	r2, [r7, #12]
 8020ad2:	429a      	cmp	r2, r3
 8020ad4:	d117      	bne.n	8020b06 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8020ad6:	69bb      	ldr	r3, [r7, #24]
 8020ad8:	6819      	ldr	r1, [r3, #0]
 8020ada:	7dfa      	ldrb	r2, [r7, #23]
 8020adc:	481f      	ldr	r0, [pc, #124]	; (8020b5c <etharp_output+0x200>)
 8020ade:	4613      	mov	r3, r2
 8020ae0:	005b      	lsls	r3, r3, #1
 8020ae2:	4413      	add	r3, r2
 8020ae4:	00db      	lsls	r3, r3, #3
 8020ae6:	4403      	add	r3, r0
 8020ae8:	3304      	adds	r3, #4
 8020aea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8020aec:	4299      	cmp	r1, r3
 8020aee:	d10a      	bne.n	8020b06 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8020af0:	4a19      	ldr	r2, [pc, #100]	; (8020b58 <etharp_output+0x1fc>)
 8020af2:	7dfb      	ldrb	r3, [r7, #23]
 8020af4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8020af6:	7dfb      	ldrb	r3, [r7, #23]
 8020af8:	461a      	mov	r2, r3
 8020afa:	68b9      	ldr	r1, [r7, #8]
 8020afc:	68f8      	ldr	r0, [r7, #12]
 8020afe:	f7ff fe93 	bl	8020828 <etharp_output_to_arp_index>
 8020b02:	4603      	mov	r3, r0
 8020b04:	e018      	b.n	8020b38 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020b06:	7dfb      	ldrb	r3, [r7, #23]
 8020b08:	3301      	adds	r3, #1
 8020b0a:	75fb      	strb	r3, [r7, #23]
 8020b0c:	7dfb      	ldrb	r3, [r7, #23]
 8020b0e:	2b09      	cmp	r3, #9
 8020b10:	d9ca      	bls.n	8020aa8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8020b12:	68ba      	ldr	r2, [r7, #8]
 8020b14:	69b9      	ldr	r1, [r7, #24]
 8020b16:	68f8      	ldr	r0, [r7, #12]
 8020b18:	f000 f822 	bl	8020b60 <etharp_query>
 8020b1c:	4603      	mov	r3, r0
 8020b1e:	e00b      	b.n	8020b38 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8020b20:	68fb      	ldr	r3, [r7, #12]
 8020b22:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8020b26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020b2a:	9300      	str	r3, [sp, #0]
 8020b2c:	69fb      	ldr	r3, [r7, #28]
 8020b2e:	68b9      	ldr	r1, [r7, #8]
 8020b30:	68f8      	ldr	r0, [r7, #12]
 8020b32:	f001 fd45 	bl	80225c0 <ethernet_output>
 8020b36:	4603      	mov	r3, r0
}
 8020b38:	4618      	mov	r0, r3
 8020b3a:	3720      	adds	r7, #32
 8020b3c:	46bd      	mov	sp, r7
 8020b3e:	bd80      	pop	{r7, pc}
 8020b40:	080282ac 	.word	0x080282ac
 8020b44:	080283fc 	.word	0x080283fc
 8020b48:	08028324 	.word	0x08028324
 8020b4c:	0802844c 	.word	0x0802844c
 8020b50:	080283ec 	.word	0x080283ec
 8020b54:	08028afc 	.word	0x08028afc
 8020b58:	2000c0fc 	.word	0x2000c0fc
 8020b5c:	2000c00c 	.word	0x2000c00c

08020b60 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8020b60:	b580      	push	{r7, lr}
 8020b62:	b08c      	sub	sp, #48	; 0x30
 8020b64:	af02      	add	r7, sp, #8
 8020b66:	60f8      	str	r0, [r7, #12]
 8020b68:	60b9      	str	r1, [r7, #8]
 8020b6a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8020b6c:	68fb      	ldr	r3, [r7, #12]
 8020b6e:	3326      	adds	r3, #38	; 0x26
 8020b70:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8020b72:	23ff      	movs	r3, #255	; 0xff
 8020b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8020b78:	2300      	movs	r3, #0
 8020b7a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020b7c:	68bb      	ldr	r3, [r7, #8]
 8020b7e:	681b      	ldr	r3, [r3, #0]
 8020b80:	68f9      	ldr	r1, [r7, #12]
 8020b82:	4618      	mov	r0, r3
 8020b84:	f000 fe0e 	bl	80217a4 <ip4_addr_isbroadcast_u32>
 8020b88:	4603      	mov	r3, r0
 8020b8a:	2b00      	cmp	r3, #0
 8020b8c:	d10c      	bne.n	8020ba8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020b8e:	68bb      	ldr	r3, [r7, #8]
 8020b90:	681b      	ldr	r3, [r3, #0]
 8020b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020b96:	2be0      	cmp	r3, #224	; 0xe0
 8020b98:	d006      	beq.n	8020ba8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020b9a:	68bb      	ldr	r3, [r7, #8]
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	d003      	beq.n	8020ba8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8020ba0:	68bb      	ldr	r3, [r7, #8]
 8020ba2:	681b      	ldr	r3, [r3, #0]
 8020ba4:	2b00      	cmp	r3, #0
 8020ba6:	d102      	bne.n	8020bae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8020ba8:	f06f 030f 	mvn.w	r3, #15
 8020bac:	e101      	b.n	8020db2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8020bae:	68fa      	ldr	r2, [r7, #12]
 8020bb0:	2101      	movs	r1, #1
 8020bb2:	68b8      	ldr	r0, [r7, #8]
 8020bb4:	f7ff fb60 	bl	8020278 <etharp_find_entry>
 8020bb8:	4603      	mov	r3, r0
 8020bba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8020bbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020bc0:	2b00      	cmp	r3, #0
 8020bc2:	da02      	bge.n	8020bca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8020bc4:	8a7b      	ldrh	r3, [r7, #18]
 8020bc6:	b25b      	sxtb	r3, r3
 8020bc8:	e0f3      	b.n	8020db2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8020bca:	8a7b      	ldrh	r3, [r7, #18]
 8020bcc:	2b7e      	cmp	r3, #126	; 0x7e
 8020bce:	d906      	bls.n	8020bde <etharp_query+0x7e>
 8020bd0:	4b7a      	ldr	r3, [pc, #488]	; (8020dbc <etharp_query+0x25c>)
 8020bd2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8020bd6:	497a      	ldr	r1, [pc, #488]	; (8020dc0 <etharp_query+0x260>)
 8020bd8:	487a      	ldr	r0, [pc, #488]	; (8020dc4 <etharp_query+0x264>)
 8020bda:	f003 f991 	bl	8023f00 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8020bde:	8a7b      	ldrh	r3, [r7, #18]
 8020be0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8020be2:	7c7a      	ldrb	r2, [r7, #17]
 8020be4:	4978      	ldr	r1, [pc, #480]	; (8020dc8 <etharp_query+0x268>)
 8020be6:	4613      	mov	r3, r2
 8020be8:	005b      	lsls	r3, r3, #1
 8020bea:	4413      	add	r3, r2
 8020bec:	00db      	lsls	r3, r3, #3
 8020bee:	440b      	add	r3, r1
 8020bf0:	3314      	adds	r3, #20
 8020bf2:	781b      	ldrb	r3, [r3, #0]
 8020bf4:	2b00      	cmp	r3, #0
 8020bf6:	d115      	bne.n	8020c24 <etharp_query+0xc4>
    is_new_entry = 1;
 8020bf8:	2301      	movs	r3, #1
 8020bfa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8020bfc:	7c7a      	ldrb	r2, [r7, #17]
 8020bfe:	4972      	ldr	r1, [pc, #456]	; (8020dc8 <etharp_query+0x268>)
 8020c00:	4613      	mov	r3, r2
 8020c02:	005b      	lsls	r3, r3, #1
 8020c04:	4413      	add	r3, r2
 8020c06:	00db      	lsls	r3, r3, #3
 8020c08:	440b      	add	r3, r1
 8020c0a:	3314      	adds	r3, #20
 8020c0c:	2201      	movs	r2, #1
 8020c0e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8020c10:	7c7a      	ldrb	r2, [r7, #17]
 8020c12:	496d      	ldr	r1, [pc, #436]	; (8020dc8 <etharp_query+0x268>)
 8020c14:	4613      	mov	r3, r2
 8020c16:	005b      	lsls	r3, r3, #1
 8020c18:	4413      	add	r3, r2
 8020c1a:	00db      	lsls	r3, r3, #3
 8020c1c:	440b      	add	r3, r1
 8020c1e:	3308      	adds	r3, #8
 8020c20:	68fa      	ldr	r2, [r7, #12]
 8020c22:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8020c24:	7c7a      	ldrb	r2, [r7, #17]
 8020c26:	4968      	ldr	r1, [pc, #416]	; (8020dc8 <etharp_query+0x268>)
 8020c28:	4613      	mov	r3, r2
 8020c2a:	005b      	lsls	r3, r3, #1
 8020c2c:	4413      	add	r3, r2
 8020c2e:	00db      	lsls	r3, r3, #3
 8020c30:	440b      	add	r3, r1
 8020c32:	3314      	adds	r3, #20
 8020c34:	781b      	ldrb	r3, [r3, #0]
 8020c36:	2b01      	cmp	r3, #1
 8020c38:	d011      	beq.n	8020c5e <etharp_query+0xfe>
 8020c3a:	7c7a      	ldrb	r2, [r7, #17]
 8020c3c:	4962      	ldr	r1, [pc, #392]	; (8020dc8 <etharp_query+0x268>)
 8020c3e:	4613      	mov	r3, r2
 8020c40:	005b      	lsls	r3, r3, #1
 8020c42:	4413      	add	r3, r2
 8020c44:	00db      	lsls	r3, r3, #3
 8020c46:	440b      	add	r3, r1
 8020c48:	3314      	adds	r3, #20
 8020c4a:	781b      	ldrb	r3, [r3, #0]
 8020c4c:	2b01      	cmp	r3, #1
 8020c4e:	d806      	bhi.n	8020c5e <etharp_query+0xfe>
 8020c50:	4b5a      	ldr	r3, [pc, #360]	; (8020dbc <etharp_query+0x25c>)
 8020c52:	f240 32cd 	movw	r2, #973	; 0x3cd
 8020c56:	495d      	ldr	r1, [pc, #372]	; (8020dcc <etharp_query+0x26c>)
 8020c58:	485a      	ldr	r0, [pc, #360]	; (8020dc4 <etharp_query+0x264>)
 8020c5a:	f003 f951 	bl	8023f00 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8020c5e:	6a3b      	ldr	r3, [r7, #32]
 8020c60:	2b00      	cmp	r3, #0
 8020c62:	d102      	bne.n	8020c6a <etharp_query+0x10a>
 8020c64:	687b      	ldr	r3, [r7, #4]
 8020c66:	2b00      	cmp	r3, #0
 8020c68:	d10c      	bne.n	8020c84 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8020c6a:	68b9      	ldr	r1, [r7, #8]
 8020c6c:	68f8      	ldr	r0, [r7, #12]
 8020c6e:	f000 f963 	bl	8020f38 <etharp_request>
 8020c72:	4603      	mov	r3, r0
 8020c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	2b00      	cmp	r3, #0
 8020c7c:	d102      	bne.n	8020c84 <etharp_query+0x124>
      return result;
 8020c7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8020c82:	e096      	b.n	8020db2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8020c84:	687b      	ldr	r3, [r7, #4]
 8020c86:	2b00      	cmp	r3, #0
 8020c88:	d106      	bne.n	8020c98 <etharp_query+0x138>
 8020c8a:	4b4c      	ldr	r3, [pc, #304]	; (8020dbc <etharp_query+0x25c>)
 8020c8c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8020c90:	494f      	ldr	r1, [pc, #316]	; (8020dd0 <etharp_query+0x270>)
 8020c92:	484c      	ldr	r0, [pc, #304]	; (8020dc4 <etharp_query+0x264>)
 8020c94:	f003 f934 	bl	8023f00 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8020c98:	7c7a      	ldrb	r2, [r7, #17]
 8020c9a:	494b      	ldr	r1, [pc, #300]	; (8020dc8 <etharp_query+0x268>)
 8020c9c:	4613      	mov	r3, r2
 8020c9e:	005b      	lsls	r3, r3, #1
 8020ca0:	4413      	add	r3, r2
 8020ca2:	00db      	lsls	r3, r3, #3
 8020ca4:	440b      	add	r3, r1
 8020ca6:	3314      	adds	r3, #20
 8020ca8:	781b      	ldrb	r3, [r3, #0]
 8020caa:	2b01      	cmp	r3, #1
 8020cac:	d917      	bls.n	8020cde <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8020cae:	4a49      	ldr	r2, [pc, #292]	; (8020dd4 <etharp_query+0x274>)
 8020cb0:	7c7b      	ldrb	r3, [r7, #17]
 8020cb2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8020cb4:	7c7a      	ldrb	r2, [r7, #17]
 8020cb6:	4613      	mov	r3, r2
 8020cb8:	005b      	lsls	r3, r3, #1
 8020cba:	4413      	add	r3, r2
 8020cbc:	00db      	lsls	r3, r3, #3
 8020cbe:	3308      	adds	r3, #8
 8020cc0:	4a41      	ldr	r2, [pc, #260]	; (8020dc8 <etharp_query+0x268>)
 8020cc2:	4413      	add	r3, r2
 8020cc4:	3304      	adds	r3, #4
 8020cc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020cca:	9200      	str	r2, [sp, #0]
 8020ccc:	697a      	ldr	r2, [r7, #20]
 8020cce:	6879      	ldr	r1, [r7, #4]
 8020cd0:	68f8      	ldr	r0, [r7, #12]
 8020cd2:	f001 fc75 	bl	80225c0 <ethernet_output>
 8020cd6:	4603      	mov	r3, r0
 8020cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020cdc:	e067      	b.n	8020dae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8020cde:	7c7a      	ldrb	r2, [r7, #17]
 8020ce0:	4939      	ldr	r1, [pc, #228]	; (8020dc8 <etharp_query+0x268>)
 8020ce2:	4613      	mov	r3, r2
 8020ce4:	005b      	lsls	r3, r3, #1
 8020ce6:	4413      	add	r3, r2
 8020ce8:	00db      	lsls	r3, r3, #3
 8020cea:	440b      	add	r3, r1
 8020cec:	3314      	adds	r3, #20
 8020cee:	781b      	ldrb	r3, [r3, #0]
 8020cf0:	2b01      	cmp	r3, #1
 8020cf2:	d15c      	bne.n	8020dae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8020cf4:	2300      	movs	r3, #0
 8020cf6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8020cf8:	687b      	ldr	r3, [r7, #4]
 8020cfa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020cfc:	e01c      	b.n	8020d38 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8020cfe:	69fb      	ldr	r3, [r7, #28]
 8020d00:	895a      	ldrh	r2, [r3, #10]
 8020d02:	69fb      	ldr	r3, [r7, #28]
 8020d04:	891b      	ldrh	r3, [r3, #8]
 8020d06:	429a      	cmp	r2, r3
 8020d08:	d10a      	bne.n	8020d20 <etharp_query+0x1c0>
 8020d0a:	69fb      	ldr	r3, [r7, #28]
 8020d0c:	681b      	ldr	r3, [r3, #0]
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	d006      	beq.n	8020d20 <etharp_query+0x1c0>
 8020d12:	4b2a      	ldr	r3, [pc, #168]	; (8020dbc <etharp_query+0x25c>)
 8020d14:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8020d18:	492f      	ldr	r1, [pc, #188]	; (8020dd8 <etharp_query+0x278>)
 8020d1a:	482a      	ldr	r0, [pc, #168]	; (8020dc4 <etharp_query+0x264>)
 8020d1c:	f003 f8f0 	bl	8023f00 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8020d20:	69fb      	ldr	r3, [r7, #28]
 8020d22:	7b1b      	ldrb	r3, [r3, #12]
 8020d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	d002      	beq.n	8020d32 <etharp_query+0x1d2>
        copy_needed = 1;
 8020d2c:	2301      	movs	r3, #1
 8020d2e:	61bb      	str	r3, [r7, #24]
        break;
 8020d30:	e005      	b.n	8020d3e <etharp_query+0x1de>
      }
      p = p->next;
 8020d32:	69fb      	ldr	r3, [r7, #28]
 8020d34:	681b      	ldr	r3, [r3, #0]
 8020d36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020d38:	69fb      	ldr	r3, [r7, #28]
 8020d3a:	2b00      	cmp	r3, #0
 8020d3c:	d1df      	bne.n	8020cfe <etharp_query+0x19e>
    }
    if (copy_needed) {
 8020d3e:	69bb      	ldr	r3, [r7, #24]
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	d007      	beq.n	8020d54 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8020d44:	687a      	ldr	r2, [r7, #4]
 8020d46:	f44f 7120 	mov.w	r1, #640	; 0x280
 8020d4a:	200e      	movs	r0, #14
 8020d4c:	f7f8 f918 	bl	8018f80 <pbuf_clone>
 8020d50:	61f8      	str	r0, [r7, #28]
 8020d52:	e004      	b.n	8020d5e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8020d54:	687b      	ldr	r3, [r7, #4]
 8020d56:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8020d58:	69f8      	ldr	r0, [r7, #28]
 8020d5a:	f7f7 ff3f 	bl	8018bdc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8020d5e:	69fb      	ldr	r3, [r7, #28]
 8020d60:	2b00      	cmp	r3, #0
 8020d62:	d021      	beq.n	8020da8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8020d64:	7c7a      	ldrb	r2, [r7, #17]
 8020d66:	4918      	ldr	r1, [pc, #96]	; (8020dc8 <etharp_query+0x268>)
 8020d68:	4613      	mov	r3, r2
 8020d6a:	005b      	lsls	r3, r3, #1
 8020d6c:	4413      	add	r3, r2
 8020d6e:	00db      	lsls	r3, r3, #3
 8020d70:	440b      	add	r3, r1
 8020d72:	681b      	ldr	r3, [r3, #0]
 8020d74:	2b00      	cmp	r3, #0
 8020d76:	d00a      	beq.n	8020d8e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8020d78:	7c7a      	ldrb	r2, [r7, #17]
 8020d7a:	4913      	ldr	r1, [pc, #76]	; (8020dc8 <etharp_query+0x268>)
 8020d7c:	4613      	mov	r3, r2
 8020d7e:	005b      	lsls	r3, r3, #1
 8020d80:	4413      	add	r3, r2
 8020d82:	00db      	lsls	r3, r3, #3
 8020d84:	440b      	add	r3, r1
 8020d86:	681b      	ldr	r3, [r3, #0]
 8020d88:	4618      	mov	r0, r3
 8020d8a:	f7f7 fe81 	bl	8018a90 <pbuf_free>
      }
      arp_table[i].q = p;
 8020d8e:	7c7a      	ldrb	r2, [r7, #17]
 8020d90:	490d      	ldr	r1, [pc, #52]	; (8020dc8 <etharp_query+0x268>)
 8020d92:	4613      	mov	r3, r2
 8020d94:	005b      	lsls	r3, r3, #1
 8020d96:	4413      	add	r3, r2
 8020d98:	00db      	lsls	r3, r3, #3
 8020d9a:	440b      	add	r3, r1
 8020d9c:	69fa      	ldr	r2, [r7, #28]
 8020d9e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8020da0:	2300      	movs	r3, #0
 8020da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020da6:	e002      	b.n	8020dae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8020da8:	23ff      	movs	r3, #255	; 0xff
 8020daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8020dae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8020db2:	4618      	mov	r0, r3
 8020db4:	3728      	adds	r7, #40	; 0x28
 8020db6:	46bd      	mov	sp, r7
 8020db8:	bd80      	pop	{r7, pc}
 8020dba:	bf00      	nop
 8020dbc:	080282ac 	.word	0x080282ac
 8020dc0:	08028458 	.word	0x08028458
 8020dc4:	08028324 	.word	0x08028324
 8020dc8:	2000c00c 	.word	0x2000c00c
 8020dcc:	08028468 	.word	0x08028468
 8020dd0:	0802844c 	.word	0x0802844c
 8020dd4:	2000c0fc 	.word	0x2000c0fc
 8020dd8:	08028490 	.word	0x08028490

08020ddc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020ddc:	b580      	push	{r7, lr}
 8020dde:	b08a      	sub	sp, #40	; 0x28
 8020de0:	af02      	add	r7, sp, #8
 8020de2:	60f8      	str	r0, [r7, #12]
 8020de4:	60b9      	str	r1, [r7, #8]
 8020de6:	607a      	str	r2, [r7, #4]
 8020de8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8020dea:	2300      	movs	r3, #0
 8020dec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020dee:	68fb      	ldr	r3, [r7, #12]
 8020df0:	2b00      	cmp	r3, #0
 8020df2:	d106      	bne.n	8020e02 <etharp_raw+0x26>
 8020df4:	4b3a      	ldr	r3, [pc, #232]	; (8020ee0 <etharp_raw+0x104>)
 8020df6:	f240 4257 	movw	r2, #1111	; 0x457
 8020dfa:	493a      	ldr	r1, [pc, #232]	; (8020ee4 <etharp_raw+0x108>)
 8020dfc:	483a      	ldr	r0, [pc, #232]	; (8020ee8 <etharp_raw+0x10c>)
 8020dfe:	f003 f87f 	bl	8023f00 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8020e02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020e06:	211c      	movs	r1, #28
 8020e08:	200e      	movs	r0, #14
 8020e0a:	f7f7 fb5d 	bl	80184c8 <pbuf_alloc>
 8020e0e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8020e10:	69bb      	ldr	r3, [r7, #24]
 8020e12:	2b00      	cmp	r3, #0
 8020e14:	d102      	bne.n	8020e1c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8020e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020e1a:	e05d      	b.n	8020ed8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8020e1c:	69bb      	ldr	r3, [r7, #24]
 8020e1e:	895b      	ldrh	r3, [r3, #10]
 8020e20:	2b1b      	cmp	r3, #27
 8020e22:	d806      	bhi.n	8020e32 <etharp_raw+0x56>
 8020e24:	4b2e      	ldr	r3, [pc, #184]	; (8020ee0 <etharp_raw+0x104>)
 8020e26:	f240 4262 	movw	r2, #1122	; 0x462
 8020e2a:	4930      	ldr	r1, [pc, #192]	; (8020eec <etharp_raw+0x110>)
 8020e2c:	482e      	ldr	r0, [pc, #184]	; (8020ee8 <etharp_raw+0x10c>)
 8020e2e:	f003 f867 	bl	8023f00 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8020e32:	69bb      	ldr	r3, [r7, #24]
 8020e34:	685b      	ldr	r3, [r3, #4]
 8020e36:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8020e38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8020e3a:	4618      	mov	r0, r3
 8020e3c:	f7f6 fa36 	bl	80172ac <lwip_htons>
 8020e40:	4603      	mov	r3, r0
 8020e42:	461a      	mov	r2, r3
 8020e44:	697b      	ldr	r3, [r7, #20]
 8020e46:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8020e48:	68fb      	ldr	r3, [r7, #12]
 8020e4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8020e4e:	2b06      	cmp	r3, #6
 8020e50:	d006      	beq.n	8020e60 <etharp_raw+0x84>
 8020e52:	4b23      	ldr	r3, [pc, #140]	; (8020ee0 <etharp_raw+0x104>)
 8020e54:	f240 4269 	movw	r2, #1129	; 0x469
 8020e58:	4925      	ldr	r1, [pc, #148]	; (8020ef0 <etharp_raw+0x114>)
 8020e5a:	4823      	ldr	r0, [pc, #140]	; (8020ee8 <etharp_raw+0x10c>)
 8020e5c:	f003 f850 	bl	8023f00 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8020e60:	697b      	ldr	r3, [r7, #20]
 8020e62:	3308      	adds	r3, #8
 8020e64:	2206      	movs	r2, #6
 8020e66:	6839      	ldr	r1, [r7, #0]
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f002 ff39 	bl	8023ce0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8020e6e:	697b      	ldr	r3, [r7, #20]
 8020e70:	3312      	adds	r3, #18
 8020e72:	2206      	movs	r2, #6
 8020e74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020e76:	4618      	mov	r0, r3
 8020e78:	f002 ff32 	bl	8023ce0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8020e7c:	697b      	ldr	r3, [r7, #20]
 8020e7e:	330e      	adds	r3, #14
 8020e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020e82:	6812      	ldr	r2, [r2, #0]
 8020e84:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8020e86:	697b      	ldr	r3, [r7, #20]
 8020e88:	3318      	adds	r3, #24
 8020e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020e8c:	6812      	ldr	r2, [r2, #0]
 8020e8e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8020e90:	697b      	ldr	r3, [r7, #20]
 8020e92:	2200      	movs	r2, #0
 8020e94:	701a      	strb	r2, [r3, #0]
 8020e96:	2200      	movs	r2, #0
 8020e98:	f042 0201 	orr.w	r2, r2, #1
 8020e9c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8020e9e:	697b      	ldr	r3, [r7, #20]
 8020ea0:	2200      	movs	r2, #0
 8020ea2:	f042 0208 	orr.w	r2, r2, #8
 8020ea6:	709a      	strb	r2, [r3, #2]
 8020ea8:	2200      	movs	r2, #0
 8020eaa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8020eac:	697b      	ldr	r3, [r7, #20]
 8020eae:	2206      	movs	r2, #6
 8020eb0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8020eb2:	697b      	ldr	r3, [r7, #20]
 8020eb4:	2204      	movs	r2, #4
 8020eb6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8020eb8:	f640 0306 	movw	r3, #2054	; 0x806
 8020ebc:	9300      	str	r3, [sp, #0]
 8020ebe:	687b      	ldr	r3, [r7, #4]
 8020ec0:	68ba      	ldr	r2, [r7, #8]
 8020ec2:	69b9      	ldr	r1, [r7, #24]
 8020ec4:	68f8      	ldr	r0, [r7, #12]
 8020ec6:	f001 fb7b 	bl	80225c0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8020eca:	69b8      	ldr	r0, [r7, #24]
 8020ecc:	f7f7 fde0 	bl	8018a90 <pbuf_free>
  p = NULL;
 8020ed0:	2300      	movs	r3, #0
 8020ed2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8020ed4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020ed8:	4618      	mov	r0, r3
 8020eda:	3720      	adds	r7, #32
 8020edc:	46bd      	mov	sp, r7
 8020ede:	bd80      	pop	{r7, pc}
 8020ee0:	080282ac 	.word	0x080282ac
 8020ee4:	080283fc 	.word	0x080283fc
 8020ee8:	08028324 	.word	0x08028324
 8020eec:	080284ac 	.word	0x080284ac
 8020ef0:	080284e0 	.word	0x080284e0

08020ef4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8020ef4:	b580      	push	{r7, lr}
 8020ef6:	b088      	sub	sp, #32
 8020ef8:	af04      	add	r7, sp, #16
 8020efa:	60f8      	str	r0, [r7, #12]
 8020efc:	60b9      	str	r1, [r7, #8]
 8020efe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020f00:	68fb      	ldr	r3, [r7, #12]
 8020f02:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8020f06:	68fb      	ldr	r3, [r7, #12]
 8020f08:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8020f0c:	68fb      	ldr	r3, [r7, #12]
 8020f0e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020f10:	2201      	movs	r2, #1
 8020f12:	9203      	str	r2, [sp, #12]
 8020f14:	68ba      	ldr	r2, [r7, #8]
 8020f16:	9202      	str	r2, [sp, #8]
 8020f18:	4a06      	ldr	r2, [pc, #24]	; (8020f34 <etharp_request_dst+0x40>)
 8020f1a:	9201      	str	r2, [sp, #4]
 8020f1c:	9300      	str	r3, [sp, #0]
 8020f1e:	4603      	mov	r3, r0
 8020f20:	687a      	ldr	r2, [r7, #4]
 8020f22:	68f8      	ldr	r0, [r7, #12]
 8020f24:	f7ff ff5a 	bl	8020ddc <etharp_raw>
 8020f28:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8020f2a:	4618      	mov	r0, r3
 8020f2c:	3710      	adds	r7, #16
 8020f2e:	46bd      	mov	sp, r7
 8020f30:	bd80      	pop	{r7, pc}
 8020f32:	bf00      	nop
 8020f34:	08028b04 	.word	0x08028b04

08020f38 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8020f38:	b580      	push	{r7, lr}
 8020f3a:	b082      	sub	sp, #8
 8020f3c:	af00      	add	r7, sp, #0
 8020f3e:	6078      	str	r0, [r7, #4]
 8020f40:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8020f42:	4a05      	ldr	r2, [pc, #20]	; (8020f58 <etharp_request+0x20>)
 8020f44:	6839      	ldr	r1, [r7, #0]
 8020f46:	6878      	ldr	r0, [r7, #4]
 8020f48:	f7ff ffd4 	bl	8020ef4 <etharp_request_dst>
 8020f4c:	4603      	mov	r3, r0
}
 8020f4e:	4618      	mov	r0, r3
 8020f50:	3708      	adds	r7, #8
 8020f52:	46bd      	mov	sp, r7
 8020f54:	bd80      	pop	{r7, pc}
 8020f56:	bf00      	nop
 8020f58:	08028afc 	.word	0x08028afc

08020f5c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8020f5c:	b580      	push	{r7, lr}
 8020f5e:	b08e      	sub	sp, #56	; 0x38
 8020f60:	af04      	add	r7, sp, #16
 8020f62:	6078      	str	r0, [r7, #4]
 8020f64:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8020f66:	4b79      	ldr	r3, [pc, #484]	; (802114c <icmp_input+0x1f0>)
 8020f68:	689b      	ldr	r3, [r3, #8]
 8020f6a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8020f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020f6e:	781b      	ldrb	r3, [r3, #0]
 8020f70:	f003 030f 	and.w	r3, r3, #15
 8020f74:	b2db      	uxtb	r3, r3
 8020f76:	009b      	lsls	r3, r3, #2
 8020f78:	b2db      	uxtb	r3, r3
 8020f7a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8020f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020f7e:	2b13      	cmp	r3, #19
 8020f80:	f240 80cd 	bls.w	802111e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8020f84:	687b      	ldr	r3, [r7, #4]
 8020f86:	895b      	ldrh	r3, [r3, #10]
 8020f88:	2b03      	cmp	r3, #3
 8020f8a:	f240 80ca 	bls.w	8021122 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8020f8e:	687b      	ldr	r3, [r7, #4]
 8020f90:	685b      	ldr	r3, [r3, #4]
 8020f92:	781b      	ldrb	r3, [r3, #0]
 8020f94:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8020f98:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8020f9c:	2b00      	cmp	r3, #0
 8020f9e:	f000 80b7 	beq.w	8021110 <icmp_input+0x1b4>
 8020fa2:	2b08      	cmp	r3, #8
 8020fa4:	f040 80b7 	bne.w	8021116 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8020fa8:	4b69      	ldr	r3, [pc, #420]	; (8021150 <icmp_input+0x1f4>)
 8020faa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020fac:	4b67      	ldr	r3, [pc, #412]	; (802114c <icmp_input+0x1f0>)
 8020fae:	695b      	ldr	r3, [r3, #20]
 8020fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020fb4:	2be0      	cmp	r3, #224	; 0xe0
 8020fb6:	f000 80bb 	beq.w	8021130 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8020fba:	4b64      	ldr	r3, [pc, #400]	; (802114c <icmp_input+0x1f0>)
 8020fbc:	695b      	ldr	r3, [r3, #20]
 8020fbe:	4a63      	ldr	r2, [pc, #396]	; (802114c <icmp_input+0x1f0>)
 8020fc0:	6812      	ldr	r2, [r2, #0]
 8020fc2:	4611      	mov	r1, r2
 8020fc4:	4618      	mov	r0, r3
 8020fc6:	f000 fbed 	bl	80217a4 <ip4_addr_isbroadcast_u32>
 8020fca:	4603      	mov	r3, r0
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	f040 80b1 	bne.w	8021134 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8020fd2:	687b      	ldr	r3, [r7, #4]
 8020fd4:	891b      	ldrh	r3, [r3, #8]
 8020fd6:	2b07      	cmp	r3, #7
 8020fd8:	f240 80a5 	bls.w	8021126 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020fdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020fde:	330e      	adds	r3, #14
 8020fe0:	4619      	mov	r1, r3
 8020fe2:	6878      	ldr	r0, [r7, #4]
 8020fe4:	f7f7 fcbe 	bl	8018964 <pbuf_add_header>
 8020fe8:	4603      	mov	r3, r0
 8020fea:	2b00      	cmp	r3, #0
 8020fec:	d04b      	beq.n	8021086 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8020fee:	687b      	ldr	r3, [r7, #4]
 8020ff0:	891a      	ldrh	r2, [r3, #8]
 8020ff2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020ff4:	4413      	add	r3, r2
 8020ff6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8020ff8:	687b      	ldr	r3, [r7, #4]
 8020ffa:	891b      	ldrh	r3, [r3, #8]
 8020ffc:	8b7a      	ldrh	r2, [r7, #26]
 8020ffe:	429a      	cmp	r2, r3
 8021000:	f0c0 809a 	bcc.w	8021138 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8021004:	8b7b      	ldrh	r3, [r7, #26]
 8021006:	f44f 7220 	mov.w	r2, #640	; 0x280
 802100a:	4619      	mov	r1, r3
 802100c:	200e      	movs	r0, #14
 802100e:	f7f7 fa5b 	bl	80184c8 <pbuf_alloc>
 8021012:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8021014:	697b      	ldr	r3, [r7, #20]
 8021016:	2b00      	cmp	r3, #0
 8021018:	f000 8090 	beq.w	802113c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 802101c:	697b      	ldr	r3, [r7, #20]
 802101e:	895b      	ldrh	r3, [r3, #10]
 8021020:	461a      	mov	r2, r3
 8021022:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021024:	3308      	adds	r3, #8
 8021026:	429a      	cmp	r2, r3
 8021028:	d203      	bcs.n	8021032 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 802102a:	6978      	ldr	r0, [r7, #20]
 802102c:	f7f7 fd30 	bl	8018a90 <pbuf_free>
          goto icmperr;
 8021030:	e085      	b.n	802113e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8021032:	697b      	ldr	r3, [r7, #20]
 8021034:	685b      	ldr	r3, [r3, #4]
 8021036:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802103a:	4618      	mov	r0, r3
 802103c:	f002 fe50 	bl	8023ce0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8021040:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021042:	4619      	mov	r1, r3
 8021044:	6978      	ldr	r0, [r7, #20]
 8021046:	f7f7 fc9d 	bl	8018984 <pbuf_remove_header>
 802104a:	4603      	mov	r3, r0
 802104c:	2b00      	cmp	r3, #0
 802104e:	d009      	beq.n	8021064 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8021050:	4b40      	ldr	r3, [pc, #256]	; (8021154 <icmp_input+0x1f8>)
 8021052:	22b6      	movs	r2, #182	; 0xb6
 8021054:	4940      	ldr	r1, [pc, #256]	; (8021158 <icmp_input+0x1fc>)
 8021056:	4841      	ldr	r0, [pc, #260]	; (802115c <icmp_input+0x200>)
 8021058:	f002 ff52 	bl	8023f00 <iprintf>
          pbuf_free(r);
 802105c:	6978      	ldr	r0, [r7, #20]
 802105e:	f7f7 fd17 	bl	8018a90 <pbuf_free>
          goto icmperr;
 8021062:	e06c      	b.n	802113e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8021064:	6879      	ldr	r1, [r7, #4]
 8021066:	6978      	ldr	r0, [r7, #20]
 8021068:	f7f7 fe46 	bl	8018cf8 <pbuf_copy>
 802106c:	4603      	mov	r3, r0
 802106e:	2b00      	cmp	r3, #0
 8021070:	d003      	beq.n	802107a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8021072:	6978      	ldr	r0, [r7, #20]
 8021074:	f7f7 fd0c 	bl	8018a90 <pbuf_free>
          goto icmperr;
 8021078:	e061      	b.n	802113e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 802107a:	6878      	ldr	r0, [r7, #4]
 802107c:	f7f7 fd08 	bl	8018a90 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8021080:	697b      	ldr	r3, [r7, #20]
 8021082:	607b      	str	r3, [r7, #4]
 8021084:	e00f      	b.n	80210a6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8021086:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021088:	330e      	adds	r3, #14
 802108a:	4619      	mov	r1, r3
 802108c:	6878      	ldr	r0, [r7, #4]
 802108e:	f7f7 fc79 	bl	8018984 <pbuf_remove_header>
 8021092:	4603      	mov	r3, r0
 8021094:	2b00      	cmp	r3, #0
 8021096:	d006      	beq.n	80210a6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8021098:	4b2e      	ldr	r3, [pc, #184]	; (8021154 <icmp_input+0x1f8>)
 802109a:	22c7      	movs	r2, #199	; 0xc7
 802109c:	4930      	ldr	r1, [pc, #192]	; (8021160 <icmp_input+0x204>)
 802109e:	482f      	ldr	r0, [pc, #188]	; (802115c <icmp_input+0x200>)
 80210a0:	f002 ff2e 	bl	8023f00 <iprintf>
          goto icmperr;
 80210a4:	e04b      	b.n	802113e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80210a6:	687b      	ldr	r3, [r7, #4]
 80210a8:	685b      	ldr	r3, [r3, #4]
 80210aa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80210ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80210ae:	4619      	mov	r1, r3
 80210b0:	6878      	ldr	r0, [r7, #4]
 80210b2:	f7f7 fc57 	bl	8018964 <pbuf_add_header>
 80210b6:	4603      	mov	r3, r0
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	d12b      	bne.n	8021114 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	685b      	ldr	r3, [r3, #4]
 80210c0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80210c2:	69fb      	ldr	r3, [r7, #28]
 80210c4:	681a      	ldr	r2, [r3, #0]
 80210c6:	68fb      	ldr	r3, [r7, #12]
 80210c8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80210ca:	4b20      	ldr	r3, [pc, #128]	; (802114c <icmp_input+0x1f0>)
 80210cc:	691a      	ldr	r2, [r3, #16]
 80210ce:	68fb      	ldr	r3, [r7, #12]
 80210d0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80210d2:	693b      	ldr	r3, [r7, #16]
 80210d4:	2200      	movs	r2, #0
 80210d6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80210d8:	693b      	ldr	r3, [r7, #16]
 80210da:	2200      	movs	r2, #0
 80210dc:	709a      	strb	r2, [r3, #2]
 80210de:	2200      	movs	r2, #0
 80210e0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80210e2:	68fb      	ldr	r3, [r7, #12]
 80210e4:	22ff      	movs	r2, #255	; 0xff
 80210e6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80210e8:	68fb      	ldr	r3, [r7, #12]
 80210ea:	2200      	movs	r2, #0
 80210ec:	729a      	strb	r2, [r3, #10]
 80210ee:	2200      	movs	r2, #0
 80210f0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80210f2:	683b      	ldr	r3, [r7, #0]
 80210f4:	9302      	str	r3, [sp, #8]
 80210f6:	2301      	movs	r3, #1
 80210f8:	9301      	str	r3, [sp, #4]
 80210fa:	2300      	movs	r3, #0
 80210fc:	9300      	str	r3, [sp, #0]
 80210fe:	23ff      	movs	r3, #255	; 0xff
 8021100:	2200      	movs	r2, #0
 8021102:	69f9      	ldr	r1, [r7, #28]
 8021104:	6878      	ldr	r0, [r7, #4]
 8021106:	f000 fa75 	bl	80215f4 <ip4_output_if>
 802110a:	4603      	mov	r3, r0
 802110c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 802110e:	e001      	b.n	8021114 <icmp_input+0x1b8>
      break;
 8021110:	bf00      	nop
 8021112:	e000      	b.n	8021116 <icmp_input+0x1ba>
      break;
 8021114:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8021116:	6878      	ldr	r0, [r7, #4]
 8021118:	f7f7 fcba 	bl	8018a90 <pbuf_free>
  return;
 802111c:	e013      	b.n	8021146 <icmp_input+0x1ea>
    goto lenerr;
 802111e:	bf00      	nop
 8021120:	e002      	b.n	8021128 <icmp_input+0x1cc>
    goto lenerr;
 8021122:	bf00      	nop
 8021124:	e000      	b.n	8021128 <icmp_input+0x1cc>
        goto lenerr;
 8021126:	bf00      	nop
lenerr:
  pbuf_free(p);
 8021128:	6878      	ldr	r0, [r7, #4]
 802112a:	f7f7 fcb1 	bl	8018a90 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802112e:	e00a      	b.n	8021146 <icmp_input+0x1ea>
        goto icmperr;
 8021130:	bf00      	nop
 8021132:	e004      	b.n	802113e <icmp_input+0x1e2>
        goto icmperr;
 8021134:	bf00      	nop
 8021136:	e002      	b.n	802113e <icmp_input+0x1e2>
          goto icmperr;
 8021138:	bf00      	nop
 802113a:	e000      	b.n	802113e <icmp_input+0x1e2>
          goto icmperr;
 802113c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 802113e:	6878      	ldr	r0, [r7, #4]
 8021140:	f7f7 fca6 	bl	8018a90 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8021144:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8021146:	3728      	adds	r7, #40	; 0x28
 8021148:	46bd      	mov	sp, r7
 802114a:	bd80      	pop	{r7, pc}
 802114c:	20006698 	.word	0x20006698
 8021150:	200066ac 	.word	0x200066ac
 8021154:	08028524 	.word	0x08028524
 8021158:	0802855c 	.word	0x0802855c
 802115c:	08028594 	.word	0x08028594
 8021160:	080285bc 	.word	0x080285bc

08021164 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8021164:	b580      	push	{r7, lr}
 8021166:	b082      	sub	sp, #8
 8021168:	af00      	add	r7, sp, #0
 802116a:	6078      	str	r0, [r7, #4]
 802116c:	460b      	mov	r3, r1
 802116e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8021170:	78fb      	ldrb	r3, [r7, #3]
 8021172:	461a      	mov	r2, r3
 8021174:	2103      	movs	r1, #3
 8021176:	6878      	ldr	r0, [r7, #4]
 8021178:	f000 f814 	bl	80211a4 <icmp_send_response>
}
 802117c:	bf00      	nop
 802117e:	3708      	adds	r7, #8
 8021180:	46bd      	mov	sp, r7
 8021182:	bd80      	pop	{r7, pc}

08021184 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8021184:	b580      	push	{r7, lr}
 8021186:	b082      	sub	sp, #8
 8021188:	af00      	add	r7, sp, #0
 802118a:	6078      	str	r0, [r7, #4]
 802118c:	460b      	mov	r3, r1
 802118e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8021190:	78fb      	ldrb	r3, [r7, #3]
 8021192:	461a      	mov	r2, r3
 8021194:	210b      	movs	r1, #11
 8021196:	6878      	ldr	r0, [r7, #4]
 8021198:	f000 f804 	bl	80211a4 <icmp_send_response>
}
 802119c:	bf00      	nop
 802119e:	3708      	adds	r7, #8
 80211a0:	46bd      	mov	sp, r7
 80211a2:	bd80      	pop	{r7, pc}

080211a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80211a4:	b580      	push	{r7, lr}
 80211a6:	b08c      	sub	sp, #48	; 0x30
 80211a8:	af04      	add	r7, sp, #16
 80211aa:	6078      	str	r0, [r7, #4]
 80211ac:	460b      	mov	r3, r1
 80211ae:	70fb      	strb	r3, [r7, #3]
 80211b0:	4613      	mov	r3, r2
 80211b2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80211b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80211b8:	2124      	movs	r1, #36	; 0x24
 80211ba:	2022      	movs	r0, #34	; 0x22
 80211bc:	f7f7 f984 	bl	80184c8 <pbuf_alloc>
 80211c0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80211c2:	69fb      	ldr	r3, [r7, #28]
 80211c4:	2b00      	cmp	r3, #0
 80211c6:	d04c      	beq.n	8021262 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80211c8:	69fb      	ldr	r3, [r7, #28]
 80211ca:	895b      	ldrh	r3, [r3, #10]
 80211cc:	2b23      	cmp	r3, #35	; 0x23
 80211ce:	d806      	bhi.n	80211de <icmp_send_response+0x3a>
 80211d0:	4b26      	ldr	r3, [pc, #152]	; (802126c <icmp_send_response+0xc8>)
 80211d2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80211d6:	4926      	ldr	r1, [pc, #152]	; (8021270 <icmp_send_response+0xcc>)
 80211d8:	4826      	ldr	r0, [pc, #152]	; (8021274 <icmp_send_response+0xd0>)
 80211da:	f002 fe91 	bl	8023f00 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80211de:	687b      	ldr	r3, [r7, #4]
 80211e0:	685b      	ldr	r3, [r3, #4]
 80211e2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80211e4:	69fb      	ldr	r3, [r7, #28]
 80211e6:	685b      	ldr	r3, [r3, #4]
 80211e8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80211ea:	697b      	ldr	r3, [r7, #20]
 80211ec:	78fa      	ldrb	r2, [r7, #3]
 80211ee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80211f0:	697b      	ldr	r3, [r7, #20]
 80211f2:	78ba      	ldrb	r2, [r7, #2]
 80211f4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80211f6:	697b      	ldr	r3, [r7, #20]
 80211f8:	2200      	movs	r2, #0
 80211fa:	711a      	strb	r2, [r3, #4]
 80211fc:	2200      	movs	r2, #0
 80211fe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8021200:	697b      	ldr	r3, [r7, #20]
 8021202:	2200      	movs	r2, #0
 8021204:	719a      	strb	r2, [r3, #6]
 8021206:	2200      	movs	r2, #0
 8021208:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 802120a:	69fb      	ldr	r3, [r7, #28]
 802120c:	685b      	ldr	r3, [r3, #4]
 802120e:	f103 0008 	add.w	r0, r3, #8
 8021212:	687b      	ldr	r3, [r7, #4]
 8021214:	685b      	ldr	r3, [r3, #4]
 8021216:	221c      	movs	r2, #28
 8021218:	4619      	mov	r1, r3
 802121a:	f002 fd61 	bl	8023ce0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 802121e:	69bb      	ldr	r3, [r7, #24]
 8021220:	68db      	ldr	r3, [r3, #12]
 8021222:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8021224:	f107 030c 	add.w	r3, r7, #12
 8021228:	4618      	mov	r0, r3
 802122a:	f000 f825 	bl	8021278 <ip4_route>
 802122e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8021230:	693b      	ldr	r3, [r7, #16]
 8021232:	2b00      	cmp	r3, #0
 8021234:	d011      	beq.n	802125a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8021236:	697b      	ldr	r3, [r7, #20]
 8021238:	2200      	movs	r2, #0
 802123a:	709a      	strb	r2, [r3, #2]
 802123c:	2200      	movs	r2, #0
 802123e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8021240:	f107 020c 	add.w	r2, r7, #12
 8021244:	693b      	ldr	r3, [r7, #16]
 8021246:	9302      	str	r3, [sp, #8]
 8021248:	2301      	movs	r3, #1
 802124a:	9301      	str	r3, [sp, #4]
 802124c:	2300      	movs	r3, #0
 802124e:	9300      	str	r3, [sp, #0]
 8021250:	23ff      	movs	r3, #255	; 0xff
 8021252:	2100      	movs	r1, #0
 8021254:	69f8      	ldr	r0, [r7, #28]
 8021256:	f000 f9cd 	bl	80215f4 <ip4_output_if>
  }
  pbuf_free(q);
 802125a:	69f8      	ldr	r0, [r7, #28]
 802125c:	f7f7 fc18 	bl	8018a90 <pbuf_free>
 8021260:	e000      	b.n	8021264 <icmp_send_response+0xc0>
    return;
 8021262:	bf00      	nop
}
 8021264:	3720      	adds	r7, #32
 8021266:	46bd      	mov	sp, r7
 8021268:	bd80      	pop	{r7, pc}
 802126a:	bf00      	nop
 802126c:	08028524 	.word	0x08028524
 8021270:	080285f0 	.word	0x080285f0
 8021274:	08028594 	.word	0x08028594

08021278 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8021278:	b480      	push	{r7}
 802127a:	b085      	sub	sp, #20
 802127c:	af00      	add	r7, sp, #0
 802127e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8021280:	4b33      	ldr	r3, [pc, #204]	; (8021350 <ip4_route+0xd8>)
 8021282:	681b      	ldr	r3, [r3, #0]
 8021284:	60fb      	str	r3, [r7, #12]
 8021286:	e036      	b.n	80212f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021288:	68fb      	ldr	r3, [r7, #12]
 802128a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802128e:	f003 0301 	and.w	r3, r3, #1
 8021292:	b2db      	uxtb	r3, r3
 8021294:	2b00      	cmp	r3, #0
 8021296:	d02b      	beq.n	80212f0 <ip4_route+0x78>
 8021298:	68fb      	ldr	r3, [r7, #12]
 802129a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802129e:	089b      	lsrs	r3, r3, #2
 80212a0:	f003 0301 	and.w	r3, r3, #1
 80212a4:	b2db      	uxtb	r3, r3
 80212a6:	2b00      	cmp	r3, #0
 80212a8:	d022      	beq.n	80212f0 <ip4_route+0x78>
 80212aa:	68fb      	ldr	r3, [r7, #12]
 80212ac:	3304      	adds	r3, #4
 80212ae:	681b      	ldr	r3, [r3, #0]
 80212b0:	2b00      	cmp	r3, #0
 80212b2:	d01d      	beq.n	80212f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80212b4:	687b      	ldr	r3, [r7, #4]
 80212b6:	681a      	ldr	r2, [r3, #0]
 80212b8:	68fb      	ldr	r3, [r7, #12]
 80212ba:	3304      	adds	r3, #4
 80212bc:	681b      	ldr	r3, [r3, #0]
 80212be:	405a      	eors	r2, r3
 80212c0:	68fb      	ldr	r3, [r7, #12]
 80212c2:	3308      	adds	r3, #8
 80212c4:	681b      	ldr	r3, [r3, #0]
 80212c6:	4013      	ands	r3, r2
 80212c8:	2b00      	cmp	r3, #0
 80212ca:	d101      	bne.n	80212d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80212cc:	68fb      	ldr	r3, [r7, #12]
 80212ce:	e038      	b.n	8021342 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80212d0:	68fb      	ldr	r3, [r7, #12]
 80212d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80212d6:	f003 0302 	and.w	r3, r3, #2
 80212da:	2b00      	cmp	r3, #0
 80212dc:	d108      	bne.n	80212f0 <ip4_route+0x78>
 80212de:	687b      	ldr	r3, [r7, #4]
 80212e0:	681a      	ldr	r2, [r3, #0]
 80212e2:	68fb      	ldr	r3, [r7, #12]
 80212e4:	330c      	adds	r3, #12
 80212e6:	681b      	ldr	r3, [r3, #0]
 80212e8:	429a      	cmp	r2, r3
 80212ea:	d101      	bne.n	80212f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80212ec:	68fb      	ldr	r3, [r7, #12]
 80212ee:	e028      	b.n	8021342 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80212f0:	68fb      	ldr	r3, [r7, #12]
 80212f2:	681b      	ldr	r3, [r3, #0]
 80212f4:	60fb      	str	r3, [r7, #12]
 80212f6:	68fb      	ldr	r3, [r7, #12]
 80212f8:	2b00      	cmp	r3, #0
 80212fa:	d1c5      	bne.n	8021288 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80212fc:	4b15      	ldr	r3, [pc, #84]	; (8021354 <ip4_route+0xdc>)
 80212fe:	681b      	ldr	r3, [r3, #0]
 8021300:	2b00      	cmp	r3, #0
 8021302:	d01a      	beq.n	802133a <ip4_route+0xc2>
 8021304:	4b13      	ldr	r3, [pc, #76]	; (8021354 <ip4_route+0xdc>)
 8021306:	681b      	ldr	r3, [r3, #0]
 8021308:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802130c:	f003 0301 	and.w	r3, r3, #1
 8021310:	2b00      	cmp	r3, #0
 8021312:	d012      	beq.n	802133a <ip4_route+0xc2>
 8021314:	4b0f      	ldr	r3, [pc, #60]	; (8021354 <ip4_route+0xdc>)
 8021316:	681b      	ldr	r3, [r3, #0]
 8021318:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802131c:	f003 0304 	and.w	r3, r3, #4
 8021320:	2b00      	cmp	r3, #0
 8021322:	d00a      	beq.n	802133a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8021324:	4b0b      	ldr	r3, [pc, #44]	; (8021354 <ip4_route+0xdc>)
 8021326:	681b      	ldr	r3, [r3, #0]
 8021328:	3304      	adds	r3, #4
 802132a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802132c:	2b00      	cmp	r3, #0
 802132e:	d004      	beq.n	802133a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8021330:	687b      	ldr	r3, [r7, #4]
 8021332:	681b      	ldr	r3, [r3, #0]
 8021334:	b2db      	uxtb	r3, r3
 8021336:	2b7f      	cmp	r3, #127	; 0x7f
 8021338:	d101      	bne.n	802133e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 802133a:	2300      	movs	r3, #0
 802133c:	e001      	b.n	8021342 <ip4_route+0xca>
  }

  return netif_default;
 802133e:	4b05      	ldr	r3, [pc, #20]	; (8021354 <ip4_route+0xdc>)
 8021340:	681b      	ldr	r3, [r3, #0]
}
 8021342:	4618      	mov	r0, r3
 8021344:	3714      	adds	r7, #20
 8021346:	46bd      	mov	sp, r7
 8021348:	f85d 7b04 	ldr.w	r7, [sp], #4
 802134c:	4770      	bx	lr
 802134e:	bf00      	nop
 8021350:	2000bfa0 	.word	0x2000bfa0
 8021354:	2000bfa4 	.word	0x2000bfa4

08021358 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8021358:	b580      	push	{r7, lr}
 802135a:	b082      	sub	sp, #8
 802135c:	af00      	add	r7, sp, #0
 802135e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8021360:	687b      	ldr	r3, [r7, #4]
 8021362:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021366:	f003 0301 	and.w	r3, r3, #1
 802136a:	b2db      	uxtb	r3, r3
 802136c:	2b00      	cmp	r3, #0
 802136e:	d016      	beq.n	802139e <ip4_input_accept+0x46>
 8021370:	687b      	ldr	r3, [r7, #4]
 8021372:	3304      	adds	r3, #4
 8021374:	681b      	ldr	r3, [r3, #0]
 8021376:	2b00      	cmp	r3, #0
 8021378:	d011      	beq.n	802139e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802137a:	4b0b      	ldr	r3, [pc, #44]	; (80213a8 <ip4_input_accept+0x50>)
 802137c:	695a      	ldr	r2, [r3, #20]
 802137e:	687b      	ldr	r3, [r7, #4]
 8021380:	3304      	adds	r3, #4
 8021382:	681b      	ldr	r3, [r3, #0]
 8021384:	429a      	cmp	r2, r3
 8021386:	d008      	beq.n	802139a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8021388:	4b07      	ldr	r3, [pc, #28]	; (80213a8 <ip4_input_accept+0x50>)
 802138a:	695b      	ldr	r3, [r3, #20]
 802138c:	6879      	ldr	r1, [r7, #4]
 802138e:	4618      	mov	r0, r3
 8021390:	f000 fa08 	bl	80217a4 <ip4_addr_isbroadcast_u32>
 8021394:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021396:	2b00      	cmp	r3, #0
 8021398:	d001      	beq.n	802139e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 802139a:	2301      	movs	r3, #1
 802139c:	e000      	b.n	80213a0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802139e:	2300      	movs	r3, #0
}
 80213a0:	4618      	mov	r0, r3
 80213a2:	3708      	adds	r7, #8
 80213a4:	46bd      	mov	sp, r7
 80213a6:	bd80      	pop	{r7, pc}
 80213a8:	20006698 	.word	0x20006698

080213ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80213ac:	b580      	push	{r7, lr}
 80213ae:	b086      	sub	sp, #24
 80213b0:	af00      	add	r7, sp, #0
 80213b2:	6078      	str	r0, [r7, #4]
 80213b4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80213b6:	687b      	ldr	r3, [r7, #4]
 80213b8:	685b      	ldr	r3, [r3, #4]
 80213ba:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80213bc:	697b      	ldr	r3, [r7, #20]
 80213be:	781b      	ldrb	r3, [r3, #0]
 80213c0:	091b      	lsrs	r3, r3, #4
 80213c2:	b2db      	uxtb	r3, r3
 80213c4:	2b04      	cmp	r3, #4
 80213c6:	d004      	beq.n	80213d2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80213c8:	6878      	ldr	r0, [r7, #4]
 80213ca:	f7f7 fb61 	bl	8018a90 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80213ce:	2300      	movs	r3, #0
 80213d0:	e107      	b.n	80215e2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80213d2:	697b      	ldr	r3, [r7, #20]
 80213d4:	781b      	ldrb	r3, [r3, #0]
 80213d6:	f003 030f 	and.w	r3, r3, #15
 80213da:	b2db      	uxtb	r3, r3
 80213dc:	009b      	lsls	r3, r3, #2
 80213de:	b2db      	uxtb	r3, r3
 80213e0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80213e2:	697b      	ldr	r3, [r7, #20]
 80213e4:	885b      	ldrh	r3, [r3, #2]
 80213e6:	b29b      	uxth	r3, r3
 80213e8:	4618      	mov	r0, r3
 80213ea:	f7f5 ff5f 	bl	80172ac <lwip_htons>
 80213ee:	4603      	mov	r3, r0
 80213f0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80213f2:	687b      	ldr	r3, [r7, #4]
 80213f4:	891b      	ldrh	r3, [r3, #8]
 80213f6:	89ba      	ldrh	r2, [r7, #12]
 80213f8:	429a      	cmp	r2, r3
 80213fa:	d204      	bcs.n	8021406 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80213fc:	89bb      	ldrh	r3, [r7, #12]
 80213fe:	4619      	mov	r1, r3
 8021400:	6878      	ldr	r0, [r7, #4]
 8021402:	f7f7 f9bf 	bl	8018784 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8021406:	687b      	ldr	r3, [r7, #4]
 8021408:	895b      	ldrh	r3, [r3, #10]
 802140a:	89fa      	ldrh	r2, [r7, #14]
 802140c:	429a      	cmp	r2, r3
 802140e:	d807      	bhi.n	8021420 <ip4_input+0x74>
 8021410:	687b      	ldr	r3, [r7, #4]
 8021412:	891b      	ldrh	r3, [r3, #8]
 8021414:	89ba      	ldrh	r2, [r7, #12]
 8021416:	429a      	cmp	r2, r3
 8021418:	d802      	bhi.n	8021420 <ip4_input+0x74>
 802141a:	89fb      	ldrh	r3, [r7, #14]
 802141c:	2b13      	cmp	r3, #19
 802141e:	d804      	bhi.n	802142a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8021420:	6878      	ldr	r0, [r7, #4]
 8021422:	f7f7 fb35 	bl	8018a90 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8021426:	2300      	movs	r3, #0
 8021428:	e0db      	b.n	80215e2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 802142a:	697b      	ldr	r3, [r7, #20]
 802142c:	691b      	ldr	r3, [r3, #16]
 802142e:	4a6f      	ldr	r2, [pc, #444]	; (80215ec <ip4_input+0x240>)
 8021430:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8021432:	697b      	ldr	r3, [r7, #20]
 8021434:	68db      	ldr	r3, [r3, #12]
 8021436:	4a6d      	ldr	r2, [pc, #436]	; (80215ec <ip4_input+0x240>)
 8021438:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802143a:	4b6c      	ldr	r3, [pc, #432]	; (80215ec <ip4_input+0x240>)
 802143c:	695b      	ldr	r3, [r3, #20]
 802143e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021442:	2be0      	cmp	r3, #224	; 0xe0
 8021444:	d112      	bne.n	802146c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8021446:	683b      	ldr	r3, [r7, #0]
 8021448:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802144c:	f003 0301 	and.w	r3, r3, #1
 8021450:	b2db      	uxtb	r3, r3
 8021452:	2b00      	cmp	r3, #0
 8021454:	d007      	beq.n	8021466 <ip4_input+0xba>
 8021456:	683b      	ldr	r3, [r7, #0]
 8021458:	3304      	adds	r3, #4
 802145a:	681b      	ldr	r3, [r3, #0]
 802145c:	2b00      	cmp	r3, #0
 802145e:	d002      	beq.n	8021466 <ip4_input+0xba>
      netif = inp;
 8021460:	683b      	ldr	r3, [r7, #0]
 8021462:	613b      	str	r3, [r7, #16]
 8021464:	e02a      	b.n	80214bc <ip4_input+0x110>
    } else {
      netif = NULL;
 8021466:	2300      	movs	r3, #0
 8021468:	613b      	str	r3, [r7, #16]
 802146a:	e027      	b.n	80214bc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 802146c:	6838      	ldr	r0, [r7, #0]
 802146e:	f7ff ff73 	bl	8021358 <ip4_input_accept>
 8021472:	4603      	mov	r3, r0
 8021474:	2b00      	cmp	r3, #0
 8021476:	d002      	beq.n	802147e <ip4_input+0xd2>
      netif = inp;
 8021478:	683b      	ldr	r3, [r7, #0]
 802147a:	613b      	str	r3, [r7, #16]
 802147c:	e01e      	b.n	80214bc <ip4_input+0x110>
    } else {
      netif = NULL;
 802147e:	2300      	movs	r3, #0
 8021480:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8021482:	4b5a      	ldr	r3, [pc, #360]	; (80215ec <ip4_input+0x240>)
 8021484:	695b      	ldr	r3, [r3, #20]
 8021486:	b2db      	uxtb	r3, r3
 8021488:	2b7f      	cmp	r3, #127	; 0x7f
 802148a:	d017      	beq.n	80214bc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 802148c:	4b58      	ldr	r3, [pc, #352]	; (80215f0 <ip4_input+0x244>)
 802148e:	681b      	ldr	r3, [r3, #0]
 8021490:	613b      	str	r3, [r7, #16]
 8021492:	e00e      	b.n	80214b2 <ip4_input+0x106>
          if (netif == inp) {
 8021494:	693a      	ldr	r2, [r7, #16]
 8021496:	683b      	ldr	r3, [r7, #0]
 8021498:	429a      	cmp	r2, r3
 802149a:	d006      	beq.n	80214aa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 802149c:	6938      	ldr	r0, [r7, #16]
 802149e:	f7ff ff5b 	bl	8021358 <ip4_input_accept>
 80214a2:	4603      	mov	r3, r0
 80214a4:	2b00      	cmp	r3, #0
 80214a6:	d108      	bne.n	80214ba <ip4_input+0x10e>
 80214a8:	e000      	b.n	80214ac <ip4_input+0x100>
            continue;
 80214aa:	bf00      	nop
        NETIF_FOREACH(netif) {
 80214ac:	693b      	ldr	r3, [r7, #16]
 80214ae:	681b      	ldr	r3, [r3, #0]
 80214b0:	613b      	str	r3, [r7, #16]
 80214b2:	693b      	ldr	r3, [r7, #16]
 80214b4:	2b00      	cmp	r3, #0
 80214b6:	d1ed      	bne.n	8021494 <ip4_input+0xe8>
 80214b8:	e000      	b.n	80214bc <ip4_input+0x110>
            break;
 80214ba:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80214bc:	4b4b      	ldr	r3, [pc, #300]	; (80215ec <ip4_input+0x240>)
 80214be:	691b      	ldr	r3, [r3, #16]
 80214c0:	6839      	ldr	r1, [r7, #0]
 80214c2:	4618      	mov	r0, r3
 80214c4:	f000 f96e 	bl	80217a4 <ip4_addr_isbroadcast_u32>
 80214c8:	4603      	mov	r3, r0
 80214ca:	2b00      	cmp	r3, #0
 80214cc:	d105      	bne.n	80214da <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80214ce:	4b47      	ldr	r3, [pc, #284]	; (80215ec <ip4_input+0x240>)
 80214d0:	691b      	ldr	r3, [r3, #16]
 80214d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80214d6:	2be0      	cmp	r3, #224	; 0xe0
 80214d8:	d104      	bne.n	80214e4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80214da:	6878      	ldr	r0, [r7, #4]
 80214dc:	f7f7 fad8 	bl	8018a90 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80214e0:	2300      	movs	r3, #0
 80214e2:	e07e      	b.n	80215e2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80214e4:	693b      	ldr	r3, [r7, #16]
 80214e6:	2b00      	cmp	r3, #0
 80214e8:	d104      	bne.n	80214f4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80214ea:	6878      	ldr	r0, [r7, #4]
 80214ec:	f7f7 fad0 	bl	8018a90 <pbuf_free>
    return ERR_OK;
 80214f0:	2300      	movs	r3, #0
 80214f2:	e076      	b.n	80215e2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80214f4:	697b      	ldr	r3, [r7, #20]
 80214f6:	88db      	ldrh	r3, [r3, #6]
 80214f8:	b29b      	uxth	r3, r3
 80214fa:	461a      	mov	r2, r3
 80214fc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8021500:	4013      	ands	r3, r2
 8021502:	2b00      	cmp	r3, #0
 8021504:	d00b      	beq.n	802151e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8021506:	6878      	ldr	r0, [r7, #4]
 8021508:	f000 fc92 	bl	8021e30 <ip4_reass>
 802150c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802150e:	687b      	ldr	r3, [r7, #4]
 8021510:	2b00      	cmp	r3, #0
 8021512:	d101      	bne.n	8021518 <ip4_input+0x16c>
      return ERR_OK;
 8021514:	2300      	movs	r3, #0
 8021516:	e064      	b.n	80215e2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8021518:	687b      	ldr	r3, [r7, #4]
 802151a:	685b      	ldr	r3, [r3, #4]
 802151c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 802151e:	4a33      	ldr	r2, [pc, #204]	; (80215ec <ip4_input+0x240>)
 8021520:	693b      	ldr	r3, [r7, #16]
 8021522:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8021524:	4a31      	ldr	r2, [pc, #196]	; (80215ec <ip4_input+0x240>)
 8021526:	683b      	ldr	r3, [r7, #0]
 8021528:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 802152a:	4a30      	ldr	r2, [pc, #192]	; (80215ec <ip4_input+0x240>)
 802152c:	697b      	ldr	r3, [r7, #20]
 802152e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8021530:	697b      	ldr	r3, [r7, #20]
 8021532:	781b      	ldrb	r3, [r3, #0]
 8021534:	f003 030f 	and.w	r3, r3, #15
 8021538:	b2db      	uxtb	r3, r3
 802153a:	009b      	lsls	r3, r3, #2
 802153c:	b2db      	uxtb	r3, r3
 802153e:	b29a      	uxth	r2, r3
 8021540:	4b2a      	ldr	r3, [pc, #168]	; (80215ec <ip4_input+0x240>)
 8021542:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8021544:	89fb      	ldrh	r3, [r7, #14]
 8021546:	4619      	mov	r1, r3
 8021548:	6878      	ldr	r0, [r7, #4]
 802154a:	f7f7 fa1b 	bl	8018984 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802154e:	697b      	ldr	r3, [r7, #20]
 8021550:	7a5b      	ldrb	r3, [r3, #9]
 8021552:	2b11      	cmp	r3, #17
 8021554:	d006      	beq.n	8021564 <ip4_input+0x1b8>
 8021556:	2b11      	cmp	r3, #17
 8021558:	dc13      	bgt.n	8021582 <ip4_input+0x1d6>
 802155a:	2b01      	cmp	r3, #1
 802155c:	d00c      	beq.n	8021578 <ip4_input+0x1cc>
 802155e:	2b06      	cmp	r3, #6
 8021560:	d005      	beq.n	802156e <ip4_input+0x1c2>
 8021562:	e00e      	b.n	8021582 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8021564:	6839      	ldr	r1, [r7, #0]
 8021566:	6878      	ldr	r0, [r7, #4]
 8021568:	f7fe f902 	bl	801f770 <udp_input>
        break;
 802156c:	e026      	b.n	80215bc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 802156e:	6839      	ldr	r1, [r7, #0]
 8021570:	6878      	ldr	r0, [r7, #4]
 8021572:	f7f9 fcbb 	bl	801aeec <tcp_input>
        break;
 8021576:	e021      	b.n	80215bc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8021578:	6839      	ldr	r1, [r7, #0]
 802157a:	6878      	ldr	r0, [r7, #4]
 802157c:	f7ff fcee 	bl	8020f5c <icmp_input>
        break;
 8021580:	e01c      	b.n	80215bc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8021582:	4b1a      	ldr	r3, [pc, #104]	; (80215ec <ip4_input+0x240>)
 8021584:	695b      	ldr	r3, [r3, #20]
 8021586:	6939      	ldr	r1, [r7, #16]
 8021588:	4618      	mov	r0, r3
 802158a:	f000 f90b 	bl	80217a4 <ip4_addr_isbroadcast_u32>
 802158e:	4603      	mov	r3, r0
 8021590:	2b00      	cmp	r3, #0
 8021592:	d10f      	bne.n	80215b4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021594:	4b15      	ldr	r3, [pc, #84]	; (80215ec <ip4_input+0x240>)
 8021596:	695b      	ldr	r3, [r3, #20]
 8021598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802159c:	2be0      	cmp	r3, #224	; 0xe0
 802159e:	d009      	beq.n	80215b4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80215a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80215a4:	4619      	mov	r1, r3
 80215a6:	6878      	ldr	r0, [r7, #4]
 80215a8:	f7f7 fa5f 	bl	8018a6a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80215ac:	2102      	movs	r1, #2
 80215ae:	6878      	ldr	r0, [r7, #4]
 80215b0:	f7ff fdd8 	bl	8021164 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80215b4:	6878      	ldr	r0, [r7, #4]
 80215b6:	f7f7 fa6b 	bl	8018a90 <pbuf_free>
        break;
 80215ba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80215bc:	4b0b      	ldr	r3, [pc, #44]	; (80215ec <ip4_input+0x240>)
 80215be:	2200      	movs	r2, #0
 80215c0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80215c2:	4b0a      	ldr	r3, [pc, #40]	; (80215ec <ip4_input+0x240>)
 80215c4:	2200      	movs	r2, #0
 80215c6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80215c8:	4b08      	ldr	r3, [pc, #32]	; (80215ec <ip4_input+0x240>)
 80215ca:	2200      	movs	r2, #0
 80215cc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80215ce:	4b07      	ldr	r3, [pc, #28]	; (80215ec <ip4_input+0x240>)
 80215d0:	2200      	movs	r2, #0
 80215d2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80215d4:	4b05      	ldr	r3, [pc, #20]	; (80215ec <ip4_input+0x240>)
 80215d6:	2200      	movs	r2, #0
 80215d8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80215da:	4b04      	ldr	r3, [pc, #16]	; (80215ec <ip4_input+0x240>)
 80215dc:	2200      	movs	r2, #0
 80215de:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80215e0:	2300      	movs	r3, #0
}
 80215e2:	4618      	mov	r0, r3
 80215e4:	3718      	adds	r7, #24
 80215e6:	46bd      	mov	sp, r7
 80215e8:	bd80      	pop	{r7, pc}
 80215ea:	bf00      	nop
 80215ec:	20006698 	.word	0x20006698
 80215f0:	2000bfa0 	.word	0x2000bfa0

080215f4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80215f4:	b580      	push	{r7, lr}
 80215f6:	b08a      	sub	sp, #40	; 0x28
 80215f8:	af04      	add	r7, sp, #16
 80215fa:	60f8      	str	r0, [r7, #12]
 80215fc:	60b9      	str	r1, [r7, #8]
 80215fe:	607a      	str	r2, [r7, #4]
 8021600:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8021602:	68bb      	ldr	r3, [r7, #8]
 8021604:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8021606:	687b      	ldr	r3, [r7, #4]
 8021608:	2b00      	cmp	r3, #0
 802160a:	d009      	beq.n	8021620 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 802160c:	68bb      	ldr	r3, [r7, #8]
 802160e:	2b00      	cmp	r3, #0
 8021610:	d003      	beq.n	802161a <ip4_output_if+0x26>
 8021612:	68bb      	ldr	r3, [r7, #8]
 8021614:	681b      	ldr	r3, [r3, #0]
 8021616:	2b00      	cmp	r3, #0
 8021618:	d102      	bne.n	8021620 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 802161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802161c:	3304      	adds	r3, #4
 802161e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8021620:	78fa      	ldrb	r2, [r7, #3]
 8021622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021624:	9302      	str	r3, [sp, #8]
 8021626:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802162a:	9301      	str	r3, [sp, #4]
 802162c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8021630:	9300      	str	r3, [sp, #0]
 8021632:	4613      	mov	r3, r2
 8021634:	687a      	ldr	r2, [r7, #4]
 8021636:	6979      	ldr	r1, [r7, #20]
 8021638:	68f8      	ldr	r0, [r7, #12]
 802163a:	f000 f805 	bl	8021648 <ip4_output_if_src>
 802163e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8021640:	4618      	mov	r0, r3
 8021642:	3718      	adds	r7, #24
 8021644:	46bd      	mov	sp, r7
 8021646:	bd80      	pop	{r7, pc}

08021648 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8021648:	b580      	push	{r7, lr}
 802164a:	b088      	sub	sp, #32
 802164c:	af00      	add	r7, sp, #0
 802164e:	60f8      	str	r0, [r7, #12]
 8021650:	60b9      	str	r1, [r7, #8]
 8021652:	607a      	str	r2, [r7, #4]
 8021654:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8021656:	68fb      	ldr	r3, [r7, #12]
 8021658:	7b9b      	ldrb	r3, [r3, #14]
 802165a:	2b01      	cmp	r3, #1
 802165c:	d006      	beq.n	802166c <ip4_output_if_src+0x24>
 802165e:	4b4b      	ldr	r3, [pc, #300]	; (802178c <ip4_output_if_src+0x144>)
 8021660:	f44f 7255 	mov.w	r2, #852	; 0x354
 8021664:	494a      	ldr	r1, [pc, #296]	; (8021790 <ip4_output_if_src+0x148>)
 8021666:	484b      	ldr	r0, [pc, #300]	; (8021794 <ip4_output_if_src+0x14c>)
 8021668:	f002 fc4a 	bl	8023f00 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 802166c:	687b      	ldr	r3, [r7, #4]
 802166e:	2b00      	cmp	r3, #0
 8021670:	d060      	beq.n	8021734 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8021672:	2314      	movs	r3, #20
 8021674:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8021676:	2114      	movs	r1, #20
 8021678:	68f8      	ldr	r0, [r7, #12]
 802167a:	f7f7 f973 	bl	8018964 <pbuf_add_header>
 802167e:	4603      	mov	r3, r0
 8021680:	2b00      	cmp	r3, #0
 8021682:	d002      	beq.n	802168a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8021684:	f06f 0301 	mvn.w	r3, #1
 8021688:	e07c      	b.n	8021784 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 802168a:	68fb      	ldr	r3, [r7, #12]
 802168c:	685b      	ldr	r3, [r3, #4]
 802168e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8021690:	68fb      	ldr	r3, [r7, #12]
 8021692:	895b      	ldrh	r3, [r3, #10]
 8021694:	2b13      	cmp	r3, #19
 8021696:	d806      	bhi.n	80216a6 <ip4_output_if_src+0x5e>
 8021698:	4b3c      	ldr	r3, [pc, #240]	; (802178c <ip4_output_if_src+0x144>)
 802169a:	f44f 7262 	mov.w	r2, #904	; 0x388
 802169e:	493e      	ldr	r1, [pc, #248]	; (8021798 <ip4_output_if_src+0x150>)
 80216a0:	483c      	ldr	r0, [pc, #240]	; (8021794 <ip4_output_if_src+0x14c>)
 80216a2:	f002 fc2d 	bl	8023f00 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80216a6:	69fb      	ldr	r3, [r7, #28]
 80216a8:	78fa      	ldrb	r2, [r7, #3]
 80216aa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80216ac:	69fb      	ldr	r3, [r7, #28]
 80216ae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80216b2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80216b4:	687b      	ldr	r3, [r7, #4]
 80216b6:	681a      	ldr	r2, [r3, #0]
 80216b8:	69fb      	ldr	r3, [r7, #28]
 80216ba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80216bc:	8b7b      	ldrh	r3, [r7, #26]
 80216be:	089b      	lsrs	r3, r3, #2
 80216c0:	b29b      	uxth	r3, r3
 80216c2:	b2db      	uxtb	r3, r3
 80216c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80216c8:	b2da      	uxtb	r2, r3
 80216ca:	69fb      	ldr	r3, [r7, #28]
 80216cc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80216ce:	69fb      	ldr	r3, [r7, #28]
 80216d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80216d4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80216d6:	68fb      	ldr	r3, [r7, #12]
 80216d8:	891b      	ldrh	r3, [r3, #8]
 80216da:	4618      	mov	r0, r3
 80216dc:	f7f5 fde6 	bl	80172ac <lwip_htons>
 80216e0:	4603      	mov	r3, r0
 80216e2:	461a      	mov	r2, r3
 80216e4:	69fb      	ldr	r3, [r7, #28]
 80216e6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80216e8:	69fb      	ldr	r3, [r7, #28]
 80216ea:	2200      	movs	r2, #0
 80216ec:	719a      	strb	r2, [r3, #6]
 80216ee:	2200      	movs	r2, #0
 80216f0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80216f2:	4b2a      	ldr	r3, [pc, #168]	; (802179c <ip4_output_if_src+0x154>)
 80216f4:	881b      	ldrh	r3, [r3, #0]
 80216f6:	4618      	mov	r0, r3
 80216f8:	f7f5 fdd8 	bl	80172ac <lwip_htons>
 80216fc:	4603      	mov	r3, r0
 80216fe:	461a      	mov	r2, r3
 8021700:	69fb      	ldr	r3, [r7, #28]
 8021702:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8021704:	4b25      	ldr	r3, [pc, #148]	; (802179c <ip4_output_if_src+0x154>)
 8021706:	881b      	ldrh	r3, [r3, #0]
 8021708:	3301      	adds	r3, #1
 802170a:	b29a      	uxth	r2, r3
 802170c:	4b23      	ldr	r3, [pc, #140]	; (802179c <ip4_output_if_src+0x154>)
 802170e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8021710:	68bb      	ldr	r3, [r7, #8]
 8021712:	2b00      	cmp	r3, #0
 8021714:	d104      	bne.n	8021720 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8021716:	4b22      	ldr	r3, [pc, #136]	; (80217a0 <ip4_output_if_src+0x158>)
 8021718:	681a      	ldr	r2, [r3, #0]
 802171a:	69fb      	ldr	r3, [r7, #28]
 802171c:	60da      	str	r2, [r3, #12]
 802171e:	e003      	b.n	8021728 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8021720:	68bb      	ldr	r3, [r7, #8]
 8021722:	681a      	ldr	r2, [r3, #0]
 8021724:	69fb      	ldr	r3, [r7, #28]
 8021726:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8021728:	69fb      	ldr	r3, [r7, #28]
 802172a:	2200      	movs	r2, #0
 802172c:	729a      	strb	r2, [r3, #10]
 802172e:	2200      	movs	r2, #0
 8021730:	72da      	strb	r2, [r3, #11]
 8021732:	e00f      	b.n	8021754 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8021734:	68fb      	ldr	r3, [r7, #12]
 8021736:	895b      	ldrh	r3, [r3, #10]
 8021738:	2b13      	cmp	r3, #19
 802173a:	d802      	bhi.n	8021742 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 802173c:	f06f 0301 	mvn.w	r3, #1
 8021740:	e020      	b.n	8021784 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8021742:	68fb      	ldr	r3, [r7, #12]
 8021744:	685b      	ldr	r3, [r3, #4]
 8021746:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8021748:	69fb      	ldr	r3, [r7, #28]
 802174a:	691b      	ldr	r3, [r3, #16]
 802174c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 802174e:	f107 0314 	add.w	r3, r7, #20
 8021752:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8021754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021756:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8021758:	2b00      	cmp	r3, #0
 802175a:	d00c      	beq.n	8021776 <ip4_output_if_src+0x12e>
 802175c:	68fb      	ldr	r3, [r7, #12]
 802175e:	891a      	ldrh	r2, [r3, #8]
 8021760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021762:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8021764:	429a      	cmp	r2, r3
 8021766:	d906      	bls.n	8021776 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8021768:	687a      	ldr	r2, [r7, #4]
 802176a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802176c:	68f8      	ldr	r0, [r7, #12]
 802176e:	f000 fd53 	bl	8022218 <ip4_frag>
 8021772:	4603      	mov	r3, r0
 8021774:	e006      	b.n	8021784 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8021776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021778:	695b      	ldr	r3, [r3, #20]
 802177a:	687a      	ldr	r2, [r7, #4]
 802177c:	68f9      	ldr	r1, [r7, #12]
 802177e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021780:	4798      	blx	r3
 8021782:	4603      	mov	r3, r0
}
 8021784:	4618      	mov	r0, r3
 8021786:	3720      	adds	r7, #32
 8021788:	46bd      	mov	sp, r7
 802178a:	bd80      	pop	{r7, pc}
 802178c:	0802861c 	.word	0x0802861c
 8021790:	08028650 	.word	0x08028650
 8021794:	0802865c 	.word	0x0802865c
 8021798:	08028684 	.word	0x08028684
 802179c:	2000c0fe 	.word	0x2000c0fe
 80217a0:	08028af8 	.word	0x08028af8

080217a4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80217a4:	b480      	push	{r7}
 80217a6:	b085      	sub	sp, #20
 80217a8:	af00      	add	r7, sp, #0
 80217aa:	6078      	str	r0, [r7, #4]
 80217ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80217ae:	687b      	ldr	r3, [r7, #4]
 80217b0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80217b2:	687b      	ldr	r3, [r7, #4]
 80217b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80217b8:	d002      	beq.n	80217c0 <ip4_addr_isbroadcast_u32+0x1c>
 80217ba:	687b      	ldr	r3, [r7, #4]
 80217bc:	2b00      	cmp	r3, #0
 80217be:	d101      	bne.n	80217c4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80217c0:	2301      	movs	r3, #1
 80217c2:	e02a      	b.n	802181a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80217c4:	683b      	ldr	r3, [r7, #0]
 80217c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80217ca:	f003 0302 	and.w	r3, r3, #2
 80217ce:	2b00      	cmp	r3, #0
 80217d0:	d101      	bne.n	80217d6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80217d2:	2300      	movs	r3, #0
 80217d4:	e021      	b.n	802181a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80217d6:	683b      	ldr	r3, [r7, #0]
 80217d8:	3304      	adds	r3, #4
 80217da:	681b      	ldr	r3, [r3, #0]
 80217dc:	687a      	ldr	r2, [r7, #4]
 80217de:	429a      	cmp	r2, r3
 80217e0:	d101      	bne.n	80217e6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80217e2:	2300      	movs	r3, #0
 80217e4:	e019      	b.n	802181a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80217e6:	68fa      	ldr	r2, [r7, #12]
 80217e8:	683b      	ldr	r3, [r7, #0]
 80217ea:	3304      	adds	r3, #4
 80217ec:	681b      	ldr	r3, [r3, #0]
 80217ee:	405a      	eors	r2, r3
 80217f0:	683b      	ldr	r3, [r7, #0]
 80217f2:	3308      	adds	r3, #8
 80217f4:	681b      	ldr	r3, [r3, #0]
 80217f6:	4013      	ands	r3, r2
 80217f8:	2b00      	cmp	r3, #0
 80217fa:	d10d      	bne.n	8021818 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80217fc:	683b      	ldr	r3, [r7, #0]
 80217fe:	3308      	adds	r3, #8
 8021800:	681b      	ldr	r3, [r3, #0]
 8021802:	43da      	mvns	r2, r3
 8021804:	687b      	ldr	r3, [r7, #4]
 8021806:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8021808:	683b      	ldr	r3, [r7, #0]
 802180a:	3308      	adds	r3, #8
 802180c:	681b      	ldr	r3, [r3, #0]
 802180e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021810:	429a      	cmp	r2, r3
 8021812:	d101      	bne.n	8021818 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8021814:	2301      	movs	r3, #1
 8021816:	e000      	b.n	802181a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8021818:	2300      	movs	r3, #0
  }
}
 802181a:	4618      	mov	r0, r3
 802181c:	3714      	adds	r7, #20
 802181e:	46bd      	mov	sp, r7
 8021820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021824:	4770      	bx	lr
	...

08021828 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8021828:	b580      	push	{r7, lr}
 802182a:	b084      	sub	sp, #16
 802182c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 802182e:	2300      	movs	r3, #0
 8021830:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8021832:	4b12      	ldr	r3, [pc, #72]	; (802187c <ip_reass_tmr+0x54>)
 8021834:	681b      	ldr	r3, [r3, #0]
 8021836:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8021838:	e018      	b.n	802186c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 802183a:	68fb      	ldr	r3, [r7, #12]
 802183c:	7fdb      	ldrb	r3, [r3, #31]
 802183e:	2b00      	cmp	r3, #0
 8021840:	d00b      	beq.n	802185a <ip_reass_tmr+0x32>
      r->timer--;
 8021842:	68fb      	ldr	r3, [r7, #12]
 8021844:	7fdb      	ldrb	r3, [r3, #31]
 8021846:	3b01      	subs	r3, #1
 8021848:	b2da      	uxtb	r2, r3
 802184a:	68fb      	ldr	r3, [r7, #12]
 802184c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 802184e:	68fb      	ldr	r3, [r7, #12]
 8021850:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8021852:	68fb      	ldr	r3, [r7, #12]
 8021854:	681b      	ldr	r3, [r3, #0]
 8021856:	60fb      	str	r3, [r7, #12]
 8021858:	e008      	b.n	802186c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 802185a:	68fb      	ldr	r3, [r7, #12]
 802185c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 802185e:	68fb      	ldr	r3, [r7, #12]
 8021860:	681b      	ldr	r3, [r3, #0]
 8021862:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8021864:	68b9      	ldr	r1, [r7, #8]
 8021866:	6878      	ldr	r0, [r7, #4]
 8021868:	f000 f80a 	bl	8021880 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 802186c:	68fb      	ldr	r3, [r7, #12]
 802186e:	2b00      	cmp	r3, #0
 8021870:	d1e3      	bne.n	802183a <ip_reass_tmr+0x12>
    }
  }
}
 8021872:	bf00      	nop
 8021874:	bf00      	nop
 8021876:	3710      	adds	r7, #16
 8021878:	46bd      	mov	sp, r7
 802187a:	bd80      	pop	{r7, pc}
 802187c:	2000c100 	.word	0x2000c100

08021880 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021880:	b580      	push	{r7, lr}
 8021882:	b088      	sub	sp, #32
 8021884:	af00      	add	r7, sp, #0
 8021886:	6078      	str	r0, [r7, #4]
 8021888:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 802188a:	2300      	movs	r3, #0
 802188c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 802188e:	683a      	ldr	r2, [r7, #0]
 8021890:	687b      	ldr	r3, [r7, #4]
 8021892:	429a      	cmp	r2, r3
 8021894:	d105      	bne.n	80218a2 <ip_reass_free_complete_datagram+0x22>
 8021896:	4b45      	ldr	r3, [pc, #276]	; (80219ac <ip_reass_free_complete_datagram+0x12c>)
 8021898:	22ab      	movs	r2, #171	; 0xab
 802189a:	4945      	ldr	r1, [pc, #276]	; (80219b0 <ip_reass_free_complete_datagram+0x130>)
 802189c:	4845      	ldr	r0, [pc, #276]	; (80219b4 <ip_reass_free_complete_datagram+0x134>)
 802189e:	f002 fb2f 	bl	8023f00 <iprintf>
  if (prev != NULL) {
 80218a2:	683b      	ldr	r3, [r7, #0]
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d00a      	beq.n	80218be <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80218a8:	683b      	ldr	r3, [r7, #0]
 80218aa:	681b      	ldr	r3, [r3, #0]
 80218ac:	687a      	ldr	r2, [r7, #4]
 80218ae:	429a      	cmp	r2, r3
 80218b0:	d005      	beq.n	80218be <ip_reass_free_complete_datagram+0x3e>
 80218b2:	4b3e      	ldr	r3, [pc, #248]	; (80219ac <ip_reass_free_complete_datagram+0x12c>)
 80218b4:	22ad      	movs	r2, #173	; 0xad
 80218b6:	4940      	ldr	r1, [pc, #256]	; (80219b8 <ip_reass_free_complete_datagram+0x138>)
 80218b8:	483e      	ldr	r0, [pc, #248]	; (80219b4 <ip_reass_free_complete_datagram+0x134>)
 80218ba:	f002 fb21 	bl	8023f00 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80218be:	687b      	ldr	r3, [r7, #4]
 80218c0:	685b      	ldr	r3, [r3, #4]
 80218c2:	685b      	ldr	r3, [r3, #4]
 80218c4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80218c6:	697b      	ldr	r3, [r7, #20]
 80218c8:	889b      	ldrh	r3, [r3, #4]
 80218ca:	b29b      	uxth	r3, r3
 80218cc:	2b00      	cmp	r3, #0
 80218ce:	d12a      	bne.n	8021926 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80218d0:	687b      	ldr	r3, [r7, #4]
 80218d2:	685b      	ldr	r3, [r3, #4]
 80218d4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80218d6:	697b      	ldr	r3, [r7, #20]
 80218d8:	681a      	ldr	r2, [r3, #0]
 80218da:	687b      	ldr	r3, [r7, #4]
 80218dc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80218de:	69bb      	ldr	r3, [r7, #24]
 80218e0:	6858      	ldr	r0, [r3, #4]
 80218e2:	687b      	ldr	r3, [r7, #4]
 80218e4:	3308      	adds	r3, #8
 80218e6:	2214      	movs	r2, #20
 80218e8:	4619      	mov	r1, r3
 80218ea:	f002 f9f9 	bl	8023ce0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80218ee:	2101      	movs	r1, #1
 80218f0:	69b8      	ldr	r0, [r7, #24]
 80218f2:	f7ff fc47 	bl	8021184 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80218f6:	69b8      	ldr	r0, [r7, #24]
 80218f8:	f7f7 f958 	bl	8018bac <pbuf_clen>
 80218fc:	4603      	mov	r3, r0
 80218fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021900:	8bfa      	ldrh	r2, [r7, #30]
 8021902:	8a7b      	ldrh	r3, [r7, #18]
 8021904:	4413      	add	r3, r2
 8021906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802190a:	db05      	blt.n	8021918 <ip_reass_free_complete_datagram+0x98>
 802190c:	4b27      	ldr	r3, [pc, #156]	; (80219ac <ip_reass_free_complete_datagram+0x12c>)
 802190e:	22bc      	movs	r2, #188	; 0xbc
 8021910:	492a      	ldr	r1, [pc, #168]	; (80219bc <ip_reass_free_complete_datagram+0x13c>)
 8021912:	4828      	ldr	r0, [pc, #160]	; (80219b4 <ip_reass_free_complete_datagram+0x134>)
 8021914:	f002 faf4 	bl	8023f00 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021918:	8bfa      	ldrh	r2, [r7, #30]
 802191a:	8a7b      	ldrh	r3, [r7, #18]
 802191c:	4413      	add	r3, r2
 802191e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8021920:	69b8      	ldr	r0, [r7, #24]
 8021922:	f7f7 f8b5 	bl	8018a90 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8021926:	687b      	ldr	r3, [r7, #4]
 8021928:	685b      	ldr	r3, [r3, #4]
 802192a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 802192c:	e01f      	b.n	802196e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 802192e:	69bb      	ldr	r3, [r7, #24]
 8021930:	685b      	ldr	r3, [r3, #4]
 8021932:	617b      	str	r3, [r7, #20]
    pcur = p;
 8021934:	69bb      	ldr	r3, [r7, #24]
 8021936:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8021938:	697b      	ldr	r3, [r7, #20]
 802193a:	681b      	ldr	r3, [r3, #0]
 802193c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 802193e:	68f8      	ldr	r0, [r7, #12]
 8021940:	f7f7 f934 	bl	8018bac <pbuf_clen>
 8021944:	4603      	mov	r3, r0
 8021946:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021948:	8bfa      	ldrh	r2, [r7, #30]
 802194a:	8a7b      	ldrh	r3, [r7, #18]
 802194c:	4413      	add	r3, r2
 802194e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021952:	db05      	blt.n	8021960 <ip_reass_free_complete_datagram+0xe0>
 8021954:	4b15      	ldr	r3, [pc, #84]	; (80219ac <ip_reass_free_complete_datagram+0x12c>)
 8021956:	22cc      	movs	r2, #204	; 0xcc
 8021958:	4918      	ldr	r1, [pc, #96]	; (80219bc <ip_reass_free_complete_datagram+0x13c>)
 802195a:	4816      	ldr	r0, [pc, #88]	; (80219b4 <ip_reass_free_complete_datagram+0x134>)
 802195c:	f002 fad0 	bl	8023f00 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021960:	8bfa      	ldrh	r2, [r7, #30]
 8021962:	8a7b      	ldrh	r3, [r7, #18]
 8021964:	4413      	add	r3, r2
 8021966:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8021968:	68f8      	ldr	r0, [r7, #12]
 802196a:	f7f7 f891 	bl	8018a90 <pbuf_free>
  while (p != NULL) {
 802196e:	69bb      	ldr	r3, [r7, #24]
 8021970:	2b00      	cmp	r3, #0
 8021972:	d1dc      	bne.n	802192e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8021974:	6839      	ldr	r1, [r7, #0]
 8021976:	6878      	ldr	r0, [r7, #4]
 8021978:	f000 f8c2 	bl	8021b00 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 802197c:	4b10      	ldr	r3, [pc, #64]	; (80219c0 <ip_reass_free_complete_datagram+0x140>)
 802197e:	881b      	ldrh	r3, [r3, #0]
 8021980:	8bfa      	ldrh	r2, [r7, #30]
 8021982:	429a      	cmp	r2, r3
 8021984:	d905      	bls.n	8021992 <ip_reass_free_complete_datagram+0x112>
 8021986:	4b09      	ldr	r3, [pc, #36]	; (80219ac <ip_reass_free_complete_datagram+0x12c>)
 8021988:	22d2      	movs	r2, #210	; 0xd2
 802198a:	490e      	ldr	r1, [pc, #56]	; (80219c4 <ip_reass_free_complete_datagram+0x144>)
 802198c:	4809      	ldr	r0, [pc, #36]	; (80219b4 <ip_reass_free_complete_datagram+0x134>)
 802198e:	f002 fab7 	bl	8023f00 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8021992:	4b0b      	ldr	r3, [pc, #44]	; (80219c0 <ip_reass_free_complete_datagram+0x140>)
 8021994:	881a      	ldrh	r2, [r3, #0]
 8021996:	8bfb      	ldrh	r3, [r7, #30]
 8021998:	1ad3      	subs	r3, r2, r3
 802199a:	b29a      	uxth	r2, r3
 802199c:	4b08      	ldr	r3, [pc, #32]	; (80219c0 <ip_reass_free_complete_datagram+0x140>)
 802199e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80219a0:	8bfb      	ldrh	r3, [r7, #30]
}
 80219a2:	4618      	mov	r0, r3
 80219a4:	3720      	adds	r7, #32
 80219a6:	46bd      	mov	sp, r7
 80219a8:	bd80      	pop	{r7, pc}
 80219aa:	bf00      	nop
 80219ac:	080286b4 	.word	0x080286b4
 80219b0:	080286f0 	.word	0x080286f0
 80219b4:	080286fc 	.word	0x080286fc
 80219b8:	08028724 	.word	0x08028724
 80219bc:	08028738 	.word	0x08028738
 80219c0:	2000c104 	.word	0x2000c104
 80219c4:	08028758 	.word	0x08028758

080219c8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80219c8:	b580      	push	{r7, lr}
 80219ca:	b08a      	sub	sp, #40	; 0x28
 80219cc:	af00      	add	r7, sp, #0
 80219ce:	6078      	str	r0, [r7, #4]
 80219d0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80219d2:	2300      	movs	r3, #0
 80219d4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80219d6:	2300      	movs	r3, #0
 80219d8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80219da:	2300      	movs	r3, #0
 80219dc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80219de:	2300      	movs	r3, #0
 80219e0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80219e2:	2300      	movs	r3, #0
 80219e4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80219e6:	4b28      	ldr	r3, [pc, #160]	; (8021a88 <ip_reass_remove_oldest_datagram+0xc0>)
 80219e8:	681b      	ldr	r3, [r3, #0]
 80219ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80219ec:	e030      	b.n	8021a50 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80219ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219f0:	695a      	ldr	r2, [r3, #20]
 80219f2:	687b      	ldr	r3, [r7, #4]
 80219f4:	68db      	ldr	r3, [r3, #12]
 80219f6:	429a      	cmp	r2, r3
 80219f8:	d10c      	bne.n	8021a14 <ip_reass_remove_oldest_datagram+0x4c>
 80219fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219fc:	699a      	ldr	r2, [r3, #24]
 80219fe:	687b      	ldr	r3, [r7, #4]
 8021a00:	691b      	ldr	r3, [r3, #16]
 8021a02:	429a      	cmp	r2, r3
 8021a04:	d106      	bne.n	8021a14 <ip_reass_remove_oldest_datagram+0x4c>
 8021a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a08:	899a      	ldrh	r2, [r3, #12]
 8021a0a:	687b      	ldr	r3, [r7, #4]
 8021a0c:	889b      	ldrh	r3, [r3, #4]
 8021a0e:	b29b      	uxth	r3, r3
 8021a10:	429a      	cmp	r2, r3
 8021a12:	d014      	beq.n	8021a3e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8021a14:	693b      	ldr	r3, [r7, #16]
 8021a16:	3301      	adds	r3, #1
 8021a18:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8021a1a:	6a3b      	ldr	r3, [r7, #32]
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	d104      	bne.n	8021a2a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8021a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a22:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021a24:	69fb      	ldr	r3, [r7, #28]
 8021a26:	61bb      	str	r3, [r7, #24]
 8021a28:	e009      	b.n	8021a3e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8021a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a2c:	7fda      	ldrb	r2, [r3, #31]
 8021a2e:	6a3b      	ldr	r3, [r7, #32]
 8021a30:	7fdb      	ldrb	r3, [r3, #31]
 8021a32:	429a      	cmp	r2, r3
 8021a34:	d803      	bhi.n	8021a3e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8021a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a38:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021a3a:	69fb      	ldr	r3, [r7, #28]
 8021a3c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8021a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a40:	681b      	ldr	r3, [r3, #0]
 8021a42:	2b00      	cmp	r3, #0
 8021a44:	d001      	beq.n	8021a4a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8021a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a48:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8021a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a4c:	681b      	ldr	r3, [r3, #0]
 8021a4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a52:	2b00      	cmp	r3, #0
 8021a54:	d1cb      	bne.n	80219ee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8021a56:	6a3b      	ldr	r3, [r7, #32]
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d008      	beq.n	8021a6e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8021a5c:	69b9      	ldr	r1, [r7, #24]
 8021a5e:	6a38      	ldr	r0, [r7, #32]
 8021a60:	f7ff ff0e 	bl	8021880 <ip_reass_free_complete_datagram>
 8021a64:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8021a66:	697a      	ldr	r2, [r7, #20]
 8021a68:	68fb      	ldr	r3, [r7, #12]
 8021a6a:	4413      	add	r3, r2
 8021a6c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8021a6e:	697a      	ldr	r2, [r7, #20]
 8021a70:	683b      	ldr	r3, [r7, #0]
 8021a72:	429a      	cmp	r2, r3
 8021a74:	da02      	bge.n	8021a7c <ip_reass_remove_oldest_datagram+0xb4>
 8021a76:	693b      	ldr	r3, [r7, #16]
 8021a78:	2b01      	cmp	r3, #1
 8021a7a:	dcac      	bgt.n	80219d6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8021a7c:	697b      	ldr	r3, [r7, #20]
}
 8021a7e:	4618      	mov	r0, r3
 8021a80:	3728      	adds	r7, #40	; 0x28
 8021a82:	46bd      	mov	sp, r7
 8021a84:	bd80      	pop	{r7, pc}
 8021a86:	bf00      	nop
 8021a88:	2000c100 	.word	0x2000c100

08021a8c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8021a8c:	b580      	push	{r7, lr}
 8021a8e:	b084      	sub	sp, #16
 8021a90:	af00      	add	r7, sp, #0
 8021a92:	6078      	str	r0, [r7, #4]
 8021a94:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021a96:	2004      	movs	r0, #4
 8021a98:	f7f6 f8e0 	bl	8017c5c <memp_malloc>
 8021a9c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8021a9e:	68fb      	ldr	r3, [r7, #12]
 8021aa0:	2b00      	cmp	r3, #0
 8021aa2:	d110      	bne.n	8021ac6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8021aa4:	6839      	ldr	r1, [r7, #0]
 8021aa6:	6878      	ldr	r0, [r7, #4]
 8021aa8:	f7ff ff8e 	bl	80219c8 <ip_reass_remove_oldest_datagram>
 8021aac:	4602      	mov	r2, r0
 8021aae:	683b      	ldr	r3, [r7, #0]
 8021ab0:	4293      	cmp	r3, r2
 8021ab2:	dc03      	bgt.n	8021abc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021ab4:	2004      	movs	r0, #4
 8021ab6:	f7f6 f8d1 	bl	8017c5c <memp_malloc>
 8021aba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8021abc:	68fb      	ldr	r3, [r7, #12]
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	d101      	bne.n	8021ac6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8021ac2:	2300      	movs	r3, #0
 8021ac4:	e016      	b.n	8021af4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8021ac6:	2220      	movs	r2, #32
 8021ac8:	2100      	movs	r1, #0
 8021aca:	68f8      	ldr	r0, [r7, #12]
 8021acc:	f002 f930 	bl	8023d30 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8021ad0:	68fb      	ldr	r3, [r7, #12]
 8021ad2:	220f      	movs	r2, #15
 8021ad4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8021ad6:	4b09      	ldr	r3, [pc, #36]	; (8021afc <ip_reass_enqueue_new_datagram+0x70>)
 8021ad8:	681a      	ldr	r2, [r3, #0]
 8021ada:	68fb      	ldr	r3, [r7, #12]
 8021adc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8021ade:	4a07      	ldr	r2, [pc, #28]	; (8021afc <ip_reass_enqueue_new_datagram+0x70>)
 8021ae0:	68fb      	ldr	r3, [r7, #12]
 8021ae2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8021ae4:	68fb      	ldr	r3, [r7, #12]
 8021ae6:	3308      	adds	r3, #8
 8021ae8:	2214      	movs	r2, #20
 8021aea:	6879      	ldr	r1, [r7, #4]
 8021aec:	4618      	mov	r0, r3
 8021aee:	f002 f8f7 	bl	8023ce0 <memcpy>
  return ipr;
 8021af2:	68fb      	ldr	r3, [r7, #12]
}
 8021af4:	4618      	mov	r0, r3
 8021af6:	3710      	adds	r7, #16
 8021af8:	46bd      	mov	sp, r7
 8021afa:	bd80      	pop	{r7, pc}
 8021afc:	2000c100 	.word	0x2000c100

08021b00 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021b00:	b580      	push	{r7, lr}
 8021b02:	b082      	sub	sp, #8
 8021b04:	af00      	add	r7, sp, #0
 8021b06:	6078      	str	r0, [r7, #4]
 8021b08:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8021b0a:	4b10      	ldr	r3, [pc, #64]	; (8021b4c <ip_reass_dequeue_datagram+0x4c>)
 8021b0c:	681b      	ldr	r3, [r3, #0]
 8021b0e:	687a      	ldr	r2, [r7, #4]
 8021b10:	429a      	cmp	r2, r3
 8021b12:	d104      	bne.n	8021b1e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	681b      	ldr	r3, [r3, #0]
 8021b18:	4a0c      	ldr	r2, [pc, #48]	; (8021b4c <ip_reass_dequeue_datagram+0x4c>)
 8021b1a:	6013      	str	r3, [r2, #0]
 8021b1c:	e00d      	b.n	8021b3a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8021b1e:	683b      	ldr	r3, [r7, #0]
 8021b20:	2b00      	cmp	r3, #0
 8021b22:	d106      	bne.n	8021b32 <ip_reass_dequeue_datagram+0x32>
 8021b24:	4b0a      	ldr	r3, [pc, #40]	; (8021b50 <ip_reass_dequeue_datagram+0x50>)
 8021b26:	f240 1245 	movw	r2, #325	; 0x145
 8021b2a:	490a      	ldr	r1, [pc, #40]	; (8021b54 <ip_reass_dequeue_datagram+0x54>)
 8021b2c:	480a      	ldr	r0, [pc, #40]	; (8021b58 <ip_reass_dequeue_datagram+0x58>)
 8021b2e:	f002 f9e7 	bl	8023f00 <iprintf>
    prev->next = ipr->next;
 8021b32:	687b      	ldr	r3, [r7, #4]
 8021b34:	681a      	ldr	r2, [r3, #0]
 8021b36:	683b      	ldr	r3, [r7, #0]
 8021b38:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8021b3a:	6879      	ldr	r1, [r7, #4]
 8021b3c:	2004      	movs	r0, #4
 8021b3e:	f7f6 f903 	bl	8017d48 <memp_free>
}
 8021b42:	bf00      	nop
 8021b44:	3708      	adds	r7, #8
 8021b46:	46bd      	mov	sp, r7
 8021b48:	bd80      	pop	{r7, pc}
 8021b4a:	bf00      	nop
 8021b4c:	2000c100 	.word	0x2000c100
 8021b50:	080286b4 	.word	0x080286b4
 8021b54:	0802877c 	.word	0x0802877c
 8021b58:	080286fc 	.word	0x080286fc

08021b5c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8021b5c:	b580      	push	{r7, lr}
 8021b5e:	b08c      	sub	sp, #48	; 0x30
 8021b60:	af00      	add	r7, sp, #0
 8021b62:	60f8      	str	r0, [r7, #12]
 8021b64:	60b9      	str	r1, [r7, #8]
 8021b66:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8021b68:	2300      	movs	r3, #0
 8021b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8021b6c:	2301      	movs	r3, #1
 8021b6e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8021b70:	68bb      	ldr	r3, [r7, #8]
 8021b72:	685b      	ldr	r3, [r3, #4]
 8021b74:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021b76:	69fb      	ldr	r3, [r7, #28]
 8021b78:	885b      	ldrh	r3, [r3, #2]
 8021b7a:	b29b      	uxth	r3, r3
 8021b7c:	4618      	mov	r0, r3
 8021b7e:	f7f5 fb95 	bl	80172ac <lwip_htons>
 8021b82:	4603      	mov	r3, r0
 8021b84:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8021b86:	69fb      	ldr	r3, [r7, #28]
 8021b88:	781b      	ldrb	r3, [r3, #0]
 8021b8a:	f003 030f 	and.w	r3, r3, #15
 8021b8e:	b2db      	uxtb	r3, r3
 8021b90:	009b      	lsls	r3, r3, #2
 8021b92:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8021b94:	7e7b      	ldrb	r3, [r7, #25]
 8021b96:	b29b      	uxth	r3, r3
 8021b98:	8b7a      	ldrh	r2, [r7, #26]
 8021b9a:	429a      	cmp	r2, r3
 8021b9c:	d202      	bcs.n	8021ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021ba2:	e135      	b.n	8021e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8021ba4:	7e7b      	ldrb	r3, [r7, #25]
 8021ba6:	b29b      	uxth	r3, r3
 8021ba8:	8b7a      	ldrh	r2, [r7, #26]
 8021baa:	1ad3      	subs	r3, r2, r3
 8021bac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8021bae:	69fb      	ldr	r3, [r7, #28]
 8021bb0:	88db      	ldrh	r3, [r3, #6]
 8021bb2:	b29b      	uxth	r3, r3
 8021bb4:	4618      	mov	r0, r3
 8021bb6:	f7f5 fb79 	bl	80172ac <lwip_htons>
 8021bba:	4603      	mov	r3, r0
 8021bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021bc0:	b29b      	uxth	r3, r3
 8021bc2:	00db      	lsls	r3, r3, #3
 8021bc4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8021bc6:	68bb      	ldr	r3, [r7, #8]
 8021bc8:	685b      	ldr	r3, [r3, #4]
 8021bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8021bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021bce:	2200      	movs	r2, #0
 8021bd0:	701a      	strb	r2, [r3, #0]
 8021bd2:	2200      	movs	r2, #0
 8021bd4:	705a      	strb	r2, [r3, #1]
 8021bd6:	2200      	movs	r2, #0
 8021bd8:	709a      	strb	r2, [r3, #2]
 8021bda:	2200      	movs	r2, #0
 8021bdc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8021bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021be0:	8afa      	ldrh	r2, [r7, #22]
 8021be2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8021be4:	8afa      	ldrh	r2, [r7, #22]
 8021be6:	8b7b      	ldrh	r3, [r7, #26]
 8021be8:	4413      	add	r3, r2
 8021bea:	b29a      	uxth	r2, r3
 8021bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021bee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8021bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021bf2:	88db      	ldrh	r3, [r3, #6]
 8021bf4:	b29b      	uxth	r3, r3
 8021bf6:	8afa      	ldrh	r2, [r7, #22]
 8021bf8:	429a      	cmp	r2, r3
 8021bfa:	d902      	bls.n	8021c02 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021c00:	e106      	b.n	8021e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8021c02:	68fb      	ldr	r3, [r7, #12]
 8021c04:	685b      	ldr	r3, [r3, #4]
 8021c06:	627b      	str	r3, [r7, #36]	; 0x24
 8021c08:	e068      	b.n	8021cdc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8021c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c0c:	685b      	ldr	r3, [r3, #4]
 8021c0e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8021c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c12:	889b      	ldrh	r3, [r3, #4]
 8021c14:	b29a      	uxth	r2, r3
 8021c16:	693b      	ldr	r3, [r7, #16]
 8021c18:	889b      	ldrh	r3, [r3, #4]
 8021c1a:	b29b      	uxth	r3, r3
 8021c1c:	429a      	cmp	r2, r3
 8021c1e:	d235      	bcs.n	8021c8c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8021c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021c24:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8021c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c28:	2b00      	cmp	r3, #0
 8021c2a:	d020      	beq.n	8021c6e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8021c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c2e:	889b      	ldrh	r3, [r3, #4]
 8021c30:	b29a      	uxth	r2, r3
 8021c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c34:	88db      	ldrh	r3, [r3, #6]
 8021c36:	b29b      	uxth	r3, r3
 8021c38:	429a      	cmp	r2, r3
 8021c3a:	d307      	bcc.n	8021c4c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8021c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c3e:	88db      	ldrh	r3, [r3, #6]
 8021c40:	b29a      	uxth	r2, r3
 8021c42:	693b      	ldr	r3, [r7, #16]
 8021c44:	889b      	ldrh	r3, [r3, #4]
 8021c46:	b29b      	uxth	r3, r3
 8021c48:	429a      	cmp	r2, r3
 8021c4a:	d902      	bls.n	8021c52 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021c50:	e0de      	b.n	8021e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8021c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c54:	68ba      	ldr	r2, [r7, #8]
 8021c56:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8021c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c5a:	88db      	ldrh	r3, [r3, #6]
 8021c5c:	b29a      	uxth	r2, r3
 8021c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c60:	889b      	ldrh	r3, [r3, #4]
 8021c62:	b29b      	uxth	r3, r3
 8021c64:	429a      	cmp	r2, r3
 8021c66:	d03d      	beq.n	8021ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021c68:	2300      	movs	r3, #0
 8021c6a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8021c6c:	e03a      	b.n	8021ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8021c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c70:	88db      	ldrh	r3, [r3, #6]
 8021c72:	b29a      	uxth	r2, r3
 8021c74:	693b      	ldr	r3, [r7, #16]
 8021c76:	889b      	ldrh	r3, [r3, #4]
 8021c78:	b29b      	uxth	r3, r3
 8021c7a:	429a      	cmp	r2, r3
 8021c7c:	d902      	bls.n	8021c84 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021c82:	e0c5      	b.n	8021e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8021c84:	68fb      	ldr	r3, [r7, #12]
 8021c86:	68ba      	ldr	r2, [r7, #8]
 8021c88:	605a      	str	r2, [r3, #4]
      break;
 8021c8a:	e02b      	b.n	8021ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8021c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c8e:	889b      	ldrh	r3, [r3, #4]
 8021c90:	b29a      	uxth	r2, r3
 8021c92:	693b      	ldr	r3, [r7, #16]
 8021c94:	889b      	ldrh	r3, [r3, #4]
 8021c96:	b29b      	uxth	r3, r3
 8021c98:	429a      	cmp	r2, r3
 8021c9a:	d102      	bne.n	8021ca2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021ca0:	e0b6      	b.n	8021e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8021ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ca4:	889b      	ldrh	r3, [r3, #4]
 8021ca6:	b29a      	uxth	r2, r3
 8021ca8:	693b      	ldr	r3, [r7, #16]
 8021caa:	88db      	ldrh	r3, [r3, #6]
 8021cac:	b29b      	uxth	r3, r3
 8021cae:	429a      	cmp	r2, r3
 8021cb0:	d202      	bcs.n	8021cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021cb6:	e0ab      	b.n	8021e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8021cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d009      	beq.n	8021cd2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8021cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cc0:	88db      	ldrh	r3, [r3, #6]
 8021cc2:	b29a      	uxth	r2, r3
 8021cc4:	693b      	ldr	r3, [r7, #16]
 8021cc6:	889b      	ldrh	r3, [r3, #4]
 8021cc8:	b29b      	uxth	r3, r3
 8021cca:	429a      	cmp	r2, r3
 8021ccc:	d001      	beq.n	8021cd2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021cce:	2300      	movs	r3, #0
 8021cd0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8021cd2:	693b      	ldr	r3, [r7, #16]
 8021cd4:	681b      	ldr	r3, [r3, #0]
 8021cd6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8021cd8:	693b      	ldr	r3, [r7, #16]
 8021cda:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8021cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cde:	2b00      	cmp	r3, #0
 8021ce0:	d193      	bne.n	8021c0a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8021ce2:	e000      	b.n	8021ce6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8021ce4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8021ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ce8:	2b00      	cmp	r3, #0
 8021cea:	d12d      	bne.n	8021d48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8021cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cee:	2b00      	cmp	r3, #0
 8021cf0:	d01c      	beq.n	8021d2c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8021cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cf4:	88db      	ldrh	r3, [r3, #6]
 8021cf6:	b29a      	uxth	r2, r3
 8021cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021cfa:	889b      	ldrh	r3, [r3, #4]
 8021cfc:	b29b      	uxth	r3, r3
 8021cfe:	429a      	cmp	r2, r3
 8021d00:	d906      	bls.n	8021d10 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8021d02:	4b45      	ldr	r3, [pc, #276]	; (8021e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021d04:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8021d08:	4944      	ldr	r1, [pc, #272]	; (8021e1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8021d0a:	4845      	ldr	r0, [pc, #276]	; (8021e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021d0c:	f002 f8f8 	bl	8023f00 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8021d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d12:	68ba      	ldr	r2, [r7, #8]
 8021d14:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8021d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d18:	88db      	ldrh	r3, [r3, #6]
 8021d1a:	b29a      	uxth	r2, r3
 8021d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d1e:	889b      	ldrh	r3, [r3, #4]
 8021d20:	b29b      	uxth	r3, r3
 8021d22:	429a      	cmp	r2, r3
 8021d24:	d010      	beq.n	8021d48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8021d26:	2300      	movs	r3, #0
 8021d28:	623b      	str	r3, [r7, #32]
 8021d2a:	e00d      	b.n	8021d48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8021d2c:	68fb      	ldr	r3, [r7, #12]
 8021d2e:	685b      	ldr	r3, [r3, #4]
 8021d30:	2b00      	cmp	r3, #0
 8021d32:	d006      	beq.n	8021d42 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8021d34:	4b38      	ldr	r3, [pc, #224]	; (8021e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021d36:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8021d3a:	493a      	ldr	r1, [pc, #232]	; (8021e24 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8021d3c:	4838      	ldr	r0, [pc, #224]	; (8021e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021d3e:	f002 f8df 	bl	8023f00 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8021d42:	68fb      	ldr	r3, [r7, #12]
 8021d44:	68ba      	ldr	r2, [r7, #8]
 8021d46:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8021d48:	687b      	ldr	r3, [r7, #4]
 8021d4a:	2b00      	cmp	r3, #0
 8021d4c:	d105      	bne.n	8021d5a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8021d4e:	68fb      	ldr	r3, [r7, #12]
 8021d50:	7f9b      	ldrb	r3, [r3, #30]
 8021d52:	f003 0301 	and.w	r3, r3, #1
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	d059      	beq.n	8021e0e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8021d5a:	6a3b      	ldr	r3, [r7, #32]
 8021d5c:	2b00      	cmp	r3, #0
 8021d5e:	d04f      	beq.n	8021e00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8021d60:	68fb      	ldr	r3, [r7, #12]
 8021d62:	685b      	ldr	r3, [r3, #4]
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	d006      	beq.n	8021d76 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8021d68:	68fb      	ldr	r3, [r7, #12]
 8021d6a:	685b      	ldr	r3, [r3, #4]
 8021d6c:	685b      	ldr	r3, [r3, #4]
 8021d6e:	889b      	ldrh	r3, [r3, #4]
 8021d70:	b29b      	uxth	r3, r3
 8021d72:	2b00      	cmp	r3, #0
 8021d74:	d002      	beq.n	8021d7c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8021d76:	2300      	movs	r3, #0
 8021d78:	623b      	str	r3, [r7, #32]
 8021d7a:	e041      	b.n	8021e00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8021d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d7e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8021d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d82:	681b      	ldr	r3, [r3, #0]
 8021d84:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021d86:	e012      	b.n	8021dae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8021d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d8a:	685b      	ldr	r3, [r3, #4]
 8021d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8021d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d90:	88db      	ldrh	r3, [r3, #6]
 8021d92:	b29a      	uxth	r2, r3
 8021d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d96:	889b      	ldrh	r3, [r3, #4]
 8021d98:	b29b      	uxth	r3, r3
 8021d9a:	429a      	cmp	r2, r3
 8021d9c:	d002      	beq.n	8021da4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8021d9e:	2300      	movs	r3, #0
 8021da0:	623b      	str	r3, [r7, #32]
            break;
 8021da2:	e007      	b.n	8021db4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8021da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021da6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8021da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021daa:	681b      	ldr	r3, [r3, #0]
 8021dac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021db0:	2b00      	cmp	r3, #0
 8021db2:	d1e9      	bne.n	8021d88 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8021db4:	6a3b      	ldr	r3, [r7, #32]
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	d022      	beq.n	8021e00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8021dba:	68fb      	ldr	r3, [r7, #12]
 8021dbc:	685b      	ldr	r3, [r3, #4]
 8021dbe:	2b00      	cmp	r3, #0
 8021dc0:	d106      	bne.n	8021dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8021dc2:	4b15      	ldr	r3, [pc, #84]	; (8021e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021dc4:	f240 12df 	movw	r2, #479	; 0x1df
 8021dc8:	4917      	ldr	r1, [pc, #92]	; (8021e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021dca:	4815      	ldr	r0, [pc, #84]	; (8021e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021dcc:	f002 f898 	bl	8023f00 <iprintf>
          LWIP_ASSERT("sanity check",
 8021dd0:	68fb      	ldr	r3, [r7, #12]
 8021dd2:	685b      	ldr	r3, [r3, #4]
 8021dd4:	685b      	ldr	r3, [r3, #4]
 8021dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021dd8:	429a      	cmp	r2, r3
 8021dda:	d106      	bne.n	8021dea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8021ddc:	4b0e      	ldr	r3, [pc, #56]	; (8021e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021dde:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8021de2:	4911      	ldr	r1, [pc, #68]	; (8021e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021de4:	480e      	ldr	r0, [pc, #56]	; (8021e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021de6:	f002 f88b 	bl	8023f00 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8021dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021dec:	681b      	ldr	r3, [r3, #0]
 8021dee:	2b00      	cmp	r3, #0
 8021df0:	d006      	beq.n	8021e00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8021df2:	4b09      	ldr	r3, [pc, #36]	; (8021e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021df4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8021df8:	490c      	ldr	r1, [pc, #48]	; (8021e2c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8021dfa:	4809      	ldr	r0, [pc, #36]	; (8021e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021dfc:	f002 f880 	bl	8023f00 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8021e00:	6a3b      	ldr	r3, [r7, #32]
 8021e02:	2b00      	cmp	r3, #0
 8021e04:	bf14      	ite	ne
 8021e06:	2301      	movne	r3, #1
 8021e08:	2300      	moveq	r3, #0
 8021e0a:	b2db      	uxtb	r3, r3
 8021e0c:	e000      	b.n	8021e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8021e0e:	2300      	movs	r3, #0
}
 8021e10:	4618      	mov	r0, r3
 8021e12:	3730      	adds	r7, #48	; 0x30
 8021e14:	46bd      	mov	sp, r7
 8021e16:	bd80      	pop	{r7, pc}
 8021e18:	080286b4 	.word	0x080286b4
 8021e1c:	08028798 	.word	0x08028798
 8021e20:	080286fc 	.word	0x080286fc
 8021e24:	080287b8 	.word	0x080287b8
 8021e28:	080287f0 	.word	0x080287f0
 8021e2c:	08028800 	.word	0x08028800

08021e30 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8021e30:	b580      	push	{r7, lr}
 8021e32:	b08e      	sub	sp, #56	; 0x38
 8021e34:	af00      	add	r7, sp, #0
 8021e36:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8021e38:	687b      	ldr	r3, [r7, #4]
 8021e3a:	685b      	ldr	r3, [r3, #4]
 8021e3c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8021e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e40:	781b      	ldrb	r3, [r3, #0]
 8021e42:	f003 030f 	and.w	r3, r3, #15
 8021e46:	b2db      	uxtb	r3, r3
 8021e48:	009b      	lsls	r3, r3, #2
 8021e4a:	b2db      	uxtb	r3, r3
 8021e4c:	2b14      	cmp	r3, #20
 8021e4e:	f040 8171 	bne.w	8022134 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8021e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e54:	88db      	ldrh	r3, [r3, #6]
 8021e56:	b29b      	uxth	r3, r3
 8021e58:	4618      	mov	r0, r3
 8021e5a:	f7f5 fa27 	bl	80172ac <lwip_htons>
 8021e5e:	4603      	mov	r3, r0
 8021e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021e64:	b29b      	uxth	r3, r3
 8021e66:	00db      	lsls	r3, r3, #3
 8021e68:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e6c:	885b      	ldrh	r3, [r3, #2]
 8021e6e:	b29b      	uxth	r3, r3
 8021e70:	4618      	mov	r0, r3
 8021e72:	f7f5 fa1b 	bl	80172ac <lwip_htons>
 8021e76:	4603      	mov	r3, r0
 8021e78:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8021e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e7c:	781b      	ldrb	r3, [r3, #0]
 8021e7e:	f003 030f 	and.w	r3, r3, #15
 8021e82:	b2db      	uxtb	r3, r3
 8021e84:	009b      	lsls	r3, r3, #2
 8021e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8021e8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021e8e:	b29b      	uxth	r3, r3
 8021e90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021e92:	429a      	cmp	r2, r3
 8021e94:	f0c0 8150 	bcc.w	8022138 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8021e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021e9c:	b29b      	uxth	r3, r3
 8021e9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021ea0:	1ad3      	subs	r3, r2, r3
 8021ea2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8021ea4:	6878      	ldr	r0, [r7, #4]
 8021ea6:	f7f6 fe81 	bl	8018bac <pbuf_clen>
 8021eaa:	4603      	mov	r3, r0
 8021eac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8021eae:	4b8c      	ldr	r3, [pc, #560]	; (80220e0 <ip4_reass+0x2b0>)
 8021eb0:	881b      	ldrh	r3, [r3, #0]
 8021eb2:	461a      	mov	r2, r3
 8021eb4:	8c3b      	ldrh	r3, [r7, #32]
 8021eb6:	4413      	add	r3, r2
 8021eb8:	2b0a      	cmp	r3, #10
 8021eba:	dd10      	ble.n	8021ede <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021ebc:	8c3b      	ldrh	r3, [r7, #32]
 8021ebe:	4619      	mov	r1, r3
 8021ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021ec2:	f7ff fd81 	bl	80219c8 <ip_reass_remove_oldest_datagram>
 8021ec6:	4603      	mov	r3, r0
 8021ec8:	2b00      	cmp	r3, #0
 8021eca:	f000 8137 	beq.w	802213c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8021ece:	4b84      	ldr	r3, [pc, #528]	; (80220e0 <ip4_reass+0x2b0>)
 8021ed0:	881b      	ldrh	r3, [r3, #0]
 8021ed2:	461a      	mov	r2, r3
 8021ed4:	8c3b      	ldrh	r3, [r7, #32]
 8021ed6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021ed8:	2b0a      	cmp	r3, #10
 8021eda:	f300 812f 	bgt.w	802213c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021ede:	4b81      	ldr	r3, [pc, #516]	; (80220e4 <ip4_reass+0x2b4>)
 8021ee0:	681b      	ldr	r3, [r3, #0]
 8021ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8021ee4:	e015      	b.n	8021f12 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8021ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ee8:	695a      	ldr	r2, [r3, #20]
 8021eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021eec:	68db      	ldr	r3, [r3, #12]
 8021eee:	429a      	cmp	r2, r3
 8021ef0:	d10c      	bne.n	8021f0c <ip4_reass+0xdc>
 8021ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ef4:	699a      	ldr	r2, [r3, #24]
 8021ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ef8:	691b      	ldr	r3, [r3, #16]
 8021efa:	429a      	cmp	r2, r3
 8021efc:	d106      	bne.n	8021f0c <ip4_reass+0xdc>
 8021efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f00:	899a      	ldrh	r2, [r3, #12]
 8021f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f04:	889b      	ldrh	r3, [r3, #4]
 8021f06:	b29b      	uxth	r3, r3
 8021f08:	429a      	cmp	r2, r3
 8021f0a:	d006      	beq.n	8021f1a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f0e:	681b      	ldr	r3, [r3, #0]
 8021f10:	633b      	str	r3, [r7, #48]	; 0x30
 8021f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f14:	2b00      	cmp	r3, #0
 8021f16:	d1e6      	bne.n	8021ee6 <ip4_reass+0xb6>
 8021f18:	e000      	b.n	8021f1c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8021f1a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8021f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f1e:	2b00      	cmp	r3, #0
 8021f20:	d109      	bne.n	8021f36 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8021f22:	8c3b      	ldrh	r3, [r7, #32]
 8021f24:	4619      	mov	r1, r3
 8021f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021f28:	f7ff fdb0 	bl	8021a8c <ip_reass_enqueue_new_datagram>
 8021f2c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8021f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f30:	2b00      	cmp	r3, #0
 8021f32:	d11c      	bne.n	8021f6e <ip4_reass+0x13e>
      goto nullreturn;
 8021f34:	e105      	b.n	8022142 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f38:	88db      	ldrh	r3, [r3, #6]
 8021f3a:	b29b      	uxth	r3, r3
 8021f3c:	4618      	mov	r0, r3
 8021f3e:	f7f5 f9b5 	bl	80172ac <lwip_htons>
 8021f42:	4603      	mov	r3, r0
 8021f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021f48:	2b00      	cmp	r3, #0
 8021f4a:	d110      	bne.n	8021f6e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8021f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f4e:	89db      	ldrh	r3, [r3, #14]
 8021f50:	4618      	mov	r0, r3
 8021f52:	f7f5 f9ab 	bl	80172ac <lwip_htons>
 8021f56:	4603      	mov	r3, r0
 8021f58:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	d006      	beq.n	8021f6e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8021f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f62:	3308      	adds	r3, #8
 8021f64:	2214      	movs	r2, #20
 8021f66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021f68:	4618      	mov	r0, r3
 8021f6a:	f001 feb9 	bl	8023ce0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8021f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f70:	88db      	ldrh	r3, [r3, #6]
 8021f72:	b29b      	uxth	r3, r3
 8021f74:	f003 0320 	and.w	r3, r3, #32
 8021f78:	2b00      	cmp	r3, #0
 8021f7a:	bf0c      	ite	eq
 8021f7c:	2301      	moveq	r3, #1
 8021f7e:	2300      	movne	r3, #0
 8021f80:	b2db      	uxtb	r3, r3
 8021f82:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8021f84:	69fb      	ldr	r3, [r7, #28]
 8021f86:	2b00      	cmp	r3, #0
 8021f88:	d00e      	beq.n	8021fa8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8021f8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021f8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021f8e:	4413      	add	r3, r2
 8021f90:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8021f92:	8b7a      	ldrh	r2, [r7, #26]
 8021f94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021f96:	429a      	cmp	r2, r3
 8021f98:	f0c0 80a0 	bcc.w	80220dc <ip4_reass+0x2ac>
 8021f9c:	8b7b      	ldrh	r3, [r7, #26]
 8021f9e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8021fa2:	4293      	cmp	r3, r2
 8021fa4:	f200 809a 	bhi.w	80220dc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8021fa8:	69fa      	ldr	r2, [r7, #28]
 8021faa:	6879      	ldr	r1, [r7, #4]
 8021fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021fae:	f7ff fdd5 	bl	8021b5c <ip_reass_chain_frag_into_datagram_and_validate>
 8021fb2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8021fb4:	697b      	ldr	r3, [r7, #20]
 8021fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8021fba:	f000 809b 	beq.w	80220f4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8021fbe:	4b48      	ldr	r3, [pc, #288]	; (80220e0 <ip4_reass+0x2b0>)
 8021fc0:	881a      	ldrh	r2, [r3, #0]
 8021fc2:	8c3b      	ldrh	r3, [r7, #32]
 8021fc4:	4413      	add	r3, r2
 8021fc6:	b29a      	uxth	r2, r3
 8021fc8:	4b45      	ldr	r3, [pc, #276]	; (80220e0 <ip4_reass+0x2b0>)
 8021fca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8021fcc:	69fb      	ldr	r3, [r7, #28]
 8021fce:	2b00      	cmp	r3, #0
 8021fd0:	d00d      	beq.n	8021fee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8021fd2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021fd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021fd6:	4413      	add	r3, r2
 8021fd8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8021fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021fdc:	8a7a      	ldrh	r2, [r7, #18]
 8021fde:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8021fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021fe2:	7f9b      	ldrb	r3, [r3, #30]
 8021fe4:	f043 0301 	orr.w	r3, r3, #1
 8021fe8:	b2da      	uxtb	r2, r3
 8021fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021fec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8021fee:	697b      	ldr	r3, [r7, #20]
 8021ff0:	2b01      	cmp	r3, #1
 8021ff2:	d171      	bne.n	80220d8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8021ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ff6:	8b9b      	ldrh	r3, [r3, #28]
 8021ff8:	3314      	adds	r3, #20
 8021ffa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8021ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ffe:	685b      	ldr	r3, [r3, #4]
 8022000:	685b      	ldr	r3, [r3, #4]
 8022002:	681b      	ldr	r3, [r3, #0]
 8022004:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8022006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022008:	685b      	ldr	r3, [r3, #4]
 802200a:	685b      	ldr	r3, [r3, #4]
 802200c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 802200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022010:	3308      	adds	r3, #8
 8022012:	2214      	movs	r2, #20
 8022014:	4619      	mov	r1, r3
 8022016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022018:	f001 fe62 	bl	8023ce0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 802201c:	8a3b      	ldrh	r3, [r7, #16]
 802201e:	4618      	mov	r0, r3
 8022020:	f7f5 f944 	bl	80172ac <lwip_htons>
 8022024:	4603      	mov	r3, r0
 8022026:	461a      	mov	r2, r3
 8022028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802202a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 802202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802202e:	2200      	movs	r2, #0
 8022030:	719a      	strb	r2, [r3, #6]
 8022032:	2200      	movs	r2, #0
 8022034:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8022036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022038:	2200      	movs	r2, #0
 802203a:	729a      	strb	r2, [r3, #10]
 802203c:	2200      	movs	r2, #0
 802203e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8022040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022042:	685b      	ldr	r3, [r3, #4]
 8022044:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8022046:	e00d      	b.n	8022064 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8022048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802204a:	685b      	ldr	r3, [r3, #4]
 802204c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 802204e:	2114      	movs	r1, #20
 8022050:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8022052:	f7f6 fc97 	bl	8018984 <pbuf_remove_header>
      pbuf_cat(p, r);
 8022056:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8022058:	6878      	ldr	r0, [r7, #4]
 802205a:	f7f6 fde7 	bl	8018c2c <pbuf_cat>
      r = iprh->next_pbuf;
 802205e:	68fb      	ldr	r3, [r7, #12]
 8022060:	681b      	ldr	r3, [r3, #0]
 8022062:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8022064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022066:	2b00      	cmp	r3, #0
 8022068:	d1ee      	bne.n	8022048 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802206a:	4b1e      	ldr	r3, [pc, #120]	; (80220e4 <ip4_reass+0x2b4>)
 802206c:	681b      	ldr	r3, [r3, #0]
 802206e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022070:	429a      	cmp	r2, r3
 8022072:	d102      	bne.n	802207a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8022074:	2300      	movs	r3, #0
 8022076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022078:	e010      	b.n	802209c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802207a:	4b1a      	ldr	r3, [pc, #104]	; (80220e4 <ip4_reass+0x2b4>)
 802207c:	681b      	ldr	r3, [r3, #0]
 802207e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022080:	e007      	b.n	8022092 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8022082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022084:	681b      	ldr	r3, [r3, #0]
 8022086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022088:	429a      	cmp	r2, r3
 802208a:	d006      	beq.n	802209a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802208e:	681b      	ldr	r3, [r3, #0]
 8022090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022094:	2b00      	cmp	r3, #0
 8022096:	d1f4      	bne.n	8022082 <ip4_reass+0x252>
 8022098:	e000      	b.n	802209c <ip4_reass+0x26c>
          break;
 802209a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 802209c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802209e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80220a0:	f7ff fd2e 	bl	8021b00 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80220a4:	6878      	ldr	r0, [r7, #4]
 80220a6:	f7f6 fd81 	bl	8018bac <pbuf_clen>
 80220aa:	4603      	mov	r3, r0
 80220ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80220ae:	4b0c      	ldr	r3, [pc, #48]	; (80220e0 <ip4_reass+0x2b0>)
 80220b0:	881b      	ldrh	r3, [r3, #0]
 80220b2:	8c3a      	ldrh	r2, [r7, #32]
 80220b4:	429a      	cmp	r2, r3
 80220b6:	d906      	bls.n	80220c6 <ip4_reass+0x296>
 80220b8:	4b0b      	ldr	r3, [pc, #44]	; (80220e8 <ip4_reass+0x2b8>)
 80220ba:	f240 229b 	movw	r2, #667	; 0x29b
 80220be:	490b      	ldr	r1, [pc, #44]	; (80220ec <ip4_reass+0x2bc>)
 80220c0:	480b      	ldr	r0, [pc, #44]	; (80220f0 <ip4_reass+0x2c0>)
 80220c2:	f001 ff1d 	bl	8023f00 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80220c6:	4b06      	ldr	r3, [pc, #24]	; (80220e0 <ip4_reass+0x2b0>)
 80220c8:	881a      	ldrh	r2, [r3, #0]
 80220ca:	8c3b      	ldrh	r3, [r7, #32]
 80220cc:	1ad3      	subs	r3, r2, r3
 80220ce:	b29a      	uxth	r2, r3
 80220d0:	4b03      	ldr	r3, [pc, #12]	; (80220e0 <ip4_reass+0x2b0>)
 80220d2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80220d4:	687b      	ldr	r3, [r7, #4]
 80220d6:	e038      	b.n	802214a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80220d8:	2300      	movs	r3, #0
 80220da:	e036      	b.n	802214a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80220dc:	bf00      	nop
 80220de:	e00a      	b.n	80220f6 <ip4_reass+0x2c6>
 80220e0:	2000c104 	.word	0x2000c104
 80220e4:	2000c100 	.word	0x2000c100
 80220e8:	080286b4 	.word	0x080286b4
 80220ec:	08028824 	.word	0x08028824
 80220f0:	080286fc 	.word	0x080286fc
    goto nullreturn_ipr;
 80220f4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80220f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220f8:	2b00      	cmp	r3, #0
 80220fa:	d106      	bne.n	802210a <ip4_reass+0x2da>
 80220fc:	4b15      	ldr	r3, [pc, #84]	; (8022154 <ip4_reass+0x324>)
 80220fe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8022102:	4915      	ldr	r1, [pc, #84]	; (8022158 <ip4_reass+0x328>)
 8022104:	4815      	ldr	r0, [pc, #84]	; (802215c <ip4_reass+0x32c>)
 8022106:	f001 fefb 	bl	8023f00 <iprintf>
  if (ipr->p == NULL) {
 802210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802210c:	685b      	ldr	r3, [r3, #4]
 802210e:	2b00      	cmp	r3, #0
 8022110:	d116      	bne.n	8022140 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8022112:	4b13      	ldr	r3, [pc, #76]	; (8022160 <ip4_reass+0x330>)
 8022114:	681b      	ldr	r3, [r3, #0]
 8022116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022118:	429a      	cmp	r2, r3
 802211a:	d006      	beq.n	802212a <ip4_reass+0x2fa>
 802211c:	4b0d      	ldr	r3, [pc, #52]	; (8022154 <ip4_reass+0x324>)
 802211e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8022122:	4910      	ldr	r1, [pc, #64]	; (8022164 <ip4_reass+0x334>)
 8022124:	480d      	ldr	r0, [pc, #52]	; (802215c <ip4_reass+0x32c>)
 8022126:	f001 feeb 	bl	8023f00 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 802212a:	2100      	movs	r1, #0
 802212c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802212e:	f7ff fce7 	bl	8021b00 <ip_reass_dequeue_datagram>
 8022132:	e006      	b.n	8022142 <ip4_reass+0x312>
    goto nullreturn;
 8022134:	bf00      	nop
 8022136:	e004      	b.n	8022142 <ip4_reass+0x312>
    goto nullreturn;
 8022138:	bf00      	nop
 802213a:	e002      	b.n	8022142 <ip4_reass+0x312>
      goto nullreturn;
 802213c:	bf00      	nop
 802213e:	e000      	b.n	8022142 <ip4_reass+0x312>
  }

nullreturn:
 8022140:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8022142:	6878      	ldr	r0, [r7, #4]
 8022144:	f7f6 fca4 	bl	8018a90 <pbuf_free>
  return NULL;
 8022148:	2300      	movs	r3, #0
}
 802214a:	4618      	mov	r0, r3
 802214c:	3738      	adds	r7, #56	; 0x38
 802214e:	46bd      	mov	sp, r7
 8022150:	bd80      	pop	{r7, pc}
 8022152:	bf00      	nop
 8022154:	080286b4 	.word	0x080286b4
 8022158:	08028840 	.word	0x08028840
 802215c:	080286fc 	.word	0x080286fc
 8022160:	2000c100 	.word	0x2000c100
 8022164:	0802884c 	.word	0x0802884c

08022168 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8022168:	b580      	push	{r7, lr}
 802216a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 802216c:	2005      	movs	r0, #5
 802216e:	f7f5 fd75 	bl	8017c5c <memp_malloc>
 8022172:	4603      	mov	r3, r0
}
 8022174:	4618      	mov	r0, r3
 8022176:	bd80      	pop	{r7, pc}

08022178 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8022178:	b580      	push	{r7, lr}
 802217a:	b082      	sub	sp, #8
 802217c:	af00      	add	r7, sp, #0
 802217e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8022180:	687b      	ldr	r3, [r7, #4]
 8022182:	2b00      	cmp	r3, #0
 8022184:	d106      	bne.n	8022194 <ip_frag_free_pbuf_custom_ref+0x1c>
 8022186:	4b07      	ldr	r3, [pc, #28]	; (80221a4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8022188:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 802218c:	4906      	ldr	r1, [pc, #24]	; (80221a8 <ip_frag_free_pbuf_custom_ref+0x30>)
 802218e:	4807      	ldr	r0, [pc, #28]	; (80221ac <ip_frag_free_pbuf_custom_ref+0x34>)
 8022190:	f001 feb6 	bl	8023f00 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8022194:	6879      	ldr	r1, [r7, #4]
 8022196:	2005      	movs	r0, #5
 8022198:	f7f5 fdd6 	bl	8017d48 <memp_free>
}
 802219c:	bf00      	nop
 802219e:	3708      	adds	r7, #8
 80221a0:	46bd      	mov	sp, r7
 80221a2:	bd80      	pop	{r7, pc}
 80221a4:	080286b4 	.word	0x080286b4
 80221a8:	0802886c 	.word	0x0802886c
 80221ac:	080286fc 	.word	0x080286fc

080221b0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80221b0:	b580      	push	{r7, lr}
 80221b2:	b084      	sub	sp, #16
 80221b4:	af00      	add	r7, sp, #0
 80221b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80221b8:	687b      	ldr	r3, [r7, #4]
 80221ba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80221bc:	68fb      	ldr	r3, [r7, #12]
 80221be:	2b00      	cmp	r3, #0
 80221c0:	d106      	bne.n	80221d0 <ipfrag_free_pbuf_custom+0x20>
 80221c2:	4b11      	ldr	r3, [pc, #68]	; (8022208 <ipfrag_free_pbuf_custom+0x58>)
 80221c4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80221c8:	4910      	ldr	r1, [pc, #64]	; (802220c <ipfrag_free_pbuf_custom+0x5c>)
 80221ca:	4811      	ldr	r0, [pc, #68]	; (8022210 <ipfrag_free_pbuf_custom+0x60>)
 80221cc:	f001 fe98 	bl	8023f00 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80221d0:	68fa      	ldr	r2, [r7, #12]
 80221d2:	687b      	ldr	r3, [r7, #4]
 80221d4:	429a      	cmp	r2, r3
 80221d6:	d006      	beq.n	80221e6 <ipfrag_free_pbuf_custom+0x36>
 80221d8:	4b0b      	ldr	r3, [pc, #44]	; (8022208 <ipfrag_free_pbuf_custom+0x58>)
 80221da:	f240 22cf 	movw	r2, #719	; 0x2cf
 80221de:	490d      	ldr	r1, [pc, #52]	; (8022214 <ipfrag_free_pbuf_custom+0x64>)
 80221e0:	480b      	ldr	r0, [pc, #44]	; (8022210 <ipfrag_free_pbuf_custom+0x60>)
 80221e2:	f001 fe8d 	bl	8023f00 <iprintf>
  if (pcr->original != NULL) {
 80221e6:	68fb      	ldr	r3, [r7, #12]
 80221e8:	695b      	ldr	r3, [r3, #20]
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	d004      	beq.n	80221f8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80221ee:	68fb      	ldr	r3, [r7, #12]
 80221f0:	695b      	ldr	r3, [r3, #20]
 80221f2:	4618      	mov	r0, r3
 80221f4:	f7f6 fc4c 	bl	8018a90 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80221f8:	68f8      	ldr	r0, [r7, #12]
 80221fa:	f7ff ffbd 	bl	8022178 <ip_frag_free_pbuf_custom_ref>
}
 80221fe:	bf00      	nop
 8022200:	3710      	adds	r7, #16
 8022202:	46bd      	mov	sp, r7
 8022204:	bd80      	pop	{r7, pc}
 8022206:	bf00      	nop
 8022208:	080286b4 	.word	0x080286b4
 802220c:	08028878 	.word	0x08028878
 8022210:	080286fc 	.word	0x080286fc
 8022214:	08028884 	.word	0x08028884

08022218 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8022218:	b580      	push	{r7, lr}
 802221a:	b094      	sub	sp, #80	; 0x50
 802221c:	af02      	add	r7, sp, #8
 802221e:	60f8      	str	r0, [r7, #12]
 8022220:	60b9      	str	r1, [r7, #8]
 8022222:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8022224:	2300      	movs	r3, #0
 8022226:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802222a:	68bb      	ldr	r3, [r7, #8]
 802222c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 802222e:	3b14      	subs	r3, #20
 8022230:	2b00      	cmp	r3, #0
 8022232:	da00      	bge.n	8022236 <ip4_frag+0x1e>
 8022234:	3307      	adds	r3, #7
 8022236:	10db      	asrs	r3, r3, #3
 8022238:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 802223a:	2314      	movs	r3, #20
 802223c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802223e:	68fb      	ldr	r3, [r7, #12]
 8022240:	685b      	ldr	r3, [r3, #4]
 8022242:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8022244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022246:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8022248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802224a:	781b      	ldrb	r3, [r3, #0]
 802224c:	f003 030f 	and.w	r3, r3, #15
 8022250:	b2db      	uxtb	r3, r3
 8022252:	009b      	lsls	r3, r3, #2
 8022254:	b2db      	uxtb	r3, r3
 8022256:	2b14      	cmp	r3, #20
 8022258:	d002      	beq.n	8022260 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 802225a:	f06f 0305 	mvn.w	r3, #5
 802225e:	e110      	b.n	8022482 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8022260:	68fb      	ldr	r3, [r7, #12]
 8022262:	895b      	ldrh	r3, [r3, #10]
 8022264:	2b13      	cmp	r3, #19
 8022266:	d809      	bhi.n	802227c <ip4_frag+0x64>
 8022268:	4b88      	ldr	r3, [pc, #544]	; (802248c <ip4_frag+0x274>)
 802226a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 802226e:	4988      	ldr	r1, [pc, #544]	; (8022490 <ip4_frag+0x278>)
 8022270:	4888      	ldr	r0, [pc, #544]	; (8022494 <ip4_frag+0x27c>)
 8022272:	f001 fe45 	bl	8023f00 <iprintf>
 8022276:	f06f 0305 	mvn.w	r3, #5
 802227a:	e102      	b.n	8022482 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802227e:	88db      	ldrh	r3, [r3, #6]
 8022280:	b29b      	uxth	r3, r3
 8022282:	4618      	mov	r0, r3
 8022284:	f7f5 f812 	bl	80172ac <lwip_htons>
 8022288:	4603      	mov	r3, r0
 802228a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 802228c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802228e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022292:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8022296:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802229c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 802229e:	68fb      	ldr	r3, [r7, #12]
 80222a0:	891b      	ldrh	r3, [r3, #8]
 80222a2:	3b14      	subs	r3, #20
 80222a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80222a8:	e0e1      	b.n	802246e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80222aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80222ac:	00db      	lsls	r3, r3, #3
 80222ae:	b29b      	uxth	r3, r3
 80222b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80222b4:	4293      	cmp	r3, r2
 80222b6:	bf28      	it	cs
 80222b8:	4613      	movcs	r3, r2
 80222ba:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80222bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80222c0:	2114      	movs	r1, #20
 80222c2:	200e      	movs	r0, #14
 80222c4:	f7f6 f900 	bl	80184c8 <pbuf_alloc>
 80222c8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80222ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222cc:	2b00      	cmp	r3, #0
 80222ce:	f000 80d5 	beq.w	802247c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80222d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222d4:	895b      	ldrh	r3, [r3, #10]
 80222d6:	2b13      	cmp	r3, #19
 80222d8:	d806      	bhi.n	80222e8 <ip4_frag+0xd0>
 80222da:	4b6c      	ldr	r3, [pc, #432]	; (802248c <ip4_frag+0x274>)
 80222dc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80222e0:	496d      	ldr	r1, [pc, #436]	; (8022498 <ip4_frag+0x280>)
 80222e2:	486c      	ldr	r0, [pc, #432]	; (8022494 <ip4_frag+0x27c>)
 80222e4:	f001 fe0c 	bl	8023f00 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80222e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222ea:	685b      	ldr	r3, [r3, #4]
 80222ec:	2214      	movs	r2, #20
 80222ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80222f0:	4618      	mov	r0, r3
 80222f2:	f001 fcf5 	bl	8023ce0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80222f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222f8:	685b      	ldr	r3, [r3, #4]
 80222fa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80222fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80222fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8022302:	e064      	b.n	80223ce <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8022304:	68fb      	ldr	r3, [r7, #12]
 8022306:	895a      	ldrh	r2, [r3, #10]
 8022308:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802230a:	1ad3      	subs	r3, r2, r3
 802230c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802230e:	68fb      	ldr	r3, [r7, #12]
 8022310:	895b      	ldrh	r3, [r3, #10]
 8022312:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8022314:	429a      	cmp	r2, r3
 8022316:	d906      	bls.n	8022326 <ip4_frag+0x10e>
 8022318:	4b5c      	ldr	r3, [pc, #368]	; (802248c <ip4_frag+0x274>)
 802231a:	f240 322d 	movw	r2, #813	; 0x32d
 802231e:	495f      	ldr	r1, [pc, #380]	; (802249c <ip4_frag+0x284>)
 8022320:	485c      	ldr	r0, [pc, #368]	; (8022494 <ip4_frag+0x27c>)
 8022322:	f001 fded 	bl	8023f00 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8022326:	8bfa      	ldrh	r2, [r7, #30]
 8022328:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802232c:	4293      	cmp	r3, r2
 802232e:	bf28      	it	cs
 8022330:	4613      	movcs	r3, r2
 8022332:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8022336:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802233a:	2b00      	cmp	r3, #0
 802233c:	d105      	bne.n	802234a <ip4_frag+0x132>
        poff = 0;
 802233e:	2300      	movs	r3, #0
 8022340:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8022342:	68fb      	ldr	r3, [r7, #12]
 8022344:	681b      	ldr	r3, [r3, #0]
 8022346:	60fb      	str	r3, [r7, #12]
        continue;
 8022348:	e041      	b.n	80223ce <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 802234a:	f7ff ff0d 	bl	8022168 <ip_frag_alloc_pbuf_custom_ref>
 802234e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8022350:	69bb      	ldr	r3, [r7, #24]
 8022352:	2b00      	cmp	r3, #0
 8022354:	d103      	bne.n	802235e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8022356:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022358:	f7f6 fb9a 	bl	8018a90 <pbuf_free>
        goto memerr;
 802235c:	e08f      	b.n	802247e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802235e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8022360:	68fb      	ldr	r3, [r7, #12]
 8022362:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8022364:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8022366:	4413      	add	r3, r2
 8022368:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 802236c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8022370:	9201      	str	r2, [sp, #4]
 8022372:	9300      	str	r3, [sp, #0]
 8022374:	4603      	mov	r3, r0
 8022376:	2241      	movs	r2, #65	; 0x41
 8022378:	2000      	movs	r0, #0
 802237a:	f7f6 f9cf 	bl	801871c <pbuf_alloced_custom>
 802237e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8022380:	697b      	ldr	r3, [r7, #20]
 8022382:	2b00      	cmp	r3, #0
 8022384:	d106      	bne.n	8022394 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8022386:	69b8      	ldr	r0, [r7, #24]
 8022388:	f7ff fef6 	bl	8022178 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 802238c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802238e:	f7f6 fb7f 	bl	8018a90 <pbuf_free>
        goto memerr;
 8022392:	e074      	b.n	802247e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8022394:	68f8      	ldr	r0, [r7, #12]
 8022396:	f7f6 fc21 	bl	8018bdc <pbuf_ref>
      pcr->original = p;
 802239a:	69bb      	ldr	r3, [r7, #24]
 802239c:	68fa      	ldr	r2, [r7, #12]
 802239e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80223a0:	69bb      	ldr	r3, [r7, #24]
 80223a2:	4a3f      	ldr	r2, [pc, #252]	; (80224a0 <ip4_frag+0x288>)
 80223a4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80223a6:	6979      	ldr	r1, [r7, #20]
 80223a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80223aa:	f7f6 fc3f 	bl	8018c2c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80223ae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80223b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80223b6:	1ad3      	subs	r3, r2, r3
 80223b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80223bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80223c0:	2b00      	cmp	r3, #0
 80223c2:	d004      	beq.n	80223ce <ip4_frag+0x1b6>
        poff = 0;
 80223c4:	2300      	movs	r3, #0
 80223c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80223c8:	68fb      	ldr	r3, [r7, #12]
 80223ca:	681b      	ldr	r3, [r3, #0]
 80223cc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80223ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80223d2:	2b00      	cmp	r3, #0
 80223d4:	d196      	bne.n	8022304 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80223d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80223d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80223dc:	4413      	add	r3, r2
 80223de:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80223e0:	68bb      	ldr	r3, [r7, #8]
 80223e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80223e4:	f1a3 0213 	sub.w	r2, r3, #19
 80223e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80223ec:	429a      	cmp	r2, r3
 80223ee:	bfcc      	ite	gt
 80223f0:	2301      	movgt	r3, #1
 80223f2:	2300      	movle	r3, #0
 80223f4:	b2db      	uxtb	r3, r3
 80223f6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80223f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80223fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022400:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8022402:	6a3b      	ldr	r3, [r7, #32]
 8022404:	2b00      	cmp	r3, #0
 8022406:	d002      	beq.n	802240e <ip4_frag+0x1f6>
 8022408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802240a:	2b00      	cmp	r3, #0
 802240c:	d003      	beq.n	8022416 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 802240e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022410:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022414:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8022416:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022418:	4618      	mov	r0, r3
 802241a:	f7f4 ff47 	bl	80172ac <lwip_htons>
 802241e:	4603      	mov	r3, r0
 8022420:	461a      	mov	r2, r3
 8022422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022424:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8022426:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8022428:	3314      	adds	r3, #20
 802242a:	b29b      	uxth	r3, r3
 802242c:	4618      	mov	r0, r3
 802242e:	f7f4 ff3d 	bl	80172ac <lwip_htons>
 8022432:	4603      	mov	r3, r0
 8022434:	461a      	mov	r2, r3
 8022436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022438:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 802243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802243c:	2200      	movs	r2, #0
 802243e:	729a      	strb	r2, [r3, #10]
 8022440:	2200      	movs	r2, #0
 8022442:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8022444:	68bb      	ldr	r3, [r7, #8]
 8022446:	695b      	ldr	r3, [r3, #20]
 8022448:	687a      	ldr	r2, [r7, #4]
 802244a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802244c:	68b8      	ldr	r0, [r7, #8]
 802244e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8022450:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022452:	f7f6 fb1d 	bl	8018a90 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8022456:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802245a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802245c:	1ad3      	subs	r3, r2, r3
 802245e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8022462:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8022466:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8022468:	4413      	add	r3, r2
 802246a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 802246e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8022472:	2b00      	cmp	r3, #0
 8022474:	f47f af19 	bne.w	80222aa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8022478:	2300      	movs	r3, #0
 802247a:	e002      	b.n	8022482 <ip4_frag+0x26a>
      goto memerr;
 802247c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802247e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8022482:	4618      	mov	r0, r3
 8022484:	3748      	adds	r7, #72	; 0x48
 8022486:	46bd      	mov	sp, r7
 8022488:	bd80      	pop	{r7, pc}
 802248a:	bf00      	nop
 802248c:	080286b4 	.word	0x080286b4
 8022490:	08028890 	.word	0x08028890
 8022494:	080286fc 	.word	0x080286fc
 8022498:	080288ac 	.word	0x080288ac
 802249c:	080288cc 	.word	0x080288cc
 80224a0:	080221b1 	.word	0x080221b1

080224a4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80224a4:	b580      	push	{r7, lr}
 80224a6:	b086      	sub	sp, #24
 80224a8:	af00      	add	r7, sp, #0
 80224aa:	6078      	str	r0, [r7, #4]
 80224ac:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80224ae:	230e      	movs	r3, #14
 80224b0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80224b2:	687b      	ldr	r3, [r7, #4]
 80224b4:	895b      	ldrh	r3, [r3, #10]
 80224b6:	2b0e      	cmp	r3, #14
 80224b8:	d96e      	bls.n	8022598 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	7bdb      	ldrb	r3, [r3, #15]
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d106      	bne.n	80224d0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80224c2:	683b      	ldr	r3, [r7, #0]
 80224c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80224c8:	3301      	adds	r3, #1
 80224ca:	b2da      	uxtb	r2, r3
 80224cc:	687b      	ldr	r3, [r7, #4]
 80224ce:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80224d0:	687b      	ldr	r3, [r7, #4]
 80224d2:	685b      	ldr	r3, [r3, #4]
 80224d4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80224d6:	693b      	ldr	r3, [r7, #16]
 80224d8:	7b1a      	ldrb	r2, [r3, #12]
 80224da:	7b5b      	ldrb	r3, [r3, #13]
 80224dc:	021b      	lsls	r3, r3, #8
 80224de:	4313      	orrs	r3, r2
 80224e0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80224e2:	693b      	ldr	r3, [r7, #16]
 80224e4:	781b      	ldrb	r3, [r3, #0]
 80224e6:	f003 0301 	and.w	r3, r3, #1
 80224ea:	2b00      	cmp	r3, #0
 80224ec:	d023      	beq.n	8022536 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80224ee:	693b      	ldr	r3, [r7, #16]
 80224f0:	781b      	ldrb	r3, [r3, #0]
 80224f2:	2b01      	cmp	r3, #1
 80224f4:	d10f      	bne.n	8022516 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80224f6:	693b      	ldr	r3, [r7, #16]
 80224f8:	785b      	ldrb	r3, [r3, #1]
 80224fa:	2b00      	cmp	r3, #0
 80224fc:	d11b      	bne.n	8022536 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80224fe:	693b      	ldr	r3, [r7, #16]
 8022500:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022502:	2b5e      	cmp	r3, #94	; 0x5e
 8022504:	d117      	bne.n	8022536 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8022506:	687b      	ldr	r3, [r7, #4]
 8022508:	7b5b      	ldrb	r3, [r3, #13]
 802250a:	f043 0310 	orr.w	r3, r3, #16
 802250e:	b2da      	uxtb	r2, r3
 8022510:	687b      	ldr	r3, [r7, #4]
 8022512:	735a      	strb	r2, [r3, #13]
 8022514:	e00f      	b.n	8022536 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8022516:	693b      	ldr	r3, [r7, #16]
 8022518:	2206      	movs	r2, #6
 802251a:	4928      	ldr	r1, [pc, #160]	; (80225bc <ethernet_input+0x118>)
 802251c:	4618      	mov	r0, r3
 802251e:	f001 fbcf 	bl	8023cc0 <memcmp>
 8022522:	4603      	mov	r3, r0
 8022524:	2b00      	cmp	r3, #0
 8022526:	d106      	bne.n	8022536 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8022528:	687b      	ldr	r3, [r7, #4]
 802252a:	7b5b      	ldrb	r3, [r3, #13]
 802252c:	f043 0308 	orr.w	r3, r3, #8
 8022530:	b2da      	uxtb	r2, r3
 8022532:	687b      	ldr	r3, [r7, #4]
 8022534:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8022536:	89fb      	ldrh	r3, [r7, #14]
 8022538:	2b08      	cmp	r3, #8
 802253a:	d003      	beq.n	8022544 <ethernet_input+0xa0>
 802253c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8022540:	d014      	beq.n	802256c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8022542:	e032      	b.n	80225aa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022544:	683b      	ldr	r3, [r7, #0]
 8022546:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802254a:	f003 0308 	and.w	r3, r3, #8
 802254e:	2b00      	cmp	r3, #0
 8022550:	d024      	beq.n	802259c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022552:	8afb      	ldrh	r3, [r7, #22]
 8022554:	4619      	mov	r1, r3
 8022556:	6878      	ldr	r0, [r7, #4]
 8022558:	f7f6 fa14 	bl	8018984 <pbuf_remove_header>
 802255c:	4603      	mov	r3, r0
 802255e:	2b00      	cmp	r3, #0
 8022560:	d11e      	bne.n	80225a0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8022562:	6839      	ldr	r1, [r7, #0]
 8022564:	6878      	ldr	r0, [r7, #4]
 8022566:	f7fe ff21 	bl	80213ac <ip4_input>
      break;
 802256a:	e013      	b.n	8022594 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 802256c:	683b      	ldr	r3, [r7, #0]
 802256e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022572:	f003 0308 	and.w	r3, r3, #8
 8022576:	2b00      	cmp	r3, #0
 8022578:	d014      	beq.n	80225a4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802257a:	8afb      	ldrh	r3, [r7, #22]
 802257c:	4619      	mov	r1, r3
 802257e:	6878      	ldr	r0, [r7, #4]
 8022580:	f7f6 fa00 	bl	8018984 <pbuf_remove_header>
 8022584:	4603      	mov	r3, r0
 8022586:	2b00      	cmp	r3, #0
 8022588:	d10e      	bne.n	80225a8 <ethernet_input+0x104>
        etharp_input(p, netif);
 802258a:	6839      	ldr	r1, [r7, #0]
 802258c:	6878      	ldr	r0, [r7, #4]
 802258e:	f7fe f8c1 	bl	8020714 <etharp_input>
      break;
 8022592:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8022594:	2300      	movs	r3, #0
 8022596:	e00c      	b.n	80225b2 <ethernet_input+0x10e>
    goto free_and_return;
 8022598:	bf00      	nop
 802259a:	e006      	b.n	80225aa <ethernet_input+0x106>
        goto free_and_return;
 802259c:	bf00      	nop
 802259e:	e004      	b.n	80225aa <ethernet_input+0x106>
        goto free_and_return;
 80225a0:	bf00      	nop
 80225a2:	e002      	b.n	80225aa <ethernet_input+0x106>
        goto free_and_return;
 80225a4:	bf00      	nop
 80225a6:	e000      	b.n	80225aa <ethernet_input+0x106>
        goto free_and_return;
 80225a8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80225aa:	6878      	ldr	r0, [r7, #4]
 80225ac:	f7f6 fa70 	bl	8018a90 <pbuf_free>
  return ERR_OK;
 80225b0:	2300      	movs	r3, #0
}
 80225b2:	4618      	mov	r0, r3
 80225b4:	3718      	adds	r7, #24
 80225b6:	46bd      	mov	sp, r7
 80225b8:	bd80      	pop	{r7, pc}
 80225ba:	bf00      	nop
 80225bc:	08028afc 	.word	0x08028afc

080225c0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80225c0:	b580      	push	{r7, lr}
 80225c2:	b086      	sub	sp, #24
 80225c4:	af00      	add	r7, sp, #0
 80225c6:	60f8      	str	r0, [r7, #12]
 80225c8:	60b9      	str	r1, [r7, #8]
 80225ca:	607a      	str	r2, [r7, #4]
 80225cc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80225ce:	8c3b      	ldrh	r3, [r7, #32]
 80225d0:	4618      	mov	r0, r3
 80225d2:	f7f4 fe6b 	bl	80172ac <lwip_htons>
 80225d6:	4603      	mov	r3, r0
 80225d8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80225da:	210e      	movs	r1, #14
 80225dc:	68b8      	ldr	r0, [r7, #8]
 80225de:	f7f6 f9c1 	bl	8018964 <pbuf_add_header>
 80225e2:	4603      	mov	r3, r0
 80225e4:	2b00      	cmp	r3, #0
 80225e6:	d125      	bne.n	8022634 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80225e8:	68bb      	ldr	r3, [r7, #8]
 80225ea:	685b      	ldr	r3, [r3, #4]
 80225ec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80225ee:	693b      	ldr	r3, [r7, #16]
 80225f0:	8afa      	ldrh	r2, [r7, #22]
 80225f2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80225f4:	693b      	ldr	r3, [r7, #16]
 80225f6:	2206      	movs	r2, #6
 80225f8:	6839      	ldr	r1, [r7, #0]
 80225fa:	4618      	mov	r0, r3
 80225fc:	f001 fb70 	bl	8023ce0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8022600:	693b      	ldr	r3, [r7, #16]
 8022602:	3306      	adds	r3, #6
 8022604:	2206      	movs	r2, #6
 8022606:	6879      	ldr	r1, [r7, #4]
 8022608:	4618      	mov	r0, r3
 802260a:	f001 fb69 	bl	8023ce0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802260e:	68fb      	ldr	r3, [r7, #12]
 8022610:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8022614:	2b06      	cmp	r3, #6
 8022616:	d006      	beq.n	8022626 <ethernet_output+0x66>
 8022618:	4b0a      	ldr	r3, [pc, #40]	; (8022644 <ethernet_output+0x84>)
 802261a:	f44f 7299 	mov.w	r2, #306	; 0x132
 802261e:	490a      	ldr	r1, [pc, #40]	; (8022648 <ethernet_output+0x88>)
 8022620:	480a      	ldr	r0, [pc, #40]	; (802264c <ethernet_output+0x8c>)
 8022622:	f001 fc6d 	bl	8023f00 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8022626:	68fb      	ldr	r3, [r7, #12]
 8022628:	699b      	ldr	r3, [r3, #24]
 802262a:	68b9      	ldr	r1, [r7, #8]
 802262c:	68f8      	ldr	r0, [r7, #12]
 802262e:	4798      	blx	r3
 8022630:	4603      	mov	r3, r0
 8022632:	e002      	b.n	802263a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8022634:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8022636:	f06f 0301 	mvn.w	r3, #1
}
 802263a:	4618      	mov	r0, r3
 802263c:	3718      	adds	r7, #24
 802263e:	46bd      	mov	sp, r7
 8022640:	bd80      	pop	{r7, pc}
 8022642:	bf00      	nop
 8022644:	080288dc 	.word	0x080288dc
 8022648:	08028914 	.word	0x08028914
 802264c:	08028948 	.word	0x08028948

08022650 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8022650:	b580      	push	{r7, lr}
 8022652:	b086      	sub	sp, #24
 8022654:	af00      	add	r7, sp, #0
 8022656:	6078      	str	r0, [r7, #4]
 8022658:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 802265a:	683b      	ldr	r3, [r7, #0]
 802265c:	60bb      	str	r3, [r7, #8]
 802265e:	2304      	movs	r3, #4
 8022660:	60fb      	str	r3, [r7, #12]
 8022662:	2300      	movs	r3, #0
 8022664:	613b      	str	r3, [r7, #16]
 8022666:	2300      	movs	r3, #0
 8022668:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802266a:	f107 0308 	add.w	r3, r7, #8
 802266e:	2100      	movs	r1, #0
 8022670:	4618      	mov	r0, r3
 8022672:	f7ef fb6e 	bl	8011d52 <osMessageCreate>
 8022676:	4602      	mov	r2, r0
 8022678:	687b      	ldr	r3, [r7, #4]
 802267a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 802267c:	687b      	ldr	r3, [r7, #4]
 802267e:	681b      	ldr	r3, [r3, #0]
 8022680:	2b00      	cmp	r3, #0
 8022682:	d102      	bne.n	802268a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8022684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022688:	e000      	b.n	802268c <sys_mbox_new+0x3c>

  return ERR_OK;
 802268a:	2300      	movs	r3, #0
}
 802268c:	4618      	mov	r0, r3
 802268e:	3718      	adds	r7, #24
 8022690:	46bd      	mov	sp, r7
 8022692:	bd80      	pop	{r7, pc}

08022694 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8022694:	b580      	push	{r7, lr}
 8022696:	b082      	sub	sp, #8
 8022698:	af00      	add	r7, sp, #0
 802269a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 802269c:	687b      	ldr	r3, [r7, #4]
 802269e:	681b      	ldr	r3, [r3, #0]
 80226a0:	4618      	mov	r0, r3
 80226a2:	f7ef fc33 	bl	8011f0c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80226a6:	687b      	ldr	r3, [r7, #4]
 80226a8:	681b      	ldr	r3, [r3, #0]
 80226aa:	4618      	mov	r0, r3
 80226ac:	f7ef fc44 	bl	8011f38 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80226b0:	bf00      	nop
 80226b2:	3708      	adds	r7, #8
 80226b4:	46bd      	mov	sp, r7
 80226b6:	bd80      	pop	{r7, pc}

080226b8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80226b8:	b580      	push	{r7, lr}
 80226ba:	b084      	sub	sp, #16
 80226bc:	af00      	add	r7, sp, #0
 80226be:	6078      	str	r0, [r7, #4]
 80226c0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80226c2:	687b      	ldr	r3, [r7, #4]
 80226c4:	681b      	ldr	r3, [r3, #0]
 80226c6:	6839      	ldr	r1, [r7, #0]
 80226c8:	2200      	movs	r2, #0
 80226ca:	4618      	mov	r0, r3
 80226cc:	f7ef fb6a 	bl	8011da4 <osMessagePut>
 80226d0:	4603      	mov	r3, r0
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	d102      	bne.n	80226dc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80226d6:	2300      	movs	r3, #0
 80226d8:	73fb      	strb	r3, [r7, #15]
 80226da:	e001      	b.n	80226e0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80226dc:	23ff      	movs	r3, #255	; 0xff
 80226de:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80226e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80226e4:	4618      	mov	r0, r3
 80226e6:	3710      	adds	r7, #16
 80226e8:	46bd      	mov	sp, r7
 80226ea:	bd80      	pop	{r7, pc}

080226ec <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80226ec:	b580      	push	{r7, lr}
 80226ee:	b08c      	sub	sp, #48	; 0x30
 80226f0:	af00      	add	r7, sp, #0
 80226f2:	61f8      	str	r0, [r7, #28]
 80226f4:	61b9      	str	r1, [r7, #24]
 80226f6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80226f8:	f7ef f956 	bl	80119a8 <osKernelSysTick>
 80226fc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80226fe:	697b      	ldr	r3, [r7, #20]
 8022700:	2b00      	cmp	r3, #0
 8022702:	d017      	beq.n	8022734 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8022704:	69fb      	ldr	r3, [r7, #28]
 8022706:	6819      	ldr	r1, [r3, #0]
 8022708:	f107 0320 	add.w	r3, r7, #32
 802270c:	697a      	ldr	r2, [r7, #20]
 802270e:	4618      	mov	r0, r3
 8022710:	f7ef fb88 	bl	8011e24 <osMessageGet>

    if(event.status == osEventMessage)
 8022714:	6a3b      	ldr	r3, [r7, #32]
 8022716:	2b10      	cmp	r3, #16
 8022718:	d109      	bne.n	802272e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 802271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802271c:	461a      	mov	r2, r3
 802271e:	69bb      	ldr	r3, [r7, #24]
 8022720:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8022722:	f7ef f941 	bl	80119a8 <osKernelSysTick>
 8022726:	4602      	mov	r2, r0
 8022728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802272a:	1ad3      	subs	r3, r2, r3
 802272c:	e019      	b.n	8022762 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 802272e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022732:	e016      	b.n	8022762 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8022734:	69fb      	ldr	r3, [r7, #28]
 8022736:	6819      	ldr	r1, [r3, #0]
 8022738:	463b      	mov	r3, r7
 802273a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802273e:	4618      	mov	r0, r3
 8022740:	f7ef fb70 	bl	8011e24 <osMessageGet>
 8022744:	f107 0320 	add.w	r3, r7, #32
 8022748:	463a      	mov	r2, r7
 802274a:	ca07      	ldmia	r2, {r0, r1, r2}
 802274c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8022750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022752:	461a      	mov	r2, r3
 8022754:	69bb      	ldr	r3, [r7, #24]
 8022756:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8022758:	f7ef f926 	bl	80119a8 <osKernelSysTick>
 802275c:	4602      	mov	r2, r0
 802275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022760:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8022762:	4618      	mov	r0, r3
 8022764:	3730      	adds	r7, #48	; 0x30
 8022766:	46bd      	mov	sp, r7
 8022768:	bd80      	pop	{r7, pc}

0802276a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 802276a:	b580      	push	{r7, lr}
 802276c:	b086      	sub	sp, #24
 802276e:	af00      	add	r7, sp, #0
 8022770:	6078      	str	r0, [r7, #4]
 8022772:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8022774:	687b      	ldr	r3, [r7, #4]
 8022776:	6819      	ldr	r1, [r3, #0]
 8022778:	f107 030c 	add.w	r3, r7, #12
 802277c:	2200      	movs	r2, #0
 802277e:	4618      	mov	r0, r3
 8022780:	f7ef fb50 	bl	8011e24 <osMessageGet>

  if(event.status == osEventMessage)
 8022784:	68fb      	ldr	r3, [r7, #12]
 8022786:	2b10      	cmp	r3, #16
 8022788:	d105      	bne.n	8022796 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 802278a:	693b      	ldr	r3, [r7, #16]
 802278c:	461a      	mov	r2, r3
 802278e:	683b      	ldr	r3, [r7, #0]
 8022790:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8022792:	2300      	movs	r3, #0
 8022794:	e001      	b.n	802279a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8022796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 802279a:	4618      	mov	r0, r3
 802279c:	3718      	adds	r7, #24
 802279e:	46bd      	mov	sp, r7
 80227a0:	bd80      	pop	{r7, pc}

080227a2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80227a2:	b480      	push	{r7}
 80227a4:	b083      	sub	sp, #12
 80227a6:	af00      	add	r7, sp, #0
 80227a8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80227aa:	687b      	ldr	r3, [r7, #4]
 80227ac:	681b      	ldr	r3, [r3, #0]
 80227ae:	2b00      	cmp	r3, #0
 80227b0:	d101      	bne.n	80227b6 <sys_mbox_valid+0x14>
    return 0;
 80227b2:	2300      	movs	r3, #0
 80227b4:	e000      	b.n	80227b8 <sys_mbox_valid+0x16>
  else
    return 1;
 80227b6:	2301      	movs	r3, #1
}
 80227b8:	4618      	mov	r0, r3
 80227ba:	370c      	adds	r7, #12
 80227bc:	46bd      	mov	sp, r7
 80227be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227c2:	4770      	bx	lr

080227c4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80227c4:	b480      	push	{r7}
 80227c6:	b083      	sub	sp, #12
 80227c8:	af00      	add	r7, sp, #0
 80227ca:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80227cc:	687b      	ldr	r3, [r7, #4]
 80227ce:	2200      	movs	r2, #0
 80227d0:	601a      	str	r2, [r3, #0]
}
 80227d2:	bf00      	nop
 80227d4:	370c      	adds	r7, #12
 80227d6:	46bd      	mov	sp, r7
 80227d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227dc:	4770      	bx	lr

080227de <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80227de:	b580      	push	{r7, lr}
 80227e0:	b084      	sub	sp, #16
 80227e2:	af00      	add	r7, sp, #0
 80227e4:	6078      	str	r0, [r7, #4]
 80227e6:	460b      	mov	r3, r1
 80227e8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80227ea:	2300      	movs	r3, #0
 80227ec:	60bb      	str	r3, [r7, #8]
 80227ee:	2300      	movs	r3, #0
 80227f0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80227f2:	f107 0308 	add.w	r3, r7, #8
 80227f6:	2101      	movs	r1, #1
 80227f8:	4618      	mov	r0, r3
 80227fa:	f7ef f9e1 	bl	8011bc0 <osSemaphoreCreate>
 80227fe:	4602      	mov	r2, r0
 8022800:	687b      	ldr	r3, [r7, #4]
 8022802:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	681b      	ldr	r3, [r3, #0]
 8022808:	2b00      	cmp	r3, #0
 802280a:	d102      	bne.n	8022812 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 802280c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022810:	e009      	b.n	8022826 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8022812:	78fb      	ldrb	r3, [r7, #3]
 8022814:	2b00      	cmp	r3, #0
 8022816:	d105      	bne.n	8022824 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8022818:	687b      	ldr	r3, [r7, #4]
 802281a:	681b      	ldr	r3, [r3, #0]
 802281c:	2100      	movs	r1, #0
 802281e:	4618      	mov	r0, r3
 8022820:	f7ef fa00 	bl	8011c24 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8022824:	2300      	movs	r3, #0
}
 8022826:	4618      	mov	r0, r3
 8022828:	3710      	adds	r7, #16
 802282a:	46bd      	mov	sp, r7
 802282c:	bd80      	pop	{r7, pc}

0802282e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 802282e:	b580      	push	{r7, lr}
 8022830:	b084      	sub	sp, #16
 8022832:	af00      	add	r7, sp, #0
 8022834:	6078      	str	r0, [r7, #4]
 8022836:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8022838:	f7ef f8b6 	bl	80119a8 <osKernelSysTick>
 802283c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 802283e:	683b      	ldr	r3, [r7, #0]
 8022840:	2b00      	cmp	r3, #0
 8022842:	d011      	beq.n	8022868 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8022844:	687b      	ldr	r3, [r7, #4]
 8022846:	681b      	ldr	r3, [r3, #0]
 8022848:	6839      	ldr	r1, [r7, #0]
 802284a:	4618      	mov	r0, r3
 802284c:	f7ef f9ea 	bl	8011c24 <osSemaphoreWait>
 8022850:	4603      	mov	r3, r0
 8022852:	2b00      	cmp	r3, #0
 8022854:	d105      	bne.n	8022862 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8022856:	f7ef f8a7 	bl	80119a8 <osKernelSysTick>
 802285a:	4602      	mov	r2, r0
 802285c:	68fb      	ldr	r3, [r7, #12]
 802285e:	1ad3      	subs	r3, r2, r3
 8022860:	e012      	b.n	8022888 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8022862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022866:	e00f      	b.n	8022888 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8022868:	bf00      	nop
 802286a:	687b      	ldr	r3, [r7, #4]
 802286c:	681b      	ldr	r3, [r3, #0]
 802286e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022872:	4618      	mov	r0, r3
 8022874:	f7ef f9d6 	bl	8011c24 <osSemaphoreWait>
 8022878:	4603      	mov	r3, r0
 802287a:	2b00      	cmp	r3, #0
 802287c:	d1f5      	bne.n	802286a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 802287e:	f7ef f893 	bl	80119a8 <osKernelSysTick>
 8022882:	4602      	mov	r2, r0
 8022884:	68fb      	ldr	r3, [r7, #12]
 8022886:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8022888:	4618      	mov	r0, r3
 802288a:	3710      	adds	r7, #16
 802288c:	46bd      	mov	sp, r7
 802288e:	bd80      	pop	{r7, pc}

08022890 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8022890:	b580      	push	{r7, lr}
 8022892:	b082      	sub	sp, #8
 8022894:	af00      	add	r7, sp, #0
 8022896:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8022898:	687b      	ldr	r3, [r7, #4]
 802289a:	681b      	ldr	r3, [r3, #0]
 802289c:	4618      	mov	r0, r3
 802289e:	f7ef fa0f 	bl	8011cc0 <osSemaphoreRelease>
}
 80228a2:	bf00      	nop
 80228a4:	3708      	adds	r7, #8
 80228a6:	46bd      	mov	sp, r7
 80228a8:	bd80      	pop	{r7, pc}

080228aa <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80228aa:	b580      	push	{r7, lr}
 80228ac:	b082      	sub	sp, #8
 80228ae:	af00      	add	r7, sp, #0
 80228b0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80228b2:	687b      	ldr	r3, [r7, #4]
 80228b4:	681b      	ldr	r3, [r3, #0]
 80228b6:	4618      	mov	r0, r3
 80228b8:	f7ef fa38 	bl	8011d2c <osSemaphoreDelete>
}
 80228bc:	bf00      	nop
 80228be:	3708      	adds	r7, #8
 80228c0:	46bd      	mov	sp, r7
 80228c2:	bd80      	pop	{r7, pc}

080228c4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80228c4:	b480      	push	{r7}
 80228c6:	b083      	sub	sp, #12
 80228c8:	af00      	add	r7, sp, #0
 80228ca:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80228cc:	687b      	ldr	r3, [r7, #4]
 80228ce:	681b      	ldr	r3, [r3, #0]
 80228d0:	2b00      	cmp	r3, #0
 80228d2:	d101      	bne.n	80228d8 <sys_sem_valid+0x14>
    return 0;
 80228d4:	2300      	movs	r3, #0
 80228d6:	e000      	b.n	80228da <sys_sem_valid+0x16>
  else
    return 1;
 80228d8:	2301      	movs	r3, #1
}
 80228da:	4618      	mov	r0, r3
 80228dc:	370c      	adds	r7, #12
 80228de:	46bd      	mov	sp, r7
 80228e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228e4:	4770      	bx	lr

080228e6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80228e6:	b480      	push	{r7}
 80228e8:	b083      	sub	sp, #12
 80228ea:	af00      	add	r7, sp, #0
 80228ec:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80228ee:	687b      	ldr	r3, [r7, #4]
 80228f0:	2200      	movs	r2, #0
 80228f2:	601a      	str	r2, [r3, #0]
}
 80228f4:	bf00      	nop
 80228f6:	370c      	adds	r7, #12
 80228f8:	46bd      	mov	sp, r7
 80228fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228fe:	4770      	bx	lr

08022900 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8022900:	b580      	push	{r7, lr}
 8022902:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8022904:	4803      	ldr	r0, [pc, #12]	; (8022914 <sys_init+0x14>)
 8022906:	f7ef f8bf 	bl	8011a88 <osMutexCreate>
 802290a:	4603      	mov	r3, r0
 802290c:	4a02      	ldr	r2, [pc, #8]	; (8022918 <sys_init+0x18>)
 802290e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8022910:	bf00      	nop
 8022912:	bd80      	pop	{r7, pc}
 8022914:	08028b0c 	.word	0x08028b0c
 8022918:	2000c108 	.word	0x2000c108

0802291c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 802291c:	b580      	push	{r7, lr}
 802291e:	b084      	sub	sp, #16
 8022920:	af00      	add	r7, sp, #0
 8022922:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8022924:	2300      	movs	r3, #0
 8022926:	60bb      	str	r3, [r7, #8]
 8022928:	2300      	movs	r3, #0
 802292a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 802292c:	f107 0308 	add.w	r3, r7, #8
 8022930:	4618      	mov	r0, r3
 8022932:	f7ef f8a9 	bl	8011a88 <osMutexCreate>
 8022936:	4602      	mov	r2, r0
 8022938:	687b      	ldr	r3, [r7, #4]
 802293a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 802293c:	687b      	ldr	r3, [r7, #4]
 802293e:	681b      	ldr	r3, [r3, #0]
 8022940:	2b00      	cmp	r3, #0
 8022942:	d102      	bne.n	802294a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8022944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022948:	e000      	b.n	802294c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 802294a:	2300      	movs	r3, #0
}
 802294c:	4618      	mov	r0, r3
 802294e:	3710      	adds	r7, #16
 8022950:	46bd      	mov	sp, r7
 8022952:	bd80      	pop	{r7, pc}

08022954 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8022954:	b580      	push	{r7, lr}
 8022956:	b082      	sub	sp, #8
 8022958:	af00      	add	r7, sp, #0
 802295a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	681b      	ldr	r3, [r3, #0]
 8022960:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022964:	4618      	mov	r0, r3
 8022966:	f7ef f8a7 	bl	8011ab8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 802296a:	bf00      	nop
 802296c:	3708      	adds	r7, #8
 802296e:	46bd      	mov	sp, r7
 8022970:	bd80      	pop	{r7, pc}

08022972 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8022972:	b580      	push	{r7, lr}
 8022974:	b082      	sub	sp, #8
 8022976:	af00      	add	r7, sp, #0
 8022978:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 802297a:	687b      	ldr	r3, [r7, #4]
 802297c:	681b      	ldr	r3, [r3, #0]
 802297e:	4618      	mov	r0, r3
 8022980:	f7ef f8e8 	bl	8011b54 <osMutexRelease>
}
 8022984:	bf00      	nop
 8022986:	3708      	adds	r7, #8
 8022988:	46bd      	mov	sp, r7
 802298a:	bd80      	pop	{r7, pc}

0802298c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 802298c:	b580      	push	{r7, lr}
 802298e:	b08c      	sub	sp, #48	; 0x30
 8022990:	af00      	add	r7, sp, #0
 8022992:	60f8      	str	r0, [r7, #12]
 8022994:	60b9      	str	r1, [r7, #8]
 8022996:	607a      	str	r2, [r7, #4]
 8022998:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 802299a:	f107 0314 	add.w	r3, r7, #20
 802299e:	2200      	movs	r2, #0
 80229a0:	601a      	str	r2, [r3, #0]
 80229a2:	605a      	str	r2, [r3, #4]
 80229a4:	609a      	str	r2, [r3, #8]
 80229a6:	60da      	str	r2, [r3, #12]
 80229a8:	611a      	str	r2, [r3, #16]
 80229aa:	615a      	str	r2, [r3, #20]
 80229ac:	619a      	str	r2, [r3, #24]
 80229ae:	68fb      	ldr	r3, [r7, #12]
 80229b0:	617b      	str	r3, [r7, #20]
 80229b2:	68bb      	ldr	r3, [r7, #8]
 80229b4:	61bb      	str	r3, [r7, #24]
 80229b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80229b8:	b21b      	sxth	r3, r3
 80229ba:	83bb      	strh	r3, [r7, #28]
 80229bc:	683b      	ldr	r3, [r7, #0]
 80229be:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80229c0:	f107 0314 	add.w	r3, r7, #20
 80229c4:	6879      	ldr	r1, [r7, #4]
 80229c6:	4618      	mov	r0, r3
 80229c8:	f7ee fffe 	bl	80119c8 <osThreadCreate>
 80229cc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80229ce:	4618      	mov	r0, r3
 80229d0:	3730      	adds	r7, #48	; 0x30
 80229d2:	46bd      	mov	sp, r7
 80229d4:	bd80      	pop	{r7, pc}
	...

080229d8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80229d8:	b580      	push	{r7, lr}
 80229da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80229dc:	4b04      	ldr	r3, [pc, #16]	; (80229f0 <sys_arch_protect+0x18>)
 80229de:	681b      	ldr	r3, [r3, #0]
 80229e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80229e4:	4618      	mov	r0, r3
 80229e6:	f7ef f867 	bl	8011ab8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80229ea:	2301      	movs	r3, #1
}
 80229ec:	4618      	mov	r0, r3
 80229ee:	bd80      	pop	{r7, pc}
 80229f0:	2000c108 	.word	0x2000c108

080229f4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80229f4:	b580      	push	{r7, lr}
 80229f6:	b082      	sub	sp, #8
 80229f8:	af00      	add	r7, sp, #0
 80229fa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80229fc:	4b04      	ldr	r3, [pc, #16]	; (8022a10 <sys_arch_unprotect+0x1c>)
 80229fe:	681b      	ldr	r3, [r3, #0]
 8022a00:	4618      	mov	r0, r3
 8022a02:	f7ef f8a7 	bl	8011b54 <osMutexRelease>
}
 8022a06:	bf00      	nop
 8022a08:	3708      	adds	r7, #8
 8022a0a:	46bd      	mov	sp, r7
 8022a0c:	bd80      	pop	{r7, pc}
 8022a0e:	bf00      	nop
 8022a10:	2000c108 	.word	0x2000c108

08022a14 <_ZdlPvj>:
 8022a14:	f000 b8db 	b.w	8022bce <_ZdlPv>

08022a18 <__cxa_guard_acquire>:
 8022a18:	6803      	ldr	r3, [r0, #0]
 8022a1a:	07db      	lsls	r3, r3, #31
 8022a1c:	d406      	bmi.n	8022a2c <__cxa_guard_acquire+0x14>
 8022a1e:	7843      	ldrb	r3, [r0, #1]
 8022a20:	b103      	cbz	r3, 8022a24 <__cxa_guard_acquire+0xc>
 8022a22:	deff      	udf	#255	; 0xff
 8022a24:	2301      	movs	r3, #1
 8022a26:	7043      	strb	r3, [r0, #1]
 8022a28:	4618      	mov	r0, r3
 8022a2a:	4770      	bx	lr
 8022a2c:	2000      	movs	r0, #0
 8022a2e:	4770      	bx	lr

08022a30 <__cxa_guard_release>:
 8022a30:	2301      	movs	r3, #1
 8022a32:	6003      	str	r3, [r0, #0]
 8022a34:	4770      	bx	lr

08022a36 <_Znwj>:
 8022a36:	2801      	cmp	r0, #1
 8022a38:	bf38      	it	cc
 8022a3a:	2001      	movcc	r0, #1
 8022a3c:	b510      	push	{r4, lr}
 8022a3e:	4604      	mov	r4, r0
 8022a40:	4620      	mov	r0, r4
 8022a42:	f001 f92d 	bl	8023ca0 <malloc>
 8022a46:	b930      	cbnz	r0, 8022a56 <_Znwj+0x20>
 8022a48:	f000 f8d6 	bl	8022bf8 <_ZSt15get_new_handlerv>
 8022a4c:	b908      	cbnz	r0, 8022a52 <_Znwj+0x1c>
 8022a4e:	f000 fff5 	bl	8023a3c <abort>
 8022a52:	4780      	blx	r0
 8022a54:	e7f4      	b.n	8022a40 <_Znwj+0xa>
 8022a56:	bd10      	pop	{r4, pc}

08022a58 <__cxa_pure_virtual>:
 8022a58:	b508      	push	{r3, lr}
 8022a5a:	f000 f8c7 	bl	8022bec <_ZSt9terminatev>

08022a5e <_ZSt17__throw_bad_allocv>:
 8022a5e:	b508      	push	{r3, lr}
 8022a60:	f000 ffec 	bl	8023a3c <abort>

08022a64 <_ZSt19__throw_logic_errorPKc>:
 8022a64:	b508      	push	{r3, lr}
 8022a66:	f000 ffe9 	bl	8023a3c <abort>

08022a6a <_ZSt20__throw_length_errorPKc>:
 8022a6a:	b508      	push	{r3, lr}
 8022a6c:	f000 ffe6 	bl	8023a3c <abort>

08022a70 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8022a70:	b40f      	push	{r0, r1, r2, r3}
 8022a72:	b580      	push	{r7, lr}
 8022a74:	b084      	sub	sp, #16
 8022a76:	af00      	add	r7, sp, #0
 8022a78:	f107 0418 	add.w	r4, r7, #24
 8022a7c:	f854 2b04 	ldr.w	r2, [r4], #4
 8022a80:	607a      	str	r2, [r7, #4]
 8022a82:	4610      	mov	r0, r2
 8022a84:	f7dd fbc4 	bl	8000210 <strlen>
 8022a88:	f200 2307 	addw	r3, r0, #519	; 0x207
 8022a8c:	f023 0307 	bic.w	r3, r3, #7
 8022a90:	ebad 0d03 	sub.w	sp, sp, r3
 8022a94:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8022a98:	687a      	ldr	r2, [r7, #4]
 8022a9a:	60fc      	str	r4, [r7, #12]
 8022a9c:	4623      	mov	r3, r4
 8022a9e:	4668      	mov	r0, sp
 8022aa0:	f000 f854 	bl	8022b4c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8022aa4:	f000 ffca 	bl	8023a3c <abort>

08022aa8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8022aa8:	b580      	push	{r7, lr}
 8022aaa:	b09c      	sub	sp, #112	; 0x70
 8022aac:	4606      	mov	r6, r0
 8022aae:	af00      	add	r7, sp, #0
 8022ab0:	460c      	mov	r4, r1
 8022ab2:	1ba4      	subs	r4, r4, r6
 8022ab4:	490e      	ldr	r1, [pc, #56]	; (8022af0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8022ab6:	2269      	movs	r2, #105	; 0x69
 8022ab8:	1d38      	adds	r0, r7, #4
 8022aba:	f001 f911 	bl	8023ce0 <memcpy>
 8022abe:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8022ac2:	f023 0307 	bic.w	r3, r3, #7
 8022ac6:	ebad 0d03 	sub.w	sp, sp, r3
 8022aca:	466d      	mov	r5, sp
 8022acc:	2268      	movs	r2, #104	; 0x68
 8022ace:	1d39      	adds	r1, r7, #4
 8022ad0:	4628      	mov	r0, r5
 8022ad2:	f001 f905 	bl	8023ce0 <memcpy>
 8022ad6:	4622      	mov	r2, r4
 8022ad8:	4631      	mov	r1, r6
 8022ada:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8022ade:	442c      	add	r4, r5
 8022ae0:	f001 f8fe 	bl	8023ce0 <memcpy>
 8022ae4:	2300      	movs	r3, #0
 8022ae6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8022aea:	4628      	mov	r0, r5
 8022aec:	f7ff ffba 	bl	8022a64 <_ZSt19__throw_logic_errorPKc>
 8022af0:	08028b14 	.word	0x08028b14

08022af4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8022af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022af8:	af00      	add	r7, sp, #0
 8022afa:	b084      	sub	sp, #16
 8022afc:	466d      	mov	r5, sp
 8022afe:	f105 040c 	add.w	r4, r5, #12
 8022b02:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8022b48 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8022b06:	4623      	mov	r3, r4
 8022b08:	f04f 0c0a 	mov.w	ip, #10
 8022b0c:	fbb2 f6fc 	udiv	r6, r2, ip
 8022b10:	fb0c 2e16 	mls	lr, ip, r6, r2
 8022b14:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8022b18:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8022b1c:	4696      	mov	lr, r2
 8022b1e:	f1be 0f09 	cmp.w	lr, #9
 8022b22:	4632      	mov	r2, r6
 8022b24:	d8f2      	bhi.n	8022b0c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8022b26:	1ae4      	subs	r4, r4, r3
 8022b28:	428c      	cmp	r4, r1
 8022b2a:	d809      	bhi.n	8022b40 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8022b2c:	f1c4 030c 	rsb	r3, r4, #12
 8022b30:	4622      	mov	r2, r4
 8022b32:	18e9      	adds	r1, r5, r3
 8022b34:	f001 f8d4 	bl	8023ce0 <memcpy>
 8022b38:	4620      	mov	r0, r4
 8022b3a:	46bd      	mov	sp, r7
 8022b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022b40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8022b44:	e7f8      	b.n	8022b38 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8022b46:	bf00      	nop
 8022b48:	08028b7d 	.word	0x08028b7d

08022b4c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8022b4c:	3901      	subs	r1, #1
 8022b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022b52:	4607      	mov	r7, r0
 8022b54:	4615      	mov	r5, r2
 8022b56:	eb00 0801 	add.w	r8, r0, r1
 8022b5a:	4604      	mov	r4, r0
 8022b5c:	782a      	ldrb	r2, [r5, #0]
 8022b5e:	b392      	cbz	r2, 8022bc6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8022b60:	4544      	cmp	r4, r8
 8022b62:	d22a      	bcs.n	8022bba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8022b64:	2a25      	cmp	r2, #37	; 0x25
 8022b66:	d107      	bne.n	8022b78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8022b68:	786a      	ldrb	r2, [r5, #1]
 8022b6a:	2a73      	cmp	r2, #115	; 0x73
 8022b6c:	d009      	beq.n	8022b82 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8022b6e:	2a7a      	cmp	r2, #122	; 0x7a
 8022b70:	d012      	beq.n	8022b98 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8022b72:	2a25      	cmp	r2, #37	; 0x25
 8022b74:	d100      	bne.n	8022b78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8022b76:	3501      	adds	r5, #1
 8022b78:	f815 2b01 	ldrb.w	r2, [r5], #1
 8022b7c:	f804 2b01 	strb.w	r2, [r4], #1
 8022b80:	e7ec      	b.n	8022b5c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8022b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8022b86:	3a01      	subs	r2, #1
 8022b88:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8022b8c:	b1c9      	cbz	r1, 8022bc2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8022b8e:	4544      	cmp	r4, r8
 8022b90:	d013      	beq.n	8022bba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8022b92:	f804 1b01 	strb.w	r1, [r4], #1
 8022b96:	e7f7      	b.n	8022b88 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8022b98:	78aa      	ldrb	r2, [r5, #2]
 8022b9a:	2a75      	cmp	r2, #117	; 0x75
 8022b9c:	d1ec      	bne.n	8022b78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8022b9e:	461e      	mov	r6, r3
 8022ba0:	eba8 0104 	sub.w	r1, r8, r4
 8022ba4:	f856 2b04 	ldr.w	r2, [r6], #4
 8022ba8:	4620      	mov	r0, r4
 8022baa:	f7ff ffa3 	bl	8022af4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8022bae:	2800      	cmp	r0, #0
 8022bb0:	dd03      	ble.n	8022bba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8022bb2:	4404      	add	r4, r0
 8022bb4:	3503      	adds	r5, #3
 8022bb6:	4633      	mov	r3, r6
 8022bb8:	e7d0      	b.n	8022b5c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8022bba:	4621      	mov	r1, r4
 8022bbc:	4638      	mov	r0, r7
 8022bbe:	f7ff ff73 	bl	8022aa8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8022bc2:	3502      	adds	r5, #2
 8022bc4:	e7ca      	b.n	8022b5c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8022bc6:	7022      	strb	r2, [r4, #0]
 8022bc8:	1be0      	subs	r0, r4, r7
 8022bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08022bce <_ZdlPv>:
 8022bce:	f001 b86f 	b.w	8023cb0 <free>

08022bd2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8022bd2:	b508      	push	{r3, lr}
 8022bd4:	4780      	blx	r0
 8022bd6:	f000 ff31 	bl	8023a3c <abort>
	...

08022bdc <_ZSt13get_terminatev>:
 8022bdc:	4b02      	ldr	r3, [pc, #8]	; (8022be8 <_ZSt13get_terminatev+0xc>)
 8022bde:	6818      	ldr	r0, [r3, #0]
 8022be0:	f3bf 8f5b 	dmb	ish
 8022be4:	4770      	bx	lr
 8022be6:	bf00      	nop
 8022be8:	2000003c 	.word	0x2000003c

08022bec <_ZSt9terminatev>:
 8022bec:	b508      	push	{r3, lr}
 8022bee:	f7ff fff5 	bl	8022bdc <_ZSt13get_terminatev>
 8022bf2:	f7ff ffee 	bl	8022bd2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08022bf8 <_ZSt15get_new_handlerv>:
 8022bf8:	4b02      	ldr	r3, [pc, #8]	; (8022c04 <_ZSt15get_new_handlerv+0xc>)
 8022bfa:	6818      	ldr	r0, [r3, #0]
 8022bfc:	f3bf 8f5b 	dmb	ish
 8022c00:	4770      	bx	lr
 8022c02:	bf00      	nop
 8022c04:	2000c10c 	.word	0x2000c10c

08022c08 <pow>:
 8022c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c0a:	ed2d 8b02 	vpush	{d8}
 8022c0e:	eeb0 8a40 	vmov.f32	s16, s0
 8022c12:	eef0 8a60 	vmov.f32	s17, s1
 8022c16:	ec55 4b11 	vmov	r4, r5, d1
 8022c1a:	f000 f865 	bl	8022ce8 <__ieee754_pow>
 8022c1e:	4622      	mov	r2, r4
 8022c20:	462b      	mov	r3, r5
 8022c22:	4620      	mov	r0, r4
 8022c24:	4629      	mov	r1, r5
 8022c26:	ec57 6b10 	vmov	r6, r7, d0
 8022c2a:	f7dd ff9f 	bl	8000b6c <__aeabi_dcmpun>
 8022c2e:	2800      	cmp	r0, #0
 8022c30:	d13b      	bne.n	8022caa <pow+0xa2>
 8022c32:	ec51 0b18 	vmov	r0, r1, d8
 8022c36:	2200      	movs	r2, #0
 8022c38:	2300      	movs	r3, #0
 8022c3a:	f7dd ff65 	bl	8000b08 <__aeabi_dcmpeq>
 8022c3e:	b1b8      	cbz	r0, 8022c70 <pow+0x68>
 8022c40:	2200      	movs	r2, #0
 8022c42:	2300      	movs	r3, #0
 8022c44:	4620      	mov	r0, r4
 8022c46:	4629      	mov	r1, r5
 8022c48:	f7dd ff5e 	bl	8000b08 <__aeabi_dcmpeq>
 8022c4c:	2800      	cmp	r0, #0
 8022c4e:	d146      	bne.n	8022cde <pow+0xd6>
 8022c50:	ec45 4b10 	vmov	d0, r4, r5
 8022c54:	f000 fe61 	bl	802391a <finite>
 8022c58:	b338      	cbz	r0, 8022caa <pow+0xa2>
 8022c5a:	2200      	movs	r2, #0
 8022c5c:	2300      	movs	r3, #0
 8022c5e:	4620      	mov	r0, r4
 8022c60:	4629      	mov	r1, r5
 8022c62:	f7dd ff5b 	bl	8000b1c <__aeabi_dcmplt>
 8022c66:	b300      	cbz	r0, 8022caa <pow+0xa2>
 8022c68:	f000 fef6 	bl	8023a58 <__errno>
 8022c6c:	2322      	movs	r3, #34	; 0x22
 8022c6e:	e01b      	b.n	8022ca8 <pow+0xa0>
 8022c70:	ec47 6b10 	vmov	d0, r6, r7
 8022c74:	f000 fe51 	bl	802391a <finite>
 8022c78:	b9e0      	cbnz	r0, 8022cb4 <pow+0xac>
 8022c7a:	eeb0 0a48 	vmov.f32	s0, s16
 8022c7e:	eef0 0a68 	vmov.f32	s1, s17
 8022c82:	f000 fe4a 	bl	802391a <finite>
 8022c86:	b1a8      	cbz	r0, 8022cb4 <pow+0xac>
 8022c88:	ec45 4b10 	vmov	d0, r4, r5
 8022c8c:	f000 fe45 	bl	802391a <finite>
 8022c90:	b180      	cbz	r0, 8022cb4 <pow+0xac>
 8022c92:	4632      	mov	r2, r6
 8022c94:	463b      	mov	r3, r7
 8022c96:	4630      	mov	r0, r6
 8022c98:	4639      	mov	r1, r7
 8022c9a:	f7dd ff67 	bl	8000b6c <__aeabi_dcmpun>
 8022c9e:	2800      	cmp	r0, #0
 8022ca0:	d0e2      	beq.n	8022c68 <pow+0x60>
 8022ca2:	f000 fed9 	bl	8023a58 <__errno>
 8022ca6:	2321      	movs	r3, #33	; 0x21
 8022ca8:	6003      	str	r3, [r0, #0]
 8022caa:	ecbd 8b02 	vpop	{d8}
 8022cae:	ec47 6b10 	vmov	d0, r6, r7
 8022cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022cb4:	2200      	movs	r2, #0
 8022cb6:	2300      	movs	r3, #0
 8022cb8:	4630      	mov	r0, r6
 8022cba:	4639      	mov	r1, r7
 8022cbc:	f7dd ff24 	bl	8000b08 <__aeabi_dcmpeq>
 8022cc0:	2800      	cmp	r0, #0
 8022cc2:	d0f2      	beq.n	8022caa <pow+0xa2>
 8022cc4:	eeb0 0a48 	vmov.f32	s0, s16
 8022cc8:	eef0 0a68 	vmov.f32	s1, s17
 8022ccc:	f000 fe25 	bl	802391a <finite>
 8022cd0:	2800      	cmp	r0, #0
 8022cd2:	d0ea      	beq.n	8022caa <pow+0xa2>
 8022cd4:	ec45 4b10 	vmov	d0, r4, r5
 8022cd8:	f000 fe1f 	bl	802391a <finite>
 8022cdc:	e7c3      	b.n	8022c66 <pow+0x5e>
 8022cde:	4f01      	ldr	r7, [pc, #4]	; (8022ce4 <pow+0xdc>)
 8022ce0:	2600      	movs	r6, #0
 8022ce2:	e7e2      	b.n	8022caa <pow+0xa2>
 8022ce4:	3ff00000 	.word	0x3ff00000

08022ce8 <__ieee754_pow>:
 8022ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cec:	ed2d 8b06 	vpush	{d8-d10}
 8022cf0:	b089      	sub	sp, #36	; 0x24
 8022cf2:	ed8d 1b00 	vstr	d1, [sp]
 8022cf6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8022cfa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8022cfe:	ea58 0102 	orrs.w	r1, r8, r2
 8022d02:	ec57 6b10 	vmov	r6, r7, d0
 8022d06:	d115      	bne.n	8022d34 <__ieee754_pow+0x4c>
 8022d08:	19b3      	adds	r3, r6, r6
 8022d0a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8022d0e:	4152      	adcs	r2, r2
 8022d10:	4299      	cmp	r1, r3
 8022d12:	4b89      	ldr	r3, [pc, #548]	; (8022f38 <__ieee754_pow+0x250>)
 8022d14:	4193      	sbcs	r3, r2
 8022d16:	f080 84d2 	bcs.w	80236be <__ieee754_pow+0x9d6>
 8022d1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022d1e:	4630      	mov	r0, r6
 8022d20:	4639      	mov	r1, r7
 8022d22:	f7dd fad3 	bl	80002cc <__adddf3>
 8022d26:	ec41 0b10 	vmov	d0, r0, r1
 8022d2a:	b009      	add	sp, #36	; 0x24
 8022d2c:	ecbd 8b06 	vpop	{d8-d10}
 8022d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d34:	4b81      	ldr	r3, [pc, #516]	; (8022f3c <__ieee754_pow+0x254>)
 8022d36:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8022d3a:	429c      	cmp	r4, r3
 8022d3c:	ee10 aa10 	vmov	sl, s0
 8022d40:	463d      	mov	r5, r7
 8022d42:	dc06      	bgt.n	8022d52 <__ieee754_pow+0x6a>
 8022d44:	d101      	bne.n	8022d4a <__ieee754_pow+0x62>
 8022d46:	2e00      	cmp	r6, #0
 8022d48:	d1e7      	bne.n	8022d1a <__ieee754_pow+0x32>
 8022d4a:	4598      	cmp	r8, r3
 8022d4c:	dc01      	bgt.n	8022d52 <__ieee754_pow+0x6a>
 8022d4e:	d10f      	bne.n	8022d70 <__ieee754_pow+0x88>
 8022d50:	b172      	cbz	r2, 8022d70 <__ieee754_pow+0x88>
 8022d52:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8022d56:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8022d5a:	ea55 050a 	orrs.w	r5, r5, sl
 8022d5e:	d1dc      	bne.n	8022d1a <__ieee754_pow+0x32>
 8022d60:	e9dd 3200 	ldrd	r3, r2, [sp]
 8022d64:	18db      	adds	r3, r3, r3
 8022d66:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8022d6a:	4152      	adcs	r2, r2
 8022d6c:	429d      	cmp	r5, r3
 8022d6e:	e7d0      	b.n	8022d12 <__ieee754_pow+0x2a>
 8022d70:	2d00      	cmp	r5, #0
 8022d72:	da3b      	bge.n	8022dec <__ieee754_pow+0x104>
 8022d74:	4b72      	ldr	r3, [pc, #456]	; (8022f40 <__ieee754_pow+0x258>)
 8022d76:	4598      	cmp	r8, r3
 8022d78:	dc51      	bgt.n	8022e1e <__ieee754_pow+0x136>
 8022d7a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8022d7e:	4598      	cmp	r8, r3
 8022d80:	f340 84ac 	ble.w	80236dc <__ieee754_pow+0x9f4>
 8022d84:	ea4f 5328 	mov.w	r3, r8, asr #20
 8022d88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8022d8c:	2b14      	cmp	r3, #20
 8022d8e:	dd0f      	ble.n	8022db0 <__ieee754_pow+0xc8>
 8022d90:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8022d94:	fa22 f103 	lsr.w	r1, r2, r3
 8022d98:	fa01 f303 	lsl.w	r3, r1, r3
 8022d9c:	4293      	cmp	r3, r2
 8022d9e:	f040 849d 	bne.w	80236dc <__ieee754_pow+0x9f4>
 8022da2:	f001 0101 	and.w	r1, r1, #1
 8022da6:	f1c1 0302 	rsb	r3, r1, #2
 8022daa:	9304      	str	r3, [sp, #16]
 8022dac:	b182      	cbz	r2, 8022dd0 <__ieee754_pow+0xe8>
 8022dae:	e05f      	b.n	8022e70 <__ieee754_pow+0x188>
 8022db0:	2a00      	cmp	r2, #0
 8022db2:	d15b      	bne.n	8022e6c <__ieee754_pow+0x184>
 8022db4:	f1c3 0314 	rsb	r3, r3, #20
 8022db8:	fa48 f103 	asr.w	r1, r8, r3
 8022dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8022dc0:	4543      	cmp	r3, r8
 8022dc2:	f040 8488 	bne.w	80236d6 <__ieee754_pow+0x9ee>
 8022dc6:	f001 0101 	and.w	r1, r1, #1
 8022dca:	f1c1 0302 	rsb	r3, r1, #2
 8022dce:	9304      	str	r3, [sp, #16]
 8022dd0:	4b5c      	ldr	r3, [pc, #368]	; (8022f44 <__ieee754_pow+0x25c>)
 8022dd2:	4598      	cmp	r8, r3
 8022dd4:	d132      	bne.n	8022e3c <__ieee754_pow+0x154>
 8022dd6:	f1b9 0f00 	cmp.w	r9, #0
 8022dda:	f280 8478 	bge.w	80236ce <__ieee754_pow+0x9e6>
 8022dde:	4959      	ldr	r1, [pc, #356]	; (8022f44 <__ieee754_pow+0x25c>)
 8022de0:	4632      	mov	r2, r6
 8022de2:	463b      	mov	r3, r7
 8022de4:	2000      	movs	r0, #0
 8022de6:	f7dd fd51 	bl	800088c <__aeabi_ddiv>
 8022dea:	e79c      	b.n	8022d26 <__ieee754_pow+0x3e>
 8022dec:	2300      	movs	r3, #0
 8022dee:	9304      	str	r3, [sp, #16]
 8022df0:	2a00      	cmp	r2, #0
 8022df2:	d13d      	bne.n	8022e70 <__ieee754_pow+0x188>
 8022df4:	4b51      	ldr	r3, [pc, #324]	; (8022f3c <__ieee754_pow+0x254>)
 8022df6:	4598      	cmp	r8, r3
 8022df8:	d1ea      	bne.n	8022dd0 <__ieee754_pow+0xe8>
 8022dfa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8022dfe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8022e02:	ea53 030a 	orrs.w	r3, r3, sl
 8022e06:	f000 845a 	beq.w	80236be <__ieee754_pow+0x9d6>
 8022e0a:	4b4f      	ldr	r3, [pc, #316]	; (8022f48 <__ieee754_pow+0x260>)
 8022e0c:	429c      	cmp	r4, r3
 8022e0e:	dd08      	ble.n	8022e22 <__ieee754_pow+0x13a>
 8022e10:	f1b9 0f00 	cmp.w	r9, #0
 8022e14:	f2c0 8457 	blt.w	80236c6 <__ieee754_pow+0x9de>
 8022e18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022e1c:	e783      	b.n	8022d26 <__ieee754_pow+0x3e>
 8022e1e:	2302      	movs	r3, #2
 8022e20:	e7e5      	b.n	8022dee <__ieee754_pow+0x106>
 8022e22:	f1b9 0f00 	cmp.w	r9, #0
 8022e26:	f04f 0000 	mov.w	r0, #0
 8022e2a:	f04f 0100 	mov.w	r1, #0
 8022e2e:	f6bf af7a 	bge.w	8022d26 <__ieee754_pow+0x3e>
 8022e32:	e9dd 0300 	ldrd	r0, r3, [sp]
 8022e36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022e3a:	e774      	b.n	8022d26 <__ieee754_pow+0x3e>
 8022e3c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8022e40:	d106      	bne.n	8022e50 <__ieee754_pow+0x168>
 8022e42:	4632      	mov	r2, r6
 8022e44:	463b      	mov	r3, r7
 8022e46:	4630      	mov	r0, r6
 8022e48:	4639      	mov	r1, r7
 8022e4a:	f7dd fbf5 	bl	8000638 <__aeabi_dmul>
 8022e4e:	e76a      	b.n	8022d26 <__ieee754_pow+0x3e>
 8022e50:	4b3e      	ldr	r3, [pc, #248]	; (8022f4c <__ieee754_pow+0x264>)
 8022e52:	4599      	cmp	r9, r3
 8022e54:	d10c      	bne.n	8022e70 <__ieee754_pow+0x188>
 8022e56:	2d00      	cmp	r5, #0
 8022e58:	db0a      	blt.n	8022e70 <__ieee754_pow+0x188>
 8022e5a:	ec47 6b10 	vmov	d0, r6, r7
 8022e5e:	b009      	add	sp, #36	; 0x24
 8022e60:	ecbd 8b06 	vpop	{d8-d10}
 8022e64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e68:	f000 bc6c 	b.w	8023744 <__ieee754_sqrt>
 8022e6c:	2300      	movs	r3, #0
 8022e6e:	9304      	str	r3, [sp, #16]
 8022e70:	ec47 6b10 	vmov	d0, r6, r7
 8022e74:	f000 fd48 	bl	8023908 <fabs>
 8022e78:	ec51 0b10 	vmov	r0, r1, d0
 8022e7c:	f1ba 0f00 	cmp.w	sl, #0
 8022e80:	d129      	bne.n	8022ed6 <__ieee754_pow+0x1ee>
 8022e82:	b124      	cbz	r4, 8022e8e <__ieee754_pow+0x1a6>
 8022e84:	4b2f      	ldr	r3, [pc, #188]	; (8022f44 <__ieee754_pow+0x25c>)
 8022e86:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8022e8a:	429a      	cmp	r2, r3
 8022e8c:	d123      	bne.n	8022ed6 <__ieee754_pow+0x1ee>
 8022e8e:	f1b9 0f00 	cmp.w	r9, #0
 8022e92:	da05      	bge.n	8022ea0 <__ieee754_pow+0x1b8>
 8022e94:	4602      	mov	r2, r0
 8022e96:	460b      	mov	r3, r1
 8022e98:	2000      	movs	r0, #0
 8022e9a:	492a      	ldr	r1, [pc, #168]	; (8022f44 <__ieee754_pow+0x25c>)
 8022e9c:	f7dd fcf6 	bl	800088c <__aeabi_ddiv>
 8022ea0:	2d00      	cmp	r5, #0
 8022ea2:	f6bf af40 	bge.w	8022d26 <__ieee754_pow+0x3e>
 8022ea6:	9b04      	ldr	r3, [sp, #16]
 8022ea8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8022eac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8022eb0:	4323      	orrs	r3, r4
 8022eb2:	d108      	bne.n	8022ec6 <__ieee754_pow+0x1de>
 8022eb4:	4602      	mov	r2, r0
 8022eb6:	460b      	mov	r3, r1
 8022eb8:	4610      	mov	r0, r2
 8022eba:	4619      	mov	r1, r3
 8022ebc:	f7dd fa04 	bl	80002c8 <__aeabi_dsub>
 8022ec0:	4602      	mov	r2, r0
 8022ec2:	460b      	mov	r3, r1
 8022ec4:	e78f      	b.n	8022de6 <__ieee754_pow+0xfe>
 8022ec6:	9b04      	ldr	r3, [sp, #16]
 8022ec8:	2b01      	cmp	r3, #1
 8022eca:	f47f af2c 	bne.w	8022d26 <__ieee754_pow+0x3e>
 8022ece:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022ed2:	4619      	mov	r1, r3
 8022ed4:	e727      	b.n	8022d26 <__ieee754_pow+0x3e>
 8022ed6:	0feb      	lsrs	r3, r5, #31
 8022ed8:	3b01      	subs	r3, #1
 8022eda:	9306      	str	r3, [sp, #24]
 8022edc:	9a06      	ldr	r2, [sp, #24]
 8022ede:	9b04      	ldr	r3, [sp, #16]
 8022ee0:	4313      	orrs	r3, r2
 8022ee2:	d102      	bne.n	8022eea <__ieee754_pow+0x202>
 8022ee4:	4632      	mov	r2, r6
 8022ee6:	463b      	mov	r3, r7
 8022ee8:	e7e6      	b.n	8022eb8 <__ieee754_pow+0x1d0>
 8022eea:	4b19      	ldr	r3, [pc, #100]	; (8022f50 <__ieee754_pow+0x268>)
 8022eec:	4598      	cmp	r8, r3
 8022eee:	f340 80fb 	ble.w	80230e8 <__ieee754_pow+0x400>
 8022ef2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8022ef6:	4598      	cmp	r8, r3
 8022ef8:	4b13      	ldr	r3, [pc, #76]	; (8022f48 <__ieee754_pow+0x260>)
 8022efa:	dd0c      	ble.n	8022f16 <__ieee754_pow+0x22e>
 8022efc:	429c      	cmp	r4, r3
 8022efe:	dc0f      	bgt.n	8022f20 <__ieee754_pow+0x238>
 8022f00:	f1b9 0f00 	cmp.w	r9, #0
 8022f04:	da0f      	bge.n	8022f26 <__ieee754_pow+0x23e>
 8022f06:	2000      	movs	r0, #0
 8022f08:	b009      	add	sp, #36	; 0x24
 8022f0a:	ecbd 8b06 	vpop	{d8-d10}
 8022f0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f12:	f000 bcf0 	b.w	80238f6 <__math_oflow>
 8022f16:	429c      	cmp	r4, r3
 8022f18:	dbf2      	blt.n	8022f00 <__ieee754_pow+0x218>
 8022f1a:	4b0a      	ldr	r3, [pc, #40]	; (8022f44 <__ieee754_pow+0x25c>)
 8022f1c:	429c      	cmp	r4, r3
 8022f1e:	dd19      	ble.n	8022f54 <__ieee754_pow+0x26c>
 8022f20:	f1b9 0f00 	cmp.w	r9, #0
 8022f24:	dcef      	bgt.n	8022f06 <__ieee754_pow+0x21e>
 8022f26:	2000      	movs	r0, #0
 8022f28:	b009      	add	sp, #36	; 0x24
 8022f2a:	ecbd 8b06 	vpop	{d8-d10}
 8022f2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f32:	f000 bcd7 	b.w	80238e4 <__math_uflow>
 8022f36:	bf00      	nop
 8022f38:	fff00000 	.word	0xfff00000
 8022f3c:	7ff00000 	.word	0x7ff00000
 8022f40:	433fffff 	.word	0x433fffff
 8022f44:	3ff00000 	.word	0x3ff00000
 8022f48:	3fefffff 	.word	0x3fefffff
 8022f4c:	3fe00000 	.word	0x3fe00000
 8022f50:	41e00000 	.word	0x41e00000
 8022f54:	4b60      	ldr	r3, [pc, #384]	; (80230d8 <__ieee754_pow+0x3f0>)
 8022f56:	2200      	movs	r2, #0
 8022f58:	f7dd f9b6 	bl	80002c8 <__aeabi_dsub>
 8022f5c:	a354      	add	r3, pc, #336	; (adr r3, 80230b0 <__ieee754_pow+0x3c8>)
 8022f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f62:	4604      	mov	r4, r0
 8022f64:	460d      	mov	r5, r1
 8022f66:	f7dd fb67 	bl	8000638 <__aeabi_dmul>
 8022f6a:	a353      	add	r3, pc, #332	; (adr r3, 80230b8 <__ieee754_pow+0x3d0>)
 8022f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f70:	4606      	mov	r6, r0
 8022f72:	460f      	mov	r7, r1
 8022f74:	4620      	mov	r0, r4
 8022f76:	4629      	mov	r1, r5
 8022f78:	f7dd fb5e 	bl	8000638 <__aeabi_dmul>
 8022f7c:	4b57      	ldr	r3, [pc, #348]	; (80230dc <__ieee754_pow+0x3f4>)
 8022f7e:	4682      	mov	sl, r0
 8022f80:	468b      	mov	fp, r1
 8022f82:	2200      	movs	r2, #0
 8022f84:	4620      	mov	r0, r4
 8022f86:	4629      	mov	r1, r5
 8022f88:	f7dd fb56 	bl	8000638 <__aeabi_dmul>
 8022f8c:	4602      	mov	r2, r0
 8022f8e:	460b      	mov	r3, r1
 8022f90:	a14b      	add	r1, pc, #300	; (adr r1, 80230c0 <__ieee754_pow+0x3d8>)
 8022f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022f96:	f7dd f997 	bl	80002c8 <__aeabi_dsub>
 8022f9a:	4622      	mov	r2, r4
 8022f9c:	462b      	mov	r3, r5
 8022f9e:	f7dd fb4b 	bl	8000638 <__aeabi_dmul>
 8022fa2:	4602      	mov	r2, r0
 8022fa4:	460b      	mov	r3, r1
 8022fa6:	2000      	movs	r0, #0
 8022fa8:	494d      	ldr	r1, [pc, #308]	; (80230e0 <__ieee754_pow+0x3f8>)
 8022faa:	f7dd f98d 	bl	80002c8 <__aeabi_dsub>
 8022fae:	4622      	mov	r2, r4
 8022fb0:	4680      	mov	r8, r0
 8022fb2:	4689      	mov	r9, r1
 8022fb4:	462b      	mov	r3, r5
 8022fb6:	4620      	mov	r0, r4
 8022fb8:	4629      	mov	r1, r5
 8022fba:	f7dd fb3d 	bl	8000638 <__aeabi_dmul>
 8022fbe:	4602      	mov	r2, r0
 8022fc0:	460b      	mov	r3, r1
 8022fc2:	4640      	mov	r0, r8
 8022fc4:	4649      	mov	r1, r9
 8022fc6:	f7dd fb37 	bl	8000638 <__aeabi_dmul>
 8022fca:	a33f      	add	r3, pc, #252	; (adr r3, 80230c8 <__ieee754_pow+0x3e0>)
 8022fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fd0:	f7dd fb32 	bl	8000638 <__aeabi_dmul>
 8022fd4:	4602      	mov	r2, r0
 8022fd6:	460b      	mov	r3, r1
 8022fd8:	4650      	mov	r0, sl
 8022fda:	4659      	mov	r1, fp
 8022fdc:	f7dd f974 	bl	80002c8 <__aeabi_dsub>
 8022fe0:	4602      	mov	r2, r0
 8022fe2:	460b      	mov	r3, r1
 8022fe4:	4680      	mov	r8, r0
 8022fe6:	4689      	mov	r9, r1
 8022fe8:	4630      	mov	r0, r6
 8022fea:	4639      	mov	r1, r7
 8022fec:	f7dd f96e 	bl	80002cc <__adddf3>
 8022ff0:	2000      	movs	r0, #0
 8022ff2:	4632      	mov	r2, r6
 8022ff4:	463b      	mov	r3, r7
 8022ff6:	4604      	mov	r4, r0
 8022ff8:	460d      	mov	r5, r1
 8022ffa:	f7dd f965 	bl	80002c8 <__aeabi_dsub>
 8022ffe:	4602      	mov	r2, r0
 8023000:	460b      	mov	r3, r1
 8023002:	4640      	mov	r0, r8
 8023004:	4649      	mov	r1, r9
 8023006:	f7dd f95f 	bl	80002c8 <__aeabi_dsub>
 802300a:	9b04      	ldr	r3, [sp, #16]
 802300c:	9a06      	ldr	r2, [sp, #24]
 802300e:	3b01      	subs	r3, #1
 8023010:	4313      	orrs	r3, r2
 8023012:	4682      	mov	sl, r0
 8023014:	468b      	mov	fp, r1
 8023016:	f040 81e7 	bne.w	80233e8 <__ieee754_pow+0x700>
 802301a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80230d0 <__ieee754_pow+0x3e8>
 802301e:	eeb0 8a47 	vmov.f32	s16, s14
 8023022:	eef0 8a67 	vmov.f32	s17, s15
 8023026:	e9dd 6700 	ldrd	r6, r7, [sp]
 802302a:	2600      	movs	r6, #0
 802302c:	4632      	mov	r2, r6
 802302e:	463b      	mov	r3, r7
 8023030:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023034:	f7dd f948 	bl	80002c8 <__aeabi_dsub>
 8023038:	4622      	mov	r2, r4
 802303a:	462b      	mov	r3, r5
 802303c:	f7dd fafc 	bl	8000638 <__aeabi_dmul>
 8023040:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023044:	4680      	mov	r8, r0
 8023046:	4689      	mov	r9, r1
 8023048:	4650      	mov	r0, sl
 802304a:	4659      	mov	r1, fp
 802304c:	f7dd faf4 	bl	8000638 <__aeabi_dmul>
 8023050:	4602      	mov	r2, r0
 8023052:	460b      	mov	r3, r1
 8023054:	4640      	mov	r0, r8
 8023056:	4649      	mov	r1, r9
 8023058:	f7dd f938 	bl	80002cc <__adddf3>
 802305c:	4632      	mov	r2, r6
 802305e:	463b      	mov	r3, r7
 8023060:	4680      	mov	r8, r0
 8023062:	4689      	mov	r9, r1
 8023064:	4620      	mov	r0, r4
 8023066:	4629      	mov	r1, r5
 8023068:	f7dd fae6 	bl	8000638 <__aeabi_dmul>
 802306c:	460b      	mov	r3, r1
 802306e:	4604      	mov	r4, r0
 8023070:	460d      	mov	r5, r1
 8023072:	4602      	mov	r2, r0
 8023074:	4649      	mov	r1, r9
 8023076:	4640      	mov	r0, r8
 8023078:	f7dd f928 	bl	80002cc <__adddf3>
 802307c:	4b19      	ldr	r3, [pc, #100]	; (80230e4 <__ieee754_pow+0x3fc>)
 802307e:	4299      	cmp	r1, r3
 8023080:	ec45 4b19 	vmov	d9, r4, r5
 8023084:	4606      	mov	r6, r0
 8023086:	460f      	mov	r7, r1
 8023088:	468b      	mov	fp, r1
 802308a:	f340 82f1 	ble.w	8023670 <__ieee754_pow+0x988>
 802308e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8023092:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8023096:	4303      	orrs	r3, r0
 8023098:	f000 81e4 	beq.w	8023464 <__ieee754_pow+0x77c>
 802309c:	ec51 0b18 	vmov	r0, r1, d8
 80230a0:	2200      	movs	r2, #0
 80230a2:	2300      	movs	r3, #0
 80230a4:	f7dd fd3a 	bl	8000b1c <__aeabi_dcmplt>
 80230a8:	3800      	subs	r0, #0
 80230aa:	bf18      	it	ne
 80230ac:	2001      	movne	r0, #1
 80230ae:	e72b      	b.n	8022f08 <__ieee754_pow+0x220>
 80230b0:	60000000 	.word	0x60000000
 80230b4:	3ff71547 	.word	0x3ff71547
 80230b8:	f85ddf44 	.word	0xf85ddf44
 80230bc:	3e54ae0b 	.word	0x3e54ae0b
 80230c0:	55555555 	.word	0x55555555
 80230c4:	3fd55555 	.word	0x3fd55555
 80230c8:	652b82fe 	.word	0x652b82fe
 80230cc:	3ff71547 	.word	0x3ff71547
 80230d0:	00000000 	.word	0x00000000
 80230d4:	bff00000 	.word	0xbff00000
 80230d8:	3ff00000 	.word	0x3ff00000
 80230dc:	3fd00000 	.word	0x3fd00000
 80230e0:	3fe00000 	.word	0x3fe00000
 80230e4:	408fffff 	.word	0x408fffff
 80230e8:	4bd5      	ldr	r3, [pc, #852]	; (8023440 <__ieee754_pow+0x758>)
 80230ea:	402b      	ands	r3, r5
 80230ec:	2200      	movs	r2, #0
 80230ee:	b92b      	cbnz	r3, 80230fc <__ieee754_pow+0x414>
 80230f0:	4bd4      	ldr	r3, [pc, #848]	; (8023444 <__ieee754_pow+0x75c>)
 80230f2:	f7dd faa1 	bl	8000638 <__aeabi_dmul>
 80230f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80230fa:	460c      	mov	r4, r1
 80230fc:	1523      	asrs	r3, r4, #20
 80230fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8023102:	4413      	add	r3, r2
 8023104:	9305      	str	r3, [sp, #20]
 8023106:	4bd0      	ldr	r3, [pc, #832]	; (8023448 <__ieee754_pow+0x760>)
 8023108:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802310c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8023110:	429c      	cmp	r4, r3
 8023112:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8023116:	dd08      	ble.n	802312a <__ieee754_pow+0x442>
 8023118:	4bcc      	ldr	r3, [pc, #816]	; (802344c <__ieee754_pow+0x764>)
 802311a:	429c      	cmp	r4, r3
 802311c:	f340 8162 	ble.w	80233e4 <__ieee754_pow+0x6fc>
 8023120:	9b05      	ldr	r3, [sp, #20]
 8023122:	3301      	adds	r3, #1
 8023124:	9305      	str	r3, [sp, #20]
 8023126:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802312a:	2400      	movs	r4, #0
 802312c:	00e3      	lsls	r3, r4, #3
 802312e:	9307      	str	r3, [sp, #28]
 8023130:	4bc7      	ldr	r3, [pc, #796]	; (8023450 <__ieee754_pow+0x768>)
 8023132:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023136:	ed93 7b00 	vldr	d7, [r3]
 802313a:	4629      	mov	r1, r5
 802313c:	ec53 2b17 	vmov	r2, r3, d7
 8023140:	eeb0 9a47 	vmov.f32	s18, s14
 8023144:	eef0 9a67 	vmov.f32	s19, s15
 8023148:	4682      	mov	sl, r0
 802314a:	f7dd f8bd 	bl	80002c8 <__aeabi_dsub>
 802314e:	4652      	mov	r2, sl
 8023150:	4606      	mov	r6, r0
 8023152:	460f      	mov	r7, r1
 8023154:	462b      	mov	r3, r5
 8023156:	ec51 0b19 	vmov	r0, r1, d9
 802315a:	f7dd f8b7 	bl	80002cc <__adddf3>
 802315e:	4602      	mov	r2, r0
 8023160:	460b      	mov	r3, r1
 8023162:	2000      	movs	r0, #0
 8023164:	49bb      	ldr	r1, [pc, #748]	; (8023454 <__ieee754_pow+0x76c>)
 8023166:	f7dd fb91 	bl	800088c <__aeabi_ddiv>
 802316a:	ec41 0b1a 	vmov	d10, r0, r1
 802316e:	4602      	mov	r2, r0
 8023170:	460b      	mov	r3, r1
 8023172:	4630      	mov	r0, r6
 8023174:	4639      	mov	r1, r7
 8023176:	f7dd fa5f 	bl	8000638 <__aeabi_dmul>
 802317a:	2300      	movs	r3, #0
 802317c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023180:	9302      	str	r3, [sp, #8]
 8023182:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8023186:	46ab      	mov	fp, r5
 8023188:	106d      	asrs	r5, r5, #1
 802318a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 802318e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8023192:	ec41 0b18 	vmov	d8, r0, r1
 8023196:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 802319a:	2200      	movs	r2, #0
 802319c:	4640      	mov	r0, r8
 802319e:	4649      	mov	r1, r9
 80231a0:	4614      	mov	r4, r2
 80231a2:	461d      	mov	r5, r3
 80231a4:	f7dd fa48 	bl	8000638 <__aeabi_dmul>
 80231a8:	4602      	mov	r2, r0
 80231aa:	460b      	mov	r3, r1
 80231ac:	4630      	mov	r0, r6
 80231ae:	4639      	mov	r1, r7
 80231b0:	f7dd f88a 	bl	80002c8 <__aeabi_dsub>
 80231b4:	ec53 2b19 	vmov	r2, r3, d9
 80231b8:	4606      	mov	r6, r0
 80231ba:	460f      	mov	r7, r1
 80231bc:	4620      	mov	r0, r4
 80231be:	4629      	mov	r1, r5
 80231c0:	f7dd f882 	bl	80002c8 <__aeabi_dsub>
 80231c4:	4602      	mov	r2, r0
 80231c6:	460b      	mov	r3, r1
 80231c8:	4650      	mov	r0, sl
 80231ca:	4659      	mov	r1, fp
 80231cc:	f7dd f87c 	bl	80002c8 <__aeabi_dsub>
 80231d0:	4642      	mov	r2, r8
 80231d2:	464b      	mov	r3, r9
 80231d4:	f7dd fa30 	bl	8000638 <__aeabi_dmul>
 80231d8:	4602      	mov	r2, r0
 80231da:	460b      	mov	r3, r1
 80231dc:	4630      	mov	r0, r6
 80231de:	4639      	mov	r1, r7
 80231e0:	f7dd f872 	bl	80002c8 <__aeabi_dsub>
 80231e4:	ec53 2b1a 	vmov	r2, r3, d10
 80231e8:	f7dd fa26 	bl	8000638 <__aeabi_dmul>
 80231ec:	ec53 2b18 	vmov	r2, r3, d8
 80231f0:	ec41 0b19 	vmov	d9, r0, r1
 80231f4:	ec51 0b18 	vmov	r0, r1, d8
 80231f8:	f7dd fa1e 	bl	8000638 <__aeabi_dmul>
 80231fc:	a37c      	add	r3, pc, #496	; (adr r3, 80233f0 <__ieee754_pow+0x708>)
 80231fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023202:	4604      	mov	r4, r0
 8023204:	460d      	mov	r5, r1
 8023206:	f7dd fa17 	bl	8000638 <__aeabi_dmul>
 802320a:	a37b      	add	r3, pc, #492	; (adr r3, 80233f8 <__ieee754_pow+0x710>)
 802320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023210:	f7dd f85c 	bl	80002cc <__adddf3>
 8023214:	4622      	mov	r2, r4
 8023216:	462b      	mov	r3, r5
 8023218:	f7dd fa0e 	bl	8000638 <__aeabi_dmul>
 802321c:	a378      	add	r3, pc, #480	; (adr r3, 8023400 <__ieee754_pow+0x718>)
 802321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023222:	f7dd f853 	bl	80002cc <__adddf3>
 8023226:	4622      	mov	r2, r4
 8023228:	462b      	mov	r3, r5
 802322a:	f7dd fa05 	bl	8000638 <__aeabi_dmul>
 802322e:	a376      	add	r3, pc, #472	; (adr r3, 8023408 <__ieee754_pow+0x720>)
 8023230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023234:	f7dd f84a 	bl	80002cc <__adddf3>
 8023238:	4622      	mov	r2, r4
 802323a:	462b      	mov	r3, r5
 802323c:	f7dd f9fc 	bl	8000638 <__aeabi_dmul>
 8023240:	a373      	add	r3, pc, #460	; (adr r3, 8023410 <__ieee754_pow+0x728>)
 8023242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023246:	f7dd f841 	bl	80002cc <__adddf3>
 802324a:	4622      	mov	r2, r4
 802324c:	462b      	mov	r3, r5
 802324e:	f7dd f9f3 	bl	8000638 <__aeabi_dmul>
 8023252:	a371      	add	r3, pc, #452	; (adr r3, 8023418 <__ieee754_pow+0x730>)
 8023254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023258:	f7dd f838 	bl	80002cc <__adddf3>
 802325c:	4622      	mov	r2, r4
 802325e:	4606      	mov	r6, r0
 8023260:	460f      	mov	r7, r1
 8023262:	462b      	mov	r3, r5
 8023264:	4620      	mov	r0, r4
 8023266:	4629      	mov	r1, r5
 8023268:	f7dd f9e6 	bl	8000638 <__aeabi_dmul>
 802326c:	4602      	mov	r2, r0
 802326e:	460b      	mov	r3, r1
 8023270:	4630      	mov	r0, r6
 8023272:	4639      	mov	r1, r7
 8023274:	f7dd f9e0 	bl	8000638 <__aeabi_dmul>
 8023278:	4642      	mov	r2, r8
 802327a:	4604      	mov	r4, r0
 802327c:	460d      	mov	r5, r1
 802327e:	464b      	mov	r3, r9
 8023280:	ec51 0b18 	vmov	r0, r1, d8
 8023284:	f7dd f822 	bl	80002cc <__adddf3>
 8023288:	ec53 2b19 	vmov	r2, r3, d9
 802328c:	f7dd f9d4 	bl	8000638 <__aeabi_dmul>
 8023290:	4622      	mov	r2, r4
 8023292:	462b      	mov	r3, r5
 8023294:	f7dd f81a 	bl	80002cc <__adddf3>
 8023298:	4642      	mov	r2, r8
 802329a:	4682      	mov	sl, r0
 802329c:	468b      	mov	fp, r1
 802329e:	464b      	mov	r3, r9
 80232a0:	4640      	mov	r0, r8
 80232a2:	4649      	mov	r1, r9
 80232a4:	f7dd f9c8 	bl	8000638 <__aeabi_dmul>
 80232a8:	4b6b      	ldr	r3, [pc, #428]	; (8023458 <__ieee754_pow+0x770>)
 80232aa:	2200      	movs	r2, #0
 80232ac:	4606      	mov	r6, r0
 80232ae:	460f      	mov	r7, r1
 80232b0:	f7dd f80c 	bl	80002cc <__adddf3>
 80232b4:	4652      	mov	r2, sl
 80232b6:	465b      	mov	r3, fp
 80232b8:	f7dd f808 	bl	80002cc <__adddf3>
 80232bc:	2000      	movs	r0, #0
 80232be:	4604      	mov	r4, r0
 80232c0:	460d      	mov	r5, r1
 80232c2:	4602      	mov	r2, r0
 80232c4:	460b      	mov	r3, r1
 80232c6:	4640      	mov	r0, r8
 80232c8:	4649      	mov	r1, r9
 80232ca:	f7dd f9b5 	bl	8000638 <__aeabi_dmul>
 80232ce:	4b62      	ldr	r3, [pc, #392]	; (8023458 <__ieee754_pow+0x770>)
 80232d0:	4680      	mov	r8, r0
 80232d2:	4689      	mov	r9, r1
 80232d4:	2200      	movs	r2, #0
 80232d6:	4620      	mov	r0, r4
 80232d8:	4629      	mov	r1, r5
 80232da:	f7dc fff5 	bl	80002c8 <__aeabi_dsub>
 80232de:	4632      	mov	r2, r6
 80232e0:	463b      	mov	r3, r7
 80232e2:	f7dc fff1 	bl	80002c8 <__aeabi_dsub>
 80232e6:	4602      	mov	r2, r0
 80232e8:	460b      	mov	r3, r1
 80232ea:	4650      	mov	r0, sl
 80232ec:	4659      	mov	r1, fp
 80232ee:	f7dc ffeb 	bl	80002c8 <__aeabi_dsub>
 80232f2:	ec53 2b18 	vmov	r2, r3, d8
 80232f6:	f7dd f99f 	bl	8000638 <__aeabi_dmul>
 80232fa:	4622      	mov	r2, r4
 80232fc:	4606      	mov	r6, r0
 80232fe:	460f      	mov	r7, r1
 8023300:	462b      	mov	r3, r5
 8023302:	ec51 0b19 	vmov	r0, r1, d9
 8023306:	f7dd f997 	bl	8000638 <__aeabi_dmul>
 802330a:	4602      	mov	r2, r0
 802330c:	460b      	mov	r3, r1
 802330e:	4630      	mov	r0, r6
 8023310:	4639      	mov	r1, r7
 8023312:	f7dc ffdb 	bl	80002cc <__adddf3>
 8023316:	4606      	mov	r6, r0
 8023318:	460f      	mov	r7, r1
 802331a:	4602      	mov	r2, r0
 802331c:	460b      	mov	r3, r1
 802331e:	4640      	mov	r0, r8
 8023320:	4649      	mov	r1, r9
 8023322:	f7dc ffd3 	bl	80002cc <__adddf3>
 8023326:	a33e      	add	r3, pc, #248	; (adr r3, 8023420 <__ieee754_pow+0x738>)
 8023328:	e9d3 2300 	ldrd	r2, r3, [r3]
 802332c:	2000      	movs	r0, #0
 802332e:	4604      	mov	r4, r0
 8023330:	460d      	mov	r5, r1
 8023332:	f7dd f981 	bl	8000638 <__aeabi_dmul>
 8023336:	4642      	mov	r2, r8
 8023338:	ec41 0b18 	vmov	d8, r0, r1
 802333c:	464b      	mov	r3, r9
 802333e:	4620      	mov	r0, r4
 8023340:	4629      	mov	r1, r5
 8023342:	f7dc ffc1 	bl	80002c8 <__aeabi_dsub>
 8023346:	4602      	mov	r2, r0
 8023348:	460b      	mov	r3, r1
 802334a:	4630      	mov	r0, r6
 802334c:	4639      	mov	r1, r7
 802334e:	f7dc ffbb 	bl	80002c8 <__aeabi_dsub>
 8023352:	a335      	add	r3, pc, #212	; (adr r3, 8023428 <__ieee754_pow+0x740>)
 8023354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023358:	f7dd f96e 	bl	8000638 <__aeabi_dmul>
 802335c:	a334      	add	r3, pc, #208	; (adr r3, 8023430 <__ieee754_pow+0x748>)
 802335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023362:	4606      	mov	r6, r0
 8023364:	460f      	mov	r7, r1
 8023366:	4620      	mov	r0, r4
 8023368:	4629      	mov	r1, r5
 802336a:	f7dd f965 	bl	8000638 <__aeabi_dmul>
 802336e:	4602      	mov	r2, r0
 8023370:	460b      	mov	r3, r1
 8023372:	4630      	mov	r0, r6
 8023374:	4639      	mov	r1, r7
 8023376:	f7dc ffa9 	bl	80002cc <__adddf3>
 802337a:	9a07      	ldr	r2, [sp, #28]
 802337c:	4b37      	ldr	r3, [pc, #220]	; (802345c <__ieee754_pow+0x774>)
 802337e:	4413      	add	r3, r2
 8023380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023384:	f7dc ffa2 	bl	80002cc <__adddf3>
 8023388:	4682      	mov	sl, r0
 802338a:	9805      	ldr	r0, [sp, #20]
 802338c:	468b      	mov	fp, r1
 802338e:	f7dd f8e9 	bl	8000564 <__aeabi_i2d>
 8023392:	9a07      	ldr	r2, [sp, #28]
 8023394:	4b32      	ldr	r3, [pc, #200]	; (8023460 <__ieee754_pow+0x778>)
 8023396:	4413      	add	r3, r2
 8023398:	e9d3 8900 	ldrd	r8, r9, [r3]
 802339c:	4606      	mov	r6, r0
 802339e:	460f      	mov	r7, r1
 80233a0:	4652      	mov	r2, sl
 80233a2:	465b      	mov	r3, fp
 80233a4:	ec51 0b18 	vmov	r0, r1, d8
 80233a8:	f7dc ff90 	bl	80002cc <__adddf3>
 80233ac:	4642      	mov	r2, r8
 80233ae:	464b      	mov	r3, r9
 80233b0:	f7dc ff8c 	bl	80002cc <__adddf3>
 80233b4:	4632      	mov	r2, r6
 80233b6:	463b      	mov	r3, r7
 80233b8:	f7dc ff88 	bl	80002cc <__adddf3>
 80233bc:	2000      	movs	r0, #0
 80233be:	4632      	mov	r2, r6
 80233c0:	463b      	mov	r3, r7
 80233c2:	4604      	mov	r4, r0
 80233c4:	460d      	mov	r5, r1
 80233c6:	f7dc ff7f 	bl	80002c8 <__aeabi_dsub>
 80233ca:	4642      	mov	r2, r8
 80233cc:	464b      	mov	r3, r9
 80233ce:	f7dc ff7b 	bl	80002c8 <__aeabi_dsub>
 80233d2:	ec53 2b18 	vmov	r2, r3, d8
 80233d6:	f7dc ff77 	bl	80002c8 <__aeabi_dsub>
 80233da:	4602      	mov	r2, r0
 80233dc:	460b      	mov	r3, r1
 80233de:	4650      	mov	r0, sl
 80233e0:	4659      	mov	r1, fp
 80233e2:	e610      	b.n	8023006 <__ieee754_pow+0x31e>
 80233e4:	2401      	movs	r4, #1
 80233e6:	e6a1      	b.n	802312c <__ieee754_pow+0x444>
 80233e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8023438 <__ieee754_pow+0x750>
 80233ec:	e617      	b.n	802301e <__ieee754_pow+0x336>
 80233ee:	bf00      	nop
 80233f0:	4a454eef 	.word	0x4a454eef
 80233f4:	3fca7e28 	.word	0x3fca7e28
 80233f8:	93c9db65 	.word	0x93c9db65
 80233fc:	3fcd864a 	.word	0x3fcd864a
 8023400:	a91d4101 	.word	0xa91d4101
 8023404:	3fd17460 	.word	0x3fd17460
 8023408:	518f264d 	.word	0x518f264d
 802340c:	3fd55555 	.word	0x3fd55555
 8023410:	db6fabff 	.word	0xdb6fabff
 8023414:	3fdb6db6 	.word	0x3fdb6db6
 8023418:	33333303 	.word	0x33333303
 802341c:	3fe33333 	.word	0x3fe33333
 8023420:	e0000000 	.word	0xe0000000
 8023424:	3feec709 	.word	0x3feec709
 8023428:	dc3a03fd 	.word	0xdc3a03fd
 802342c:	3feec709 	.word	0x3feec709
 8023430:	145b01f5 	.word	0x145b01f5
 8023434:	be3e2fe0 	.word	0xbe3e2fe0
 8023438:	00000000 	.word	0x00000000
 802343c:	3ff00000 	.word	0x3ff00000
 8023440:	7ff00000 	.word	0x7ff00000
 8023444:	43400000 	.word	0x43400000
 8023448:	0003988e 	.word	0x0003988e
 802344c:	000bb679 	.word	0x000bb679
 8023450:	08028b88 	.word	0x08028b88
 8023454:	3ff00000 	.word	0x3ff00000
 8023458:	40080000 	.word	0x40080000
 802345c:	08028ba8 	.word	0x08028ba8
 8023460:	08028b98 	.word	0x08028b98
 8023464:	a3b5      	add	r3, pc, #724	; (adr r3, 802373c <__ieee754_pow+0xa54>)
 8023466:	e9d3 2300 	ldrd	r2, r3, [r3]
 802346a:	4640      	mov	r0, r8
 802346c:	4649      	mov	r1, r9
 802346e:	f7dc ff2d 	bl	80002cc <__adddf3>
 8023472:	4622      	mov	r2, r4
 8023474:	ec41 0b1a 	vmov	d10, r0, r1
 8023478:	462b      	mov	r3, r5
 802347a:	4630      	mov	r0, r6
 802347c:	4639      	mov	r1, r7
 802347e:	f7dc ff23 	bl	80002c8 <__aeabi_dsub>
 8023482:	4602      	mov	r2, r0
 8023484:	460b      	mov	r3, r1
 8023486:	ec51 0b1a 	vmov	r0, r1, d10
 802348a:	f7dd fb65 	bl	8000b58 <__aeabi_dcmpgt>
 802348e:	2800      	cmp	r0, #0
 8023490:	f47f ae04 	bne.w	802309c <__ieee754_pow+0x3b4>
 8023494:	4aa4      	ldr	r2, [pc, #656]	; (8023728 <__ieee754_pow+0xa40>)
 8023496:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802349a:	4293      	cmp	r3, r2
 802349c:	f340 8108 	ble.w	80236b0 <__ieee754_pow+0x9c8>
 80234a0:	151b      	asrs	r3, r3, #20
 80234a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80234a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80234aa:	fa4a f303 	asr.w	r3, sl, r3
 80234ae:	445b      	add	r3, fp
 80234b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80234b4:	4e9d      	ldr	r6, [pc, #628]	; (802372c <__ieee754_pow+0xa44>)
 80234b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80234ba:	4116      	asrs	r6, r2
 80234bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80234c0:	2000      	movs	r0, #0
 80234c2:	ea23 0106 	bic.w	r1, r3, r6
 80234c6:	f1c2 0214 	rsb	r2, r2, #20
 80234ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80234ce:	fa4a fa02 	asr.w	sl, sl, r2
 80234d2:	f1bb 0f00 	cmp.w	fp, #0
 80234d6:	4602      	mov	r2, r0
 80234d8:	460b      	mov	r3, r1
 80234da:	4620      	mov	r0, r4
 80234dc:	4629      	mov	r1, r5
 80234de:	bfb8      	it	lt
 80234e0:	f1ca 0a00 	rsblt	sl, sl, #0
 80234e4:	f7dc fef0 	bl	80002c8 <__aeabi_dsub>
 80234e8:	ec41 0b19 	vmov	d9, r0, r1
 80234ec:	4642      	mov	r2, r8
 80234ee:	464b      	mov	r3, r9
 80234f0:	ec51 0b19 	vmov	r0, r1, d9
 80234f4:	f7dc feea 	bl	80002cc <__adddf3>
 80234f8:	a37b      	add	r3, pc, #492	; (adr r3, 80236e8 <__ieee754_pow+0xa00>)
 80234fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234fe:	2000      	movs	r0, #0
 8023500:	4604      	mov	r4, r0
 8023502:	460d      	mov	r5, r1
 8023504:	f7dd f898 	bl	8000638 <__aeabi_dmul>
 8023508:	ec53 2b19 	vmov	r2, r3, d9
 802350c:	4606      	mov	r6, r0
 802350e:	460f      	mov	r7, r1
 8023510:	4620      	mov	r0, r4
 8023512:	4629      	mov	r1, r5
 8023514:	f7dc fed8 	bl	80002c8 <__aeabi_dsub>
 8023518:	4602      	mov	r2, r0
 802351a:	460b      	mov	r3, r1
 802351c:	4640      	mov	r0, r8
 802351e:	4649      	mov	r1, r9
 8023520:	f7dc fed2 	bl	80002c8 <__aeabi_dsub>
 8023524:	a372      	add	r3, pc, #456	; (adr r3, 80236f0 <__ieee754_pow+0xa08>)
 8023526:	e9d3 2300 	ldrd	r2, r3, [r3]
 802352a:	f7dd f885 	bl	8000638 <__aeabi_dmul>
 802352e:	a372      	add	r3, pc, #456	; (adr r3, 80236f8 <__ieee754_pow+0xa10>)
 8023530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023534:	4680      	mov	r8, r0
 8023536:	4689      	mov	r9, r1
 8023538:	4620      	mov	r0, r4
 802353a:	4629      	mov	r1, r5
 802353c:	f7dd f87c 	bl	8000638 <__aeabi_dmul>
 8023540:	4602      	mov	r2, r0
 8023542:	460b      	mov	r3, r1
 8023544:	4640      	mov	r0, r8
 8023546:	4649      	mov	r1, r9
 8023548:	f7dc fec0 	bl	80002cc <__adddf3>
 802354c:	4604      	mov	r4, r0
 802354e:	460d      	mov	r5, r1
 8023550:	4602      	mov	r2, r0
 8023552:	460b      	mov	r3, r1
 8023554:	4630      	mov	r0, r6
 8023556:	4639      	mov	r1, r7
 8023558:	f7dc feb8 	bl	80002cc <__adddf3>
 802355c:	4632      	mov	r2, r6
 802355e:	463b      	mov	r3, r7
 8023560:	4680      	mov	r8, r0
 8023562:	4689      	mov	r9, r1
 8023564:	f7dc feb0 	bl	80002c8 <__aeabi_dsub>
 8023568:	4602      	mov	r2, r0
 802356a:	460b      	mov	r3, r1
 802356c:	4620      	mov	r0, r4
 802356e:	4629      	mov	r1, r5
 8023570:	f7dc feaa 	bl	80002c8 <__aeabi_dsub>
 8023574:	4642      	mov	r2, r8
 8023576:	4606      	mov	r6, r0
 8023578:	460f      	mov	r7, r1
 802357a:	464b      	mov	r3, r9
 802357c:	4640      	mov	r0, r8
 802357e:	4649      	mov	r1, r9
 8023580:	f7dd f85a 	bl	8000638 <__aeabi_dmul>
 8023584:	a35e      	add	r3, pc, #376	; (adr r3, 8023700 <__ieee754_pow+0xa18>)
 8023586:	e9d3 2300 	ldrd	r2, r3, [r3]
 802358a:	4604      	mov	r4, r0
 802358c:	460d      	mov	r5, r1
 802358e:	f7dd f853 	bl	8000638 <__aeabi_dmul>
 8023592:	a35d      	add	r3, pc, #372	; (adr r3, 8023708 <__ieee754_pow+0xa20>)
 8023594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023598:	f7dc fe96 	bl	80002c8 <__aeabi_dsub>
 802359c:	4622      	mov	r2, r4
 802359e:	462b      	mov	r3, r5
 80235a0:	f7dd f84a 	bl	8000638 <__aeabi_dmul>
 80235a4:	a35a      	add	r3, pc, #360	; (adr r3, 8023710 <__ieee754_pow+0xa28>)
 80235a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235aa:	f7dc fe8f 	bl	80002cc <__adddf3>
 80235ae:	4622      	mov	r2, r4
 80235b0:	462b      	mov	r3, r5
 80235b2:	f7dd f841 	bl	8000638 <__aeabi_dmul>
 80235b6:	a358      	add	r3, pc, #352	; (adr r3, 8023718 <__ieee754_pow+0xa30>)
 80235b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235bc:	f7dc fe84 	bl	80002c8 <__aeabi_dsub>
 80235c0:	4622      	mov	r2, r4
 80235c2:	462b      	mov	r3, r5
 80235c4:	f7dd f838 	bl	8000638 <__aeabi_dmul>
 80235c8:	a355      	add	r3, pc, #340	; (adr r3, 8023720 <__ieee754_pow+0xa38>)
 80235ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235ce:	f7dc fe7d 	bl	80002cc <__adddf3>
 80235d2:	4622      	mov	r2, r4
 80235d4:	462b      	mov	r3, r5
 80235d6:	f7dd f82f 	bl	8000638 <__aeabi_dmul>
 80235da:	4602      	mov	r2, r0
 80235dc:	460b      	mov	r3, r1
 80235de:	4640      	mov	r0, r8
 80235e0:	4649      	mov	r1, r9
 80235e2:	f7dc fe71 	bl	80002c8 <__aeabi_dsub>
 80235e6:	4604      	mov	r4, r0
 80235e8:	460d      	mov	r5, r1
 80235ea:	4602      	mov	r2, r0
 80235ec:	460b      	mov	r3, r1
 80235ee:	4640      	mov	r0, r8
 80235f0:	4649      	mov	r1, r9
 80235f2:	f7dd f821 	bl	8000638 <__aeabi_dmul>
 80235f6:	2200      	movs	r2, #0
 80235f8:	ec41 0b19 	vmov	d9, r0, r1
 80235fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023600:	4620      	mov	r0, r4
 8023602:	4629      	mov	r1, r5
 8023604:	f7dc fe60 	bl	80002c8 <__aeabi_dsub>
 8023608:	4602      	mov	r2, r0
 802360a:	460b      	mov	r3, r1
 802360c:	ec51 0b19 	vmov	r0, r1, d9
 8023610:	f7dd f93c 	bl	800088c <__aeabi_ddiv>
 8023614:	4632      	mov	r2, r6
 8023616:	4604      	mov	r4, r0
 8023618:	460d      	mov	r5, r1
 802361a:	463b      	mov	r3, r7
 802361c:	4640      	mov	r0, r8
 802361e:	4649      	mov	r1, r9
 8023620:	f7dd f80a 	bl	8000638 <__aeabi_dmul>
 8023624:	4632      	mov	r2, r6
 8023626:	463b      	mov	r3, r7
 8023628:	f7dc fe50 	bl	80002cc <__adddf3>
 802362c:	4602      	mov	r2, r0
 802362e:	460b      	mov	r3, r1
 8023630:	4620      	mov	r0, r4
 8023632:	4629      	mov	r1, r5
 8023634:	f7dc fe48 	bl	80002c8 <__aeabi_dsub>
 8023638:	4642      	mov	r2, r8
 802363a:	464b      	mov	r3, r9
 802363c:	f7dc fe44 	bl	80002c8 <__aeabi_dsub>
 8023640:	460b      	mov	r3, r1
 8023642:	4602      	mov	r2, r0
 8023644:	493a      	ldr	r1, [pc, #232]	; (8023730 <__ieee754_pow+0xa48>)
 8023646:	2000      	movs	r0, #0
 8023648:	f7dc fe3e 	bl	80002c8 <__aeabi_dsub>
 802364c:	ec41 0b10 	vmov	d0, r0, r1
 8023650:	ee10 3a90 	vmov	r3, s1
 8023654:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8023658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802365c:	da2b      	bge.n	80236b6 <__ieee754_pow+0x9ce>
 802365e:	4650      	mov	r0, sl
 8023660:	f000 f966 	bl	8023930 <scalbn>
 8023664:	ec51 0b10 	vmov	r0, r1, d0
 8023668:	ec53 2b18 	vmov	r2, r3, d8
 802366c:	f7ff bbed 	b.w	8022e4a <__ieee754_pow+0x162>
 8023670:	4b30      	ldr	r3, [pc, #192]	; (8023734 <__ieee754_pow+0xa4c>)
 8023672:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8023676:	429e      	cmp	r6, r3
 8023678:	f77f af0c 	ble.w	8023494 <__ieee754_pow+0x7ac>
 802367c:	4b2e      	ldr	r3, [pc, #184]	; (8023738 <__ieee754_pow+0xa50>)
 802367e:	440b      	add	r3, r1
 8023680:	4303      	orrs	r3, r0
 8023682:	d009      	beq.n	8023698 <__ieee754_pow+0x9b0>
 8023684:	ec51 0b18 	vmov	r0, r1, d8
 8023688:	2200      	movs	r2, #0
 802368a:	2300      	movs	r3, #0
 802368c:	f7dd fa46 	bl	8000b1c <__aeabi_dcmplt>
 8023690:	3800      	subs	r0, #0
 8023692:	bf18      	it	ne
 8023694:	2001      	movne	r0, #1
 8023696:	e447      	b.n	8022f28 <__ieee754_pow+0x240>
 8023698:	4622      	mov	r2, r4
 802369a:	462b      	mov	r3, r5
 802369c:	f7dc fe14 	bl	80002c8 <__aeabi_dsub>
 80236a0:	4642      	mov	r2, r8
 80236a2:	464b      	mov	r3, r9
 80236a4:	f7dd fa4e 	bl	8000b44 <__aeabi_dcmpge>
 80236a8:	2800      	cmp	r0, #0
 80236aa:	f43f aef3 	beq.w	8023494 <__ieee754_pow+0x7ac>
 80236ae:	e7e9      	b.n	8023684 <__ieee754_pow+0x99c>
 80236b0:	f04f 0a00 	mov.w	sl, #0
 80236b4:	e71a      	b.n	80234ec <__ieee754_pow+0x804>
 80236b6:	ec51 0b10 	vmov	r0, r1, d0
 80236ba:	4619      	mov	r1, r3
 80236bc:	e7d4      	b.n	8023668 <__ieee754_pow+0x980>
 80236be:	491c      	ldr	r1, [pc, #112]	; (8023730 <__ieee754_pow+0xa48>)
 80236c0:	2000      	movs	r0, #0
 80236c2:	f7ff bb30 	b.w	8022d26 <__ieee754_pow+0x3e>
 80236c6:	2000      	movs	r0, #0
 80236c8:	2100      	movs	r1, #0
 80236ca:	f7ff bb2c 	b.w	8022d26 <__ieee754_pow+0x3e>
 80236ce:	4630      	mov	r0, r6
 80236d0:	4639      	mov	r1, r7
 80236d2:	f7ff bb28 	b.w	8022d26 <__ieee754_pow+0x3e>
 80236d6:	9204      	str	r2, [sp, #16]
 80236d8:	f7ff bb7a 	b.w	8022dd0 <__ieee754_pow+0xe8>
 80236dc:	2300      	movs	r3, #0
 80236de:	f7ff bb64 	b.w	8022daa <__ieee754_pow+0xc2>
 80236e2:	bf00      	nop
 80236e4:	f3af 8000 	nop.w
 80236e8:	00000000 	.word	0x00000000
 80236ec:	3fe62e43 	.word	0x3fe62e43
 80236f0:	fefa39ef 	.word	0xfefa39ef
 80236f4:	3fe62e42 	.word	0x3fe62e42
 80236f8:	0ca86c39 	.word	0x0ca86c39
 80236fc:	be205c61 	.word	0xbe205c61
 8023700:	72bea4d0 	.word	0x72bea4d0
 8023704:	3e663769 	.word	0x3e663769
 8023708:	c5d26bf1 	.word	0xc5d26bf1
 802370c:	3ebbbd41 	.word	0x3ebbbd41
 8023710:	af25de2c 	.word	0xaf25de2c
 8023714:	3f11566a 	.word	0x3f11566a
 8023718:	16bebd93 	.word	0x16bebd93
 802371c:	3f66c16c 	.word	0x3f66c16c
 8023720:	5555553e 	.word	0x5555553e
 8023724:	3fc55555 	.word	0x3fc55555
 8023728:	3fe00000 	.word	0x3fe00000
 802372c:	000fffff 	.word	0x000fffff
 8023730:	3ff00000 	.word	0x3ff00000
 8023734:	4090cbff 	.word	0x4090cbff
 8023738:	3f6f3400 	.word	0x3f6f3400
 802373c:	652b82fe 	.word	0x652b82fe
 8023740:	3c971547 	.word	0x3c971547

08023744 <__ieee754_sqrt>:
 8023744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023748:	ec55 4b10 	vmov	r4, r5, d0
 802374c:	4e55      	ldr	r6, [pc, #340]	; (80238a4 <__ieee754_sqrt+0x160>)
 802374e:	43ae      	bics	r6, r5
 8023750:	ee10 0a10 	vmov	r0, s0
 8023754:	ee10 3a10 	vmov	r3, s0
 8023758:	462a      	mov	r2, r5
 802375a:	4629      	mov	r1, r5
 802375c:	d110      	bne.n	8023780 <__ieee754_sqrt+0x3c>
 802375e:	ee10 2a10 	vmov	r2, s0
 8023762:	462b      	mov	r3, r5
 8023764:	f7dc ff68 	bl	8000638 <__aeabi_dmul>
 8023768:	4602      	mov	r2, r0
 802376a:	460b      	mov	r3, r1
 802376c:	4620      	mov	r0, r4
 802376e:	4629      	mov	r1, r5
 8023770:	f7dc fdac 	bl	80002cc <__adddf3>
 8023774:	4604      	mov	r4, r0
 8023776:	460d      	mov	r5, r1
 8023778:	ec45 4b10 	vmov	d0, r4, r5
 802377c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023780:	2d00      	cmp	r5, #0
 8023782:	dc10      	bgt.n	80237a6 <__ieee754_sqrt+0x62>
 8023784:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8023788:	4330      	orrs	r0, r6
 802378a:	d0f5      	beq.n	8023778 <__ieee754_sqrt+0x34>
 802378c:	b15d      	cbz	r5, 80237a6 <__ieee754_sqrt+0x62>
 802378e:	ee10 2a10 	vmov	r2, s0
 8023792:	462b      	mov	r3, r5
 8023794:	ee10 0a10 	vmov	r0, s0
 8023798:	f7dc fd96 	bl	80002c8 <__aeabi_dsub>
 802379c:	4602      	mov	r2, r0
 802379e:	460b      	mov	r3, r1
 80237a0:	f7dd f874 	bl	800088c <__aeabi_ddiv>
 80237a4:	e7e6      	b.n	8023774 <__ieee754_sqrt+0x30>
 80237a6:	1512      	asrs	r2, r2, #20
 80237a8:	d074      	beq.n	8023894 <__ieee754_sqrt+0x150>
 80237aa:	07d4      	lsls	r4, r2, #31
 80237ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80237b0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80237b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80237b8:	bf5e      	ittt	pl
 80237ba:	0fda      	lsrpl	r2, r3, #31
 80237bc:	005b      	lslpl	r3, r3, #1
 80237be:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80237c2:	2400      	movs	r4, #0
 80237c4:	0fda      	lsrs	r2, r3, #31
 80237c6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80237ca:	107f      	asrs	r7, r7, #1
 80237cc:	005b      	lsls	r3, r3, #1
 80237ce:	2516      	movs	r5, #22
 80237d0:	4620      	mov	r0, r4
 80237d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80237d6:	1886      	adds	r6, r0, r2
 80237d8:	428e      	cmp	r6, r1
 80237da:	bfde      	ittt	le
 80237dc:	1b89      	suble	r1, r1, r6
 80237de:	18b0      	addle	r0, r6, r2
 80237e0:	18a4      	addle	r4, r4, r2
 80237e2:	0049      	lsls	r1, r1, #1
 80237e4:	3d01      	subs	r5, #1
 80237e6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80237ea:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80237ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80237f2:	d1f0      	bne.n	80237d6 <__ieee754_sqrt+0x92>
 80237f4:	462a      	mov	r2, r5
 80237f6:	f04f 0e20 	mov.w	lr, #32
 80237fa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80237fe:	4281      	cmp	r1, r0
 8023800:	eb06 0c05 	add.w	ip, r6, r5
 8023804:	dc02      	bgt.n	802380c <__ieee754_sqrt+0xc8>
 8023806:	d113      	bne.n	8023830 <__ieee754_sqrt+0xec>
 8023808:	459c      	cmp	ip, r3
 802380a:	d811      	bhi.n	8023830 <__ieee754_sqrt+0xec>
 802380c:	f1bc 0f00 	cmp.w	ip, #0
 8023810:	eb0c 0506 	add.w	r5, ip, r6
 8023814:	da43      	bge.n	802389e <__ieee754_sqrt+0x15a>
 8023816:	2d00      	cmp	r5, #0
 8023818:	db41      	blt.n	802389e <__ieee754_sqrt+0x15a>
 802381a:	f100 0801 	add.w	r8, r0, #1
 802381e:	1a09      	subs	r1, r1, r0
 8023820:	459c      	cmp	ip, r3
 8023822:	bf88      	it	hi
 8023824:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8023828:	eba3 030c 	sub.w	r3, r3, ip
 802382c:	4432      	add	r2, r6
 802382e:	4640      	mov	r0, r8
 8023830:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8023834:	f1be 0e01 	subs.w	lr, lr, #1
 8023838:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 802383c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8023840:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8023844:	d1db      	bne.n	80237fe <__ieee754_sqrt+0xba>
 8023846:	430b      	orrs	r3, r1
 8023848:	d006      	beq.n	8023858 <__ieee754_sqrt+0x114>
 802384a:	1c50      	adds	r0, r2, #1
 802384c:	bf13      	iteet	ne
 802384e:	3201      	addne	r2, #1
 8023850:	3401      	addeq	r4, #1
 8023852:	4672      	moveq	r2, lr
 8023854:	f022 0201 	bicne.w	r2, r2, #1
 8023858:	1063      	asrs	r3, r4, #1
 802385a:	0852      	lsrs	r2, r2, #1
 802385c:	07e1      	lsls	r1, r4, #31
 802385e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8023862:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8023866:	bf48      	it	mi
 8023868:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 802386c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8023870:	4614      	mov	r4, r2
 8023872:	e781      	b.n	8023778 <__ieee754_sqrt+0x34>
 8023874:	0ad9      	lsrs	r1, r3, #11
 8023876:	3815      	subs	r0, #21
 8023878:	055b      	lsls	r3, r3, #21
 802387a:	2900      	cmp	r1, #0
 802387c:	d0fa      	beq.n	8023874 <__ieee754_sqrt+0x130>
 802387e:	02cd      	lsls	r5, r1, #11
 8023880:	d50a      	bpl.n	8023898 <__ieee754_sqrt+0x154>
 8023882:	f1c2 0420 	rsb	r4, r2, #32
 8023886:	fa23 f404 	lsr.w	r4, r3, r4
 802388a:	1e55      	subs	r5, r2, #1
 802388c:	4093      	lsls	r3, r2
 802388e:	4321      	orrs	r1, r4
 8023890:	1b42      	subs	r2, r0, r5
 8023892:	e78a      	b.n	80237aa <__ieee754_sqrt+0x66>
 8023894:	4610      	mov	r0, r2
 8023896:	e7f0      	b.n	802387a <__ieee754_sqrt+0x136>
 8023898:	0049      	lsls	r1, r1, #1
 802389a:	3201      	adds	r2, #1
 802389c:	e7ef      	b.n	802387e <__ieee754_sqrt+0x13a>
 802389e:	4680      	mov	r8, r0
 80238a0:	e7bd      	b.n	802381e <__ieee754_sqrt+0xda>
 80238a2:	bf00      	nop
 80238a4:	7ff00000 	.word	0x7ff00000

080238a8 <with_errno>:
 80238a8:	b570      	push	{r4, r5, r6, lr}
 80238aa:	4604      	mov	r4, r0
 80238ac:	460d      	mov	r5, r1
 80238ae:	4616      	mov	r6, r2
 80238b0:	f000 f8d2 	bl	8023a58 <__errno>
 80238b4:	4629      	mov	r1, r5
 80238b6:	6006      	str	r6, [r0, #0]
 80238b8:	4620      	mov	r0, r4
 80238ba:	bd70      	pop	{r4, r5, r6, pc}

080238bc <xflow>:
 80238bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80238be:	4614      	mov	r4, r2
 80238c0:	461d      	mov	r5, r3
 80238c2:	b108      	cbz	r0, 80238c8 <xflow+0xc>
 80238c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80238c8:	e9cd 2300 	strd	r2, r3, [sp]
 80238cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80238d0:	4620      	mov	r0, r4
 80238d2:	4629      	mov	r1, r5
 80238d4:	f7dc feb0 	bl	8000638 <__aeabi_dmul>
 80238d8:	2222      	movs	r2, #34	; 0x22
 80238da:	b003      	add	sp, #12
 80238dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80238e0:	f7ff bfe2 	b.w	80238a8 <with_errno>

080238e4 <__math_uflow>:
 80238e4:	b508      	push	{r3, lr}
 80238e6:	2200      	movs	r2, #0
 80238e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80238ec:	f7ff ffe6 	bl	80238bc <xflow>
 80238f0:	ec41 0b10 	vmov	d0, r0, r1
 80238f4:	bd08      	pop	{r3, pc}

080238f6 <__math_oflow>:
 80238f6:	b508      	push	{r3, lr}
 80238f8:	2200      	movs	r2, #0
 80238fa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80238fe:	f7ff ffdd 	bl	80238bc <xflow>
 8023902:	ec41 0b10 	vmov	d0, r0, r1
 8023906:	bd08      	pop	{r3, pc}

08023908 <fabs>:
 8023908:	ec51 0b10 	vmov	r0, r1, d0
 802390c:	ee10 2a10 	vmov	r2, s0
 8023910:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8023914:	ec43 2b10 	vmov	d0, r2, r3
 8023918:	4770      	bx	lr

0802391a <finite>:
 802391a:	b082      	sub	sp, #8
 802391c:	ed8d 0b00 	vstr	d0, [sp]
 8023920:	9801      	ldr	r0, [sp, #4]
 8023922:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8023926:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802392a:	0fc0      	lsrs	r0, r0, #31
 802392c:	b002      	add	sp, #8
 802392e:	4770      	bx	lr

08023930 <scalbn>:
 8023930:	b570      	push	{r4, r5, r6, lr}
 8023932:	ec55 4b10 	vmov	r4, r5, d0
 8023936:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802393a:	4606      	mov	r6, r0
 802393c:	462b      	mov	r3, r5
 802393e:	b99a      	cbnz	r2, 8023968 <scalbn+0x38>
 8023940:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023944:	4323      	orrs	r3, r4
 8023946:	d036      	beq.n	80239b6 <scalbn+0x86>
 8023948:	4b39      	ldr	r3, [pc, #228]	; (8023a30 <scalbn+0x100>)
 802394a:	4629      	mov	r1, r5
 802394c:	ee10 0a10 	vmov	r0, s0
 8023950:	2200      	movs	r2, #0
 8023952:	f7dc fe71 	bl	8000638 <__aeabi_dmul>
 8023956:	4b37      	ldr	r3, [pc, #220]	; (8023a34 <scalbn+0x104>)
 8023958:	429e      	cmp	r6, r3
 802395a:	4604      	mov	r4, r0
 802395c:	460d      	mov	r5, r1
 802395e:	da10      	bge.n	8023982 <scalbn+0x52>
 8023960:	a32b      	add	r3, pc, #172	; (adr r3, 8023a10 <scalbn+0xe0>)
 8023962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023966:	e03a      	b.n	80239de <scalbn+0xae>
 8023968:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802396c:	428a      	cmp	r2, r1
 802396e:	d10c      	bne.n	802398a <scalbn+0x5a>
 8023970:	ee10 2a10 	vmov	r2, s0
 8023974:	4620      	mov	r0, r4
 8023976:	4629      	mov	r1, r5
 8023978:	f7dc fca8 	bl	80002cc <__adddf3>
 802397c:	4604      	mov	r4, r0
 802397e:	460d      	mov	r5, r1
 8023980:	e019      	b.n	80239b6 <scalbn+0x86>
 8023982:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8023986:	460b      	mov	r3, r1
 8023988:	3a36      	subs	r2, #54	; 0x36
 802398a:	4432      	add	r2, r6
 802398c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8023990:	428a      	cmp	r2, r1
 8023992:	dd08      	ble.n	80239a6 <scalbn+0x76>
 8023994:	2d00      	cmp	r5, #0
 8023996:	a120      	add	r1, pc, #128	; (adr r1, 8023a18 <scalbn+0xe8>)
 8023998:	e9d1 0100 	ldrd	r0, r1, [r1]
 802399c:	da1c      	bge.n	80239d8 <scalbn+0xa8>
 802399e:	a120      	add	r1, pc, #128	; (adr r1, 8023a20 <scalbn+0xf0>)
 80239a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80239a4:	e018      	b.n	80239d8 <scalbn+0xa8>
 80239a6:	2a00      	cmp	r2, #0
 80239a8:	dd08      	ble.n	80239bc <scalbn+0x8c>
 80239aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80239ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80239b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80239b6:	ec45 4b10 	vmov	d0, r4, r5
 80239ba:	bd70      	pop	{r4, r5, r6, pc}
 80239bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80239c0:	da19      	bge.n	80239f6 <scalbn+0xc6>
 80239c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80239c6:	429e      	cmp	r6, r3
 80239c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80239cc:	dd0a      	ble.n	80239e4 <scalbn+0xb4>
 80239ce:	a112      	add	r1, pc, #72	; (adr r1, 8023a18 <scalbn+0xe8>)
 80239d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80239d4:	2b00      	cmp	r3, #0
 80239d6:	d1e2      	bne.n	802399e <scalbn+0x6e>
 80239d8:	a30f      	add	r3, pc, #60	; (adr r3, 8023a18 <scalbn+0xe8>)
 80239da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239de:	f7dc fe2b 	bl	8000638 <__aeabi_dmul>
 80239e2:	e7cb      	b.n	802397c <scalbn+0x4c>
 80239e4:	a10a      	add	r1, pc, #40	; (adr r1, 8023a10 <scalbn+0xe0>)
 80239e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	d0b8      	beq.n	8023960 <scalbn+0x30>
 80239ee:	a10e      	add	r1, pc, #56	; (adr r1, 8023a28 <scalbn+0xf8>)
 80239f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80239f4:	e7b4      	b.n	8023960 <scalbn+0x30>
 80239f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80239fa:	3236      	adds	r2, #54	; 0x36
 80239fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023a00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8023a04:	4620      	mov	r0, r4
 8023a06:	4b0c      	ldr	r3, [pc, #48]	; (8023a38 <scalbn+0x108>)
 8023a08:	2200      	movs	r2, #0
 8023a0a:	e7e8      	b.n	80239de <scalbn+0xae>
 8023a0c:	f3af 8000 	nop.w
 8023a10:	c2f8f359 	.word	0xc2f8f359
 8023a14:	01a56e1f 	.word	0x01a56e1f
 8023a18:	8800759c 	.word	0x8800759c
 8023a1c:	7e37e43c 	.word	0x7e37e43c
 8023a20:	8800759c 	.word	0x8800759c
 8023a24:	fe37e43c 	.word	0xfe37e43c
 8023a28:	c2f8f359 	.word	0xc2f8f359
 8023a2c:	81a56e1f 	.word	0x81a56e1f
 8023a30:	43500000 	.word	0x43500000
 8023a34:	ffff3cb0 	.word	0xffff3cb0
 8023a38:	3c900000 	.word	0x3c900000

08023a3c <abort>:
 8023a3c:	b508      	push	{r3, lr}
 8023a3e:	2006      	movs	r0, #6
 8023a40:	f000 fb46 	bl	80240d0 <raise>
 8023a44:	2001      	movs	r0, #1
 8023a46:	f7e6 ffe9 	bl	800aa1c <_exit>

08023a4a <atexit>:
 8023a4a:	2300      	movs	r3, #0
 8023a4c:	4601      	mov	r1, r0
 8023a4e:	461a      	mov	r2, r3
 8023a50:	4618      	mov	r0, r3
 8023a52:	f000 bc01 	b.w	8024258 <__register_exitproc>
	...

08023a58 <__errno>:
 8023a58:	4b01      	ldr	r3, [pc, #4]	; (8023a60 <__errno+0x8>)
 8023a5a:	6818      	ldr	r0, [r3, #0]
 8023a5c:	4770      	bx	lr
 8023a5e:	bf00      	nop
 8023a60:	20000040 	.word	0x20000040

08023a64 <std>:
 8023a64:	2300      	movs	r3, #0
 8023a66:	b510      	push	{r4, lr}
 8023a68:	4604      	mov	r4, r0
 8023a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8023a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023a72:	6083      	str	r3, [r0, #8]
 8023a74:	8181      	strh	r1, [r0, #12]
 8023a76:	6643      	str	r3, [r0, #100]	; 0x64
 8023a78:	81c2      	strh	r2, [r0, #14]
 8023a7a:	6183      	str	r3, [r0, #24]
 8023a7c:	4619      	mov	r1, r3
 8023a7e:	2208      	movs	r2, #8
 8023a80:	305c      	adds	r0, #92	; 0x5c
 8023a82:	f000 f955 	bl	8023d30 <memset>
 8023a86:	4b05      	ldr	r3, [pc, #20]	; (8023a9c <std+0x38>)
 8023a88:	6263      	str	r3, [r4, #36]	; 0x24
 8023a8a:	4b05      	ldr	r3, [pc, #20]	; (8023aa0 <std+0x3c>)
 8023a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8023a8e:	4b05      	ldr	r3, [pc, #20]	; (8023aa4 <std+0x40>)
 8023a90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023a92:	4b05      	ldr	r3, [pc, #20]	; (8023aa8 <std+0x44>)
 8023a94:	6224      	str	r4, [r4, #32]
 8023a96:	6323      	str	r3, [r4, #48]	; 0x30
 8023a98:	bd10      	pop	{r4, pc}
 8023a9a:	bf00      	nop
 8023a9c:	08024149 	.word	0x08024149
 8023aa0:	0802416b 	.word	0x0802416b
 8023aa4:	080241a3 	.word	0x080241a3
 8023aa8:	080241c7 	.word	0x080241c7

08023aac <_cleanup_r>:
 8023aac:	4901      	ldr	r1, [pc, #4]	; (8023ab4 <_cleanup_r+0x8>)
 8023aae:	f000 b8af 	b.w	8023c10 <_fwalk_reent>
 8023ab2:	bf00      	nop
 8023ab4:	08024485 	.word	0x08024485

08023ab8 <__sfmoreglue>:
 8023ab8:	b570      	push	{r4, r5, r6, lr}
 8023aba:	2268      	movs	r2, #104	; 0x68
 8023abc:	1e4d      	subs	r5, r1, #1
 8023abe:	4355      	muls	r5, r2
 8023ac0:	460e      	mov	r6, r1
 8023ac2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023ac6:	f000 f9a7 	bl	8023e18 <_malloc_r>
 8023aca:	4604      	mov	r4, r0
 8023acc:	b140      	cbz	r0, 8023ae0 <__sfmoreglue+0x28>
 8023ace:	2100      	movs	r1, #0
 8023ad0:	e9c0 1600 	strd	r1, r6, [r0]
 8023ad4:	300c      	adds	r0, #12
 8023ad6:	60a0      	str	r0, [r4, #8]
 8023ad8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023adc:	f000 f928 	bl	8023d30 <memset>
 8023ae0:	4620      	mov	r0, r4
 8023ae2:	bd70      	pop	{r4, r5, r6, pc}

08023ae4 <__sfp_lock_acquire>:
 8023ae4:	4801      	ldr	r0, [pc, #4]	; (8023aec <__sfp_lock_acquire+0x8>)
 8023ae6:	f000 b8d8 	b.w	8023c9a <__retarget_lock_acquire_recursive>
 8023aea:	bf00      	nop
 8023aec:	2000c111 	.word	0x2000c111

08023af0 <__sfp_lock_release>:
 8023af0:	4801      	ldr	r0, [pc, #4]	; (8023af8 <__sfp_lock_release+0x8>)
 8023af2:	f000 b8d4 	b.w	8023c9e <__retarget_lock_release_recursive>
 8023af6:	bf00      	nop
 8023af8:	2000c111 	.word	0x2000c111

08023afc <__sinit_lock_acquire>:
 8023afc:	4801      	ldr	r0, [pc, #4]	; (8023b04 <__sinit_lock_acquire+0x8>)
 8023afe:	f000 b8cc 	b.w	8023c9a <__retarget_lock_acquire_recursive>
 8023b02:	bf00      	nop
 8023b04:	2000c112 	.word	0x2000c112

08023b08 <__sinit_lock_release>:
 8023b08:	4801      	ldr	r0, [pc, #4]	; (8023b10 <__sinit_lock_release+0x8>)
 8023b0a:	f000 b8c8 	b.w	8023c9e <__retarget_lock_release_recursive>
 8023b0e:	bf00      	nop
 8023b10:	2000c112 	.word	0x2000c112

08023b14 <__sinit>:
 8023b14:	b510      	push	{r4, lr}
 8023b16:	4604      	mov	r4, r0
 8023b18:	f7ff fff0 	bl	8023afc <__sinit_lock_acquire>
 8023b1c:	69a3      	ldr	r3, [r4, #24]
 8023b1e:	b11b      	cbz	r3, 8023b28 <__sinit+0x14>
 8023b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023b24:	f7ff bff0 	b.w	8023b08 <__sinit_lock_release>
 8023b28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023b2c:	6523      	str	r3, [r4, #80]	; 0x50
 8023b2e:	4b13      	ldr	r3, [pc, #76]	; (8023b7c <__sinit+0x68>)
 8023b30:	4a13      	ldr	r2, [pc, #76]	; (8023b80 <__sinit+0x6c>)
 8023b32:	681b      	ldr	r3, [r3, #0]
 8023b34:	62a2      	str	r2, [r4, #40]	; 0x28
 8023b36:	42a3      	cmp	r3, r4
 8023b38:	bf04      	itt	eq
 8023b3a:	2301      	moveq	r3, #1
 8023b3c:	61a3      	streq	r3, [r4, #24]
 8023b3e:	4620      	mov	r0, r4
 8023b40:	f000 f820 	bl	8023b84 <__sfp>
 8023b44:	6060      	str	r0, [r4, #4]
 8023b46:	4620      	mov	r0, r4
 8023b48:	f000 f81c 	bl	8023b84 <__sfp>
 8023b4c:	60a0      	str	r0, [r4, #8]
 8023b4e:	4620      	mov	r0, r4
 8023b50:	f000 f818 	bl	8023b84 <__sfp>
 8023b54:	2200      	movs	r2, #0
 8023b56:	60e0      	str	r0, [r4, #12]
 8023b58:	2104      	movs	r1, #4
 8023b5a:	6860      	ldr	r0, [r4, #4]
 8023b5c:	f7ff ff82 	bl	8023a64 <std>
 8023b60:	68a0      	ldr	r0, [r4, #8]
 8023b62:	2201      	movs	r2, #1
 8023b64:	2109      	movs	r1, #9
 8023b66:	f7ff ff7d 	bl	8023a64 <std>
 8023b6a:	68e0      	ldr	r0, [r4, #12]
 8023b6c:	2202      	movs	r2, #2
 8023b6e:	2112      	movs	r1, #18
 8023b70:	f7ff ff78 	bl	8023a64 <std>
 8023b74:	2301      	movs	r3, #1
 8023b76:	61a3      	str	r3, [r4, #24]
 8023b78:	e7d2      	b.n	8023b20 <__sinit+0xc>
 8023b7a:	bf00      	nop
 8023b7c:	08028c18 	.word	0x08028c18
 8023b80:	08023aad 	.word	0x08023aad

08023b84 <__sfp>:
 8023b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b86:	4607      	mov	r7, r0
 8023b88:	f7ff ffac 	bl	8023ae4 <__sfp_lock_acquire>
 8023b8c:	4b1e      	ldr	r3, [pc, #120]	; (8023c08 <__sfp+0x84>)
 8023b8e:	681e      	ldr	r6, [r3, #0]
 8023b90:	69b3      	ldr	r3, [r6, #24]
 8023b92:	b913      	cbnz	r3, 8023b9a <__sfp+0x16>
 8023b94:	4630      	mov	r0, r6
 8023b96:	f7ff ffbd 	bl	8023b14 <__sinit>
 8023b9a:	3648      	adds	r6, #72	; 0x48
 8023b9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023ba0:	3b01      	subs	r3, #1
 8023ba2:	d503      	bpl.n	8023bac <__sfp+0x28>
 8023ba4:	6833      	ldr	r3, [r6, #0]
 8023ba6:	b30b      	cbz	r3, 8023bec <__sfp+0x68>
 8023ba8:	6836      	ldr	r6, [r6, #0]
 8023baa:	e7f7      	b.n	8023b9c <__sfp+0x18>
 8023bac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023bb0:	b9d5      	cbnz	r5, 8023be8 <__sfp+0x64>
 8023bb2:	4b16      	ldr	r3, [pc, #88]	; (8023c0c <__sfp+0x88>)
 8023bb4:	60e3      	str	r3, [r4, #12]
 8023bb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023bba:	6665      	str	r5, [r4, #100]	; 0x64
 8023bbc:	f000 f86c 	bl	8023c98 <__retarget_lock_init_recursive>
 8023bc0:	f7ff ff96 	bl	8023af0 <__sfp_lock_release>
 8023bc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023bc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023bcc:	6025      	str	r5, [r4, #0]
 8023bce:	61a5      	str	r5, [r4, #24]
 8023bd0:	2208      	movs	r2, #8
 8023bd2:	4629      	mov	r1, r5
 8023bd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023bd8:	f000 f8aa 	bl	8023d30 <memset>
 8023bdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023be0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023be4:	4620      	mov	r0, r4
 8023be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023be8:	3468      	adds	r4, #104	; 0x68
 8023bea:	e7d9      	b.n	8023ba0 <__sfp+0x1c>
 8023bec:	2104      	movs	r1, #4
 8023bee:	4638      	mov	r0, r7
 8023bf0:	f7ff ff62 	bl	8023ab8 <__sfmoreglue>
 8023bf4:	4604      	mov	r4, r0
 8023bf6:	6030      	str	r0, [r6, #0]
 8023bf8:	2800      	cmp	r0, #0
 8023bfa:	d1d5      	bne.n	8023ba8 <__sfp+0x24>
 8023bfc:	f7ff ff78 	bl	8023af0 <__sfp_lock_release>
 8023c00:	230c      	movs	r3, #12
 8023c02:	603b      	str	r3, [r7, #0]
 8023c04:	e7ee      	b.n	8023be4 <__sfp+0x60>
 8023c06:	bf00      	nop
 8023c08:	08028c18 	.word	0x08028c18
 8023c0c:	ffff0001 	.word	0xffff0001

08023c10 <_fwalk_reent>:
 8023c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023c14:	4606      	mov	r6, r0
 8023c16:	4688      	mov	r8, r1
 8023c18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023c1c:	2700      	movs	r7, #0
 8023c1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023c22:	f1b9 0901 	subs.w	r9, r9, #1
 8023c26:	d505      	bpl.n	8023c34 <_fwalk_reent+0x24>
 8023c28:	6824      	ldr	r4, [r4, #0]
 8023c2a:	2c00      	cmp	r4, #0
 8023c2c:	d1f7      	bne.n	8023c1e <_fwalk_reent+0xe>
 8023c2e:	4638      	mov	r0, r7
 8023c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023c34:	89ab      	ldrh	r3, [r5, #12]
 8023c36:	2b01      	cmp	r3, #1
 8023c38:	d907      	bls.n	8023c4a <_fwalk_reent+0x3a>
 8023c3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023c3e:	3301      	adds	r3, #1
 8023c40:	d003      	beq.n	8023c4a <_fwalk_reent+0x3a>
 8023c42:	4629      	mov	r1, r5
 8023c44:	4630      	mov	r0, r6
 8023c46:	47c0      	blx	r8
 8023c48:	4307      	orrs	r7, r0
 8023c4a:	3568      	adds	r5, #104	; 0x68
 8023c4c:	e7e9      	b.n	8023c22 <_fwalk_reent+0x12>
	...

08023c50 <__libc_init_array>:
 8023c50:	b570      	push	{r4, r5, r6, lr}
 8023c52:	4d0d      	ldr	r5, [pc, #52]	; (8023c88 <__libc_init_array+0x38>)
 8023c54:	4c0d      	ldr	r4, [pc, #52]	; (8023c8c <__libc_init_array+0x3c>)
 8023c56:	1b64      	subs	r4, r4, r5
 8023c58:	10a4      	asrs	r4, r4, #2
 8023c5a:	2600      	movs	r6, #0
 8023c5c:	42a6      	cmp	r6, r4
 8023c5e:	d109      	bne.n	8023c74 <__libc_init_array+0x24>
 8023c60:	4d0b      	ldr	r5, [pc, #44]	; (8023c90 <__libc_init_array+0x40>)
 8023c62:	4c0c      	ldr	r4, [pc, #48]	; (8023c94 <__libc_init_array+0x44>)
 8023c64:	f001 fa4a 	bl	80250fc <_init>
 8023c68:	1b64      	subs	r4, r4, r5
 8023c6a:	10a4      	asrs	r4, r4, #2
 8023c6c:	2600      	movs	r6, #0
 8023c6e:	42a6      	cmp	r6, r4
 8023c70:	d105      	bne.n	8023c7e <__libc_init_array+0x2e>
 8023c72:	bd70      	pop	{r4, r5, r6, pc}
 8023c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8023c78:	4798      	blx	r3
 8023c7a:	3601      	adds	r6, #1
 8023c7c:	e7ee      	b.n	8023c5c <__libc_init_array+0xc>
 8023c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8023c82:	4798      	blx	r3
 8023c84:	3601      	adds	r6, #1
 8023c86:	e7f2      	b.n	8023c6e <__libc_init_array+0x1e>
 8023c88:	08028d08 	.word	0x08028d08
 8023c8c:	08028d08 	.word	0x08028d08
 8023c90:	08028d08 	.word	0x08028d08
 8023c94:	08028d10 	.word	0x08028d10

08023c98 <__retarget_lock_init_recursive>:
 8023c98:	4770      	bx	lr

08023c9a <__retarget_lock_acquire_recursive>:
 8023c9a:	4770      	bx	lr

08023c9c <__retarget_lock_release>:
 8023c9c:	4770      	bx	lr

08023c9e <__retarget_lock_release_recursive>:
 8023c9e:	4770      	bx	lr

08023ca0 <malloc>:
 8023ca0:	4b02      	ldr	r3, [pc, #8]	; (8023cac <malloc+0xc>)
 8023ca2:	4601      	mov	r1, r0
 8023ca4:	6818      	ldr	r0, [r3, #0]
 8023ca6:	f000 b8b7 	b.w	8023e18 <_malloc_r>
 8023caa:	bf00      	nop
 8023cac:	20000040 	.word	0x20000040

08023cb0 <free>:
 8023cb0:	4b02      	ldr	r3, [pc, #8]	; (8023cbc <free+0xc>)
 8023cb2:	4601      	mov	r1, r0
 8023cb4:	6818      	ldr	r0, [r3, #0]
 8023cb6:	f000 b843 	b.w	8023d40 <_free_r>
 8023cba:	bf00      	nop
 8023cbc:	20000040 	.word	0x20000040

08023cc0 <memcmp>:
 8023cc0:	b510      	push	{r4, lr}
 8023cc2:	3901      	subs	r1, #1
 8023cc4:	4402      	add	r2, r0
 8023cc6:	4290      	cmp	r0, r2
 8023cc8:	d101      	bne.n	8023cce <memcmp+0xe>
 8023cca:	2000      	movs	r0, #0
 8023ccc:	e005      	b.n	8023cda <memcmp+0x1a>
 8023cce:	7803      	ldrb	r3, [r0, #0]
 8023cd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023cd4:	42a3      	cmp	r3, r4
 8023cd6:	d001      	beq.n	8023cdc <memcmp+0x1c>
 8023cd8:	1b18      	subs	r0, r3, r4
 8023cda:	bd10      	pop	{r4, pc}
 8023cdc:	3001      	adds	r0, #1
 8023cde:	e7f2      	b.n	8023cc6 <memcmp+0x6>

08023ce0 <memcpy>:
 8023ce0:	440a      	add	r2, r1
 8023ce2:	4291      	cmp	r1, r2
 8023ce4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8023ce8:	d100      	bne.n	8023cec <memcpy+0xc>
 8023cea:	4770      	bx	lr
 8023cec:	b510      	push	{r4, lr}
 8023cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023cf6:	4291      	cmp	r1, r2
 8023cf8:	d1f9      	bne.n	8023cee <memcpy+0xe>
 8023cfa:	bd10      	pop	{r4, pc}

08023cfc <memmove>:
 8023cfc:	4288      	cmp	r0, r1
 8023cfe:	b510      	push	{r4, lr}
 8023d00:	eb01 0402 	add.w	r4, r1, r2
 8023d04:	d902      	bls.n	8023d0c <memmove+0x10>
 8023d06:	4284      	cmp	r4, r0
 8023d08:	4623      	mov	r3, r4
 8023d0a:	d807      	bhi.n	8023d1c <memmove+0x20>
 8023d0c:	1e43      	subs	r3, r0, #1
 8023d0e:	42a1      	cmp	r1, r4
 8023d10:	d008      	beq.n	8023d24 <memmove+0x28>
 8023d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023d16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023d1a:	e7f8      	b.n	8023d0e <memmove+0x12>
 8023d1c:	4402      	add	r2, r0
 8023d1e:	4601      	mov	r1, r0
 8023d20:	428a      	cmp	r2, r1
 8023d22:	d100      	bne.n	8023d26 <memmove+0x2a>
 8023d24:	bd10      	pop	{r4, pc}
 8023d26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023d2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023d2e:	e7f7      	b.n	8023d20 <memmove+0x24>

08023d30 <memset>:
 8023d30:	4402      	add	r2, r0
 8023d32:	4603      	mov	r3, r0
 8023d34:	4293      	cmp	r3, r2
 8023d36:	d100      	bne.n	8023d3a <memset+0xa>
 8023d38:	4770      	bx	lr
 8023d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8023d3e:	e7f9      	b.n	8023d34 <memset+0x4>

08023d40 <_free_r>:
 8023d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023d42:	2900      	cmp	r1, #0
 8023d44:	d044      	beq.n	8023dd0 <_free_r+0x90>
 8023d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023d4a:	9001      	str	r0, [sp, #4]
 8023d4c:	2b00      	cmp	r3, #0
 8023d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8023d52:	bfb8      	it	lt
 8023d54:	18e4      	addlt	r4, r4, r3
 8023d56:	f7dd fb11 	bl	800137c <__malloc_lock>
 8023d5a:	4a1e      	ldr	r2, [pc, #120]	; (8023dd4 <_free_r+0x94>)
 8023d5c:	9801      	ldr	r0, [sp, #4]
 8023d5e:	6813      	ldr	r3, [r2, #0]
 8023d60:	b933      	cbnz	r3, 8023d70 <_free_r+0x30>
 8023d62:	6063      	str	r3, [r4, #4]
 8023d64:	6014      	str	r4, [r2, #0]
 8023d66:	b003      	add	sp, #12
 8023d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023d6c:	f7dd bb31 	b.w	80013d2 <__malloc_unlock>
 8023d70:	42a3      	cmp	r3, r4
 8023d72:	d908      	bls.n	8023d86 <_free_r+0x46>
 8023d74:	6825      	ldr	r5, [r4, #0]
 8023d76:	1961      	adds	r1, r4, r5
 8023d78:	428b      	cmp	r3, r1
 8023d7a:	bf01      	itttt	eq
 8023d7c:	6819      	ldreq	r1, [r3, #0]
 8023d7e:	685b      	ldreq	r3, [r3, #4]
 8023d80:	1949      	addeq	r1, r1, r5
 8023d82:	6021      	streq	r1, [r4, #0]
 8023d84:	e7ed      	b.n	8023d62 <_free_r+0x22>
 8023d86:	461a      	mov	r2, r3
 8023d88:	685b      	ldr	r3, [r3, #4]
 8023d8a:	b10b      	cbz	r3, 8023d90 <_free_r+0x50>
 8023d8c:	42a3      	cmp	r3, r4
 8023d8e:	d9fa      	bls.n	8023d86 <_free_r+0x46>
 8023d90:	6811      	ldr	r1, [r2, #0]
 8023d92:	1855      	adds	r5, r2, r1
 8023d94:	42a5      	cmp	r5, r4
 8023d96:	d10b      	bne.n	8023db0 <_free_r+0x70>
 8023d98:	6824      	ldr	r4, [r4, #0]
 8023d9a:	4421      	add	r1, r4
 8023d9c:	1854      	adds	r4, r2, r1
 8023d9e:	42a3      	cmp	r3, r4
 8023da0:	6011      	str	r1, [r2, #0]
 8023da2:	d1e0      	bne.n	8023d66 <_free_r+0x26>
 8023da4:	681c      	ldr	r4, [r3, #0]
 8023da6:	685b      	ldr	r3, [r3, #4]
 8023da8:	6053      	str	r3, [r2, #4]
 8023daa:	4421      	add	r1, r4
 8023dac:	6011      	str	r1, [r2, #0]
 8023dae:	e7da      	b.n	8023d66 <_free_r+0x26>
 8023db0:	d902      	bls.n	8023db8 <_free_r+0x78>
 8023db2:	230c      	movs	r3, #12
 8023db4:	6003      	str	r3, [r0, #0]
 8023db6:	e7d6      	b.n	8023d66 <_free_r+0x26>
 8023db8:	6825      	ldr	r5, [r4, #0]
 8023dba:	1961      	adds	r1, r4, r5
 8023dbc:	428b      	cmp	r3, r1
 8023dbe:	bf04      	itt	eq
 8023dc0:	6819      	ldreq	r1, [r3, #0]
 8023dc2:	685b      	ldreq	r3, [r3, #4]
 8023dc4:	6063      	str	r3, [r4, #4]
 8023dc6:	bf04      	itt	eq
 8023dc8:	1949      	addeq	r1, r1, r5
 8023dca:	6021      	streq	r1, [r4, #0]
 8023dcc:	6054      	str	r4, [r2, #4]
 8023dce:	e7ca      	b.n	8023d66 <_free_r+0x26>
 8023dd0:	b003      	add	sp, #12
 8023dd2:	bd30      	pop	{r4, r5, pc}
 8023dd4:	2000c114 	.word	0x2000c114

08023dd8 <sbrk_aligned>:
 8023dd8:	b570      	push	{r4, r5, r6, lr}
 8023dda:	4e0e      	ldr	r6, [pc, #56]	; (8023e14 <sbrk_aligned+0x3c>)
 8023ddc:	460c      	mov	r4, r1
 8023dde:	6831      	ldr	r1, [r6, #0]
 8023de0:	4605      	mov	r5, r0
 8023de2:	b911      	cbnz	r1, 8023dea <sbrk_aligned+0x12>
 8023de4:	f7dd fa6e 	bl	80012c4 <_sbrk_r>
 8023de8:	6030      	str	r0, [r6, #0]
 8023dea:	4621      	mov	r1, r4
 8023dec:	4628      	mov	r0, r5
 8023dee:	f7dd fa69 	bl	80012c4 <_sbrk_r>
 8023df2:	1c43      	adds	r3, r0, #1
 8023df4:	d00a      	beq.n	8023e0c <sbrk_aligned+0x34>
 8023df6:	1cc4      	adds	r4, r0, #3
 8023df8:	f024 0403 	bic.w	r4, r4, #3
 8023dfc:	42a0      	cmp	r0, r4
 8023dfe:	d007      	beq.n	8023e10 <sbrk_aligned+0x38>
 8023e00:	1a21      	subs	r1, r4, r0
 8023e02:	4628      	mov	r0, r5
 8023e04:	f7dd fa5e 	bl	80012c4 <_sbrk_r>
 8023e08:	3001      	adds	r0, #1
 8023e0a:	d101      	bne.n	8023e10 <sbrk_aligned+0x38>
 8023e0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8023e10:	4620      	mov	r0, r4
 8023e12:	bd70      	pop	{r4, r5, r6, pc}
 8023e14:	2000c118 	.word	0x2000c118

08023e18 <_malloc_r>:
 8023e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023e1c:	1ccd      	adds	r5, r1, #3
 8023e1e:	f025 0503 	bic.w	r5, r5, #3
 8023e22:	3508      	adds	r5, #8
 8023e24:	2d0c      	cmp	r5, #12
 8023e26:	bf38      	it	cc
 8023e28:	250c      	movcc	r5, #12
 8023e2a:	2d00      	cmp	r5, #0
 8023e2c:	4607      	mov	r7, r0
 8023e2e:	db01      	blt.n	8023e34 <_malloc_r+0x1c>
 8023e30:	42a9      	cmp	r1, r5
 8023e32:	d905      	bls.n	8023e40 <_malloc_r+0x28>
 8023e34:	230c      	movs	r3, #12
 8023e36:	603b      	str	r3, [r7, #0]
 8023e38:	2600      	movs	r6, #0
 8023e3a:	4630      	mov	r0, r6
 8023e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023e40:	4e2e      	ldr	r6, [pc, #184]	; (8023efc <_malloc_r+0xe4>)
 8023e42:	f7dd fa9b 	bl	800137c <__malloc_lock>
 8023e46:	6833      	ldr	r3, [r6, #0]
 8023e48:	461c      	mov	r4, r3
 8023e4a:	bb34      	cbnz	r4, 8023e9a <_malloc_r+0x82>
 8023e4c:	4629      	mov	r1, r5
 8023e4e:	4638      	mov	r0, r7
 8023e50:	f7ff ffc2 	bl	8023dd8 <sbrk_aligned>
 8023e54:	1c43      	adds	r3, r0, #1
 8023e56:	4604      	mov	r4, r0
 8023e58:	d14d      	bne.n	8023ef6 <_malloc_r+0xde>
 8023e5a:	6834      	ldr	r4, [r6, #0]
 8023e5c:	4626      	mov	r6, r4
 8023e5e:	2e00      	cmp	r6, #0
 8023e60:	d140      	bne.n	8023ee4 <_malloc_r+0xcc>
 8023e62:	6823      	ldr	r3, [r4, #0]
 8023e64:	4631      	mov	r1, r6
 8023e66:	4638      	mov	r0, r7
 8023e68:	eb04 0803 	add.w	r8, r4, r3
 8023e6c:	f7dd fa2a 	bl	80012c4 <_sbrk_r>
 8023e70:	4580      	cmp	r8, r0
 8023e72:	d13a      	bne.n	8023eea <_malloc_r+0xd2>
 8023e74:	6821      	ldr	r1, [r4, #0]
 8023e76:	3503      	adds	r5, #3
 8023e78:	1a6d      	subs	r5, r5, r1
 8023e7a:	f025 0503 	bic.w	r5, r5, #3
 8023e7e:	3508      	adds	r5, #8
 8023e80:	2d0c      	cmp	r5, #12
 8023e82:	bf38      	it	cc
 8023e84:	250c      	movcc	r5, #12
 8023e86:	4629      	mov	r1, r5
 8023e88:	4638      	mov	r0, r7
 8023e8a:	f7ff ffa5 	bl	8023dd8 <sbrk_aligned>
 8023e8e:	3001      	adds	r0, #1
 8023e90:	d02b      	beq.n	8023eea <_malloc_r+0xd2>
 8023e92:	6823      	ldr	r3, [r4, #0]
 8023e94:	442b      	add	r3, r5
 8023e96:	6023      	str	r3, [r4, #0]
 8023e98:	e00e      	b.n	8023eb8 <_malloc_r+0xa0>
 8023e9a:	6822      	ldr	r2, [r4, #0]
 8023e9c:	1b52      	subs	r2, r2, r5
 8023e9e:	d41e      	bmi.n	8023ede <_malloc_r+0xc6>
 8023ea0:	2a0b      	cmp	r2, #11
 8023ea2:	d916      	bls.n	8023ed2 <_malloc_r+0xba>
 8023ea4:	1961      	adds	r1, r4, r5
 8023ea6:	42a3      	cmp	r3, r4
 8023ea8:	6025      	str	r5, [r4, #0]
 8023eaa:	bf18      	it	ne
 8023eac:	6059      	strne	r1, [r3, #4]
 8023eae:	6863      	ldr	r3, [r4, #4]
 8023eb0:	bf08      	it	eq
 8023eb2:	6031      	streq	r1, [r6, #0]
 8023eb4:	5162      	str	r2, [r4, r5]
 8023eb6:	604b      	str	r3, [r1, #4]
 8023eb8:	4638      	mov	r0, r7
 8023eba:	f104 060b 	add.w	r6, r4, #11
 8023ebe:	f7dd fa88 	bl	80013d2 <__malloc_unlock>
 8023ec2:	f026 0607 	bic.w	r6, r6, #7
 8023ec6:	1d23      	adds	r3, r4, #4
 8023ec8:	1af2      	subs	r2, r6, r3
 8023eca:	d0b6      	beq.n	8023e3a <_malloc_r+0x22>
 8023ecc:	1b9b      	subs	r3, r3, r6
 8023ece:	50a3      	str	r3, [r4, r2]
 8023ed0:	e7b3      	b.n	8023e3a <_malloc_r+0x22>
 8023ed2:	6862      	ldr	r2, [r4, #4]
 8023ed4:	42a3      	cmp	r3, r4
 8023ed6:	bf0c      	ite	eq
 8023ed8:	6032      	streq	r2, [r6, #0]
 8023eda:	605a      	strne	r2, [r3, #4]
 8023edc:	e7ec      	b.n	8023eb8 <_malloc_r+0xa0>
 8023ede:	4623      	mov	r3, r4
 8023ee0:	6864      	ldr	r4, [r4, #4]
 8023ee2:	e7b2      	b.n	8023e4a <_malloc_r+0x32>
 8023ee4:	4634      	mov	r4, r6
 8023ee6:	6876      	ldr	r6, [r6, #4]
 8023ee8:	e7b9      	b.n	8023e5e <_malloc_r+0x46>
 8023eea:	230c      	movs	r3, #12
 8023eec:	603b      	str	r3, [r7, #0]
 8023eee:	4638      	mov	r0, r7
 8023ef0:	f7dd fa6f 	bl	80013d2 <__malloc_unlock>
 8023ef4:	e7a1      	b.n	8023e3a <_malloc_r+0x22>
 8023ef6:	6025      	str	r5, [r4, #0]
 8023ef8:	e7de      	b.n	8023eb8 <_malloc_r+0xa0>
 8023efa:	bf00      	nop
 8023efc:	2000c114 	.word	0x2000c114

08023f00 <iprintf>:
 8023f00:	b40f      	push	{r0, r1, r2, r3}
 8023f02:	4b0a      	ldr	r3, [pc, #40]	; (8023f2c <iprintf+0x2c>)
 8023f04:	b513      	push	{r0, r1, r4, lr}
 8023f06:	681c      	ldr	r4, [r3, #0]
 8023f08:	b124      	cbz	r4, 8023f14 <iprintf+0x14>
 8023f0a:	69a3      	ldr	r3, [r4, #24]
 8023f0c:	b913      	cbnz	r3, 8023f14 <iprintf+0x14>
 8023f0e:	4620      	mov	r0, r4
 8023f10:	f7ff fe00 	bl	8023b14 <__sinit>
 8023f14:	ab05      	add	r3, sp, #20
 8023f16:	9a04      	ldr	r2, [sp, #16]
 8023f18:	68a1      	ldr	r1, [r4, #8]
 8023f1a:	9301      	str	r3, [sp, #4]
 8023f1c:	4620      	mov	r0, r4
 8023f1e:	f000 fc97 	bl	8024850 <_vfiprintf_r>
 8023f22:	b002      	add	sp, #8
 8023f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023f28:	b004      	add	sp, #16
 8023f2a:	4770      	bx	lr
 8023f2c:	20000040 	.word	0x20000040

08023f30 <rand>:
 8023f30:	4b16      	ldr	r3, [pc, #88]	; (8023f8c <rand+0x5c>)
 8023f32:	b510      	push	{r4, lr}
 8023f34:	681c      	ldr	r4, [r3, #0]
 8023f36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023f38:	b9b3      	cbnz	r3, 8023f68 <rand+0x38>
 8023f3a:	2018      	movs	r0, #24
 8023f3c:	f7ff feb0 	bl	8023ca0 <malloc>
 8023f40:	63a0      	str	r0, [r4, #56]	; 0x38
 8023f42:	b928      	cbnz	r0, 8023f50 <rand+0x20>
 8023f44:	4602      	mov	r2, r0
 8023f46:	4b12      	ldr	r3, [pc, #72]	; (8023f90 <rand+0x60>)
 8023f48:	4812      	ldr	r0, [pc, #72]	; (8023f94 <rand+0x64>)
 8023f4a:	214e      	movs	r1, #78	; 0x4e
 8023f4c:	f000 f9e6 	bl	802431c <__assert_func>
 8023f50:	4a11      	ldr	r2, [pc, #68]	; (8023f98 <rand+0x68>)
 8023f52:	4b12      	ldr	r3, [pc, #72]	; (8023f9c <rand+0x6c>)
 8023f54:	e9c0 2300 	strd	r2, r3, [r0]
 8023f58:	4b11      	ldr	r3, [pc, #68]	; (8023fa0 <rand+0x70>)
 8023f5a:	6083      	str	r3, [r0, #8]
 8023f5c:	230b      	movs	r3, #11
 8023f5e:	8183      	strh	r3, [r0, #12]
 8023f60:	2201      	movs	r2, #1
 8023f62:	2300      	movs	r3, #0
 8023f64:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8023f68:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8023f6a:	4a0e      	ldr	r2, [pc, #56]	; (8023fa4 <rand+0x74>)
 8023f6c:	6920      	ldr	r0, [r4, #16]
 8023f6e:	6963      	ldr	r3, [r4, #20]
 8023f70:	490d      	ldr	r1, [pc, #52]	; (8023fa8 <rand+0x78>)
 8023f72:	4342      	muls	r2, r0
 8023f74:	fb01 2203 	mla	r2, r1, r3, r2
 8023f78:	fba0 0101 	umull	r0, r1, r0, r1
 8023f7c:	1c43      	adds	r3, r0, #1
 8023f7e:	eb42 0001 	adc.w	r0, r2, r1
 8023f82:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8023f86:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8023f8a:	bd10      	pop	{r4, pc}
 8023f8c:	20000040 	.word	0x20000040
 8023f90:	08028c1c 	.word	0x08028c1c
 8023f94:	08028c33 	.word	0x08028c33
 8023f98:	abcd330e 	.word	0xabcd330e
 8023f9c:	e66d1234 	.word	0xe66d1234
 8023fa0:	0005deec 	.word	0x0005deec
 8023fa4:	5851f42d 	.word	0x5851f42d
 8023fa8:	4c957f2d 	.word	0x4c957f2d

08023fac <cleanup_glue>:
 8023fac:	b538      	push	{r3, r4, r5, lr}
 8023fae:	460c      	mov	r4, r1
 8023fb0:	6809      	ldr	r1, [r1, #0]
 8023fb2:	4605      	mov	r5, r0
 8023fb4:	b109      	cbz	r1, 8023fba <cleanup_glue+0xe>
 8023fb6:	f7ff fff9 	bl	8023fac <cleanup_glue>
 8023fba:	4621      	mov	r1, r4
 8023fbc:	4628      	mov	r0, r5
 8023fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023fc2:	f7ff bebd 	b.w	8023d40 <_free_r>
	...

08023fc8 <_reclaim_reent>:
 8023fc8:	4b2c      	ldr	r3, [pc, #176]	; (802407c <_reclaim_reent+0xb4>)
 8023fca:	681b      	ldr	r3, [r3, #0]
 8023fcc:	4283      	cmp	r3, r0
 8023fce:	b570      	push	{r4, r5, r6, lr}
 8023fd0:	4604      	mov	r4, r0
 8023fd2:	d051      	beq.n	8024078 <_reclaim_reent+0xb0>
 8023fd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8023fd6:	b143      	cbz	r3, 8023fea <_reclaim_reent+0x22>
 8023fd8:	68db      	ldr	r3, [r3, #12]
 8023fda:	2b00      	cmp	r3, #0
 8023fdc:	d14a      	bne.n	8024074 <_reclaim_reent+0xac>
 8023fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023fe0:	6819      	ldr	r1, [r3, #0]
 8023fe2:	b111      	cbz	r1, 8023fea <_reclaim_reent+0x22>
 8023fe4:	4620      	mov	r0, r4
 8023fe6:	f7ff feab 	bl	8023d40 <_free_r>
 8023fea:	6961      	ldr	r1, [r4, #20]
 8023fec:	b111      	cbz	r1, 8023ff4 <_reclaim_reent+0x2c>
 8023fee:	4620      	mov	r0, r4
 8023ff0:	f7ff fea6 	bl	8023d40 <_free_r>
 8023ff4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8023ff6:	b111      	cbz	r1, 8023ffe <_reclaim_reent+0x36>
 8023ff8:	4620      	mov	r0, r4
 8023ffa:	f7ff fea1 	bl	8023d40 <_free_r>
 8023ffe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8024000:	b111      	cbz	r1, 8024008 <_reclaim_reent+0x40>
 8024002:	4620      	mov	r0, r4
 8024004:	f7ff fe9c 	bl	8023d40 <_free_r>
 8024008:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802400a:	b111      	cbz	r1, 8024012 <_reclaim_reent+0x4a>
 802400c:	4620      	mov	r0, r4
 802400e:	f7ff fe97 	bl	8023d40 <_free_r>
 8024012:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024014:	b111      	cbz	r1, 802401c <_reclaim_reent+0x54>
 8024016:	4620      	mov	r0, r4
 8024018:	f7ff fe92 	bl	8023d40 <_free_r>
 802401c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802401e:	b111      	cbz	r1, 8024026 <_reclaim_reent+0x5e>
 8024020:	4620      	mov	r0, r4
 8024022:	f7ff fe8d 	bl	8023d40 <_free_r>
 8024026:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8024028:	b111      	cbz	r1, 8024030 <_reclaim_reent+0x68>
 802402a:	4620      	mov	r0, r4
 802402c:	f7ff fe88 	bl	8023d40 <_free_r>
 8024030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024032:	b111      	cbz	r1, 802403a <_reclaim_reent+0x72>
 8024034:	4620      	mov	r0, r4
 8024036:	f7ff fe83 	bl	8023d40 <_free_r>
 802403a:	69a3      	ldr	r3, [r4, #24]
 802403c:	b1e3      	cbz	r3, 8024078 <_reclaim_reent+0xb0>
 802403e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024040:	4620      	mov	r0, r4
 8024042:	4798      	blx	r3
 8024044:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8024046:	b1b9      	cbz	r1, 8024078 <_reclaim_reent+0xb0>
 8024048:	4620      	mov	r0, r4
 802404a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802404e:	f7ff bfad 	b.w	8023fac <cleanup_glue>
 8024052:	5949      	ldr	r1, [r1, r5]
 8024054:	b941      	cbnz	r1, 8024068 <_reclaim_reent+0xa0>
 8024056:	3504      	adds	r5, #4
 8024058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802405a:	2d80      	cmp	r5, #128	; 0x80
 802405c:	68d9      	ldr	r1, [r3, #12]
 802405e:	d1f8      	bne.n	8024052 <_reclaim_reent+0x8a>
 8024060:	4620      	mov	r0, r4
 8024062:	f7ff fe6d 	bl	8023d40 <_free_r>
 8024066:	e7ba      	b.n	8023fde <_reclaim_reent+0x16>
 8024068:	680e      	ldr	r6, [r1, #0]
 802406a:	4620      	mov	r0, r4
 802406c:	f7ff fe68 	bl	8023d40 <_free_r>
 8024070:	4631      	mov	r1, r6
 8024072:	e7ef      	b.n	8024054 <_reclaim_reent+0x8c>
 8024074:	2500      	movs	r5, #0
 8024076:	e7ef      	b.n	8024058 <_reclaim_reent+0x90>
 8024078:	bd70      	pop	{r4, r5, r6, pc}
 802407a:	bf00      	nop
 802407c:	20000040 	.word	0x20000040

08024080 <_raise_r>:
 8024080:	291f      	cmp	r1, #31
 8024082:	b538      	push	{r3, r4, r5, lr}
 8024084:	4604      	mov	r4, r0
 8024086:	460d      	mov	r5, r1
 8024088:	d904      	bls.n	8024094 <_raise_r+0x14>
 802408a:	2316      	movs	r3, #22
 802408c:	6003      	str	r3, [r0, #0]
 802408e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024092:	bd38      	pop	{r3, r4, r5, pc}
 8024094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8024096:	b112      	cbz	r2, 802409e <_raise_r+0x1e>
 8024098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802409c:	b94b      	cbnz	r3, 80240b2 <_raise_r+0x32>
 802409e:	4620      	mov	r0, r4
 80240a0:	f000 f830 	bl	8024104 <_getpid_r>
 80240a4:	462a      	mov	r2, r5
 80240a6:	4601      	mov	r1, r0
 80240a8:	4620      	mov	r0, r4
 80240aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80240ae:	f000 b817 	b.w	80240e0 <_kill_r>
 80240b2:	2b01      	cmp	r3, #1
 80240b4:	d00a      	beq.n	80240cc <_raise_r+0x4c>
 80240b6:	1c59      	adds	r1, r3, #1
 80240b8:	d103      	bne.n	80240c2 <_raise_r+0x42>
 80240ba:	2316      	movs	r3, #22
 80240bc:	6003      	str	r3, [r0, #0]
 80240be:	2001      	movs	r0, #1
 80240c0:	e7e7      	b.n	8024092 <_raise_r+0x12>
 80240c2:	2400      	movs	r4, #0
 80240c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80240c8:	4628      	mov	r0, r5
 80240ca:	4798      	blx	r3
 80240cc:	2000      	movs	r0, #0
 80240ce:	e7e0      	b.n	8024092 <_raise_r+0x12>

080240d0 <raise>:
 80240d0:	4b02      	ldr	r3, [pc, #8]	; (80240dc <raise+0xc>)
 80240d2:	4601      	mov	r1, r0
 80240d4:	6818      	ldr	r0, [r3, #0]
 80240d6:	f7ff bfd3 	b.w	8024080 <_raise_r>
 80240da:	bf00      	nop
 80240dc:	20000040 	.word	0x20000040

080240e0 <_kill_r>:
 80240e0:	b538      	push	{r3, r4, r5, lr}
 80240e2:	4d07      	ldr	r5, [pc, #28]	; (8024100 <_kill_r+0x20>)
 80240e4:	2300      	movs	r3, #0
 80240e6:	4604      	mov	r4, r0
 80240e8:	4608      	mov	r0, r1
 80240ea:	4611      	mov	r1, r2
 80240ec:	602b      	str	r3, [r5, #0]
 80240ee:	f7e6 fc83 	bl	800a9f8 <_kill>
 80240f2:	1c43      	adds	r3, r0, #1
 80240f4:	d102      	bne.n	80240fc <_kill_r+0x1c>
 80240f6:	682b      	ldr	r3, [r5, #0]
 80240f8:	b103      	cbz	r3, 80240fc <_kill_r+0x1c>
 80240fa:	6023      	str	r3, [r4, #0]
 80240fc:	bd38      	pop	{r3, r4, r5, pc}
 80240fe:	bf00      	nop
 8024100:	2000c11c 	.word	0x2000c11c

08024104 <_getpid_r>:
 8024104:	f7e6 bc70 	b.w	800a9e8 <_getpid>

08024108 <siprintf>:
 8024108:	b40e      	push	{r1, r2, r3}
 802410a:	b500      	push	{lr}
 802410c:	b09c      	sub	sp, #112	; 0x70
 802410e:	ab1d      	add	r3, sp, #116	; 0x74
 8024110:	9002      	str	r0, [sp, #8]
 8024112:	9006      	str	r0, [sp, #24]
 8024114:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024118:	4809      	ldr	r0, [pc, #36]	; (8024140 <siprintf+0x38>)
 802411a:	9107      	str	r1, [sp, #28]
 802411c:	9104      	str	r1, [sp, #16]
 802411e:	4909      	ldr	r1, [pc, #36]	; (8024144 <siprintf+0x3c>)
 8024120:	f853 2b04 	ldr.w	r2, [r3], #4
 8024124:	9105      	str	r1, [sp, #20]
 8024126:	6800      	ldr	r0, [r0, #0]
 8024128:	9301      	str	r3, [sp, #4]
 802412a:	a902      	add	r1, sp, #8
 802412c:	f000 fa66 	bl	80245fc <_svfiprintf_r>
 8024130:	9b02      	ldr	r3, [sp, #8]
 8024132:	2200      	movs	r2, #0
 8024134:	701a      	strb	r2, [r3, #0]
 8024136:	b01c      	add	sp, #112	; 0x70
 8024138:	f85d eb04 	ldr.w	lr, [sp], #4
 802413c:	b003      	add	sp, #12
 802413e:	4770      	bx	lr
 8024140:	20000040 	.word	0x20000040
 8024144:	ffff0208 	.word	0xffff0208

08024148 <__sread>:
 8024148:	b510      	push	{r4, lr}
 802414a:	460c      	mov	r4, r1
 802414c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024150:	f000 fe42 	bl	8024dd8 <_read_r>
 8024154:	2800      	cmp	r0, #0
 8024156:	bfab      	itete	ge
 8024158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802415a:	89a3      	ldrhlt	r3, [r4, #12]
 802415c:	181b      	addge	r3, r3, r0
 802415e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024162:	bfac      	ite	ge
 8024164:	6563      	strge	r3, [r4, #84]	; 0x54
 8024166:	81a3      	strhlt	r3, [r4, #12]
 8024168:	bd10      	pop	{r4, pc}

0802416a <__swrite>:
 802416a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802416e:	461f      	mov	r7, r3
 8024170:	898b      	ldrh	r3, [r1, #12]
 8024172:	05db      	lsls	r3, r3, #23
 8024174:	4605      	mov	r5, r0
 8024176:	460c      	mov	r4, r1
 8024178:	4616      	mov	r6, r2
 802417a:	d505      	bpl.n	8024188 <__swrite+0x1e>
 802417c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024180:	2302      	movs	r3, #2
 8024182:	2200      	movs	r2, #0
 8024184:	f000 f9cc 	bl	8024520 <_lseek_r>
 8024188:	89a3      	ldrh	r3, [r4, #12]
 802418a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802418e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024192:	81a3      	strh	r3, [r4, #12]
 8024194:	4632      	mov	r2, r6
 8024196:	463b      	mov	r3, r7
 8024198:	4628      	mov	r0, r5
 802419a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802419e:	f000 b849 	b.w	8024234 <_write_r>

080241a2 <__sseek>:
 80241a2:	b510      	push	{r4, lr}
 80241a4:	460c      	mov	r4, r1
 80241a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80241aa:	f000 f9b9 	bl	8024520 <_lseek_r>
 80241ae:	1c43      	adds	r3, r0, #1
 80241b0:	89a3      	ldrh	r3, [r4, #12]
 80241b2:	bf15      	itete	ne
 80241b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80241b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80241ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80241be:	81a3      	strheq	r3, [r4, #12]
 80241c0:	bf18      	it	ne
 80241c2:	81a3      	strhne	r3, [r4, #12]
 80241c4:	bd10      	pop	{r4, pc}

080241c6 <__sclose>:
 80241c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80241ca:	f000 b8c5 	b.w	8024358 <_close_r>

080241ce <strncpy>:
 80241ce:	b510      	push	{r4, lr}
 80241d0:	3901      	subs	r1, #1
 80241d2:	4603      	mov	r3, r0
 80241d4:	b132      	cbz	r2, 80241e4 <strncpy+0x16>
 80241d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80241da:	f803 4b01 	strb.w	r4, [r3], #1
 80241de:	3a01      	subs	r2, #1
 80241e0:	2c00      	cmp	r4, #0
 80241e2:	d1f7      	bne.n	80241d4 <strncpy+0x6>
 80241e4:	441a      	add	r2, r3
 80241e6:	2100      	movs	r1, #0
 80241e8:	4293      	cmp	r3, r2
 80241ea:	d100      	bne.n	80241ee <strncpy+0x20>
 80241ec:	bd10      	pop	{r4, pc}
 80241ee:	f803 1b01 	strb.w	r1, [r3], #1
 80241f2:	e7f9      	b.n	80241e8 <strncpy+0x1a>

080241f4 <_vsiprintf_r>:
 80241f4:	b500      	push	{lr}
 80241f6:	b09b      	sub	sp, #108	; 0x6c
 80241f8:	9100      	str	r1, [sp, #0]
 80241fa:	9104      	str	r1, [sp, #16]
 80241fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024200:	9105      	str	r1, [sp, #20]
 8024202:	9102      	str	r1, [sp, #8]
 8024204:	4905      	ldr	r1, [pc, #20]	; (802421c <_vsiprintf_r+0x28>)
 8024206:	9103      	str	r1, [sp, #12]
 8024208:	4669      	mov	r1, sp
 802420a:	f000 f9f7 	bl	80245fc <_svfiprintf_r>
 802420e:	9b00      	ldr	r3, [sp, #0]
 8024210:	2200      	movs	r2, #0
 8024212:	701a      	strb	r2, [r3, #0]
 8024214:	b01b      	add	sp, #108	; 0x6c
 8024216:	f85d fb04 	ldr.w	pc, [sp], #4
 802421a:	bf00      	nop
 802421c:	ffff0208 	.word	0xffff0208

08024220 <vsiprintf>:
 8024220:	4613      	mov	r3, r2
 8024222:	460a      	mov	r2, r1
 8024224:	4601      	mov	r1, r0
 8024226:	4802      	ldr	r0, [pc, #8]	; (8024230 <vsiprintf+0x10>)
 8024228:	6800      	ldr	r0, [r0, #0]
 802422a:	f7ff bfe3 	b.w	80241f4 <_vsiprintf_r>
 802422e:	bf00      	nop
 8024230:	20000040 	.word	0x20000040

08024234 <_write_r>:
 8024234:	b538      	push	{r3, r4, r5, lr}
 8024236:	4d07      	ldr	r5, [pc, #28]	; (8024254 <_write_r+0x20>)
 8024238:	4604      	mov	r4, r0
 802423a:	4608      	mov	r0, r1
 802423c:	4611      	mov	r1, r2
 802423e:	2200      	movs	r2, #0
 8024240:	602a      	str	r2, [r5, #0]
 8024242:	461a      	mov	r2, r3
 8024244:	f7e6 fc11 	bl	800aa6a <_write>
 8024248:	1c43      	adds	r3, r0, #1
 802424a:	d102      	bne.n	8024252 <_write_r+0x1e>
 802424c:	682b      	ldr	r3, [r5, #0]
 802424e:	b103      	cbz	r3, 8024252 <_write_r+0x1e>
 8024250:	6023      	str	r3, [r4, #0]
 8024252:	bd38      	pop	{r3, r4, r5, pc}
 8024254:	2000c11c 	.word	0x2000c11c

08024258 <__register_exitproc>:
 8024258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802425c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8024318 <__register_exitproc+0xc0>
 8024260:	4606      	mov	r6, r0
 8024262:	f8d8 0000 	ldr.w	r0, [r8]
 8024266:	461f      	mov	r7, r3
 8024268:	460d      	mov	r5, r1
 802426a:	4691      	mov	r9, r2
 802426c:	f7ff fd15 	bl	8023c9a <__retarget_lock_acquire_recursive>
 8024270:	4b25      	ldr	r3, [pc, #148]	; (8024308 <__register_exitproc+0xb0>)
 8024272:	681c      	ldr	r4, [r3, #0]
 8024274:	b934      	cbnz	r4, 8024284 <__register_exitproc+0x2c>
 8024276:	4c25      	ldr	r4, [pc, #148]	; (802430c <__register_exitproc+0xb4>)
 8024278:	601c      	str	r4, [r3, #0]
 802427a:	4b25      	ldr	r3, [pc, #148]	; (8024310 <__register_exitproc+0xb8>)
 802427c:	b113      	cbz	r3, 8024284 <__register_exitproc+0x2c>
 802427e:	681b      	ldr	r3, [r3, #0]
 8024280:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8024284:	6863      	ldr	r3, [r4, #4]
 8024286:	2b1f      	cmp	r3, #31
 8024288:	dd07      	ble.n	802429a <__register_exitproc+0x42>
 802428a:	f8d8 0000 	ldr.w	r0, [r8]
 802428e:	f7ff fd06 	bl	8023c9e <__retarget_lock_release_recursive>
 8024292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802429a:	b34e      	cbz	r6, 80242f0 <__register_exitproc+0x98>
 802429c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80242a0:	b988      	cbnz	r0, 80242c6 <__register_exitproc+0x6e>
 80242a2:	4b1c      	ldr	r3, [pc, #112]	; (8024314 <__register_exitproc+0xbc>)
 80242a4:	b923      	cbnz	r3, 80242b0 <__register_exitproc+0x58>
 80242a6:	f8d8 0000 	ldr.w	r0, [r8]
 80242aa:	f7ff fcf7 	bl	8023c9c <__retarget_lock_release>
 80242ae:	e7f0      	b.n	8024292 <__register_exitproc+0x3a>
 80242b0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80242b4:	f7ff fcf4 	bl	8023ca0 <malloc>
 80242b8:	2800      	cmp	r0, #0
 80242ba:	d0f4      	beq.n	80242a6 <__register_exitproc+0x4e>
 80242bc:	2300      	movs	r3, #0
 80242be:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80242c2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80242c6:	6863      	ldr	r3, [r4, #4]
 80242c8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80242cc:	2201      	movs	r2, #1
 80242ce:	409a      	lsls	r2, r3
 80242d0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80242d4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80242d8:	4313      	orrs	r3, r2
 80242da:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80242de:	2e02      	cmp	r6, #2
 80242e0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80242e4:	bf02      	ittt	eq
 80242e6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80242ea:	4313      	orreq	r3, r2
 80242ec:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80242f0:	6863      	ldr	r3, [r4, #4]
 80242f2:	f8d8 0000 	ldr.w	r0, [r8]
 80242f6:	1c5a      	adds	r2, r3, #1
 80242f8:	3302      	adds	r3, #2
 80242fa:	6062      	str	r2, [r4, #4]
 80242fc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8024300:	f7ff fccd 	bl	8023c9e <__retarget_lock_release_recursive>
 8024304:	2000      	movs	r0, #0
 8024306:	e7c6      	b.n	8024296 <__register_exitproc+0x3e>
 8024308:	2000c1ac 	.word	0x2000c1ac
 802430c:	2000c120 	.word	0x2000c120
 8024310:	00000000 	.word	0x00000000
 8024314:	08023ca1 	.word	0x08023ca1
 8024318:	200000a4 	.word	0x200000a4

0802431c <__assert_func>:
 802431c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802431e:	4614      	mov	r4, r2
 8024320:	461a      	mov	r2, r3
 8024322:	4b09      	ldr	r3, [pc, #36]	; (8024348 <__assert_func+0x2c>)
 8024324:	681b      	ldr	r3, [r3, #0]
 8024326:	4605      	mov	r5, r0
 8024328:	68d8      	ldr	r0, [r3, #12]
 802432a:	b14c      	cbz	r4, 8024340 <__assert_func+0x24>
 802432c:	4b07      	ldr	r3, [pc, #28]	; (802434c <__assert_func+0x30>)
 802432e:	9100      	str	r1, [sp, #0]
 8024330:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024334:	4906      	ldr	r1, [pc, #24]	; (8024350 <__assert_func+0x34>)
 8024336:	462b      	mov	r3, r5
 8024338:	f000 f8e0 	bl	80244fc <fiprintf>
 802433c:	f7ff fb7e 	bl	8023a3c <abort>
 8024340:	4b04      	ldr	r3, [pc, #16]	; (8024354 <__assert_func+0x38>)
 8024342:	461c      	mov	r4, r3
 8024344:	e7f3      	b.n	802432e <__assert_func+0x12>
 8024346:	bf00      	nop
 8024348:	20000040 	.word	0x20000040
 802434c:	08028c8e 	.word	0x08028c8e
 8024350:	08028c9b 	.word	0x08028c9b
 8024354:	08028cc9 	.word	0x08028cc9

08024358 <_close_r>:
 8024358:	b538      	push	{r3, r4, r5, lr}
 802435a:	4d06      	ldr	r5, [pc, #24]	; (8024374 <_close_r+0x1c>)
 802435c:	2300      	movs	r3, #0
 802435e:	4604      	mov	r4, r0
 8024360:	4608      	mov	r0, r1
 8024362:	602b      	str	r3, [r5, #0]
 8024364:	f7e6 fb9d 	bl	800aaa2 <_close>
 8024368:	1c43      	adds	r3, r0, #1
 802436a:	d102      	bne.n	8024372 <_close_r+0x1a>
 802436c:	682b      	ldr	r3, [r5, #0]
 802436e:	b103      	cbz	r3, 8024372 <_close_r+0x1a>
 8024370:	6023      	str	r3, [r4, #0]
 8024372:	bd38      	pop	{r3, r4, r5, pc}
 8024374:	2000c11c 	.word	0x2000c11c

08024378 <__sflush_r>:
 8024378:	898a      	ldrh	r2, [r1, #12]
 802437a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802437e:	4605      	mov	r5, r0
 8024380:	0710      	lsls	r0, r2, #28
 8024382:	460c      	mov	r4, r1
 8024384:	d458      	bmi.n	8024438 <__sflush_r+0xc0>
 8024386:	684b      	ldr	r3, [r1, #4]
 8024388:	2b00      	cmp	r3, #0
 802438a:	dc05      	bgt.n	8024398 <__sflush_r+0x20>
 802438c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802438e:	2b00      	cmp	r3, #0
 8024390:	dc02      	bgt.n	8024398 <__sflush_r+0x20>
 8024392:	2000      	movs	r0, #0
 8024394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802439a:	2e00      	cmp	r6, #0
 802439c:	d0f9      	beq.n	8024392 <__sflush_r+0x1a>
 802439e:	2300      	movs	r3, #0
 80243a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80243a4:	682f      	ldr	r7, [r5, #0]
 80243a6:	602b      	str	r3, [r5, #0]
 80243a8:	d032      	beq.n	8024410 <__sflush_r+0x98>
 80243aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80243ac:	89a3      	ldrh	r3, [r4, #12]
 80243ae:	075a      	lsls	r2, r3, #29
 80243b0:	d505      	bpl.n	80243be <__sflush_r+0x46>
 80243b2:	6863      	ldr	r3, [r4, #4]
 80243b4:	1ac0      	subs	r0, r0, r3
 80243b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80243b8:	b10b      	cbz	r3, 80243be <__sflush_r+0x46>
 80243ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80243bc:	1ac0      	subs	r0, r0, r3
 80243be:	2300      	movs	r3, #0
 80243c0:	4602      	mov	r2, r0
 80243c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80243c4:	6a21      	ldr	r1, [r4, #32]
 80243c6:	4628      	mov	r0, r5
 80243c8:	47b0      	blx	r6
 80243ca:	1c43      	adds	r3, r0, #1
 80243cc:	89a3      	ldrh	r3, [r4, #12]
 80243ce:	d106      	bne.n	80243de <__sflush_r+0x66>
 80243d0:	6829      	ldr	r1, [r5, #0]
 80243d2:	291d      	cmp	r1, #29
 80243d4:	d82c      	bhi.n	8024430 <__sflush_r+0xb8>
 80243d6:	4a2a      	ldr	r2, [pc, #168]	; (8024480 <__sflush_r+0x108>)
 80243d8:	40ca      	lsrs	r2, r1
 80243da:	07d6      	lsls	r6, r2, #31
 80243dc:	d528      	bpl.n	8024430 <__sflush_r+0xb8>
 80243de:	2200      	movs	r2, #0
 80243e0:	6062      	str	r2, [r4, #4]
 80243e2:	04d9      	lsls	r1, r3, #19
 80243e4:	6922      	ldr	r2, [r4, #16]
 80243e6:	6022      	str	r2, [r4, #0]
 80243e8:	d504      	bpl.n	80243f4 <__sflush_r+0x7c>
 80243ea:	1c42      	adds	r2, r0, #1
 80243ec:	d101      	bne.n	80243f2 <__sflush_r+0x7a>
 80243ee:	682b      	ldr	r3, [r5, #0]
 80243f0:	b903      	cbnz	r3, 80243f4 <__sflush_r+0x7c>
 80243f2:	6560      	str	r0, [r4, #84]	; 0x54
 80243f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80243f6:	602f      	str	r7, [r5, #0]
 80243f8:	2900      	cmp	r1, #0
 80243fa:	d0ca      	beq.n	8024392 <__sflush_r+0x1a>
 80243fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024400:	4299      	cmp	r1, r3
 8024402:	d002      	beq.n	802440a <__sflush_r+0x92>
 8024404:	4628      	mov	r0, r5
 8024406:	f7ff fc9b 	bl	8023d40 <_free_r>
 802440a:	2000      	movs	r0, #0
 802440c:	6360      	str	r0, [r4, #52]	; 0x34
 802440e:	e7c1      	b.n	8024394 <__sflush_r+0x1c>
 8024410:	6a21      	ldr	r1, [r4, #32]
 8024412:	2301      	movs	r3, #1
 8024414:	4628      	mov	r0, r5
 8024416:	47b0      	blx	r6
 8024418:	1c41      	adds	r1, r0, #1
 802441a:	d1c7      	bne.n	80243ac <__sflush_r+0x34>
 802441c:	682b      	ldr	r3, [r5, #0]
 802441e:	2b00      	cmp	r3, #0
 8024420:	d0c4      	beq.n	80243ac <__sflush_r+0x34>
 8024422:	2b1d      	cmp	r3, #29
 8024424:	d001      	beq.n	802442a <__sflush_r+0xb2>
 8024426:	2b16      	cmp	r3, #22
 8024428:	d101      	bne.n	802442e <__sflush_r+0xb6>
 802442a:	602f      	str	r7, [r5, #0]
 802442c:	e7b1      	b.n	8024392 <__sflush_r+0x1a>
 802442e:	89a3      	ldrh	r3, [r4, #12]
 8024430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024434:	81a3      	strh	r3, [r4, #12]
 8024436:	e7ad      	b.n	8024394 <__sflush_r+0x1c>
 8024438:	690f      	ldr	r7, [r1, #16]
 802443a:	2f00      	cmp	r7, #0
 802443c:	d0a9      	beq.n	8024392 <__sflush_r+0x1a>
 802443e:	0793      	lsls	r3, r2, #30
 8024440:	680e      	ldr	r6, [r1, #0]
 8024442:	bf08      	it	eq
 8024444:	694b      	ldreq	r3, [r1, #20]
 8024446:	600f      	str	r7, [r1, #0]
 8024448:	bf18      	it	ne
 802444a:	2300      	movne	r3, #0
 802444c:	eba6 0807 	sub.w	r8, r6, r7
 8024450:	608b      	str	r3, [r1, #8]
 8024452:	f1b8 0f00 	cmp.w	r8, #0
 8024456:	dd9c      	ble.n	8024392 <__sflush_r+0x1a>
 8024458:	6a21      	ldr	r1, [r4, #32]
 802445a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802445c:	4643      	mov	r3, r8
 802445e:	463a      	mov	r2, r7
 8024460:	4628      	mov	r0, r5
 8024462:	47b0      	blx	r6
 8024464:	2800      	cmp	r0, #0
 8024466:	dc06      	bgt.n	8024476 <__sflush_r+0xfe>
 8024468:	89a3      	ldrh	r3, [r4, #12]
 802446a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802446e:	81a3      	strh	r3, [r4, #12]
 8024470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024474:	e78e      	b.n	8024394 <__sflush_r+0x1c>
 8024476:	4407      	add	r7, r0
 8024478:	eba8 0800 	sub.w	r8, r8, r0
 802447c:	e7e9      	b.n	8024452 <__sflush_r+0xda>
 802447e:	bf00      	nop
 8024480:	20400001 	.word	0x20400001

08024484 <_fflush_r>:
 8024484:	b538      	push	{r3, r4, r5, lr}
 8024486:	690b      	ldr	r3, [r1, #16]
 8024488:	4605      	mov	r5, r0
 802448a:	460c      	mov	r4, r1
 802448c:	b913      	cbnz	r3, 8024494 <_fflush_r+0x10>
 802448e:	2500      	movs	r5, #0
 8024490:	4628      	mov	r0, r5
 8024492:	bd38      	pop	{r3, r4, r5, pc}
 8024494:	b118      	cbz	r0, 802449e <_fflush_r+0x1a>
 8024496:	6983      	ldr	r3, [r0, #24]
 8024498:	b90b      	cbnz	r3, 802449e <_fflush_r+0x1a>
 802449a:	f7ff fb3b 	bl	8023b14 <__sinit>
 802449e:	4b14      	ldr	r3, [pc, #80]	; (80244f0 <_fflush_r+0x6c>)
 80244a0:	429c      	cmp	r4, r3
 80244a2:	d11b      	bne.n	80244dc <_fflush_r+0x58>
 80244a4:	686c      	ldr	r4, [r5, #4]
 80244a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80244aa:	2b00      	cmp	r3, #0
 80244ac:	d0ef      	beq.n	802448e <_fflush_r+0xa>
 80244ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80244b0:	07d0      	lsls	r0, r2, #31
 80244b2:	d404      	bmi.n	80244be <_fflush_r+0x3a>
 80244b4:	0599      	lsls	r1, r3, #22
 80244b6:	d402      	bmi.n	80244be <_fflush_r+0x3a>
 80244b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80244ba:	f7ff fbee 	bl	8023c9a <__retarget_lock_acquire_recursive>
 80244be:	4628      	mov	r0, r5
 80244c0:	4621      	mov	r1, r4
 80244c2:	f7ff ff59 	bl	8024378 <__sflush_r>
 80244c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80244c8:	07da      	lsls	r2, r3, #31
 80244ca:	4605      	mov	r5, r0
 80244cc:	d4e0      	bmi.n	8024490 <_fflush_r+0xc>
 80244ce:	89a3      	ldrh	r3, [r4, #12]
 80244d0:	059b      	lsls	r3, r3, #22
 80244d2:	d4dd      	bmi.n	8024490 <_fflush_r+0xc>
 80244d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80244d6:	f7ff fbe2 	bl	8023c9e <__retarget_lock_release_recursive>
 80244da:	e7d9      	b.n	8024490 <_fflush_r+0xc>
 80244dc:	4b05      	ldr	r3, [pc, #20]	; (80244f4 <_fflush_r+0x70>)
 80244de:	429c      	cmp	r4, r3
 80244e0:	d101      	bne.n	80244e6 <_fflush_r+0x62>
 80244e2:	68ac      	ldr	r4, [r5, #8]
 80244e4:	e7df      	b.n	80244a6 <_fflush_r+0x22>
 80244e6:	4b04      	ldr	r3, [pc, #16]	; (80244f8 <_fflush_r+0x74>)
 80244e8:	429c      	cmp	r4, r3
 80244ea:	bf08      	it	eq
 80244ec:	68ec      	ldreq	r4, [r5, #12]
 80244ee:	e7da      	b.n	80244a6 <_fflush_r+0x22>
 80244f0:	08028bd8 	.word	0x08028bd8
 80244f4:	08028bf8 	.word	0x08028bf8
 80244f8:	08028bb8 	.word	0x08028bb8

080244fc <fiprintf>:
 80244fc:	b40e      	push	{r1, r2, r3}
 80244fe:	b503      	push	{r0, r1, lr}
 8024500:	4601      	mov	r1, r0
 8024502:	ab03      	add	r3, sp, #12
 8024504:	4805      	ldr	r0, [pc, #20]	; (802451c <fiprintf+0x20>)
 8024506:	f853 2b04 	ldr.w	r2, [r3], #4
 802450a:	6800      	ldr	r0, [r0, #0]
 802450c:	9301      	str	r3, [sp, #4]
 802450e:	f000 f99f 	bl	8024850 <_vfiprintf_r>
 8024512:	b002      	add	sp, #8
 8024514:	f85d eb04 	ldr.w	lr, [sp], #4
 8024518:	b003      	add	sp, #12
 802451a:	4770      	bx	lr
 802451c:	20000040 	.word	0x20000040

08024520 <_lseek_r>:
 8024520:	b538      	push	{r3, r4, r5, lr}
 8024522:	4d07      	ldr	r5, [pc, #28]	; (8024540 <_lseek_r+0x20>)
 8024524:	4604      	mov	r4, r0
 8024526:	4608      	mov	r0, r1
 8024528:	4611      	mov	r1, r2
 802452a:	2200      	movs	r2, #0
 802452c:	602a      	str	r2, [r5, #0]
 802452e:	461a      	mov	r2, r3
 8024530:	f7e6 fade 	bl	800aaf0 <_lseek>
 8024534:	1c43      	adds	r3, r0, #1
 8024536:	d102      	bne.n	802453e <_lseek_r+0x1e>
 8024538:	682b      	ldr	r3, [r5, #0]
 802453a:	b103      	cbz	r3, 802453e <_lseek_r+0x1e>
 802453c:	6023      	str	r3, [r4, #0]
 802453e:	bd38      	pop	{r3, r4, r5, pc}
 8024540:	2000c11c 	.word	0x2000c11c

08024544 <__ssputs_r>:
 8024544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024548:	688e      	ldr	r6, [r1, #8]
 802454a:	429e      	cmp	r6, r3
 802454c:	4682      	mov	sl, r0
 802454e:	460c      	mov	r4, r1
 8024550:	4690      	mov	r8, r2
 8024552:	461f      	mov	r7, r3
 8024554:	d838      	bhi.n	80245c8 <__ssputs_r+0x84>
 8024556:	898a      	ldrh	r2, [r1, #12]
 8024558:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802455c:	d032      	beq.n	80245c4 <__ssputs_r+0x80>
 802455e:	6825      	ldr	r5, [r4, #0]
 8024560:	6909      	ldr	r1, [r1, #16]
 8024562:	eba5 0901 	sub.w	r9, r5, r1
 8024566:	6965      	ldr	r5, [r4, #20]
 8024568:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802456c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8024570:	3301      	adds	r3, #1
 8024572:	444b      	add	r3, r9
 8024574:	106d      	asrs	r5, r5, #1
 8024576:	429d      	cmp	r5, r3
 8024578:	bf38      	it	cc
 802457a:	461d      	movcc	r5, r3
 802457c:	0553      	lsls	r3, r2, #21
 802457e:	d531      	bpl.n	80245e4 <__ssputs_r+0xa0>
 8024580:	4629      	mov	r1, r5
 8024582:	f7ff fc49 	bl	8023e18 <_malloc_r>
 8024586:	4606      	mov	r6, r0
 8024588:	b950      	cbnz	r0, 80245a0 <__ssputs_r+0x5c>
 802458a:	230c      	movs	r3, #12
 802458c:	f8ca 3000 	str.w	r3, [sl]
 8024590:	89a3      	ldrh	r3, [r4, #12]
 8024592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024596:	81a3      	strh	r3, [r4, #12]
 8024598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802459c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80245a0:	6921      	ldr	r1, [r4, #16]
 80245a2:	464a      	mov	r2, r9
 80245a4:	f7ff fb9c 	bl	8023ce0 <memcpy>
 80245a8:	89a3      	ldrh	r3, [r4, #12]
 80245aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80245ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80245b2:	81a3      	strh	r3, [r4, #12]
 80245b4:	6126      	str	r6, [r4, #16]
 80245b6:	6165      	str	r5, [r4, #20]
 80245b8:	444e      	add	r6, r9
 80245ba:	eba5 0509 	sub.w	r5, r5, r9
 80245be:	6026      	str	r6, [r4, #0]
 80245c0:	60a5      	str	r5, [r4, #8]
 80245c2:	463e      	mov	r6, r7
 80245c4:	42be      	cmp	r6, r7
 80245c6:	d900      	bls.n	80245ca <__ssputs_r+0x86>
 80245c8:	463e      	mov	r6, r7
 80245ca:	6820      	ldr	r0, [r4, #0]
 80245cc:	4632      	mov	r2, r6
 80245ce:	4641      	mov	r1, r8
 80245d0:	f7ff fb94 	bl	8023cfc <memmove>
 80245d4:	68a3      	ldr	r3, [r4, #8]
 80245d6:	1b9b      	subs	r3, r3, r6
 80245d8:	60a3      	str	r3, [r4, #8]
 80245da:	6823      	ldr	r3, [r4, #0]
 80245dc:	4433      	add	r3, r6
 80245de:	6023      	str	r3, [r4, #0]
 80245e0:	2000      	movs	r0, #0
 80245e2:	e7db      	b.n	802459c <__ssputs_r+0x58>
 80245e4:	462a      	mov	r2, r5
 80245e6:	f000 fd2f 	bl	8025048 <_realloc_r>
 80245ea:	4606      	mov	r6, r0
 80245ec:	2800      	cmp	r0, #0
 80245ee:	d1e1      	bne.n	80245b4 <__ssputs_r+0x70>
 80245f0:	6921      	ldr	r1, [r4, #16]
 80245f2:	4650      	mov	r0, sl
 80245f4:	f7ff fba4 	bl	8023d40 <_free_r>
 80245f8:	e7c7      	b.n	802458a <__ssputs_r+0x46>
	...

080245fc <_svfiprintf_r>:
 80245fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024600:	4698      	mov	r8, r3
 8024602:	898b      	ldrh	r3, [r1, #12]
 8024604:	061b      	lsls	r3, r3, #24
 8024606:	b09d      	sub	sp, #116	; 0x74
 8024608:	4607      	mov	r7, r0
 802460a:	460d      	mov	r5, r1
 802460c:	4614      	mov	r4, r2
 802460e:	d50e      	bpl.n	802462e <_svfiprintf_r+0x32>
 8024610:	690b      	ldr	r3, [r1, #16]
 8024612:	b963      	cbnz	r3, 802462e <_svfiprintf_r+0x32>
 8024614:	2140      	movs	r1, #64	; 0x40
 8024616:	f7ff fbff 	bl	8023e18 <_malloc_r>
 802461a:	6028      	str	r0, [r5, #0]
 802461c:	6128      	str	r0, [r5, #16]
 802461e:	b920      	cbnz	r0, 802462a <_svfiprintf_r+0x2e>
 8024620:	230c      	movs	r3, #12
 8024622:	603b      	str	r3, [r7, #0]
 8024624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024628:	e0d1      	b.n	80247ce <_svfiprintf_r+0x1d2>
 802462a:	2340      	movs	r3, #64	; 0x40
 802462c:	616b      	str	r3, [r5, #20]
 802462e:	2300      	movs	r3, #0
 8024630:	9309      	str	r3, [sp, #36]	; 0x24
 8024632:	2320      	movs	r3, #32
 8024634:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024638:	f8cd 800c 	str.w	r8, [sp, #12]
 802463c:	2330      	movs	r3, #48	; 0x30
 802463e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80247e8 <_svfiprintf_r+0x1ec>
 8024642:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024646:	f04f 0901 	mov.w	r9, #1
 802464a:	4623      	mov	r3, r4
 802464c:	469a      	mov	sl, r3
 802464e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024652:	b10a      	cbz	r2, 8024658 <_svfiprintf_r+0x5c>
 8024654:	2a25      	cmp	r2, #37	; 0x25
 8024656:	d1f9      	bne.n	802464c <_svfiprintf_r+0x50>
 8024658:	ebba 0b04 	subs.w	fp, sl, r4
 802465c:	d00b      	beq.n	8024676 <_svfiprintf_r+0x7a>
 802465e:	465b      	mov	r3, fp
 8024660:	4622      	mov	r2, r4
 8024662:	4629      	mov	r1, r5
 8024664:	4638      	mov	r0, r7
 8024666:	f7ff ff6d 	bl	8024544 <__ssputs_r>
 802466a:	3001      	adds	r0, #1
 802466c:	f000 80aa 	beq.w	80247c4 <_svfiprintf_r+0x1c8>
 8024670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024672:	445a      	add	r2, fp
 8024674:	9209      	str	r2, [sp, #36]	; 0x24
 8024676:	f89a 3000 	ldrb.w	r3, [sl]
 802467a:	2b00      	cmp	r3, #0
 802467c:	f000 80a2 	beq.w	80247c4 <_svfiprintf_r+0x1c8>
 8024680:	2300      	movs	r3, #0
 8024682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024686:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802468a:	f10a 0a01 	add.w	sl, sl, #1
 802468e:	9304      	str	r3, [sp, #16]
 8024690:	9307      	str	r3, [sp, #28]
 8024692:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024696:	931a      	str	r3, [sp, #104]	; 0x68
 8024698:	4654      	mov	r4, sl
 802469a:	2205      	movs	r2, #5
 802469c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80246a0:	4851      	ldr	r0, [pc, #324]	; (80247e8 <_svfiprintf_r+0x1ec>)
 80246a2:	f7db fdbd 	bl	8000220 <memchr>
 80246a6:	9a04      	ldr	r2, [sp, #16]
 80246a8:	b9d8      	cbnz	r0, 80246e2 <_svfiprintf_r+0xe6>
 80246aa:	06d0      	lsls	r0, r2, #27
 80246ac:	bf44      	itt	mi
 80246ae:	2320      	movmi	r3, #32
 80246b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80246b4:	0711      	lsls	r1, r2, #28
 80246b6:	bf44      	itt	mi
 80246b8:	232b      	movmi	r3, #43	; 0x2b
 80246ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80246be:	f89a 3000 	ldrb.w	r3, [sl]
 80246c2:	2b2a      	cmp	r3, #42	; 0x2a
 80246c4:	d015      	beq.n	80246f2 <_svfiprintf_r+0xf6>
 80246c6:	9a07      	ldr	r2, [sp, #28]
 80246c8:	4654      	mov	r4, sl
 80246ca:	2000      	movs	r0, #0
 80246cc:	f04f 0c0a 	mov.w	ip, #10
 80246d0:	4621      	mov	r1, r4
 80246d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80246d6:	3b30      	subs	r3, #48	; 0x30
 80246d8:	2b09      	cmp	r3, #9
 80246da:	d94e      	bls.n	802477a <_svfiprintf_r+0x17e>
 80246dc:	b1b0      	cbz	r0, 802470c <_svfiprintf_r+0x110>
 80246de:	9207      	str	r2, [sp, #28]
 80246e0:	e014      	b.n	802470c <_svfiprintf_r+0x110>
 80246e2:	eba0 0308 	sub.w	r3, r0, r8
 80246e6:	fa09 f303 	lsl.w	r3, r9, r3
 80246ea:	4313      	orrs	r3, r2
 80246ec:	9304      	str	r3, [sp, #16]
 80246ee:	46a2      	mov	sl, r4
 80246f0:	e7d2      	b.n	8024698 <_svfiprintf_r+0x9c>
 80246f2:	9b03      	ldr	r3, [sp, #12]
 80246f4:	1d19      	adds	r1, r3, #4
 80246f6:	681b      	ldr	r3, [r3, #0]
 80246f8:	9103      	str	r1, [sp, #12]
 80246fa:	2b00      	cmp	r3, #0
 80246fc:	bfbb      	ittet	lt
 80246fe:	425b      	neglt	r3, r3
 8024700:	f042 0202 	orrlt.w	r2, r2, #2
 8024704:	9307      	strge	r3, [sp, #28]
 8024706:	9307      	strlt	r3, [sp, #28]
 8024708:	bfb8      	it	lt
 802470a:	9204      	strlt	r2, [sp, #16]
 802470c:	7823      	ldrb	r3, [r4, #0]
 802470e:	2b2e      	cmp	r3, #46	; 0x2e
 8024710:	d10c      	bne.n	802472c <_svfiprintf_r+0x130>
 8024712:	7863      	ldrb	r3, [r4, #1]
 8024714:	2b2a      	cmp	r3, #42	; 0x2a
 8024716:	d135      	bne.n	8024784 <_svfiprintf_r+0x188>
 8024718:	9b03      	ldr	r3, [sp, #12]
 802471a:	1d1a      	adds	r2, r3, #4
 802471c:	681b      	ldr	r3, [r3, #0]
 802471e:	9203      	str	r2, [sp, #12]
 8024720:	2b00      	cmp	r3, #0
 8024722:	bfb8      	it	lt
 8024724:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8024728:	3402      	adds	r4, #2
 802472a:	9305      	str	r3, [sp, #20]
 802472c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80247f8 <_svfiprintf_r+0x1fc>
 8024730:	7821      	ldrb	r1, [r4, #0]
 8024732:	2203      	movs	r2, #3
 8024734:	4650      	mov	r0, sl
 8024736:	f7db fd73 	bl	8000220 <memchr>
 802473a:	b140      	cbz	r0, 802474e <_svfiprintf_r+0x152>
 802473c:	2340      	movs	r3, #64	; 0x40
 802473e:	eba0 000a 	sub.w	r0, r0, sl
 8024742:	fa03 f000 	lsl.w	r0, r3, r0
 8024746:	9b04      	ldr	r3, [sp, #16]
 8024748:	4303      	orrs	r3, r0
 802474a:	3401      	adds	r4, #1
 802474c:	9304      	str	r3, [sp, #16]
 802474e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024752:	4826      	ldr	r0, [pc, #152]	; (80247ec <_svfiprintf_r+0x1f0>)
 8024754:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024758:	2206      	movs	r2, #6
 802475a:	f7db fd61 	bl	8000220 <memchr>
 802475e:	2800      	cmp	r0, #0
 8024760:	d038      	beq.n	80247d4 <_svfiprintf_r+0x1d8>
 8024762:	4b23      	ldr	r3, [pc, #140]	; (80247f0 <_svfiprintf_r+0x1f4>)
 8024764:	bb1b      	cbnz	r3, 80247ae <_svfiprintf_r+0x1b2>
 8024766:	9b03      	ldr	r3, [sp, #12]
 8024768:	3307      	adds	r3, #7
 802476a:	f023 0307 	bic.w	r3, r3, #7
 802476e:	3308      	adds	r3, #8
 8024770:	9303      	str	r3, [sp, #12]
 8024772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024774:	4433      	add	r3, r6
 8024776:	9309      	str	r3, [sp, #36]	; 0x24
 8024778:	e767      	b.n	802464a <_svfiprintf_r+0x4e>
 802477a:	fb0c 3202 	mla	r2, ip, r2, r3
 802477e:	460c      	mov	r4, r1
 8024780:	2001      	movs	r0, #1
 8024782:	e7a5      	b.n	80246d0 <_svfiprintf_r+0xd4>
 8024784:	2300      	movs	r3, #0
 8024786:	3401      	adds	r4, #1
 8024788:	9305      	str	r3, [sp, #20]
 802478a:	4619      	mov	r1, r3
 802478c:	f04f 0c0a 	mov.w	ip, #10
 8024790:	4620      	mov	r0, r4
 8024792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024796:	3a30      	subs	r2, #48	; 0x30
 8024798:	2a09      	cmp	r2, #9
 802479a:	d903      	bls.n	80247a4 <_svfiprintf_r+0x1a8>
 802479c:	2b00      	cmp	r3, #0
 802479e:	d0c5      	beq.n	802472c <_svfiprintf_r+0x130>
 80247a0:	9105      	str	r1, [sp, #20]
 80247a2:	e7c3      	b.n	802472c <_svfiprintf_r+0x130>
 80247a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80247a8:	4604      	mov	r4, r0
 80247aa:	2301      	movs	r3, #1
 80247ac:	e7f0      	b.n	8024790 <_svfiprintf_r+0x194>
 80247ae:	ab03      	add	r3, sp, #12
 80247b0:	9300      	str	r3, [sp, #0]
 80247b2:	462a      	mov	r2, r5
 80247b4:	4b0f      	ldr	r3, [pc, #60]	; (80247f4 <_svfiprintf_r+0x1f8>)
 80247b6:	a904      	add	r1, sp, #16
 80247b8:	4638      	mov	r0, r7
 80247ba:	f3af 8000 	nop.w
 80247be:	1c42      	adds	r2, r0, #1
 80247c0:	4606      	mov	r6, r0
 80247c2:	d1d6      	bne.n	8024772 <_svfiprintf_r+0x176>
 80247c4:	89ab      	ldrh	r3, [r5, #12]
 80247c6:	065b      	lsls	r3, r3, #25
 80247c8:	f53f af2c 	bmi.w	8024624 <_svfiprintf_r+0x28>
 80247cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80247ce:	b01d      	add	sp, #116	; 0x74
 80247d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247d4:	ab03      	add	r3, sp, #12
 80247d6:	9300      	str	r3, [sp, #0]
 80247d8:	462a      	mov	r2, r5
 80247da:	4b06      	ldr	r3, [pc, #24]	; (80247f4 <_svfiprintf_r+0x1f8>)
 80247dc:	a904      	add	r1, sp, #16
 80247de:	4638      	mov	r0, r7
 80247e0:	f000 f9d4 	bl	8024b8c <_printf_i>
 80247e4:	e7eb      	b.n	80247be <_svfiprintf_r+0x1c2>
 80247e6:	bf00      	nop
 80247e8:	08028cca 	.word	0x08028cca
 80247ec:	08028cd4 	.word	0x08028cd4
 80247f0:	00000000 	.word	0x00000000
 80247f4:	08024545 	.word	0x08024545
 80247f8:	08028cd0 	.word	0x08028cd0

080247fc <__sfputc_r>:
 80247fc:	6893      	ldr	r3, [r2, #8]
 80247fe:	3b01      	subs	r3, #1
 8024800:	2b00      	cmp	r3, #0
 8024802:	b410      	push	{r4}
 8024804:	6093      	str	r3, [r2, #8]
 8024806:	da08      	bge.n	802481a <__sfputc_r+0x1e>
 8024808:	6994      	ldr	r4, [r2, #24]
 802480a:	42a3      	cmp	r3, r4
 802480c:	db01      	blt.n	8024812 <__sfputc_r+0x16>
 802480e:	290a      	cmp	r1, #10
 8024810:	d103      	bne.n	802481a <__sfputc_r+0x1e>
 8024812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024816:	f000 baf1 	b.w	8024dfc <__swbuf_r>
 802481a:	6813      	ldr	r3, [r2, #0]
 802481c:	1c58      	adds	r0, r3, #1
 802481e:	6010      	str	r0, [r2, #0]
 8024820:	7019      	strb	r1, [r3, #0]
 8024822:	4608      	mov	r0, r1
 8024824:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024828:	4770      	bx	lr

0802482a <__sfputs_r>:
 802482a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802482c:	4606      	mov	r6, r0
 802482e:	460f      	mov	r7, r1
 8024830:	4614      	mov	r4, r2
 8024832:	18d5      	adds	r5, r2, r3
 8024834:	42ac      	cmp	r4, r5
 8024836:	d101      	bne.n	802483c <__sfputs_r+0x12>
 8024838:	2000      	movs	r0, #0
 802483a:	e007      	b.n	802484c <__sfputs_r+0x22>
 802483c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024840:	463a      	mov	r2, r7
 8024842:	4630      	mov	r0, r6
 8024844:	f7ff ffda 	bl	80247fc <__sfputc_r>
 8024848:	1c43      	adds	r3, r0, #1
 802484a:	d1f3      	bne.n	8024834 <__sfputs_r+0xa>
 802484c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024850 <_vfiprintf_r>:
 8024850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024854:	460d      	mov	r5, r1
 8024856:	b09d      	sub	sp, #116	; 0x74
 8024858:	4614      	mov	r4, r2
 802485a:	4698      	mov	r8, r3
 802485c:	4606      	mov	r6, r0
 802485e:	b118      	cbz	r0, 8024868 <_vfiprintf_r+0x18>
 8024860:	6983      	ldr	r3, [r0, #24]
 8024862:	b90b      	cbnz	r3, 8024868 <_vfiprintf_r+0x18>
 8024864:	f7ff f956 	bl	8023b14 <__sinit>
 8024868:	4b89      	ldr	r3, [pc, #548]	; (8024a90 <_vfiprintf_r+0x240>)
 802486a:	429d      	cmp	r5, r3
 802486c:	d11b      	bne.n	80248a6 <_vfiprintf_r+0x56>
 802486e:	6875      	ldr	r5, [r6, #4]
 8024870:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024872:	07d9      	lsls	r1, r3, #31
 8024874:	d405      	bmi.n	8024882 <_vfiprintf_r+0x32>
 8024876:	89ab      	ldrh	r3, [r5, #12]
 8024878:	059a      	lsls	r2, r3, #22
 802487a:	d402      	bmi.n	8024882 <_vfiprintf_r+0x32>
 802487c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802487e:	f7ff fa0c 	bl	8023c9a <__retarget_lock_acquire_recursive>
 8024882:	89ab      	ldrh	r3, [r5, #12]
 8024884:	071b      	lsls	r3, r3, #28
 8024886:	d501      	bpl.n	802488c <_vfiprintf_r+0x3c>
 8024888:	692b      	ldr	r3, [r5, #16]
 802488a:	b9eb      	cbnz	r3, 80248c8 <_vfiprintf_r+0x78>
 802488c:	4629      	mov	r1, r5
 802488e:	4630      	mov	r0, r6
 8024890:	f000 fb06 	bl	8024ea0 <__swsetup_r>
 8024894:	b1c0      	cbz	r0, 80248c8 <_vfiprintf_r+0x78>
 8024896:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024898:	07dc      	lsls	r4, r3, #31
 802489a:	d50e      	bpl.n	80248ba <_vfiprintf_r+0x6a>
 802489c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80248a0:	b01d      	add	sp, #116	; 0x74
 80248a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248a6:	4b7b      	ldr	r3, [pc, #492]	; (8024a94 <_vfiprintf_r+0x244>)
 80248a8:	429d      	cmp	r5, r3
 80248aa:	d101      	bne.n	80248b0 <_vfiprintf_r+0x60>
 80248ac:	68b5      	ldr	r5, [r6, #8]
 80248ae:	e7df      	b.n	8024870 <_vfiprintf_r+0x20>
 80248b0:	4b79      	ldr	r3, [pc, #484]	; (8024a98 <_vfiprintf_r+0x248>)
 80248b2:	429d      	cmp	r5, r3
 80248b4:	bf08      	it	eq
 80248b6:	68f5      	ldreq	r5, [r6, #12]
 80248b8:	e7da      	b.n	8024870 <_vfiprintf_r+0x20>
 80248ba:	89ab      	ldrh	r3, [r5, #12]
 80248bc:	0598      	lsls	r0, r3, #22
 80248be:	d4ed      	bmi.n	802489c <_vfiprintf_r+0x4c>
 80248c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80248c2:	f7ff f9ec 	bl	8023c9e <__retarget_lock_release_recursive>
 80248c6:	e7e9      	b.n	802489c <_vfiprintf_r+0x4c>
 80248c8:	2300      	movs	r3, #0
 80248ca:	9309      	str	r3, [sp, #36]	; 0x24
 80248cc:	2320      	movs	r3, #32
 80248ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80248d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80248d6:	2330      	movs	r3, #48	; 0x30
 80248d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024a9c <_vfiprintf_r+0x24c>
 80248dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80248e0:	f04f 0901 	mov.w	r9, #1
 80248e4:	4623      	mov	r3, r4
 80248e6:	469a      	mov	sl, r3
 80248e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80248ec:	b10a      	cbz	r2, 80248f2 <_vfiprintf_r+0xa2>
 80248ee:	2a25      	cmp	r2, #37	; 0x25
 80248f0:	d1f9      	bne.n	80248e6 <_vfiprintf_r+0x96>
 80248f2:	ebba 0b04 	subs.w	fp, sl, r4
 80248f6:	d00b      	beq.n	8024910 <_vfiprintf_r+0xc0>
 80248f8:	465b      	mov	r3, fp
 80248fa:	4622      	mov	r2, r4
 80248fc:	4629      	mov	r1, r5
 80248fe:	4630      	mov	r0, r6
 8024900:	f7ff ff93 	bl	802482a <__sfputs_r>
 8024904:	3001      	adds	r0, #1
 8024906:	f000 80aa 	beq.w	8024a5e <_vfiprintf_r+0x20e>
 802490a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802490c:	445a      	add	r2, fp
 802490e:	9209      	str	r2, [sp, #36]	; 0x24
 8024910:	f89a 3000 	ldrb.w	r3, [sl]
 8024914:	2b00      	cmp	r3, #0
 8024916:	f000 80a2 	beq.w	8024a5e <_vfiprintf_r+0x20e>
 802491a:	2300      	movs	r3, #0
 802491c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024920:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024924:	f10a 0a01 	add.w	sl, sl, #1
 8024928:	9304      	str	r3, [sp, #16]
 802492a:	9307      	str	r3, [sp, #28]
 802492c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024930:	931a      	str	r3, [sp, #104]	; 0x68
 8024932:	4654      	mov	r4, sl
 8024934:	2205      	movs	r2, #5
 8024936:	f814 1b01 	ldrb.w	r1, [r4], #1
 802493a:	4858      	ldr	r0, [pc, #352]	; (8024a9c <_vfiprintf_r+0x24c>)
 802493c:	f7db fc70 	bl	8000220 <memchr>
 8024940:	9a04      	ldr	r2, [sp, #16]
 8024942:	b9d8      	cbnz	r0, 802497c <_vfiprintf_r+0x12c>
 8024944:	06d1      	lsls	r1, r2, #27
 8024946:	bf44      	itt	mi
 8024948:	2320      	movmi	r3, #32
 802494a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802494e:	0713      	lsls	r3, r2, #28
 8024950:	bf44      	itt	mi
 8024952:	232b      	movmi	r3, #43	; 0x2b
 8024954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024958:	f89a 3000 	ldrb.w	r3, [sl]
 802495c:	2b2a      	cmp	r3, #42	; 0x2a
 802495e:	d015      	beq.n	802498c <_vfiprintf_r+0x13c>
 8024960:	9a07      	ldr	r2, [sp, #28]
 8024962:	4654      	mov	r4, sl
 8024964:	2000      	movs	r0, #0
 8024966:	f04f 0c0a 	mov.w	ip, #10
 802496a:	4621      	mov	r1, r4
 802496c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024970:	3b30      	subs	r3, #48	; 0x30
 8024972:	2b09      	cmp	r3, #9
 8024974:	d94e      	bls.n	8024a14 <_vfiprintf_r+0x1c4>
 8024976:	b1b0      	cbz	r0, 80249a6 <_vfiprintf_r+0x156>
 8024978:	9207      	str	r2, [sp, #28]
 802497a:	e014      	b.n	80249a6 <_vfiprintf_r+0x156>
 802497c:	eba0 0308 	sub.w	r3, r0, r8
 8024980:	fa09 f303 	lsl.w	r3, r9, r3
 8024984:	4313      	orrs	r3, r2
 8024986:	9304      	str	r3, [sp, #16]
 8024988:	46a2      	mov	sl, r4
 802498a:	e7d2      	b.n	8024932 <_vfiprintf_r+0xe2>
 802498c:	9b03      	ldr	r3, [sp, #12]
 802498e:	1d19      	adds	r1, r3, #4
 8024990:	681b      	ldr	r3, [r3, #0]
 8024992:	9103      	str	r1, [sp, #12]
 8024994:	2b00      	cmp	r3, #0
 8024996:	bfbb      	ittet	lt
 8024998:	425b      	neglt	r3, r3
 802499a:	f042 0202 	orrlt.w	r2, r2, #2
 802499e:	9307      	strge	r3, [sp, #28]
 80249a0:	9307      	strlt	r3, [sp, #28]
 80249a2:	bfb8      	it	lt
 80249a4:	9204      	strlt	r2, [sp, #16]
 80249a6:	7823      	ldrb	r3, [r4, #0]
 80249a8:	2b2e      	cmp	r3, #46	; 0x2e
 80249aa:	d10c      	bne.n	80249c6 <_vfiprintf_r+0x176>
 80249ac:	7863      	ldrb	r3, [r4, #1]
 80249ae:	2b2a      	cmp	r3, #42	; 0x2a
 80249b0:	d135      	bne.n	8024a1e <_vfiprintf_r+0x1ce>
 80249b2:	9b03      	ldr	r3, [sp, #12]
 80249b4:	1d1a      	adds	r2, r3, #4
 80249b6:	681b      	ldr	r3, [r3, #0]
 80249b8:	9203      	str	r2, [sp, #12]
 80249ba:	2b00      	cmp	r3, #0
 80249bc:	bfb8      	it	lt
 80249be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80249c2:	3402      	adds	r4, #2
 80249c4:	9305      	str	r3, [sp, #20]
 80249c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024aac <_vfiprintf_r+0x25c>
 80249ca:	7821      	ldrb	r1, [r4, #0]
 80249cc:	2203      	movs	r2, #3
 80249ce:	4650      	mov	r0, sl
 80249d0:	f7db fc26 	bl	8000220 <memchr>
 80249d4:	b140      	cbz	r0, 80249e8 <_vfiprintf_r+0x198>
 80249d6:	2340      	movs	r3, #64	; 0x40
 80249d8:	eba0 000a 	sub.w	r0, r0, sl
 80249dc:	fa03 f000 	lsl.w	r0, r3, r0
 80249e0:	9b04      	ldr	r3, [sp, #16]
 80249e2:	4303      	orrs	r3, r0
 80249e4:	3401      	adds	r4, #1
 80249e6:	9304      	str	r3, [sp, #16]
 80249e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80249ec:	482c      	ldr	r0, [pc, #176]	; (8024aa0 <_vfiprintf_r+0x250>)
 80249ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80249f2:	2206      	movs	r2, #6
 80249f4:	f7db fc14 	bl	8000220 <memchr>
 80249f8:	2800      	cmp	r0, #0
 80249fa:	d03f      	beq.n	8024a7c <_vfiprintf_r+0x22c>
 80249fc:	4b29      	ldr	r3, [pc, #164]	; (8024aa4 <_vfiprintf_r+0x254>)
 80249fe:	bb1b      	cbnz	r3, 8024a48 <_vfiprintf_r+0x1f8>
 8024a00:	9b03      	ldr	r3, [sp, #12]
 8024a02:	3307      	adds	r3, #7
 8024a04:	f023 0307 	bic.w	r3, r3, #7
 8024a08:	3308      	adds	r3, #8
 8024a0a:	9303      	str	r3, [sp, #12]
 8024a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a0e:	443b      	add	r3, r7
 8024a10:	9309      	str	r3, [sp, #36]	; 0x24
 8024a12:	e767      	b.n	80248e4 <_vfiprintf_r+0x94>
 8024a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8024a18:	460c      	mov	r4, r1
 8024a1a:	2001      	movs	r0, #1
 8024a1c:	e7a5      	b.n	802496a <_vfiprintf_r+0x11a>
 8024a1e:	2300      	movs	r3, #0
 8024a20:	3401      	adds	r4, #1
 8024a22:	9305      	str	r3, [sp, #20]
 8024a24:	4619      	mov	r1, r3
 8024a26:	f04f 0c0a 	mov.w	ip, #10
 8024a2a:	4620      	mov	r0, r4
 8024a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024a30:	3a30      	subs	r2, #48	; 0x30
 8024a32:	2a09      	cmp	r2, #9
 8024a34:	d903      	bls.n	8024a3e <_vfiprintf_r+0x1ee>
 8024a36:	2b00      	cmp	r3, #0
 8024a38:	d0c5      	beq.n	80249c6 <_vfiprintf_r+0x176>
 8024a3a:	9105      	str	r1, [sp, #20]
 8024a3c:	e7c3      	b.n	80249c6 <_vfiprintf_r+0x176>
 8024a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8024a42:	4604      	mov	r4, r0
 8024a44:	2301      	movs	r3, #1
 8024a46:	e7f0      	b.n	8024a2a <_vfiprintf_r+0x1da>
 8024a48:	ab03      	add	r3, sp, #12
 8024a4a:	9300      	str	r3, [sp, #0]
 8024a4c:	462a      	mov	r2, r5
 8024a4e:	4b16      	ldr	r3, [pc, #88]	; (8024aa8 <_vfiprintf_r+0x258>)
 8024a50:	a904      	add	r1, sp, #16
 8024a52:	4630      	mov	r0, r6
 8024a54:	f3af 8000 	nop.w
 8024a58:	4607      	mov	r7, r0
 8024a5a:	1c78      	adds	r0, r7, #1
 8024a5c:	d1d6      	bne.n	8024a0c <_vfiprintf_r+0x1bc>
 8024a5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024a60:	07d9      	lsls	r1, r3, #31
 8024a62:	d405      	bmi.n	8024a70 <_vfiprintf_r+0x220>
 8024a64:	89ab      	ldrh	r3, [r5, #12]
 8024a66:	059a      	lsls	r2, r3, #22
 8024a68:	d402      	bmi.n	8024a70 <_vfiprintf_r+0x220>
 8024a6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024a6c:	f7ff f917 	bl	8023c9e <__retarget_lock_release_recursive>
 8024a70:	89ab      	ldrh	r3, [r5, #12]
 8024a72:	065b      	lsls	r3, r3, #25
 8024a74:	f53f af12 	bmi.w	802489c <_vfiprintf_r+0x4c>
 8024a78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024a7a:	e711      	b.n	80248a0 <_vfiprintf_r+0x50>
 8024a7c:	ab03      	add	r3, sp, #12
 8024a7e:	9300      	str	r3, [sp, #0]
 8024a80:	462a      	mov	r2, r5
 8024a82:	4b09      	ldr	r3, [pc, #36]	; (8024aa8 <_vfiprintf_r+0x258>)
 8024a84:	a904      	add	r1, sp, #16
 8024a86:	4630      	mov	r0, r6
 8024a88:	f000 f880 	bl	8024b8c <_printf_i>
 8024a8c:	e7e4      	b.n	8024a58 <_vfiprintf_r+0x208>
 8024a8e:	bf00      	nop
 8024a90:	08028bd8 	.word	0x08028bd8
 8024a94:	08028bf8 	.word	0x08028bf8
 8024a98:	08028bb8 	.word	0x08028bb8
 8024a9c:	08028cca 	.word	0x08028cca
 8024aa0:	08028cd4 	.word	0x08028cd4
 8024aa4:	00000000 	.word	0x00000000
 8024aa8:	0802482b 	.word	0x0802482b
 8024aac:	08028cd0 	.word	0x08028cd0

08024ab0 <_printf_common>:
 8024ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024ab4:	4616      	mov	r6, r2
 8024ab6:	4699      	mov	r9, r3
 8024ab8:	688a      	ldr	r2, [r1, #8]
 8024aba:	690b      	ldr	r3, [r1, #16]
 8024abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024ac0:	4293      	cmp	r3, r2
 8024ac2:	bfb8      	it	lt
 8024ac4:	4613      	movlt	r3, r2
 8024ac6:	6033      	str	r3, [r6, #0]
 8024ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024acc:	4607      	mov	r7, r0
 8024ace:	460c      	mov	r4, r1
 8024ad0:	b10a      	cbz	r2, 8024ad6 <_printf_common+0x26>
 8024ad2:	3301      	adds	r3, #1
 8024ad4:	6033      	str	r3, [r6, #0]
 8024ad6:	6823      	ldr	r3, [r4, #0]
 8024ad8:	0699      	lsls	r1, r3, #26
 8024ada:	bf42      	ittt	mi
 8024adc:	6833      	ldrmi	r3, [r6, #0]
 8024ade:	3302      	addmi	r3, #2
 8024ae0:	6033      	strmi	r3, [r6, #0]
 8024ae2:	6825      	ldr	r5, [r4, #0]
 8024ae4:	f015 0506 	ands.w	r5, r5, #6
 8024ae8:	d106      	bne.n	8024af8 <_printf_common+0x48>
 8024aea:	f104 0a19 	add.w	sl, r4, #25
 8024aee:	68e3      	ldr	r3, [r4, #12]
 8024af0:	6832      	ldr	r2, [r6, #0]
 8024af2:	1a9b      	subs	r3, r3, r2
 8024af4:	42ab      	cmp	r3, r5
 8024af6:	dc26      	bgt.n	8024b46 <_printf_common+0x96>
 8024af8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024afc:	1e13      	subs	r3, r2, #0
 8024afe:	6822      	ldr	r2, [r4, #0]
 8024b00:	bf18      	it	ne
 8024b02:	2301      	movne	r3, #1
 8024b04:	0692      	lsls	r2, r2, #26
 8024b06:	d42b      	bmi.n	8024b60 <_printf_common+0xb0>
 8024b08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024b0c:	4649      	mov	r1, r9
 8024b0e:	4638      	mov	r0, r7
 8024b10:	47c0      	blx	r8
 8024b12:	3001      	adds	r0, #1
 8024b14:	d01e      	beq.n	8024b54 <_printf_common+0xa4>
 8024b16:	6823      	ldr	r3, [r4, #0]
 8024b18:	68e5      	ldr	r5, [r4, #12]
 8024b1a:	6832      	ldr	r2, [r6, #0]
 8024b1c:	f003 0306 	and.w	r3, r3, #6
 8024b20:	2b04      	cmp	r3, #4
 8024b22:	bf08      	it	eq
 8024b24:	1aad      	subeq	r5, r5, r2
 8024b26:	68a3      	ldr	r3, [r4, #8]
 8024b28:	6922      	ldr	r2, [r4, #16]
 8024b2a:	bf0c      	ite	eq
 8024b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024b30:	2500      	movne	r5, #0
 8024b32:	4293      	cmp	r3, r2
 8024b34:	bfc4      	itt	gt
 8024b36:	1a9b      	subgt	r3, r3, r2
 8024b38:	18ed      	addgt	r5, r5, r3
 8024b3a:	2600      	movs	r6, #0
 8024b3c:	341a      	adds	r4, #26
 8024b3e:	42b5      	cmp	r5, r6
 8024b40:	d11a      	bne.n	8024b78 <_printf_common+0xc8>
 8024b42:	2000      	movs	r0, #0
 8024b44:	e008      	b.n	8024b58 <_printf_common+0xa8>
 8024b46:	2301      	movs	r3, #1
 8024b48:	4652      	mov	r2, sl
 8024b4a:	4649      	mov	r1, r9
 8024b4c:	4638      	mov	r0, r7
 8024b4e:	47c0      	blx	r8
 8024b50:	3001      	adds	r0, #1
 8024b52:	d103      	bne.n	8024b5c <_printf_common+0xac>
 8024b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024b5c:	3501      	adds	r5, #1
 8024b5e:	e7c6      	b.n	8024aee <_printf_common+0x3e>
 8024b60:	18e1      	adds	r1, r4, r3
 8024b62:	1c5a      	adds	r2, r3, #1
 8024b64:	2030      	movs	r0, #48	; 0x30
 8024b66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024b6a:	4422      	add	r2, r4
 8024b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024b70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024b74:	3302      	adds	r3, #2
 8024b76:	e7c7      	b.n	8024b08 <_printf_common+0x58>
 8024b78:	2301      	movs	r3, #1
 8024b7a:	4622      	mov	r2, r4
 8024b7c:	4649      	mov	r1, r9
 8024b7e:	4638      	mov	r0, r7
 8024b80:	47c0      	blx	r8
 8024b82:	3001      	adds	r0, #1
 8024b84:	d0e6      	beq.n	8024b54 <_printf_common+0xa4>
 8024b86:	3601      	adds	r6, #1
 8024b88:	e7d9      	b.n	8024b3e <_printf_common+0x8e>
	...

08024b8c <_printf_i>:
 8024b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024b90:	7e0f      	ldrb	r7, [r1, #24]
 8024b92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024b94:	2f78      	cmp	r7, #120	; 0x78
 8024b96:	4691      	mov	r9, r2
 8024b98:	4680      	mov	r8, r0
 8024b9a:	460c      	mov	r4, r1
 8024b9c:	469a      	mov	sl, r3
 8024b9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8024ba2:	d807      	bhi.n	8024bb4 <_printf_i+0x28>
 8024ba4:	2f62      	cmp	r7, #98	; 0x62
 8024ba6:	d80a      	bhi.n	8024bbe <_printf_i+0x32>
 8024ba8:	2f00      	cmp	r7, #0
 8024baa:	f000 80d8 	beq.w	8024d5e <_printf_i+0x1d2>
 8024bae:	2f58      	cmp	r7, #88	; 0x58
 8024bb0:	f000 80a3 	beq.w	8024cfa <_printf_i+0x16e>
 8024bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024bb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024bbc:	e03a      	b.n	8024c34 <_printf_i+0xa8>
 8024bbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024bc2:	2b15      	cmp	r3, #21
 8024bc4:	d8f6      	bhi.n	8024bb4 <_printf_i+0x28>
 8024bc6:	a101      	add	r1, pc, #4	; (adr r1, 8024bcc <_printf_i+0x40>)
 8024bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024bcc:	08024c25 	.word	0x08024c25
 8024bd0:	08024c39 	.word	0x08024c39
 8024bd4:	08024bb5 	.word	0x08024bb5
 8024bd8:	08024bb5 	.word	0x08024bb5
 8024bdc:	08024bb5 	.word	0x08024bb5
 8024be0:	08024bb5 	.word	0x08024bb5
 8024be4:	08024c39 	.word	0x08024c39
 8024be8:	08024bb5 	.word	0x08024bb5
 8024bec:	08024bb5 	.word	0x08024bb5
 8024bf0:	08024bb5 	.word	0x08024bb5
 8024bf4:	08024bb5 	.word	0x08024bb5
 8024bf8:	08024d45 	.word	0x08024d45
 8024bfc:	08024c69 	.word	0x08024c69
 8024c00:	08024d27 	.word	0x08024d27
 8024c04:	08024bb5 	.word	0x08024bb5
 8024c08:	08024bb5 	.word	0x08024bb5
 8024c0c:	08024d67 	.word	0x08024d67
 8024c10:	08024bb5 	.word	0x08024bb5
 8024c14:	08024c69 	.word	0x08024c69
 8024c18:	08024bb5 	.word	0x08024bb5
 8024c1c:	08024bb5 	.word	0x08024bb5
 8024c20:	08024d2f 	.word	0x08024d2f
 8024c24:	682b      	ldr	r3, [r5, #0]
 8024c26:	1d1a      	adds	r2, r3, #4
 8024c28:	681b      	ldr	r3, [r3, #0]
 8024c2a:	602a      	str	r2, [r5, #0]
 8024c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024c34:	2301      	movs	r3, #1
 8024c36:	e0a3      	b.n	8024d80 <_printf_i+0x1f4>
 8024c38:	6820      	ldr	r0, [r4, #0]
 8024c3a:	6829      	ldr	r1, [r5, #0]
 8024c3c:	0606      	lsls	r6, r0, #24
 8024c3e:	f101 0304 	add.w	r3, r1, #4
 8024c42:	d50a      	bpl.n	8024c5a <_printf_i+0xce>
 8024c44:	680e      	ldr	r6, [r1, #0]
 8024c46:	602b      	str	r3, [r5, #0]
 8024c48:	2e00      	cmp	r6, #0
 8024c4a:	da03      	bge.n	8024c54 <_printf_i+0xc8>
 8024c4c:	232d      	movs	r3, #45	; 0x2d
 8024c4e:	4276      	negs	r6, r6
 8024c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024c54:	485e      	ldr	r0, [pc, #376]	; (8024dd0 <_printf_i+0x244>)
 8024c56:	230a      	movs	r3, #10
 8024c58:	e019      	b.n	8024c8e <_printf_i+0x102>
 8024c5a:	680e      	ldr	r6, [r1, #0]
 8024c5c:	602b      	str	r3, [r5, #0]
 8024c5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024c62:	bf18      	it	ne
 8024c64:	b236      	sxthne	r6, r6
 8024c66:	e7ef      	b.n	8024c48 <_printf_i+0xbc>
 8024c68:	682b      	ldr	r3, [r5, #0]
 8024c6a:	6820      	ldr	r0, [r4, #0]
 8024c6c:	1d19      	adds	r1, r3, #4
 8024c6e:	6029      	str	r1, [r5, #0]
 8024c70:	0601      	lsls	r1, r0, #24
 8024c72:	d501      	bpl.n	8024c78 <_printf_i+0xec>
 8024c74:	681e      	ldr	r6, [r3, #0]
 8024c76:	e002      	b.n	8024c7e <_printf_i+0xf2>
 8024c78:	0646      	lsls	r6, r0, #25
 8024c7a:	d5fb      	bpl.n	8024c74 <_printf_i+0xe8>
 8024c7c:	881e      	ldrh	r6, [r3, #0]
 8024c7e:	4854      	ldr	r0, [pc, #336]	; (8024dd0 <_printf_i+0x244>)
 8024c80:	2f6f      	cmp	r7, #111	; 0x6f
 8024c82:	bf0c      	ite	eq
 8024c84:	2308      	moveq	r3, #8
 8024c86:	230a      	movne	r3, #10
 8024c88:	2100      	movs	r1, #0
 8024c8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024c8e:	6865      	ldr	r5, [r4, #4]
 8024c90:	60a5      	str	r5, [r4, #8]
 8024c92:	2d00      	cmp	r5, #0
 8024c94:	bfa2      	ittt	ge
 8024c96:	6821      	ldrge	r1, [r4, #0]
 8024c98:	f021 0104 	bicge.w	r1, r1, #4
 8024c9c:	6021      	strge	r1, [r4, #0]
 8024c9e:	b90e      	cbnz	r6, 8024ca4 <_printf_i+0x118>
 8024ca0:	2d00      	cmp	r5, #0
 8024ca2:	d04d      	beq.n	8024d40 <_printf_i+0x1b4>
 8024ca4:	4615      	mov	r5, r2
 8024ca6:	fbb6 f1f3 	udiv	r1, r6, r3
 8024caa:	fb03 6711 	mls	r7, r3, r1, r6
 8024cae:	5dc7      	ldrb	r7, [r0, r7]
 8024cb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8024cb4:	4637      	mov	r7, r6
 8024cb6:	42bb      	cmp	r3, r7
 8024cb8:	460e      	mov	r6, r1
 8024cba:	d9f4      	bls.n	8024ca6 <_printf_i+0x11a>
 8024cbc:	2b08      	cmp	r3, #8
 8024cbe:	d10b      	bne.n	8024cd8 <_printf_i+0x14c>
 8024cc0:	6823      	ldr	r3, [r4, #0]
 8024cc2:	07de      	lsls	r6, r3, #31
 8024cc4:	d508      	bpl.n	8024cd8 <_printf_i+0x14c>
 8024cc6:	6923      	ldr	r3, [r4, #16]
 8024cc8:	6861      	ldr	r1, [r4, #4]
 8024cca:	4299      	cmp	r1, r3
 8024ccc:	bfde      	ittt	le
 8024cce:	2330      	movle	r3, #48	; 0x30
 8024cd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024cd4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8024cd8:	1b52      	subs	r2, r2, r5
 8024cda:	6122      	str	r2, [r4, #16]
 8024cdc:	f8cd a000 	str.w	sl, [sp]
 8024ce0:	464b      	mov	r3, r9
 8024ce2:	aa03      	add	r2, sp, #12
 8024ce4:	4621      	mov	r1, r4
 8024ce6:	4640      	mov	r0, r8
 8024ce8:	f7ff fee2 	bl	8024ab0 <_printf_common>
 8024cec:	3001      	adds	r0, #1
 8024cee:	d14c      	bne.n	8024d8a <_printf_i+0x1fe>
 8024cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024cf4:	b004      	add	sp, #16
 8024cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024cfa:	4835      	ldr	r0, [pc, #212]	; (8024dd0 <_printf_i+0x244>)
 8024cfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8024d00:	6829      	ldr	r1, [r5, #0]
 8024d02:	6823      	ldr	r3, [r4, #0]
 8024d04:	f851 6b04 	ldr.w	r6, [r1], #4
 8024d08:	6029      	str	r1, [r5, #0]
 8024d0a:	061d      	lsls	r5, r3, #24
 8024d0c:	d514      	bpl.n	8024d38 <_printf_i+0x1ac>
 8024d0e:	07df      	lsls	r7, r3, #31
 8024d10:	bf44      	itt	mi
 8024d12:	f043 0320 	orrmi.w	r3, r3, #32
 8024d16:	6023      	strmi	r3, [r4, #0]
 8024d18:	b91e      	cbnz	r6, 8024d22 <_printf_i+0x196>
 8024d1a:	6823      	ldr	r3, [r4, #0]
 8024d1c:	f023 0320 	bic.w	r3, r3, #32
 8024d20:	6023      	str	r3, [r4, #0]
 8024d22:	2310      	movs	r3, #16
 8024d24:	e7b0      	b.n	8024c88 <_printf_i+0xfc>
 8024d26:	6823      	ldr	r3, [r4, #0]
 8024d28:	f043 0320 	orr.w	r3, r3, #32
 8024d2c:	6023      	str	r3, [r4, #0]
 8024d2e:	2378      	movs	r3, #120	; 0x78
 8024d30:	4828      	ldr	r0, [pc, #160]	; (8024dd4 <_printf_i+0x248>)
 8024d32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024d36:	e7e3      	b.n	8024d00 <_printf_i+0x174>
 8024d38:	0659      	lsls	r1, r3, #25
 8024d3a:	bf48      	it	mi
 8024d3c:	b2b6      	uxthmi	r6, r6
 8024d3e:	e7e6      	b.n	8024d0e <_printf_i+0x182>
 8024d40:	4615      	mov	r5, r2
 8024d42:	e7bb      	b.n	8024cbc <_printf_i+0x130>
 8024d44:	682b      	ldr	r3, [r5, #0]
 8024d46:	6826      	ldr	r6, [r4, #0]
 8024d48:	6961      	ldr	r1, [r4, #20]
 8024d4a:	1d18      	adds	r0, r3, #4
 8024d4c:	6028      	str	r0, [r5, #0]
 8024d4e:	0635      	lsls	r5, r6, #24
 8024d50:	681b      	ldr	r3, [r3, #0]
 8024d52:	d501      	bpl.n	8024d58 <_printf_i+0x1cc>
 8024d54:	6019      	str	r1, [r3, #0]
 8024d56:	e002      	b.n	8024d5e <_printf_i+0x1d2>
 8024d58:	0670      	lsls	r0, r6, #25
 8024d5a:	d5fb      	bpl.n	8024d54 <_printf_i+0x1c8>
 8024d5c:	8019      	strh	r1, [r3, #0]
 8024d5e:	2300      	movs	r3, #0
 8024d60:	6123      	str	r3, [r4, #16]
 8024d62:	4615      	mov	r5, r2
 8024d64:	e7ba      	b.n	8024cdc <_printf_i+0x150>
 8024d66:	682b      	ldr	r3, [r5, #0]
 8024d68:	1d1a      	adds	r2, r3, #4
 8024d6a:	602a      	str	r2, [r5, #0]
 8024d6c:	681d      	ldr	r5, [r3, #0]
 8024d6e:	6862      	ldr	r2, [r4, #4]
 8024d70:	2100      	movs	r1, #0
 8024d72:	4628      	mov	r0, r5
 8024d74:	f7db fa54 	bl	8000220 <memchr>
 8024d78:	b108      	cbz	r0, 8024d7e <_printf_i+0x1f2>
 8024d7a:	1b40      	subs	r0, r0, r5
 8024d7c:	6060      	str	r0, [r4, #4]
 8024d7e:	6863      	ldr	r3, [r4, #4]
 8024d80:	6123      	str	r3, [r4, #16]
 8024d82:	2300      	movs	r3, #0
 8024d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024d88:	e7a8      	b.n	8024cdc <_printf_i+0x150>
 8024d8a:	6923      	ldr	r3, [r4, #16]
 8024d8c:	462a      	mov	r2, r5
 8024d8e:	4649      	mov	r1, r9
 8024d90:	4640      	mov	r0, r8
 8024d92:	47d0      	blx	sl
 8024d94:	3001      	adds	r0, #1
 8024d96:	d0ab      	beq.n	8024cf0 <_printf_i+0x164>
 8024d98:	6823      	ldr	r3, [r4, #0]
 8024d9a:	079b      	lsls	r3, r3, #30
 8024d9c:	d413      	bmi.n	8024dc6 <_printf_i+0x23a>
 8024d9e:	68e0      	ldr	r0, [r4, #12]
 8024da0:	9b03      	ldr	r3, [sp, #12]
 8024da2:	4298      	cmp	r0, r3
 8024da4:	bfb8      	it	lt
 8024da6:	4618      	movlt	r0, r3
 8024da8:	e7a4      	b.n	8024cf4 <_printf_i+0x168>
 8024daa:	2301      	movs	r3, #1
 8024dac:	4632      	mov	r2, r6
 8024dae:	4649      	mov	r1, r9
 8024db0:	4640      	mov	r0, r8
 8024db2:	47d0      	blx	sl
 8024db4:	3001      	adds	r0, #1
 8024db6:	d09b      	beq.n	8024cf0 <_printf_i+0x164>
 8024db8:	3501      	adds	r5, #1
 8024dba:	68e3      	ldr	r3, [r4, #12]
 8024dbc:	9903      	ldr	r1, [sp, #12]
 8024dbe:	1a5b      	subs	r3, r3, r1
 8024dc0:	42ab      	cmp	r3, r5
 8024dc2:	dcf2      	bgt.n	8024daa <_printf_i+0x21e>
 8024dc4:	e7eb      	b.n	8024d9e <_printf_i+0x212>
 8024dc6:	2500      	movs	r5, #0
 8024dc8:	f104 0619 	add.w	r6, r4, #25
 8024dcc:	e7f5      	b.n	8024dba <_printf_i+0x22e>
 8024dce:	bf00      	nop
 8024dd0:	08028cdb 	.word	0x08028cdb
 8024dd4:	08028cec 	.word	0x08028cec

08024dd8 <_read_r>:
 8024dd8:	b538      	push	{r3, r4, r5, lr}
 8024dda:	4d07      	ldr	r5, [pc, #28]	; (8024df8 <_read_r+0x20>)
 8024ddc:	4604      	mov	r4, r0
 8024dde:	4608      	mov	r0, r1
 8024de0:	4611      	mov	r1, r2
 8024de2:	2200      	movs	r2, #0
 8024de4:	602a      	str	r2, [r5, #0]
 8024de6:	461a      	mov	r2, r3
 8024de8:	f7e5 fe22 	bl	800aa30 <_read>
 8024dec:	1c43      	adds	r3, r0, #1
 8024dee:	d102      	bne.n	8024df6 <_read_r+0x1e>
 8024df0:	682b      	ldr	r3, [r5, #0]
 8024df2:	b103      	cbz	r3, 8024df6 <_read_r+0x1e>
 8024df4:	6023      	str	r3, [r4, #0]
 8024df6:	bd38      	pop	{r3, r4, r5, pc}
 8024df8:	2000c11c 	.word	0x2000c11c

08024dfc <__swbuf_r>:
 8024dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024dfe:	460e      	mov	r6, r1
 8024e00:	4614      	mov	r4, r2
 8024e02:	4605      	mov	r5, r0
 8024e04:	b118      	cbz	r0, 8024e0e <__swbuf_r+0x12>
 8024e06:	6983      	ldr	r3, [r0, #24]
 8024e08:	b90b      	cbnz	r3, 8024e0e <__swbuf_r+0x12>
 8024e0a:	f7fe fe83 	bl	8023b14 <__sinit>
 8024e0e:	4b21      	ldr	r3, [pc, #132]	; (8024e94 <__swbuf_r+0x98>)
 8024e10:	429c      	cmp	r4, r3
 8024e12:	d12b      	bne.n	8024e6c <__swbuf_r+0x70>
 8024e14:	686c      	ldr	r4, [r5, #4]
 8024e16:	69a3      	ldr	r3, [r4, #24]
 8024e18:	60a3      	str	r3, [r4, #8]
 8024e1a:	89a3      	ldrh	r3, [r4, #12]
 8024e1c:	071a      	lsls	r2, r3, #28
 8024e1e:	d52f      	bpl.n	8024e80 <__swbuf_r+0x84>
 8024e20:	6923      	ldr	r3, [r4, #16]
 8024e22:	b36b      	cbz	r3, 8024e80 <__swbuf_r+0x84>
 8024e24:	6923      	ldr	r3, [r4, #16]
 8024e26:	6820      	ldr	r0, [r4, #0]
 8024e28:	1ac0      	subs	r0, r0, r3
 8024e2a:	6963      	ldr	r3, [r4, #20]
 8024e2c:	b2f6      	uxtb	r6, r6
 8024e2e:	4283      	cmp	r3, r0
 8024e30:	4637      	mov	r7, r6
 8024e32:	dc04      	bgt.n	8024e3e <__swbuf_r+0x42>
 8024e34:	4621      	mov	r1, r4
 8024e36:	4628      	mov	r0, r5
 8024e38:	f7ff fb24 	bl	8024484 <_fflush_r>
 8024e3c:	bb30      	cbnz	r0, 8024e8c <__swbuf_r+0x90>
 8024e3e:	68a3      	ldr	r3, [r4, #8]
 8024e40:	3b01      	subs	r3, #1
 8024e42:	60a3      	str	r3, [r4, #8]
 8024e44:	6823      	ldr	r3, [r4, #0]
 8024e46:	1c5a      	adds	r2, r3, #1
 8024e48:	6022      	str	r2, [r4, #0]
 8024e4a:	701e      	strb	r6, [r3, #0]
 8024e4c:	6963      	ldr	r3, [r4, #20]
 8024e4e:	3001      	adds	r0, #1
 8024e50:	4283      	cmp	r3, r0
 8024e52:	d004      	beq.n	8024e5e <__swbuf_r+0x62>
 8024e54:	89a3      	ldrh	r3, [r4, #12]
 8024e56:	07db      	lsls	r3, r3, #31
 8024e58:	d506      	bpl.n	8024e68 <__swbuf_r+0x6c>
 8024e5a:	2e0a      	cmp	r6, #10
 8024e5c:	d104      	bne.n	8024e68 <__swbuf_r+0x6c>
 8024e5e:	4621      	mov	r1, r4
 8024e60:	4628      	mov	r0, r5
 8024e62:	f7ff fb0f 	bl	8024484 <_fflush_r>
 8024e66:	b988      	cbnz	r0, 8024e8c <__swbuf_r+0x90>
 8024e68:	4638      	mov	r0, r7
 8024e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024e6c:	4b0a      	ldr	r3, [pc, #40]	; (8024e98 <__swbuf_r+0x9c>)
 8024e6e:	429c      	cmp	r4, r3
 8024e70:	d101      	bne.n	8024e76 <__swbuf_r+0x7a>
 8024e72:	68ac      	ldr	r4, [r5, #8]
 8024e74:	e7cf      	b.n	8024e16 <__swbuf_r+0x1a>
 8024e76:	4b09      	ldr	r3, [pc, #36]	; (8024e9c <__swbuf_r+0xa0>)
 8024e78:	429c      	cmp	r4, r3
 8024e7a:	bf08      	it	eq
 8024e7c:	68ec      	ldreq	r4, [r5, #12]
 8024e7e:	e7ca      	b.n	8024e16 <__swbuf_r+0x1a>
 8024e80:	4621      	mov	r1, r4
 8024e82:	4628      	mov	r0, r5
 8024e84:	f000 f80c 	bl	8024ea0 <__swsetup_r>
 8024e88:	2800      	cmp	r0, #0
 8024e8a:	d0cb      	beq.n	8024e24 <__swbuf_r+0x28>
 8024e8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8024e90:	e7ea      	b.n	8024e68 <__swbuf_r+0x6c>
 8024e92:	bf00      	nop
 8024e94:	08028bd8 	.word	0x08028bd8
 8024e98:	08028bf8 	.word	0x08028bf8
 8024e9c:	08028bb8 	.word	0x08028bb8

08024ea0 <__swsetup_r>:
 8024ea0:	4b32      	ldr	r3, [pc, #200]	; (8024f6c <__swsetup_r+0xcc>)
 8024ea2:	b570      	push	{r4, r5, r6, lr}
 8024ea4:	681d      	ldr	r5, [r3, #0]
 8024ea6:	4606      	mov	r6, r0
 8024ea8:	460c      	mov	r4, r1
 8024eaa:	b125      	cbz	r5, 8024eb6 <__swsetup_r+0x16>
 8024eac:	69ab      	ldr	r3, [r5, #24]
 8024eae:	b913      	cbnz	r3, 8024eb6 <__swsetup_r+0x16>
 8024eb0:	4628      	mov	r0, r5
 8024eb2:	f7fe fe2f 	bl	8023b14 <__sinit>
 8024eb6:	4b2e      	ldr	r3, [pc, #184]	; (8024f70 <__swsetup_r+0xd0>)
 8024eb8:	429c      	cmp	r4, r3
 8024eba:	d10f      	bne.n	8024edc <__swsetup_r+0x3c>
 8024ebc:	686c      	ldr	r4, [r5, #4]
 8024ebe:	89a3      	ldrh	r3, [r4, #12]
 8024ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024ec4:	0719      	lsls	r1, r3, #28
 8024ec6:	d42c      	bmi.n	8024f22 <__swsetup_r+0x82>
 8024ec8:	06dd      	lsls	r5, r3, #27
 8024eca:	d411      	bmi.n	8024ef0 <__swsetup_r+0x50>
 8024ecc:	2309      	movs	r3, #9
 8024ece:	6033      	str	r3, [r6, #0]
 8024ed0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024ed4:	81a3      	strh	r3, [r4, #12]
 8024ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024eda:	e03e      	b.n	8024f5a <__swsetup_r+0xba>
 8024edc:	4b25      	ldr	r3, [pc, #148]	; (8024f74 <__swsetup_r+0xd4>)
 8024ede:	429c      	cmp	r4, r3
 8024ee0:	d101      	bne.n	8024ee6 <__swsetup_r+0x46>
 8024ee2:	68ac      	ldr	r4, [r5, #8]
 8024ee4:	e7eb      	b.n	8024ebe <__swsetup_r+0x1e>
 8024ee6:	4b24      	ldr	r3, [pc, #144]	; (8024f78 <__swsetup_r+0xd8>)
 8024ee8:	429c      	cmp	r4, r3
 8024eea:	bf08      	it	eq
 8024eec:	68ec      	ldreq	r4, [r5, #12]
 8024eee:	e7e6      	b.n	8024ebe <__swsetup_r+0x1e>
 8024ef0:	0758      	lsls	r0, r3, #29
 8024ef2:	d512      	bpl.n	8024f1a <__swsetup_r+0x7a>
 8024ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024ef6:	b141      	cbz	r1, 8024f0a <__swsetup_r+0x6a>
 8024ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024efc:	4299      	cmp	r1, r3
 8024efe:	d002      	beq.n	8024f06 <__swsetup_r+0x66>
 8024f00:	4630      	mov	r0, r6
 8024f02:	f7fe ff1d 	bl	8023d40 <_free_r>
 8024f06:	2300      	movs	r3, #0
 8024f08:	6363      	str	r3, [r4, #52]	; 0x34
 8024f0a:	89a3      	ldrh	r3, [r4, #12]
 8024f0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024f10:	81a3      	strh	r3, [r4, #12]
 8024f12:	2300      	movs	r3, #0
 8024f14:	6063      	str	r3, [r4, #4]
 8024f16:	6923      	ldr	r3, [r4, #16]
 8024f18:	6023      	str	r3, [r4, #0]
 8024f1a:	89a3      	ldrh	r3, [r4, #12]
 8024f1c:	f043 0308 	orr.w	r3, r3, #8
 8024f20:	81a3      	strh	r3, [r4, #12]
 8024f22:	6923      	ldr	r3, [r4, #16]
 8024f24:	b94b      	cbnz	r3, 8024f3a <__swsetup_r+0x9a>
 8024f26:	89a3      	ldrh	r3, [r4, #12]
 8024f28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024f30:	d003      	beq.n	8024f3a <__swsetup_r+0x9a>
 8024f32:	4621      	mov	r1, r4
 8024f34:	4630      	mov	r0, r6
 8024f36:	f000 f847 	bl	8024fc8 <__smakebuf_r>
 8024f3a:	89a0      	ldrh	r0, [r4, #12]
 8024f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024f40:	f010 0301 	ands.w	r3, r0, #1
 8024f44:	d00a      	beq.n	8024f5c <__swsetup_r+0xbc>
 8024f46:	2300      	movs	r3, #0
 8024f48:	60a3      	str	r3, [r4, #8]
 8024f4a:	6963      	ldr	r3, [r4, #20]
 8024f4c:	425b      	negs	r3, r3
 8024f4e:	61a3      	str	r3, [r4, #24]
 8024f50:	6923      	ldr	r3, [r4, #16]
 8024f52:	b943      	cbnz	r3, 8024f66 <__swsetup_r+0xc6>
 8024f54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024f58:	d1ba      	bne.n	8024ed0 <__swsetup_r+0x30>
 8024f5a:	bd70      	pop	{r4, r5, r6, pc}
 8024f5c:	0781      	lsls	r1, r0, #30
 8024f5e:	bf58      	it	pl
 8024f60:	6963      	ldrpl	r3, [r4, #20]
 8024f62:	60a3      	str	r3, [r4, #8]
 8024f64:	e7f4      	b.n	8024f50 <__swsetup_r+0xb0>
 8024f66:	2000      	movs	r0, #0
 8024f68:	e7f7      	b.n	8024f5a <__swsetup_r+0xba>
 8024f6a:	bf00      	nop
 8024f6c:	20000040 	.word	0x20000040
 8024f70:	08028bd8 	.word	0x08028bd8
 8024f74:	08028bf8 	.word	0x08028bf8
 8024f78:	08028bb8 	.word	0x08028bb8

08024f7c <__swhatbuf_r>:
 8024f7c:	b570      	push	{r4, r5, r6, lr}
 8024f7e:	460e      	mov	r6, r1
 8024f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024f84:	2900      	cmp	r1, #0
 8024f86:	b096      	sub	sp, #88	; 0x58
 8024f88:	4614      	mov	r4, r2
 8024f8a:	461d      	mov	r5, r3
 8024f8c:	da08      	bge.n	8024fa0 <__swhatbuf_r+0x24>
 8024f8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8024f92:	2200      	movs	r2, #0
 8024f94:	602a      	str	r2, [r5, #0]
 8024f96:	061a      	lsls	r2, r3, #24
 8024f98:	d410      	bmi.n	8024fbc <__swhatbuf_r+0x40>
 8024f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024f9e:	e00e      	b.n	8024fbe <__swhatbuf_r+0x42>
 8024fa0:	466a      	mov	r2, sp
 8024fa2:	f000 f881 	bl	80250a8 <_fstat_r>
 8024fa6:	2800      	cmp	r0, #0
 8024fa8:	dbf1      	blt.n	8024f8e <__swhatbuf_r+0x12>
 8024faa:	9a01      	ldr	r2, [sp, #4]
 8024fac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024fb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024fb4:	425a      	negs	r2, r3
 8024fb6:	415a      	adcs	r2, r3
 8024fb8:	602a      	str	r2, [r5, #0]
 8024fba:	e7ee      	b.n	8024f9a <__swhatbuf_r+0x1e>
 8024fbc:	2340      	movs	r3, #64	; 0x40
 8024fbe:	2000      	movs	r0, #0
 8024fc0:	6023      	str	r3, [r4, #0]
 8024fc2:	b016      	add	sp, #88	; 0x58
 8024fc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08024fc8 <__smakebuf_r>:
 8024fc8:	898b      	ldrh	r3, [r1, #12]
 8024fca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024fcc:	079d      	lsls	r5, r3, #30
 8024fce:	4606      	mov	r6, r0
 8024fd0:	460c      	mov	r4, r1
 8024fd2:	d507      	bpl.n	8024fe4 <__smakebuf_r+0x1c>
 8024fd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024fd8:	6023      	str	r3, [r4, #0]
 8024fda:	6123      	str	r3, [r4, #16]
 8024fdc:	2301      	movs	r3, #1
 8024fde:	6163      	str	r3, [r4, #20]
 8024fe0:	b002      	add	sp, #8
 8024fe2:	bd70      	pop	{r4, r5, r6, pc}
 8024fe4:	ab01      	add	r3, sp, #4
 8024fe6:	466a      	mov	r2, sp
 8024fe8:	f7ff ffc8 	bl	8024f7c <__swhatbuf_r>
 8024fec:	9900      	ldr	r1, [sp, #0]
 8024fee:	4605      	mov	r5, r0
 8024ff0:	4630      	mov	r0, r6
 8024ff2:	f7fe ff11 	bl	8023e18 <_malloc_r>
 8024ff6:	b948      	cbnz	r0, 802500c <__smakebuf_r+0x44>
 8024ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024ffc:	059a      	lsls	r2, r3, #22
 8024ffe:	d4ef      	bmi.n	8024fe0 <__smakebuf_r+0x18>
 8025000:	f023 0303 	bic.w	r3, r3, #3
 8025004:	f043 0302 	orr.w	r3, r3, #2
 8025008:	81a3      	strh	r3, [r4, #12]
 802500a:	e7e3      	b.n	8024fd4 <__smakebuf_r+0xc>
 802500c:	4b0d      	ldr	r3, [pc, #52]	; (8025044 <__smakebuf_r+0x7c>)
 802500e:	62b3      	str	r3, [r6, #40]	; 0x28
 8025010:	89a3      	ldrh	r3, [r4, #12]
 8025012:	6020      	str	r0, [r4, #0]
 8025014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025018:	81a3      	strh	r3, [r4, #12]
 802501a:	9b00      	ldr	r3, [sp, #0]
 802501c:	6163      	str	r3, [r4, #20]
 802501e:	9b01      	ldr	r3, [sp, #4]
 8025020:	6120      	str	r0, [r4, #16]
 8025022:	b15b      	cbz	r3, 802503c <__smakebuf_r+0x74>
 8025024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025028:	4630      	mov	r0, r6
 802502a:	f000 f84f 	bl	80250cc <_isatty_r>
 802502e:	b128      	cbz	r0, 802503c <__smakebuf_r+0x74>
 8025030:	89a3      	ldrh	r3, [r4, #12]
 8025032:	f023 0303 	bic.w	r3, r3, #3
 8025036:	f043 0301 	orr.w	r3, r3, #1
 802503a:	81a3      	strh	r3, [r4, #12]
 802503c:	89a0      	ldrh	r0, [r4, #12]
 802503e:	4305      	orrs	r5, r0
 8025040:	81a5      	strh	r5, [r4, #12]
 8025042:	e7cd      	b.n	8024fe0 <__smakebuf_r+0x18>
 8025044:	08023aad 	.word	0x08023aad

08025048 <_realloc_r>:
 8025048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802504c:	4680      	mov	r8, r0
 802504e:	4614      	mov	r4, r2
 8025050:	460e      	mov	r6, r1
 8025052:	b921      	cbnz	r1, 802505e <_realloc_r+0x16>
 8025054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025058:	4611      	mov	r1, r2
 802505a:	f7fe bedd 	b.w	8023e18 <_malloc_r>
 802505e:	b92a      	cbnz	r2, 802506c <_realloc_r+0x24>
 8025060:	f7fe fe6e 	bl	8023d40 <_free_r>
 8025064:	4625      	mov	r5, r4
 8025066:	4628      	mov	r0, r5
 8025068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802506c:	f000 f83e 	bl	80250ec <_malloc_usable_size_r>
 8025070:	4284      	cmp	r4, r0
 8025072:	4607      	mov	r7, r0
 8025074:	d802      	bhi.n	802507c <_realloc_r+0x34>
 8025076:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802507a:	d812      	bhi.n	80250a2 <_realloc_r+0x5a>
 802507c:	4621      	mov	r1, r4
 802507e:	4640      	mov	r0, r8
 8025080:	f7fe feca 	bl	8023e18 <_malloc_r>
 8025084:	4605      	mov	r5, r0
 8025086:	2800      	cmp	r0, #0
 8025088:	d0ed      	beq.n	8025066 <_realloc_r+0x1e>
 802508a:	42bc      	cmp	r4, r7
 802508c:	4622      	mov	r2, r4
 802508e:	4631      	mov	r1, r6
 8025090:	bf28      	it	cs
 8025092:	463a      	movcs	r2, r7
 8025094:	f7fe fe24 	bl	8023ce0 <memcpy>
 8025098:	4631      	mov	r1, r6
 802509a:	4640      	mov	r0, r8
 802509c:	f7fe fe50 	bl	8023d40 <_free_r>
 80250a0:	e7e1      	b.n	8025066 <_realloc_r+0x1e>
 80250a2:	4635      	mov	r5, r6
 80250a4:	e7df      	b.n	8025066 <_realloc_r+0x1e>
	...

080250a8 <_fstat_r>:
 80250a8:	b538      	push	{r3, r4, r5, lr}
 80250aa:	4d07      	ldr	r5, [pc, #28]	; (80250c8 <_fstat_r+0x20>)
 80250ac:	2300      	movs	r3, #0
 80250ae:	4604      	mov	r4, r0
 80250b0:	4608      	mov	r0, r1
 80250b2:	4611      	mov	r1, r2
 80250b4:	602b      	str	r3, [r5, #0]
 80250b6:	f7e5 fd00 	bl	800aaba <_fstat>
 80250ba:	1c43      	adds	r3, r0, #1
 80250bc:	d102      	bne.n	80250c4 <_fstat_r+0x1c>
 80250be:	682b      	ldr	r3, [r5, #0]
 80250c0:	b103      	cbz	r3, 80250c4 <_fstat_r+0x1c>
 80250c2:	6023      	str	r3, [r4, #0]
 80250c4:	bd38      	pop	{r3, r4, r5, pc}
 80250c6:	bf00      	nop
 80250c8:	2000c11c 	.word	0x2000c11c

080250cc <_isatty_r>:
 80250cc:	b538      	push	{r3, r4, r5, lr}
 80250ce:	4d06      	ldr	r5, [pc, #24]	; (80250e8 <_isatty_r+0x1c>)
 80250d0:	2300      	movs	r3, #0
 80250d2:	4604      	mov	r4, r0
 80250d4:	4608      	mov	r0, r1
 80250d6:	602b      	str	r3, [r5, #0]
 80250d8:	f7e5 fcff 	bl	800aada <_isatty>
 80250dc:	1c43      	adds	r3, r0, #1
 80250de:	d102      	bne.n	80250e6 <_isatty_r+0x1a>
 80250e0:	682b      	ldr	r3, [r5, #0]
 80250e2:	b103      	cbz	r3, 80250e6 <_isatty_r+0x1a>
 80250e4:	6023      	str	r3, [r4, #0]
 80250e6:	bd38      	pop	{r3, r4, r5, pc}
 80250e8:	2000c11c 	.word	0x2000c11c

080250ec <_malloc_usable_size_r>:
 80250ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80250f0:	1f18      	subs	r0, r3, #4
 80250f2:	2b00      	cmp	r3, #0
 80250f4:	bfbc      	itt	lt
 80250f6:	580b      	ldrlt	r3, [r1, r0]
 80250f8:	18c0      	addlt	r0, r0, r3
 80250fa:	4770      	bx	lr

080250fc <_init>:
 80250fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80250fe:	bf00      	nop
 8025100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025102:	bc08      	pop	{r3}
 8025104:	469e      	mov	lr, r3
 8025106:	4770      	bx	lr

08025108 <_fini>:
 8025108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802510a:	bf00      	nop
 802510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802510e:	bc08      	pop	{r3}
 8025110:	469e      	mov	lr, r3
 8025112:	4770      	bx	lr
