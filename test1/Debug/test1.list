
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000205e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a90  080207b4  080207b4  000307b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024244  08024244  000401dc  2**0
                  CONTENTS
  4 .ARM          00000008  08024244  08024244  00034244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802424c  0802424c  000401dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802424c  0802424c  0003424c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08024254  08024254  00034254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0802425c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000009c  080242f8  0004009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000013c  08024398  0004013c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c010  200001dc  08024438  000401dc  2**2
                  ALLOC
 12 ._user_heap_stack 00006004  2000c1ec  08024438  0004c1ec  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000401dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0008378b  00000000  00000000  0004020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c63a  00000000  00000000  000c3997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003ea8  00000000  00000000  000cffd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003c88  00000000  00000000  000d3e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031be2  00000000  00000000  000d7b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0002f175  00000000  00000000  001096ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013885f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00011b00  00000000  00000000  001388b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802079c 	.word	0x0802079c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0802079c 	.word	0x0802079c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <_Z6vprintPKcSt9__va_list>:

static uint8_t str1_;
static uint8_t str3_;

void vprint(const char *fmt, va_list argp)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b0b4      	sub	sp, #208	; 0xd0
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	6879      	ldr	r1, [r7, #4]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f01f f972 	bl	801f8c0 <vsiprintf>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	bfcc      	ite	gt
 80005e2:	2301      	movgt	r3, #1
 80005e4:	2300      	movle	r3, #0
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00c      	beq.n	8000606 <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	  HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 10); // send message via UART
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fe0d 	bl	8000210 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	f107 0108 	add.w	r1, r7, #8
 80005fe:	230a      	movs	r3, #10
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <_Z6vprintPKcSt9__va_list+0x4c>)
 8000602:	f00b f9eb 	bl	800b9dc <HAL_UART_Transmit>
    }
}
 8000606:	bf00      	nop
 8000608:	37d0      	adds	r7, #208	; 0xd0
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000688 	.word	0x20000688

08000614 <_Z7DprintfPKcz>:

void Dprintf(const char *fmt, ...) // custom printf() function
{
 8000614:	b40f      	push	{r0, r1, r2, r3}
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	6938      	ldr	r0, [r7, #16]
 8000626:	f7ff ffcd 	bl	80005c4 <_Z6vprintPKcSt9__va_list>
    va_end(argp);
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a10      	ldr	r2, [pc, #64]	; (8000688 <HAL_UART_RxCpltCallback+0x50>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d110      	bne.n	800066c <HAL_UART_RxCpltCallback+0x34>
	{
		HAL_NVIC_DisableIRQ(USART1_IRQn); //Rx Callback 함수 Disable
 800064a:	2025      	movs	r0, #37	; 0x25
 800064c:	f007 ffa4 	bl	8008598 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit_IT(&huart1, &str1_, sizeof(str1_));
 8000650:	2201      	movs	r2, #1
 8000652:	490e      	ldr	r1, [pc, #56]	; (800068c <HAL_UART_RxCpltCallback+0x54>)
 8000654:	480e      	ldr	r0, [pc, #56]	; (8000690 <HAL_UART_RxCpltCallback+0x58>)
 8000656:	f00b fa45 	bl	800bae4 <HAL_UART_Transmit_IT>
		HAL_NVIC_EnableIRQ(USART1_IRQn);  //Rx callback 함수 enable
 800065a:	2025      	movs	r0, #37	; 0x25
 800065c:	f007 ff8e 	bl	800857c <HAL_NVIC_EnableIRQ>
		HAL_UART_Receive_IT(&huart1, &str1_, sizeof(str1_));
 8000660:	2201      	movs	r2, #1
 8000662:	490a      	ldr	r1, [pc, #40]	; (800068c <HAL_UART_RxCpltCallback+0x54>)
 8000664:	480a      	ldr	r0, [pc, #40]	; (8000690 <HAL_UART_RxCpltCallback+0x58>)
 8000666:	f00b fa9b 	bl	800bba0 <HAL_UART_Receive_IT>
	{
		//HAL_NVIC_DisableIRQ(USART3_IRQn); //Rx Callback 함수 Disable
		//HAL_NVIC_EnableIRQ(USART3_IRQn);  //Rx callback 함수 enable
		HAL_UART_Receive_IT(&huart3, &str3_, 1);
	}
}
 800066a:	e009      	b.n	8000680 <HAL_UART_RxCpltCallback+0x48>
	else if(huart->Instance == USART3)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a08      	ldr	r2, [pc, #32]	; (8000694 <HAL_UART_RxCpltCallback+0x5c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d104      	bne.n	8000680 <HAL_UART_RxCpltCallback+0x48>
		HAL_UART_Receive_IT(&huart3, &str3_, 1);
 8000676:	2201      	movs	r2, #1
 8000678:	4907      	ldr	r1, [pc, #28]	; (8000698 <HAL_UART_RxCpltCallback+0x60>)
 800067a:	4808      	ldr	r0, [pc, #32]	; (800069c <HAL_UART_RxCpltCallback+0x64>)
 800067c:	f00b fa90 	bl	800bba0 <HAL_UART_Receive_IT>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40011000 	.word	0x40011000
 800068c:	200001f8 	.word	0x200001f8
 8000690:	20000688 	.word	0x20000688
 8000694:	40004800 	.word	0x40004800
 8000698:	200001f9 	.word	0x200001f9
 800069c:	20000710 	.word	0x20000710

080006a0 <_Z15Debug_Uart_Initv>:




void Debug_Uart_Init()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &str1_, 1); 	//for debugging
 80006a4:	2201      	movs	r2, #1
 80006a6:	4905      	ldr	r1, [pc, #20]	; (80006bc <_Z15Debug_Uart_Initv+0x1c>)
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <_Z15Debug_Uart_Initv+0x20>)
 80006aa:	f00b fa79 	bl	800bba0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &str3_, 1);	//for Controlling
 80006ae:	2201      	movs	r2, #1
 80006b0:	4904      	ldr	r1, [pc, #16]	; (80006c4 <_Z15Debug_Uart_Initv+0x24>)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <_Z15Debug_Uart_Initv+0x28>)
 80006b4:	f00b fa74 	bl	800bba0 <HAL_UART_Receive_IT>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200001f8 	.word	0x200001f8
 80006c0:	20000688 	.word	0x20000688
 80006c4:	200001f9 	.word	0x200001f9
 80006c8:	20000710 	.word	0x20000710

080006cc <_Z10DebugDrivev>:
int a_= 2000;
int testpos= 100000;

//for uart1 debug
void DebugDrive()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af02      	add	r7, sp, #8
	int cmd = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
	int cmd1 = str1_;
 80006d6:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <_Z10DebugDrivev+0x128>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	60bb      	str	r3, [r7, #8]
	int cmd2 = str3_;
 80006dc:	4b46      	ldr	r3, [pc, #280]	; (80007f8 <_Z10DebugDrivev+0x12c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	607b      	str	r3, [r7, #4]
	int cmd3 = char_ethernet;
 80006e2:	4b46      	ldr	r3, [pc, #280]	; (80007fc <_Z10DebugDrivev+0x130>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	603b      	str	r3, [r7, #0]

	if (cmd1 != 0) cmd = cmd1;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <_Z10DebugDrivev+0x28>
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	e00a      	b.n	800070a <_Z10DebugDrivev+0x3e>
	else if (cmd2 !=0) cmd = cmd2;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <_Z10DebugDrivev+0x34>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	e004      	b.n	800070a <_Z10DebugDrivev+0x3e>
	else if (cmd3 !=0) cmd = cmd3;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <_Z10DebugDrivev+0x3e>
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	60fb      	str	r3, [r7, #12]

	switch(cmd)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3b30      	subs	r3, #48	; 0x30
 800070e:	2b09      	cmp	r3, #9
 8000710:	d861      	bhi.n	80007d6 <_Z10DebugDrivev+0x10a>
 8000712:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <_Z10DebugDrivev+0x4c>)
 8000714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000718:	08000741 	.word	0x08000741
 800071c:	08000759 	.word	0x08000759
 8000720:	08000771 	.word	0x08000771
 8000724:	08000789 	.word	0x08000789
 8000728:	0800079b 	.word	0x0800079b
 800072c:	080007af 	.word	0x080007af
 8000730:	080007b7 	.word	0x080007b7
 8000734:	080007bf 	.word	0x080007bf
 8000738:	080007c7 	.word	0x080007c7
 800073c:	080007cf 	.word	0x080007cf
		//case '4': SensorManager::GetInstance().PCV80Drive(); break;
		//case '5': SensorManager::GetInstance().CommonSensorDrive(); break;

		//can test
		//case '1': bg95test.AbsPosCommand(1000, 1000, 1000, 100000); break;
		case '0': bg95test.AbsPosCommand(1000, 1000, 1000, 0); break;
 8000740:	2300      	movs	r3, #0
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800074c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000750:	482b      	ldr	r0, [pc, #172]	; (8000800 <_Z10DebugDrivev+0x134>)
 8000752:	f004 f9f7 	bl	8004b44 <_ZN4BG9513AbsPosCommandEimmi>
 8000756:	e03f      	b.n	80007d8 <_Z10DebugDrivev+0x10c>
		case '1': bg95test.RelPosCommand(1000, 1000, 1000, -200000); break;
 8000758:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <_Z10DebugDrivev+0x138>)
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000764:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000768:	4825      	ldr	r0, [pc, #148]	; (8000800 <_Z10DebugDrivev+0x134>)
 800076a:	f004 fa1a 	bl	8004ba2 <_ZN4BG9513RelPosCommandEimmi>
 800076e:	e033      	b.n	80007d8 <_Z10DebugDrivev+0x10c>
		case '2': bg95test.RelPosCommand(1000, 1000, 1000, 200000); break;
 8000770:	4b25      	ldr	r3, [pc, #148]	; (8000808 <_Z10DebugDrivev+0x13c>)
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800077c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000780:	481f      	ldr	r0, [pc, #124]	; (8000800 <_Z10DebugDrivev+0x134>)
 8000782:	f004 fa0e 	bl	8004ba2 <_ZN4BG9513RelPosCommandEimmi>
 8000786:	e027      	b.n	80007d8 <_Z10DebugDrivev+0x10c>
		case '3': bg95test.VelCommand(200, 1000, 1000); break;
 8000788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000790:	21c8      	movs	r1, #200	; 0xc8
 8000792:	481b      	ldr	r0, [pc, #108]	; (8000800 <_Z10DebugDrivev+0x134>)
 8000794:	f004 fa34 	bl	8004c00 <_ZN4BG9510VelCommandEimm>
 8000798:	e01e      	b.n	80007d8 <_Z10DebugDrivev+0x10c>
		case '4': bg95test.VelCommand(-200, 1000, 1000); break;
 800079a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a2:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 80007a6:	4816      	ldr	r0, [pc, #88]	; (8000800 <_Z10DebugDrivev+0x134>)
 80007a8:	f004 fa2a 	bl	8004c00 <_ZN4BG9510VelCommandEimm>
 80007ac:	e014      	b.n	80007d8 <_Z10DebugDrivev+0x10c>
		case '5': bg95test.SetDirectionNormalCommand(); break;
 80007ae:	4814      	ldr	r0, [pc, #80]	; (8000800 <_Z10DebugDrivev+0x134>)
 80007b0:	f004 fac5 	bl	8004d3e <_ZN4BG9525SetDirectionNormalCommandEv>
 80007b4:	e010      	b.n	80007d8 <_Z10DebugDrivev+0x10c>
		case '6': bg95test.SetDirectionReverseCommand(); break;
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <_Z10DebugDrivev+0x134>)
 80007b8:	f004 fad8 	bl	8004d6c <_ZN4BG9526SetDirectionReverseCommandEv>
 80007bc:	e00c      	b.n	80007d8 <_Z10DebugDrivev+0x10c>
		//case '6': bg95test.SetMaxVelocityCommand(a_); break;
		case '7': bg95test.Initialization(); break;
 80007be:	4810      	ldr	r0, [pc, #64]	; (8000800 <_Z10DebugDrivev+0x134>)
 80007c0:	f001 ff36 	bl	8002630 <_ZN4BG9514InitializationEv>
 80007c4:	e008      	b.n	80007d8 <_Z10DebugDrivev+0x10c>
		case '8': bg95test.ResetErrorCommand(); break;
 80007c6:	480e      	ldr	r0, [pc, #56]	; (8000800 <_Z10DebugDrivev+0x134>)
 80007c8:	f004 fb05 	bl	8004dd6 <_ZN4BG9517ResetErrorCommandEv>
 80007cc:	e004      	b.n	80007d8 <_Z10DebugDrivev+0x10c>
		case '9': bg95test.StopMotorCommand(); break;
 80007ce:	480c      	ldr	r0, [pc, #48]	; (8000800 <_Z10DebugDrivev+0x134>)
 80007d0:	f004 fa3f 	bl	8004c52 <_ZN4BG9516StopMotorCommandEv>
 80007d4:	e000      	b.n	80007d8 <_Z10DebugDrivev+0x10c>


		default: break;
 80007d6:	bf00      	nop
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <_Z10DebugDrivev+0x128>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <_Z10DebugDrivev+0x12c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <_Z10DebugDrivev+0x130>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
	}
	memset(&str1_, '\0', sizeof(str1_));
	memset(&str3_, '\0', sizeof(str3_));
	memset(&char_ethernet, '\0', sizeof(char_ethernet));
}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200001f8 	.word	0x200001f8
 80007f8:	200001f9 	.word	0x200001f9
 80007fc:	20000340 	.word	0x20000340
 8000800:	20001964 	.word	0x20001964
 8000804:	fffcf2c0 	.word	0xfffcf2c0
 8000808:	00030d40 	.word	0x00030d40

0800080c <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>:
#include "common_sensor.h"


CommonSensor::CommonSensor(){}

CommonSensor::CommonSensor(uint16_t index, bool active_type, uint8_t max_filter_cnt,
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	4608      	mov	r0, r1
 8000816:	4611      	mov	r1, r2
 8000818:	461a      	mov	r2, r3
 800081a:	4603      	mov	r3, r0
 800081c:	807b      	strh	r3, [r7, #2]
 800081e:	460b      	mov	r3, r1
 8000820:	707b      	strb	r3, [r7, #1]
 8000822:	4613      	mov	r3, r2
 8000824:	703b      	strb	r3, [r7, #0]
		GPIO_TypeDef* GPIOx, uint32_t PinMask)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2205      	movs	r2, #5
 8000830:	731a      	strb	r2, [r3, #12]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2200      	movs	r2, #0
 8000836:	735a      	strb	r2, [r3, #13]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	739a      	strb	r2, [r3, #14]
{
	this->index_ = index;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	887a      	ldrh	r2, [r7, #2]
 8000842:	801a      	strh	r2, [r3, #0]
	this->active_type_ = active_type;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	787a      	ldrb	r2, [r7, #1]
 8000848:	709a      	strb	r2, [r3, #2]
	this->max_filter_cnt_ = max_filter_cnt;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	783a      	ldrb	r2, [r7, #0]
 800084e:	731a      	strb	r2, [r3, #12]
	this->GPIOx_ = GPIOx;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	605a      	str	r2, [r3, #4]
	this->PinMask_ = PinMask;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	609a      	str	r2, [r3, #8]
}
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <_ZN12CommonSensorD1Ev>:

CommonSensor::~CommonSensor(){}
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <_ZNK12CommonSensor13GetSensorDataEv>:


bool CommonSensor::GetSensorData() const {return this->output_;}
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	78db      	ldrb	r3, [r3, #3]
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <_ZNK12CommonSensor14GetSensorIndexEv>:

uint16_t CommonSensor::GetSensorIndex() const {return this->index_;}
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <_ZN12CommonSensor16CheckSensorValueEv>:


//use hal or ll function
bool CommonSensor::CheckSensorValue()
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(this->GPIOx_, this->PinMask_) == 1) (this->state) = 1;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4619      	mov	r1, r3
 80008c4:	4610      	mov	r0, r2
 80008c6:	f009 fb61 	bl	8009f8c <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	bf0c      	ite	eq
 80008d0:	2301      	moveq	r3, #1
 80008d2:	2300      	movne	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d003      	beq.n	80008e2 <_ZN12CommonSensor16CheckSensorValueEv+0x32>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2201      	movs	r2, #1
 80008de:	739a      	strb	r2, [r3, #14]
 80008e0:	e002      	b.n	80008e8 <_ZN12CommonSensor16CheckSensorValueEv+0x38>
	else (this->state) = 0;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	739a      	strb	r2, [r3, #14]

	if(!active_type_) this->state = !(this->state);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	789b      	ldrb	r3, [r3, #2]
 80008ec:	f083 0301 	eor.w	r3, r3, #1
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d006      	beq.n	8000904 <_ZN12CommonSensor16CheckSensorValueEv+0x54>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7b9b      	ldrb	r3, [r3, #14]
 80008fa:	f083 0301 	eor.w	r3, r3, #1
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	739a      	strb	r2, [r3, #14]
	return this->state;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7b9b      	ldrb	r3, [r3, #14]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <_ZN12CommonSensor14IsInfoFilteredEv>:

bool CommonSensor::IsInfoFiltered()
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	return (this->now_filter_cnt_>= this->max_filter_cnt_);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7b5a      	ldrb	r2, [r3, #13]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7b1b      	ldrb	r3, [r3, #12]
 8000920:	429a      	cmp	r2, r3
 8000922:	bf2c      	ite	cs
 8000924:	2301      	movcs	r3, #1
 8000926:	2300      	movcc	r3, #0
 8000928:	b2db      	uxtb	r3, r3
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <_ZN12CommonSensor13FilterCountUpEv>:

void CommonSensor::FilterCountUp()
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
	if(this->now_filter_cnt_< this->max_filter_cnt_) this->now_filter_cnt_++;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	7b5a      	ldrb	r2, [r3, #13]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7b1b      	ldrb	r3, [r3, #12]
 8000946:	429a      	cmp	r2, r3
 8000948:	d205      	bcs.n	8000956 <_ZN12CommonSensor13FilterCountUpEv+0x20>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	7b5b      	ldrb	r3, [r3, #13]
 800094e:	3301      	adds	r3, #1
 8000950:	b2da      	uxtb	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	735a      	strb	r2, [r3, #13]
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <_ZN12CommonSensor19FilterStatusChangedEv>:

void CommonSensor::FilterStatusChanged(){this->now_filter_cnt_ = 0;}
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	735a      	strb	r2, [r3, #13]
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <_ZN12CommonSensor5DriveEv>:


bool CommonSensor::Drive()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	bool prev_val = this->state;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7b9b      	ldrb	r3, [r3, #14]
 8000988:	73fb      	strb	r3, [r7, #15]
	bool now_val = CheckSensorValue();
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ff90 	bl	80008b0 <_ZN12CommonSensor16CheckSensorValueEv>
 8000990:	4603      	mov	r3, r0
 8000992:	73bb      	strb	r3, [r7, #14]


	//1. Check Error status
	if(prev_val != now_val)
 8000994:	7bfa      	ldrb	r2, [r7, #15]
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	429a      	cmp	r2, r3
 800099a:	d008      	beq.n	80009ae <_ZN12CommonSensor5DriveEv+0x32>
	{
		FilterStatusChanged();
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ffe0 	bl	8000962 <_ZN12CommonSensor19FilterStatusChangedEv>
		this->output_ = prev_val;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7bfa      	ldrb	r2, [r7, #15]
 80009a6:	70da      	strb	r2, [r3, #3]
		return this->output_;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	78db      	ldrb	r3, [r3, #3]
 80009ac:	e016      	b.n	80009dc <_ZN12CommonSensor5DriveEv+0x60>
	}

	//2. wait until state is stabled(normal or error)
	if(!IsInfoFiltered())
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff ffae 	bl	8000910 <_ZN12CommonSensor14IsInfoFilteredEv>
 80009b4:	4603      	mov	r3, r0
 80009b6:	f083 0301 	eor.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d008      	beq.n	80009d2 <_ZN12CommonSensor5DriveEv+0x56>
	{
		FilterCountUp();
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ffb8 	bl	8000936 <_ZN12CommonSensor13FilterCountUpEv>
		this->output_ = prev_val;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	7bfa      	ldrb	r2, [r7, #15]
 80009ca:	70da      	strb	r2, [r3, #3]
		return this->output_;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	78db      	ldrb	r3, [r3, #3]
 80009d0:	e004      	b.n	80009dc <_ZN12CommonSensor5DriveEv+0x60>
	}

	this->output_ = now_val;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	7bba      	ldrb	r2, [r7, #14]
 80009d6:	70da      	strb	r2, [r3, #3]
	return this->output_;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	78db      	ldrb	r3, [r3, #3]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_sbrk_r>:
    static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit;  // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 80009ee:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <_sbrk_r+0x9c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d10e      	bne.n	8000a14 <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 80009f6:	4a23      	ldr	r2, [pc, #140]	; (8000a84 <_sbrk_r+0xa0>)
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <_sbrk_r+0xa4>)
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000a00:	4a22      	ldr	r2, [pc, #136]	; (8000a8c <_sbrk_r+0xa8>)
 8000a02:	6013      	str	r3, [r2, #0]
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <_sbrk_r+0xa0>)
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <_sbrk_r+0xa4>)
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <_sbrk_r+0x9c>)
 8000a12:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 8000a14:	f00f fde8 	bl	80105e8 <xTaskGetSchedulerState>
 8000a18:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d101      	bne.n	8000a22 <_sbrk_r+0x3e>
 8000a1e:	466b      	mov	r3, sp
 8000a20:	e000      	b.n	8000a24 <_sbrk_r+0x40>
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 8000a24:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 8000a26:	f00f fa05 	bl	800fe34 <vTaskSuspendAll>
    char *previousHeapEnd = currentHeapEnd;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <_sbrk_r+0xb0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	60bb      	str	r3, [r7, #8]
    if (currentHeapEnd + incr > limit) {
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <_sbrk_r+0xb0>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d207      	bcs.n	8000a4e <_sbrk_r+0x6a>
            // If you want to alert debugger or halt...
            // WARNING: brkpt instruction may prevent watchdog operation...
            while(1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	220c      	movs	r2, #12
 8000a42:	601a      	str	r2, [r3, #0]
            DRN_EXIT_CRITICAL_SECTION(usis);
 8000a44:	f00f fa04 	bl	800fe50 <xTaskResumeAll>
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a4c:	e014      	b.n	8000a78 <_sbrk_r+0x94>
    }
    // 'incr' of memory is available: update accounting and return it.
    currentHeapEnd += incr;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <_sbrk_r+0xb0>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	4413      	add	r3, r2
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <_sbrk_r+0xb0>)
 8000a58:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <_sbrk_r+0xa8>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <_sbrk_r+0xa8>)
 8000a64:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <_sbrk_r+0xb4>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <_sbrk_r+0xb4>)
 8000a70:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 8000a72:	f00f f9ed 	bl	800fe50 <xTaskResumeAll>
    return (char *) previousHeapEnd;
 8000a76:	68bb      	ldr	r3, [r7, #8]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000200 	.word	0x20000200
 8000a84:	20050000 	.word	0x20050000
 8000a88:	2000c1f0 	.word	0x2000c1f0
 8000a8c:	200001fc 	.word	0x200001fc
 8000a90:	2004fe00 	.word	0x2004fe00
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000204 	.word	0x20000204

08000a9c <__malloc_lock>:
char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)     {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
{
uint32_t ulCurrentInterrupt;
BaseType_t xReturn;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8000aa4:	f3ef 8305 	mrs	r3, IPSR
 8000aa8:	613b      	str	r3, [r7, #16]

	if( ulCurrentInterrupt == 0 )
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <__malloc_lock+0x1a>
	{
		xReturn = pdFALSE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	e001      	b.n	8000aba <__malloc_lock+0x1e>
	}
	else
	{
		xReturn = pdTRUE;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8000aba:	68fb      	ldr	r3, [r7, #12]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	bf14      	ite	ne
 8000ac0:	2301      	movne	r3, #1
 8000ac2:	2300      	moveq	r3, #0
 8000ac4:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 8000ac6:	7dfb      	ldrb	r3, [r7, #23]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00c      	beq.n	8000ae6 <__malloc_lock+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ad0:	b672      	cpsid	i
 8000ad2:	f383 8811 	msr	BASEPRI, r3
 8000ad6:	f3bf 8f6f 	isb	sy
 8000ada:	f3bf 8f4f 	dsb	sy
 8000ade:	b662      	cpsie	i
 8000ae0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ae2:	bf00      	nop
 8000ae4:	e7fe      	b.n	8000ae4 <__malloc_lock+0x48>
    vTaskSuspendAll();
 8000ae6:	f00f f9a5 	bl	800fe34 <vTaskSuspendAll>
  #endif
};
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <__malloc_unlock>:
void __malloc_unlock(struct _reent *r)   {
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    (void)xTaskResumeAll();
 8000afa:	f00f f9a9 	bl	800fe50 <xTaskResumeAll>
  #endif
};
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b084      	sub	sp, #16
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f01e fc16 	bl	801f340 <malloc>
 8000b14:	4603      	mov	r3, r0
 8000b16:	60fb      	str	r3, [r7, #12]
    return p;
 8000b18:	68fb      	ldr	r3, [r7, #12]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
    free(pv);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f01e fc10 	bl	801f350 <free>
};
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_ZL16TcpServerInitSeqv>:

/**** Send RESPONSE every time the client sends some data ******/


static int TcpServerInitSeq()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
	err_t err;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2010      	movs	r0, #16
 8000b44:	f010 f9e4 	bl	8010f10 <netconn_new_with_proto_and_callback>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <_ZL16TcpServerInitSeqv+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

	if (conn == NULL)
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <_ZL16TcpServerInitSeqv+0x64>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d107      	bne.n	8000b66 <_ZL16TcpServerInitSeqv+0x2e>
	{
		netconn_delete(conn);
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <_ZL16TcpServerInitSeqv+0x64>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f010 fa76 	bl	801104c <netconn_delete>
		return -1;
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b64:	e016      	b.n	8000b94 <_ZL16TcpServerInitSeqv+0x5c>
	}

	/* Bind connection to the port number 8. */
	err = netconn_bind(conn, IP_ADDR_ANY, ServerPort);
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <_ZL16TcpServerInitSeqv+0x64>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	220a      	movs	r2, #10
 8000b6c:	490c      	ldr	r1, [pc, #48]	; (8000ba0 <_ZL16TcpServerInitSeqv+0x68>)
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f010 fa88 	bl	8011084 <netconn_bind>
 8000b74:	4603      	mov	r3, r0
 8000b76:	71fb      	strb	r3, [r7, #7]

	if (err != ERR_OK) return -1;
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <_ZL16TcpServerInitSeqv+0x4e>
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b84:	e006      	b.n	8000b94 <_ZL16TcpServerInitSeqv+0x5c>

	/* Tell connection to go into listening mode. */
	netconn_listen(conn);
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <_ZL16TcpServerInitSeqv+0x64>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	21ff      	movs	r1, #255	; 0xff
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f010 fae9 	bl	8011164 <netconn_listen_with_backlog>

	/*Successfully Initialized*/
	return 0;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000208 	.word	0x20000208
 8000ba0:	080240e0 	.word	0x080240e0

08000ba4 <_ZL17TcpServerDriveSeqv>:

static int TcpServerDriveSeq()
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af02      	add	r7, sp, #8
	err_t accept_err;

	/* Grab new connection. */
	accept_err = netconn_accept(conn, &newconn);
 8000baa:	4b34      	ldr	r3, [pc, #208]	; (8000c7c <_ZL17TcpServerDriveSeqv+0xd8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4934      	ldr	r1, [pc, #208]	; (8000c80 <_ZL17TcpServerDriveSeqv+0xdc>)
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f010 fb03 	bl	80111bc <netconn_accept>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]

	/* Process the new connection. */
	if(accept_err == ERR_OK)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d157      	bne.n	8000c72 <_ZL17TcpServerDriveSeqv+0xce>
	{
		/* receive the data from the client */
		while (netconn_recv(newconn, &buf) == ERR_OK)
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <_ZL17TcpServerDriveSeqv+0xdc>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	492f      	ldr	r1, [pc, #188]	; (8000c84 <_ZL17TcpServerDriveSeqv+0xe0>)
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f010 fcff 	bl	80115cc <netconn_recv>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf0c      	ite	eq
 8000bd4:	2301      	moveq	r3, #1
 8000bd6:	2300      	movne	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d03f      	beq.n	8000c5e <_ZL17TcpServerDriveSeqv+0xba>
		{
			/* If there is some data remaining to be sent, the following process will continue */
			do
			{
				strncpy (msg, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <_ZL17TcpServerDriveSeqv+0xe0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6859      	ldr	r1, [r3, #4]
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <_ZL17TcpServerDriveSeqv+0xe0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	895b      	ldrh	r3, [r3, #10]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4825      	ldr	r0, [pc, #148]	; (8000c88 <_ZL17TcpServerDriveSeqv+0xe4>)
 8000bf2:	f01e fe3c 	bl	801f86e <strncpy>

				//for test debug
				strncpy (char_ethernet, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 8000bf6:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <_ZL17TcpServerDriveSeqv+0xe0>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6859      	ldr	r1, [r3, #4]
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <_ZL17TcpServerDriveSeqv+0xe0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	895b      	ldrh	r3, [r3, #10]
 8000c06:	461a      	mov	r2, r3
 8000c08:	4820      	ldr	r0, [pc, #128]	; (8000c8c <_ZL17TcpServerDriveSeqv+0xe8>)
 8000c0a:	f01e fe30 	bl	801f86e <strncpy>


				*/
				// Or modify the message received, so that we can send it back to the client
				//response
				int len = sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 8000c0e:	4a1e      	ldr	r2, [pc, #120]	; (8000c88 <_ZL17TcpServerDriveSeqv+0xe4>)
 8000c10:	491f      	ldr	r1, [pc, #124]	; (8000c90 <_ZL17TcpServerDriveSeqv+0xec>)
 8000c12:	4820      	ldr	r0, [pc, #128]	; (8000c94 <_ZL17TcpServerDriveSeqv+0xf0>)
 8000c14:	f01e fdc8 	bl	801f7a8 <siprintf>
 8000c18:	6038      	str	r0, [r7, #0]

				netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <_ZL17TcpServerDriveSeqv+0xdc>)
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	2300      	movs	r3, #0
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2301      	movs	r3, #1
 8000c26:	491b      	ldr	r1, [pc, #108]	; (8000c94 <_ZL17TcpServerDriveSeqv+0xf0>)
 8000c28:	f010 fd78 	bl	801171c <netconn_write_partly>
				memset (msg, '\0', 100);  // clear the buffer
 8000c2c:	2264      	movs	r2, #100	; 0x64
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4815      	ldr	r0, [pc, #84]	; (8000c88 <_ZL17TcpServerDriveSeqv+0xe4>)
 8000c32:	f01e fbcd 	bl	801f3d0 <memset>
			}
			while (netbuf_next(buf) >0);
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_ZL17TcpServerDriveSeqv+0xe0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f012 fc86 	bl	801354c <netbuf_next>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bfcc      	ite	gt
 8000c46:	2301      	movgt	r3, #1
 8000c48:	2300      	movle	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d000      	beq.n	8000c52 <_ZL17TcpServerDriveSeqv+0xae>
			do
 8000c50:	e7c5      	b.n	8000bde <_ZL17TcpServerDriveSeqv+0x3a>

			netbuf_delete(buf);
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <_ZL17TcpServerDriveSeqv+0xe0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f012 fc0e 	bl	8013478 <netbuf_delete>
		while (netconn_recv(newconn, &buf) == ERR_OK)
 8000c5c:	e7b1      	b.n	8000bc2 <_ZL17TcpServerDriveSeqv+0x1e>
		}
		/* Close connection and discard connection identifier. */
		netconn_close(newconn);
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <_ZL17TcpServerDriveSeqv+0xdc>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f010 fe5c 	bl	8011920 <netconn_close>
		netconn_delete(newconn);
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <_ZL17TcpServerDriveSeqv+0xdc>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f010 f9ed 	bl	801104c <netconn_delete>
	}
}
 8000c72:	bf00      	nop
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000208 	.word	0x20000208
 8000c80:	2000020c 	.word	0x2000020c
 8000c84:	20000210 	.word	0x20000210
 8000c88:	20000214 	.word	0x20000214
 8000c8c:	20000340 	.word	0x20000340
 8000c90:	080207b4 	.word	0x080207b4
 8000c94:	20000278 	.word	0x20000278

08000c98 <_ZL15TcpServerThreadPv>:




static void TcpServerThread(void *arg)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	TcpServerInitSeq();
 8000ca0:	f7ff ff4a 	bl	8000b38 <_ZL16TcpServerInitSeqv>

	TcpServerDriveSeq();
 8000ca4:	f7ff ff7e 	bl	8000ba4 <_ZL17TcpServerDriveSeqv>

	//if out of TcpServerDriveSeq(); it means error occur
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_Z13TcpServerInitv>:



void TcpServerInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af02      	add	r7, sp, #8
  sys_thread_new("TcpServerThread", TcpServerThread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4903      	ldr	r1, [pc, #12]	; (8000cd0 <_Z13TcpServerInitv+0x20>)
 8000cc2:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <_Z13TcpServerInitv+0x24>)
 8000cc4:	f01e f99a 	bl	801effc <sys_thread_new>
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	08000c99 	.word	0x08000c99
 8000cd4:	080207d4 	.word	0x080207d4

08000cd8 <_Z7udpsendPc>:
/*------------------------------------Client-----------------------------------------*/
/*-----------------------------------------------------------------------------------*/

/*-------UDP Send function to send the data to the server-------------*/
void udpsend (char *data)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	buf = netbuf_new();   // Create a new netbuf
 8000ce0:	f012 fbb6 	bl	8013450 <netbuf_new>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <_Z7udpsendPc+0x4c>)
 8000ce8:	6013      	str	r3, [r2, #0]
	netbuf_ref(buf, data, strlen(data));  // refer the netbuf to the data to be sent
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <_Z7udpsendPc+0x4c>)
 8000cec:	681c      	ldr	r4, [r3, #0]
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fa8e 	bl	8000210 <strlen>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f012 fbdb 	bl	80134b8 <netbuf_ref>
	netconn_send(conn,buf);  // send the netbuf to the client
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <_Z7udpsendPc+0x50>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <_Z7udpsendPc+0x4c>)
 8000d08:	6812      	ldr	r2, [r2, #0]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f010 fcd7 	bl	80116c0 <netconn_send>
	netbuf_delete(buf);  // delete the netbuf
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <_Z7udpsendPc+0x4c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f012 fbae 	bl	8013478 <netbuf_delete>
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd90      	pop	{r4, r7, pc}
 8000d24:	200003a8 	.word	0x200003a8
 8000d28:	200003a4 	.word	0x200003a4

08000d2c <_ZL15UdpClientThreadPv>:



static void UdpClientThread(void *arg)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	err_t err, recv_err;
	ip_addr_t dest_addr;
	/* Create a new connection identifier */
	conn = netconn_new(NETCONN_UDP);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	2020      	movs	r0, #32
 8000d3a:	f010 f8e9 	bl	8010f10 <netconn_new_with_proto_and_callback>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4a2d      	ldr	r2, [pc, #180]	; (8000df8 <_ZL15UdpClientThreadPv+0xcc>)
 8000d42:	6013      	str	r3, [r2, #0]

	if (conn!= NULL)
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <_ZL15UdpClientThreadPv+0xcc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d04c      	beq.n	8000de6 <_ZL15UdpClientThreadPv+0xba>
	{
		/* Bind connection to the port 7 */
		err = netconn_bind(conn, IP_ADDR_ANY, ClientPort);
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <_ZL15UdpClientThreadPv+0xcc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2208      	movs	r2, #8
 8000d52:	492a      	ldr	r1, [pc, #168]	; (8000dfc <_ZL15UdpClientThreadPv+0xd0>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f010 f995 	bl	8011084 <netconn_bind>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	73fb      	strb	r3, [r7, #15]
		if (err == ERR_OK)
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d144      	bne.n	8000df0 <_ZL15UdpClientThreadPv+0xc4>
		{
			/* The desination IP adress of the computer */
			IP_ADDR4(&dest_addr, 192, 168, 1, 25);
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <_ZL15UdpClientThreadPv+0xd4>)
 8000d68:	60bb      	str	r3, [r7, #8]
			/* connect to the destination (server) at port 8 */
			err = netconn_connect(conn, &dest_addr, ServerPort);
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <_ZL15UdpClientThreadPv+0xcc>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f107 0108 	add.w	r1, r7, #8
 8000d72:	2207      	movs	r2, #7
 8000d74:	4618      	mov	r0, r3
 8000d76:	f010 f9bd 	bl	80110f4 <netconn_connect>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
			if (err == ERR_OK)
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d134      	bne.n	8000df0 <_ZL15UdpClientThreadPv+0xc4>
			{
				/* Got into infinite loop after initialisation */
				for (;;)
				{
						/* Receive data from the server */
						recv_err = netconn_recv(conn, &rxbuf);
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <_ZL15UdpClientThreadPv+0xcc>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	491e      	ldr	r1, [pc, #120]	; (8000e04 <_ZL15UdpClientThreadPv+0xd8>)
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f010 fc1d 	bl	80115cc <netconn_recv>
 8000d92:	4603      	mov	r3, r0
 8000d94:	73bb      	strb	r3, [r7, #14]
						if (recv_err == ERR_OK)
 8000d96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f3      	bne.n	8000d86 <_ZL15UdpClientThreadPv+0x5a>
						{
							strncpy (msg, (char *) rxbuf->p->payload, rxbuf->p->len);  // get the message from the client
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <_ZL15UdpClientThreadPv+0xd8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6859      	ldr	r1, [r3, #4]
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <_ZL15UdpClientThreadPv+0xd8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	895b      	ldrh	r3, [r3, #10]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4815      	ldr	r0, [pc, #84]	; (8000e08 <_ZL15UdpClientThreadPv+0xdc>)
 8000db2:	f01e fd5c 	bl	801f86e <strncpy>
							/* copy the data into our buffer (smsg) */
							sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 8000db6:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <_ZL15UdpClientThreadPv+0xdc>)
 8000db8:	4914      	ldr	r1, [pc, #80]	; (8000e0c <_ZL15UdpClientThreadPv+0xe0>)
 8000dba:	4815      	ldr	r0, [pc, #84]	; (8000e10 <_ZL15UdpClientThreadPv+0xe4>)
 8000dbc:	f01e fcf4 	bl	801f7a8 <siprintf>
							udpsend(smsg);  // send the message to the server
 8000dc0:	4813      	ldr	r0, [pc, #76]	; (8000e10 <_ZL15UdpClientThreadPv+0xe4>)
 8000dc2:	f7ff ff89 	bl	8000cd8 <_Z7udpsendPc>
							netbuf_delete(rxbuf);  // delete the netbuf
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <_ZL15UdpClientThreadPv+0xd8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f012 fb54 	bl	8013478 <netbuf_delete>
							memset(msg, '\0', sizeof(msg));
 8000dd0:	2264      	movs	r2, #100	; 0x64
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <_ZL15UdpClientThreadPv+0xdc>)
 8000dd6:	f01e fafb 	bl	801f3d0 <memset>
							memset(msg, '\0', sizeof(smsg));
 8000dda:	22c8      	movs	r2, #200	; 0xc8
 8000ddc:	2100      	movs	r1, #0
 8000dde:	480a      	ldr	r0, [pc, #40]	; (8000e08 <_ZL15UdpClientThreadPv+0xdc>)
 8000de0:	f01e faf6 	bl	801f3d0 <memset>
						recv_err = netconn_recv(conn, &rxbuf);
 8000de4:	e7cf      	b.n	8000d86 <_ZL15UdpClientThreadPv+0x5a>
		}
	}

	else
	{
		netconn_delete(conn);
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <_ZL15UdpClientThreadPv+0xcc>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f010 f92e 	bl	801104c <netconn_delete>
	}
}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200003a4 	.word	0x200003a4
 8000dfc:	080240e0 	.word	0x080240e0
 8000e00:	1901a8c0 	.word	0x1901a8c0
 8000e04:	200003ac 	.word	0x200003ac
 8000e08:	200003b0 	.word	0x200003b0
 8000e0c:	08020844 	.word	0x08020844
 8000e10:	20000414 	.word	0x20000414

08000e14 <_Z13UdpClientInitv>:
	}
}
*/

void UdpClientInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af02      	add	r7, sp, #8
	//sys_thread_new("udpsend_thread", udpsend_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
	sys_thread_new("UdpClientThread", UdpClientThread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e22:	2200      	movs	r2, #0
 8000e24:	4903      	ldr	r1, [pc, #12]	; (8000e34 <_Z13UdpClientInitv+0x20>)
 8000e26:	4804      	ldr	r0, [pc, #16]	; (8000e38 <_Z13UdpClientInitv+0x24>)
 8000e28:	f01e f8e8 	bl	801effc <sys_thread_new>
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	08000d2d 	.word	0x08000d2d
 8000e38:	08020864 	.word	0x08020864

08000e3c <init_stm32f746>:




void init_stm32f746()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8000e40:	f000 faaa 	bl	8001398 <MX_GPIO_Init>
	MX_CAN1_Init();
 8000e44:	f000 f88c 	bl	8000f60 <MX_CAN1_Init>
	MX_FMC_Init();
 8000e48:	f000 fa3e 	bl	80012c8 <MX_FMC_Init>
	MX_UART4_Init();
 8000e4c:	f000 f934 	bl	80010b8 <MX_UART4_Init>
	MX_USART1_UART_Init();
 8000e50:	f000 f99c 	bl	800118c <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8000e54:	f000 f9ce 	bl	80011f4 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8000e58:	f000 fa00 	bl	800125c <MX_USART6_UART_Init>
	MX_UART5_Init();
 8000e5c:	f000 f960 	bl	8001120 <MX_UART5_Init>
	MX_TIM7_Init();
 8000e60:	f000 f8ea 	bl	8001038 <MX_TIM7_Init>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b094      	sub	sp, #80	; 0x50
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0320 	add.w	r3, r7, #32
 8000e72:	2230      	movs	r2, #48	; 0x30
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f01e faaa 	bl	801f3d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8c:	4b32      	ldr	r3, [pc, #200]	; (8000f58 <SystemClock_Config+0xf0>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	4a31      	ldr	r2, [pc, #196]	; (8000f58 <SystemClock_Config+0xf0>)
 8000e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e96:	6413      	str	r3, [r2, #64]	; 0x40
 8000e98:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <SystemClock_Config+0xf0>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <SystemClock_Config+0xf4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a2c      	ldr	r2, [pc, #176]	; (8000f5c <SystemClock_Config+0xf4>)
 8000eaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <SystemClock_Config+0xf4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ed0:	2319      	movs	r3, #25
 8000ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000ed4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000ed8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f009 f8d2 	bl	800a090 <HAL_RCC_OscConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	bf14      	ite	ne
 8000ef2:	2301      	movne	r3, #1
 8000ef4:	2300      	moveq	r3, #0
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000efc:	f000 fb4c 	bl	8001598 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f00:	f009 f876 	bl	8009ff0 <HAL_PWREx_EnableOverDrive>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf14      	ite	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	2300      	moveq	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000f14:	f000 fb40 	bl	8001598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f18:	230f      	movs	r3, #15
 8000f1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2107      	movs	r1, #7
 8000f36:	4618      	mov	r0, r3
 8000f38:	f009 fb4e 	bl	800a5d8 <HAL_RCC_ClockConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	bf14      	ite	ne
 8000f42:	2301      	movne	r3, #1
 8000f44:	2300      	moveq	r3, #0
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000f4c:	f000 fb24 	bl	8001598 <Error_Handler>
  }
}
 8000f50:	bf00      	nop
 8000f52:	3750      	adds	r7, #80	; 0x50
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <MX_CAN1_Init>:
/**
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN1_Init(void){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000f64:	4b31      	ldr	r3, [pc, #196]	; (800102c <MX_CAN1_Init+0xcc>)
 8000f66:	4a32      	ldr	r2, [pc, #200]	; (8001030 <MX_CAN1_Init+0xd0>)
 8000f68:	601a      	str	r2, [r3, #0]

  //125 ~ 500khz
  //hcan1.Init.Prescaler = 3;//1000khz -> 3, 15, 2
  //hcan1.Init.Prescaler = 6;//500khz -> 6, 15, 2
  hcan1.Init.Prescaler = 12;//250khz -> 12, 15, 2
 8000f6a:	4b30      	ldr	r3, [pc, #192]	; (800102c <MX_CAN1_Init+0xcc>)
 8000f6c:	220c      	movs	r2, #12
 8000f6e:	605a      	str	r2, [r3, #4]
  //hcan1.Init.Prescaler = 27;//125khz -> 27,16,13
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f70:	4b2e      	ldr	r3, [pc, #184]	; (800102c <MX_CAN1_Init+0xcc>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f76:	4b2d      	ldr	r3, [pc, #180]	; (800102c <MX_CAN1_Init+0xcc>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000f7c:	4b2b      	ldr	r3, [pc, #172]	; (800102c <MX_CAN1_Init+0xcc>)
 8000f7e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f82:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <MX_CAN1_Init+0xcc>)
 8000f86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f8a:	615a      	str	r2, [r3, #20]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
*/

  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <MX_CAN1_Init+0xcc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <MX_CAN1_Init+0xcc>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f98:	4b24      	ldr	r3, [pc, #144]	; (800102c <MX_CAN1_Init+0xcc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f9e:	4b23      	ldr	r3, [pc, #140]	; (800102c <MX_CAN1_Init+0xcc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fa4:	4b21      	ldr	r3, [pc, #132]	; (800102c <MX_CAN1_Init+0xcc>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000faa:	4b20      	ldr	r3, [pc, #128]	; (800102c <MX_CAN1_Init+0xcc>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan1) != HAL_OK){
 8000fb0:	481e      	ldr	r0, [pc, #120]	; (800102c <MX_CAN1_Init+0xcc>)
 8000fb2:	f006 faef 	bl	8007594 <HAL_CAN_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	bf14      	ite	ne
 8000fbc:	2301      	movne	r3, #1
 8000fbe:	2300      	moveq	r3, #0
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_CAN1_Init+0x6a>
    Error_Handler();
 8000fc6:	f000 fae7 	bl	8001598 <Error_Handler>
  }


  sFilterConfig.FilterBank = 0;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_CAN1_Init+0xd4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_CAN1_Init+0xd4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_CAN1_Init+0xd4>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x1fff;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_CAN1_Init+0xd4>)
 8000fde:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000fe2:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0xffff;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_CAN1_Init+0xd4>)
 8000fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fea:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;             //maximum range of accepting id
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_CAN1_Init+0xd4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;				//minimum range of accepting id
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <MX_CAN1_Init+0xd4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_CAN1_Init+0xd4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <MX_CAN1_Init+0xd4>)
 8001000:	2201      	movs	r2, #1
 8001002:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;   //14
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_CAN1_Init+0xd4>)
 8001006:	220e      	movs	r2, #14
 8001008:	625a      	str	r2, [r3, #36]	; 0x24


  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800100a:	490a      	ldr	r1, [pc, #40]	; (8001034 <MX_CAN1_Init+0xd4>)
 800100c:	4807      	ldr	r0, [pc, #28]	; (800102c <MX_CAN1_Init+0xcc>)
 800100e:	f006 fbbd 	bl	800778c <HAL_CAN_ConfigFilter>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf14      	ite	ne
 8001018:	2301      	movne	r3, #1
 800101a:	2300      	moveq	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_CAN1_Init+0xc6>
  {
    /*Filter configuration Error*/
    Error_Handler();
 8001022:	f000 fab9 	bl	8001598 <Error_Handler>

  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200004dc 	.word	0x200004dc
 8001030:	40006400 	.word	0x40006400
 8001034:	20000504 	.word	0x20000504

08001038 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM7_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_TIM7_Init+0x78>)
 800104a:	4a1a      	ldr	r2, [pc, #104]	; (80010b4 <MX_TIM7_Init+0x7c>)
 800104c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_TIM7_Init+0x78>)
 8001050:	226b      	movs	r2, #107	; 0x6b
 8001052:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MX_TIM7_Init+0x78>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <MX_TIM7_Init+0x78>)
 800105c:	2263      	movs	r2, #99	; 0x63
 800105e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <MX_TIM7_Init+0x78>)
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001066:	4812      	ldr	r0, [pc, #72]	; (80010b0 <MX_TIM7_Init+0x78>)
 8001068:	f00a f906 	bl	800b278 <HAL_TIM_Base_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	bf14      	ite	ne
 8001072:	2301      	movne	r3, #1
 8001074:	2300      	moveq	r3, #0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM7_Init+0x48>
  {
    Error_Handler();
 800107c:	f000 fa8c 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4619      	mov	r1, r3
 800108c:	4808      	ldr	r0, [pc, #32]	; (80010b0 <MX_TIM7_Init+0x78>)
 800108e:	f00a fbab 	bl	800b7e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2301      	movne	r3, #1
 800109a:	2300      	moveq	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 80010a2:	f000 fa79 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000052c 	.word	0x2000052c
 80010b4:	40001400 	.word	0x40001400

080010b8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART4_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_UART4_Init+0x60>)
 80010be:	4a17      	ldr	r2, [pc, #92]	; (800111c <MX_UART4_Init+0x64>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_UART4_Init+0x60>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_UART4_Init+0x60>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_UART4_Init+0x60>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_UART4_Init+0x60>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_UART4_Init+0x60>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <MX_UART4_Init+0x60>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_UART4_Init+0x60>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_UART4_Init+0x60>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_UART4_Init+0x60>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010fa:	4807      	ldr	r0, [pc, #28]	; (8001118 <MX_UART4_Init+0x60>)
 80010fc:	f00a fc20 	bl	800b940 <HAL_UART_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	bf14      	ite	ne
 8001106:	2301      	movne	r3, #1
 8001108:	2300      	moveq	r3, #0
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001110:	f000 fa42 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000578 	.word	0x20000578
 800111c:	40004c00 	.word	0x40004c00

08001120 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART5_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_UART5_Init+0x64>)
 8001126:	4a18      	ldr	r2, [pc, #96]	; (8001188 <MX_UART5_Init+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_UART5_Init+0x64>)
 800112c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001130:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_UART5_Init+0x64>)
 8001134:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001138:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <MX_UART5_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <MX_UART5_Init+0x64>)
 8001142:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001146:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_UART5_Init+0x64>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <MX_UART5_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_UART5_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <MX_UART5_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_UART5_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <MX_UART5_Init+0x64>)
 8001168:	f00a fbea 	bl	800b940 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	bf14      	ite	ne
 8001172:	2301      	movne	r3, #1
 8001174:	2300      	moveq	r3, #0
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_UART5_Init+0x60>
  {
    Error_Handler();
 800117c:	f000 fa0c 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000600 	.word	0x20000600
 8001188:	40005000 	.word	0x40005000

0800118c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_USART1_UART_Init+0x60>)
 8001192:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <MX_USART1_UART_Init+0x64>)
 8001194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_USART1_UART_Init+0x60>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_USART1_UART_Init+0x60>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_USART1_UART_Init+0x60>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MX_USART1_UART_Init+0x60>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_USART1_UART_Init+0x60>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <MX_USART1_UART_Init+0x60>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_USART1_UART_Init+0x60>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_USART1_UART_Init+0x60>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_USART1_UART_Init+0x60>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <MX_USART1_UART_Init+0x60>)
 80011d0:	f00a fbb6 	bl	800b940 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bf14      	ite	ne
 80011da:	2301      	movne	r3, #1
 80011dc:	2300      	moveq	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 80011e4:	f000 f9d8 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000688 	.word	0x20000688
 80011f0:	40011000 	.word	0x40011000

080011f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_USART3_UART_Init+0x60>)
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <MX_USART3_UART_Init+0x64>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_USART3_UART_Init+0x60>)
 8001200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001204:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_USART3_UART_Init+0x60>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_USART3_UART_Init+0x60>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_USART3_UART_Init+0x60>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_USART3_UART_Init+0x60>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <MX_USART3_UART_Init+0x60>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_USART3_UART_Init+0x60>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <MX_USART3_UART_Init+0x60>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_USART3_UART_Init+0x60>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <MX_USART3_UART_Init+0x60>)
 8001238:	f00a fb82 	bl	800b940 <HAL_UART_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf14      	ite	ne
 8001242:	2301      	movne	r3, #1
 8001244:	2300      	moveq	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 800124c:	f000 f9a4 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000710 	.word	0x20000710
 8001258:	40004800 	.word	0x40004800

0800125c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART6_UART_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_USART6_UART_Init+0x64>)
 8001262:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <MX_USART6_UART_Init+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_USART6_UART_Init+0x64>)
 8001268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800126c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_USART6_UART_Init+0x64>)
 8001270:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001274:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_USART6_UART_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <MX_USART6_UART_Init+0x64>)
 800127e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001282:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_USART6_UART_Init+0x64>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <MX_USART6_UART_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <MX_USART6_UART_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_USART6_UART_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <MX_USART6_UART_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012a2:	4807      	ldr	r0, [pc, #28]	; (80012c0 <MX_USART6_UART_Init+0x64>)
 80012a4:	f00a fb4c 	bl	800b940 <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	bf14      	ite	ne
 80012ae:	2301      	movne	r3, #1
 80012b0:	2300      	moveq	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_USART6_UART_Init+0x60>
  {
    Error_Handler();
 80012b8:	f000 f96e 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000798 	.word	0x20000798
 80012c4:	40011400 	.word	0x40011400

080012c8 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <MX_FMC_Init+0xc8>)
 80012e2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012e6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <MX_FMC_Init+0xc8>)
 80012ea:	4a2a      	ldr	r2, [pc, #168]	; (8001394 <MX_FMC_Init+0xcc>)
 80012ec:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <MX_FMC_Init+0xc8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <MX_FMC_Init+0xc8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <MX_FMC_Init+0xc8>)
 80012fc:	2204      	movs	r2, #4
 80012fe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <MX_FMC_Init+0xc8>)
 8001302:	2210      	movs	r2, #16
 8001304:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001306:	4b22      	ldr	r3, [pc, #136]	; (8001390 <MX_FMC_Init+0xc8>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800130c:	4b20      	ldr	r3, [pc, #128]	; (8001390 <MX_FMC_Init+0xc8>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <MX_FMC_Init+0xc8>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <MX_FMC_Init+0xc8>)
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <MX_FMC_Init+0xc8>)
 8001320:	2200      	movs	r2, #0
 8001322:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_FMC_Init+0xc8>)
 8001326:	2200      	movs	r2, #0
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <MX_FMC_Init+0xc8>)
 800132c:	2200      	movs	r2, #0
 800132e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_FMC_Init+0xc8>)
 8001332:	2200      	movs	r2, #0
 8001334:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_FMC_Init+0xc8>)
 8001338:	2200      	movs	r2, #0
 800133a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_FMC_Init+0xc8>)
 800133e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_FMC_Init+0xc8>)
 8001346:	2200      	movs	r2, #0
 8001348:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 800134a:	2305      	movs	r3, #5
 800134c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800134e:	230f      	movs	r3, #15
 8001350:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8001352:	2304      	movs	r3, #4
 8001354:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 4;
 8001356:	2304      	movs	r3, #4
 8001358:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800135a:	2310      	movs	r3, #16
 800135c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800135e:	2311      	movs	r3, #17
 8001360:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <MX_FMC_Init+0xc8>)
 800136e:	f009 ff3b 	bl	800b1e8 <HAL_SRAM_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf14      	ite	ne
 8001378:	2301      	movne	r3, #1
 800137a:	2300      	moveq	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_FMC_Init+0xbe>
  {
    Error_Handler( );
 8001382:	f000 f909 	bl	8001598 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001386:	bf00      	nop
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000820 	.word	0x20000820
 8001394:	a0000104 	.word	0xa0000104

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08e      	sub	sp, #56	; 0x38
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ae:	4b6b      	ldr	r3, [pc, #428]	; (800155c <MX_GPIO_Init+0x1c4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a6a      	ldr	r2, [pc, #424]	; (800155c <MX_GPIO_Init+0x1c4>)
 80013b4:	f043 0310 	orr.w	r3, r3, #16
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b68      	ldr	r3, [pc, #416]	; (800155c <MX_GPIO_Init+0x1c4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	623b      	str	r3, [r7, #32]
 80013c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	4b65      	ldr	r3, [pc, #404]	; (800155c <MX_GPIO_Init+0x1c4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a64      	ldr	r2, [pc, #400]	; (800155c <MX_GPIO_Init+0x1c4>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b62      	ldr	r3, [pc, #392]	; (800155c <MX_GPIO_Init+0x1c4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013de:	4b5f      	ldr	r3, [pc, #380]	; (800155c <MX_GPIO_Init+0x1c4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a5e      	ldr	r2, [pc, #376]	; (800155c <MX_GPIO_Init+0x1c4>)
 80013e4:	f043 0320 	orr.w	r3, r3, #32
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b5c      	ldr	r3, [pc, #368]	; (800155c <MX_GPIO_Init+0x1c4>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	61bb      	str	r3, [r7, #24]
 80013f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f6:	4b59      	ldr	r3, [pc, #356]	; (800155c <MX_GPIO_Init+0x1c4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a58      	ldr	r2, [pc, #352]	; (800155c <MX_GPIO_Init+0x1c4>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b56      	ldr	r3, [pc, #344]	; (800155c <MX_GPIO_Init+0x1c4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b53      	ldr	r3, [pc, #332]	; (800155c <MX_GPIO_Init+0x1c4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a52      	ldr	r2, [pc, #328]	; (800155c <MX_GPIO_Init+0x1c4>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b50      	ldr	r3, [pc, #320]	; (800155c <MX_GPIO_Init+0x1c4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b4d      	ldr	r3, [pc, #308]	; (800155c <MX_GPIO_Init+0x1c4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a4c      	ldr	r2, [pc, #304]	; (800155c <MX_GPIO_Init+0x1c4>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b4a      	ldr	r3, [pc, #296]	; (800155c <MX_GPIO_Init+0x1c4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800143e:	4b47      	ldr	r3, [pc, #284]	; (800155c <MX_GPIO_Init+0x1c4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a46      	ldr	r2, [pc, #280]	; (800155c <MX_GPIO_Init+0x1c4>)
 8001444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b44      	ldr	r3, [pc, #272]	; (800155c <MX_GPIO_Init+0x1c4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001456:	4b41      	ldr	r3, [pc, #260]	; (800155c <MX_GPIO_Init+0x1c4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a40      	ldr	r2, [pc, #256]	; (800155c <MX_GPIO_Init+0x1c4>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b3e      	ldr	r3, [pc, #248]	; (800155c <MX_GPIO_Init+0x1c4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 800146e:	2200      	movs	r2, #0
 8001470:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8001474:	483a      	ldr	r0, [pc, #232]	; (8001560 <MX_GPIO_Init+0x1c8>)
 8001476:	f008 fda1 	bl	8009fbc <HAL_GPIO_WritePin>
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|BUZZER_Pin
 800147a:	2200      	movs	r2, #0
 800147c:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001480:	4838      	ldr	r0, [pc, #224]	; (8001564 <MX_GPIO_Init+0x1cc>)
 8001482:	f008 fd9b 	bl	8009fbc <HAL_GPIO_WritePin>
                          |SLED1_Pin|SLED2_Pin|SLED3_Pin|SLED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCX512_RST_Pin|MCX512_EMG_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 7140 	mov.w	r1, #768	; 0x300
 800148c:	4836      	ldr	r0, [pc, #216]	; (8001568 <MX_GPIO_Init+0x1d0>)
 800148e:	f008 fd95 	bl	8009fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI18_Pin DI19_Pin DI20_Pin DI_EMG1_Pin
                           DI_EMG2_Pin DI16_Pin DI17_Pin */
  GPIO_InitStruct.Pin = DI18_Pin|DI19_Pin|DI20_Pin|DI_EMG1_Pin
 8001492:	237f      	movs	r3, #127	; 0x7f
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI_EMG2_Pin|DI16_Pin|DI17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001496:	2300      	movs	r3, #0
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	4619      	mov	r1, r3
 80014a4:	4831      	ldr	r0, [pc, #196]	; (800156c <MX_GPIO_Init+0x1d4>)
 80014a6:	f008 fbc5 	bl	8009c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_INT0_Pin MCX512_INT1_Pin */
  GPIO_InitStruct.Pin = MCX512_INT0_Pin|MCX512_INT1_Pin;
 80014aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	482a      	ldr	r0, [pc, #168]	; (8001568 <MX_GPIO_Init+0x1d0>)
 80014c0:	f008 fbb8 	bl	8009c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : CO1_Pin CO2_Pin LED1_R_Pin LED1_G_Pin
                           LED1_B_Pin LED2_R_Pin LED2_G_Pin LED2_B_Pin
                           DO1_Pin DO2_Pin DO3_Pin DO4_Pin */
  GPIO_InitStruct.Pin = CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 80014c4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	4820      	ldr	r0, [pc, #128]	; (8001560 <MX_GPIO_Init+0x1c8>)
 80014de:	f008 fba9 	bl	8009c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART5_DIR_Pin UART6_DIR_Pin UART4_DIR_Pin SLED1_Pin
                           SLED2_Pin SLED3_Pin SLED4_Pin */
  GPIO_InitStruct.Pin = UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|SLED1_Pin
 80014e2:	f240 33c7 	movw	r3, #967	; 0x3c7
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SLED2_Pin|SLED3_Pin|SLED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	481a      	ldr	r0, [pc, #104]	; (8001564 <MX_GPIO_Init+0x1cc>)
 80014fc:	f008 fb9a 	bl	8009c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI5_Pin DI6_Pin DI7_Pin DI8_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin
                           DI13_Pin DI14_Pin DI15_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8001500:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin
                          |DI13_Pin|DI14_Pin|DI15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	4619      	mov	r1, r3
 8001514:	4816      	ldr	r0, [pc, #88]	; (8001570 <MX_GPIO_Init+0x1d8>)
 8001516:	f008 fb8d 	bl	8009c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_RST_Pin MCX512_EMG_Pin */
  GPIO_InitStruct.Pin = MCX512_RST_Pin|MCX512_EMG_Pin;
 800151a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_GPIO_Init+0x1d0>)
 8001534:	f008 fb7e 	bl	8009c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001538:	2320      	movs	r3, #32
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001544:	2302      	movs	r3, #2
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	4619      	mov	r1, r3
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_GPIO_Init+0x1cc>)
 8001550:	f008 fb70 	bl	8009c34 <HAL_GPIO_Init>

}
 8001554:	bf00      	nop
 8001556:	3738      	adds	r7, #56	; 0x38
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40023800 	.word	0x40023800
 8001560:	40021400 	.word	0x40021400
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800
 800156c:	40021000 	.word	0x40021000
 8001570:	40021800 	.word	0x40021800

08001574 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d101      	bne.n	800158a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001586:	f005 ffc1 	bl	800750c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40001000 	.word	0x40001000

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
}
 800159e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <Error_Handler+0x8>

080015a2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f001 f8bc 	bl	8002740 <_ZNSaI23CAN_WData_HandleTypeDefED1Ev>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 f89f 	bl	8002720 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ffeb 	bl	80015d2 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_ZN23CAN_WData_HandleTypeDefC1Ev>:
typedef struct
{
	int txid_;
	int data_length_;
	unsigned char write_Data_Byte_[8] = {0,};
} CAN_WData_HandleTypeDef;
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3308      	adds	r3, #8
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f001 f8d6 	bl	80027e0 <_ZNSaI23CAN_RData_HandleTypeDefED1Ev>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>:
      _Vector_base() = default;
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f001 f8b9 	bl	80027c0 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>:
      vector() = default;
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ffeb 	bl	800163e <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <_ZN4BG95C1EP19__CAN_HandleTypeDef>:

#include <lift_motor/bg95.h>

// TODO Auto-generated constructor stub

BG95::BG95(CAN_HandleTypeDef *hcanx)
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	4a28      	ldr	r2, [pc, #160]	; (8001720 <_ZN4BG95C1EP19__CAN_HandleTypeDef+0xac>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	227f      	movs	r2, #127	; 0x7f
 800168e:	811a      	strh	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	729a      	strb	r2, [r3, #10]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	72da      	strb	r2, [r3, #11]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	731a      	strb	r2, [r3, #12]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	735a      	strb	r2, [r3, #13]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016c0:	61da      	str	r2, [r3, #28]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2020 	strb.w	r2, [r3, #32]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2202      	movs	r2, #2
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	651a      	str	r2, [r3, #80]	; 0x50
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3378      	adds	r3, #120	; 0x78
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff7d 	bl	80015ec <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3384      	adds	r3, #132	; 0x84
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff78 	bl	80015ec <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3390      	adds	r3, #144	; 0x90
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff80 	bl	8001606 <_ZN23CAN_WData_HandleTypeDefC1Ev>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	33a0      	adds	r3, #160	; 0xa0
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ffa4 	bl	8001658 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>
{
	this->hcanx_ = hcanx;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	605a      	str	r2, [r3, #4]
}
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	08023fa0 	.word	0x08023fa0

08001724 <_ZN4BG95D1Ev>:
	this->hcanx_ = hcanx;
	this->nodeid_ = nodeid;
}

// TODO Auto-generated destructor stub.
BG95::~BG95()
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <_ZN4BG95D1Ev+0x3c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	601a      	str	r2, [r3, #0]
{
	//if you using heap memory, delete all in this function
	HAL_CAN_DeInitialization();
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f888 	bl	8001848 <_ZN4BG9524HAL_CAN_DeInitializationEv>
BG95::~BG95()
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	33a0      	adds	r3, #160	; 0xa0
 800173c:	4618      	mov	r0, r3
 800173e:	f001 f874 	bl	800282a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3384      	adds	r3, #132	; 0x84
 8001746:	4618      	mov	r0, r3
 8001748:	f001 f81f 	bl	800278a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3378      	adds	r3, #120	; 0x78
 8001750:	4618      	mov	r0, r3
 8001752:	f001 f81a 	bl	800278a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
}
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	08023fa0 	.word	0x08023fa0

08001764 <_ZN4BG95D0Ev>:
BG95::~BG95()
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
}
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ffd9 	bl	8001724 <_ZN4BG95D1Ev>
 8001772:	21ac      	movs	r1, #172	; 0xac
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f01d fc85 	bl	801f084 <_ZdlPvj>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_ZN4BG9519IntializeParametersEv>:

//--------------------------------------------------------------------Initialization member variables
void BG95::IntializeParameters()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	//acc., dec. speed params
	this->actual_max_vel_ = 0;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	631a      	str	r2, [r3, #48]	; 0x30
	this->acc_rpm_ = 0;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	635a      	str	r2, [r3, #52]	; 0x34
	this->acc_time_ = 0;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	639a      	str	r2, [r3, #56]	; 0x38
	this->dec_rpm_ = 0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	63da      	str	r2, [r3, #60]	; 0x3c
	this->dec_time_ = 0;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
	this->qdec_rpm_ = 0;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	645a      	str	r2, [r3, #68]	; 0x44
	this->qdec_time_ = 0;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	649a      	str	r2, [r3, #72]	; 0x48

	this->max_vel_ = 3000;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80017bc:	669a      	str	r2, [r3, #104]	; 0x68
	this->drive_vel_ = 1000;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c4:	66da      	str	r2, [r3, #108]	; 0x6c
	this->motor_dir_ = 0x00;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	671a      	str	r2, [r3, #112]	; 0x70


	//device status
	this->comm_stat_reg_ = COMM_OK;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
	this->dev_stat_reg_ = 0;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	661a      	str	r2, [r3, #96]	; 0x60
	this->dev_err_data_ = 0;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	665a      	str	r2, [r3, #100]	; 0x64
	this->module_error_data_ = 0;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c

	this->is_init_ = false;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	729a      	strb	r2, [r3, #10]
	this->is_run_= false;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	72da      	strb	r2, [r3, #11]
	this->is_err_ = false;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	731a      	strb	r2, [r3, #12]
	this->is_send_ready_ = false;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	735a      	strb	r2, [r3, #13]

	AsyncRequestQueue.clear();
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3378      	adds	r3, #120	; 0x78
 8001800:	4618      	mov	r0, r3
 8001802:	f001 f82d 	bl	8002860 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5clearEv>

	RequestQueue.clear();
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3384      	adds	r3, #132	; 0x84
 800180a:	4618      	mov	r0, r3
 800180c:	f001 f828 	bl	8002860 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5clearEv>

	ReceiveQueue.clear();
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	33a0      	adds	r3, #160	; 0xa0
 8001814:	4618      	mov	r0, r3
 8001816:	f001 f831 	bl	800287c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5clearEv>

	return;
 800181a:	bf00      	nop
}
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_ZN4BG9522HAL_CAN_InitializationEv>:

bool BG95::HAL_CAN_Initialization()
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
	/* CAN Start */
	return (HAL_CAN_Start(this->hcanx_));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	f006 f88c 	bl	800794c <HAL_CAN_Start>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf14      	ite	ne
 800183a:	2301      	movne	r3, #1
 800183c:	2300      	moveq	r3, #0
 800183e:	b2db      	uxtb	r3, r3
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <_ZN4BG9524HAL_CAN_DeInitializationEv>:

bool BG95::HAL_CAN_DeInitialization()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	/* CAN Stop */
	return (HAL_CAN_Stop(this->hcanx_));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4618      	mov	r0, r3
 8001856:	f006 f8bd 	bl	80079d4 <HAL_CAN_Stop>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	bf14      	ite	ne
 8001860:	2301      	movne	r3, #1
 8001862:	2300      	moveq	r3, #0
 8001864:	b2db      	uxtb	r3, r3
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <_ZN4BG9511SendRequestEv>:



//--------------------------------------------------------------------send or read function
uint16_t BG95::SendRequest()
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b091      	sub	sp, #68	; 0x44
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = {0,};
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
	uint32_t TxMailbox;
	uint8_t state = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t send_queue_type = this->send_queue_type_;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*get the sending data*/
	CAN_WData_HandleTypeDef temp_DATA = SelectSendQueueData(send_queue_type);
 800188e:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fa17 	bl	8001ccc <_ZN4BG9519SelectSendQueueDataEi>

	/* Configure Transmission process */
	TxHeader.StdId = this->nodeid_ + temp_DATA.txid_;                 // Standard Identifier, 0 ~ 0x7FF
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	891b      	ldrh	r3, [r3, #8]
 80018a2:	461a      	mov	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4413      	add	r3, r2
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.ExtId = 0x01;                							  // Extended Identifier, 0 ~ 0x1FFFFFFF
 80018aa:	2301      	movs	r3, #1
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.RTR = CAN_RTR_DATA;          							  // frame type, DATA or REMOTE
 80018ae:	2300      	movs	r3, #0
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.IDE = CAN_ID_STD;            							  // identifier type, STD or EXT
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.DLC = temp_DATA.data_length_;                   	      // data length, 0 ~ 8 byte
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
	TxHeader.TransmitGlobalTime = DISABLE;  					      // timestamp counter capture.
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	/* Set the data to be transmitted */
	std::copy(temp_DATA.write_Data_Byte_, temp_DATA.write_Data_Byte_ + temp_DATA.data_length_, TxData);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	461a      	mov	r2, r3
 80018c4:	f107 0308 	add.w	r3, r7, #8
 80018c8:	3308      	adds	r3, #8
 80018ca:	1899      	adds	r1, r3, r2
 80018cc:	f107 021c 	add.w	r2, r7, #28
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	3308      	adds	r3, #8
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 ffde 	bl	8002898 <_ZSt4copyIPhS0_ET0_T_S2_S1_>

	/*request transmission of a message*/
	state = HAL_CANTransmit(this->hcanx_, &TxHeader, (unsigned char*)TxData,  &TxMailbox);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6858      	ldr	r0, [r3, #4]
 80018e0:	f107 0318 	add.w	r3, r7, #24
 80018e4:	f107 021c 	add.w	r2, r7, #28
 80018e8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80018ec:	f004 fde6 	bl	80064bc <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/*to save error state from send request*/
	switch(state)
 80018f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d81a      	bhi.n	8001934 <_ZN4BG9511SendRequestEv+0xc4>
 80018fe:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <_ZN4BG9511SendRequestEv+0x94>)
 8001900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001904:	08001915 	.word	0x08001915
 8001908:	0800191d 	.word	0x0800191d
 800190c:	08001925 	.word	0x08001925
 8001910:	0800192d 	.word	0x0800192d
	{
		case HAL_OK: state = COMM_OK; break;
 8001914:	2300      	movs	r3, #0
 8001916:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800191a:	e00b      	b.n	8001934 <_ZN4BG9511SendRequestEv+0xc4>

		case HAL_ERROR: state = HAL_CAN_SEND_ERROR; break;
 800191c:	2301      	movs	r3, #1
 800191e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001922:	e007      	b.n	8001934 <_ZN4BG9511SendRequestEv+0xc4>

		case HAL_BUSY: state = HAL_CAN_SEND_BUSY; break;
 8001924:	2302      	movs	r3, #2
 8001926:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800192a:	e003      	b.n	8001934 <_ZN4BG9511SendRequestEv+0xc4>

		case HAL_TIMEOUT: state = HAL_CAN_SEND_TIMEOUT; break;
 800192c:	2304      	movs	r3, #4
 800192e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001932:	bf00      	nop
	}

	/*If state is ok. Save temp data*/
	if(state == COMM_OK) this->send_data_buffer = temp_DATA;
 8001934:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001938:	2b00      	cmp	r3, #0
 800193a:	d107      	bne.n	800194c <_ZN4BG9511SendRequestEv+0xdc>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/*Store current state*/
	this->comm_stat_reg_ |= state;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	611a      	str	r2, [r3, #16]

	return state;
 800195a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800195e:	b29b      	uxth	r3, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	3744      	adds	r7, #68	; 0x44
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}

08001968 <_ZN23CAN_RData_HandleTypeDefC1Ev>:
typedef struct
{
	int rxid_;
	int data_length_;
	unsigned char read_Data_Byte_[8] = {0,};
} CAN_RData_HandleTypeDef;
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3308      	adds	r3, #8
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_ZN4BG9512RecvResponseEv>:

uint16_t BG95::RecvResponse()
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	; 0x50
 800198c:	af02      	add	r7, sp, #8
 800198e:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	CAN_RData_HandleTypeDef cal_data;
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ffe7 	bl	8001968 <_ZN23CAN_RData_HandleTypeDefC1Ev>
	uint8_t RxData[8] = {0,};
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
	uint8_t state = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Configure Receive process */
	state = HAL_CANReceive(this->hcanx_, &RxHeader, (unsigned char*)RxData);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f107 020c 	add.w	r2, r7, #12
 80019b0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80019b4:	4618      	mov	r0, r3
 80019b6:	f004 fdc7 	bl	8006548 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/*to save error state from send request*/
	switch(state)
 80019c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d81b      	bhi.n	8001a00 <_ZN4BG9512RecvResponseEv+0x78>
 80019c8:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <_ZN4BG9512RecvResponseEv+0x48>)
 80019ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ce:	bf00      	nop
 80019d0:	080019e1 	.word	0x080019e1
 80019d4:	080019e9 	.word	0x080019e9
 80019d8:	080019f1 	.word	0x080019f1
 80019dc:	080019f9 	.word	0x080019f9
	{
		case HAL_OK: state = COMM_OK; break;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80019e6:	e00b      	b.n	8001a00 <_ZN4BG9512RecvResponseEv+0x78>

		case HAL_ERROR: state = HAL_CAN_RECV_ERROR; break;
 80019e8:	2308      	movs	r3, #8
 80019ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80019ee:	e007      	b.n	8001a00 <_ZN4BG9512RecvResponseEv+0x78>

		case HAL_BUSY: state = HAL_CAN_RECV_BUSY; break;
 80019f0:	2310      	movs	r3, #16
 80019f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80019f6:	e003      	b.n	8001a00 <_ZN4BG9512RecvResponseEv+0x78>

		case HAL_TIMEOUT: state = HAL_CAN_RECV_TIMEOUT; break;
 80019f8:	2320      	movs	r3, #32
 80019fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80019fe:	bf00      	nop
	}

	/*If state is ok. Save temp data to receive queue*/
	if(state == COMM_OK)
 8001a00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d11f      	bne.n	8001a48 <_ZN4BG9512RecvResponseEv+0xc0>
	{
		cal_data.rxid_ = RxHeader.StdId;
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	617b      	str	r3, [r7, #20]

		cal_data.data_length_ = RxHeader.DLC;
 8001a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0e:	61bb      	str	r3, [r7, #24]

		for(int i =0; i<=7; i++) cal_data.read_Data_Byte_[i] = RxData[i];
 8001a10:	2300      	movs	r3, #0
 8001a12:	643b      	str	r3, [r7, #64]	; 0x40
 8001a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a16:	2b07      	cmp	r3, #7
 8001a18:	dc0e      	bgt.n	8001a38 <_ZN4BG9512RecvResponseEv+0xb0>
 8001a1a:	f107 020c 	add.w	r2, r7, #12
 8001a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a20:	4413      	add	r3, r2
 8001a22:	7819      	ldrb	r1, [r3, #0]
 8001a24:	f107 021c 	add.w	r2, r7, #28
 8001a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a2a:	4413      	add	r3, r2
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a32:	3301      	adds	r3, #1
 8001a34:	643b      	str	r3, [r7, #64]	; 0x40
 8001a36:	e7ed      	b.n	8001a14 <_ZN4BG9512RecvResponseEv+0x8c>

		QueueSaveReceive(cal_data);
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f9ef 	bl	8001e26 <_ZN4BG9516QueueSaveReceiveE23CAN_RData_HandleTypeDef>
	}

	/*Store current state*/
	this->comm_stat_reg_ |= state;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	611a      	str	r2, [r3, #16]

	return state;
 8001a56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a5a:	b29b      	uxth	r3, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3748      	adds	r7, #72	; 0x48
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_ZN4BG9516WriteDataEnqueueEiii>:

//---------------------------------------------------------------Command queue functions
//queue system functions
void BG95::WriteDataEnqueue(int index, int subindex, int data)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b090      	sub	sp, #64	; 0x40
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fdc5 	bl	8001606 <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int txid;
	int index_ = index;
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	int subindex_ = subindex;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
	int data_ = data;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	623b      	str	r3, [r7, #32]
	int data_size_  = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30

	/*to check data byte size*/
	if(data_ > 0xffff || data_< 0) { data_size_ = 4;}
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a92:	da02      	bge.n	8001a9a <_ZN4BG9516WriteDataEnqueueEiii+0x36>
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	da02      	bge.n	8001aa0 <_ZN4BG9516WriteDataEnqueueEiii+0x3c>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a9e:	e007      	b.n	8001ab0 <_ZN4BG9516WriteDataEnqueueEiii+0x4c>
	else if(data_ > 0xff) {data_size_ = 2;}
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	2bff      	cmp	r3, #255	; 0xff
 8001aa4:	dd02      	ble.n	8001aac <_ZN4BG9516WriteDataEnqueueEiii+0x48>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8001aaa:	e001      	b.n	8001ab0 <_ZN4BG9516WriteDataEnqueueEiii+0x4c>
	else { data_size_ = 1;}
 8001aac:	2301      	movs	r3, #1
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30


	/*to confirm the command byte*/
	switch(data_size_)
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d00f      	beq.n	8001ad6 <_ZN4BG9516WriteDataEnqueueEiii+0x72>
 8001ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	dc0f      	bgt.n	8001adc <_ZN4BG9516WriteDataEnqueueEiii+0x78>
 8001abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d003      	beq.n	8001aca <_ZN4BG9516WriteDataEnqueueEiii+0x66>
 8001ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d003      	beq.n	8001ad0 <_ZN4BG9516WriteDataEnqueueEiii+0x6c>
 8001ac8:	e008      	b.n	8001adc <_ZN4BG9516WriteDataEnqueueEiii+0x78>
	{
		case 1: txid = CAN_Send_1_Byte; break;
 8001aca:	232f      	movs	r3, #47	; 0x2f
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ace:	e008      	b.n	8001ae2 <_ZN4BG9516WriteDataEnqueueEiii+0x7e>

		case 2: txid = CAN_Send_2_Byte; break;
 8001ad0:	232b      	movs	r3, #43	; 0x2b
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad4:	e005      	b.n	8001ae2 <_ZN4BG9516WriteDataEnqueueEiii+0x7e>

		case 4: txid = CAN_Send_4_Byte; break;
 8001ad6:	2323      	movs	r3, #35	; 0x23
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8001ada:	e002      	b.n	8001ae2 <_ZN4BG9516WriteDataEnqueueEiii+0x7e>

		default: txid = CAN_Send_Default_Byte; break;
 8001adc:	2322      	movs	r3, #34	; 0x22
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae0:	bf00      	nop
	}

	/*input the data to buffer*/
	cal_data.txid_ = SDO_sending_id;   //SDO
 8001ae2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ae6:	613b      	str	r3, [r7, #16]
	cal_data.data_length_ = 8;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	617b      	str	r3, [r7, #20]

	cal_data.write_Data_Byte_[0] = txid;    					//command byte(4bytes fixed)
 8001aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	763b      	strb	r3, [r7, #24]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 8001af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	767b      	strb	r3, [r7, #25]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afa:	121b      	asrs	r3, r3, #8
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	76bb      	strb	r3, [r7, #26]
	cal_data.write_Data_Byte_[3] = subindex_;					//sub Index
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	76fb      	strb	r3, [r7, #27]

	/*make data a lsb char to CAN buffer*/
	for(int i = 4; i <= 7; i++) cal_data.write_Data_Byte_[i] = ((data_ >> (8 * (i - 4))) & 0xff);
 8001b06:	2304      	movs	r3, #4
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	2b07      	cmp	r3, #7
 8001b0e:	dc10      	bgt.n	8001b32 <_ZN4BG9516WriteDataEnqueueEiii+0xce>
 8001b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b12:	3b04      	subs	r3, #4
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	6a3a      	ldr	r2, [r7, #32]
 8001b18:	fa42 f303 	asr.w	r3, r2, r3
 8001b1c:	b2d9      	uxtb	r1, r3
 8001b1e:	f107 0218 	add.w	r2, r7, #24
 8001b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b24:	4413      	add	r3, r2
 8001b26:	460a      	mov	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b30:	e7eb      	b.n	8001b0a <_ZN4BG9516WriteDataEnqueueEiii+0xa6>

	/*Register data from buffer*/
	QueueSaveRequest(cal_data);
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f91a 	bl	8001d76 <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>

	return;
 8001b42:	bf00      	nop
}
 8001b44:	3738      	adds	r7, #56	; 0x38
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>:

void BG95::AsyncWriteDataEnqueue(int index, int subindex, int data)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b090      	sub	sp, #64	; 0x40
 8001b4e:	af02      	add	r7, sp, #8
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	603b      	str	r3, [r7, #0]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fd52 	bl	8001606 <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int txid;
	int index_ = index;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
	int subindex_ = subindex;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
	int data_ = data;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	623b      	str	r3, [r7, #32]
	int data_size_  = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30

	/*to check data byte size*/
	if(data_ > 0xffff || data_< 0) { data_size_ = 4;}
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b78:	da02      	bge.n	8001b80 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x36>
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	da02      	bge.n	8001b86 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x3c>
 8001b80:	2304      	movs	r3, #4
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
 8001b84:	e007      	b.n	8001b96 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x4c>
	else if(data_ > 0xff) {data_size_ = 2;}
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	2bff      	cmp	r3, #255	; 0xff
 8001b8a:	dd02      	ble.n	8001b92 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x48>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b90:	e001      	b.n	8001b96 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x4c>
	else { data_size_ = 1;}
 8001b92:	2301      	movs	r3, #1
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30

	/*to confirm the command byte*/
	switch(data_size_)
 8001b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d00f      	beq.n	8001bbc <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x72>
 8001b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	dc0f      	bgt.n	8001bc2 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x78>
 8001ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d003      	beq.n	8001bb0 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x66>
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d003      	beq.n	8001bb6 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x6c>
 8001bae:	e008      	b.n	8001bc2 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x78>
	{
		case 1: txid = CAN_Send_1_Byte; break;
 8001bb0:	232f      	movs	r3, #47	; 0x2f
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8001bb4:	e008      	b.n	8001bc8 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x7e>

		case 2: txid = CAN_Send_2_Byte; break;
 8001bb6:	232b      	movs	r3, #43	; 0x2b
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8001bba:	e005      	b.n	8001bc8 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x7e>

		case 4: txid = CAN_Send_4_Byte; break;
 8001bbc:	2323      	movs	r3, #35	; 0x23
 8001bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8001bc0:	e002      	b.n	8001bc8 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x7e>

		default: txid = CAN_Send_Default_Byte; break;
 8001bc2:	2322      	movs	r3, #34	; 0x22
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8001bc6:	bf00      	nop
	}

	/*input the data to buffer*/
	cal_data.txid_ = SDO_sending_id;
 8001bc8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bcc:	613b      	str	r3, [r7, #16]
	cal_data.data_length_ = 8;
 8001bce:	2308      	movs	r3, #8
 8001bd0:	617b      	str	r3, [r7, #20]

	cal_data.write_Data_Byte_[0] = txid;    					//command byte(4bytes fixed)
 8001bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	763b      	strb	r3, [r7, #24]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 8001bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	767b      	strb	r3, [r7, #25]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 8001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be0:	121b      	asrs	r3, r3, #8
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	76bb      	strb	r3, [r7, #26]
	cal_data.write_Data_Byte_[3] = subindex_;					//sub Index
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	76fb      	strb	r3, [r7, #27]

	/*make data a lsb char to CAN buffer*/
	for(int i = 4; i <= 7; i++) cal_data.write_Data_Byte_[i] = ((data_ >> (8 * (i - 4))) & 0xff);
 8001bec:	2304      	movs	r3, #4
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	2b07      	cmp	r3, #7
 8001bf4:	dc10      	bgt.n	8001c18 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0xce>
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	3b04      	subs	r3, #4
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	6a3a      	ldr	r2, [r7, #32]
 8001bfe:	fa42 f303 	asr.w	r3, r2, r3
 8001c02:	b2d9      	uxtb	r1, r3
 8001c04:	f107 0218 	add.w	r2, r7, #24
 8001c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0a:	4413      	add	r3, r2
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c12:	3301      	adds	r3, #1
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c16:	e7eb      	b.n	8001bf0 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0xa6>

	/*Register data from buffer*/
	AsyncQueueSaveRequest(cal_data);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 f88a 	bl	8001d3c <_ZN4BG9521AsyncQueueSaveRequestE23CAN_WData_HandleTypeDef>

	return;
 8001c28:	bf00      	nop
}
 8001c2a:	3738      	adds	r7, #56	; 0x38
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_ZN4BG9515ReadDataEnqueueEii>:

void BG95::ReadDataEnqueue(int index, int subindex)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	; 0x30
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fce0 	bl	8001606 <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int index_ = index;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24

	/*input the data to buffer*/
	cal_data.txid_ = SDO_sending_id;
 8001c4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c4e:	617b      	str	r3, [r7, #20]
	cal_data.data_length_ = 8;
 8001c50:	2308      	movs	r3, #8
 8001c52:	61bb      	str	r3, [r7, #24]

	cal_data.write_Data_Byte_[0] = CAN_Recv_Default_Byte;    					//command byte(4bytes fixed)
 8001c54:	2340      	movs	r3, #64	; 0x40
 8001c56:	773b      	strb	r3, [r7, #28]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	777b      	strb	r3, [r7, #29]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		// Object Index (msb)
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	121b      	asrs	r3, r3, #8
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	77bb      	strb	r3, [r7, #30]
	cal_data.write_Data_Byte_[3] = subindex;					//sub Index
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	77fb      	strb	r3, [r7, #31]

	/*Register data from buffer*/
	QueueSaveRequest(cal_data);
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 f87d 	bl	8001d76 <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>

	return;
 8001c7c:	bf00      	nop
}
 8001c7e:	3728      	adds	r7, #40	; 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZN4BG9519SelectSendQueueTypeEv>:


//--------------------------------------------------------------queue

int BG95::SelectSendQueueType()
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	int queue_type;

	if(!(IsAsyncRequestQueueEmpty())) {queue_type = async;}
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f938 	bl	8001f02 <_ZN4BG9524IsAsyncRequestQueueEmptyEv>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f083 0301 	eor.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <_ZN4BG9519SelectSendQueueTypeEv+0x20>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	e00a      	b.n	8001cba <_ZN4BG9519SelectSendQueueTypeEv+0x36>

	else if(!(IsRequestQueueEmpty())) {queue_type = sync;}
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f93a 	bl	8001f1e <_ZN4BG9519IsRequestQueueEmptyEv>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f083 0301 	eor.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <_ZN4BG9519SelectSendQueueTypeEv+0x36>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	60fb      	str	r3, [r7, #12]

	this->send_queue_type_ = queue_type;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	675a      	str	r2, [r3, #116]	; 0x74

	return this->send_queue_type_;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_ZN4BG9519SelectSendQueueDataEi>:

CAN_WData_HandleTypeDef BG95::SelectSendQueueData(int type)
{
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
	int type_ = type;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	617b      	str	r3, [r7, #20]
	CAN_WData_HandleTypeDef WData_HandleType = {0,};
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4a16      	ldr	r2, [pc, #88]	; (8001d38 <_ZN4BG9519SelectSendQueueDataEi+0x6c>)
 8001ce0:	461c      	mov	r4, r3
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ce6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch(type_)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d003      	beq.n	8001cf8 <_ZN4BG9519SelectSendQueueDataEi+0x2c>
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d00d      	beq.n	8001d12 <_ZN4BG9519SelectSendQueueDataEi+0x46>
		case async: WData_HandleType = AsyncRequestQueue.front(); break;

		case sync:  WData_HandleType = RequestQueue.front(); break;
	}

	return WData_HandleType;
 8001cf6:	e019      	b.n	8001d2c <_ZN4BG9519SelectSendQueueDataEi+0x60>
		case async: WData_HandleType = AsyncRequestQueue.front(); break;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	3378      	adds	r3, #120	; 0x78
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fde3 	bl	80028c8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>
 8001d02:	4602      	mov	r2, r0
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	461c      	mov	r4, r3
 8001d08:	4613      	mov	r3, r2
 8001d0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d10:	e00c      	b.n	8001d2c <_ZN4BG9519SelectSendQueueDataEi+0x60>
		case sync:  WData_HandleType = RequestQueue.front(); break;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3384      	adds	r3, #132	; 0x84
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fdd6 	bl	80028c8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	461c      	mov	r4, r3
 8001d22:	4613      	mov	r3, r2
 8001d24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d2a:	bf00      	nop
	return WData_HandleType;
 8001d2c:	bf00      	nop
}
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	371c      	adds	r7, #28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd90      	pop	{r4, r7, pc}
 8001d36:	bf00      	nop
 8001d38:	08020874 	.word	0x08020874

08001d3c <_ZN4BG9521AsyncQueueSaveRequestE23CAN_WData_HandleTypeDef>:

void BG95::AsyncQueueSaveRequest(CAN_WData_HandleTypeDef cmd)
{
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	f107 0014 	add.w	r0, r7, #20
 8001d4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(this->is_run_) this->AsyncRequestQueue.push_back(cmd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7adb      	ldrb	r3, [r3, #11]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d008      	beq.n	8001d68 <_ZN4BG9521AsyncQueueSaveRequestE23CAN_WData_HandleTypeDef+0x2c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3378      	adds	r3, #120	; 0x78
 8001d5a:	f107 0214 	add.w	r2, r7, #20
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 fdc4 	bl	80028ee <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>

	return;
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
}
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d72:	b004      	add	sp, #16
 8001d74:	4770      	bx	lr

08001d76 <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>:

void BG95::QueueSaveRequest(CAN_WData_HandleTypeDef cmd){this->RequestQueue.push_back(cmd);}
 8001d76:	b084      	sub	sp, #16
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	f107 0014 	add.w	r0, r7, #20
 8001d84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3384      	adds	r3, #132	; 0x84
 8001d8c:	f107 0214 	add.w	r2, r7, #20
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fdab 	bl	80028ee <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001da2:	b004      	add	sp, #16
 8001da4:	4770      	bx	lr

08001da6 <_ZN4BG9518QueueDeleteRequestEv>:

void BG95::QueueDeleteRequest()
{
 8001da6:	b590      	push	{r4, r7, lr}
 8001da8:	b089      	sub	sp, #36	; 0x24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
	int queue_type = this->send_queue_type_;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db2:	61fb      	str	r3, [r7, #28]

	switch(queue_type)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d003      	beq.n	8001dc2 <_ZN4BG9518QueueDeleteRequestEv+0x1c>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d017      	beq.n	8001df0 <_ZN4BG9518QueueDeleteRequestEv+0x4a>
		case async: this->AsyncRequestQueue.erase(AsyncRequestQueue.begin()); break;

		case sync: this->RequestQueue.erase(RequestQueue.begin()); break;
	}

	return ;
 8001dc0:	e02e      	b.n	8001e20 <_ZN4BG9518QueueDeleteRequestEv+0x7a>
		case async: this->AsyncRequestQueue.erase(AsyncRequestQueue.begin()); break;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3378      	adds	r3, #120	; 0x78
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fdb4 	bl	800293a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	f107 0210 	add.w	r2, r7, #16
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fdba 	bl	800295a <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 8001de6:	68f9      	ldr	r1, [r7, #12]
 8001de8:	4620      	mov	r0, r4
 8001dea:	f000 fdc7 	bl	800297c <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
 8001dee:	e016      	b.n	8001e1e <_ZN4BG9518QueueDeleteRequestEv+0x78>
		case sync: this->RequestQueue.erase(RequestQueue.begin()); break;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3384      	adds	r3, #132	; 0x84
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fd9d 	bl	800293a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8001e00:	4603      	mov	r3, r0
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	f107 0218 	add.w	r2, r7, #24
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fda3 	bl	800295a <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 8001e14:	6979      	ldr	r1, [r7, #20]
 8001e16:	4620      	mov	r0, r4
 8001e18:	f000 fdb0 	bl	800297c <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
 8001e1c:	bf00      	nop
	return ;
 8001e1e:	bf00      	nop
}
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd90      	pop	{r4, r7, pc}

08001e26 <_ZN4BG9516QueueSaveReceiveE23CAN_RData_HandleTypeDef>:

void BG95::QueueSaveReceive(CAN_RData_HandleTypeDef cmd){this->ReceiveQueue.push_back(cmd);}
 8001e26:	b084      	sub	sp, #16
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	f107 0014 	add.w	r0, r7, #20
 8001e34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	33a0      	adds	r3, #160	; 0xa0
 8001e3c:	f107 0214 	add.w	r2, r7, #20
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fdc1 	bl	80029ca <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_>
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e52:	b004      	add	sp, #16
 8001e54:	4770      	bx	lr

08001e56 <_ZN4BG9518QueueDeleteReceiveEv>:

void BG95::QueueDeleteReceive()
{
 8001e56:	b590      	push	{r4, r7, lr}
 8001e58:	b085      	sub	sp, #20
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	if(!(ReceiveQueue.empty())) {this->ReceiveQueue.erase(ReceiveQueue.begin());}
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	33a0      	adds	r3, #160	; 0xa0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fdd7 	bl	8002a16 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f083 0301 	eor.w	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d016      	beq.n	8001ea2 <_ZN4BG9518QueueDeleteReceiveEv+0x4c>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	33a0      	adds	r3, #160	; 0xa0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fde4 	bl	8002a4c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8001e84:	4603      	mov	r3, r0
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	f107 020c 	add.w	r2, r7, #12
 8001e8c:	f107 0308 	add.w	r3, r7, #8
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fdea 	bl	8002a6c <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f000 fdf7 	bl	8002a8e <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>

	return;
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
}
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}

08001eaa <_ZN4BG9518QueueChangeReceiveEv>:

void BG95::QueueChangeReceive()
{
 8001eaa:	b590      	push	{r4, r7, lr}
 8001eac:	b089      	sub	sp, #36	; 0x24
 8001eae:	af02      	add	r7, sp, #8
 8001eb0:	6078      	str	r0, [r7, #4]
	if(ReceiveQueue.size() >= 2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	33a0      	adds	r3, #160	; 0xa0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fe10 	bl	8002adc <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	bf8c      	ite	hi
 8001ec2:	2301      	movhi	r3, #1
 8001ec4:	2300      	movls	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d016      	beq.n	8001efa <_ZN4BG9518QueueChangeReceiveEv+0x50>
	{
		//1. duplicate recv queue front data
		CAN_RData_HandleTypeDef temp_Data = ReceiveQueue.front();
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	33a0      	adds	r3, #160	; 0xa0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 fe13 	bl	8002afc <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f107 0408 	add.w	r4, r7, #8
 8001edc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ede:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		//2. delete front data
		QueueDeleteReceive();
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffb7 	bl	8001e56 <_ZN4BG9518QueueDeleteReceiveEv>

		//3. push back to recv queue
		QueueSaveReceive(temp_Data);
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ff97 	bl	8001e26 <_ZN4BG9516QueueSaveReceiveE23CAN_RData_HandleTypeDef>
	}

	return;
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
}
 8001efc:	371c      	adds	r7, #28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd90      	pop	{r4, r7, pc}

08001f02 <_ZN4BG9524IsAsyncRequestQueueEmptyEv>:


bool BG95::IsAsyncRequestQueueEmpty() {return AsyncRequestQueue.empty();}
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3378      	adds	r3, #120	; 0x78
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fe07 	bl	8002b22 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZN4BG9519IsRequestQueueEmptyEv>:

bool BG95::IsRequestQueueEmpty() {return RequestQueue.empty();}
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3384      	adds	r3, #132	; 0x84
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fdf9 	bl	8002b22 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <_ZN4BG9519IsReceiveQueueEmptyEv>:

bool BG95::IsReceiveQueueEmpty() {return ReceiveQueue.empty();}
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	33a0      	adds	r3, #160	; 0xa0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fd65 	bl	8002a16 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_ZN4BG9517IsSendTickReachedEv>:


//--------------------------------------------------------------Check Timeout function
//Process Condition functions
bool BG95::IsSendTickReached()
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
	if(++(this->drive_tick_) <= 5 ) return true;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f64:	3301      	adds	r3, #1
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f883 2020 	strb.w	r2, [r3, #32]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f74:	2b05      	cmp	r3, #5
 8001f76:	bf94      	ite	ls
 8001f78:	2301      	movls	r3, #1
 8001f7a:	2300      	movhi	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <_ZN4BG9517IsSendTickReachedEv+0x30>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e004      	b.n	8001f90 <_ZN4BG9517IsSendTickReachedEv+0x3a>

	this->drive_tick_ = 0;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2020 	strb.w	r2, [r3, #32]

	return false;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <_ZN4BG9514IsRecvTimedOutEv>:


bool BG95::IsRecvTimedOut()
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - this->comm_timestamp_) <= this->comm_timeout_)
 8001fa4:	f005 fac6 	bl	8007534 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	1ad2      	subs	r2, r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	bf94      	ite	ls
 8001fb8:	2301      	movls	r3, #1
 8001fba:	2300      	movhi	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d004      	beq.n	8001fcc <_ZN4BG9514IsRecvTimedOutEv+0x30>
	{
		this->comm_num_try_ = 0;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	625a      	str	r2, [r3, #36]	; 0x24

		return true;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e017      	b.n	8001ffc <_ZN4BG9514IsRecvTimedOutEv+0x60>
	}

	if(((this->comm_num_try_)++) >= (this->comm_max_try_))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	1c59      	adds	r1, r3, #1
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6251      	str	r1, [r2, #36]	; 0x24
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	bfac      	ite	ge
 8001fde:	2301      	movge	r3, #1
 8001fe0:	2300      	movlt	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <_ZN4BG9514IsRecvTimedOutEv+0x5e>
	{
		/*timeout error*/
		this->comm_stat_reg_ |= COMM_RECV_TIMEOUT;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	611a      	str	r2, [r3, #16]

		this->comm_num_try_ = 0;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return false;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_ZN4BG9519CheckReceivedNodeIdEv>:

//--------------------------------------------------------------------Check Data Analysis Drive
void BG95::CheckReceivedNodeId()
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	/*receive */
	int id = ReceiveQueue.front().rxid_ - this->nodeid_;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	33a0      	adds	r3, #160	; 0xa0
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fd73 	bl	8002afc <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>
 8002016:	4603      	mov	r3, r0
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	8912      	ldrh	r2, [r2, #8]
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	if(id == abort_id) this->comm_stat_reg_ |= CAN_ABORT_ERROR;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b80      	cmp	r3, #128	; 0x80
 8002026:	d106      	bne.n	8002036 <_ZN4BG9519CheckReceivedNodeIdEv+0x32>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	611a      	str	r2, [r3, #16]
		//case EMG_id: break; //ignored

		default:  break;
	}
  */
	return;
 8002034:	bf00      	nop
 8002036:	bf00      	nop
}
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_ZN4BG9516CheckCommandDataEv>:
	return true;
}


bool BG95::CheckCommandData()
{
 800203e:	b590      	push	{r4, r7, lr}
 8002040:	b08d      	sub	sp, #52	; 0x34
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
	//compare the data
	CAN_WData_HandleTypeDef write_temp_data  = this->send_data_buffer;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f107 041c 	add.w	r4, r7, #28
 800204c:	3390      	adds	r3, #144	; 0x90
 800204e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CAN_RData_HandleTypeDef read_temp_data = ReceiveQueue.front();
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	33a0      	adds	r3, #160	; 0xa0
 8002058:	4618      	mov	r0, r3
 800205a:	f000 fd4f 	bl	8002afc <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>
 800205e:	4603      	mov	r3, r0
 8002060:	f107 040c 	add.w	r4, r7, #12
 8002064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for (int count = 1; count <= 2 ; count++)
 800206a:	2301      	movs	r3, #1
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002070:	2b02      	cmp	r3, #2
 8002072:	dc11      	bgt.n	8002098 <_ZN4BG9516CheckCommandDataEv+0x5a>
	{
		if(write_temp_data.write_Data_Byte_[count] != read_temp_data.read_Data_Byte_[count])
 8002074:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207a:	4413      	add	r3, r2
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	f107 0114 	add.w	r1, r7, #20
 8002082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002084:	440b      	add	r3, r1
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <_ZN4BG9516CheckCommandDataEv+0x52>
		{
			return false;
 800208c:	2300      	movs	r3, #0
 800208e:	e004      	b.n	800209a <_ZN4BG9516CheckCommandDataEv+0x5c>
	for (int count = 1; count <= 2 ; count++)
 8002090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002092:	3301      	adds	r3, #1
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002096:	e7ea      	b.n	800206e <_ZN4BG9516CheckCommandDataEv+0x30>
		}
	}

	return true;
 8002098:	2301      	movs	r3, #1
}
 800209a:	4618      	mov	r0, r3
 800209c:	3734      	adds	r7, #52	; 0x34
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd90      	pop	{r4, r7, pc}

080020a2 <_ZN4BG9518CheckExceptionCaseEv>:

bool BG95::CheckExceptionCase()
{
 80020a2:	b590      	push	{r4, r7, lr}
 80020a4:	b087      	sub	sp, #28
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
	//compare the data
	CAN_RData_HandleTypeDef read_temp_data = ReceiveQueue.front();
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	33a0      	adds	r3, #160	; 0xa0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fd24 	bl	8002afc <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f107 0408 	add.w	r4, r7, #8
 80020ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//case 1. an error occur
	if((read_temp_data.read_Data_Byte_[1] = 0x01) & (read_temp_data.read_Data_Byte_[2] = 0x30))
 80020c0:	2301      	movs	r3, #1
 80020c2:	747b      	strb	r3, [r7, #17]
 80020c4:	2330      	movs	r3, #48	; 0x30
 80020c6:	74bb      	strb	r3, [r7, #18]
 80020c8:	2300      	movs	r3, #0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <_ZN4BG9518CheckExceptionCaseEv+0x30>
	{
		return false;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <_ZN4BG9518CheckExceptionCaseEv+0x32>
	}

	return true;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	371c      	adds	r7, #28
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd90      	pop	{r4, r7, pc}

080020dc <_ZN4BG9511DataProcessEiii>:



void BG95::DataProcess(int index, int subindex, int data)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
	switch(index)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f643 2204 	movw	r2, #14852	; 0x3a04
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d07f      	beq.n	80021f4 <_ZN4BG9511DataProcessEiii+0x118>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f643 2204 	movw	r2, #14852	; 0x3a04
 80020fa:	4293      	cmp	r3, r2
 80020fc:	f300 80a9 	bgt.w	8002252 <_ZN4BG9511DataProcessEiii+0x176>
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f643 1211 	movw	r2, #14609	; 0x3911
 8002106:	4293      	cmp	r3, r2
 8002108:	d070      	beq.n	80021ec <_ZN4BG9511DataProcessEiii+0x110>
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f643 1211 	movw	r2, #14609	; 0x3911
 8002110:	4293      	cmp	r3, r2
 8002112:	f300 809e 	bgt.w	8002252 <_ZN4BG9511DataProcessEiii+0x176>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f243 7262 	movw	r2, #14178	; 0x3762
 800211c:	4293      	cmp	r3, r2
 800211e:	d061      	beq.n	80021e4 <_ZN4BG9511DataProcessEiii+0x108>
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f243 7262 	movw	r2, #14178	; 0x3762
 8002126:	4293      	cmp	r3, r2
 8002128:	f300 8093 	bgt.w	8002252 <_ZN4BG9511DataProcessEiii+0x176>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f243 7260 	movw	r2, #14176	; 0x3760
 8002132:	4293      	cmp	r3, r2
 8002134:	d052      	beq.n	80021dc <_ZN4BG9511DataProcessEiii+0x100>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f243 7260 	movw	r2, #14176	; 0x3760
 800213c:	4293      	cmp	r3, r2
 800213e:	f300 8088 	bgt.w	8002252 <_ZN4BG9511DataProcessEiii+0x176>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f243 3245 	movw	r2, #13125	; 0x3345
 8002148:	4293      	cmp	r3, r2
 800214a:	f300 8082 	bgt.w	8002252 <_ZN4BG9511DataProcessEiii+0x176>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f5b3 5f4d 	cmp.w	r3, #13120	; 0x3340
 8002154:	da26      	bge.n	80021a4 <_ZN4BG9511DataProcessEiii+0xc8>
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 800215c:	d051      	beq.n	8002202 <_ZN4BG9511DataProcessEiii+0x126>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8002164:	dc75      	bgt.n	8002252 <_ZN4BG9511DataProcessEiii+0x176>
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f243 1213 	movw	r2, #12563	; 0x3113
 800216c:	4293      	cmp	r3, r2
 800216e:	d031      	beq.n	80021d4 <_ZN4BG9511DataProcessEiii+0xf8>
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f243 1213 	movw	r2, #12563	; 0x3113
 8002176:	4293      	cmp	r3, r2
 8002178:	dc6b      	bgt.n	8002252 <_ZN4BG9511DataProcessEiii+0x176>
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f243 1211 	movw	r2, #12561	; 0x3111
 8002180:	4293      	cmp	r3, r2
 8002182:	d023      	beq.n	80021cc <_ZN4BG9511DataProcessEiii+0xf0>
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f243 1211 	movw	r2, #12561	; 0x3111
 800218a:	4293      	cmp	r3, r2
 800218c:	dc61      	bgt.n	8002252 <_ZN4BG9511DataProcessEiii+0x176>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f243 0201 	movw	r2, #12289	; 0x3001
 8002194:	4293      	cmp	r3, r2
 8002196:	d050      	beq.n	800223a <_ZN4BG9511DataProcessEiii+0x15e>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f243 0202 	movw	r2, #12290	; 0x3002
 800219e:	4293      	cmp	r3, r2
 80021a0:	d051      	beq.n	8002246 <_ZN4BG9511DataProcessEiii+0x16a>
		case 0x3345: this->qdec_time_ = data; break;

		case 0x3001: this->dev_err_data_ = (uint16_t)data ; break;
		case 0x3002: this->dev_stat_reg_ = (uint16_t)data ; break;

		default: break;
 80021a2:	e056      	b.n	8002252 <_ZN4BG9511DataProcessEiii+0x176>
	switch(index)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f5a3 534d 	sub.w	r3, r3, #13120	; 0x3340
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d851      	bhi.n	8002252 <_ZN4BG9511DataProcessEiii+0x176>
 80021ae:	a201      	add	r2, pc, #4	; (adr r2, 80021b4 <_ZN4BG9511DataProcessEiii+0xd8>)
 80021b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b4:	0800220b 	.word	0x0800220b
 80021b8:	08002213 	.word	0x08002213
 80021bc:	0800221b 	.word	0x0800221b
 80021c0:	08002223 	.word	0x08002223
 80021c4:	0800222b 	.word	0x0800222b
 80021c8:	08002233 	.word	0x08002233
		case 0x3111: this->motor_voltage_ = data ; break;
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80021d2:	e041      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
		case 0x3113: this->motor_current_ = data ; break;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	651a      	str	r2, [r3, #80]	; 0x50
 80021da:	e03d      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
		case 0x3760: this->target_pos_ = data ; break; //actual target position
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	659a      	str	r2, [r3, #88]	; 0x58
 80021e2:	e039      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
		case 0x3762: this->motor_pos_ = data ; break;  //actual position
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54
 80021ea:	e035      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
		case 0x3911: this->motor_dir_ = data ; break;//motor dir
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	671a      	str	r2, [r3, #112]	; 0x70
 80021f2:	e031      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
			if(subindex == 1) this->motor_vel_ = data ;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d12d      	bne.n	8002256 <_ZN4BG9511DataProcessEiii+0x17a>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	65da      	str	r2, [r3, #92]	; 0x5c
			break;
 8002200:	e029      	b.n	8002256 <_ZN4BG9511DataProcessEiii+0x17a>
		case 0x3300: this->actual_max_vel_ = data; break;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
 8002208:	e026      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
		case 0x3340: this->acc_rpm_ = data; break;
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	635a      	str	r2, [r3, #52]	; 0x34
 8002210:	e022      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
		case 0x3341: this->acc_time_ = data; break;
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	639a      	str	r2, [r3, #56]	; 0x38
 8002218:	e01e      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
		case 0x3342: this->dec_rpm_ = data; break;
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002220:	e01a      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
		case 0x3343: this->dec_time_ = data; break;
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
 8002228:	e016      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
		case 0x3344: this->qdec_rpm_ = data; break;
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	645a      	str	r2, [r3, #68]	; 0x44
 8002230:	e012      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
		case 0x3345: this->qdec_time_ = data; break;
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	649a      	str	r2, [r3, #72]	; 0x48
 8002238:	e00e      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
		case 0x3001: this->dev_err_data_ = (uint16_t)data ; break;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	665a      	str	r2, [r3, #100]	; 0x64
 8002244:	e008      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
		case 0x3002: this->dev_stat_reg_ = (uint16_t)data ; break;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	661a      	str	r2, [r3, #96]	; 0x60
 8002250:	e002      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
		default: break;
 8002252:	bf00      	nop
 8002254:	e000      	b.n	8002258 <_ZN4BG9511DataProcessEiii+0x17c>
			break;
 8002256:	bf00      	nop
	}
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_ZN4BG9515RecvDataProcessEv>:

void BG95::RecvDataProcess()
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b08b      	sub	sp, #44	; 0x2c
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	CAN_RData_HandleTypeDef recv_data = ReceiveQueue.front();
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	33a0      	adds	r3, #160	; 0xa0
 8002270:	4618      	mov	r0, r3
 8002272:	f000 fc43 	bl	8002afc <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>
 8002276:	4603      	mov	r3, r0
 8002278:	f107 0408 	add.w	r4, r7, #8
 800227c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800227e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int index = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
	int subindex = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
	int data = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24

	//4. revert index byte
	index |= recv_data.read_Data_Byte_[1];
 800228e:	7c7b      	ldrb	r3, [r7, #17]
 8002290:	461a      	mov	r2, r3
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4313      	orrs	r3, r2
 8002296:	61fb      	str	r3, [r7, #28]
	index |= (int)recv_data.read_Data_Byte_[2] << 8;
 8002298:	7cbb      	ldrb	r3, [r7, #18]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61fb      	str	r3, [r7, #28]

	//5.revert sub-index byte
	subindex = recv_data.read_Data_Byte_[3];
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	61bb      	str	r3, [r7, #24]

	//6.revert data byte
	for(int i = 4; i <= 7; i++) data  |=  (int)recv_data.read_Data_Byte_[i] << (8 * (i - 4));
 80022a6:	2304      	movs	r3, #4
 80022a8:	623b      	str	r3, [r7, #32]
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	2b07      	cmp	r3, #7
 80022ae:	dc11      	bgt.n	80022d4 <_ZN4BG9515RecvDataProcessEv+0x70>
 80022b0:	f107 0210 	add.w	r2, r7, #16
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	3b04      	subs	r3, #4
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c8:	4313      	orrs	r3, r2
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	3301      	adds	r3, #1
 80022d0:	623b      	str	r3, [r7, #32]
 80022d2:	e7ea      	b.n	80022aa <_ZN4BG9515RecvDataProcessEv+0x46>

	//7. Data Processing
	DataProcess(index, subindex, data);
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	69f9      	ldr	r1, [r7, #28]
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff fefe 	bl	80020dc <_ZN4BG9511DataProcessEiii>

	return;
 80022e0:	bf00      	nop
}
 80022e2:	372c      	adds	r7, #44	; 0x2c
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}

080022e8 <_ZN4BG9512DataAnalysisEv>:


/*this function is just hardcoded. not a final version*/
bool BG95::DataAnalysis()
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	//1. Check Node id
	CheckReceivedNodeId();
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff fe87 	bl	8002004 <_ZN4BG9519CheckReceivedNodeIdEv>

	//2. check Exception case
	if(!(CheckExceptionCase())) return true;
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff fed3 	bl	80020a2 <_ZN4BG9518CheckExceptionCaseEv>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f083 0301 	eor.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <_ZN4BG9512DataAnalysisEv+0x24>
 8002308:	2301      	movs	r3, #1
 800230a:	e00e      	b.n	800232a <_ZN4BG9512DataAnalysisEv+0x42>

	//3.Check read function code
	//if(!(CheckReceivedReadFunction())) return false;

	//4. check both command codes
	if(!(CheckCommandData()))
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff fe96 	bl	800203e <_ZN4BG9516CheckCommandDataEv>
 8002312:	4603      	mov	r3, r0
 8002314:	f083 0301 	eor.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <_ZN4BG9512DataAnalysisEv+0x40>
	{
		QueueChangeReceive();
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff fdc3 	bl	8001eaa <_ZN4BG9518QueueChangeReceiveEv>

		return false;
 8002324:	2300      	movs	r3, #0
 8002326:	e000      	b.n	800232a <_ZN4BG9512DataAnalysisEv+0x42>
	}

	return true;
 8002328:	2301      	movs	r3, #1
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_ZN4BG9514CommErrorCheckEv>:

//--------------------------------------------------------------------Error Checks


void BG95::CommErrorCheck()
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
	int status = this->comm_stat_reg_;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	60bb      	str	r3, [r7, #8]
	bool err_up = false;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]

	/*if Communication is ok or recv timed out (for ingnore). exit function*/
	if(status == COMM_OK || status == HAL_CAN_RECV_TIMEOUT)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <_ZN4BG9514CommErrorCheckEv+0x1e>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b20      	cmp	r3, #32
 800234e:	d103      	bne.n	8002358 <_ZN4BG9514CommErrorCheckEv+0x26>
	{
		this->comm_status_filter = 0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	615a      	str	r2, [r3, #20]

		return;
 8002356:	e020      	b.n	800239a <_ZN4BG9514CommErrorCheckEv+0x68>
	}

	/*Check status when the desired error*/
	switch(status)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800235e:	d006      	beq.n	800236e <_ZN4BG9514CommErrorCheckEv+0x3c>
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002366:	d105      	bne.n	8002374 <_ZN4BG9514CommErrorCheckEv+0x42>
	{
		case COMM_RECV_TIMEOUT: err_up = true; break;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	e008      	b.n	8002380 <_ZN4BG9514CommErrorCheckEv+0x4e>

		case CAN_ABORT_ERROR: err_up = true; break;
 800236e:	2301      	movs	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
 8002372:	e005      	b.n	8002380 <_ZN4BG9514CommErrorCheckEv+0x4e>

		default: (this->comm_status_filter)++; break;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	615a      	str	r2, [r3, #20]
 800237e:	bf00      	nop
	}

	if((this->comm_status_filter) >= 5) err_up = true;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	2b04      	cmp	r3, #4
 8002386:	dd01      	ble.n	800238c <_ZN4BG9514CommErrorCheckEv+0x5a>
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]

	/*Error flag*/
	if(err_up) this->is_err_ = true;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <_ZN4BG9514CommErrorCheckEv+0x66>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	731a      	strb	r2, [r3, #12]

	return;
 8002398:	bf00      	nop
}
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_ZN4BG9516ModuleErrorCheckEv>:

void BG95::ModuleErrorCheck()
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	int error_data = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]


	//0 . Device error check
	if(IsMotorErrUp())
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f9a2 	bl	80026fa <_ZN4BG9512IsMotorErrUpEv>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d007      	beq.n	80023cc <_ZN4BG9516ModuleErrorCheckEv+0x28>
	{
		error_data = 0x10000 + GetMotorErrData();
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f990 	bl	80026e2 <_ZN4BG9515GetMotorErrDataEv>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	e00a      	b.n	80023e2 <_ZN4BG9516ModuleErrorCheckEv+0x3e>
	}

	//1. Comm. error check
	else if(IsErrTrue())
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f97c 	bl	80026ca <_ZN4BG959IsErrTrueEv>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <_ZN4BG9516ModuleErrorCheckEv+0x3e>
	{
		error_data = 0x20000 + this->comm_stat_reg_;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80023e0:	60fb      	str	r3, [r7, #12]
	}

	this->module_error_data_ = error_data;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c

	return;
 80023e8:	bf00      	nop
}
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_ZN4BG9510DriveCheckEv>:

//--------------------------------------------------------------------Drive
bool BG95::DriveCheck()
{
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	//0. if init is false -> go return
	if(!(IsInitTrue())) return false;
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f94e 	bl	800269a <_ZN4BG9510IsInitTrueEv>
 80023fe:	4603      	mov	r3, r0
 8002400:	f083 0301 	eor.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <_ZN4BG9510DriveCheckEv+0x1e>
 800240a:	2300      	movs	r3, #0
 800240c:	e036      	b.n	800247c <_ZN4BG9510DriveCheckEv+0x8c>

	//1. if Init. is true, and run is false -> wait for empty queue
	if(!(IsRunTrue()) & !(IsRequestQueueEmpty()) & !(IsErrTrue())) this->is_run_ = true;
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f94f 	bl	80026b2 <_ZN4BG959IsRunTrueEv>
 8002414:	4603      	mov	r3, r0
 8002416:	f083 0301 	eor.w	r3, r3, #1
 800241a:	b2db      	uxtb	r3, r3
 800241c:	461c      	mov	r4, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff fd7d 	bl	8001f1e <_ZN4BG9519IsRequestQueueEmptyEv>
 8002424:	4603      	mov	r3, r0
 8002426:	f083 0301 	eor.w	r3, r3, #1
 800242a:	b2db      	uxtb	r3, r3
 800242c:	401c      	ands	r4, r3
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f94b 	bl	80026ca <_ZN4BG959IsErrTrueEv>
 8002434:	4603      	mov	r3, r0
 8002436:	f083 0301 	eor.w	r3, r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	4023      	ands	r3, r4
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <_ZN4BG9510DriveCheckEv+0x62>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	72da      	strb	r2, [r3, #11]

	//2. if err up, return false
	if(this->module_error_data_ != COMM_OK) this->is_err_ = true;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <_ZN4BG9510DriveCheckEv+0x72>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	731a      	strb	r2, [r3, #12]
 8002460:	e002      	b.n	8002468 <_ZN4BG9510DriveCheckEv+0x78>
	else this->is_err_ = false;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	731a      	strb	r2, [r3, #12]

	//3. Stop all Write Command
	if(IsErrTrue()) this->is_run_ = false;
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f92e 	bl	80026ca <_ZN4BG959IsErrTrueEv>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <_ZN4BG9510DriveCheckEv+0x8a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	72da      	strb	r2, [r3, #11]

	return true;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bd90      	pop	{r4, r7, pc}

08002484 <_ZN4BG9511InitProcessEv>:



void BG95::InitProcess()
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	//0. add read data queue and
	if(IsRequestQueueEmpty() & IsRequestQueueEmpty()) SchduleCommandEnqueue();
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff fd46 	bl	8001f1e <_ZN4BG9519IsRequestQueueEmptyEv>
 8002492:	4603      	mov	r3, r0
 8002494:	461c      	mov	r4, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fd41 	bl	8001f1e <_ZN4BG9519IsRequestQueueEmptyEv>
 800249c:	4603      	mov	r3, r0
 800249e:	4023      	ands	r3, r4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <_ZN4BG9511InitProcessEv+0x30>
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f002 faaf 	bl	8004a12 <_ZN4BG9521SchduleCommandEnqueueEv>

	//1. Initialize Communication buffer
	this->comm_stat_reg_ = COMM_OK;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]

	return;
 80024ba:	bf00      	nop
}
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd90      	pop	{r4, r7, pc}

080024c2 <_ZN4BG9511SendProcessEv>:

void BG95::SendProcess()
{
 80024c2:	b590      	push	{r4, r7, lr}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
	//0. the tick check for preventing 1-receiving by 1-drive
	if(!(IsSendTickReached())) return;
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff fd43 	bl	8001f56 <_ZN4BG9517IsSendTickReachedEv>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f083 0301 	eor.w	r3, r3, #1
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d136      	bne.n	800254a <_ZN4BG9511SendProcessEv+0x88>

	//1. Check Queue is empty
	if(IsAsyncRequestQueueEmpty() & IsRequestQueueEmpty()) return;
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff fd10 	bl	8001f02 <_ZN4BG9524IsAsyncRequestQueueEmptyEv>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461c      	mov	r4, r3
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff fd19 	bl	8001f1e <_ZN4BG9519IsRequestQueueEmptyEv>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4023      	ands	r3, r4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf14      	ite	ne
 80024f4:	2301      	movne	r3, #1
 80024f6:	2300      	moveq	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d127      	bne.n	800254e <_ZN4BG9511SendProcessEv+0x8c>

	//2. Check ready for sending
	if(!(this->is_send_ready_)) return;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7b5b      	ldrb	r3, [r3, #13]
 8002502:	f083 0301 	eor.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d122      	bne.n	8002552 <_ZN4BG9511SendProcessEv+0x90>

	//3. Get the high priority queue data. and If send data is none, return function
	if(SelectSendQueueType() == none) return;
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff fbb9 	bl	8001c84 <_ZN4BG9519SelectSendQueueTypeEv>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf0c      	ite	eq
 8002518:	2301      	moveq	r3, #1
 800251a:	2300      	movne	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d119      	bne.n	8002556 <_ZN4BG9511SendProcessEv+0x94>

	//4. Check CAN comm. sending failed, Only Accept status when HAL_OK
	if(SendRequest()!= HAL_OK) return;
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff f9a4 	bl	8001870 <_ZN4BG9511SendRequestEv>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d110      	bne.n	800255a <_ZN4BG9511SendProcessEv+0x98>

	//5. Flag Set Off
	this->is_send_ready_ = false;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	735a      	strb	r2, [r3, #13]

	//6. time-stamp recode
	this->comm_timestamp_ = HAL_GetTick();
 800253e:	f004 fff9 	bl	8007534 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]

	return;
 8002548:	e008      	b.n	800255c <_ZN4BG9511SendProcessEv+0x9a>
	if(!(IsSendTickReached())) return;
 800254a:	bf00      	nop
 800254c:	e006      	b.n	800255c <_ZN4BG9511SendProcessEv+0x9a>
	if(IsAsyncRequestQueueEmpty() & IsRequestQueueEmpty()) return;
 800254e:	bf00      	nop
 8002550:	e004      	b.n	800255c <_ZN4BG9511SendProcessEv+0x9a>
	if(!(this->is_send_ready_)) return;
 8002552:	bf00      	nop
 8002554:	e002      	b.n	800255c <_ZN4BG9511SendProcessEv+0x9a>
	if(SelectSendQueueType() == none) return;
 8002556:	bf00      	nop
 8002558:	e000      	b.n	800255c <_ZN4BG9511SendProcessEv+0x9a>
	if(SendRequest()!= HAL_OK) return;
 800255a:	bf00      	nop
}
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bd90      	pop	{r4, r7, pc}

08002562 <_ZN4BG9511RecvProcessEv>:

void BG95::RecvProcess()
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
	//when the write command send
	if((!(this->is_send_ready_)))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	7b5b      	ldrb	r3, [r3, #13]
 800256e:	f083 0301 	eor.w	r3, r3, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d024      	beq.n	80025c2 <_ZN4BG9511RecvProcessEv+0x60>
	{
		//0. if Send is failed, Exit process
		if((this->comm_stat_reg_) != COMM_OK) return;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d13b      	bne.n	80025f8 <_ZN4BG9511RecvProcessEv+0x96>

		//1. check timeed out
		if(!(IsRecvTimedOut())) return;
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff fd0b 	bl	8001f9c <_ZN4BG9514IsRecvTimedOutEv>
 8002586:	4603      	mov	r3, r0
 8002588:	f083 0301 	eor.w	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d134      	bne.n	80025fc <_ZN4BG9511RecvProcessEv+0x9a>

		//1-1. Check CAN comm. Receiving success or not
		if(RecvResponse() == HAL_ERROR) return;
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff f9f8 	bl	8001988 <_ZN4BG9512RecvResponseEv>
 8002598:	4603      	mov	r3, r0
 800259a:	2b01      	cmp	r3, #1
 800259c:	bf0c      	ite	eq
 800259e:	2301      	moveq	r3, #1
 80025a0:	2300      	movne	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d12b      	bne.n	8002600 <_ZN4BG9511RecvProcessEv+0x9e>

		//1-2. verify receiving data - exception case is included
		if(!(DataAnalysis())) return;
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff fe9d 	bl	80022e8 <_ZN4BG9512DataAnalysisEv>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f083 0301 	eor.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d124      	bne.n	8002604 <_ZN4BG9511RecvProcessEv+0xa2>

		//1-3. Set flag to true
		this->is_send_ready_ = true;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	735a      	strb	r2, [r3, #13]
 80025c0:	e00a      	b.n	80025d8 <_ZN4BG9511RecvProcessEv+0x76>
	}
	//When the receiving data from devices without sending request
	else
	{
		//1. Check CAN comm. Receiving success or not
		if(RecvResponse() == HAL_ERROR) return;
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff f9e0 	bl	8001988 <_ZN4BG9512RecvResponseEv>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d117      	bne.n	8002608 <_ZN4BG9511RecvProcessEv+0xa6>
	}

	/*send,receive data is successfully matched*/

	//2. Received data process
	if(IsReceiveQueueEmpty()) return;
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff fcae 	bl	8001f3a <_ZN4BG9519IsReceiveQueueEmptyEv>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d113      	bne.n	800260c <_ZN4BG9511RecvProcessEv+0xaa>

	RecvDataProcess();
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff fe3d 	bl	8002264 <_ZN4BG9515RecvDataProcessEv>

	//3. Delete request & receive queue
	QueueDeleteRequest();
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff fbdb 	bl	8001da6 <_ZN4BG9518QueueDeleteRequestEv>

	QueueDeleteReceive();
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff fc30 	bl	8001e56 <_ZN4BG9518QueueDeleteReceiveEv>

	return;
 80025f6:	e00a      	b.n	800260e <_ZN4BG9511RecvProcessEv+0xac>
		if((this->comm_stat_reg_) != COMM_OK) return;
 80025f8:	bf00      	nop
 80025fa:	e008      	b.n	800260e <_ZN4BG9511RecvProcessEv+0xac>
		if(!(IsRecvTimedOut())) return;
 80025fc:	bf00      	nop
 80025fe:	e006      	b.n	800260e <_ZN4BG9511RecvProcessEv+0xac>
		if(RecvResponse() == HAL_ERROR) return;
 8002600:	bf00      	nop
 8002602:	e004      	b.n	800260e <_ZN4BG9511RecvProcessEv+0xac>
		if(!(DataAnalysis())) return;
 8002604:	bf00      	nop
 8002606:	e002      	b.n	800260e <_ZN4BG9511RecvProcessEv+0xac>
		if(RecvResponse() == HAL_ERROR) return;
 8002608:	bf00      	nop
 800260a:	e000      	b.n	800260e <_ZN4BG9511RecvProcessEv+0xac>
	if(IsReceiveQueueEmpty()) return;
 800260c:	bf00      	nop
}
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <_ZN4BG9517ErrorCheckProcessEv>:

void BG95::ErrorCheckProcess()
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	CommErrorCheck();
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff fe88 	bl	8002332 <_ZN4BG9514CommErrorCheckEv>

	ModuleErrorCheck();
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff febe 	bl	80023a4 <_ZN4BG9516ModuleErrorCheckEv>

	return;
 8002628:	bf00      	nop
}
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <_ZN4BG9514InitializationEv>:

//--------------------------------------------------------------------Applications
//main functions

void BG95::Initialization()
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	IntializeParameters();
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff f8a3 	bl	8001784 <_ZN4BG9519IntializeParametersEv>

	InitializeCommand();
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f002 fa49 	bl	8004ad6 <_ZN4BG9517InitializeCommandEv>

	HAL_CAN_Initialization();
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff f8ec 	bl	8001822 <_ZN4BG9522HAL_CAN_InitializationEv>

	this->is_init_ = true;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	729a      	strb	r2, [r3, #10]

	this->is_send_ready_ = true;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	735a      	strb	r2, [r3, #13]

	return;
 8002656:	bf00      	nop
}
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <_ZN4BG955DriveEv>:

	return;
}

void BG95::Drive()
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
	if(!(DriveCheck())) return;
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff fec2 	bl	80023f0 <_ZN4BG9510DriveCheckEv>
 800266c:	4603      	mov	r3, r0
 800266e:	f083 0301 	eor.w	r3, r3, #1
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10c      	bne.n	8002692 <_ZN4BG955DriveEv+0x34>

	InitProcess();
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff03 	bl	8002484 <_ZN4BG9511InitProcessEv>

	SendProcess();
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ff1f 	bl	80024c2 <_ZN4BG9511SendProcessEv>

	RecvProcess();
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff6c 	bl	8002562 <_ZN4BG9511RecvProcessEv>

	ErrorCheckProcess();
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ffc2 	bl	8002614 <_ZN4BG9517ErrorCheckProcessEv>

	return;
 8002690:	e000      	b.n	8002694 <_ZN4BG955DriveEv+0x36>
	if(!(DriveCheck())) return;
 8002692:	bf00      	nop
}
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_ZN4BG9510IsInitTrueEv>:

//Internal Status Check
const bool BG95::IsInitTrue() {return this->is_init_;}
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	7a9b      	ldrb	r3, [r3, #10]
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <_ZN4BG959IsRunTrueEv>:
const bool BG95::IsRunTrue() {return this->is_run_;}
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7adb      	ldrb	r3, [r3, #11]
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <_ZN4BG959IsErrTrueEv>:
const bool BG95::IsErrTrue() {return this->is_err_;}
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	7b1b      	ldrb	r3, [r3, #12]
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <_ZN4BG9515GetMotorErrDataEv>:
const int32_t BG95::GetMotorVelocity() {return this->motor_vel_;}
const uint32_t BG95::GetMotorAccelation() {return this->acc_rpm_;}
const uint32_t BG95::GetMotorDeceleration() {return this->dec_rpm_;}

const uint32_t BG95::GetMotorStatus() {return this->dev_stat_reg_;}
const uint32_t BG95::GetMotorErrData() {return this->dev_err_data_;}
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <_ZN4BG9512IsMotorErrUpEv>:

//read status functions
const bool BG95::IsMotorPowerUp() {return (this->dev_stat_reg_& 0x01);}
const bool BG95::IsMotorErrUp() {return (this->dev_stat_reg_& 0x02);}
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	bf14      	ite	ne
 800270e:	2301      	movne	r3, #1
 8002710:	2300      	moveq	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 fa15 	bl	8002b58 <_ZNSaI23CAN_WData_HandleTypeDefEC1Ev>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fa1d 	bl	8002b70 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <_ZNSaI23CAN_WData_HandleTypeDefED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fa25 	bl	8002b98 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefED1Ev>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 8002770:	461a      	mov	r2, r3
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fa1b 	bl	8002bae <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      }
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe ff1d 	bl	80015ba <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800278a:	b5b0      	push	{r4, r5, r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681c      	ldr	r4, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fa19 	bl	8002bd4 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80027a2:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80027a4:	461a      	mov	r2, r3
 80027a6:	4629      	mov	r1, r5
 80027a8:	4620      	mov	r0, r4
 80027aa:	f000 fa1e 	bl	8002bea <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ffd1 	bl	8002758 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bdb0      	pop	{r4, r5, r7, pc}

080027c0 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fa1c 	bl	8002c06 <_ZNSaI23CAN_RData_HandleTypeDefEC1Ev>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fa24 	bl	8002c1e <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_ZNSaI23CAN_RData_HandleTypeDefED1Ev>:
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fa2c 	bl	8002c46 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefED1Ev>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 8002810:	461a      	mov	r2, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa22 	bl	8002c5c <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      }
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe ff03 	bl	8001626 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800282a:	b5b0      	push	{r4, r5, r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681c      	ldr	r4, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fa20 	bl	8002c82 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002842:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002844:	461a      	mov	r2, r3
 8002846:	4629      	mov	r1, r5
 8002848:	4620      	mov	r0, r4
 800284a:	f000 fa25 	bl	8002c98 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      }
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ffd1 	bl	80027f8 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bdb0      	pop	{r4, r5, r7, pc}

08002860 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4619      	mov	r1, r3
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fa20 	bl	8002cb4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_M_erase_at_endEPS0_>
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4619      	mov	r1, r3
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa33 	bl	8002cf6 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_M_erase_at_endEPS0_>
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fa47 	bl	8002d38 <_ZSt12__miter_baseIPhET_S1_>
 80028aa:	4604      	mov	r4, r0
 80028ac:	68b8      	ldr	r0, [r7, #8]
 80028ae:	f000 fa43 	bl	8002d38 <_ZSt12__miter_baseIPhET_S1_>
 80028b2:	4603      	mov	r3, r0
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4619      	mov	r1, r3
 80028b8:	4620      	mov	r0, r4
 80028ba:	f000 fa48 	bl	8002d4e <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 80028be:	4603      	mov	r3, r0
    }
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd90      	pop	{r4, r7, pc}

080028c8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	return *begin();
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f832 	bl	800293a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 80028d6:	4603      	mov	r3, r0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fa58 	bl	8002d94 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>
 80028e4:	4603      	mov	r3, r0
      }
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	429a      	cmp	r2, r3
 8002902:	d00d      	beq.n	8002920 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	4619      	mov	r1, r3
 800290e:	f000 fa4d 	bl	8002dac <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f103 0210 	add.w	r2, r3, #16
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	605a      	str	r2, [r3, #4]
      }
 800291e:	e008      	b.n	8002932 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 fa56 	bl	8002dd2 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8002926:	4603      	mov	r3, r0
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fa77 	bl	8002e20 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fb24 	bl	8002f98 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
      : _M_current(__i) { }

      // Allow iterator to const_iterator conversion
      template<typename _Iter>
        _GLIBCXX20_CONSTEXPR
        __normal_iterator(const __normal_iterator<_Iter,
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
			  typename __enable_if<
      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }
 8002964:	6838      	ldr	r0, [r7, #0]
 8002966:	f000 fb27 	bl	8002fb8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800296a:	4603      	mov	r3, r0
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>:
      erase(const_iterator __position)
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff ffd7 	bl	800293a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 800298c:	4603      	mov	r3, r0
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fb1c 	bl	8002fce <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE6cbeginEv>
 8002996:	4603      	mov	r3, r0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	f107 020c 	add.w	r2, r7, #12
 800299e:	463b      	mov	r3, r7
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fb23 	bl	8002fee <_ZN9__gnu_cxxmiIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fb31 	bl	8003018 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4619      	mov	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fb44 	bl	8003048 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d00d      	beq.n	80029fc <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	4619      	mov	r1, r3
 80029ea:	f000 fb6a 	bl	80030c2 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f103 0210 	add.w	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	605a      	str	r2, [r3, #4]
      }
 80029fa:	e008      	b.n	8002a0e <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fb73 	bl	80030e8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 8002a02:	4603      	mov	r3, r0
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	4619      	mov	r1, r3
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fb95 	bl	8003138 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fc46 	bl	80032b0 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8002a24:	4603      	mov	r3, r0
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fc51 	bl	80032d0 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	f107 020c 	add.w	r2, r7, #12
 8002a36:	f107 0308 	add.w	r3, r7, #8
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fc58 	bl	80032f2 <_ZN9__gnu_cxxeqIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	f107 030c 	add.w	r3, r7, #12
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fc60 	bl	8003322 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8002a76:	6838      	ldr	r0, [r7, #0]
 8002a78:	f000 fc63 	bl	8003342 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>:
      erase(const_iterator __position)
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ffd7 	bl	8002a4c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fc58 	bl	8003358 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE6cbeginEv>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	f107 020c 	add.w	r2, r7, #12
 8002ab0:	463b      	mov	r3, r7
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fc5f 	bl	8003378 <_ZN9__gnu_cxxmiIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002aba:	4602      	mov	r2, r0
 8002abc:	f107 0308 	add.w	r3, r7, #8
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fc6d 	bl	80033a2 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4619      	mov	r1, r3
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fc80 	bl	80033d2 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	111b      	asrs	r3, r3, #4
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
	return *begin();
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ffa1 	bl	8002a4c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fc9a 	bl	800344c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>
 8002b18:	4603      	mov	r3, r0
      }
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fc9a 	bl	8003464 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8002b30:	4603      	mov	r3, r0
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fca5 	bl	8003484 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	f107 020c 	add.w	r2, r7, #12
 8002b42:	f107 0308 	add.w	r3, r7, #8
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 fcac 	bl	80034a6 <_ZN9__gnu_cxxeqIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_ZNSaI23CAN_WData_HandleTypeDefEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fcb8 	bl	80034d6 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefEC1Ev>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
	{ }
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
	if (__p)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fc90 	bl	80034ec <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE10deallocateERS1_PS0_j>
      }
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002bf6:	68b9      	ldr	r1, [r7, #8]
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fc86 	bl	800350a <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefEvT_S2_>
    }
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <_ZNSaI23CAN_RData_HandleTypeDefEC1Ev>:
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fc88 	bl	8003524 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefEC1Ev>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
	{ }
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefED1Ev>:
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
	if (__p)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fc60 	bl	800353a <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE10deallocateERS1_PS0_j>
      }
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fc56 	bl	8003558 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefEvT_S2_>
    }
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_M_erase_at_endEPS0_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	111b      	asrs	r3, r3, #4
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00e      	beq.n	8002cee <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff7c 	bl	8002bd4 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002cdc:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	6838      	ldr	r0, [r7, #0]
 8002ce4:	f7ff ff81 	bl	8002bea <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd90      	pop	{r4, r7, pc}

08002cf6 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002cf6:	b590      	push	{r4, r7, lr}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	111b      	asrs	r3, r3, #4
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00e      	beq.n	8002d30 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ffb2 	bl	8002c82 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002d1e:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002d20:	461a      	mov	r2, r3
 8002d22:	4621      	mov	r1, r4
 8002d24:	6838      	ldr	r0, [r7, #0]
 8002d26:	f7ff ffb7 	bl	8002c98 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
      }
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd90      	pop	{r4, r7, pc}

08002d38 <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002d4e:	b5b0      	push	{r4, r5, r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fc09 	bl	8003572 <_ZSt12__niter_baseIPhET_S1_>
 8002d60:	4604      	mov	r4, r0
 8002d62:	68b8      	ldr	r0, [r7, #8]
 8002d64:	f000 fc05 	bl	8003572 <_ZSt12__niter_baseIPhET_S1_>
 8002d68:	4605      	mov	r5, r0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fc00 	bl	8003572 <_ZSt12__niter_baseIPhET_S1_>
 8002d72:	4603      	mov	r3, r0
 8002d74:	461a      	mov	r2, r3
 8002d76:	4629      	mov	r1, r5
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f000 fc05 	bl	8003588 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fc0f 	bl	80035a8 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8002d8a:	4603      	mov	r3, r0
    }
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bdb0      	pop	{r4, r5, r7, pc}

08002d94 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>:

      // Forward iterator requirements
      _GLIBCXX20_CONSTEXPR
      reference
      operator*() const _GLIBCXX_NOEXCEPT
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fc01 	bl	80035c0 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fc06 	bl	80035d6 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	1d1a      	adds	r2, r3, #4
 8002dde:	f107 030c 	add.w	r3, r7, #12
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 f8d7 	bl	8002f98 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f805 	bl	8002e0a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8002e00:	4603      	mov	r3, r0
      }
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8002e12:	2301      	movs	r3, #1
      }
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8002e20:	b5b0      	push	{r4, r5, r7, lr}
 8002e22:	b08c      	sub	sp, #48	; 0x30
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8002e2c:	4a59      	ldr	r2, [pc, #356]	; (8002f94 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 8002e2e:	2101      	movs	r1, #1
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 fbe9 	bl	8003608 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>
 8002e36:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff fd78 	bl	800293a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	f107 0214 	add.w	r2, r7, #20
 8002e52:	f107 0308 	add.w	r3, r7, #8
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fc1c 	bl	8003696 <_ZN9__gnu_cxxmiIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fc2a 	bl	80036c0 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj>
 8002e6c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8002e72:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	011b      	lsls	r3, r3, #4
	  _Alloc_traits::construct(this->_M_impl,
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	18d5      	adds	r5, r2, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fb9f 	bl	80035c0 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	4629      	mov	r1, r5
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f7ff ff8f 	bl	8002dac <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8002e92:	f7ff ffaf 	bl	8002df4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d027      	beq.n	8002eec <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002e9c:	f107 0308 	add.w	r3, r7, #8
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f889 	bl	8002fb8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fe91 	bl	8002bd4 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002eb2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eba:	f000 fc15 	bl	80036e8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8002ebe:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	3310      	adds	r3, #16
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002ec6:	f107 0308 	add.w	r3, r7, #8
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f874 	bl	8002fb8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fe7c 	bl	8002bd4 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002edc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee0:	6a39      	ldr	r1, [r7, #32]
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f000 fc00 	bl	80036e8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8002ee8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002eea:	e026      	b.n	8002f3a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8002eec:	f107 0308 	add.w	r3, r7, #8
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f861 	bl	8002fb8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fe69 	bl	8002bd4 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002f02:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4621      	mov	r1, r4
 8002f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f0a:	f000 fc01 	bl	8003710 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002f0e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	3310      	adds	r3, #16
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8002f16:	f107 0308 	add.w	r3, r7, #8
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f84c 	bl	8002fb8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002f20:	4603      	mov	r3, r0
 8002f22:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fe54 	bl	8002bd4 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002f2c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8002f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f30:	6a39      	ldr	r1, [r7, #32]
 8002f32:	4620      	mov	r0, r4
 8002f34:	f000 fbec 	bl	8003710 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002f38:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8002f3a:	f7ff ff5b 	bl	8002df4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f083 0301 	eor.w	r3, r3, #1
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fe41 	bl	8002bd4 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	6a39      	ldr	r1, [r7, #32]
 8002f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f5a:	f7ff fe46 	bl	8002bea <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8002f5e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	111b      	asrs	r3, r3, #4
      _M_deallocate(__old_start,
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f6e:	f7ff fe1e 	bl	8002bae <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f7c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	441a      	add	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	609a      	str	r2, [r3, #8]
    }
 8002f8a:	bf00      	nop
 8002f8c:	3730      	adds	r7, #48	; 0x30
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bdb0      	pop	{r4, r5, r7, pc}
 8002f92:	bf00      	nop
 8002f94:	08020884 	.word	0x08020884

08002f98 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	f107 030c 	add.w	r3, r7, #12
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fbbc 	bl	800375c <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <_ZN9__gnu_cxxmiIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002fee:	b590      	push	{r4, r7, lr}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fbbf 	bl	800377c <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002ffe:	4603      	mov	r3, r0
 8003000:	681c      	ldr	r4, [r3, #0]
 8003002:	6838      	ldr	r0, [r7, #0]
 8003004:	f000 fbba 	bl	800377c <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003008:	4603      	mov	r3, r0
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	1ae3      	subs	r3, r4, r3
 800300e:	111b      	asrs	r3, r3, #4
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bd90      	pop	{r4, r7, pc}

08003018 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	4413      	add	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	f107 020c 	add.w	r2, r7, #12
 8003032:	f107 0308 	add.w	r3, r7, #8
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ffad 	bl	8002f98 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 8003052:	463b      	mov	r3, r7
 8003054:	2101      	movs	r1, #1
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ffde 	bl	8003018 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 800305c:	4603      	mov	r3, r0
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff feb6 	bl	8002dd2 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8003066:	4603      	mov	r3, r0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	f107 020c 	add.w	r2, r7, #12
 800306e:	f107 0308 	add.w	r3, r7, #8
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fb8c 	bl	8003792 <_ZN9__gnu_cxxneIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00e      	beq.n	800309e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8003080:	463b      	mov	r3, r7
 8003082:	2101      	movs	r1, #1
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ffc7 	bl	8003018 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 800308a:	4604      	mov	r4, r0
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff fea0 	bl	8002dd2 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8003092:	4603      	mov	r3, r0
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	4619      	mov	r1, r3
 8003098:	4620      	mov	r0, r4
 800309a:	f000 fb92 	bl	80037c2 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      --this->_M_impl._M_finish;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f1a3 0210 	sub.w	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4619      	mov	r1, r3
 80030b2:	4610      	mov	r0, r2
 80030b4:	f000 fb45 	bl	8003742 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
      return __position;
 80030b8:	683b      	ldr	r3, [r7, #0]
    }
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}

080030c2 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fb8f 	bl	80037f2 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fb94 	bl	8003808 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	1d1a      	adds	r2, r3, #4
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f911 	bl	8003322 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8003110:	4618      	mov	r0, r3
 8003112:	f000 f805 	bl	8003120 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8003116:	4603      	mov	r3, r0
      }
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8003128:	2301      	movs	r3, #1
      }
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8003138:	b5b0      	push	{r4, r5, r7, lr}
 800313a:	b08c      	sub	sp, #48	; 0x30
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8003144:	4a59      	ldr	r2, [pc, #356]	; (80032ac <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 8003146:	2101      	movs	r1, #1
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fb76 	bl	800383a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>
 800314e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff fc75 	bl	8002a4c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8003162:	4603      	mov	r3, r0
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	f107 0214 	add.w	r2, r7, #20
 800316a:	f107 0308 	add.w	r3, r7, #8
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fba9 	bl	80038c8 <_ZN9__gnu_cxxmiIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8003176:	4603      	mov	r3, r0
 8003178:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fbb7 	bl	80038f2 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj>
 8003184:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800318a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	011b      	lsls	r3, r3, #4
	  _Alloc_traits::construct(this->_M_impl,
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	18d5      	adds	r5, r2, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fb2c 	bl	80037f2 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	4629      	mov	r1, r5
 80031a0:	4620      	mov	r0, r4
 80031a2:	f7ff ff8e 	bl	80030c2 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 80031a6:	2300      	movs	r3, #0
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80031aa:	f7ff ffae 	bl	800310a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d027      	beq.n	8003204 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80031b4:	f107 0308 	add.w	r3, r7, #8
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f8c2 	bl	8003342 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80031be:	4603      	mov	r3, r0
 80031c0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fd5c 	bl	8002c82 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80031ca:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4621      	mov	r1, r4
 80031d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031d2:	f000 fba2 	bl	800391a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80031d6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	3310      	adds	r3, #16
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80031de:	f107 0308 	add.w	r3, r7, #8
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f8ad 	bl	8003342 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80031e8:	4603      	mov	r3, r0
 80031ea:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fd47 	bl	8002c82 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80031f4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80031f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f8:	6a39      	ldr	r1, [r7, #32]
 80031fa:	4620      	mov	r0, r4
 80031fc:	f000 fb8d 	bl	800391a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8003200:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003202:	e026      	b.n	8003252 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8003204:	f107 0308 	add.w	r3, r7, #8
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f89a 	bl	8003342 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800320e:	4603      	mov	r3, r0
 8003210:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fd34 	bl	8002c82 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800321a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4621      	mov	r1, r4
 8003220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003222:	f000 fb8e 	bl	8003942 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003226:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	3310      	adds	r3, #16
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800322e:	f107 0308 	add.w	r3, r7, #8
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f885 	bl	8003342 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003238:	4603      	mov	r3, r0
 800323a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fd1f 	bl	8002c82 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003244:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8003246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003248:	6a39      	ldr	r1, [r7, #32]
 800324a:	4620      	mov	r0, r4
 800324c:	f000 fb79 	bl	8003942 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003250:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8003252:	f7ff ff5a 	bl	800310a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 8003256:	4603      	mov	r3, r0
 8003258:	f083 0301 	eor.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fd0c 	bl	8002c82 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800326a:	4603      	mov	r3, r0
 800326c:	461a      	mov	r2, r3
 800326e:	6a39      	ldr	r1, [r7, #32]
 8003270:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003272:	f7ff fd11 	bl	8002c98 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      _M_deallocate(__old_start,
 8003276:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	111b      	asrs	r3, r3, #4
      _M_deallocate(__old_start,
 8003282:	461a      	mov	r2, r3
 8003284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003286:	f7ff fce9 	bl	8002c5c <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003294:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	441a      	add	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	609a      	str	r2, [r3, #8]
    }
 80032a2:	bf00      	nop
 80032a4:	3730      	adds	r7, #48	; 0x30
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bdb0      	pop	{r4, r5, r7, pc}
 80032aa:	bf00      	nop
 80032ac:	08020884 	.word	0x08020884

080032b0 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	f107 030c 	add.w	r3, r7, #12
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fb64 	bl	800398e <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	1d1a      	adds	r2, r3, #4
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	4611      	mov	r1, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fb53 	bl	800398e <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <_ZN9__gnu_cxxeqIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80032f2:	b590      	push	{r4, r7, lr}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fb56 	bl	80039ae <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003302:	4603      	mov	r3, r0
 8003304:	681c      	ldr	r4, [r3, #0]
 8003306:	6838      	ldr	r0, [r7, #0]
 8003308:	f000 fb51 	bl	80039ae <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800330c:	4603      	mov	r3, r0
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	429c      	cmp	r4, r3
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	bd90      	pop	{r4, r7, pc}

08003322 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	f107 030c 	add.w	r3, r7, #12
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fb10 	bl	800398e <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_ZN9__gnu_cxxmiIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fb13 	bl	80039ae <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003388:	4603      	mov	r3, r0
 800338a:	681c      	ldr	r4, [r3, #0]
 800338c:	6838      	ldr	r0, [r7, #0]
 800338e:	f000 fb0e 	bl	80039ae <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003392:	4603      	mov	r3, r0
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	1ae3      	subs	r3, r4, r3
 8003398:	111b      	asrs	r3, r3, #4
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd90      	pop	{r4, r7, pc}

080033a2 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	4413      	add	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	f107 020c 	add.w	r2, r7, #12
 80033bc:	f107 0308 	add.w	r3, r7, #8
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff ffad 	bl	8003322 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 80033d2:	b590      	push	{r4, r7, lr}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 80033dc:	463b      	mov	r3, r7
 80033de:	2101      	movs	r1, #1
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ffde 	bl	80033a2 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 80033e6:	4603      	mov	r3, r0
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff fe7c 	bl	80030e8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 80033f0:	4603      	mov	r3, r0
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	f107 020c 	add.w	r2, r7, #12
 80033f8:	f107 0308 	add.w	r3, r7, #8
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fae0 	bl	80039c4 <_ZN9__gnu_cxxneIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00e      	beq.n	8003428 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 800340a:	463b      	mov	r3, r7
 800340c:	2101      	movs	r1, #1
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff ffc7 	bl	80033a2 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8003414:	4604      	mov	r4, r0
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff fe66 	bl	80030e8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 800341c:	4603      	mov	r3, r0
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	4619      	mov	r1, r3
 8003422:	4620      	mov	r0, r4
 8003424:	f000 fae6 	bl	80039f4 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      --this->_M_impl._M_finish;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f1a3 0210 	sub.w	r2, r3, #16
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4619      	mov	r1, r3
 800343c:	4610      	mov	r0, r2
 800343e:	f000 fa99 	bl	8003974 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
      return __position;
 8003442:	683b      	ldr	r3, [r7, #0]
    }
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bd90      	pop	{r4, r7, pc}

0800344c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	f107 030c 	add.w	r3, r7, #12
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f000 f971 	bl	800375c <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	1d1a      	adds	r2, r3, #4
 8003490:	f107 030c 	add.w	r3, r7, #12
 8003494:	4611      	mov	r1, r2
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f960 	bl	800375c <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <_ZN9__gnu_cxxeqIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80034a6:	b590      	push	{r4, r7, lr}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f963 	bl	800377c <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80034b6:	4603      	mov	r3, r0
 80034b8:	681c      	ldr	r4, [r3, #0]
 80034ba:	6838      	ldr	r0, [r7, #0]
 80034bc:	f000 f95e 	bl	800377c <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80034c0:	4603      	mov	r3, r0
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	429c      	cmp	r4, r3
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd90      	pop	{r4, r7, pc}

080034d6 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fa91 	bl	8003a24 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE10deallocateEPS1_j>
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8003514:	6839      	ldr	r1, [r7, #0]
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fa94 	bl	8003a44 <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_WData_HandleTypeDefEEvT_S4_>
    }
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefEC1Ev>:
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fa85 	bl	8003a5a <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE10deallocateEPS1_j>
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003562:	6839      	ldr	r1, [r7, #0]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fa88 	bl	8003a7a <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_RData_HandleTypeDefEEvT_S4_>
    }
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
    { return __it; }
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fa79 	bl	8003a90 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 800359e:	4603      	mov	r3, r0
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
    { return __res; }
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80035d6:	b5b0      	push	{r4, r5, r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff ffec 	bl	80035c0 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 80035e8:	4605      	mov	r5, r0
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4619      	mov	r1, r3
 80035ee:	2010      	movs	r0, #16
 80035f0:	f7fd ffd7 	bl	80015a2 <_ZnwjPv>
 80035f4:	4603      	mov	r3, r0
 80035f6:	461c      	mov	r4, r3
 80035f8:	462b      	mov	r3, r5
 80035fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bdb0      	pop	{r4, r5, r7, pc}

08003608 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fa4b 	bl	8003ab0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 800361a:	4604      	mov	r4, r0
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fa58 	bl	8003ad2 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 8003622:	4603      	mov	r3, r0
 8003624:	1ae2      	subs	r2, r4, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	429a      	cmp	r2, r3
 800362a:	bf34      	ite	cc
 800362c:	2301      	movcc	r3, #1
 800362e:	2300      	movcs	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f01b fd49 	bl	801f0ce <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 fa48 	bl	8003ad2 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 8003642:	4604      	mov	r4, r0
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fa44 	bl	8003ad2 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 800364a:	4603      	mov	r3, r0
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	f107 0208 	add.w	r2, r7, #8
 8003652:	f107 0310 	add.w	r3, r7, #16
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fa4a 	bl	8003af2 <_ZSt3maxIjERKT_S2_S2_>
 800365e:	4603      	mov	r3, r0
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4423      	add	r3, r4
 8003664:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 fa33 	bl	8003ad2 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 800366c:	4602      	mov	r2, r0
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	4293      	cmp	r3, r2
 8003672:	d306      	bcc.n	8003682 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fa1b 	bl	8003ab0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 800367a:	4602      	mov	r2, r0
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	4293      	cmp	r3, r2
 8003680:	d904      	bls.n	800368c <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x84>
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 fa14 	bl	8003ab0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 8003688:	4603      	mov	r3, r0
 800368a:	e000      	b.n	800368e <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x86>
 800368c:	697b      	ldr	r3, [r7, #20]
      }
 800368e:	4618      	mov	r0, r3
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd90      	pop	{r4, r7, pc}

08003696 <_ZN9__gnu_cxxmiIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003696:	b590      	push	{r4, r7, lr}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff fc89 	bl	8002fb8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80036a6:	4603      	mov	r3, r0
 80036a8:	681c      	ldr	r4, [r3, #0]
 80036aa:	6838      	ldr	r0, [r7, #0]
 80036ac:	f7ff fc84 	bl	8002fb8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80036b0:	4603      	mov	r3, r0
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1ae3      	subs	r3, r4, r3
 80036b6:	111b      	asrs	r3, r3, #4
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd90      	pop	{r4, r7, pc}

080036c0 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d006      	beq.n	80036de <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x1e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6839      	ldr	r1, [r7, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fa20 	bl	8003b1a <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8allocateERS1_j>
 80036da:	4603      	mov	r3, r0
 80036dc:	e000      	b.n	80036e0 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x20>
 80036de:	2300      	movs	r3, #0
      }
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80036f6:	f88d 4000 	strb.w	r4, [sp]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 fa19 	bl	8003b38 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8003706:	4603      	mov	r3, r0
      }
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	bd90      	pop	{r4, r7, pc}

08003710 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fa1c 	bl	8003b5c <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 8003724:	4604      	mov	r4, r0
 8003726:	68b8      	ldr	r0, [r7, #8]
 8003728:	f000 fa18 	bl	8003b5c <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 800372c:	4601      	mov	r1, r0
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	4620      	mov	r0, r4
 8003734:	f000 fa21 	bl	8003b7a <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8003738:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	bd90      	pop	{r4, r7, pc}

08003742 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800374c:	6839      	ldr	r1, [r7, #0]
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa24 	bl	8003b9c <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE7destroyIS1_EEvPT_>
	}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <_ZN9__gnu_cxxneIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003792:	b590      	push	{r4, r7, lr}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff fc0b 	bl	8002fb8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80037a2:	4603      	mov	r3, r0
 80037a4:	681c      	ldr	r4, [r3, #0]
 80037a6:	6838      	ldr	r0, [r7, #0]
 80037a8:	f7ff fc06 	bl	8002fb8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80037ac:	4603      	mov	r3, r0
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	429c      	cmp	r4, r3
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd90      	pop	{r4, r7, pc}

080037c2 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 80037c2:	b590      	push	{r4, r7, lr}
 80037c4:	b085      	sub	sp, #20
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f9ef 	bl	8003bb2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 80037d4:	4604      	mov	r4, r0
 80037d6:	68b8      	ldr	r0, [r7, #8]
 80037d8:	f000 f9eb 	bl	8003bb2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 80037dc:	4603      	mov	r3, r0
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4619      	mov	r1, r3
 80037e2:	4620      	mov	r0, r4
 80037e4:	f000 f9f0 	bl	8003bc8 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 80037e8:	4603      	mov	r3, r0
				      std::__miter_base(__last), __result);
    }
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd90      	pop	{r4, r7, pc}

080037f2 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003808:	b5b0      	push	{r4, r5, r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ffec 	bl	80037f2 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 800381a:	4605      	mov	r5, r0
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4619      	mov	r1, r3
 8003820:	2010      	movs	r0, #16
 8003822:	f7fd febe 	bl	80015a2 <_ZnwjPv>
 8003826:	4603      	mov	r3, r0
 8003828:	461c      	mov	r4, r3
 800382a:	462b      	mov	r3, r5
 800382c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800382e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bdb0      	pop	{r4, r5, r7, pc}

0800383a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800383a:	b590      	push	{r4, r7, lr}
 800383c:	b087      	sub	sp, #28
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f9df 	bl	8003c0a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 800384c:	4604      	mov	r4, r0
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff f944 	bl	8002adc <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 8003854:	4603      	mov	r3, r0
 8003856:	1ae2      	subs	r2, r4, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	bf34      	ite	cc
 800385e:	2301      	movcc	r3, #1
 8003860:	2300      	movcs	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f01b fc30 	bl	801f0ce <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f7ff f934 	bl	8002adc <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 8003874:	4604      	mov	r4, r0
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f7ff f930 	bl	8002adc <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 800387c:	4603      	mov	r3, r0
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	f107 0208 	add.w	r2, r7, #8
 8003884:	f107 0310 	add.w	r3, r7, #16
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f931 	bl	8003af2 <_ZSt3maxIjERKT_S2_S2_>
 8003890:	4603      	mov	r3, r0
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4423      	add	r3, r4
 8003896:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f7ff f91f 	bl	8002adc <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 800389e:	4602      	mov	r2, r0
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d306      	bcc.n	80038b4 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x7a>
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f9af 	bl	8003c0a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 80038ac:	4602      	mov	r2, r0
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d904      	bls.n	80038be <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x84>
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f9a8 	bl	8003c0a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 80038ba:	4603      	mov	r3, r0
 80038bc:	e000      	b.n	80038c0 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x86>
 80038be:	697b      	ldr	r3, [r7, #20]
      }
 80038c0:	4618      	mov	r0, r3
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd90      	pop	{r4, r7, pc}

080038c8 <_ZN9__gnu_cxxmiIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff fd35 	bl	8003342 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80038d8:	4603      	mov	r3, r0
 80038da:	681c      	ldr	r4, [r3, #0]
 80038dc:	6838      	ldr	r0, [r7, #0]
 80038de:	f7ff fd30 	bl	8003342 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80038e2:	4603      	mov	r3, r0
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	1ae3      	subs	r3, r4, r3
 80038e8:	111b      	asrs	r3, r3, #4
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd90      	pop	{r4, r7, pc}

080038f2 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d006      	beq.n	8003910 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x1e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6839      	ldr	r1, [r7, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f990 	bl	8003c2c <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8allocateERS1_j>
 800390c:	4603      	mov	r3, r0
 800390e:	e000      	b.n	8003912 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x20>
 8003910:	2300      	movs	r3, #0
      }
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800391a:	b590      	push	{r4, r7, lr}
 800391c:	b087      	sub	sp, #28
 800391e:	af02      	add	r7, sp, #8
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003928:	f88d 4000 	strb.w	r4, [sp]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f989 	bl	8003c4a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8003938:	4603      	mov	r3, r0
      }
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	bd90      	pop	{r4, r7, pc}

08003942 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003942:	b590      	push	{r4, r7, lr}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f98c 	bl	8003c6e <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 8003956:	4604      	mov	r4, r0
 8003958:	68b8      	ldr	r0, [r7, #8]
 800395a:	f000 f988 	bl	8003c6e <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 800395e:	4601      	mov	r1, r0
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4620      	mov	r0, r4
 8003966:	f000 f991 	bl	8003c8c <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>
 800396a:	4603      	mov	r3, r0
    }
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	bd90      	pop	{r4, r7, pc}

08003974 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800397e:	6839      	ldr	r1, [r7, #0]
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f994 	bl	8003cae <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE7destroyIS1_EEvPT_>
	}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <_ZN9__gnu_cxxneIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff fcb7 	bl	8003342 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80039d4:	4603      	mov	r3, r0
 80039d6:	681c      	ldr	r4, [r3, #0]
 80039d8:	6838      	ldr	r0, [r7, #0]
 80039da:	f7ff fcb2 	bl	8003342 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80039de:	4603      	mov	r3, r0
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	429c      	cmp	r4, r3
 80039e4:	bf14      	ite	ne
 80039e6:	2301      	movne	r3, #1
 80039e8:	2300      	moveq	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd90      	pop	{r4, r7, pc}

080039f4 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
    move(_II __first, _II __last, _OI __result)
 80039f4:	b590      	push	{r4, r7, lr}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f95f 	bl	8003cc4 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003a06:	4604      	mov	r4, r0
 8003a08:	68b8      	ldr	r0, [r7, #8]
 8003a0a:	f000 f95b 	bl	8003cc4 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4619      	mov	r1, r3
 8003a14:	4620      	mov	r0, r4
 8003a16:	f000 f960 	bl	8003cda <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 8003a1a:	4603      	mov	r3, r0
    }
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd90      	pop	{r4, r7, pc}

08003a24 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	68b8      	ldr	r0, [r7, #8]
 8003a38:	f01b fb24 	bl	801f084 <_ZdlPvj>
      }
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_WData_HandleTypeDefEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	68b8      	ldr	r0, [r7, #8]
 8003a6e:	f01b fb09 	bl	801f084 <_ZdlPvj>
      }
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_RData_HandleTypeDefEEvT_S4_>:
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f93b 	bl	8003d1c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8003aa6:	4603      	mov	r3, r0
    }
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f962 	bl	8003d84 <_ZNKSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f944 	bl	8003d50 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	111b      	asrs	r3, r3, #4
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d201      	bcs.n	8003b0c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	e000      	b.n	8003b0e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003b0c:	687b      	ldr	r3, [r7, #4]
    }
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003b24:	2200      	movs	r2, #0
 8003b26:	6839      	ldr	r1, [r7, #0]
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f936 	bl	8003d9a <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f942 	bl	8003dd6 <_ZSt12__relocate_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003b52:	4603      	mov	r3, r0
      }
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003b64:	f107 030c 	add.w	r3, r7, #12
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f950 	bl	8003e10 <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEC1ES1_>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f951 	bl	8003e34 <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_ET0_T_S5_S4_>
 8003b92:	4603      	mov	r3, r0
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>:
    __miter_base(_Iterator __it)
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003bc8:	b5b0      	push	{r4, r5, r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f93f 	bl	8003e58 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003bda:	4604      	mov	r4, r0
 8003bdc:	68b8      	ldr	r0, [r7, #8]
 8003bde:	f000 f93b 	bl	8003e58 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003be2:	4605      	mov	r5, r0
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f937 	bl	8003e58 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003bea:	4603      	mov	r3, r0
 8003bec:	461a      	mov	r2, r3
 8003bee:	4629      	mov	r1, r5
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f000 f93f 	bl	8003e74 <_ZSt14__copy_move_a1ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f94a 	bl	8003e94 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 8003c00:	4603      	mov	r3, r0
    }
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bdb0      	pop	{r4, r5, r7, pc}

08003c0a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 f96e 	bl	8003ef6 <_ZNKSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 f950 	bl	8003ec2 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>
 8003c22:	4603      	mov	r3, r0
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003c36:	2200      	movs	r2, #0
 8003c38:	6839      	ldr	r1, [r7, #0]
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f966 	bl	8003f0c <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv>
 8003c40:	4603      	mov	r3, r0
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
 8003c56:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f972 	bl	8003f48 <_ZSt12__relocate_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003c64:	4603      	mov	r3, r0
      }
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003c76:	f107 030c 	add.w	r3, r7, #12
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 f980 	bl	8003f82 <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEC1ES1_>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f981 	bl	8003fa6 <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_ET0_T_S5_S4_>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>:
    __miter_base(_Iterator __it)
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003cda:	b5b0      	push	{r4, r5, r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f96f 	bl	8003fca <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003cec:	4604      	mov	r4, r0
 8003cee:	68b8      	ldr	r0, [r7, #8]
 8003cf0:	f000 f96b 	bl	8003fca <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f967 	bl	8003fca <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4629      	mov	r1, r5
 8003d02:	4620      	mov	r0, r4
 8003d04:	f000 f96f 	bl	8003fe6 <_ZSt14__copy_move_a1ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f97a 	bl	8004006 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 8003d12:	4603      	mov	r3, r0
    }
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bdb0      	pop	{r4, r5, r7, pc}

08003d1c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f01b fb2d 	bl	801f39c <memmove>
	  return __result + _Num;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	4413      	add	r3, r2
	}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8003d58:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8003d5c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f968 	bl	8004034 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8max_sizeERKS1_>
 8003d64:	4603      	mov	r3, r0
 8003d66:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003d68:	f107 0208 	add.w	r2, r7, #8
 8003d6c:	f107 030c 	add.w	r3, r7, #12
 8003d70:	4611      	mov	r1, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f96a 	bl	800404c <_ZSt3minIjERKT_S2_S2_>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	681b      	ldr	r3, [r3, #0]
      }
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <_ZNKSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f964 	bl	8004074 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4293      	cmp	r3, r2
 8003db2:	bf8c      	ite	hi
 8003db4:	2301      	movhi	r3, #1
 8003db6:	2300      	movls	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003dbe:	f01b f983 	bl	801f0c8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f01b f96d 	bl	801f0a6 <_Znwj>
 8003dcc:	4603      	mov	r3, r0
      }
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <_ZSt12__relocate_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8003dd6:	b5b0      	push	{r4, r5, r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
 8003de2:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f951 	bl	800408c <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8003dea:	4604      	mov	r4, r0
 8003dec:	68b8      	ldr	r0, [r7, #8]
 8003dee:	f000 f94d 	bl	800408c <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8003df2:	4605      	mov	r5, r0
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f949 	bl	800408c <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4629      	mov	r1, r5
 8003e00:	4620      	mov	r0, r4
 8003e02:	f000 f94e 	bl	80040a2 <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003e06:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bdb0      	pop	{r4, r5, r7, pc}

08003e10 <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEC1ES1_>:
      move_iterator(iterator_type __i)
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f966 	bl	80040ee <_ZSt4moveIRP23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 8003e22:	4603      	mov	r3, r0
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003e40:	2301      	movs	r3, #1
 8003e42:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f95b 	bl	8004104 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_>
 8003e4e:	4603      	mov	r3, r0
    }
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8003e60:	1d3b      	adds	r3, r7, #4
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff f8a8 	bl	8002fb8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <_ZSt14__copy_move_a1ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f96c 	bl	8004162 <_ZSt14__copy_move_a2ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>:
    __niter_wrap(_From __from, _To __res)
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ffda 	bl	8003e58 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	111b      	asrs	r3, r3, #4
 8003eac:	461a      	mov	r2, r3
 8003eae:	1d3b      	adds	r3, r7, #4
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff f8b0 	bl	8003018 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8003eca:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8003ece:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f956 	bl	8004182 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8max_sizeERKS1_>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003eda:	f107 0208 	add.w	r2, r7, #8
 8003ede:	f107 030c 	add.w	r3, r7, #12
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 f8b1 	bl	800404c <_ZSt3minIjERKT_S2_S2_>
 8003eea:	4603      	mov	r3, r0
 8003eec:	681b      	ldr	r3, [r3, #0]
      }
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <_ZNKSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f93e 	bl	800419a <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4293      	cmp	r3, r2
 8003f24:	bf8c      	ite	hi
 8003f26:	2301      	movhi	r3, #1
 8003f28:	2300      	movls	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003f30:	f01b f8ca 	bl	801f0c8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f01b f8b4 	bl	801f0a6 <_Znwj>
 8003f3e:	4603      	mov	r3, r0
      }
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <_ZSt12__relocate_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8003f48:	b5b0      	push	{r4, r5, r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f92b 	bl	80041b2 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	68b8      	ldr	r0, [r7, #8]
 8003f60:	f000 f927 	bl	80041b2 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 8003f64:	4605      	mov	r5, r0
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f923 	bl	80041b2 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	4629      	mov	r1, r5
 8003f72:	4620      	mov	r0, r4
 8003f74:	f000 f928 	bl	80041c8 <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003f78:	4603      	mov	r3, r0
    }
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bdb0      	pop	{r4, r5, r7, pc}

08003f82 <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEC1ES1_>:
      move_iterator(iterator_type __i)
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8003f8c:	463b      	mov	r3, r7
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 f940 	bl	8004214 <_ZSt4moveIRP23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 8003f94:	4603      	mov	r3, r0
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b086      	sub	sp, #24
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f935 	bl	800422a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_>
 8003fc0:	4603      	mov	r3, r0
    }
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8003fd2:	1d3b      	adds	r3, r7, #4
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff f9b4 	bl	8003342 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <_ZSt14__copy_move_a1ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f946 	bl	8004288 <_ZSt14__copy_move_a2ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>:
    __niter_wrap(_From __from, _To __res)
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ffda 	bl	8003fca <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004016:	4602      	mov	r2, r0
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	111b      	asrs	r3, r3, #4
 800401e:	461a      	mov	r2, r3
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	4611      	mov	r1, r2
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff f9bc 	bl	80033a2 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 800402a:	4603      	mov	r3, r0
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f933 	bl	80042a8 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8max_sizeEv>
 8004042:	4603      	mov	r3, r0
      }
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d201      	bcs.n	8004066 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	e000      	b.n	8004068 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8004066:	687b      	ldr	r3, [r7, #4]
    }
 8004068:	4618      	mov	r0, r3
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800407c:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>:
    __niter_base(_Iterator __it)
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80040a2:	b590      	push	{r4, r7, lr}
 80040a4:	b087      	sub	sp, #28
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
 80040ae:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d013      	beq.n	80040e4 <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 80040bc:	6978      	ldr	r0, [r7, #20]
 80040be:	f000 f8ff 	bl	80042c0 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 80040c2:	4604      	mov	r4, r0
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f8fb 	bl	80042c0 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 80040ca:	4603      	mov	r3, r0
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	4619      	mov	r1, r3
 80040d0:	4620      	mov	r0, r4
 80040d2:	f000 f900 	bl	80042d6 <_ZSt19__relocate_object_aI23CAN_WData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3310      	adds	r3, #16
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3310      	adds	r3, #16
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	e7e7      	b.n	80040b4 <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 80040e4:	697b      	ldr	r3, [r7, #20]
    }
 80040e6:	4618      	mov	r0, r3
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd90      	pop	{r4, r7, pc}

080040ee <_ZSt4moveIRP23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004104:	b590      	push	{r4, r7, lr}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8004114:	f107 0208 	add.w	r2, r7, #8
 8004118:	f107 030c 	add.w	r3, r7, #12
 800411c:	4611      	mov	r1, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f8f4 	bl	800430c <_ZStneIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d016      	beq.n	8004158 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800412a:	6978      	ldr	r0, [r7, #20]
 800412c:	f000 f8c8 	bl	80042c0 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 8004130:	4604      	mov	r4, r0
 8004132:	f107 030c 	add.w	r3, r7, #12
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f90a 	bl	8004350 <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefEdeEv>
 800413c:	4603      	mov	r3, r0
 800413e:	4619      	mov	r1, r3
 8004140:	4620      	mov	r0, r4
 8004142:	f000 f911 	bl	8004368 <_ZSt10_ConstructI23CAN_WData_HandleTypeDefJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8004146:	f107 030c 	add.w	r3, r7, #12
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f8ef 	bl	800432e <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEppEv>
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	3310      	adds	r3, #16
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	e7dd      	b.n	8004114 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 8004158:	697b      	ldr	r3, [r7, #20]
	}
 800415a:	4618      	mov	r0, r3
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	bd90      	pop	{r4, r7, pc}

08004162 <_ZSt14__copy_move_a2ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f910 	bl	8004398 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_>
 8004178:	4603      	mov	r3, r0
    }
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f921 	bl	80043d2 <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8max_sizeEv>
 8004190:	4603      	mov	r3, r0
      }
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80041a2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>:
    __niter_base(_Iterator __it)
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d013      	beq.n	800420a <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 80041e2:	6978      	ldr	r0, [r7, #20]
 80041e4:	f000 f901 	bl	80043ea <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 80041e8:	4604      	mov	r4, r0
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f8fd 	bl	80043ea <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 80041f0:	4603      	mov	r3, r0
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	4619      	mov	r1, r3
 80041f6:	4620      	mov	r0, r4
 80041f8:	f000 f902 	bl	8004400 <_ZSt19__relocate_object_aI23CAN_RData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3310      	adds	r3, #16
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	3310      	adds	r3, #16
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	e7e7      	b.n	80041da <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 800420a:	697b      	ldr	r3, [r7, #20]
    }
 800420c:	4618      	mov	r0, r3
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	bd90      	pop	{r4, r7, pc}

08004214 <_ZSt4moveIRP23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800422a:	b590      	push	{r4, r7, lr}
 800422c:	b087      	sub	sp, #28
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800423a:	f107 0208 	add.w	r2, r7, #8
 800423e:	f107 030c 	add.w	r3, r7, #12
 8004242:	4611      	mov	r1, r2
 8004244:	4618      	mov	r0, r3
 8004246:	f000 f8f6 	bl	8004436 <_ZStneIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d016      	beq.n	800427e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8004250:	6978      	ldr	r0, [r7, #20]
 8004252:	f000 f8ca 	bl	80043ea <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 8004256:	4604      	mov	r4, r0
 8004258:	f107 030c 	add.w	r3, r7, #12
 800425c:	4618      	mov	r0, r3
 800425e:	f000 f90c 	bl	800447a <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefEdeEv>
 8004262:	4603      	mov	r3, r0
 8004264:	4619      	mov	r1, r3
 8004266:	4620      	mov	r0, r4
 8004268:	f000 f913 	bl	8004492 <_ZSt10_ConstructI23CAN_RData_HandleTypeDefJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800426c:	f107 030c 	add.w	r3, r7, #12
 8004270:	4618      	mov	r0, r3
 8004272:	f000 f8f1 	bl	8004458 <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEppEv>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	3310      	adds	r3, #16
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	e7dd      	b.n	800423a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 800427e:	697b      	ldr	r3, [r7, #20]
	}
 8004280:	4618      	mov	r0, r3
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	bd90      	pop	{r4, r7, pc}

08004288 <_ZSt14__copy_move_a2ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f912 	bl	80044c2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_>
 800429e:	4603      	mov	r3, r0
    }
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff fedf 	bl	8004074 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>
 80042b6:	4603      	mov	r3, r0
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4618      	mov	r0, r3
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <_ZSt19__relocate_object_aI23CAN_WData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80042e2:	68b8      	ldr	r0, [r7, #8]
 80042e4:	f000 f90a 	bl	80044fc <_ZSt4moveIR23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>
 80042e8:	4603      	mov	r3, r0
 80042ea:	461a      	mov	r2, r3
 80042ec:	68f9      	ldr	r1, [r7, #12]
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f90f 	bl	8004512 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80042f4:	68b8      	ldr	r0, [r7, #8]
 80042f6:	f7ff ffe3 	bl	80042c0 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 80042fa:	4603      	mov	r3, r0
 80042fc:	4619      	mov	r1, r3
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff fa1f 	bl	8003742 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
    }
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <_ZStneIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8004316:	6839      	ldr	r1, [r7, #0]
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f90d 	bl	8004538 <_ZSteqIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 800431e:	4603      	mov	r3, r0
 8004320:	f083 0301 	eor.w	r3, r3, #1
 8004324:	b2db      	uxtb	r3, r3
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEppEv>:
      operator++()
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f103 0210 	add.w	r2, r3, #16
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	601a      	str	r2, [r3, #0]
	return *this;
 8004342:	687b      	ldr	r3, [r7, #4]
      }
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefEdeEv>:
      operator*() const
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <_ZSt10_ConstructI23CAN_WData_HandleTypeDefJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8004368:	b5b0      	push	{r4, r5, r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8004372:	6838      	ldr	r0, [r7, #0]
 8004374:	f000 f8f6 	bl	8004564 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 8004378:	4605      	mov	r5, r0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4619      	mov	r1, r3
 800437e:	2010      	movs	r0, #16
 8004380:	f7fd f90f 	bl	80015a2 <_ZnwjPv>
 8004384:	4603      	mov	r3, r0
 8004386:	461c      	mov	r4, r3
 8004388:	462b      	mov	r3, r5
 800438a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800438c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bdb0      	pop	{r4, r5, r7, pc}

08004398 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	111b      	asrs	r3, r3, #4
 80043ac:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d006      	beq.n	80043c2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	461a      	mov	r2, r3
 80043ba:	68f9      	ldr	r1, [r7, #12]
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f01a ffed 	bl	801f39c <memmove>
	  return __result + _Num;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	4413      	add	r3, r2
	}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff fedd 	bl	800419a <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>
 80043e0:	4603      	mov	r3, r0
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <_ZSt19__relocate_object_aI23CAN_RData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800440c:	68b8      	ldr	r0, [r7, #8]
 800440e:	f000 f8b4 	bl	800457a <_ZSt4moveIR23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>
 8004412:	4603      	mov	r3, r0
 8004414:	461a      	mov	r2, r3
 8004416:	68f9      	ldr	r1, [r7, #12]
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f8b9 	bl	8004590 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800441e:	68b8      	ldr	r0, [r7, #8]
 8004420:	f7ff ffe3 	bl	80043ea <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 8004424:	4603      	mov	r3, r0
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff faa3 	bl	8003974 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
    }
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <_ZStneIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f8b7 	bl	80045b6 <_ZSteqIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 8004448:	4603      	mov	r3, r0
 800444a:	f083 0301 	eor.w	r3, r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEppEv>:
      operator++()
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f103 0210 	add.w	r2, r3, #16
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	601a      	str	r2, [r3, #0]
	return *this;
 800446c:	687b      	ldr	r3, [r7, #4]
      }
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefEdeEv>:
      operator*() const
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <_ZSt10_ConstructI23CAN_RData_HandleTypeDefJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8004492:	b5b0      	push	{r4, r5, r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800449c:	6838      	ldr	r0, [r7, #0]
 800449e:	f000 f8a0 	bl	80045e2 <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 80044a2:	4605      	mov	r5, r0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4619      	mov	r1, r3
 80044a8:	2010      	movs	r0, #16
 80044aa:	f7fd f87a 	bl	80015a2 <_ZnwjPv>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461c      	mov	r4, r3
 80044b2:	462b      	mov	r3, r5
 80044b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bdb0      	pop	{r4, r5, r7, pc}

080044c2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b086      	sub	sp, #24
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	111b      	asrs	r3, r3, #4
 80044d6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d006      	beq.n	80044ec <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	461a      	mov	r2, r3
 80044e4:	68f9      	ldr	r1, [r7, #12]
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f01a ff58 	bl	801f39c <memmove>
	  return __result + _Num;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	4413      	add	r3, r2
	}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <_ZSt4moveIR23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4618      	mov	r0, r3
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f820 	bl	8004564 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 8004524:	4603      	mov	r3, r0
 8004526:	461a      	mov	r2, r3
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f864 	bl	80045f8 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8004530:	bf00      	nop
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <_ZSteqIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8004538:	b590      	push	{r4, r7, lr}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f871 	bl	800462a <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>
 8004548:	4604      	mov	r4, r0
 800454a:	6838      	ldr	r0, [r7, #0]
 800454c:	f000 f86d 	bl	800462a <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>
 8004550:	4603      	mov	r3, r0
 8004552:	429c      	cmp	r4, r3
 8004554:	bf0c      	ite	eq
 8004556:	2301      	moveq	r3, #1
 8004558:	2300      	movne	r3, #0
 800455a:	b2db      	uxtb	r3, r3
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	bd90      	pop	{r4, r7, pc}

08004564 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <_ZSt4moveIR23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f820 	bl	80045e2 <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 80045a2:	4603      	mov	r3, r0
 80045a4:	461a      	mov	r2, r3
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f84a 	bl	8004642 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <_ZSteqIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 80045b6:	b590      	push	{r4, r7, lr}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f857 	bl	8004674 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>
 80045c6:	4604      	mov	r4, r0
 80045c8:	6838      	ldr	r0, [r7, #0]
 80045ca:	f000 f853 	bl	8004674 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>
 80045ce:	4603      	mov	r3, r0
 80045d0:	429c      	cmp	r4, r3
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd90      	pop	{r4, r7, pc}

080045e2 <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80045f8:	b5b0      	push	{r4, r5, r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ffad 	bl	8004564 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 800460a:	4605      	mov	r5, r0
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4619      	mov	r1, r3
 8004610:	2010      	movs	r0, #16
 8004612:	f7fc ffc6 	bl	80015a2 <_ZnwjPv>
 8004616:	4603      	mov	r3, r0
 8004618:	461c      	mov	r4, r3
 800461a:	462b      	mov	r3, r5
 800461c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800461e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bdb0      	pop	{r4, r5, r7, pc}

0800462a <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>:
      base() const
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004642:	b5b0      	push	{r4, r5, r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff ffc7 	bl	80045e2 <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 8004654:	4605      	mov	r5, r0
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4619      	mov	r1, r3
 800465a:	2010      	movs	r0, #16
 800465c:	f7fc ffa1 	bl	80015a2 <_ZnwjPv>
 8004660:	4603      	mov	r3, r0
 8004662:	461c      	mov	r4, r3
 8004664:	462b      	mov	r3, r5
 8004666:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004668:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bdb0      	pop	{r4, r5, r7, pc}

08004674 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>:
      base() const
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <_ZN4BG9521MandatoryParamEnqueueEv>:

//---------------------------------------------------------------------------------------------------Enqueue
//--------------------------------------------------------------------this parameters are followed from communication manual

void BG95::MandatoryParamEnqueue()
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	//----------------------------1.) Mandatory parameters:
	// a.) Device parameters:

	//Motor Type
	WriteDataEnqueue(MOTOR_Type, 0, BLDC);      // Motor - Type: 1 = brushless Motor (BLDC)
 8004694:	2301      	movs	r3, #1
 8004696:	2200      	movs	r2, #0
 8004698:	f44f 5164 	mov.w	r1, #14592	; 0x3900
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fd f9e1 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(MOTOR_PolN, 0, 8);      // Motor - Number of Poles (8 - bg95)
 80046a2:	2308      	movs	r3, #8
 80046a4:	2200      	movs	r2, #0
 80046a6:	f643 1110 	movw	r1, #14608	; 0x3910
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fd f9da 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	//Encoder feedback enable
	WriteDataEnqueue(VEL_Feedback, 0, 2410);      //  Encoder feedback for the velocity controller
 80046b0:	f640 136a 	movw	r3, #2410	; 0x96a
 80046b4:	2200      	movs	r2, #0
 80046b6:	f243 3150 	movw	r1, #13136	; 0x3350
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fd f9d2 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(SVEL_Feedback, 0, 2410);      //  Encoder feedback for the secondary velocity controller
 80046c0:	f640 136a 	movw	r3, #2410	; 0x96a
 80046c4:	2200      	movs	r2, #0
 80046c6:	f243 5150 	movw	r1, #13648	; 0x3550
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fd f9ca 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(MOTOR_ENC_Resolution, 0, 4096);      // Encoder resolution in counts: sin/cos = 4096, 1000h
 80046d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046d4:	2200      	movs	r2, #0
 80046d6:	f643 1162 	movw	r1, #14690	; 0x3962
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fd f9c2 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	// b.) Current limits (Attention: Note the motor data sheet!):
	WriteDataEnqueue(CURR_LimitMaxPos, 0, 50000);      // Curr ent limit - max. positive [mA]
 80046e0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80046e4:	2200      	movs	r2, #0
 80046e6:	f243 2121 	movw	r1, #12833	; 0x3221
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fd f9ba 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(CURR_LimitMaxNeg, 0, 50000);      // Current limit - max. negative [mA]
 80046f0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80046f4:	2200      	movs	r2, #0
 80046f6:	f243 2123 	movw	r1, #12835	; 0x3223
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fd f9b2 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(CURR_DynLimit, CURR_DynLimitMode, Disable);      // Dynamic Current Limit I*t - Mode: 1 = active
 8004700:	2300      	movs	r3, #0
 8004702:	2200      	movs	r2, #0
 8004704:	f243 2124 	movw	r1, #12836	; 0x3224
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7fd f9ab 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(CURR_DynLimit, CURR_DynLimitPeak, 12000);      // Dynamic Current Limit I*t - Peak Current [mA]
 800470e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8004712:	2201      	movs	r2, #1
 8004714:	f243 2124 	movw	r1, #12836	; 0x3224
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7fd f9a3 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(CURR_DynLimit, CURR_DynLimitCont, 2640);      // Dynamic Current Limit I*t - Continuous Current [mA]
 800471e:	f44f 6325 	mov.w	r3, #2640	; 0xa50
 8004722:	2202      	movs	r2, #2
 8004724:	f243 2124 	movw	r1, #12836	; 0x3224
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7fd f99b 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(CURR_DynLimit, CURR_DynLimitTime, 1000);      // Dynamic Current Limit I*t - Time [ms]
 800472e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004732:	2203      	movs	r2, #3
 8004734:	f243 2124 	movw	r1, #12836	; 0x3224
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7fd f993 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	// c.) Controller parameters
	// Primary Velocity controller
	WriteDataEnqueue(VEL_Kp, 0, 500);      // PID-Position Controller - Proportional gain
 800473e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004742:	2200      	movs	r2, #0
 8004744:	f243 3110 	movw	r1, #13072	; 0x3310
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7fd f98b 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(VEL_Ki, 0, 50);      // PID-Position Controller - Integral Factor
 800474e:	2332      	movs	r3, #50	; 0x32
 8004750:	2200      	movs	r2, #0
 8004752:	f243 3111 	movw	r1, #13073	; 0x3311
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fd f984 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(VEL_Kd, 0, 1);      // PID-Position Controller - Differential gain
 800475c:	2301      	movs	r3, #1
 800475e:	2200      	movs	r2, #0
 8004760:	f243 3112 	movw	r1, #13074	; 0x3312
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7fd f97d 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(VEL_ILimit, 0, 10000);      // integration limit of the position controller
 800476a:	f242 7310 	movw	r3, #10000	; 0x2710
 800476e:	2200      	movs	r2, #0
 8004770:	f243 3113 	movw	r1, #13075	; 0x3313
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7fd f975 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(VEL_Kvff, 0, 1000);      // velocity feed foward factor
 800477a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800477e:	2200      	movs	r2, #0
 8004780:	f243 3114 	movw	r1, #13076	; 0x3314
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fd f96d 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(VEL_Kaff, 0, 1);      // Accelation feed foward factor
 800478a:	2301      	movs	r3, #1
 800478c:	2200      	movs	r2, #0
 800478e:	f243 3115 	movw	r1, #13077	; 0x3315
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fd f966 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	// Secondary Velocity controller
	WriteDataEnqueue(SVEL_Kp, 0, 500);      // PI-Velocity Controller - Proportional gain
 8004798:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800479c:	2200      	movs	r2, #0
 800479e:	f243 5110 	movw	r1, #13584	; 0x3510
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fd f95e 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(SVEL_Ki, 0, 50);      // PI-Velocity Controller - Integration constant
 80047a8:	2332      	movs	r3, #50	; 0x32
 80047aa:	2200      	movs	r2, #0
 80047ac:	f243 5111 	movw	r1, #13585	; 0x3511
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7fd f957 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(SVEL_KIxR, 0, 1);      // compensation factor
 80047b6:	2301      	movs	r3, #1
 80047b8:	2200      	movs	r2, #0
 80047ba:	f243 5117 	movw	r1, #13591	; 0x3517
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fd f950 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	// Current controller
	WriteDataEnqueue(CURR_Kp, 0, 35);      // PI-Current Controller - Proportional gain
 80047c4:	2323      	movs	r3, #35	; 0x23
 80047c6:	2200      	movs	r2, #0
 80047c8:	f243 2110 	movw	r1, #12816	; 0x3210
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7fd f949 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(CURR_Ki, 0, 2);      // PI-Current Controller - Integration constant
 80047d2:	2302      	movs	r3, #2
 80047d4:	2200      	movs	r2, #0
 80047d6:	f243 2111 	movw	r1, #12817	; 0x3211
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fd f942 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <_ZN4BG9526RecommendationParamEnqueueEv>:

void BG95::RecommendationParamEnqueue()
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
	//----------------------------2.) Recommendation parameters:
	const int32_t drive_vel = this->drive_vel_;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
	const int32_t max_vel = this->max_vel_;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047fa:	623b      	str	r3, [r7, #32]
	const uint32_t acc_rpm = this->acc_rpm_;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004800:	61fb      	str	r3, [r7, #28]
	const uint32_t acc_time = this->acc_time_;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	61bb      	str	r3, [r7, #24]
	const uint32_t dec_rpm = this->dec_rpm_;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480c:	617b      	str	r3, [r7, #20]
	const uint32_t dec_time = this->dec_time_;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	613b      	str	r3, [r7, #16]
	const uint32_t qdec_rpm = this->qdec_rpm_;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004818:	60fb      	str	r3, [r7, #12]
	const uint32_t qdec_time = this->qdec_time_;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481e:	60bb      	str	r3, [r7, #8]

	WriteDataEnqueue(VEL_DesiredValue, 0, drive_vel);      // Velocity - rpm
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	2200      	movs	r2, #0
 8004824:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7fd f91b 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(VEL_LimitMaxPos, 0, max_vel);      // Velocity Max. Limit - Positive Direction - rpm
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	2200      	movs	r2, #0
 8004832:	f243 3121 	movw	r1, #13089	; 0x3321
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fd f914 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(VEL_LimitMaxNeg, 0, max_vel);      // Velocity Max. Limit - Negative Direction - rpm
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	2200      	movs	r2, #0
 8004840:	f243 3123 	movw	r1, #13091	; 0x3323
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7fd f90d 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(VEL_Acc_dV, 0, acc_rpm);      // Velocity Acceleration - Delta v
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	2200      	movs	r2, #0
 800484e:	f44f 514d 	mov.w	r1, #13120	; 0x3340
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fd f906 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(VEL_Acc_dT, 0, acc_time);      // Velocity Acceleration - Delta t
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2200      	movs	r2, #0
 800485c:	f243 3141 	movw	r1, #13121	; 0x3341
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7fd f8ff 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(VEL_Dec_dV, 0, dec_rpm);      // Velocity Deceleration - Delta v
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2200      	movs	r2, #0
 800486a:	f243 3142 	movw	r1, #13122	; 0x3342
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fd f8f8 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(VEL_Dec_dT, 0, dec_time);      // Velocity Deceleration - Delta t
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2200      	movs	r2, #0
 8004878:	f243 3143 	movw	r1, #13123	; 0x3343
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7fd f8f1 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(VEL_Dec_QuickStop_dV, 0, qdec_rpm);      // Velocity Deceleration - Quick-Stop - Delta v
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f243 3144 	movw	r1, #13124	; 0x3344
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fd f8ea 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(VEL_Dec_QuickStop_dT, 0, qdec_time);      // Velocity Deceleration - Quick-Stop - Delta t
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2200      	movs	r2, #0
 8004894:	f243 3145 	movw	r1, #13125	; 0x3345
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7fd f956 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	WriteDataEnqueue(DEV_Cmd, 0, CMD_Update);      // update velocity parameters
 800489e:	2305      	movs	r3, #5
 80048a0:	2200      	movs	r2, #0
 80048a2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fd f8dc 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
}
 80048ac:	bf00      	nop
 80048ae:	3728      	adds	r7, #40	; 0x28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <_ZN4BG9522BreakManagementEnqueueEv>:

void BG95::BreakManagementEnqueue()
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	/*Manual oepn break*/
	//AsyncWriteDataEnqueue(0x3150, 0, 2);      // Open Break

	/*Break management configuration.*/
	WriteDataEnqueue(Brake_Management, BM_Config, 3);      // Brake Management - Configuration - auto disable when the movoment ends
 80048bc:	2303      	movs	r3, #3
 80048be:	2200      	movs	r2, #0
 80048c0:	f643 11a0 	movw	r1, #14752	; 0x39a0
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fd f8cd 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(Brake_Management, BM_OffOrConditionFlags, 5);      // Brake Management - Activating Condition
 80048ca:	2305      	movs	r3, #5
 80048cc:	2218      	movs	r2, #24
 80048ce:	f643 11a0 	movw	r1, #14752	; 0x39a0
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fd f8c6 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(Brake_Management, BM_OnOrConditionFlags, 5);      // Brake Management - Deactivating Condition
 80048d8:	2305      	movs	r3, #5
 80048da:	221a      	movs	r2, #26
 80048dc:	f643 11a0 	movw	r1, #14752	; 0x39a0
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7fd f8bf 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(Brake_Management, BM_Dout, DOut_1_LAtive);      // Brake Management - Brake Output(Digital output 1 High-active)
 80048e6:	f64f 639f 	movw	r3, #65183	; 0xfe9f
 80048ea:	2208      	movs	r2, #8
 80048ec:	f643 11a0 	movw	r1, #14752	; 0x39a0
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7fd f8b7 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(Brake_Management, BM_OffDelay1, 200);      // Brake Management - Brake Output
 80048f6:	23c8      	movs	r3, #200	; 0xc8
 80048f8:	2210      	movs	r2, #16
 80048fa:	f643 11a0 	movw	r1, #14752	; 0x39a0
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fd f8b0 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(Brake_Management, BM_OffDelay2, 200);      // Brake Management - Brake Output
 8004904:	23c8      	movs	r3, #200	; 0xc8
 8004906:	2211      	movs	r2, #17
 8004908:	f643 11a0 	movw	r1, #14752	; 0x39a0
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fd f8a9 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(Brake_Management, BM_OnDelay1, 200);      // Brake Management - Brake Output
 8004912:	23c8      	movs	r3, #200	; 0xc8
 8004914:	2212      	movs	r2, #18
 8004916:	f643 11a0 	movw	r1, #14752	; 0x39a0
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fd f8a2 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(Brake_Management, BM_OnDelay2, 200);      // Brake Management - Brake Output
 8004920:	23c8      	movs	r3, #200	; 0xc8
 8004922:	2213      	movs	r2, #19
 8004924:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7fd f89b 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <_ZN4BG9520HardwareParamEnqueueEv>:

void BG95::HardwareParamEnqueue()
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
	//Etc. - error following
	WriteDataEnqueue(POS_FollowingErrorWindow, 0, 1000);   // position following error - window
 800493e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004942:	2200      	movs	r2, #0
 8004944:	f243 7132 	movw	r1, #14130	; 0x3732
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7fd f88b 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	//save all config.
	WriteDataEnqueue(DEV_Cmd, 0, CMD_StoreParam);      //DeviceCommand -  Stores actual parameters
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	2200      	movs	r2, #0
 8004952:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fd f884 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(DEV_Cmd, 0, CMD_Continue);      //DeviceCommand -  Stores actual parameters
 800495c:	2304      	movs	r3, #4
 800495e:	2200      	movs	r2, #0
 8004960:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7fd f87d 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <_ZN4BG9529SetPositionControlModeEnqueueEv>:

	AsyncWriteDataEnqueue(MOTOR_Polarity, 0, motor_dir_);      // Motor - Polarity(direction)
}

void BG95::SetPositionControlModeEnqueue()
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
	AsyncWriteDataEnqueue(DEV_Mode, 0, MODE_Pos);      // device mode "position mode"
 800497a:	2307      	movs	r3, #7
 800497c:	2200      	movs	r2, #0
 800497e:	f243 0103 	movw	r1, #12291	; 0x3003
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fd f8e1 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Continue);      // continue
 8004988:	2304      	movs	r3, #4
 800498a:	2200      	movs	r2, #0
 800498c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7fd f8da 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <_ZN4BG9520AbsPosCommandEnqueueEi>:

void BG95::AbsPosCommandEnqueue(int tPos)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
	int tPos_ = tPos;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(POS_Mova, 0, tPos_);   // target position
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f243 7190 	movw	r1, #14224	; 0x3790
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7fd f8c8 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <_ZN4BG9520RelPosCommandEnqueueEi>:

void BG95::RelPosCommandEnqueue(int tPos)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
	int tPos_ = tPos;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(POS_Movr, 0, tPos_);   // target position
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f243 7191 	movw	r1, #14225	; 0x3791
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fd f8b6 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <_ZN4BG9529SetVelocityControlModeEnqueueEv>:


/*for jog mode*/
void BG95::SetVelocityControlModeEnqueue()
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
	AsyncWriteDataEnqueue(DEV_Mode, 0, MODE_Vel);      // device mode "sub -velocity mode"
 80049ee:	2303      	movs	r3, #3
 80049f0:	2200      	movs	r2, #0
 80049f2:	f243 0103 	movw	r1, #12291	; 0x3003
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fd f8a7 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Continue);      // continue
 80049fc:	2304      	movs	r3, #4
 80049fe:	2200      	movs	r2, #0
 8004a00:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7fd f8a0 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <_ZN4BG9521SchduleCommandEnqueueEv>:

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Continue);      // continue
}

void BG95::SchduleCommandEnqueue()
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
	//ReadDataEnqueue(0x3110, 0, 0);      // actual power voltage

	ReadDataEnqueue(IO_AIN_Voltage_Up, 0);      // actual motor voltage
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f243 1111 	movw	r1, #12561	; 0x3111
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7fd f905 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(IO_AIN_Current_Im, 0);      // actual motor current
 8004a26:	2200      	movs	r2, #0
 8004a28:	f243 1113 	movw	r1, #12563	; 0x3113
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7fd f8ff 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(POS_ActualTargetPosition, 0);      // Actual Target Position
 8004a32:	2200      	movs	r2, #0
 8004a34:	f243 7160 	movw	r1, #14176	; 0x3760
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7fd f8f9 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>

	//ReadDataEnqueue(POS_ActualCommandPosition, 0, 0);      // Actual Command Position

	ReadDataEnqueue(POS_ActualPosition, 0);      //motor pos. -  Actual Position
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f243 7162 	movw	r1, #14178	; 0x3762
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7fd f8f3 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(MOTOR_Polarity, 0);      // Mptor dir. - Polarity(direction)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f643 1111 	movw	r1, #14609	; 0x3911
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7fd f8ed 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(MEASUREMENT_Vel_rpm, 1);      //motor dynamics - Currently velocity(rpm)
 8004a56:	2201      	movs	r2, #1
 8004a58:	f643 2104 	movw	r1, #14852	; 0x3a04
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7fd f8e7 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_DesiredValue, 0);      // Velocity - rpm
 8004a62:	2200      	movs	r2, #0
 8004a64:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fd f8e1 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Acc_dV, 0);      // Velocity Acceleration - Delta v
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f44f 514d 	mov.w	r1, #13120	; 0x3340
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fd f8db 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Acc_dT, 0);      // Velocity Acceleration - Delta t
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f243 3141 	movw	r1, #13121	; 0x3341
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fd f8d5 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Dec_dV, 0);      // Velocity Deceleration - Delta v
 8004a86:	2200      	movs	r2, #0
 8004a88:	f243 3142 	movw	r1, #13122	; 0x3342
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fd f8cf 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Dec_dT, 0);      // Velocity Deceleration - Delta t
 8004a92:	2200      	movs	r2, #0
 8004a94:	f243 3143 	movw	r1, #13123	; 0x3343
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7fd f8c9 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Dec_QuickStop_dV, 0);      // Velocity Deceleration - Quick-Stop - Delta v
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f243 3144 	movw	r1, #13124	; 0x3344
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7fd f8c3 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Dec_QuickStop_dT, 0);      // Velocity Deceleration - Quick-Stop - Delta t
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f243 3145 	movw	r1, #13125	; 0x3345
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7fd f8bd 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(DEV_ErrorReg, 0);      //check Device status - error status
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f243 0101 	movw	r1, #12289	; 0x3001
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7fd f8b7 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(DEV_Status, 0);      //check Device status - status register
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f243 0102 	movw	r1, #12290	; 0x3002
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7fd f8b1 	bl	8001c30 <_ZN4BG9515ReadDataEnqueueEii>
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <_ZN4BG9517InitializeCommandEv>:



//---------------------------------------------------------------------------------------------------Commands
void BG95::InitializeCommand()
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
	WriteDataEnqueue(DEV_Cmd, 0, Enable);  // reset error register
 8004ade:	2301      	movs	r3, #1
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fc ffbc 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(DEV_Enable, 0, Disable);
 8004aec:	2300      	movs	r3, #0
 8004aee:	2200      	movs	r2, #0
 8004af0:	f243 0104 	movw	r1, #12292	; 0x3004
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7fc ffb5 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	MandatoryParamEnqueue();
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff fdc6 	bl	800468c <_ZN4BG9521MandatoryParamEnqueueEv>

	RecommendationParamEnqueue();
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff fe71 	bl	80047e8 <_ZN4BG9526RecommendationParamEnqueueEv>

	BreakManagementEnqueue();
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff fed4 	bl	80048b4 <_ZN4BG9522BreakManagementEnqueueEv>

	HardwareParamEnqueue();
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff ff12 	bl	8004936 <_ZN4BG9520HardwareParamEnqueueEv>

	WriteDataEnqueue(DEV_Cmd, 0, Enable);      // reset error register
 8004b12:	2301      	movs	r3, #1
 8004b14:	2200      	movs	r2, #0
 8004b16:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fc ffa2 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(DEV_Enable, 0, Enable);
 8004b20:	2301      	movs	r3, #1
 8004b22:	2200      	movs	r2, #0
 8004b24:	f243 0104 	movw	r1, #12292	; 0x3004
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7fc ff9b 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(DEV_Cmd, 0, CMD_Halt); //stop motor
 8004b2e:	2303      	movs	r3, #3
 8004b30:	2200      	movs	r2, #0
 8004b32:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fc ff94 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <_ZN4BG9513AbsPosCommandEimmi>:

void BG95::AbsPosCommand(int vel, uint32_t acc, uint32_t dec, int tpos)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
	int vel_ = vel;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	61fb      	str	r3, [r7, #28]
	uint32_t acc_ = acc;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	61bb      	str	r3, [r7, #24]
	uint32_t dec_ = dec;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	617b      	str	r3, [r7, #20]
	int tpos_ = tpos;
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	613b      	str	r3, [r7, #16]

	SetPowerDisableCommand();
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f928 	bl	8004db8 <_ZN4BG9522SetPowerDisableCommandEv>

	SetVelocityCommand(vel_);
 8004b68:	69f9      	ldr	r1, [r7, #28]
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f880 	bl	8004c70 <_ZN4BG9518SetVelocityCommandEl>

	SetAccelerationCommand(acc_);
 8004b70:	69b9      	ldr	r1, [r7, #24]
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 f8a3 	bl	8004cbe <_ZN4BG9522SetAccelerationCommandEm>

	SetDecelerationCommand(dec_);
 8004b78:	6979      	ldr	r1, [r7, #20]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 f8bf 	bl	8004cfe <_ZN4BG9522SetDecelerationCommandEm>

	SetPositionControlModeEnqueue();
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff fef6 	bl	8004972 <_ZN4BG9529SetPositionControlModeEnqueueEv>

	SetPowerEnableCommand();
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f907 	bl	8004d9a <_ZN4BG9521SetPowerEnableCommandEv>

	AbsPosCommandEnqueue(tpos_);
 8004b8c:	6939      	ldr	r1, [r7, #16]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff ff05 	bl	800499e <_ZN4BG9520AbsPosCommandEnqueueEi>

	ResetErrorCommand();
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f91e 	bl	8004dd6 <_ZN4BG9517ResetErrorCommandEv>
}
 8004b9a:	bf00      	nop
 8004b9c:	3720      	adds	r7, #32
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <_ZN4BG9513RelPosCommandEimmi>:

void BG95::RelPosCommand(int vel, uint32_t acc, uint32_t dec, int tpos)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b088      	sub	sp, #32
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	603b      	str	r3, [r7, #0]
	int vel_ = vel;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	61fb      	str	r3, [r7, #28]
	uint32_t acc_ = acc;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	61bb      	str	r3, [r7, #24]
	uint32_t dec_ = dec;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	617b      	str	r3, [r7, #20]
	int tpos_ = tpos;
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	613b      	str	r3, [r7, #16]

	SetPowerDisableCommand();
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f8f9 	bl	8004db8 <_ZN4BG9522SetPowerDisableCommandEv>

	SetVelocityCommand(vel_);
 8004bc6:	69f9      	ldr	r1, [r7, #28]
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 f851 	bl	8004c70 <_ZN4BG9518SetVelocityCommandEl>

	SetAccelerationCommand(acc_);
 8004bce:	69b9      	ldr	r1, [r7, #24]
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f874 	bl	8004cbe <_ZN4BG9522SetAccelerationCommandEm>

	SetDecelerationCommand(dec_);
 8004bd6:	6979      	ldr	r1, [r7, #20]
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f890 	bl	8004cfe <_ZN4BG9522SetDecelerationCommandEm>

	SetPositionControlModeEnqueue();
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff fec7 	bl	8004972 <_ZN4BG9529SetPositionControlModeEnqueueEv>

	SetPowerEnableCommand();
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f8d8 	bl	8004d9a <_ZN4BG9521SetPowerEnableCommandEv>

	RelPosCommandEnqueue(tpos_);
 8004bea:	6939      	ldr	r1, [r7, #16]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f7ff fee8 	bl	80049c2 <_ZN4BG9520RelPosCommandEnqueueEi>

	ResetErrorCommand();
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f8ef 	bl	8004dd6 <_ZN4BG9517ResetErrorCommandEv>
}
 8004bf8:	bf00      	nop
 8004bfa:	3720      	adds	r7, #32
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <_ZN4BG9510VelCommandEimm>:

void BG95::VelCommand(int vel, uint32_t acc, uint32_t dec)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]

	int vel_ = vel;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	61fb      	str	r3, [r7, #28]
	uint32_t acc_ = acc;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	61bb      	str	r3, [r7, #24]
	uint32_t dec_ = dec;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	617b      	str	r3, [r7, #20]

	SetPowerDisableCommand();
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f8cc 	bl	8004db8 <_ZN4BG9522SetPowerDisableCommandEv>

	SetVelocityCommand(vel_);
 8004c20:	69f9      	ldr	r1, [r7, #28]
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f824 	bl	8004c70 <_ZN4BG9518SetVelocityCommandEl>

	SetAccelerationCommand(acc_);
 8004c28:	69b9      	ldr	r1, [r7, #24]
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f847 	bl	8004cbe <_ZN4BG9522SetAccelerationCommandEm>

	SetDecelerationCommand(dec_);
 8004c30:	6979      	ldr	r1, [r7, #20]
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f863 	bl	8004cfe <_ZN4BG9522SetDecelerationCommandEm>

	SetVelocityControlModeEnqueue();
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7ff fed4 	bl	80049e6 <_ZN4BG9529SetVelocityControlModeEnqueueEv>

	SetPowerEnableCommand();
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f8ab 	bl	8004d9a <_ZN4BG9521SetPowerEnableCommandEv>

	ResetErrorCommand();
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f8c6 	bl	8004dd6 <_ZN4BG9517ResetErrorCommandEv>
}
 8004c4a:	bf00      	nop
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <_ZN4BG9516StopMotorCommandEv>:
	ResetErrorCommand();
}

void BG95::ClearParamCommand(){WriteDataEnqueue(DEV_Cmd, 0, CMD_ClearParam);}

void BG95::StopMotorCommand(){AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Halt);}     // halt
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fc ff71 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <_ZN4BG9518SetVelocityCommandEl>:



//write value functions
void BG95::SetVelocityCommand(int32_t vel)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
	int32_t vel_ = vel;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(VEL_DesiredValue, 0, vel_);      // Velocity - rpm
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fc ff5f 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(VEL_LimitMaxPos, 0, vel_);      // Velocity Max. Limit - Positive Direction - rpm
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f243 3121 	movw	r1, #13089	; 0x3321
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7fc ff58 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(VEL_LimitMaxNeg, 0, vel_);      // Velocity Max. Limit - Negative Direction - rpm
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f243 3123 	movw	r1, #13091	; 0x3323
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fc ff51 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Update);     	//Updates set values
 8004ca8:	2305      	movs	r3, #5
 8004caa:	2200      	movs	r2, #0
 8004cac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7fc ff4a 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <_ZN4BG9522SetAccelerationCommandEm>:

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Update);     	//Updates set values
}

void BG95::SetAccelerationCommand(uint32_t acc)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	6039      	str	r1, [r7, #0]
	uint32_t acc_ = acc;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(VEL_Acc_dV, 0, acc_);      // Velocity Acceleration - Delta v
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f44f 514d 	mov.w	r1, #13120	; 0x3340
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fc ff38 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(VEL_Acc_dT, 0, acc_);      // Velocity Acceleration - Delta t
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f243 3141 	movw	r1, #13121	; 0x3341
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fc ff31 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Update);     	//Updates set values
 8004ce8:	2305      	movs	r3, #5
 8004cea:	2200      	movs	r2, #0
 8004cec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fc ff2a 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004cf6:	bf00      	nop
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <_ZN4BG9522SetDecelerationCommandEm>:

void BG95::SetDecelerationCommand(uint32_t dec)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
	uint32_t dec_ = dec;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(VEL_Dec_dV, 0, dec_);      // Velocity Deceleration - Delta v
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f243 3142 	movw	r1, #13122	; 0x3342
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fc ff18 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(VEL_Dec_dT, 0, dec_);      // Velocity Deceleration - Delta t
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f243 3143 	movw	r1, #13123	; 0x3343
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fc ff11 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Update);     	//Updates set values
 8004d28:	2305      	movs	r3, #5
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7fc ff0a 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <_ZN4BG9525SetDirectionNormalCommandEv>:

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Update);     	//Updates set values
}

void BG95::SetDirectionNormalCommand()
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
	int motor_dir_ = 0x00;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]

	SetPowerDisableCommand();
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f834 	bl	8004db8 <_ZN4BG9522SetPowerDisableCommandEv>

	AsyncWriteDataEnqueue(MOTOR_Polarity, 0, motor_dir_);      // Motor - Polarity(direction)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f643 1111 	movw	r1, #14609	; 0x3911
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7fc fef6 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	SetPowerEnableCommand();
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f81b 	bl	8004d9a <_ZN4BG9521SetPowerEnableCommandEv>
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <_ZN4BG9526SetDirectionReverseCommandEv>:

void BG95::SetDirectionReverseCommand()
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	int motor_dir_ = 0x1b;
 8004d74:	231b      	movs	r3, #27
 8004d76:	60fb      	str	r3, [r7, #12]

	SetPowerDisableCommand();
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f81d 	bl	8004db8 <_ZN4BG9522SetPowerDisableCommandEv>

	AsyncWriteDataEnqueue(MOTOR_Polarity, 0, motor_dir_);      // Motor - Polarity(direction)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f643 1111 	movw	r1, #14609	; 0x3911
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fc fedf 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	SetPowerEnableCommand();
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f804 	bl	8004d9a <_ZN4BG9521SetPowerEnableCommandEv>
}
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <_ZN4BG9521SetPowerEnableCommandEv>:




void BG95::SetPowerEnableCommand()
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
	AsyncWriteDataEnqueue(DEV_Enable, 0, Enable);      // Power Enable - enable
 8004da2:	2301      	movs	r3, #1
 8004da4:	2200      	movs	r2, #0
 8004da6:	f243 0104 	movw	r1, #12292	; 0x3004
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc fecd 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <_ZN4BG9522SetPowerDisableCommandEv>:

void BG95::SetPowerDisableCommand()
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
	AsyncWriteDataEnqueue(DEV_Enable, 0, Disable);      // Power Enable - disable
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f243 0104 	movw	r1, #12292	; 0x3004
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7fc febe 	bl	8001b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <_ZN4BG9517ResetErrorCommandEv>:
{
	AsyncWriteDataEnqueue(POS_ActualPosition, 0, 0);      // reset actual position
}

void BG95::ResetErrorCommand()
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
	WriteDataEnqueue(DEV_Cmd, 0, Enable);      // reset error register
 8004dde:	2301      	movs	r3, #1
 8004de0:	2200      	movs	r2, #0
 8004de2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fc fe3c 	bl	8001a64 <_ZN4BG9516WriteDataEnqueueEiii>
	//AsyncWriteDataEnqueue(DEV_Cmd, 0, Enable);      // reset error register
}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fb39 	bl	8005474 <_ZNSaIP12CommonSensorED1Ev>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fb1c 	bl	8005454 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implC1Ev>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <_ZNSt6vectorIP12CommonSensorSaIS1_EEC1Ev>:
      vector() = default;
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff ffeb 	bl	8004e0c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EEC1Ev>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fb63 	bl	8005514 <_ZNSaIP6PGV100ED1Ev>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EEC1Ev>:
      _Vector_base() = default;
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fb46 	bl	80054f4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implC1Ev>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <_ZNSt6vectorIP6PGV100SaIS1_EEC1Ev>:
      vector() = default;
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff ffeb 	bl	8004e58 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EEC1Ev>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fb8d 	bl	80055b4 <_ZNSaIP5PCV80ED1Ev>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EEC1Ev>:
      _Vector_base() = default;
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fb70 	bl	8005594 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE12_Vector_implC1Ev>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <_ZNSt6vectorIP5PCV80SaIS1_EEC1Ev>:
      vector() = default;
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff ffeb 	bl	8004ea4 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EEC1Ev>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <_ZN13SensorManagerC1Ev>:
bool SensorManager::bDestroyed_ = false;
SensorManager* SensorManager::pIns_ = NULL;


//--------------------------------------------------------------------------------------------------Single instance:
SensorManager::SensorManager() {};
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff ff9f 	bl	8004e26 <_ZNSt6vectorIP12CommonSensorSaIS1_EEC1Ev>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	330c      	adds	r3, #12
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff ffc0 	bl	8004e72 <_ZNSt6vectorIP6PGV100SaIS1_EEC1Ev>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3318      	adds	r3, #24
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff ffe1 	bl	8004ebe <_ZNSt6vectorIP5PCV80SaIS1_EEC1Ev>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <_ZN13SensorManagerD1Ev>:
SensorManager::SensorManager(const SensorManager& other){};
SensorManager& SensorManager::operator=(const SensorManager& ref) {return *this;};
SensorManager::~SensorManager()
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
{
	DeleteAllSensor();
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f887 	bl	8005024 <_ZN13SensorManager15DeleteAllSensorEv>
	bDestroyed_ = true;
 8004f16:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <_ZN13SensorManagerD1Ev+0x3c>)
 8004f18:	2201      	movs	r2, #1
 8004f1a:	701a      	strb	r2, [r3, #0]
SensorManager::~SensorManager()
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3318      	adds	r3, #24
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fb6c 	bl	80055fe <_ZNSt6vectorIP5PCV80SaIS1_EED1Ev>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fb17 	bl	800555e <_ZNSt6vectorIP6PGV100SaIS1_EED1Ev>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fac3 	bl	80054be <_ZNSt6vectorIP12CommonSensorSaIS1_EED1Ev>
}
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	2000086c 	.word	0x2000086c

08004f48 <__tcf_0>:

void SensorManager::ManagerCreate()
{
	static SensorManager ins;
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	4801      	ldr	r0, [pc, #4]	; (8004f54 <__tcf_0+0xc>)
 8004f4e:	f7ff ffdb 	bl	8004f08 <_ZN13SensorManagerD1Ev>
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20000874 	.word	0x20000874

08004f58 <_ZN13SensorManager13ManagerCreateEv>:
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
	static SensorManager ins;
 8004f5c:	4b13      	ldr	r3, [pc, #76]	; (8004fac <_ZN13SensorManager13ManagerCreateEv+0x54>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	f3bf 8f5b 	dmb	ish
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	bf0c      	ite	eq
 8004f6e:	2301      	moveq	r3, #1
 8004f70:	2300      	movne	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d013      	beq.n	8004fa0 <_ZN13SensorManager13ManagerCreateEv+0x48>
 8004f78:	480c      	ldr	r0, [pc, #48]	; (8004fac <_ZN13SensorManager13ManagerCreateEv+0x54>)
 8004f7a:	f01a f885 	bl	801f088 <__cxa_guard_acquire>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf14      	ite	ne
 8004f84:	2301      	movne	r3, #1
 8004f86:	2300      	moveq	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <_ZN13SensorManager13ManagerCreateEv+0x48>
 8004f8e:	4808      	ldr	r0, [pc, #32]	; (8004fb0 <_ZN13SensorManager13ManagerCreateEv+0x58>)
 8004f90:	f7ff ffa2 	bl	8004ed8 <_ZN13SensorManagerC1Ev>
 8004f94:	4807      	ldr	r0, [pc, #28]	; (8004fb4 <_ZN13SensorManager13ManagerCreateEv+0x5c>)
 8004f96:	f01a f8ae 	bl	801f0f6 <atexit>
 8004f9a:	4804      	ldr	r0, [pc, #16]	; (8004fac <_ZN13SensorManager13ManagerCreateEv+0x54>)
 8004f9c:	f01a f880 	bl	801f0a0 <__cxa_guard_release>
	pIns_ = &ins;
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <_ZN13SensorManager13ManagerCreateEv+0x60>)
 8004fa2:	4a03      	ldr	r2, [pc, #12]	; (8004fb0 <_ZN13SensorManager13ManagerCreateEv+0x58>)
 8004fa4:	601a      	str	r2, [r3, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	2000089c 	.word	0x2000089c
 8004fb0:	20000874 	.word	0x20000874
 8004fb4:	08004f49 	.word	0x08004f49
 8004fb8:	20000870 	.word	0x20000870

08004fbc <_ZN13SensorManager13ManagerDeleteEv>:

void SensorManager::ManagerDelete()
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
	pIns_->~SensorManager();
 8004fc0:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <_ZN13SensorManager13ManagerDeleteEv+0x14>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff ff9f 	bl	8004f08 <_ZN13SensorManagerD1Ev>
}
 8004fca:	bf00      	nop
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000870 	.word	0x20000870

08004fd4 <_ZN13SensorManager11GetInstanceEv>:

SensorManager& SensorManager::GetInstance()
{
 8004fd4:	b598      	push	{r3, r4, r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
	if(bDestroyed_)
 8004fd8:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <_ZN13SensorManager11GetInstanceEv+0x44>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d010      	beq.n	8005002 <_ZN13SensorManager11GetInstanceEv+0x2e>
	{
		pIns_ = new SensorManager();
 8004fe0:	2028      	movs	r0, #40	; 0x28
 8004fe2:	f01a f860 	bl	801f0a6 <_Znwj>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	461c      	mov	r4, r3
 8004fea:	4620      	mov	r0, r4
 8004fec:	f7ff ff74 	bl	8004ed8 <_ZN13SensorManagerC1Ev>
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <_ZN13SensorManager11GetInstanceEv+0x48>)
 8004ff2:	601c      	str	r4, [r3, #0]
		// new(pIns) =  SensorManager;
		atexit(ManagerDelete);
 8004ff4:	480a      	ldr	r0, [pc, #40]	; (8005020 <_ZN13SensorManager11GetInstanceEv+0x4c>)
 8004ff6:	f01a f87e 	bl	801f0f6 <atexit>
		bDestroyed_ = false;
 8004ffa:	4b07      	ldr	r3, [pc, #28]	; (8005018 <_ZN13SensorManager11GetInstanceEv+0x44>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	e005      	b.n	800500e <_ZN13SensorManager11GetInstanceEv+0x3a>
	}
	else if (pIns_ == NULL)
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <_ZN13SensorManager11GetInstanceEv+0x48>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <_ZN13SensorManager11GetInstanceEv+0x3a>
	{
		ManagerCreate();
 800500a:	f7ff ffa5 	bl	8004f58 <_ZN13SensorManager13ManagerCreateEv>
	}
	 return *pIns_;
 800500e:	4b03      	ldr	r3, [pc, #12]	; (800501c <_ZN13SensorManager11GetInstanceEv+0x48>)
 8005010:	681b      	ldr	r3, [r3, #0]
}
 8005012:	4618      	mov	r0, r3
 8005014:	bd98      	pop	{r3, r4, r7, pc}
 8005016:	bf00      	nop
 8005018:	2000086c 	.word	0x2000086c
 800501c:	20000870 	.word	0x20000870
 8005020:	08004fbd 	.word	0x08004fbd

08005024 <_ZN13SensorManager15DeleteAllSensorEv>:


void SensorManager::DeleteAllSensor()
{
 8005024:	b590      	push	{r4, r7, lr}
 8005026:	b08b      	sub	sp, #44	; 0x2c
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
	for (auto& index : common_sensors_) delete (index);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
 8005030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005032:	f000 faff 	bl	8005634 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 8005036:	4603      	mov	r3, r0
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800503c:	f000 fb0a 	bl	8005654 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 8005040:	4603      	mov	r3, r0
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	f107 0210 	add.w	r2, r7, #16
 8005048:	f107 0314 	add.w	r3, r7, #20
 800504c:	4611      	mov	r1, r2
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fb11 	bl	8005676 <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <_ZN13SensorManager15DeleteAllSensorEv+0x64>
 800505a:	f107 0314 	add.w	r3, r7, #20
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fb31 	bl	80056c6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 8005064:	61b8      	str	r0, [r7, #24]
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	681c      	ldr	r4, [r3, #0]
 800506a:	2c00      	cmp	r4, #0
 800506c:	d006      	beq.n	800507c <_ZN13SensorManager15DeleteAllSensorEv+0x58>
 800506e:	4620      	mov	r0, r4
 8005070:	f7fb fbfb 	bl	800086a <_ZN12CommonSensorD1Ev>
 8005074:	2110      	movs	r1, #16
 8005076:	4620      	mov	r0, r4
 8005078:	f01a f804 	bl	801f084 <_ZdlPvj>
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fb10 	bl	80056a6 <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 8005086:	e7dd      	b.n	8005044 <_ZN13SensorManager15DeleteAllSensorEv+0x20>
	common_sensors_.clear();
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fb27 	bl	80056de <_ZNSt6vectorIP12CommonSensorSaIS1_EE5clearEv>
	for (auto& index : pgv100_) delete (index);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	330c      	adds	r3, #12
 8005094:	623b      	str	r3, [r7, #32]
 8005096:	6a38      	ldr	r0, [r7, #32]
 8005098:	f000 fb2f 	bl	80056fa <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 800509c:	4603      	mov	r3, r0
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	6a38      	ldr	r0, [r7, #32]
 80050a2:	f000 fb3a 	bl	800571a <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 80050a6:	4603      	mov	r3, r0
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	f107 0208 	add.w	r2, r7, #8
 80050ae:	f107 030c 	add.w	r3, r7, #12
 80050b2:	4611      	mov	r1, r2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fb41 	bl	800573c <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d014      	beq.n	80050ea <_ZN13SensorManager15DeleteAllSensorEv+0xc6>
 80050c0:	f107 030c 	add.w	r3, r7, #12
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fb61 	bl	800578c <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>
 80050ca:	61f8      	str	r0, [r7, #28]
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d004      	beq.n	80050de <_ZN13SensorManager15DeleteAllSensorEv+0xba>
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	3204      	adds	r2, #4
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	4790      	blx	r2
 80050de:	f107 030c 	add.w	r3, r7, #12
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fb42 	bl	800576c <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>
 80050e8:	e7df      	b.n	80050aa <_ZN13SensorManager15DeleteAllSensorEv+0x86>
	pgv100_.clear();
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	330c      	adds	r3, #12
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fb58 	bl	80057a4 <_ZNSt6vectorIP6PGV100SaIS1_EE5clearEv>
}
 80050f4:	bf00      	nop
 80050f6:	372c      	adds	r7, #44	; 0x2c
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd90      	pop	{r4, r7, pc}

080050fc <_ZN13SensorManager20CommonSensorRegisterEv>:


//---------------------------------------------------------------------sensor function
//common sensor
void SensorManager::CommonSensorRegister()
{
 80050fc:	b5b0      	push	{r4, r5, r7, lr}
 80050fe:	b090      	sub	sp, #64	; 0x40
 8005100:	af02      	add	r7, sp, #8
 8005102:	6078      	str	r0, [r7, #4]
	if(common_sensors_.empty())
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fb5a 	bl	80057c0 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5emptyEv>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 8106 	beq.w	8005320 <_ZN13SensorManager20CommonSensorRegisterEv+0x224>
	{
		//J6 -> PG9 ~ J11 -> PG15	, J12 -> PE0 , J16 -> PE4
		common_sensors_.emplace_back(new CommonSensor(AORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_9));
 8005114:	687d      	ldr	r5, [r7, #4]
 8005116:	2010      	movs	r0, #16
 8005118:	f019 ffc5 	bl	801f0a6 <_Znwj>
 800511c:	4603      	mov	r3, r0
 800511e:	461c      	mov	r4, r3
 8005120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	4b80      	ldr	r3, [pc, #512]	; (8005328 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	2305      	movs	r3, #5
 800512c:	2201      	movs	r2, #1
 800512e:	2101      	movs	r1, #1
 8005130:	4620      	mov	r0, r4
 8005132:	f7fb fb6b 	bl	800080c <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8005136:	60fc      	str	r4, [r7, #12]
 8005138:	f107 030c 	add.w	r3, r7, #12
 800513c:	4619      	mov	r1, r3
 800513e:	4628      	mov	r0, r5
 8005140:	f000 fb59 	bl	80057f6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(AORG_R, ActiveH, Filter_5, GPIOG, GPIO_PIN_10));
 8005144:	687d      	ldr	r5, [r7, #4]
 8005146:	2010      	movs	r0, #16
 8005148:	f019 ffad 	bl	801f0a6 <_Znwj>
 800514c:	4603      	mov	r3, r0
 800514e:	461c      	mov	r4, r3
 8005150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005154:	9301      	str	r3, [sp, #4]
 8005156:	4b74      	ldr	r3, [pc, #464]	; (8005328 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	2305      	movs	r3, #5
 800515c:	2201      	movs	r2, #1
 800515e:	2102      	movs	r1, #2
 8005160:	4620      	mov	r0, r4
 8005162:	f7fb fb53 	bl	800080c <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8005166:	613c      	str	r4, [r7, #16]
 8005168:	f107 0310 	add.w	r3, r7, #16
 800516c:	4619      	mov	r1, r3
 800516e:	4628      	mov	r0, r5
 8005170:	f000 fb41 	bl	80057f6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(WORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_12));
 8005174:	687d      	ldr	r5, [r7, #4]
 8005176:	2010      	movs	r0, #16
 8005178:	f019 ff95 	bl	801f0a6 <_Znwj>
 800517c:	4603      	mov	r3, r0
 800517e:	461c      	mov	r4, r3
 8005180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	4b68      	ldr	r3, [pc, #416]	; (8005328 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	2305      	movs	r3, #5
 800518c:	2201      	movs	r2, #1
 800518e:	2104      	movs	r1, #4
 8005190:	4620      	mov	r0, r4
 8005192:	f7fb fb3b 	bl	800080c <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8005196:	617c      	str	r4, [r7, #20]
 8005198:	f107 0314 	add.w	r3, r7, #20
 800519c:	4619      	mov	r1, r3
 800519e:	4628      	mov	r0, r5
 80051a0:	f000 fb29 	bl	80057f6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(WORG_R, ActiveH, Filter_5, GPIOG, GPIO_PIN_13));
 80051a4:	687d      	ldr	r5, [r7, #4]
 80051a6:	2010      	movs	r0, #16
 80051a8:	f019 ff7d 	bl	801f0a6 <_Znwj>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461c      	mov	r4, r3
 80051b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	4b5c      	ldr	r3, [pc, #368]	; (8005328 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	2305      	movs	r3, #5
 80051bc:	2201      	movs	r2, #1
 80051be:	2108      	movs	r1, #8
 80051c0:	4620      	mov	r0, r4
 80051c2:	f7fb fb23 	bl	800080c <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80051c6:	61bc      	str	r4, [r7, #24]
 80051c8:	f107 0318 	add.w	r3, r7, #24
 80051cc:	4619      	mov	r1, r3
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 fb11 	bl	80057f6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(TORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_14));
 80051d4:	687d      	ldr	r5, [r7, #4]
 80051d6:	2010      	movs	r0, #16
 80051d8:	f019 ff65 	bl	801f0a6 <_Znwj>
 80051dc:	4603      	mov	r3, r0
 80051de:	461c      	mov	r4, r3
 80051e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051e4:	9301      	str	r3, [sp, #4]
 80051e6:	4b50      	ldr	r3, [pc, #320]	; (8005328 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	2305      	movs	r3, #5
 80051ec:	2201      	movs	r2, #1
 80051ee:	2110      	movs	r1, #16
 80051f0:	4620      	mov	r0, r4
 80051f2:	f7fb fb0b 	bl	800080c <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80051f6:	61fc      	str	r4, [r7, #28]
 80051f8:	f107 031c 	add.w	r3, r7, #28
 80051fc:	4619      	mov	r1, r3
 80051fe:	4628      	mov	r0, r5
 8005200:	f000 faf9 	bl	80057f6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(TORG_C, ActiveH, Filter_5, GPIOG, GPIO_PIN_15));
 8005204:	687d      	ldr	r5, [r7, #4]
 8005206:	2010      	movs	r0, #16
 8005208:	f019 ff4d 	bl	801f0a6 <_Znwj>
 800520c:	4603      	mov	r3, r0
 800520e:	461c      	mov	r4, r3
 8005210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005214:	9301      	str	r3, [sp, #4]
 8005216:	4b44      	ldr	r3, [pc, #272]	; (8005328 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	2305      	movs	r3, #5
 800521c:	2201      	movs	r2, #1
 800521e:	2120      	movs	r1, #32
 8005220:	4620      	mov	r0, r4
 8005222:	f7fb faf3 	bl	800080c <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8005226:	623c      	str	r4, [r7, #32]
 8005228:	f107 0320 	add.w	r3, r7, #32
 800522c:	4619      	mov	r1, r3
 800522e:	4628      	mov	r0, r5
 8005230:	f000 fae1 	bl	80057f6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>

		common_sensors_.emplace_back(new CommonSensor(TORG_R, ActiveH, Filter_5, GPIOE, GPIO_PIN_0));
 8005234:	687d      	ldr	r5, [r7, #4]
 8005236:	2010      	movs	r0, #16
 8005238:	f019 ff35 	bl	801f0a6 <_Znwj>
 800523c:	4603      	mov	r3, r0
 800523e:	461c      	mov	r4, r3
 8005240:	2301      	movs	r3, #1
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	4b39      	ldr	r3, [pc, #228]	; (800532c <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	2305      	movs	r3, #5
 800524a:	2201      	movs	r2, #1
 800524c:	2140      	movs	r1, #64	; 0x40
 800524e:	4620      	mov	r0, r4
 8005250:	f7fb fadc 	bl	800080c <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8005254:	627c      	str	r4, [r7, #36]	; 0x24
 8005256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800525a:	4619      	mov	r1, r3
 800525c:	4628      	mov	r0, r5
 800525e:	f000 faca 	bl	80057f6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_U, ActiveH, Filter_5, GPIOE, GPIO_PIN_1));
 8005262:	687d      	ldr	r5, [r7, #4]
 8005264:	2010      	movs	r0, #16
 8005266:	f019 ff1e 	bl	801f0a6 <_Znwj>
 800526a:	4603      	mov	r3, r0
 800526c:	461c      	mov	r4, r3
 800526e:	2302      	movs	r3, #2
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	4b2e      	ldr	r3, [pc, #184]	; (800532c <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	2305      	movs	r3, #5
 8005278:	2201      	movs	r2, #1
 800527a:	2180      	movs	r1, #128	; 0x80
 800527c:	4620      	mov	r0, r4
 800527e:	f7fb fac5 	bl	800080c <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8005282:	62bc      	str	r4, [r7, #40]	; 0x28
 8005284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005288:	4619      	mov	r1, r3
 800528a:	4628      	mov	r0, r5
 800528c:	f000 fab3 	bl	80057f6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_C, ActiveH, Filter_5, GPIOE, GPIO_PIN_2));
 8005290:	687d      	ldr	r5, [r7, #4]
 8005292:	2010      	movs	r0, #16
 8005294:	f019 ff07 	bl	801f0a6 <_Znwj>
 8005298:	4603      	mov	r3, r0
 800529a:	461c      	mov	r4, r3
 800529c:	2304      	movs	r3, #4
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	4b22      	ldr	r3, [pc, #136]	; (800532c <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	2305      	movs	r3, #5
 80052a6:	2201      	movs	r2, #1
 80052a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052ac:	4620      	mov	r0, r4
 80052ae:	f7fb faad 	bl	800080c <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80052b2:	62fc      	str	r4, [r7, #44]	; 0x2c
 80052b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052b8:	4619      	mov	r1, r3
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 fa9b 	bl	80057f6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_L, ActiveH, Filter_5, GPIOE, GPIO_PIN_3));
 80052c0:	687d      	ldr	r5, [r7, #4]
 80052c2:	2010      	movs	r0, #16
 80052c4:	f019 feef 	bl	801f0a6 <_Znwj>
 80052c8:	4603      	mov	r3, r0
 80052ca:	461c      	mov	r4, r3
 80052cc:	2308      	movs	r3, #8
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	4b16      	ldr	r3, [pc, #88]	; (800532c <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	2305      	movs	r3, #5
 80052d6:	2201      	movs	r2, #1
 80052d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052dc:	4620      	mov	r0, r4
 80052de:	f7fb fa95 	bl	800080c <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80052e2:	633c      	str	r4, [r7, #48]	; 0x30
 80052e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052e8:	4619      	mov	r1, r3
 80052ea:	4628      	mov	r0, r5
 80052ec:	f000 fa83 	bl	80057f6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(IN_L, ActiveH, Filter_5, GPIOE, GPIO_PIN_4));
 80052f0:	687d      	ldr	r5, [r7, #4]
 80052f2:	2010      	movs	r0, #16
 80052f4:	f019 fed7 	bl	801f0a6 <_Znwj>
 80052f8:	4603      	mov	r3, r0
 80052fa:	461c      	mov	r4, r3
 80052fc:	2310      	movs	r3, #16
 80052fe:	9301      	str	r3, [sp, #4]
 8005300:	4b0a      	ldr	r3, [pc, #40]	; (800532c <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	2305      	movs	r3, #5
 8005306:	2201      	movs	r2, #1
 8005308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800530c:	4620      	mov	r0, r4
 800530e:	f7fb fa7d 	bl	800080c <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8005312:	637c      	str	r4, [r7, #52]	; 0x34
 8005314:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005318:	4619      	mov	r1, r3
 800531a:	4628      	mov	r0, r5
 800531c:	f000 fa6b 	bl	80057f6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		//common_sensors_.emplace_back(new CommonSensor(IN_R, ActiveH, Filter_5, GPIOE, GPIO_PIN_4));
		//common_sensors_.resize(common_sensors_.size());
	}
}
 8005320:	bf00      	nop
 8005322:	3738      	adds	r7, #56	; 0x38
 8005324:	46bd      	mov	sp, r7
 8005326:	bdb0      	pop	{r4, r5, r7, pc}
 8005328:	40021800 	.word	0x40021800
 800532c:	40021000 	.word	0x40021000

08005330 <_ZN13SensorManager22CommonSensorInitializeEv>:

void SensorManager::CommonSensorInitialize()
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	CommonSensorRegister();
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff fedf 	bl	80050fc <_ZN13SensorManager20CommonSensorRegisterEv>
	CommonSensorDrive();
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f804 	bl	800534c <_ZN13SensorManager17CommonSensorDriveEv>
}
 8005344:	bf00      	nop
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <_ZN13SensorManager17CommonSensorDriveEv>:
}



void SensorManager::CommonSensorDrive()
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	for (auto& sensors : common_sensors_) sensors->Drive();
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	6978      	ldr	r0, [r7, #20]
 800535a:	f000 f96b 	bl	8005634 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 800535e:	4603      	mov	r3, r0
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	6978      	ldr	r0, [r7, #20]
 8005364:	f000 f976 	bl	8005654 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 8005368:	4603      	mov	r3, r0
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	f107 0208 	add.w	r2, r7, #8
 8005370:	f107 030c 	add.w	r3, r7, #12
 8005374:	4611      	mov	r1, r2
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f97d 	bl	8005676 <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d010      	beq.n	80053a4 <_ZN13SensorManager17CommonSensorDriveEv+0x58>
 8005382:	f107 030c 	add.w	r3, r7, #12
 8005386:	4618      	mov	r0, r3
 8005388:	f000 f99d 	bl	80056c6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 800538c:	6138      	str	r0, [r7, #16]
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f7fb faf2 	bl	800097c <_ZN12CommonSensor5DriveEv>
 8005398:	f107 030c 	add.w	r3, r7, #12
 800539c:	4618      	mov	r0, r3
 800539e:	f000 f982 	bl	80056a6 <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 80053a2:	e7e3      	b.n	800536c <_ZN13SensorManager17CommonSensorDriveEv+0x20>
	CommonSensorGatherData();
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f804 	bl	80053b2 <_ZN13SensorManager22CommonSensorGatherDataEv>
}
 80053aa:	bf00      	nop
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <_ZN13SensorManager22CommonSensorGatherDataEv>:
uint16_t SensorManager::OUT_LGetData(){return CommonSensorGetData(OUT_L);}
uint16_t SensorManager::OUT_RGetData(){return CommonSensorGetData(OUT_R);}


void SensorManager::CommonSensorGatherData()
{
 80053b2:	b590      	push	{r4, r7, lr}
 80053b4:	b089      	sub	sp, #36	; 0x24
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
	uint16_t temp_sensor_data = 0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	83fb      	strh	r3, [r7, #30]
	for (auto& sensors : common_sensors_)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	69b8      	ldr	r0, [r7, #24]
 80053c4:	f000 f936 	bl	8005634 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 80053c8:	4603      	mov	r3, r0
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	69b8      	ldr	r0, [r7, #24]
 80053ce:	f000 f941 	bl	8005654 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 80053d2:	4603      	mov	r3, r0
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	f107 020c 	add.w	r2, r7, #12
 80053da:	f107 0310 	add.w	r3, r7, #16
 80053de:	4611      	mov	r1, r2
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f948 	bl	8005676 <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d020      	beq.n	800542e <_ZN13SensorManager22CommonSensorGatherDataEv+0x7c>
 80053ec:	f107 0310 	add.w	r3, r7, #16
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 f968 	bl	80056c6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 80053f6:	6178      	str	r0, [r7, #20]
	{
		temp_sensor_data |=  ((sensors->GetSensorIndex()) * (sensors->GetSensorData()));
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fb fa4b 	bl	8000898 <_ZNK12CommonSensor14GetSensorIndexEv>
 8005402:	4603      	mov	r3, r0
 8005404:	461c      	mov	r4, r3
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f7fb fa38 	bl	8000880 <_ZNK12CommonSensor13GetSensorDataEv>
 8005410:	4603      	mov	r3, r0
 8005412:	fb04 f303 	mul.w	r3, r4, r3
 8005416:	b21a      	sxth	r2, r3
 8005418:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800541c:	4313      	orrs	r3, r2
 800541e:	b21b      	sxth	r3, r3
 8005420:	83fb      	strh	r3, [r7, #30]
	for (auto& sensors : common_sensors_)
 8005422:	f107 0310 	add.w	r3, r7, #16
 8005426:	4618      	mov	r0, r3
 8005428:	f000 f93d 	bl	80056a6 <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 800542c:	e7d3      	b.n	80053d6 <_ZN13SensorManager22CommonSensorGatherDataEv+0x24>
	}
	this->common_sensor_data_ = temp_sensor_data;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	8bfa      	ldrh	r2, [r7, #30]
 8005432:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8005434:	bf00      	nop
 8005436:	3724      	adds	r7, #36	; 0x24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd90      	pop	{r4, r7, pc}

0800543c <_ZNK13SensorManager22CommonSensorGetAllDataEv>:

uint16_t SensorManager::CommonSensorGetAllData() const {return this->common_sensor_data_;}
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f9f8 	bl	8005852 <_ZNSaIP12CommonSensorEC1Ev>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fa00 	bl	800586a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <_ZNSaIP12CommonSensorED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fa08 	bl	8005892 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorED1Ev>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80054a4:	461a      	mov	r2, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f9fe 	bl	80058a8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>
      }
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff fca0 	bl	8004df4 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implD1Ev>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <_ZNSt6vectorIP12CommonSensorSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80054be:	b5b0      	push	{r4, r5, r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681c      	ldr	r4, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 f9fc 	bl	80058ce <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80054d6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80054d8:	461a      	mov	r2, r3
 80054da:	4629      	mov	r1, r5
 80054dc:	4620      	mov	r0, r4
 80054de:	f000 fa01 	bl	80058e4 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
      }
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff ffd1 	bl	800548c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EED1Ev>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4618      	mov	r0, r3
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bdb0      	pop	{r4, r5, r7, pc}

080054f4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f9ff 	bl	8005900 <_ZNSaIP6PGV100EC1Ev>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fa07 	bl	8005918 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <_ZNSaIP6PGV100ED1Ev>:
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fa0f 	bl	8005940 <_ZN9__gnu_cxx13new_allocatorIP6PGV100ED1Ev>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <_ZNSt12_Vector_baseIP6PGV100SaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005544:	461a      	mov	r2, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa05 	bl	8005956 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j>
      }
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff fc76 	bl	8004e40 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implD1Ev>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <_ZNSt6vectorIP6PGV100SaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800555e:	b5b0      	push	{r4, r5, r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681c      	ldr	r4, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fa03 	bl	800597c <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8005576:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005578:	461a      	mov	r2, r3
 800557a:	4629      	mov	r1, r5
 800557c:	4620      	mov	r0, r4
 800557e:	f000 fa08 	bl	8005992 <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>
      }
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff ffd1 	bl	800552c <_ZNSt12_Vector_baseIP6PGV100SaIS1_EED1Ev>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bdb0      	pop	{r4, r5, r7, pc}

08005594 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fa06 	bl	80059ae <_ZNSaIP5PCV80EC1Ev>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fa0e 	bl	80059c6 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <_ZNSaIP5PCV80ED1Ev>:
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fa16 	bl	80059ee <_ZN9__gnu_cxx13new_allocatorIP5PCV80ED1Ev>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <_ZNSt12_Vector_baseIP5PCV80SaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80055e4:	461a      	mov	r2, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa0c 	bl	8005a04 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE13_M_deallocateEPS1_j>
      }
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fc4c 	bl	8004e8c <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE12_Vector_implD1Ev>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <_ZNSt6vectorIP5PCV80SaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80055fe:	b5b0      	push	{r4, r5, r7, lr}
 8005600:	b082      	sub	sp, #8
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681c      	ldr	r4, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fa0a 	bl	8005a2a <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE19_M_get_Tp_allocatorEv>
 8005616:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005618:	461a      	mov	r2, r3
 800561a:	4629      	mov	r1, r5
 800561c:	4620      	mov	r0, r4
 800561e:	f000 fa0f 	bl	8005a40 <_ZSt8_DestroyIPP5PCV80S1_EvT_S3_RSaIT0_E>
      }
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff ffd1 	bl	80055cc <_ZNSt12_Vector_baseIP5PCV80SaIS1_EED1Ev>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bdb0      	pop	{r4, r5, r7, pc}

08005634 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	f107 030c 	add.w	r3, r7, #12
 8005642:	4611      	mov	r1, r2
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fa09 	bl	8005a5c <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	1d1a      	adds	r2, r3, #4
 8005660:	f107 030c 	add.w	r3, r7, #12
 8005664:	4611      	mov	r1, r2
 8005666:	4618      	mov	r0, r3
 8005668:	f000 f9f8 	bl	8005a5c <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005676:	b590      	push	{r4, r7, lr}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f9fb 	bl	8005a7c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8005686:	4603      	mov	r3, r0
 8005688:	681c      	ldr	r4, [r3, #0]
 800568a:	6838      	ldr	r0, [r7, #0]
 800568c:	f000 f9f6 	bl	8005a7c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8005690:	4603      	mov	r3, r0
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	429c      	cmp	r4, r3
 8005696:	bf14      	ite	ne
 8005698:	2301      	movne	r3, #1
 800569a:	2300      	moveq	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd90      	pop	{r4, r7, pc}

080056a6 <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
	++_M_current;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	1d1a      	adds	r2, r3, #4
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	601a      	str	r2, [r3, #0]
	return *this;
 80056b8:	687b      	ldr	r3, [r7, #4]
      }
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <_ZNSt6vectorIP12CommonSensorSaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80056de:	b580      	push	{r7, lr}
 80056e0:	b082      	sub	sp, #8
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f9d0 	bl	8005a92 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_>
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	f107 030c 	add.w	r3, r7, #12
 8005708:	4611      	mov	r1, r2
 800570a:	4618      	mov	r0, r3
 800570c:	f000 f9e2 	bl	8005ad4 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	1d1a      	adds	r2, r3, #4
 8005726:	f107 030c 	add.w	r3, r7, #12
 800572a:	4611      	mov	r1, r2
 800572c:	4618      	mov	r0, r3
 800572e:	f000 f9d1 	bl	8005ad4 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800573c:	b590      	push	{r4, r7, lr}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f9d4 	bl	8005af4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 800574c:	4603      	mov	r3, r0
 800574e:	681c      	ldr	r4, [r3, #0]
 8005750:	6838      	ldr	r0, [r7, #0]
 8005752:	f000 f9cf 	bl	8005af4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8005756:	4603      	mov	r3, r0
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	429c      	cmp	r4, r3
 800575c:	bf14      	ite	ne
 800575e:	2301      	movne	r3, #1
 8005760:	2300      	moveq	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	bd90      	pop	{r4, r7, pc}

0800576c <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	++_M_current;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	1d1a      	adds	r2, r3, #4
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	601a      	str	r2, [r3, #0]
	return *this;
 800577e:	687b      	ldr	r3, [r7, #4]
      }
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <_ZNSt6vectorIP6PGV100SaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f9a9 	bl	8005b0a <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_>
 80057b8:	bf00      	nop
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f9bf 	bl	8005b4c <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 80057ce:	4603      	mov	r3, r0
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f9ca 	bl	8005b6c <_ZNKSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 80057d8:	4603      	mov	r3, r0
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	f107 020c 	add.w	r2, r7, #12
 80057e0:	f107 0308 	add.w	r3, r7, #8
 80057e4:	4611      	mov	r1, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 f9d1 	bl	8005b8e <_ZN9__gnu_cxxeqIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 80057ec:	4603      	mov	r3, r0
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 80057f6:	b5b0      	push	{r4, r5, r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	d011      	beq.n	8005830 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800580c:	687c      	ldr	r4, [r7, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685d      	ldr	r5, [r3, #4]
 8005812:	6838      	ldr	r0, [r7, #0]
 8005814:	f000 f9d3 	bl	8005bbe <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8005818:	4603      	mov	r3, r0
 800581a:	461a      	mov	r2, r3
 800581c:	4629      	mov	r1, r5
 800581e:	4620      	mov	r0, r4
 8005820:	f000 f9d8 	bl	8005bd4 <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	1d1a      	adds	r2, r3, #4
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	605a      	str	r2, [r3, #4]
      }
 800582e:	e00c      	b.n	800584a <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff ff0f 	bl	8005654 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 8005836:	4604      	mov	r4, r0
 8005838:	6838      	ldr	r0, [r7, #0]
 800583a:	f000 f9c0 	bl	8005bbe <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 800583e:	4603      	mov	r3, r0
 8005840:	461a      	mov	r2, r3
 8005842:	4621      	mov	r1, r4
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f9ef 	bl	8005c28 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800584a:	bf00      	nop
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bdb0      	pop	{r4, r5, r7, pc}

08005852 <_ZNSaIP12CommonSensorEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8005852:	b580      	push	{r7, lr}
 8005854:	b082      	sub	sp, #8
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 faa0 	bl	8005da0 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorEC1Ev>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	605a      	str	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	609a      	str	r2, [r3, #8]
	{ }
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4618      	mov	r0, r3
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
	if (__p)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d005      	beq.n	80058c6 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	68b9      	ldr	r1, [r7, #8]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fa78 	bl	8005db6 <_ZNSt16allocator_traitsISaIP12CommonSensorEE10deallocateERS2_PS1_j>
      }
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 fa6e 	bl	8005dd4 <_ZSt8_DestroyIPP12CommonSensorEvT_S3_>
    }
 80058f8:	bf00      	nop
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <_ZNSaIP6PGV100EC1Ev>:
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fa70 	bl	8005dee <_ZN9__gnu_cxx13new_allocatorIP6PGV100EC1Ev>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	605a      	str	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	609a      	str	r2, [r3, #8]
	{ }
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4618      	mov	r0, r3
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <_ZN9__gnu_cxx13new_allocatorIP6PGV100ED1Ev>:
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
	if (__p)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fa48 	bl	8005e04 <_ZNSt16allocator_traitsISaIP6PGV100EE10deallocateERS2_PS1_j>
      }
 8005974:	bf00      	nop
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 fa3e 	bl	8005e22 <_ZSt8_DestroyIPP6PGV100EvT_S3_>
    }
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <_ZNSaIP5PCV80EC1Ev>:
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fa40 	bl	8005e3c <_ZN9__gnu_cxx13new_allocatorIP5PCV80EC1Ev>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	609a      	str	r2, [r3, #8]
	{ }
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <_ZN9__gnu_cxx13new_allocatorIP5PCV80ED1Ev>:
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
	if (__p)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fa18 	bl	8005e52 <_ZNSt16allocator_traitsISaIP5PCV80EE10deallocateERS2_PS1_j>
      }
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <_ZSt8_DestroyIPP5PCV80S1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fa0e 	bl	8005e70 <_ZSt8_DestroyIPP5PCV80EvT_S3_>
    }
 8005a54:	bf00      	nop
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4618      	mov	r0, r3
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8005a92:	b590      	push	{r4, r7, lr}
 8005a94:	b085      	sub	sp, #20
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	109b      	asrs	r3, r3, #2
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00e      	beq.n	8005acc <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff ff0a 	bl	80058ce <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8005aba:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8005abc:	461a      	mov	r2, r3
 8005abe:	4621      	mov	r1, r4
 8005ac0:	6838      	ldr	r0, [r7, #0]
 8005ac2:	f7ff ff0f 	bl	80058e4 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	605a      	str	r2, [r3, #4]
      }
 8005acc:	bf00      	nop
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd90      	pop	{r4, r7, pc}

08005ad4 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8005b0a:	b590      	push	{r4, r7, lr}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	109b      	asrs	r3, r3, #2
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00e      	beq.n	8005b44 <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff ff25 	bl	800597c <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8005b32:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8005b34:	461a      	mov	r2, r3
 8005b36:	4621      	mov	r1, r4
 8005b38:	6838      	ldr	r0, [r7, #0]
 8005b3a:	f7ff ff2a 	bl	8005992 <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	605a      	str	r2, [r3, #4]
      }
 8005b44:	bf00      	nop
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd90      	pop	{r4, r7, pc}

08005b4c <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	f107 030c 	add.w	r3, r7, #12
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 f994 	bl	8005e8a <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <_ZNKSt6vectorIP12CommonSensorSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	1d1a      	adds	r2, r3, #4
 8005b78:	f107 030c 	add.w	r3, r7, #12
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 f983 	bl	8005e8a <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <_ZN9__gnu_cxxeqIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005b8e:	b590      	push	{r4, r7, lr}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f986 	bl	8005eaa <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	681c      	ldr	r4, [r3, #0]
 8005ba2:	6838      	ldr	r0, [r7, #0]
 8005ba4:	f000 f981 	bl	8005eaa <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	429c      	cmp	r4, r3
 8005bae:	bf0c      	ite	eq
 8005bb0:	2301      	moveq	r3, #1
 8005bb2:	2300      	movne	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd90      	pop	{r4, r7, pc}

08005bbe <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7ff ffec 	bl	8005bbe <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8005be6:	4603      	mov	r3, r0
 8005be8:	461a      	mov	r2, r3
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f967 	bl	8005ec0 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 f805 	bl	8005c10 <_ZNSt6vectorIP12CommonSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8005c06:	4603      	mov	r3, r0
      }
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <_ZNSt6vectorIP12CommonSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8005c18:	2301      	movs	r3, #1
      }
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
	...

08005c28 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005c28:	b5b0      	push	{r4, r5, r7, lr}
 8005c2a:	b08c      	sub	sp, #48	; 0x30
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8005c34:	4a59      	ldr	r2, [pc, #356]	; (8005d9c <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8005c36:	2101      	movs	r1, #1
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f957 	bl	8005eec <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc>
 8005c3e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7ff fcf1 	bl	8005634 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 8005c52:	4603      	mov	r3, r0
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	f107 0214 	add.w	r2, r7, #20
 8005c5a:	f107 0308 	add.w	r3, r7, #8
 8005c5e:	4611      	mov	r1, r2
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 f98a 	bl	8005f7a <_ZN9__gnu_cxxmiIPP12CommonSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8005c66:	4603      	mov	r3, r0
 8005c68:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 f998 	bl	8005fa4 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj>
 8005c74:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8005c7a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	18d5      	adds	r5, r2, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff ff9a 	bl	8005bbe <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4629      	mov	r1, r5
 8005c90:	4620      	mov	r0, r4
 8005c92:	f7ff ff9f 	bl	8005bd4 <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8005c96:	2300      	movs	r3, #0
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8005c9a:	f7ff ffae 	bl	8005bfa <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d027      	beq.n	8005cf4 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005ca4:	f107 0308 	add.w	r3, r7, #8
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff fee7 	bl	8005a7c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff fe0a 	bl	80058ce <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8005cba:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cc2:	f000 f983 	bl	8005fcc <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8005cc6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	3304      	adds	r3, #4
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005cce:	f107 0308 	add.w	r3, r7, #8
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff fed2 	bl	8005a7c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff fdf5 	bl	80058ce <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8005ce4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ce8:	6a39      	ldr	r1, [r7, #32]
 8005cea:	4620      	mov	r0, r4
 8005cec:	f000 f96e 	bl	8005fcc <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8005cf0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005cf2:	e026      	b.n	8005d42 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8005cf4:	f107 0308 	add.w	r3, r7, #8
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff febf 	bl	8005a7c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff fde2 	bl	80058ce <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8005d0a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4621      	mov	r1, r4
 8005d10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d12:	f000 f96f 	bl	8005ff4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8005d16:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8005d1e:	f107 0308 	add.w	r3, r7, #8
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff feaa 	bl	8005a7c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff fdcd 	bl	80058ce <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8005d34:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8005d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d38:	6a39      	ldr	r1, [r7, #32]
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f000 f95a 	bl	8005ff4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8005d40:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8005d42:	f7ff ff5a 	bl	8005bfa <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f083 0301 	eor.w	r3, r3, #1
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d009      	beq.n	8005d66 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff fdba 	bl	80058ce <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	6a39      	ldr	r1, [r7, #32]
 8005d60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d62:	f7ff fdbf 	bl	80058e4 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8005d66:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8005d72:	461a      	mov	r2, r3
 8005d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d76:	f7ff fd97 	bl	80058a8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d84:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	441a      	add	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	609a      	str	r2, [r3, #8]
    }
 8005d92:	bf00      	nop
 8005d94:	3730      	adds	r7, #48	; 0x30
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bdb0      	pop	{r4, r5, r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	080208a0 	.word	0x080208a0

08005da0 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <_ZNSt16allocator_traitsISaIP12CommonSensorEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f92d 	bl	8006026 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE10deallocateEPS2_j>
 8005dcc:	bf00      	nop
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <_ZSt8_DestroyIPP12CommonSensorEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f930 	bl	8006046 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12CommonSensorEEvT_S5_>
    }
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <_ZN9__gnu_cxx13new_allocatorIP6PGV100EC1Ev>:
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <_ZNSt16allocator_traitsISaIP6PGV100EE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f921 	bl	800605c <_ZN9__gnu_cxx13new_allocatorIP6PGV100E10deallocateEPS2_j>
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <_ZSt8_DestroyIPP6PGV100EvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b082      	sub	sp, #8
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f924 	bl	800607c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6PGV100EEvT_S5_>
    }
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <_ZN9__gnu_cxx13new_allocatorIP5PCV80EC1Ev>:
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <_ZNSt16allocator_traitsISaIP5PCV80EE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	68b9      	ldr	r1, [r7, #8]
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 f915 	bl	8006092 <_ZN9__gnu_cxx13new_allocatorIP5PCV80E10deallocateEPS2_j>
 8005e68:	bf00      	nop
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <_ZSt8_DestroyIPP5PCV80EvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005e7a:	6839      	ldr	r1, [r7, #0]
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f918 	bl	80060b2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5PCV80EEvT_S5_>
    }
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005ec0:	b590      	push	{r4, r7, lr}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff fe76 	bl	8005bbe <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	681c      	ldr	r4, [r3, #0]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	2004      	movs	r0, #4
 8005edc:	f7fb fb61 	bl	80015a2 <_ZnwjPv>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	601c      	str	r4, [r3, #0]
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd90      	pop	{r4, r7, pc}

08005eec <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005eec:	b590      	push	{r4, r7, lr}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f8e5 	bl	80060c8 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 8005efe:	4604      	mov	r4, r0
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f8f2 	bl	80060ea <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 8005f06:	4603      	mov	r3, r0
 8005f08:	1ae2      	subs	r2, r4, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	bf34      	ite	cc
 8005f10:	2301      	movcc	r3, #1
 8005f12:	2300      	movcs	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f019 f8d7 	bl	801f0ce <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 f8e2 	bl	80060ea <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 8005f26:	4604      	mov	r4, r0
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 f8de 	bl	80060ea <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	f107 0208 	add.w	r2, r7, #8
 8005f36:	f107 0310 	add.w	r3, r7, #16
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fd fdd8 	bl	8003af2 <_ZSt3maxIjERKT_S2_S2_>
 8005f42:	4603      	mov	r3, r0
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4423      	add	r3, r4
 8005f48:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f8cd 	bl	80060ea <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 8005f50:	4602      	mov	r2, r0
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d306      	bcc.n	8005f66 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f8b5 	bl	80060c8 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d904      	bls.n	8005f70 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x84>
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 f8ae 	bl	80060c8 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	e000      	b.n	8005f72 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x86>
 8005f70:	697b      	ldr	r3, [r7, #20]
      }
 8005f72:	4618      	mov	r0, r3
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd90      	pop	{r4, r7, pc}

08005f7a <_ZN9__gnu_cxxmiIPP12CommonSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005f7a:	b590      	push	{r4, r7, lr}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff fd79 	bl	8005a7c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	681c      	ldr	r4, [r3, #0]
 8005f8e:	6838      	ldr	r0, [r7, #0]
 8005f90:	f7ff fd74 	bl	8005a7c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8005f94:	4603      	mov	r3, r0
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	1ae3      	subs	r3, r4, r3
 8005f9a:	109b      	asrs	r3, r3, #2
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd90      	pop	{r4, r7, pc}

08005fa4 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d006      	beq.n	8005fc2 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj+0x1e>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 f8a6 	bl	800610a <_ZNSt16allocator_traitsISaIP12CommonSensorEE8allocateERS2_j>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	e000      	b.n	8005fc4 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj+0x20>
 8005fc2:	2300      	movs	r3, #0
      }
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8005fcc:	b590      	push	{r4, r7, lr}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8005fda:	f88d 4000 	strb.w	r4, [sp]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f89f 	bl	8006128 <_ZNSt6vectorIP12CommonSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8005fea:	4603      	mov	r3, r0
      }
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd90      	pop	{r4, r7, pc}

08005ff4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 f8a2 	bl	800614c <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>
 8006008:	4604      	mov	r4, r0
 800600a:	68b8      	ldr	r0, [r7, #8]
 800600c:	f000 f89e 	bl	800614c <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>
 8006010:	4601      	mov	r1, r0
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	4620      	mov	r0, r4
 8006018:	f000 f8a7 	bl	800616a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12CommonSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800601c:	4603      	mov	r3, r0
    }
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	bd90      	pop	{r4, r7, pc}

08006026 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4619      	mov	r1, r3
 8006038:	68b8      	ldr	r0, [r7, #8]
 800603a:	f019 f823 	bl	801f084 <_ZdlPvj>
      }
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12CommonSensorEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <_ZN9__gnu_cxx13new_allocatorIP6PGV100E10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4619      	mov	r1, r3
 800606e:	68b8      	ldr	r0, [r7, #8]
 8006070:	f019 f808 	bl	801f084 <_ZdlPvj>
      }
 8006074:	bf00      	nop
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6PGV100EEvT_S5_>:
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <_ZN9__gnu_cxx13new_allocatorIP5PCV80E10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4619      	mov	r1, r3
 80060a4:	68b8      	ldr	r0, [r7, #8]
 80060a6:	f018 ffed 	bl	801f084 <_ZdlPvj>
      }
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5PCV80EEvT_S5_>:
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 f874 	bl	80061c0 <_ZNKSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80060d8:	4603      	mov	r3, r0
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 f856 	bl	800618c <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_max_sizeERKS2_>
 80060e0:	4603      	mov	r3, r0
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	109b      	asrs	r3, r3, #2
 80060fe:	4618      	mov	r0, r3
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <_ZNSt16allocator_traitsISaIP12CommonSensorEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006114:	2200      	movs	r2, #0
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f85c 	bl	80061d6 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv>
 800611e:	4603      	mov	r3, r0
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <_ZNSt6vectorIP12CommonSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f868 	bl	8006212 <_ZSt12__relocate_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006142:	4603      	mov	r3, r0
      }
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8006154:	f107 030c 	add.w	r3, r7, #12
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4618      	mov	r0, r3
 800615c:	f000 f876 	bl	800624c <_ZNSt13move_iteratorIPP12CommonSensorEC1ES2_>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12CommonSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
 8006176:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f877 	bl	8006270 <_ZSt18uninitialized_copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>
 8006182:	4603      	mov	r3, r0
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8006194:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006198:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f87a 	bl	8006294 <_ZNSt16allocator_traitsISaIP12CommonSensorEE8max_sizeERKS2_>
 80061a0:	4603      	mov	r3, r0
 80061a2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80061a4:	f107 0208 	add.w	r2, r7, #8
 80061a8:	f107 030c 	add.w	r3, r7, #12
 80061ac:	4611      	mov	r1, r2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fd ff4c 	bl	800404c <_ZSt3minIjERKT_S2_S2_>
 80061b4:	4603      	mov	r3, r0
 80061b6:	681b      	ldr	r3, [r3, #0]
      }
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <_ZNKSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f862 	bl	80062ac <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>
 80061e8:	4602      	mov	r2, r0
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	4293      	cmp	r3, r2
 80061ee:	bf8c      	ite	hi
 80061f0:	2301      	movhi	r3, #1
 80061f2:	2300      	movls	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80061fa:	f018 ff65 	bl	801f0c8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4618      	mov	r0, r3
 8006204:	f018 ff4f 	bl	801f0a6 <_Znwj>
 8006208:	4603      	mov	r3, r0
      }
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <_ZSt12__relocate_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006212:	b5b0      	push	{r4, r5, r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	607a      	str	r2, [r7, #4]
 800621e:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f84f 	bl	80062c4 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 8006226:	4604      	mov	r4, r0
 8006228:	68b8      	ldr	r0, [r7, #8]
 800622a:	f000 f84b 	bl	80062c4 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 800622e:	4605      	mov	r5, r0
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f847 	bl	80062c4 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 8006236:	4602      	mov	r2, r0
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	4629      	mov	r1, r5
 800623c:	4620      	mov	r0, r4
 800623e:	f000 f84c 	bl	80062da <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8006242:	4603      	mov	r3, r0
    }
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bdb0      	pop	{r4, r5, r7, pc}

0800624c <_ZNSt13move_iteratorIPP12CommonSensorEC1ES2_>:
      move_iterator(iterator_type __i)
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8006256:	463b      	mov	r3, r7
 8006258:	4618      	mov	r0, r3
 800625a:	f000 f85c 	bl	8006316 <_ZSt4moveIRPP12CommonSensorEONSt16remove_referenceIT_E4typeEOS5_>
 800625e:	4603      	mov	r3, r0
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <_ZSt18uninitialized_copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800627c:	2301      	movs	r3, #1
 800627e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 f851 	bl	800632c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12CommonSensorES5_EET0_T_S8_S7_>
 800628a:	4603      	mov	r3, r0
    }
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <_ZNSt16allocator_traitsISaIP12CommonSensorEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f855 	bl	800634c <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE8max_sizeEv>
 80062a2:	4603      	mov	r3, r0
      }
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80062b4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>:
    __niter_base(_Iterator __it)
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80062da:	b580      	push	{r7, lr}
 80062dc:	b086      	sub	sp, #24
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	109b      	asrs	r3, r3, #2
 80062f0:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	dd06      	ble.n	8006306 <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	461a      	mov	r2, r3
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f019 f84b 	bl	801f39c <memmove>
      return __result + __count;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	4413      	add	r3, r2
    }
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <_ZSt4moveIRPP12CommonSensorEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4618      	mov	r0, r3
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12CommonSensorES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f811 	bl	8006364 <_ZSt4copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>
 8006342:	4603      	mov	r3, r0
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff ffa9 	bl	80062ac <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>
 800635a:	4603      	mov	r3, r0
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <_ZSt4copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8006364:	b590      	push	{r4, r7, lr}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 f80f 	bl	8006394 <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006376:	4604      	mov	r4, r0
 8006378:	68b8      	ldr	r0, [r7, #8]
 800637a:	f000 f80b 	bl	8006394 <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800637e:	4603      	mov	r3, r0
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	4619      	mov	r1, r3
 8006384:	4620      	mov	r0, r4
 8006386:	f000 f816 	bl	80063b6 <_ZSt13__copy_move_aILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 800638a:	4603      	mov	r3, r0
    }
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	bd90      	pop	{r4, r7, pc}

08006394 <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800639c:	1d3b      	adds	r3, r7, #4
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 f82c 	bl	80063fc <_ZNKSt13move_iteratorIPP12CommonSensorE4baseEv>
 80063a4:	4603      	mov	r3, r0
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 f834 	bl	8006414 <_ZSt12__miter_baseIPP12CommonSensorET_S3_>
 80063ac:	4603      	mov	r3, r0
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <_ZSt13__copy_move_aILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80063b6:	b5b0      	push	{r4, r5, r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff ff7e 	bl	80062c4 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 80063c8:	4604      	mov	r4, r0
 80063ca:	68b8      	ldr	r0, [r7, #8]
 80063cc:	f7ff ff7a 	bl	80062c4 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 80063d0:	4605      	mov	r5, r0
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff ff75 	bl	80062c4 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 80063da:	4603      	mov	r3, r0
 80063dc:	461a      	mov	r2, r3
 80063de:	4629      	mov	r1, r5
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 f822 	bl	800642a <_ZSt14__copy_move_a1ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 80063e6:	4602      	mov	r2, r0
 80063e8:	1d3b      	adds	r3, r7, #4
 80063ea:	4611      	mov	r1, r2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 f82c 	bl	800644a <_ZSt12__niter_wrapIPP12CommonSensorET_RKS3_S3_>
 80063f2:	4603      	mov	r3, r0
    }
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bdb0      	pop	{r4, r5, r7, pc}

080063fc <_ZNKSt13move_iteratorIPP12CommonSensorE4baseEv>:
      base() const
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <_ZSt12__miter_baseIPP12CommonSensorET_S3_>:
    __miter_base(_Iterator __it)
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <_ZSt14__copy_move_a1ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 f811 	bl	8006462 <_ZSt14__copy_move_a2ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 8006440:	4603      	mov	r3, r0
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <_ZSt12__niter_wrapIPP12CommonSensorET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <_ZSt14__copy_move_a2ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	68b9      	ldr	r1, [r7, #8]
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f805 	bl	8006482 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_>
 8006478:	4603      	mov	r3, r0
    }
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006482:	b580      	push	{r7, lr}
 8006484:	b086      	sub	sp, #24
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	109b      	asrs	r3, r3, #2
 8006496:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d006      	beq.n	80064ac <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	461a      	mov	r2, r3
 80064a4:	68f9      	ldr	r1, [r7, #12]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f018 ff78 	bl	801f39c <memmove>
	  return __result + _Num;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	4413      	add	r3, r2
	}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm>:


//----------------------------------------------------------------------------------------CANOpen(No interrupt)
int HAL_CANTransmit(CAN_HandleTypeDef* hcanx, const CAN_TxHeaderTypeDef *pHeader,
					const uint8_t *aData, uint32_t *pTxMailbox)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
	int state = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
	//uint32_t now_ = HAL_GetTick();
	//uint16_t wait_time_ = CommTimeOut_1ms;

	state =  HAL_CAN_AddTxMessage(hcanx, pHeader, aData, pTxMailbox);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f001 fac6 	bl	8007a66 <HAL_CAN_AddTxMessage>
 80064da:	4603      	mov	r3, r0
 80064dc:	617b      	str	r3, [r7, #20]

	/* Monitor the Tx mailboxes availability until at least one Tx mailbox is free*/
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) != 3);
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f001 fb91 	bl	8007c06 <HAL_CAN_GetTxMailboxesFreeLevel>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	bf14      	ite	ne
 80064ea:	2301      	movne	r3, #1
 80064ec:	2300      	moveq	r3, #0
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d000      	beq.n	80064f6 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm+0x3a>
 80064f4:	e7f3      	b.n	80064de <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm+0x22>

	//waiting for message to leave
	while((HAL_CAN_IsTxMessagePending((hcanx) , *pTxMailbox)));
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4619      	mov	r1, r3
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f001 fbb7 	bl	8007c70 <HAL_CAN_IsTxMessagePending>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	bf14      	ite	ne
 8006508:	2301      	movne	r3, #1
 800650a:	2300      	moveq	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d000      	beq.n	8006514 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm+0x58>
 8006512:	e7f0      	b.n	80064f6 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm+0x3a>

	//waiting for transmission request to be completed by checking RQCPx
	while( !(hcanx->Instance->TSR & ( 0x1 << (7 * ( (*pTxMailbox) - 1 )))));
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6899      	ldr	r1, [r3, #8]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4613      	mov	r3, r2
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	1a9b      	subs	r3, r3, r2
 8006524:	3b07      	subs	r3, #7
 8006526:	2201      	movs	r2, #1
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	400b      	ands	r3, r1
 800652e:	2b00      	cmp	r3, #0
 8006530:	bf0c      	ite	eq
 8006532:	2301      	moveq	r3, #1
 8006534:	2300      	movne	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d000      	beq.n	800653e <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm+0x82>
 800653c:	e7ea      	b.n	8006514 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm+0x58>

	return state;
 800653e:	697b      	ldr	r3, [r7, #20]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh>:

int HAL_CANReceive(CAN_HandleTypeDef *hcanx, CAN_RxHeaderTypeDef *pHeader, uint8_t *aData)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b088      	sub	sp, #32
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
	int state = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	61fb      	str	r3, [r7, #28]
	uint32_t now_= HAL_GetTick();
 8006558:	f000 ffec 	bl	8007534 <HAL_GetTick>
 800655c:	61b8      	str	r0, [r7, #24]
	//uint16_t wait_time_ = CommTimeOut_1ms;
	uint16_t wait_time_ = 0;
 800655e:	2300      	movs	r3, #0
 8006560:	82fb      	strh	r3, [r7, #22]
	while(1)
	{
		/* Monitoring queue until at least one message is received */
		if(HAL_CAN_GetRxFifoFillLevel(hcanx, CAN_RX_FIFO0) >= 1)
 8006562:	2100      	movs	r1, #0
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f001 fcb9 	bl	8007edc <HAL_CAN_GetRxFifoFillLevel>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	bf14      	ite	ne
 8006570:	2301      	movne	r3, #1
 8006572:	2300      	moveq	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d008      	beq.n	800658c <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh+0x44>
		{
			state = HAL_CAN_GetRxMessage(hcanx, CAN_RX_FIFO0, pHeader, aData);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	2100      	movs	r1, #0
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f001 fb99 	bl	8007cb8 <HAL_CAN_GetRxMessage>
 8006586:	4603      	mov	r3, r0
 8006588:	61fb      	str	r3, [r7, #28]
			break;
 800658a:	e00e      	b.n	80065aa <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh+0x62>
		}

		/*for TimeOut*/
		if((HAL_GetTick() - now_) >= wait_time_)
 800658c:	f000 ffd2 	bl	8007534 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	1ad2      	subs	r2, r2, r3
 8006596:	8afb      	ldrh	r3, [r7, #22]
 8006598:	429a      	cmp	r2, r3
 800659a:	bf2c      	ite	cs
 800659c:	2301      	movcs	r3, #1
 800659e:	2300      	movcc	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0dd      	beq.n	8006562 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh+0x1a>
		{
			state = HAL_TIMEOUT; break;
 80065a6:	2303      	movs	r3, #3
 80065a8:	61fb      	str	r3, [r7, #28]
		}
	}
	return state;
 80065aa:	69fb      	ldr	r3, [r7, #28]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3720      	adds	r7, #32
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08c      	sub	sp, #48	; 0x30
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8] = {0,};
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	2300      	movs	r3, #0
 80065c2:	613b      	str	r3, [r7, #16]

  /* Get RX message */
  if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80065c4:	f107 030c 	add.w	r3, r7, #12
 80065c8:	f107 0214 	add.w	r2, r7, #20
 80065cc:	2100      	movs	r1, #0
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 fb72 	bl	8007cb8 <HAL_CAN_GetRxMessage>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	bf14      	ite	ne
 80065da:	2301      	movne	r3, #1
 80065dc:	2300      	moveq	r3, #0
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
  {
    /* Reception Error */
    Error_Handler();
 80065e4:	f7fa ffd8 	bl	8001598 <Error_Handler>
  }
}
 80065e8:	bf00      	nop
 80065ea:	3730      	adds	r7, #48	; 0x30
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4a07      	ldr	r2, [pc, #28]	; (800661c <vApplicationGetIdleTaskMemory+0x2c>)
 8006600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4a06      	ldr	r2, [pc, #24]	; (8006620 <vApplicationGetIdleTaskMemory+0x30>)
 8006606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800660e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	200008a0 	.word	0x200008a0
 8006620:	20000954 	.word	0x20000954

08006624 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006628:	f3bf 8f4f 	dsb	sy
}
 800662c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800662e:	f3bf 8f6f 	isb	sy
}
 8006632:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8006634:	4b0d      	ldr	r3, [pc, #52]	; (800666c <SCB_EnableICache+0x48>)
 8006636:	2200      	movs	r2, #0
 8006638:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800663c:	f3bf 8f4f 	dsb	sy
}
 8006640:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006642:	f3bf 8f6f 	isb	sy
}
 8006646:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8006648:	4b08      	ldr	r3, [pc, #32]	; (800666c <SCB_EnableICache+0x48>)
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	4a07      	ldr	r2, [pc, #28]	; (800666c <SCB_EnableICache+0x48>)
 800664e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006652:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006654:	f3bf 8f4f 	dsb	sy
}
 8006658:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800665a:	f3bf 8f6f 	isb	sy
}
 800665e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8006660:	bf00      	nop
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	e000ed00 	.word	0xe000ed00

08006670 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8006676:	4b25      	ldr	r3, [pc, #148]	; (800670c <SCB_EnableDCache+0x9c>)
 8006678:	2200      	movs	r2, #0
 800667a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800667e:	f3bf 8f4f 	dsb	sy
}
 8006682:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8006684:	4b21      	ldr	r3, [pc, #132]	; (800670c <SCB_EnableDCache+0x9c>)
 8006686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800668a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	0b5b      	lsrs	r3, r3, #13
 8006690:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006694:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	08db      	lsrs	r3, r3, #3
 800669a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800669e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80066a8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80066ae:	4917      	ldr	r1, [pc, #92]	; (800670c <SCB_EnableDCache+0x9c>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	1e5a      	subs	r2, r3, #1
 80066ba:	60ba      	str	r2, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	bf14      	ite	ne
 80066c0:	2301      	movne	r3, #1
 80066c2:	2300      	moveq	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d000      	beq.n	80066cc <SCB_EnableDCache+0x5c>
      do {
 80066ca:	e7e9      	b.n	80066a0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	1e5a      	subs	r2, r3, #1
 80066d0:	60fa      	str	r2, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	bf14      	ite	ne
 80066d6:	2301      	movne	r3, #1
 80066d8:	2300      	moveq	r3, #0
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d000      	beq.n	80066e2 <SCB_EnableDCache+0x72>
    do {
 80066e0:	e7d9      	b.n	8006696 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80066e2:	f3bf 8f4f 	dsb	sy
}
 80066e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80066e8:	4b08      	ldr	r3, [pc, #32]	; (800670c <SCB_EnableDCache+0x9c>)
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	4a07      	ldr	r2, [pc, #28]	; (800670c <SCB_EnableDCache+0x9c>)
 80066ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80066f4:	f3bf 8f4f 	dsb	sy
}
 80066f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80066fa:	f3bf 8f6f 	isb	sy
}
 80066fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8006700:	bf00      	nop
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	e000ed00 	.word	0xe000ed00

08006710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006710:	b5b0      	push	{r4, r5, r7, lr}
 8006712:	b096      	sub	sp, #88	; 0x58
 8006714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8006716:	f7ff ff85 	bl	8006624 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800671a:	f7ff ffa9 	bl	8006670 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800671e:	f000 fee7 	bl	80074f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006722:	f7fa fba1 	bl	8000e68 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* USER CODE BEGIN 2 */

 	init_stm32f746();
 8006726:	f7fa fb89 	bl	8000e3c <init_stm32f746>

	Dprintf("Stm32f746 Initializing is complete!\n");
 800672a:	4829      	ldr	r0, [pc, #164]	; (80067d0 <main+0xc0>)
 800672c:	f7f9 ff72 	bl	8000614 <_Z7DprintfPKcz>

	/* USER CODE BEGIN 5 */
	//debug init
	Debug_Uart_Init();
 8006730:	f7f9 ffb6 	bl	80006a0 <_Z15Debug_Uart_Initv>

	Dprintf("Module Initializing\n");
 8006734:	4827      	ldr	r0, [pc, #156]	; (80067d4 <main+0xc4>)
 8006736:	f7f9 ff6d 	bl	8000614 <_Z7DprintfPKcz>
	HAL_Delay(5000);
 800673a:	f241 3088 	movw	r0, #5000	; 0x1388
 800673e:	f000 ff05 	bl	800754c <HAL_Delay>

	//sensor manager initialize
	//need some times for boot pgv100
	SensorManager::GetInstance().CommonSensorInitialize();
 8006742:	f7fe fc47 	bl	8004fd4 <_ZN13SensorManager11GetInstanceEv>
 8006746:	4603      	mov	r3, r0
 8006748:	4618      	mov	r0, r3
 800674a:	f7fe fdf1 	bl	8005330 <_ZN13SensorManager22CommonSensorInitializeEv>
	//SensorManager::GetInstance().PGV100Initialize();

	bg95test.Initialization();
 800674e:	4822      	ldr	r0, [pc, #136]	; (80067d8 <main+0xc8>)
 8006750:	f7fb ff6e 	bl	8002630 <_ZN4BG9514InitializationEv>

	Dprintf("Module Initializing is complete!\n");
 8006754:	4821      	ldr	r0, [pc, #132]	; (80067dc <main+0xcc>)
 8006756:	f7f9 ff5d 	bl	8000614 <_Z7DprintfPKcz>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitTask */
  osThreadDef(InitTask, StartInitTask, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800675a:	4b21      	ldr	r3, [pc, #132]	; (80067e0 <main+0xd0>)
 800675c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8006760:	461d      	mov	r5, r3
 8006762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006766:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800676a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InitTaskHandle = osThreadCreate(osThread(InitTask), NULL);
 800676e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006772:	2100      	movs	r1, #0
 8006774:	4618      	mov	r0, r3
 8006776:	f007 fc63 	bl	800e040 <osThreadCreate>
 800677a:	4603      	mov	r3, r0
 800677c:	4a19      	ldr	r2, [pc, #100]	; (80067e4 <main+0xd4>)
 800677e:	6013      	str	r3, [r2, #0]

  /* definition and creation of CommonSensorTask */
  osThreadDef(CommonSensorTask, StartCommonSensorTask, osPriorityLow, 0, configMINIMAL_STACK_SIZE);
 8006780:	4b19      	ldr	r3, [pc, #100]	; (80067e8 <main+0xd8>)
 8006782:	f107 0420 	add.w	r4, r7, #32
 8006786:	461d      	mov	r5, r3
 8006788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800678a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800678c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006790:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommonSensorTasHandle = osThreadCreate(osThread(CommonSensorTask), NULL);
 8006794:	f107 0320 	add.w	r3, r7, #32
 8006798:	2100      	movs	r1, #0
 800679a:	4618      	mov	r0, r3
 800679c:	f007 fc50 	bl	800e040 <osThreadCreate>
 80067a0:	4603      	mov	r3, r0
 80067a2:	4a12      	ldr	r2, [pc, #72]	; (80067ec <main+0xdc>)
 80067a4:	6013      	str	r3, [r2, #0]
  /* definition and creation of PGV100Task */
  //osThreadDef(PGV100Task, StartPGV100Task, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE);
  //PGV100TaskHandle = osThreadCreate(osThread(PGV100Task), NULL);

  /* definition and creation of ETHTask */
  osThreadDef(ETHTask, StartETHTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 80067a6:	4b12      	ldr	r3, [pc, #72]	; (80067f0 <main+0xe0>)
 80067a8:	1d3c      	adds	r4, r7, #4
 80067aa:	461d      	mov	r5, r3
 80067ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80067b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ETHTaskHandle = osThreadCreate(osThread(ETHTask), NULL);
 80067b8:	1d3b      	adds	r3, r7, #4
 80067ba:	2100      	movs	r1, #0
 80067bc:	4618      	mov	r0, r3
 80067be:	f007 fc3f 	bl	800e040 <osThreadCreate>
 80067c2:	4603      	mov	r3, r0
 80067c4:	4a0b      	ldr	r2, [pc, #44]	; (80067f4 <main+0xe4>)
 80067c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80067c8:	f007 fc23 	bl	800e012 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80067cc:	e7fe      	b.n	80067cc <main+0xbc>
 80067ce:	bf00      	nop
 80067d0:	08020930 	.word	0x08020930
 80067d4:	08020958 	.word	0x08020958
 80067d8:	20001964 	.word	0x20001964
 80067dc:	08020970 	.word	0x08020970
 80067e0:	08020994 	.word	0x08020994
 80067e4:	20001954 	.word	0x20001954
 80067e8:	080209b0 	.word	0x080209b0
 80067ec:	20001958 	.word	0x20001958
 80067f0:	080209cc 	.word	0x080209cc
 80067f4:	2000195c 	.word	0x2000195c

080067f8 <_Z13StartInitTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void const *argument)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
	Dprintf("Ethernet Initializing\n");
 8006800:	4809      	ldr	r0, [pc, #36]	; (8006828 <_Z13StartInitTaskPKv+0x30>)
 8006802:	f7f9 ff07 	bl	8000614 <_Z7DprintfPKcz>

	/* init code for LWIP */
	MX_LWIP_Init();
 8006806:	f006 fda9 	bl	800d35c <MX_LWIP_Init>

	//UdpRtosServerInit();
	UdpClientInit();
 800680a:	f7fa fb03 	bl	8000e14 <_Z13UdpClientInitv>
	TcpServerInit();
 800680e:	f7fa fa4f 	bl	8000cb0 <_Z13TcpServerInitv>

	Dprintf("Ethernet Initializing is complete!\n");
 8006812:	4806      	ldr	r0, [pc, #24]	; (800682c <_Z13StartInitTaskPKv+0x34>)
 8006814:	f7f9 fefe 	bl	8000614 <_Z7DprintfPKcz>

	/* Infinite loop */
	for(;;)
	{
		osDelay(1000);  //1000ms
 8006818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800681c:	f007 fc5c 	bl	800e0d8 <osDelay>
		//vTaskDelayUntil(&xLastWakeTime, xTime);
		vTaskDelete(NULL);
 8006820:	2000      	movs	r0, #0
 8006822:	f009 f94d 	bl	800fac0 <vTaskDelete>
		osDelay(1000);  //1000ms
 8006826:	e7f7      	b.n	8006818 <_Z13StartInitTaskPKv+0x20>
 8006828:	080209e8 	.word	0x080209e8
 800682c:	08020a00 	.word	0x08020a00

08006830 <_Z21StartCommonSensorTaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommonSensorTask */
void StartCommonSensorTask(void const *argument)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommonSensorTask */
	const TickType_t xTime = pdMS_TO_TICKS(1);
 8006838:	2301      	movs	r3, #1
 800683a:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800683c:	f009 fba6 	bl	800ff8c <xTaskGetTickCount>
 8006840:	4603      	mov	r3, r0
 8006842:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	//vTaskDelayUntil(&xLastWakeTime, xTime);
	SensorManager::GetInstance().CommonSensorDrive();
 8006844:	f7fe fbc6 	bl	8004fd4 <_ZN13SensorManager11GetInstanceEv>
 8006848:	4603      	mov	r3, r0
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe fd7e 	bl	800534c <_ZN13SensorManager17CommonSensorDriveEv>
	sensorsval = SensorManager::GetInstance().CommonSensorGetAllData();
 8006850:	f7fe fbc0 	bl	8004fd4 <_ZN13SensorManager11GetInstanceEv>
 8006854:	4603      	mov	r3, r0
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe fdf0 	bl	800543c <_ZNK13SensorManager22CommonSensorGetAllDataEv>
 800685c:	4603      	mov	r3, r0
 800685e:	461a      	mov	r2, r3
 8006860:	4b05      	ldr	r3, [pc, #20]	; (8006878 <_Z21StartCommonSensorTaskPKv+0x48>)
 8006862:	801a      	strh	r2, [r3, #0]
    osDelay(1);
 8006864:	2001      	movs	r0, #1
 8006866:	f007 fc37 	bl	800e0d8 <osDelay>
	vTaskDelayUntil(&xLastWakeTime, xTime);
 800686a:	f107 0308 	add.w	r3, r7, #8
 800686e:	2101      	movs	r1, #1
 8006870:	4618      	mov	r0, r3
 8006872:	f009 f9b7 	bl	800fbe4 <vTaskDelayUntil>
	SensorManager::GetInstance().CommonSensorDrive();
 8006876:	e7e5      	b.n	8006844 <_Z21StartCommonSensorTaskPKv+0x14>
 8006878:	20001960 	.word	0x20001960

0800687c <_Z12StartETHTaskPKv>:
/* USER CODE END Header_StartETHTask */



void StartETHTask(void const *argument)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartETHTask */
	const TickType_t xTime = pdMS_TO_TICKS(2);
 8006884:	2302      	movs	r3, #2
 8006886:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8006888:	f009 fb80 	bl	800ff8c <xTaskGetTickCount>
 800688c:	4603      	mov	r3, r0
 800688e:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  	DebugDrive();
 8006890:	f7f9 ff1c 	bl	80006cc <_Z10DebugDrivev>
	  	bg95test.Drive();
 8006894:	4804      	ldr	r0, [pc, #16]	; (80068a8 <_Z12StartETHTaskPKv+0x2c>)
 8006896:	f7fb fee2 	bl	800265e <_ZN4BG955DriveEv>
		errup = SensorManager::GetInstance().PGV100IsErrUp();
*/
		//vTaskDelayUntil(&xLastWakeTime, xTime);
		//ethernetif_input(&gnetif);
		//sys_check_timeouts();
		vTaskDelayUntil(&xLastWakeTime, xTime);
 800689a:	f107 0308 	add.w	r3, r7, #8
 800689e:	2102      	movs	r1, #2
 80068a0:	4618      	mov	r0, r3
 80068a2:	f009 f99f 	bl	800fbe4 <vTaskDelayUntil>
	  	DebugDrive();
 80068a6:	e7f3      	b.n	8006890 <_Z12StartETHTaskPKv+0x14>
 80068a8:	20001964 	.word	0x20001964

080068ac <_Z41__static_initialization_and_destruction_0ii>:
		//osDelay(1);
  }
  /* USER CODE END StartETHTask */
}
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d108      	bne.n	80068ce <_Z41__static_initialization_and_destruction_0ii+0x22>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d103      	bne.n	80068ce <_Z41__static_initialization_and_destruction_0ii+0x22>
BG95 bg95test(&hcan1);
 80068c6:	4909      	ldr	r1, [pc, #36]	; (80068ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80068c8:	4809      	ldr	r0, [pc, #36]	; (80068f0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80068ca:	f7fa fed3 	bl	8001674 <_ZN4BG95C1EP19__CAN_HandleTypeDef>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d107      	bne.n	80068e4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068da:	4293      	cmp	r3, r2
 80068dc:	d102      	bne.n	80068e4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80068de:	4804      	ldr	r0, [pc, #16]	; (80068f0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80068e0:	f7fa ff20 	bl	8001724 <_ZN4BG95D1Ev>
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	200004dc 	.word	0x200004dc
 80068f0:	20001964 	.word	0x20001964

080068f4 <_GLOBAL__sub_I_InitTaskHandle>:
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80068fc:	2001      	movs	r0, #1
 80068fe:	f7ff ffd5 	bl	80068ac <_Z41__static_initialization_and_destruction_0ii>
 8006902:	bd80      	pop	{r7, pc}

08006904 <_GLOBAL__sub_D_InitTaskHandle>:
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
 8006908:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800690c:	2000      	movs	r0, #0
 800690e:	f7ff ffcd 	bl	80068ac <_Z41__static_initialization_and_destruction_0ii>
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800691a:	4b11      	ldr	r3, [pc, #68]	; (8006960 <HAL_MspInit+0x4c>)
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	4a10      	ldr	r2, [pc, #64]	; (8006960 <HAL_MspInit+0x4c>)
 8006920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006924:	6413      	str	r3, [r2, #64]	; 0x40
 8006926:	4b0e      	ldr	r3, [pc, #56]	; (8006960 <HAL_MspInit+0x4c>)
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800692e:	607b      	str	r3, [r7, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006932:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <HAL_MspInit+0x4c>)
 8006934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006936:	4a0a      	ldr	r2, [pc, #40]	; (8006960 <HAL_MspInit+0x4c>)
 8006938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800693c:	6453      	str	r3, [r2, #68]	; 0x44
 800693e:	4b08      	ldr	r3, [pc, #32]	; (8006960 <HAL_MspInit+0x4c>)
 8006940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800694a:	2200      	movs	r2, #0
 800694c:	210f      	movs	r1, #15
 800694e:	f06f 0001 	mvn.w	r0, #1
 8006952:	f001 fdf7 	bl	8008544 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006956:	bf00      	nop
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	40023800 	.word	0x40023800

08006964 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800696c:	f107 0314 	add.w	r3, r7, #20
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	605a      	str	r2, [r3, #4]
 8006976:	609a      	str	r2, [r3, #8]
 8006978:	60da      	str	r2, [r3, #12]
 800697a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <HAL_CAN_MspInit+0x8c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d130      	bne.n	80069e8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006986:	4b1b      	ldr	r3, [pc, #108]	; (80069f4 <HAL_CAN_MspInit+0x90>)
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	4a1a      	ldr	r2, [pc, #104]	; (80069f4 <HAL_CAN_MspInit+0x90>)
 800698c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006990:	6413      	str	r3, [r2, #64]	; 0x40
 8006992:	4b18      	ldr	r3, [pc, #96]	; (80069f4 <HAL_CAN_MspInit+0x90>)
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699a:	613b      	str	r3, [r7, #16]
 800699c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800699e:	4b15      	ldr	r3, [pc, #84]	; (80069f4 <HAL_CAN_MspInit+0x90>)
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	4a14      	ldr	r2, [pc, #80]	; (80069f4 <HAL_CAN_MspInit+0x90>)
 80069a4:	f043 0301 	orr.w	r3, r3, #1
 80069a8:	6313      	str	r3, [r2, #48]	; 0x30
 80069aa:	4b12      	ldr	r3, [pc, #72]	; (80069f4 <HAL_CAN_MspInit+0x90>)
 80069ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80069b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80069ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069bc:	2302      	movs	r3, #2
 80069be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069c4:	2303      	movs	r3, #3
 80069c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80069c8:	2309      	movs	r3, #9
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069cc:	f107 0314 	add.w	r3, r7, #20
 80069d0:	4619      	mov	r1, r3
 80069d2:	4809      	ldr	r0, [pc, #36]	; (80069f8 <HAL_CAN_MspInit+0x94>)
 80069d4:	f003 f92e 	bl	8009c34 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 80069d8:	2200      	movs	r2, #0
 80069da:	2108      	movs	r1, #8
 80069dc:	2014      	movs	r0, #20
 80069de:	f001 fdb1 	bl	8008544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80069e2:	2014      	movs	r0, #20
 80069e4:	f001 fdca 	bl	800857c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80069e8:	bf00      	nop
 80069ea:	3728      	adds	r7, #40	; 0x28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40006400 	.word	0x40006400
 80069f4:	40023800 	.word	0x40023800
 80069f8:	40020000 	.word	0x40020000

080069fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a0d      	ldr	r2, [pc, #52]	; (8006a40 <HAL_TIM_Base_MspInit+0x44>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d113      	bne.n	8006a36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <HAL_TIM_Base_MspInit+0x48>)
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	4a0c      	ldr	r2, [pc, #48]	; (8006a44 <HAL_TIM_Base_MspInit+0x48>)
 8006a14:	f043 0320 	orr.w	r3, r3, #32
 8006a18:	6413      	str	r3, [r2, #64]	; 0x40
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <HAL_TIM_Base_MspInit+0x48>)
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 7, 0);
 8006a26:	2200      	movs	r2, #0
 8006a28:	2107      	movs	r1, #7
 8006a2a:	2037      	movs	r0, #55	; 0x37
 8006a2c:	f001 fd8a 	bl	8008544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006a30:	2037      	movs	r0, #55	; 0x37
 8006a32:	f001 fda3 	bl	800857c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40001400 	.word	0x40001400
 8006a44:	40023800 	.word	0x40023800

08006a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b0b4      	sub	sp, #208	; 0xd0
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a50:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	605a      	str	r2, [r3, #4]
 8006a5a:	609a      	str	r2, [r3, #8]
 8006a5c:	60da      	str	r2, [r3, #12]
 8006a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006a60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a64:	2284      	movs	r2, #132	; 0x84
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f018 fcb1 	bl	801f3d0 <memset>
  if(huart->Instance==UART4)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4aa6      	ldr	r2, [pc, #664]	; (8006d0c <HAL_UART_MspInit+0x2c4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d146      	bne.n	8006b06 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a7c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f003 ffbd 	bl	800aa08 <HAL_RCCEx_PeriphCLKConfig>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006a94:	f7fa fd80 	bl	8001598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006a98:	4b9d      	ldr	r3, [pc, #628]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	4a9c      	ldr	r2, [pc, #624]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006a9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8006aa4:	4b9a      	ldr	r3, [pc, #616]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34
 8006aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ab0:	4b97      	ldr	r3, [pc, #604]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab4:	4a96      	ldr	r2, [pc, #600]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006ab6:	f043 0304 	orr.w	r3, r3, #4
 8006aba:	6313      	str	r3, [r2, #48]	; 0x30
 8006abc:	4b94      	ldr	r3, [pc, #592]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006ac8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006acc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006adc:	2303      	movs	r3, #3
 8006ade:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006ae2:	2308      	movs	r3, #8
 8006ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ae8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006aec:	4619      	mov	r1, r3
 8006aee:	4889      	ldr	r0, [pc, #548]	; (8006d14 <HAL_UART_MspInit+0x2cc>)
 8006af0:	f003 f8a0 	bl	8009c34 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 8006af4:	2200      	movs	r2, #0
 8006af6:	2108      	movs	r1, #8
 8006af8:	2034      	movs	r0, #52	; 0x34
 8006afa:	f001 fd23 	bl	8008544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006afe:	2034      	movs	r0, #52	; 0x34
 8006b00:	f001 fd3c 	bl	800857c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006b04:	e15e      	b.n	8006dc4 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==UART5)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a83      	ldr	r2, [pc, #524]	; (8006d18 <HAL_UART_MspInit+0x2d0>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d167      	bne.n	8006be0 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8006b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b14:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8006b16:	2300      	movs	r3, #0
 8006b18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b20:	4618      	mov	r0, r3
 8006b22:	f003 ff71 	bl	800aa08 <HAL_RCCEx_PeriphCLKConfig>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8006b2c:	f7fa fd34 	bl	8001598 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006b30:	4b77      	ldr	r3, [pc, #476]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	4a76      	ldr	r2, [pc, #472]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8006b3c:	4b74      	ldr	r3, [pc, #464]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b48:	4b71      	ldr	r3, [pc, #452]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4c:	4a70      	ldr	r2, [pc, #448]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006b4e:	f043 0304 	orr.w	r3, r3, #4
 8006b52:	6313      	str	r3, [r2, #48]	; 0x30
 8006b54:	4b6e      	ldr	r3, [pc, #440]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b60:	4b6b      	ldr	r3, [pc, #428]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b64:	4a6a      	ldr	r2, [pc, #424]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006b66:	f043 0308 	orr.w	r3, r3, #8
 8006b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8006b6c:	4b68      	ldr	r3, [pc, #416]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b80:	2302      	movs	r3, #2
 8006b82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b86:	2300      	movs	r3, #0
 8006b88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006b92:	2308      	movs	r3, #8
 8006b94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b98:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	485d      	ldr	r0, [pc, #372]	; (8006d14 <HAL_UART_MspInit+0x2cc>)
 8006ba0:	f003 f848 	bl	8009c34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006baa:	2302      	movs	r3, #2
 8006bac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006bbc:	2308      	movs	r3, #8
 8006bbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bc2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4854      	ldr	r0, [pc, #336]	; (8006d1c <HAL_UART_MspInit+0x2d4>)
 8006bca:	f003 f833 	bl	8009c34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2105      	movs	r1, #5
 8006bd2:	2035      	movs	r0, #53	; 0x35
 8006bd4:	f001 fcb6 	bl	8008544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006bd8:	2035      	movs	r0, #53	; 0x35
 8006bda:	f001 fccf 	bl	800857c <HAL_NVIC_EnableIRQ>
}
 8006bde:	e0f1      	b.n	8006dc4 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART1)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a4e      	ldr	r2, [pc, #312]	; (8006d20 <HAL_UART_MspInit+0x2d8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d144      	bne.n	8006c74 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006bea:	2340      	movs	r3, #64	; 0x40
 8006bec:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006bf2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f003 ff06 	bl	800aa08 <HAL_RCCEx_PeriphCLKConfig>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <HAL_UART_MspInit+0x1be>
      Error_Handler();
 8006c02:	f7fa fcc9 	bl	8001598 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006c06:	4b42      	ldr	r3, [pc, #264]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0a:	4a41      	ldr	r2, [pc, #260]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006c0c:	f043 0310 	orr.w	r3, r3, #16
 8006c10:	6453      	str	r3, [r2, #68]	; 0x44
 8006c12:	4b3f      	ldr	r3, [pc, #252]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c16:	f003 0310 	and.w	r3, r3, #16
 8006c1a:	623b      	str	r3, [r7, #32]
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c1e:	4b3c      	ldr	r3, [pc, #240]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	4a3b      	ldr	r2, [pc, #236]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006c24:	f043 0301 	orr.w	r3, r3, #1
 8006c28:	6313      	str	r3, [r2, #48]	; 0x30
 8006c2a:	4b39      	ldr	r3, [pc, #228]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	61fb      	str	r3, [r7, #28]
 8006c34:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006c36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c3e:	2302      	movs	r3, #2
 8006c40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c44:	2300      	movs	r3, #0
 8006c46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c50:	2307      	movs	r3, #7
 8006c52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c56:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4831      	ldr	r0, [pc, #196]	; (8006d24 <HAL_UART_MspInit+0x2dc>)
 8006c5e:	f002 ffe9 	bl	8009c34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 8006c62:	2200      	movs	r2, #0
 8006c64:	210e      	movs	r1, #14
 8006c66:	2025      	movs	r0, #37	; 0x25
 8006c68:	f001 fc6c 	bl	8008544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006c6c:	2025      	movs	r0, #37	; 0x25
 8006c6e:	f001 fc85 	bl	800857c <HAL_NVIC_EnableIRQ>
}
 8006c72:	e0a7      	b.n	8006dc4 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART3)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a2b      	ldr	r2, [pc, #172]	; (8006d28 <HAL_UART_MspInit+0x2e0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d158      	bne.n	8006d30 <HAL_UART_MspInit+0x2e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c82:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006c84:	2300      	movs	r3, #0
 8006c86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f003 feba 	bl	800aa08 <HAL_RCCEx_PeriphCLKConfig>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <HAL_UART_MspInit+0x256>
      Error_Handler();
 8006c9a:	f7fa fc7d 	bl	8001598 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006c9e:	4b1c      	ldr	r3, [pc, #112]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	4a1b      	ldr	r2, [pc, #108]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8006caa:	4b19      	ldr	r3, [pc, #100]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cb2:	61bb      	str	r3, [r7, #24]
 8006cb4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cb6:	4b16      	ldr	r3, [pc, #88]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cba:	4a15      	ldr	r2, [pc, #84]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006cbc:	f043 0302 	orr.w	r3, r3, #2
 8006cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8006cc2:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <HAL_UART_MspInit+0x2c8>)
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006cce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006cd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006ce8:	2307      	movs	r3, #7
 8006cea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	480d      	ldr	r0, [pc, #52]	; (8006d2c <HAL_UART_MspInit+0x2e4>)
 8006cf6:	f002 ff9d 	bl	8009c34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2108      	movs	r1, #8
 8006cfe:	2027      	movs	r0, #39	; 0x27
 8006d00:	f001 fc20 	bl	8008544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006d04:	2027      	movs	r0, #39	; 0x27
 8006d06:	f001 fc39 	bl	800857c <HAL_NVIC_EnableIRQ>
}
 8006d0a:	e05b      	b.n	8006dc4 <HAL_UART_MspInit+0x37c>
 8006d0c:	40004c00 	.word	0x40004c00
 8006d10:	40023800 	.word	0x40023800
 8006d14:	40020800 	.word	0x40020800
 8006d18:	40005000 	.word	0x40005000
 8006d1c:	40020c00 	.word	0x40020c00
 8006d20:	40011000 	.word	0x40011000
 8006d24:	40020000 	.word	0x40020000
 8006d28:	40004800 	.word	0x40004800
 8006d2c:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a25      	ldr	r2, [pc, #148]	; (8006dcc <HAL_UART_MspInit+0x384>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d144      	bne.n	8006dc4 <HAL_UART_MspInit+0x37c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8006d3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d3e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8006d40:	2300      	movs	r3, #0
 8006d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f003 fe5c 	bl	800aa08 <HAL_RCCEx_PeriphCLKConfig>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <HAL_UART_MspInit+0x312>
      Error_Handler();
 8006d56:	f7fa fc1f 	bl	8001598 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006d5a:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <HAL_UART_MspInit+0x388>)
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5e:	4a1c      	ldr	r2, [pc, #112]	; (8006dd0 <HAL_UART_MspInit+0x388>)
 8006d60:	f043 0320 	orr.w	r3, r3, #32
 8006d64:	6453      	str	r3, [r2, #68]	; 0x44
 8006d66:	4b1a      	ldr	r3, [pc, #104]	; (8006dd0 <HAL_UART_MspInit+0x388>)
 8006d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d72:	4b17      	ldr	r3, [pc, #92]	; (8006dd0 <HAL_UART_MspInit+0x388>)
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	4a16      	ldr	r2, [pc, #88]	; (8006dd0 <HAL_UART_MspInit+0x388>)
 8006d78:	f043 0304 	orr.w	r3, r3, #4
 8006d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d7e:	4b14      	ldr	r3, [pc, #80]	; (8006dd0 <HAL_UART_MspInit+0x388>)
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006d8a:	23c0      	movs	r3, #192	; 0xc0
 8006d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d90:	2302      	movs	r3, #2
 8006d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006da2:	2308      	movs	r3, #8
 8006da4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006da8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006dac:	4619      	mov	r1, r3
 8006dae:	4809      	ldr	r0, [pc, #36]	; (8006dd4 <HAL_UART_MspInit+0x38c>)
 8006db0:	f002 ff40 	bl	8009c34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 8, 0);
 8006db4:	2200      	movs	r2, #0
 8006db6:	2108      	movs	r1, #8
 8006db8:	2047      	movs	r0, #71	; 0x47
 8006dba:	f001 fbc3 	bl	8008544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006dbe:	2047      	movs	r0, #71	; 0x47
 8006dc0:	f001 fbdc 	bl	800857c <HAL_NVIC_EnableIRQ>
}
 8006dc4:	bf00      	nop
 8006dc6:	37d0      	adds	r7, #208	; 0xd0
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	40011400 	.word	0x40011400
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	40020800 	.word	0x40020800

08006dd8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006dde:	1d3b      	adds	r3, r7, #4
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	605a      	str	r2, [r3, #4]
 8006de6:	609a      	str	r2, [r3, #8]
 8006de8:	60da      	str	r2, [r3, #12]
 8006dea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8006dec:	4b23      	ldr	r3, [pc, #140]	; (8006e7c <HAL_FMC_MspInit+0xa4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d13e      	bne.n	8006e72 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 8006df4:	4b21      	ldr	r3, [pc, #132]	; (8006e7c <HAL_FMC_MspInit+0xa4>)
 8006df6:	2201      	movs	r2, #1
 8006df8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006dfa:	4b21      	ldr	r3, [pc, #132]	; (8006e80 <HAL_FMC_MspInit+0xa8>)
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	4a20      	ldr	r2, [pc, #128]	; (8006e80 <HAL_FMC_MspInit+0xa8>)
 8006e00:	f043 0301 	orr.w	r3, r3, #1
 8006e04:	6393      	str	r3, [r2, #56]	; 0x38
 8006e06:	4b1e      	ldr	r3, [pc, #120]	; (8006e80 <HAL_FMC_MspInit+0xa8>)
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8006e12:	2307      	movs	r3, #7
 8006e14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e16:	2302      	movs	r3, #2
 8006e18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e22:	230c      	movs	r3, #12
 8006e24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006e26:	1d3b      	adds	r3, r7, #4
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4816      	ldr	r0, [pc, #88]	; (8006e84 <HAL_FMC_MspInit+0xac>)
 8006e2c:	f002 ff02 	bl	8009c34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8006e30:	f64f 7380 	movw	r3, #65408	; 0xff80
 8006e34:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e36:	2302      	movs	r3, #2
 8006e38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e42:	230c      	movs	r3, #12
 8006e44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e46:	1d3b      	adds	r3, r7, #4
 8006e48:	4619      	mov	r1, r3
 8006e4a:	480f      	ldr	r0, [pc, #60]	; (8006e88 <HAL_FMC_MspInit+0xb0>)
 8006e4c:	f002 fef2 	bl	8009c34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8006e50:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8006e54:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e56:	2302      	movs	r3, #2
 8006e58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e62:	230c      	movs	r3, #12
 8006e64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e66:	1d3b      	adds	r3, r7, #4
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4808      	ldr	r0, [pc, #32]	; (8006e8c <HAL_FMC_MspInit+0xb4>)
 8006e6c:	f002 fee2 	bl	8009c34 <HAL_GPIO_Init>
 8006e70:	e000      	b.n	8006e74 <HAL_FMC_MspInit+0x9c>
    return;
 8006e72:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20001a10 	.word	0x20001a10
 8006e80:	40023800 	.word	0x40023800
 8006e84:	40021400 	.word	0x40021400
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	40020c00 	.word	0x40020c00

08006e90 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006e98:	f7ff ff9e 	bl	8006dd8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08e      	sub	sp, #56	; 0x38
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006eb4:	4b33      	ldr	r3, [pc, #204]	; (8006f84 <HAL_InitTick+0xe0>)
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	4a32      	ldr	r2, [pc, #200]	; (8006f84 <HAL_InitTick+0xe0>)
 8006eba:	f043 0310 	orr.w	r3, r3, #16
 8006ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8006ec0:	4b30      	ldr	r3, [pc, #192]	; (8006f84 <HAL_InitTick+0xe0>)
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006ecc:	f107 0210 	add.w	r2, r7, #16
 8006ed0:	f107 0314 	add.w	r3, r7, #20
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f003 fd64 	bl	800a9a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d103      	bne.n	8006eee <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006ee6:	f003 fd35 	bl	800a954 <HAL_RCC_GetPCLK1Freq>
 8006eea:	6378      	str	r0, [r7, #52]	; 0x34
 8006eec:	e004      	b.n	8006ef8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006eee:	f003 fd31 	bl	800a954 <HAL_RCC_GetPCLK1Freq>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	4a23      	ldr	r2, [pc, #140]	; (8006f88 <HAL_InitTick+0xe4>)
 8006efc:	fba2 2303 	umull	r2, r3, r2, r3
 8006f00:	0c9b      	lsrs	r3, r3, #18
 8006f02:	3b01      	subs	r3, #1
 8006f04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006f06:	4b21      	ldr	r3, [pc, #132]	; (8006f8c <HAL_InitTick+0xe8>)
 8006f08:	4a21      	ldr	r2, [pc, #132]	; (8006f90 <HAL_InitTick+0xec>)
 8006f0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006f0c:	4b1f      	ldr	r3, [pc, #124]	; (8006f8c <HAL_InitTick+0xe8>)
 8006f0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006f12:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006f14:	4a1d      	ldr	r2, [pc, #116]	; (8006f8c <HAL_InitTick+0xe8>)
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006f1a:	4b1c      	ldr	r3, [pc, #112]	; (8006f8c <HAL_InitTick+0xe8>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f20:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <HAL_InitTick+0xe8>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f26:	4b19      	ldr	r3, [pc, #100]	; (8006f8c <HAL_InitTick+0xe8>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006f2c:	4817      	ldr	r0, [pc, #92]	; (8006f8c <HAL_InitTick+0xe8>)
 8006f2e:	f004 f9a3 	bl	800b278 <HAL_TIM_Base_Init>
 8006f32:	4603      	mov	r3, r0
 8006f34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8006f38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d11b      	bne.n	8006f78 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006f40:	4812      	ldr	r0, [pc, #72]	; (8006f8c <HAL_InitTick+0xe8>)
 8006f42:	f004 f9f1 	bl	800b328 <HAL_TIM_Base_Start_IT>
 8006f46:	4603      	mov	r3, r0
 8006f48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8006f4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d111      	bne.n	8006f78 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006f54:	2036      	movs	r0, #54	; 0x36
 8006f56:	f001 fb11 	bl	800857c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b0f      	cmp	r3, #15
 8006f5e:	d808      	bhi.n	8006f72 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8006f60:	2200      	movs	r2, #0
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	2036      	movs	r0, #54	; 0x36
 8006f66:	f001 faed 	bl	8008544 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006f6a:	4a0a      	ldr	r2, [pc, #40]	; (8006f94 <HAL_InitTick+0xf0>)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	e002      	b.n	8006f78 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006f78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3738      	adds	r7, #56	; 0x38
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40023800 	.word	0x40023800
 8006f88:	431bde83 	.word	0x431bde83
 8006f8c:	20001a14 	.word	0x20001a14
 8006f90:	40001000 	.word	0x40001000
 8006f94:	20000008 	.word	0x20000008

08006f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006f9c:	e7fe      	b.n	8006f9c <NMI_Handler+0x4>
	...

08006fa0 <HardFault_Handler>:
int debug =0;
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  if(debug == 1) break;
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <HardFault_Handler+0x1c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d000      	beq.n	8006fae <HardFault_Handler+0xe>
 8006fac:	e7fa      	b.n	8006fa4 <HardFault_Handler+0x4>
 8006fae:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	20001a60 	.word	0x20001a60

08006fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006fc4:	e7fe      	b.n	8006fc4 <MemManage_Handler+0x4>

08006fc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006fca:	e7fe      	b.n	8006fca <BusFault_Handler+0x4>

08006fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006fd0:	e7fe      	b.n	8006fd0 <UsageFault_Handler+0x4>

08006fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006fd6:	bf00      	nop
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006fe4:	4802      	ldr	r0, [pc, #8]	; (8006ff0 <CAN1_RX0_IRQHandler+0x10>)
 8006fe6:	f000 ffa1 	bl	8007f2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006fea:	bf00      	nop
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	200004dc 	.word	0x200004dc

08006ff4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006ff8:	4802      	ldr	r0, [pc, #8]	; (8007004 <USART1_IRQHandler+0x10>)
 8006ffa:	f004 fe15 	bl	800bc28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006ffe:	bf00      	nop
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000688 	.word	0x20000688

08007008 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800700c:	4802      	ldr	r0, [pc, #8]	; (8007018 <USART3_IRQHandler+0x10>)
 800700e:	f004 fe0b 	bl	800bc28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007012:	bf00      	nop
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20000710 	.word	0x20000710

0800701c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007020:	4802      	ldr	r0, [pc, #8]	; (800702c <UART4_IRQHandler+0x10>)
 8007022:	f004 fe01 	bl	800bc28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8007026:	bf00      	nop
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20000578 	.word	0x20000578

08007030 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8007034:	4802      	ldr	r0, [pc, #8]	; (8007040 <UART5_IRQHandler+0x10>)
 8007036:	f004 fdf7 	bl	800bc28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800703a:	bf00      	nop
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000600 	.word	0x20000600

08007044 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007048:	4802      	ldr	r0, [pc, #8]	; (8007054 <TIM6_DAC_IRQHandler+0x10>)
 800704a:	f004 f9e5 	bl	800b418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800704e:	bf00      	nop
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20001a14 	.word	0x20001a14

08007058 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800705c:	4802      	ldr	r0, [pc, #8]	; (8007068 <TIM7_IRQHandler+0x10>)
 800705e:	f004 f9db 	bl	800b418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007062:	bf00      	nop
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	2000052c 	.word	0x2000052c

0800706c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8007070:	4802      	ldr	r0, [pc, #8]	; (800707c <ETH_IRQHandler+0x10>)
 8007072:	f001 ff0b 	bl	8008e8c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8007076:	bf00      	nop
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20006448 	.word	0x20006448

08007080 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007084:	4802      	ldr	r0, [pc, #8]	; (8007090 <USART6_IRQHandler+0x10>)
 8007086:	f004 fdcf 	bl	800bc28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800708a:	bf00      	nop
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000798 	.word	0x20000798

08007094 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0
	return 1;
 8007098:	2301      	movs	r3, #1
}
 800709a:	4618      	mov	r0, r3
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <_kill>:

int _kill(int pid, int sig)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <_kill+0x20>)
 80070b0:	2216      	movs	r2, #22
 80070b2:	601a      	str	r2, [r3, #0]
	return -1;
 80070b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	2000c158 	.word	0x2000c158

080070c8 <_exit>:

void _exit (int status)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80070d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff ffe5 	bl	80070a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80070da:	e7fe      	b.n	80070da <_exit+0x12>

080070dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070e8:	2300      	movs	r3, #0
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	e00a      	b.n	8007104 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80070ee:	f3af 8000 	nop.w
 80070f2:	4601      	mov	r1, r0
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	60ba      	str	r2, [r7, #8]
 80070fa:	b2ca      	uxtb	r2, r1
 80070fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	3301      	adds	r3, #1
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	429a      	cmp	r2, r3
 800710a:	dbf0      	blt.n	80070ee <_read+0x12>
	}

return len;
 800710c:	687b      	ldr	r3, [r7, #4]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b086      	sub	sp, #24
 800711a:	af00      	add	r7, sp, #0
 800711c:	60f8      	str	r0, [r7, #12]
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	e009      	b.n	800713c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	60ba      	str	r2, [r7, #8]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	4618      	mov	r0, r3
 8007132:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	3301      	adds	r3, #1
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	dbf1      	blt.n	8007128 <_write+0x12>
	}
	return len;
 8007144:	687b      	ldr	r3, [r7, #4]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <_close>:

int _close(int file)
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
	return -1;
 8007156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800715a:	4618      	mov	r0, r3
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007176:	605a      	str	r2, [r3, #4]
	return 0;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <_isatty>:

int _isatty(int file)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
	return 1;
 800718e:	2301      	movs	r3, #1
}
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
	return 0;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
	...

080071b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80071bc:	4b06      	ldr	r3, [pc, #24]	; (80071d8 <SystemInit+0x20>)
 80071be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c2:	4a05      	ldr	r2, [pc, #20]	; (80071d8 <SystemInit+0x20>)
 80071c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80071cc:	bf00      	nop
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	e000ed00 	.word	0xe000ed00

080071dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80071dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007214 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80071e0:	480d      	ldr	r0, [pc, #52]	; (8007218 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80071e2:	490e      	ldr	r1, [pc, #56]	; (800721c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80071e4:	4a0e      	ldr	r2, [pc, #56]	; (8007220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80071e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80071e8:	e002      	b.n	80071f0 <LoopCopyDataInit>

080071ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80071ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80071ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80071ee:	3304      	adds	r3, #4

080071f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80071f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80071f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80071f4:	d3f9      	bcc.n	80071ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80071f6:	4a0b      	ldr	r2, [pc, #44]	; (8007224 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80071f8:	4c0b      	ldr	r4, [pc, #44]	; (8007228 <LoopFillZerobss+0x26>)
  movs r3, #0
 80071fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80071fc:	e001      	b.n	8007202 <LoopFillZerobss>

080071fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80071fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007200:	3204      	adds	r2, #4

08007202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007204:	d3fb      	bcc.n	80071fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007206:	f7ff ffd7 	bl	80071b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800720a:	f018 f871 	bl	801f2f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800720e:	f7ff fa7f 	bl	8006710 <main>
  bx  lr    
 8007212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007214:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8007218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800721c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8007220:	0802425c 	.word	0x0802425c
  ldr r2, =_sbss
 8007224:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8007228:	2000c1ec 	.word	0x2000c1ec

0800722c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800722c:	e7fe      	b.n	800722c <ADC_IRQHandler>

0800722e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00b      	beq.n	8007256 <LAN8742_RegisterBusIO+0x28>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d007      	beq.n	8007256 <LAN8742_RegisterBusIO+0x28>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <LAN8742_RegisterBusIO+0x28>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8007256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800725a:	e014      	b.n	8007286 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	691a      	ldr	r2, [r3, #16]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8007292:	b580      	push	{r7, lr}
 8007294:	b086      	sub	sp, #24
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	2300      	movs	r3, #0
 80072a0:	60bb      	str	r3, [r7, #8]
 80072a2:	2300      	movs	r3, #0
 80072a4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d17c      	bne.n	80073ac <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2220      	movs	r2, #32
 80072c4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80072c6:	2300      	movs	r3, #0
 80072c8:	617b      	str	r3, [r7, #20]
 80072ca:	e01c      	b.n	8007306 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	f107 0208 	add.w	r2, r7, #8
 80072d4:	2112      	movs	r1, #18
 80072d6:	6978      	ldr	r0, [r7, #20]
 80072d8:	4798      	blx	r3
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	da03      	bge.n	80072e8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80072e0:	f06f 0304 	mvn.w	r3, #4
 80072e4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80072e6:	e00b      	b.n	8007300 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d105      	bne.n	8007300 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	613b      	str	r3, [r7, #16]
         break;
 80072fe:	e005      	b.n	800730c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	3301      	adds	r3, #1
 8007304:	617b      	str	r3, [r7, #20]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b1f      	cmp	r3, #31
 800730a:	d9df      	bls.n	80072cc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b1f      	cmp	r3, #31
 8007312:	d902      	bls.n	800731a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8007314:	f06f 0302 	mvn.w	r3, #2
 8007318:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d145      	bne.n	80073ac <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6810      	ldr	r0, [r2, #0]
 8007328:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800732c:	2100      	movs	r1, #0
 800732e:	4798      	blx	r3
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	db37      	blt.n	80073a6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	6810      	ldr	r0, [r2, #0]
 800733e:	f107 0208 	add.w	r2, r7, #8
 8007342:	2100      	movs	r1, #0
 8007344:	4798      	blx	r3
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	db28      	blt.n	800739e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	4798      	blx	r3
 8007352:	4603      	mov	r3, r0
 8007354:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8007356:	e01c      	b.n	8007392 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	4798      	blx	r3
 800735e:	4603      	mov	r3, r0
 8007360:	461a      	mov	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800736a:	d80e      	bhi.n	800738a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6810      	ldr	r0, [r2, #0]
 8007374:	f107 0208 	add.w	r2, r7, #8
 8007378:	2100      	movs	r1, #0
 800737a:	4798      	blx	r3
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	da07      	bge.n	8007392 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8007382:	f06f 0304 	mvn.w	r3, #4
 8007386:	613b      	str	r3, [r7, #16]
                 break;
 8007388:	e010      	b.n	80073ac <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800738a:	f06f 0301 	mvn.w	r3, #1
 800738e:	613b      	str	r3, [r7, #16]
               break;
 8007390:	e00c      	b.n	80073ac <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1dd      	bne.n	8007358 <LAN8742_Init+0xc6>
 800739c:	e006      	b.n	80073ac <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800739e:	f06f 0304 	mvn.w	r3, #4
 80073a2:	613b      	str	r3, [r7, #16]
 80073a4:	e002      	b.n	80073ac <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80073a6:	f06f 0303 	mvn.w	r3, #3
 80073aa:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d112      	bne.n	80073d8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	4798      	blx	r3
 80073b8:	4603      	mov	r3, r0
 80073ba:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80073bc:	bf00      	nop
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	4798      	blx	r3
 80073c4:	4603      	mov	r3, r0
 80073c6:	461a      	mov	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80073d0:	d9f5      	bls.n	80073be <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80073d8:	693b      	ldr	r3, [r7, #16]
 }
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	6810      	ldr	r0, [r2, #0]
 80073f6:	f107 020c 	add.w	r2, r7, #12
 80073fa:	2101      	movs	r1, #1
 80073fc:	4798      	blx	r3
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	da02      	bge.n	800740a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8007404:	f06f 0304 	mvn.w	r3, #4
 8007408:	e06e      	b.n	80074e8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6810      	ldr	r0, [r2, #0]
 8007412:	f107 020c 	add.w	r2, r7, #12
 8007416:	2101      	movs	r1, #1
 8007418:	4798      	blx	r3
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	da02      	bge.n	8007426 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8007420:	f06f 0304 	mvn.w	r3, #4
 8007424:	e060      	b.n	80074e8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8007430:	2301      	movs	r3, #1
 8007432:	e059      	b.n	80074e8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	6810      	ldr	r0, [r2, #0]
 800743c:	f107 020c 	add.w	r2, r7, #12
 8007440:	2100      	movs	r1, #0
 8007442:	4798      	blx	r3
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	da02      	bge.n	8007450 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800744a:	f06f 0304 	mvn.w	r3, #4
 800744e:	e04b      	b.n	80074e8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d11b      	bne.n	8007492 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d006      	beq.n	8007472 <LAN8742_GetLinkState+0x90>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800746e:	2302      	movs	r3, #2
 8007470:	e03a      	b.n	80074e8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800747c:	2303      	movs	r3, #3
 800747e:	e033      	b.n	80074e8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800748a:	2304      	movs	r3, #4
 800748c:	e02c      	b.n	80074e8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800748e:	2305      	movs	r3, #5
 8007490:	e02a      	b.n	80074e8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6810      	ldr	r0, [r2, #0]
 800749a:	f107 020c 	add.w	r2, r7, #12
 800749e:	211f      	movs	r1, #31
 80074a0:	4798      	blx	r3
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da02      	bge.n	80074ae <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80074a8:	f06f 0304 	mvn.w	r3, #4
 80074ac:	e01c      	b.n	80074e8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80074b8:	2306      	movs	r3, #6
 80074ba:	e015      	b.n	80074e8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f003 031c 	and.w	r3, r3, #28
 80074c2:	2b18      	cmp	r3, #24
 80074c4:	d101      	bne.n	80074ca <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80074c6:	2302      	movs	r3, #2
 80074c8:	e00e      	b.n	80074e8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f003 031c 	and.w	r3, r3, #28
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d101      	bne.n	80074d8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e007      	b.n	80074e8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f003 031c 	and.w	r3, r3, #28
 80074de:	2b14      	cmp	r3, #20
 80074e0:	d101      	bne.n	80074e6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80074e2:	2304      	movs	r3, #4
 80074e4:	e000      	b.n	80074e8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80074e6:	2305      	movs	r3, #5
    }				
  }
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074f4:	2003      	movs	r0, #3
 80074f6:	f001 f81a 	bl	800852e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80074fa:	200f      	movs	r0, #15
 80074fc:	f7ff fcd2 	bl	8006ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007500:	f7ff fa08 	bl	8006914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007510:	4b06      	ldr	r3, [pc, #24]	; (800752c <HAL_IncTick+0x20>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	4b06      	ldr	r3, [pc, #24]	; (8007530 <HAL_IncTick+0x24>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4413      	add	r3, r2
 800751c:	4a04      	ldr	r2, [pc, #16]	; (8007530 <HAL_IncTick+0x24>)
 800751e:	6013      	str	r3, [r2, #0]
}
 8007520:	bf00      	nop
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	2000000c 	.word	0x2000000c
 8007530:	20001a64 	.word	0x20001a64

08007534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
  return uwTick;
 8007538:	4b03      	ldr	r3, [pc, #12]	; (8007548 <HAL_GetTick+0x14>)
 800753a:	681b      	ldr	r3, [r3, #0]
}
 800753c:	4618      	mov	r0, r3
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	20001a64 	.word	0x20001a64

0800754c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007554:	f7ff ffee 	bl	8007534 <HAL_GetTick>
 8007558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007564:	d005      	beq.n	8007572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007566:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <HAL_Delay+0x44>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4413      	add	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007572:	bf00      	nop
 8007574:	f7ff ffde 	bl	8007534 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	429a      	cmp	r2, r3
 8007582:	d8f7      	bhi.n	8007574 <HAL_Delay+0x28>
  {
  }
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	2000000c 	.word	0x2000000c

08007594 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e0ed      	b.n	8007782 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7ff f9d6 	bl	8006964 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f042 0201 	orr.w	r2, r2, #1
 80075c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075c8:	f7ff ffb4 	bl	8007534 <HAL_GetTick>
 80075cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80075ce:	e012      	b.n	80075f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80075d0:	f7ff ffb0 	bl	8007534 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b0a      	cmp	r3, #10
 80075dc:	d90b      	bls.n	80075f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2205      	movs	r2, #5
 80075ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e0c5      	b.n	8007782 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0e5      	beq.n	80075d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0202 	bic.w	r2, r2, #2
 8007612:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007614:	f7ff ff8e 	bl	8007534 <HAL_GetTick>
 8007618:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800761a:	e012      	b.n	8007642 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800761c:	f7ff ff8a 	bl	8007534 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b0a      	cmp	r3, #10
 8007628:	d90b      	bls.n	8007642 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2205      	movs	r2, #5
 800763a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e09f      	b.n	8007782 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e5      	bne.n	800761c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	7e1b      	ldrb	r3, [r3, #24]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d108      	bne.n	800766a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	e007      	b.n	800767a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007678:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	7e5b      	ldrb	r3, [r3, #25]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d108      	bne.n	8007694 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	e007      	b.n	80076a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	7e9b      	ldrb	r3, [r3, #26]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d108      	bne.n	80076be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0220 	orr.w	r2, r2, #32
 80076ba:	601a      	str	r2, [r3, #0]
 80076bc:	e007      	b.n	80076ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0220 	bic.w	r2, r2, #32
 80076cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	7edb      	ldrb	r3, [r3, #27]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d108      	bne.n	80076e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f022 0210 	bic.w	r2, r2, #16
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	e007      	b.n	80076f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f042 0210 	orr.w	r2, r2, #16
 80076f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	7f1b      	ldrb	r3, [r3, #28]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d108      	bne.n	8007712 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0208 	orr.w	r2, r2, #8
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	e007      	b.n	8007722 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0208 	bic.w	r2, r2, #8
 8007720:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	7f5b      	ldrb	r3, [r3, #29]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d108      	bne.n	800773c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f042 0204 	orr.w	r2, r2, #4
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e007      	b.n	800774c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0204 	bic.w	r2, r2, #4
 800774a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	431a      	orrs	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	ea42 0103 	orr.w	r1, r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	1e5a      	subs	r2, r3, #1
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077a2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80077a4:	7cfb      	ldrb	r3, [r7, #19]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d003      	beq.n	80077b2 <HAL_CAN_ConfigFilter+0x26>
 80077aa:	7cfb      	ldrb	r3, [r7, #19]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	f040 80be 	bne.w	800792e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80077b2:	4b65      	ldr	r3, [pc, #404]	; (8007948 <HAL_CAN_ConfigFilter+0x1bc>)
 80077b4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077bc:	f043 0201 	orr.w	r2, r3, #1
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	431a      	orrs	r2, r3
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	f003 031f 	and.w	r3, r3, #31
 80077f2:	2201      	movs	r2, #1
 80077f4:	fa02 f303 	lsl.w	r3, r2, r3
 80077f8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	43db      	mvns	r3, r3
 8007804:	401a      	ands	r2, r3
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d123      	bne.n	800785c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	43db      	mvns	r3, r3
 800781e:	401a      	ands	r2, r3
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007836:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	3248      	adds	r2, #72	; 0x48
 800783c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007850:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007852:	6979      	ldr	r1, [r7, #20]
 8007854:	3348      	adds	r3, #72	; 0x48
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	440b      	add	r3, r1
 800785a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d122      	bne.n	80078aa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	431a      	orrs	r2, r3
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007884:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	3248      	adds	r2, #72	; 0x48
 800788a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800789e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80078a0:	6979      	ldr	r1, [r7, #20]
 80078a2:	3348      	adds	r3, #72	; 0x48
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	440b      	add	r3, r1
 80078a8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d109      	bne.n	80078c6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	43db      	mvns	r3, r3
 80078bc:	401a      	ands	r2, r3
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80078c4:	e007      	b.n	80078d6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	431a      	orrs	r2, r3
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d109      	bne.n	80078f2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	43db      	mvns	r3, r3
 80078e8:	401a      	ands	r2, r3
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80078f0:	e007      	b.n	8007902 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	431a      	orrs	r2, r3
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d107      	bne.n	800791a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	431a      	orrs	r2, r3
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007920:	f023 0201 	bic.w	r2, r3, #1
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	e006      	b.n	800793c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007932:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
  }
}
 800793c:	4618      	mov	r0, r3
 800793e:	371c      	adds	r7, #28
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	40006400 	.word	0x40006400

0800794c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b01      	cmp	r3, #1
 800795e:	d12e      	bne.n	80079be <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0201 	bic.w	r2, r2, #1
 8007976:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007978:	f7ff fddc 	bl	8007534 <HAL_GetTick>
 800797c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800797e:	e012      	b.n	80079a6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007980:	f7ff fdd8 	bl	8007534 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b0a      	cmp	r3, #10
 800798c:	d90b      	bls.n	80079a6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2205      	movs	r2, #5
 800799e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e012      	b.n	80079cc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e5      	bne.n	8007980 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	e006      	b.n	80079cc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
  }
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d133      	bne.n	8007a50 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0201 	orr.w	r2, r2, #1
 80079f6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80079f8:	f7ff fd9c 	bl	8007534 <HAL_GetTick>
 80079fc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80079fe:	e012      	b.n	8007a26 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007a00:	f7ff fd98 	bl	8007534 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b0a      	cmp	r3, #10
 8007a0c:	d90b      	bls.n	8007a26 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2205      	movs	r2, #5
 8007a1e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e01b      	b.n	8007a5e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0e5      	beq.n	8007a00 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0202 	bic.w	r2, r2, #2
 8007a42:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	e006      	b.n	8007a5e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
  }
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b089      	sub	sp, #36	; 0x24
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	607a      	str	r2, [r7, #4]
 8007a72:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007a84:	7ffb      	ldrb	r3, [r7, #31]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d003      	beq.n	8007a92 <HAL_CAN_AddTxMessage+0x2c>
 8007a8a:	7ffb      	ldrb	r3, [r7, #31]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	f040 80ad 	bne.w	8007bec <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10a      	bne.n	8007ab2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d105      	bne.n	8007ab2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 8095 	beq.w	8007bdc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	0e1b      	lsrs	r3, r3, #24
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007abc:	2201      	movs	r2, #1
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	409a      	lsls	r2, r3
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10d      	bne.n	8007aea <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007ad8:	68f9      	ldr	r1, [r7, #12]
 8007ada:	6809      	ldr	r1, [r1, #0]
 8007adc:	431a      	orrs	r2, r3
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	3318      	adds	r3, #24
 8007ae2:	011b      	lsls	r3, r3, #4
 8007ae4:	440b      	add	r3, r1
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	e00f      	b.n	8007b0a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007af4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007afa:	68f9      	ldr	r1, [r7, #12]
 8007afc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007afe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	3318      	adds	r3, #24
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	440b      	add	r3, r1
 8007b08:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6819      	ldr	r1, [r3, #0]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	691a      	ldr	r2, [r3, #16]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	3318      	adds	r3, #24
 8007b16:	011b      	lsls	r3, r3, #4
 8007b18:	440b      	add	r3, r1
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	7d1b      	ldrb	r3, [r3, #20]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d111      	bne.n	8007b4a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	3318      	adds	r3, #24
 8007b2e:	011b      	lsls	r3, r3, #4
 8007b30:	4413      	add	r3, r2
 8007b32:	3304      	adds	r3, #4
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	6811      	ldr	r1, [r2, #0]
 8007b3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	3318      	adds	r3, #24
 8007b42:	011b      	lsls	r3, r3, #4
 8007b44:	440b      	add	r3, r1
 8007b46:	3304      	adds	r3, #4
 8007b48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3307      	adds	r3, #7
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	061a      	lsls	r2, r3, #24
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3306      	adds	r3, #6
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	041b      	lsls	r3, r3, #16
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3305      	adds	r3, #5
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	4313      	orrs	r3, r2
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	3204      	adds	r2, #4
 8007b6a:	7812      	ldrb	r2, [r2, #0]
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	6811      	ldr	r1, [r2, #0]
 8007b72:	ea43 0200 	orr.w	r2, r3, r0
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	011b      	lsls	r3, r3, #4
 8007b7a:	440b      	add	r3, r1
 8007b7c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007b80:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	3303      	adds	r3, #3
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	061a      	lsls	r2, r3, #24
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3302      	adds	r3, #2
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	041b      	lsls	r3, r3, #16
 8007b92:	431a      	orrs	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3301      	adds	r3, #1
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	021b      	lsls	r3, r3, #8
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	7812      	ldrb	r2, [r2, #0]
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	6811      	ldr	r1, [r2, #0]
 8007ba8:	ea43 0200 	orr.w	r2, r3, r0
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	440b      	add	r3, r1
 8007bb2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007bb6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	3318      	adds	r3, #24
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	4413      	add	r3, r2
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	6811      	ldr	r1, [r2, #0]
 8007bca:	f043 0201 	orr.w	r2, r3, #1
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	3318      	adds	r3, #24
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	440b      	add	r3, r1
 8007bd6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e00e      	b.n	8007bfa <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e006      	b.n	8007bfa <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
  }
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3724      	adds	r7, #36	; 0x24
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c18:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d002      	beq.n	8007c26 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007c20:	7afb      	ldrb	r3, [r7, #11]
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d11d      	bne.n	8007c62 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3301      	adds	r3, #1
 8007c38:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007c62:	68fb      	ldr	r3, [r7, #12]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c84:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d002      	beq.n	8007c92 <HAL_CAN_IsTxMessagePending+0x22>
 8007c8c:	7afb      	ldrb	r3, [r7, #11]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d10b      	bne.n	8007caa <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	069b      	lsls	r3, r3, #26
 8007c9c:	401a      	ands	r2, r3
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	069b      	lsls	r3, r3, #26
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d001      	beq.n	8007caa <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8007caa:	68fb      	ldr	r3, [r7, #12]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ccc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d003      	beq.n	8007cdc <HAL_CAN_GetRxMessage+0x24>
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	f040 80f3 	bne.w	8007ec2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10e      	bne.n	8007d00 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f003 0303 	and.w	r3, r3, #3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d116      	bne.n	8007d1e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e0e7      	b.n	8007ed0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f003 0303 	and.w	r3, r3, #3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d107      	bne.n	8007d1e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e0d8      	b.n	8007ed0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	331b      	adds	r3, #27
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	4413      	add	r3, r2
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0204 	and.w	r2, r3, #4
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10c      	bne.n	8007d56 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	331b      	adds	r3, #27
 8007d44:	011b      	lsls	r3, r3, #4
 8007d46:	4413      	add	r3, r2
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	0d5b      	lsrs	r3, r3, #21
 8007d4c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	e00b      	b.n	8007d6e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	331b      	adds	r3, #27
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	4413      	add	r3, r2
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	08db      	lsrs	r3, r3, #3
 8007d66:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	331b      	adds	r3, #27
 8007d76:	011b      	lsls	r3, r3, #4
 8007d78:	4413      	add	r3, r2
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0202 	and.w	r2, r3, #2
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	331b      	adds	r3, #27
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	4413      	add	r3, r2
 8007d90:	3304      	adds	r3, #4
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 020f 	and.w	r2, r3, #15
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	331b      	adds	r3, #27
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	4413      	add	r3, r2
 8007da8:	3304      	adds	r3, #4
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	0a1b      	lsrs	r3, r3, #8
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	331b      	adds	r3, #27
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	4413      	add	r3, r2
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	0c1b      	lsrs	r3, r3, #16
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	011b      	lsls	r3, r3, #4
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	0a1a      	lsrs	r2, r3, #8
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	3301      	adds	r3, #1
 8007df8:	b2d2      	uxtb	r2, r2
 8007dfa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	0c1a      	lsrs	r2, r3, #16
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	3302      	adds	r3, #2
 8007e12:	b2d2      	uxtb	r2, r2
 8007e14:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	011b      	lsls	r3, r3, #4
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	0e1a      	lsrs	r2, r3, #24
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	3303      	adds	r3, #3
 8007e2c:	b2d2      	uxtb	r2, r2
 8007e2e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	3304      	adds	r3, #4
 8007e44:	b2d2      	uxtb	r2, r2
 8007e46:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	011b      	lsls	r3, r3, #4
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	0a1a      	lsrs	r2, r3, #8
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	3305      	adds	r3, #5
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	0c1a      	lsrs	r2, r3, #16
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	3306      	adds	r3, #6
 8007e78:	b2d2      	uxtb	r2, r2
 8007e7a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	0e1a      	lsrs	r2, r3, #24
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	3307      	adds	r3, #7
 8007e92:	b2d2      	uxtb	r2, r2
 8007e94:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d108      	bne.n	8007eae <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68da      	ldr	r2, [r3, #12]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0220 	orr.w	r2, r2, #32
 8007eaa:	60da      	str	r2, [r3, #12]
 8007eac:	e007      	b.n	8007ebe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	691a      	ldr	r2, [r3, #16]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f042 0220 	orr.w	r2, r2, #32
 8007ebc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e006      	b.n	8007ed0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
  }
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	371c      	adds	r7, #28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ef0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007ef2:	7afb      	ldrb	r3, [r7, #11]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d002      	beq.n	8007efe <HAL_CAN_GetRxFifoFillLevel+0x22>
 8007ef8:	7afb      	ldrb	r3, [r7, #11]
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d10f      	bne.n	8007f1e <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d106      	bne.n	8007f12 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	e005      	b.n	8007f1e <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08a      	sub	sp, #40	; 0x28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007f34:	2300      	movs	r3, #0
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d07c      	beq.n	800806c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d023      	beq.n	8007fc4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2201      	movs	r2, #1
 8007f82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	f003 0302 	and.w	r3, r3, #2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f983 	bl	800829a <HAL_CAN_TxMailbox0CompleteCallback>
 8007f94:	e016      	b.n	8007fc4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d004      	beq.n	8007faa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa8:	e00c      	b.n	8007fc4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	f003 0308 	and.w	r3, r3, #8
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d004      	beq.n	8007fbe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
 8007fbc:	e002      	b.n	8007fc4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f989 	bl	80082d6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d024      	beq.n	8008018 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fd6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f963 	bl	80082ae <HAL_CAN_TxMailbox1CompleteCallback>
 8007fe8:	e016      	b.n	8008018 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d004      	beq.n	8007ffe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8007ffc:	e00c      	b.n	8008018 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008004:	2b00      	cmp	r3, #0
 8008006:	d004      	beq.n	8008012 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
 8008010:	e002      	b.n	8008018 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f969 	bl	80082ea <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d024      	beq.n	800806c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800802a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f943 	bl	80082c2 <HAL_CAN_TxMailbox2CompleteCallback>
 800803c:	e016      	b.n	800806c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d004      	beq.n	8008052 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
 8008050:	e00c      	b.n	800806c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d004      	beq.n	8008066 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008062:	627b      	str	r3, [r7, #36]	; 0x24
 8008064:	e002      	b.n	800806c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f949 	bl	80082fe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	f003 0308 	and.w	r3, r3, #8
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00c      	beq.n	8008090 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f003 0310 	and.w	r3, r3, #16
 800807c:	2b00      	cmp	r3, #0
 800807e:	d007      	beq.n	8008090 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008086:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2210      	movs	r2, #16
 800808e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00b      	beq.n	80080b2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f003 0308 	and.w	r3, r3, #8
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d006      	beq.n	80080b2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2208      	movs	r2, #8
 80080aa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f930 	bl	8008312 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d009      	beq.n	80080d0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7fe fa72 	bl	80065b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00c      	beq.n	80080f4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f003 0310 	and.w	r3, r3, #16
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d007      	beq.n	80080f4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2210      	movs	r2, #16
 80080f2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	f003 0320 	and.w	r3, r3, #32
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00b      	beq.n	8008116 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f003 0308 	and.w	r3, r3, #8
 8008104:	2b00      	cmp	r3, #0
 8008106:	d006      	beq.n	8008116 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2208      	movs	r2, #8
 800810e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f912 	bl	800833a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	2b00      	cmp	r3, #0
 800811e:	d009      	beq.n	8008134 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f8f9 	bl	8008326 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	f003 0310 	and.w	r3, r3, #16
 8008144:	2b00      	cmp	r3, #0
 8008146:	d006      	beq.n	8008156 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2210      	movs	r2, #16
 800814e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f8fc 	bl	800834e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	f003 0308 	and.w	r3, r3, #8
 8008166:	2b00      	cmp	r3, #0
 8008168:	d006      	beq.n	8008178 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2208      	movs	r2, #8
 8008170:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f8f5 	bl	8008362 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008178:	6a3b      	ldr	r3, [r7, #32]
 800817a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d07b      	beq.n	800827a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	f003 0304 	and.w	r3, r3, #4
 8008188:	2b00      	cmp	r3, #0
 800818a:	d072      	beq.n	8008272 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008192:	2b00      	cmp	r3, #0
 8008194:	d008      	beq.n	80081a8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	f043 0301 	orr.w	r3, r3, #1
 80081a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d008      	beq.n	80081c4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d003      	beq.n	80081c4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	f043 0302 	orr.w	r3, r3, #2
 80081c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d008      	beq.n	80081e0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d003      	beq.n	80081e0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	f043 0304 	orr.w	r3, r3, #4
 80081de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d043      	beq.n	8008272 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d03e      	beq.n	8008272 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081fa:	2b60      	cmp	r3, #96	; 0x60
 80081fc:	d02b      	beq.n	8008256 <HAL_CAN_IRQHandler+0x32a>
 80081fe:	2b60      	cmp	r3, #96	; 0x60
 8008200:	d82e      	bhi.n	8008260 <HAL_CAN_IRQHandler+0x334>
 8008202:	2b50      	cmp	r3, #80	; 0x50
 8008204:	d022      	beq.n	800824c <HAL_CAN_IRQHandler+0x320>
 8008206:	2b50      	cmp	r3, #80	; 0x50
 8008208:	d82a      	bhi.n	8008260 <HAL_CAN_IRQHandler+0x334>
 800820a:	2b40      	cmp	r3, #64	; 0x40
 800820c:	d019      	beq.n	8008242 <HAL_CAN_IRQHandler+0x316>
 800820e:	2b40      	cmp	r3, #64	; 0x40
 8008210:	d826      	bhi.n	8008260 <HAL_CAN_IRQHandler+0x334>
 8008212:	2b30      	cmp	r3, #48	; 0x30
 8008214:	d010      	beq.n	8008238 <HAL_CAN_IRQHandler+0x30c>
 8008216:	2b30      	cmp	r3, #48	; 0x30
 8008218:	d822      	bhi.n	8008260 <HAL_CAN_IRQHandler+0x334>
 800821a:	2b10      	cmp	r3, #16
 800821c:	d002      	beq.n	8008224 <HAL_CAN_IRQHandler+0x2f8>
 800821e:	2b20      	cmp	r3, #32
 8008220:	d005      	beq.n	800822e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8008222:	e01d      	b.n	8008260 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	f043 0308 	orr.w	r3, r3, #8
 800822a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800822c:	e019      	b.n	8008262 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	f043 0310 	orr.w	r3, r3, #16
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008236:	e014      	b.n	8008262 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	f043 0320 	orr.w	r3, r3, #32
 800823e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008240:	e00f      	b.n	8008262 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800824a:	e00a      	b.n	8008262 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008254:	e005      	b.n	8008262 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800825e:	e000      	b.n	8008262 <HAL_CAN_IRQHandler+0x336>
            break;
 8008260:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	699a      	ldr	r2, [r3, #24]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008270:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2204      	movs	r2, #4
 8008278:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	2b00      	cmp	r3, #0
 800827e:	d008      	beq.n	8008292 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	431a      	orrs	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f872 	bl	8008376 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008292:	bf00      	nop
 8008294:	3728      	adds	r7, #40	; 0x28
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80082a2:	bf00      	nop
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b083      	sub	sp, #12
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80082b6:	bf00      	nop
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b083      	sub	sp, #12
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80082ca:	bf00      	nop
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80082de:	bf00      	nop
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b083      	sub	sp, #12
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008342:	bf00      	nop
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008356:	bf00      	nop
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800836a:	bf00      	nop
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
	...

0800838c <__NVIC_SetPriorityGrouping>:
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800839c:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <__NVIC_SetPriorityGrouping+0x40>)
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80083a8:	4013      	ands	r3, r2
 80083aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80083b4:	4b06      	ldr	r3, [pc, #24]	; (80083d0 <__NVIC_SetPriorityGrouping+0x44>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80083ba:	4a04      	ldr	r2, [pc, #16]	; (80083cc <__NVIC_SetPriorityGrouping+0x40>)
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	60d3      	str	r3, [r2, #12]
}
 80083c0:	bf00      	nop
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	e000ed00 	.word	0xe000ed00
 80083d0:	05fa0000 	.word	0x05fa0000

080083d4 <__NVIC_GetPriorityGrouping>:
{
 80083d4:	b480      	push	{r7}
 80083d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80083d8:	4b04      	ldr	r3, [pc, #16]	; (80083ec <__NVIC_GetPriorityGrouping+0x18>)
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	0a1b      	lsrs	r3, r3, #8
 80083de:	f003 0307 	and.w	r3, r3, #7
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	e000ed00 	.word	0xe000ed00

080083f0 <__NVIC_EnableIRQ>:
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	db0b      	blt.n	800841a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	f003 021f 	and.w	r2, r3, #31
 8008408:	4907      	ldr	r1, [pc, #28]	; (8008428 <__NVIC_EnableIRQ+0x38>)
 800840a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	2001      	movs	r0, #1
 8008412:	fa00 f202 	lsl.w	r2, r0, r2
 8008416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	e000e100 	.word	0xe000e100

0800842c <__NVIC_DisableIRQ>:
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800843a:	2b00      	cmp	r3, #0
 800843c:	db12      	blt.n	8008464 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	f003 021f 	and.w	r2, r3, #31
 8008444:	490a      	ldr	r1, [pc, #40]	; (8008470 <__NVIC_DisableIRQ+0x44>)
 8008446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800844a:	095b      	lsrs	r3, r3, #5
 800844c:	2001      	movs	r0, #1
 800844e:	fa00 f202 	lsl.w	r2, r0, r2
 8008452:	3320      	adds	r3, #32
 8008454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008458:	f3bf 8f4f 	dsb	sy
}
 800845c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800845e:	f3bf 8f6f 	isb	sy
}
 8008462:	bf00      	nop
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	e000e100 	.word	0xe000e100

08008474 <__NVIC_SetPriority>:
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	6039      	str	r1, [r7, #0]
 800847e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008484:	2b00      	cmp	r3, #0
 8008486:	db0a      	blt.n	800849e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	b2da      	uxtb	r2, r3
 800848c:	490c      	ldr	r1, [pc, #48]	; (80084c0 <__NVIC_SetPriority+0x4c>)
 800848e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008492:	0112      	lsls	r2, r2, #4
 8008494:	b2d2      	uxtb	r2, r2
 8008496:	440b      	add	r3, r1
 8008498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800849c:	e00a      	b.n	80084b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	4908      	ldr	r1, [pc, #32]	; (80084c4 <__NVIC_SetPriority+0x50>)
 80084a4:	79fb      	ldrb	r3, [r7, #7]
 80084a6:	f003 030f 	and.w	r3, r3, #15
 80084aa:	3b04      	subs	r3, #4
 80084ac:	0112      	lsls	r2, r2, #4
 80084ae:	b2d2      	uxtb	r2, r2
 80084b0:	440b      	add	r3, r1
 80084b2:	761a      	strb	r2, [r3, #24]
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	e000e100 	.word	0xe000e100
 80084c4:	e000ed00 	.word	0xe000ed00

080084c8 <NVIC_EncodePriority>:
{
 80084c8:	b480      	push	{r7}
 80084ca:	b089      	sub	sp, #36	; 0x24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f003 0307 	and.w	r3, r3, #7
 80084da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	f1c3 0307 	rsb	r3, r3, #7
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	bf28      	it	cs
 80084e6:	2304      	movcs	r3, #4
 80084e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	3304      	adds	r3, #4
 80084ee:	2b06      	cmp	r3, #6
 80084f0:	d902      	bls.n	80084f8 <NVIC_EncodePriority+0x30>
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	3b03      	subs	r3, #3
 80084f6:	e000      	b.n	80084fa <NVIC_EncodePriority+0x32>
 80084f8:	2300      	movs	r3, #0
 80084fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	fa02 f303 	lsl.w	r3, r2, r3
 8008506:	43da      	mvns	r2, r3
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	401a      	ands	r2, r3
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	fa01 f303 	lsl.w	r3, r1, r3
 800851a:	43d9      	mvns	r1, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008520:	4313      	orrs	r3, r2
}
 8008522:	4618      	mov	r0, r3
 8008524:	3724      	adds	r7, #36	; 0x24
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff ff28 	bl	800838c <__NVIC_SetPriorityGrouping>
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008552:	2300      	movs	r3, #0
 8008554:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008556:	f7ff ff3d 	bl	80083d4 <__NVIC_GetPriorityGrouping>
 800855a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	68b9      	ldr	r1, [r7, #8]
 8008560:	6978      	ldr	r0, [r7, #20]
 8008562:	f7ff ffb1 	bl	80084c8 <NVIC_EncodePriority>
 8008566:	4602      	mov	r2, r0
 8008568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800856c:	4611      	mov	r1, r2
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff ff80 	bl	8008474 <__NVIC_SetPriority>
}
 8008574:	bf00      	nop
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800858a:	4618      	mov	r0, r3
 800858c:	f7ff ff30 	bl	80083f0 <__NVIC_EnableIRQ>
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80085a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff ff40 	bl	800842c <__NVIC_DisableIRQ>
}
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80085c2:	f7fe ffb7 	bl	8007534 <HAL_GetTick>
 80085c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d008      	beq.n	80085e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2280      	movs	r2, #128	; 0x80
 80085d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e052      	b.n	800868c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f022 0216 	bic.w	r2, r2, #22
 80085f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	695a      	ldr	r2, [r3, #20]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008604:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860a:	2b00      	cmp	r3, #0
 800860c:	d103      	bne.n	8008616 <HAL_DMA_Abort+0x62>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008612:	2b00      	cmp	r3, #0
 8008614:	d007      	beq.n	8008626 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f022 0208 	bic.w	r2, r2, #8
 8008624:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f022 0201 	bic.w	r2, r2, #1
 8008634:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008636:	e013      	b.n	8008660 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008638:	f7fe ff7c 	bl	8007534 <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	2b05      	cmp	r3, #5
 8008644:	d90c      	bls.n	8008660 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2220      	movs	r2, #32
 800864a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2203      	movs	r2, #3
 8008650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e015      	b.n	800868c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e4      	bne.n	8008638 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008672:	223f      	movs	r2, #63	; 0x3f
 8008674:	409a      	lsls	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d004      	beq.n	80086b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2280      	movs	r2, #128	; 0x80
 80086ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e00c      	b.n	80086cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2205      	movs	r2, #5
 80086b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0201 	bic.w	r2, r2, #1
 80086c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e06a      	b.n	80087c0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d106      	bne.n	8008702 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2223      	movs	r2, #35	; 0x23
 80086f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f005 fa45 	bl	800db8c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008702:	4b31      	ldr	r3, [pc, #196]	; (80087c8 <HAL_ETH_Init+0xf0>)
 8008704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008706:	4a30      	ldr	r2, [pc, #192]	; (80087c8 <HAL_ETH_Init+0xf0>)
 8008708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800870c:	6453      	str	r3, [r2, #68]	; 0x44
 800870e:	4b2e      	ldr	r3, [pc, #184]	; (80087c8 <HAL_ETH_Init+0xf0>)
 8008710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008716:	60bb      	str	r3, [r7, #8]
 8008718:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800871a:	4b2c      	ldr	r3, [pc, #176]	; (80087cc <HAL_ETH_Init+0xf4>)
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	4a2b      	ldr	r2, [pc, #172]	; (80087cc <HAL_ETH_Init+0xf4>)
 8008720:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008724:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8008726:	4b29      	ldr	r3, [pc, #164]	; (80087cc <HAL_ETH_Init+0xf4>)
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	4927      	ldr	r1, [pc, #156]	; (80087cc <HAL_ETH_Init+0xf4>)
 8008730:	4313      	orrs	r3, r2
 8008732:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8008734:	4b25      	ldr	r3, [pc, #148]	; (80087cc <HAL_ETH_Init+0xf4>)
 8008736:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	f043 0301 	orr.w	r3, r3, #1
 800874a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800874e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008750:	f7fe fef0 	bl	8007534 <HAL_GetTick>
 8008754:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8008756:	e011      	b.n	800877c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8008758:	f7fe feec 	bl	8007534 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008766:	d909      	bls.n	800877c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2204      	movs	r2, #4
 800876c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	22e0      	movs	r2, #224	; 0xe0
 8008774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e021      	b.n	80087c0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e4      	bne.n	8008758 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 ffac 	bl	80096ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f001 f853 	bl	8009840 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f001 f8a9 	bl	80098f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	461a      	mov	r2, r3
 80087a6:	2100      	movs	r1, #0
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 f811 	bl	80097d0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2210      	movs	r2, #16
 80087ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	40023800 	.word	0x40023800
 80087cc:	40013800 	.word	0x40013800

080087d0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087de:	2b10      	cmp	r3, #16
 80087e0:	d150      	bne.n	8008884 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2223      	movs	r2, #35	; 0x23
 80087e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2204      	movs	r2, #4
 80087ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fa7b 	bl	8008cec <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f042 0208 	orr.w	r2, r2, #8
 8008804:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800880e:	2001      	movs	r0, #1
 8008810:	f7fe fe9c 	bl	800754c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0204 	orr.w	r2, r2, #4
 800882a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008834:	2001      	movs	r0, #1
 8008836:	f7fe fe89 	bl	800754c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fdf3 	bl	800942e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	6812      	ldr	r2, [r2, #0]
 8008856:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800885a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800885e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	6812      	ldr	r2, [r2, #0]
 800886e:	f043 0302 	orr.w	r3, r3, #2
 8008872:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008876:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2223      	movs	r2, #35	; 0x23
 800887c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	e000      	b.n	8008886 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
  }
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
	...

08008890 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800889e:	2b10      	cmp	r3, #16
 80088a0:	d17b      	bne.n	800899a <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2223      	movs	r2, #35	; 0x23
 80088a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80088be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	4b35      	ldr	r3, [pc, #212]	; (80089a4 <HAL_ETH_Start_IT+0x114>)
 80088ce:	430b      	orrs	r3, r1
 80088d0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80088e4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2204      	movs	r2, #4
 80088ec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f9fc 	bl	8008cec <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f042 0208 	orr.w	r2, r2, #8
 8008902:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800890c:	2001      	movs	r0, #1
 800890e:	f7fe fe1d 	bl	800754c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f042 0204 	orr.w	r2, r2, #4
 8008928:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008932:	2001      	movs	r0, #1
 8008934:	f7fe fe0a 	bl	800754c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fd74 	bl	800942e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	6812      	ldr	r2, [r2, #0]
 8008954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008958:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800895c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6812      	ldr	r2, [r2, #0]
 800896c:	f043 0302 	orr.w	r3, r3, #2
 8008970:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008974:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800897e:	69d9      	ldr	r1, [r3, #28]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	4b08      	ldr	r3, [pc, #32]	; (80089a8 <HAL_ETH_Start_IT+0x118>)
 8008986:	430b      	orrs	r3, r1
 8008988:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800898c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2223      	movs	r2, #35	; 0x23
 8008992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	e000      	b.n	800899c <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
  }
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	00020060 	.word	0x00020060
 80089a8:	0001a0c1 	.word	0x0001a0c1

080089ac <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089ba:	2b23      	cmp	r3, #35	; 0x23
 80089bc:	d16e      	bne.n	8008a9c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2223      	movs	r2, #35	; 0x23
 80089c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ce:	69d9      	ldr	r1, [r3, #28]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	4b34      	ldr	r3, [pc, #208]	; (8008aa8 <HAL_ETH_Stop_IT+0xfc>)
 80089d6:	400b      	ands	r3, r1
 80089d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089dc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	6812      	ldr	r2, [r2, #0]
 80089ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089f4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	6812      	ldr	r2, [r2, #0]
 8008a04:	f023 0302 	bic.w	r3, r3, #2
 8008a08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a0c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f022 0204 	bic.w	r2, r2, #4
 8008a1c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008a26:	2001      	movs	r0, #1
 8008a28:	f7fe fd90 	bl	800754c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fcfa 	bl	800942e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 0208 	bic.w	r2, r2, #8
 8008a48:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008a52:	2001      	movs	r0, #1
 8008a54:	f7fe fd7a 	bl	800754c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8008a60:	2300      	movs	r3, #0
 8008a62:	617b      	str	r3, [r7, #20]
 8008a64:	e00e      	b.n	8008a84 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	3212      	adds	r2, #18
 8008a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a70:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	3301      	adds	r3, #1
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	d9ed      	bls.n	8008a66 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2210      	movs	r2, #16
 8008a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	e000      	b.n	8008a9e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
  }
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	fffe5f3e 	.word	0xfffe5f3e

08008aac <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d109      	bne.n	8008ad0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac2:	f043 0201 	orr.w	r2, r3, #1
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e045      	b.n	8008b5c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ad6:	2b23      	cmp	r3, #35	; 0x23
 8008ad8:	d13f      	bne.n	8008b5a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 ff70 	bl	80099cc <ETH_Prepare_Tx_Descriptors>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d009      	beq.n	8008b06 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af8:	f043 0202 	orr.w	r2, r3, #2
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e02a      	b.n	8008b5c <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8008b06:	f3bf 8f4f 	dsb	sy
}
 8008b0a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	629a      	str	r2, [r3, #40]	; 0x28
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d904      	bls.n	8008b28 <HAL_ETH_Transmit_IT+0x7c>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b22:	1f1a      	subs	r2, r3, #4
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	f003 0304 	and.w	r3, r3, #4
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00d      	beq.n	8008b56 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b42:	461a      	mov	r2, r3
 8008b44:	2304      	movs	r3, #4
 8008b46:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b50:	461a      	mov	r2, r3
 8008b52:	2300      	movs	r3, #0
 8008b54:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	e000      	b.n	8008b5c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
  }
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d109      	bne.n	8008b90 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b82:	f043 0201 	orr.w	r2, r3, #1
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e0a8      	b.n	8008ce2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b96:	2b23      	cmp	r3, #35	; 0x23
 8008b98:	d001      	beq.n	8008b9e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e0a1      	b.n	8008ce2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ba2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	3212      	adds	r2, #18
 8008baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bae:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bb4:	f1c3 0304 	rsb	r3, r3, #4
 8008bb8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8008bba:	e06a      	b.n	8008c92 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d007      	beq.n	8008bd8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	699a      	ldr	r2, [r3, #24]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	69da      	ldr	r2, [r3, #28]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d103      	bne.n	8008bec <HAL_ETH_ReadData+0x88>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d040      	beq.n	8008c6e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d005      	beq.n	8008c04 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00c      	beq.n	8008c30 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	0c1b      	lsrs	r3, r3, #16
 8008c1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008c20:	3b04      	subs	r3, #4
 8008c22:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	689a      	ldr	r2, [r3, #8]
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8008c48:	461a      	mov	r2, r3
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	f005 f969 	bl	800df24 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	441a      	add	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	3301      	adds	r3, #1
 8008c72:	61fb      	str	r3, [r7, #28]
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d902      	bls.n	8008c80 <HAL_ETH_ReadData+0x11c>
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	3b04      	subs	r3, #4
 8008c7e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	69fa      	ldr	r2, [r7, #28]
 8008c84:	3212      	adds	r2, #18
 8008c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	db06      	blt.n	8008ca8 <HAL_ETH_ReadData+0x144>
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d202      	bcs.n	8008ca8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d089      	beq.n	8008bbc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	441a      	add	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f815 	bl	8008cec <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	69fa      	ldr	r2, [r7, #28]
 8008cc6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d108      	bne.n	8008ce0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	e000      	b.n	8008ce2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3720      	adds	r7, #32
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
	...

08008cec <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b088      	sub	sp, #32
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d00:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	69fa      	ldr	r2, [r7, #28]
 8008d06:	3212      	adds	r2, #18
 8008d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d12:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8008d14:	e040      	b.n	8008d98 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d112      	bne.n	8008d44 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8008d1e:	f107 030c 	add.w	r3, r7, #12
 8008d22:	4618      	mov	r0, r3
 8008d24:	f005 f8ce 	bl	800dec4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d102      	bne.n	8008d34 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	74fb      	strb	r3, [r7, #19]
 8008d32:	e007      	b.n	8008d44 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	461a      	mov	r2, r3
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8008d44:	7cfb      	ldrb	r3, [r7, #19]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d026      	beq.n	8008d98 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d103      	bne.n	8008d5a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	4a1e      	ldr	r2, [pc, #120]	; (8008dd0 <ETH_UpdateDescriptor+0xe4>)
 8008d56:	605a      	str	r2, [r3, #4]
 8008d58:	e003      	b.n	8008d62 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8008d60:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8008d62:	f3bf 8f5f 	dmb	sy
}
 8008d66:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	3301      	adds	r3, #1
 8008d78:	61fb      	str	r3, [r7, #28]
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	d902      	bls.n	8008d86 <ETH_UpdateDescriptor+0x9a>
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	3b04      	subs	r3, #4
 8008d84:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	69fa      	ldr	r2, [r7, #28]
 8008d8a:	3212      	adds	r2, #18
 8008d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d90:	617b      	str	r3, [r7, #20]
      desccount--;
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	3b01      	subs	r3, #1
 8008d96:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <ETH_UpdateDescriptor+0xb8>
 8008d9e:	7cfb      	ldrb	r3, [r7, #19]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1b8      	bne.n	8008d16 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d00c      	beq.n	8008dc8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db6:	461a      	mov	r2, r3
 8008db8:	2300      	movs	r3, #0
 8008dba:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8008dc8:	bf00      	nop
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	800045f8 	.word	0x800045f8

08008dd4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3318      	adds	r3, #24
 8008de0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dec:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8008dee:	2301      	movs	r3, #1
 8008df0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8008df2:	e03f      	b.n	8008e74 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8008df4:	2301      	movs	r3, #1
 8008df6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	3304      	adds	r3, #4
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d106      	bne.n	8008e1c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	3301      	adds	r3, #1
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d028      	beq.n	8008e74 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68d9      	ldr	r1, [r3, #12]
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	440b      	add	r3, r1
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	db1b      	blt.n	8008e70 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f005 f8af 	bl	800dfa8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	2200      	movs	r2, #0
 8008e56:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	f003 0303 	and.w	r3, r3, #3
 8008e60:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e6e:	e001      	b.n	8008e74 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d002      	beq.n	8008e80 <HAL_ETH_ReleaseTxPacket+0xac>
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1b9      	bne.n	8008df4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea2:	2b40      	cmp	r3, #64	; 0x40
 8008ea4:	d112      	bne.n	8008ecc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb4:	2b40      	cmp	r3, #64	; 0x40
 8008eb6:	d109      	bne.n	8008ecc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	4b50      	ldr	r3, [pc, #320]	; (8009004 <HAL_ETH_IRQHandler+0x178>)
 8008ec4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f004 fbc4 	bl	800d654 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d113      	bne.n	8008f06 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d10a      	bne.n	8008f06 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8008efe:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f004 fbb7 	bl	800d674 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f18:	d14c      	bne.n	8008fb4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f2c:	d142      	bne.n	8008fb4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f34:	f043 0208 	orr.w	r2, r3, #8
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f50:	d11a      	bne.n	8008f88 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f5a:	695a      	ldr	r2, [r3, #20]
 8008f5c:	4b2a      	ldr	r3, [pc, #168]	; (8009008 <HAL_ETH_IRQHandler+0x17c>)
 8008f5e:	4013      	ands	r3, r2
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	6812      	ldr	r2, [r2, #0]
 8008f74:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8008f78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f7c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	22e0      	movs	r2, #224	; 0xe0
 8008f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008f86:	e012      	b.n	8008fae <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f90:	695a      	ldr	r2, [r3, #20]
 8008f92:	f248 6380 	movw	r3, #34432	; 0x8680
 8008f96:	4013      	ands	r3, r2
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f248 6380 	movw	r3, #34432	; 0x8680
 8008fac:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f004 fb70 	bl	800d694 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fba:	f003 0308 	and.w	r3, r3, #8
 8008fbe:	2b08      	cmp	r3, #8
 8008fc0:	d10e      	bne.n	8008fe0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f81c 	bl	8009010 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8008fe0:	4b0a      	ldr	r3, [pc, #40]	; (800900c <HAL_ETH_IRQHandler+0x180>)
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d006      	beq.n	8008ffa <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8008fec:	4b07      	ldr	r3, [pc, #28]	; (800900c <HAL_ETH_IRQHandler+0x180>)
 8008fee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008ff2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f815 	bl	8009024 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	00010040 	.word	0x00010040
 8009008:	007e2000 	.word	0x007e2000
 800900c:	40013c00 	.word	0x40013c00

08009010 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
 8009044:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f003 031c 	and.w	r3, r3, #28
 8009054:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	02db      	lsls	r3, r3, #11
 800905a:	b29b      	uxth	r3, r3
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	4313      	orrs	r3, r2
 8009060:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	019b      	lsls	r3, r3, #6
 8009066:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	4313      	orrs	r3, r2
 800906e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f023 0302 	bic.w	r3, r3, #2
 8009076:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f043 0301 	orr.w	r3, r3, #1
 800907e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8009088:	f7fe fa54 	bl	8007534 <HAL_GetTick>
 800908c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800908e:	e00d      	b.n	80090ac <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8009090:	f7fe fa50 	bl	8007534 <HAL_GetTick>
 8009094:	4602      	mov	r2, r0
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800909e:	d301      	bcc.n	80090a4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e010      	b.n	80090c6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1ec      	bne.n	8009090 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	461a      	mov	r2, r3
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b086      	sub	sp, #24
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	607a      	str	r2, [r7, #4]
 80090da:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	f003 031c 	and.w	r3, r3, #28
 80090ea:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	02db      	lsls	r3, r3, #11
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	019b      	lsls	r3, r3, #6
 80090fc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	4313      	orrs	r3, r2
 8009104:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f043 0302 	orr.w	r3, r3, #2
 800910c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f043 0301 	orr.w	r3, r3, #1
 8009114:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	b29a      	uxth	r2, r3
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009128:	f7fe fa04 	bl	8007534 <HAL_GetTick>
 800912c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800912e:	e00d      	b.n	800914c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8009130:	f7fe fa00 	bl	8007534 <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800913e:	d301      	bcc.n	8009144 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e009      	b.n	8009158 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1ec      	bne.n	8009130 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e0d9      	b.n	8009328 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0310 	and.w	r3, r3, #16
 800917e:	2b00      	cmp	r3, #0
 8009180:	bf14      	ite	ne
 8009182:	2301      	movne	r3, #1
 8009184:	2300      	moveq	r3, #0
 8009186:	b2db      	uxtb	r3, r3
 8009188:	461a      	mov	r2, r3
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	bf0c      	ite	eq
 80091ac:	2301      	moveq	r3, #1
 80091ae:	2300      	movne	r3, #0
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	461a      	mov	r2, r3
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	bf14      	ite	ne
 80091c8:	2301      	movne	r3, #1
 80091ca:	2300      	moveq	r3, #0
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	bf0c      	ite	eq
 80091e2:	2301      	moveq	r3, #1
 80091e4:	2300      	movne	r3, #0
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	461a      	mov	r2, r3
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	bf14      	ite	ne
 80091fc:	2301      	movne	r3, #1
 80091fe:	2300      	moveq	r3, #0
 8009200:	b2db      	uxtb	r3, r3
 8009202:	461a      	mov	r2, r3
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800922e:	2b00      	cmp	r3, #0
 8009230:	bf0c      	ite	eq
 8009232:	2301      	moveq	r3, #1
 8009234:	2300      	movne	r3, #0
 8009236:	b2db      	uxtb	r3, r3
 8009238:	461a      	mov	r2, r3
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009248:	2b00      	cmp	r3, #0
 800924a:	bf0c      	ite	eq
 800924c:	2301      	moveq	r3, #1
 800924e:	2300      	movne	r3, #0
 8009250:	b2db      	uxtb	r3, r3
 8009252:	461a      	mov	r2, r3
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009262:	2b00      	cmp	r3, #0
 8009264:	bf14      	ite	ne
 8009266:	2301      	movne	r3, #1
 8009268:	2300      	moveq	r3, #0
 800926a:	b2db      	uxtb	r3, r3
 800926c:	461a      	mov	r2, r3
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800928a:	2b00      	cmp	r3, #0
 800928c:	bf14      	ite	ne
 800928e:	2301      	movne	r3, #1
 8009290:	2300      	moveq	r3, #0
 8009292:	b2db      	uxtb	r3, r3
 8009294:	461a      	mov	r2, r3
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	f003 0302 	and.w	r3, r3, #2
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	bf14      	ite	ne
 80092a8:	2301      	movne	r3, #1
 80092aa:	2300      	moveq	r3, #0
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	461a      	mov	r2, r3
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	bf0c      	ite	eq
 80092c4:	2301      	moveq	r3, #1
 80092c6:	2300      	movne	r3, #0
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	461a      	mov	r2, r3
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	0c1b      	lsrs	r3, r3, #16
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	f003 0304 	and.w	r3, r3, #4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	bf14      	ite	ne
 80092fc:	2301      	movne	r3, #1
 80092fe:	2300      	moveq	r3, #0
 8009300:	b2db      	uxtb	r3, r3
 8009302:	461a      	mov	r2, r3
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8009314:	2b00      	cmp	r3, #0
 8009316:	bf14      	ite	ne
 8009318:	2301      	movne	r3, #1
 800931a:	2300      	moveq	r3, #0
 800931c:	b2db      	uxtb	r3, r3
 800931e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e00b      	b.n	8009360 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800934e:	2b10      	cmp	r3, #16
 8009350:	d105      	bne.n	800935e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f88f 	bl	8009478 <ETH_SetMACConfig>

    return HAL_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	e000      	b.n	8009360 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
  }
}
 8009360:	4618      	mov	r0, r3
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f023 031c 	bic.w	r3, r3, #28
 800937e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009380:	f001 fadc 	bl	800a93c <HAL_RCC_GetHCLKFreq>
 8009384:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	4a1d      	ldr	r2, [pc, #116]	; (8009400 <HAL_ETH_SetMDIOClockRange+0x98>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d908      	bls.n	80093a0 <HAL_ETH_SetMDIOClockRange+0x38>
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	4a1c      	ldr	r2, [pc, #112]	; (8009404 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d804      	bhi.n	80093a0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f043 0308 	orr.w	r3, r3, #8
 800939c:	60fb      	str	r3, [r7, #12]
 800939e:	e027      	b.n	80093f0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	4a18      	ldr	r2, [pc, #96]	; (8009404 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d908      	bls.n	80093ba <HAL_ETH_SetMDIOClockRange+0x52>
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	4a17      	ldr	r2, [pc, #92]	; (8009408 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d204      	bcs.n	80093ba <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f043 030c 	orr.w	r3, r3, #12
 80093b6:	60fb      	str	r3, [r7, #12]
 80093b8:	e01a      	b.n	80093f0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	4a12      	ldr	r2, [pc, #72]	; (8009408 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d303      	bcc.n	80093ca <HAL_ETH_SetMDIOClockRange+0x62>
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	4a11      	ldr	r2, [pc, #68]	; (800940c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d911      	bls.n	80093ee <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	4a0f      	ldr	r2, [pc, #60]	; (800940c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d908      	bls.n	80093e4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	4a0e      	ldr	r2, [pc, #56]	; (8009410 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d804      	bhi.n	80093e4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f043 0304 	orr.w	r3, r3, #4
 80093e0:	60fb      	str	r3, [r7, #12]
 80093e2:	e005      	b.n	80093f0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f043 0310 	orr.w	r3, r3, #16
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	e000      	b.n	80093f0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80093ee:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	611a      	str	r2, [r3, #16]
}
 80093f8:	bf00      	nop
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	01312cff 	.word	0x01312cff
 8009404:	02160ebf 	.word	0x02160ebf
 8009408:	03938700 	.word	0x03938700
 800940c:	05f5e0ff 	.word	0x05f5e0ff
 8009410:	08f0d17f 	.word	0x08f0d17f

08009414 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8009422:	4618      	mov	r0, r3
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8009436:	2300      	movs	r3, #0
 8009438:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	6812      	ldr	r2, [r2, #0]
 8009448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800944c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009450:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800945e:	2001      	movs	r0, #1
 8009460:	f7fe f874 	bl	800754c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800946e:	6193      	str	r3, [r2, #24]
}
 8009470:	bf00      	nop
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	4b51      	ldr	r3, [pc, #324]	; (80095d4 <ETH_SetMACConfig+0x15c>)
 800948e:	4013      	ands	r3, r2
 8009490:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	7c1b      	ldrb	r3, [r3, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d102      	bne.n	80094a0 <ETH_SetMACConfig+0x28>
 800949a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800949e:	e000      	b.n	80094a2 <ETH_SetMACConfig+0x2a>
 80094a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	7c5b      	ldrb	r3, [r3, #17]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d102      	bne.n	80094b0 <ETH_SetMACConfig+0x38>
 80094aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094ae:	e000      	b.n	80094b2 <ETH_SetMACConfig+0x3a>
 80094b0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80094b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80094b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	7fdb      	ldrb	r3, [r3, #31]
 80094be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80094c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80094c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	7f92      	ldrb	r2, [r2, #30]
 80094cc:	2a00      	cmp	r2, #0
 80094ce:	d102      	bne.n	80094d6 <ETH_SetMACConfig+0x5e>
 80094d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80094d4:	e000      	b.n	80094d8 <ETH_SetMACConfig+0x60>
 80094d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80094d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	7f1b      	ldrb	r3, [r3, #28]
 80094de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80094e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80094e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	791b      	ldrb	r3, [r3, #4]
 80094ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80094ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80094f6:	2a00      	cmp	r2, #0
 80094f8:	d102      	bne.n	8009500 <ETH_SetMACConfig+0x88>
 80094fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094fe:	e000      	b.n	8009502 <ETH_SetMACConfig+0x8a>
 8009500:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8009502:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	7bdb      	ldrb	r3, [r3, #15]
 8009508:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800950a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8009510:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009518:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800951a:	4313      	orrs	r3, r2
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	4313      	orrs	r3, r2
 8009520:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009532:	2001      	movs	r0, #1
 8009534:	f7fe f80a 	bl	800754c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800954e:	4013      	ands	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009556:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800955e:	2a00      	cmp	r2, #0
 8009560:	d101      	bne.n	8009566 <ETH_SetMACConfig+0xee>
 8009562:	2280      	movs	r2, #128	; 0x80
 8009564:	e000      	b.n	8009568 <ETH_SetMACConfig+0xf0>
 8009566:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8009568:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800956e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8009576:	2a01      	cmp	r2, #1
 8009578:	d101      	bne.n	800957e <ETH_SetMACConfig+0x106>
 800957a:	2208      	movs	r2, #8
 800957c:	e000      	b.n	8009580 <ETH_SetMACConfig+0x108>
 800957e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8009580:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8009588:	2a01      	cmp	r2, #1
 800958a:	d101      	bne.n	8009590 <ETH_SetMACConfig+0x118>
 800958c:	2204      	movs	r2, #4
 800958e:	e000      	b.n	8009592 <ETH_SetMACConfig+0x11a>
 8009590:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8009592:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800959a:	2a01      	cmp	r2, #1
 800959c:	d101      	bne.n	80095a2 <ETH_SetMACConfig+0x12a>
 800959e:	2202      	movs	r2, #2
 80095a0:	e000      	b.n	80095a4 <ETH_SetMACConfig+0x12c>
 80095a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80095a4:	4313      	orrs	r3, r2
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80095bc:	2001      	movs	r0, #1
 80095be:	f7fd ffc5 	bl	800754c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	619a      	str	r2, [r3, #24]
}
 80095ca:	bf00      	nop
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	ff20810f 	.word	0xff20810f

080095d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	4b3d      	ldr	r3, [pc, #244]	; (80096e8 <ETH_SetDMAConfig+0x110>)
 80095f2:	4013      	ands	r3, r2
 80095f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	7b1b      	ldrb	r3, [r3, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d102      	bne.n	8009604 <ETH_SetDMAConfig+0x2c>
 80095fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009602:	e000      	b.n	8009606 <ETH_SetDMAConfig+0x2e>
 8009604:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	7b5b      	ldrb	r3, [r3, #13]
 800960a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800960c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	7f52      	ldrb	r2, [r2, #29]
 8009612:	2a00      	cmp	r2, #0
 8009614:	d102      	bne.n	800961c <ETH_SetDMAConfig+0x44>
 8009616:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800961a:	e000      	b.n	800961e <ETH_SetDMAConfig+0x46>
 800961c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800961e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	7b9b      	ldrb	r3, [r3, #14]
 8009624:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8009626:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800962c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	7f1b      	ldrb	r3, [r3, #28]
 8009632:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8009634:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	7f9b      	ldrb	r3, [r3, #30]
 800963a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800963c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8009642:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800964a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800964c:	4313      	orrs	r3, r2
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4313      	orrs	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800965c:	461a      	mov	r2, r3
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800966e:	2001      	movs	r0, #1
 8009670:	f7fd ff6c 	bl	800754c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800967c:	461a      	mov	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	791b      	ldrb	r3, [r3, #4]
 8009686:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800968c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8009692:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8009698:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80096a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80096a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80096aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80096b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	6812      	ldr	r2, [r2, #0]
 80096b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80096ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80096be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80096cc:	2001      	movs	r0, #1
 80096ce:	f7fd ff3d 	bl	800754c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096da:	461a      	mov	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6013      	str	r3, [r2, #0]
}
 80096e0:	bf00      	nop
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	f8de3f23 	.word	0xf8de3f23

080096ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b0a6      	sub	sp, #152	; 0x98
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80096f4:	2301      	movs	r3, #1
 80096f6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80096fa:	2301      	movs	r3, #1
 80096fc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8009700:	2300      	movs	r3, #0
 8009702:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009704:	2300      	movs	r3, #0
 8009706:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800970a:	2301      	movs	r3, #1
 800970c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8009710:	2300      	movs	r3, #0
 8009712:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8009716:	2301      	movs	r3, #1
 8009718:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800971c:	2300      	movs	r3, #0
 800971e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8009722:	2300      	movs	r3, #0
 8009724:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009728:	2300      	movs	r3, #0
 800972a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800972c:	2300      	movs	r3, #0
 800972e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8009732:	2300      	movs	r3, #0
 8009734:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8009736:	2300      	movs	r3, #0
 8009738:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800973c:	2300      	movs	r3, #0
 800973e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8009742:	2300      	movs	r3, #0
 8009744:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8009748:	2300      	movs	r3, #0
 800974a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800974e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009752:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009754:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009758:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800975a:	2300      	movs	r3, #0
 800975c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8009760:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7ff fe86 	bl	8009478 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800976c:	2301      	movs	r3, #1
 800976e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8009770:	2301      	movs	r3, #1
 8009772:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8009774:	2301      	movs	r3, #1
 8009776:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800977a:	2301      	movs	r3, #1
 800977c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800977e:	2300      	movs	r3, #0
 8009780:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8009782:	2300      	movs	r3, #0
 8009784:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8009788:	2300      	movs	r3, #0
 800978a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800978e:	2300      	movs	r3, #0
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8009792:	2301      	movs	r3, #1
 8009794:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8009798:	2301      	movs	r3, #1
 800979a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800979c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097a0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80097a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80097a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80097a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80097ae:	2301      	movs	r3, #1
 80097b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80097b4:	2300      	movs	r3, #0
 80097b6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80097b8:	2300      	movs	r3, #0
 80097ba:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80097bc:	f107 0308 	add.w	r3, r7, #8
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff ff08 	bl	80095d8 <ETH_SetDMAConfig>
}
 80097c8:	bf00      	nop
 80097ca:	3798      	adds	r7, #152	; 0x98
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3305      	adds	r3, #5
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	021b      	lsls	r3, r3, #8
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	3204      	adds	r2, #4
 80097e8:	7812      	ldrb	r2, [r2, #0]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	4b11      	ldr	r3, [pc, #68]	; (8009838 <ETH_MACAddressConfig+0x68>)
 80097f2:	4413      	add	r3, r2
 80097f4:	461a      	mov	r2, r3
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	3303      	adds	r3, #3
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	061a      	lsls	r2, r3, #24
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	3302      	adds	r3, #2
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	041b      	lsls	r3, r3, #16
 800980a:	431a      	orrs	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3301      	adds	r3, #1
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	021b      	lsls	r3, r3, #8
 8009814:	4313      	orrs	r3, r2
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	7812      	ldrb	r2, [r2, #0]
 800981a:	4313      	orrs	r3, r2
 800981c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	4b06      	ldr	r3, [pc, #24]	; (800983c <ETH_MACAddressConfig+0x6c>)
 8009822:	4413      	add	r3, r2
 8009824:	461a      	mov	r2, r3
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	6013      	str	r3, [r2, #0]
}
 800982a:	bf00      	nop
 800982c:	371c      	adds	r7, #28
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	40028040 	.word	0x40028040
 800983c:	40028044 	.word	0x40028044

08009840 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009848:	2300      	movs	r3, #0
 800984a:	60fb      	str	r3, [r7, #12]
 800984c:	e03e      	b.n	80098cc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	68d9      	ldr	r1, [r3, #12]
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	4613      	mov	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	00db      	lsls	r3, r3, #3
 800985c:	440b      	add	r3, r1
 800985e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2200      	movs	r2, #0
 800986a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	2200      	movs	r2, #0
 8009870:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	2200      	movs	r2, #0
 8009876:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8009878:	68b9      	ldr	r1, [r7, #8]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	3206      	adds	r2, #6
 8009880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b02      	cmp	r3, #2
 8009894:	d80c      	bhi.n	80098b0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	68d9      	ldr	r1, [r3, #12]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	4613      	mov	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	00db      	lsls	r3, r3, #3
 80098a6:	440b      	add	r3, r1
 80098a8:	461a      	mov	r2, r3
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	60da      	str	r2, [r3, #12]
 80098ae:	e004      	b.n	80098ba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	461a      	mov	r2, r3
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3301      	adds	r3, #1
 80098ca:	60fb      	str	r3, [r7, #12]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d9bd      	bls.n	800984e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	68da      	ldr	r2, [r3, #12]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098e4:	611a      	str	r2, [r3, #16]
}
 80098e6:	bf00      	nop
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b085      	sub	sp, #20
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80098fa:	2300      	movs	r3, #0
 80098fc:	60fb      	str	r3, [r7, #12]
 80098fe:	e046      	b.n	800998e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6919      	ldr	r1, [r3, #16]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	4613      	mov	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	00db      	lsls	r3, r3, #3
 800990e:	440b      	add	r3, r1
 8009910:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	2200      	movs	r2, #0
 8009916:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	2200      	movs	r2, #0
 800991c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2200      	movs	r2, #0
 8009922:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2200      	movs	r2, #0
 8009928:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2200      	movs	r2, #0
 800992e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	2200      	movs	r2, #0
 8009934:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800993c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8009944:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8009952:	68b9      	ldr	r1, [r7, #8]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	3212      	adds	r2, #18
 800995a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2b02      	cmp	r3, #2
 8009962:	d80c      	bhi.n	800997e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6919      	ldr	r1, [r3, #16]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	4613      	mov	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	00db      	lsls	r3, r3, #3
 8009974:	440b      	add	r3, r1
 8009976:	461a      	mov	r2, r3
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	60da      	str	r2, [r3, #12]
 800997c:	e004      	b.n	8009988 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	461a      	mov	r2, r3
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	3301      	adds	r3, #1
 800998c:	60fb      	str	r3, [r7, #12]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b03      	cmp	r3, #3
 8009992:	d9b5      	bls.n	8009900 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	691a      	ldr	r2, [r3, #16]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099be:	60da      	str	r2, [r3, #12]
}
 80099c0:	bf00      	nop
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b08d      	sub	sp, #52	; 0x34
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	3318      	adds	r3, #24
 80099dc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80099ea:	2300      	movs	r3, #0
 80099ec:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a0e:	d007      	beq.n	8009a20 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	3304      	adds	r3, #4
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d001      	beq.n	8009a24 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8009a20:	2302      	movs	r3, #2
 8009a22:	e0ff      	b.n	8009c24 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	3301      	adds	r3, #1
 8009a28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8009a34:	6a3b      	ldr	r3, [r7, #32]
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	4b7d      	ldr	r3, [pc, #500]	; (8009c30 <ETH_Prepare_Tx_Descriptors+0x264>)
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	69fa      	ldr	r2, [r7, #28]
 8009a3e:	6852      	ldr	r2, [r2, #4]
 8009a40:	431a      	orrs	r2, r3
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d008      	beq.n	8009a64 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0320 	and.w	r3, r3, #32
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d008      	beq.n	8009a82 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	431a      	orrs	r2, r3
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0304 	and.w	r3, r3, #4
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d005      	beq.n	8009a9a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8009aa6:	f3bf 8f5f 	dmb	sy
}
 8009aaa:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8009ab8:	e082      	b.n	8009bc0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8009aba:	6a3b      	ldr	r3, [r7, #32]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d006      	beq.n	8009ada <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	e005      	b.n	8009ae6 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009ae2:	6a3b      	ldr	r3, [r7, #32]
 8009ae4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8009ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae8:	3301      	adds	r3, #1
 8009aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d902      	bls.n	8009af8 <ETH_Prepare_Tx_Descriptors+0x12c>
 8009af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af4:	3b04      	subs	r3, #4
 8009af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b00:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009b0a:	6a3b      	ldr	r3, [r7, #32]
 8009b0c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b1a:	d007      	beq.n	8009b2c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	3304      	adds	r3, #4
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d029      	beq.n	8009b80 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b38:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b3e:	e019      	b.n	8009b74 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8009b40:	f3bf 8f5f 	dmb	sy
}
 8009b44:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	3301      	adds	r3, #1
 8009b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d902      	bls.n	8009b64 <ETH_Prepare_Tx_Descriptors+0x198>
 8009b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b60:	3b04      	subs	r3, #4
 8009b62:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	3301      	adds	r3, #1
 8009b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d3e1      	bcc.n	8009b40 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	e051      	b.n	8009c24 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	3301      	adds	r3, #1
 8009b84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	461a      	mov	r2, r3
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	685a      	ldr	r2, [r3, #4]
 8009b9a:	4b25      	ldr	r3, [pc, #148]	; (8009c30 <ETH_Prepare_Tx_Descriptors+0x264>)
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	69fa      	ldr	r2, [r7, #28]
 8009ba0:	6852      	ldr	r2, [r2, #4]
 8009ba2:	431a      	orrs	r2, r3
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	3301      	adds	r3, #1
 8009bac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8009bae:	f3bf 8f5f 	dmb	sy
}
 8009bb2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f47f af78 	bne.w	8009aba <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d006      	beq.n	8009bde <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8009bd0:	6a3b      	ldr	r3, [r7, #32]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	e005      	b.n	8009bea <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8009bea:	6a3b      	ldr	r3, [r7, #32]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009bf2:	6a3b      	ldr	r3, [r7, #32]
 8009bf4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bfa:	6979      	ldr	r1, [r7, #20]
 8009bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfe:	3304      	adds	r3, #4
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	440b      	add	r3, r1
 8009c04:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c0a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c0c:	b672      	cpsid	i
}
 8009c0e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	4413      	add	r3, r2
 8009c18:	1c5a      	adds	r2, r3, #1
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8009c1e:	b662      	cpsie	i
}
 8009c20:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3734      	adds	r7, #52	; 0x34
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	ffffe000 	.word	0xffffe000

08009c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b089      	sub	sp, #36	; 0x24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8009c42:	2300      	movs	r3, #0
 8009c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8009c46:	2300      	movs	r3, #0
 8009c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009c4e:	2300      	movs	r3, #0
 8009c50:	61fb      	str	r3, [r7, #28]
 8009c52:	e175      	b.n	8009f40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009c54:	2201      	movs	r2, #1
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	4013      	ands	r3, r2
 8009c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	f040 8164 	bne.w	8009f3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f003 0303 	and.w	r3, r3, #3
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d005      	beq.n	8009c8a <HAL_GPIO_Init+0x56>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f003 0303 	and.w	r3, r3, #3
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	d130      	bne.n	8009cec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	005b      	lsls	r3, r3, #1
 8009c94:	2203      	movs	r2, #3
 8009c96:	fa02 f303 	lsl.w	r3, r2, r3
 8009c9a:	43db      	mvns	r3, r3
 8009c9c:	69ba      	ldr	r2, [r7, #24]
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	68da      	ldr	r2, [r3, #12]
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	005b      	lsls	r3, r3, #1
 8009caa:	fa02 f303 	lsl.w	r3, r2, r3
 8009cae:	69ba      	ldr	r2, [r7, #24]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	69ba      	ldr	r2, [r7, #24]
 8009cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc8:	43db      	mvns	r3, r3
 8009cca:	69ba      	ldr	r2, [r7, #24]
 8009ccc:	4013      	ands	r3, r2
 8009cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	091b      	lsrs	r3, r3, #4
 8009cd6:	f003 0201 	and.w	r2, r3, #1
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce0:	69ba      	ldr	r2, [r7, #24]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	69ba      	ldr	r2, [r7, #24]
 8009cea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	f003 0303 	and.w	r3, r3, #3
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d017      	beq.n	8009d28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	005b      	lsls	r3, r3, #1
 8009d02:	2203      	movs	r2, #3
 8009d04:	fa02 f303 	lsl.w	r3, r2, r3
 8009d08:	43db      	mvns	r3, r3
 8009d0a:	69ba      	ldr	r2, [r7, #24]
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	005b      	lsls	r3, r3, #1
 8009d18:	fa02 f303 	lsl.w	r3, r2, r3
 8009d1c:	69ba      	ldr	r2, [r7, #24]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	69ba      	ldr	r2, [r7, #24]
 8009d26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	f003 0303 	and.w	r3, r3, #3
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d123      	bne.n	8009d7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	08da      	lsrs	r2, r3, #3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3208      	adds	r2, #8
 8009d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	f003 0307 	and.w	r3, r3, #7
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	220f      	movs	r2, #15
 8009d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d50:	43db      	mvns	r3, r3
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	4013      	ands	r3, r2
 8009d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	691a      	ldr	r2, [r3, #16]
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	f003 0307 	and.w	r3, r3, #7
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	fa02 f303 	lsl.w	r3, r2, r3
 8009d68:	69ba      	ldr	r2, [r7, #24]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	08da      	lsrs	r2, r3, #3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3208      	adds	r2, #8
 8009d76:	69b9      	ldr	r1, [r7, #24]
 8009d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	2203      	movs	r2, #3
 8009d88:	fa02 f303 	lsl.w	r3, r2, r3
 8009d8c:	43db      	mvns	r3, r3
 8009d8e:	69ba      	ldr	r2, [r7, #24]
 8009d90:	4013      	ands	r3, r2
 8009d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	f003 0203 	and.w	r2, r3, #3
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	fa02 f303 	lsl.w	r3, r2, r3
 8009da4:	69ba      	ldr	r2, [r7, #24]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 80be 	beq.w	8009f3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009dbe:	4b66      	ldr	r3, [pc, #408]	; (8009f58 <HAL_GPIO_Init+0x324>)
 8009dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dc2:	4a65      	ldr	r2, [pc, #404]	; (8009f58 <HAL_GPIO_Init+0x324>)
 8009dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8009dca:	4b63      	ldr	r3, [pc, #396]	; (8009f58 <HAL_GPIO_Init+0x324>)
 8009dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009dd6:	4a61      	ldr	r2, [pc, #388]	; (8009f5c <HAL_GPIO_Init+0x328>)
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	089b      	lsrs	r3, r3, #2
 8009ddc:	3302      	adds	r3, #2
 8009dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	f003 0303 	and.w	r3, r3, #3
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	220f      	movs	r2, #15
 8009dee:	fa02 f303 	lsl.w	r3, r2, r3
 8009df2:	43db      	mvns	r3, r3
 8009df4:	69ba      	ldr	r2, [r7, #24]
 8009df6:	4013      	ands	r3, r2
 8009df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a58      	ldr	r2, [pc, #352]	; (8009f60 <HAL_GPIO_Init+0x32c>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d037      	beq.n	8009e72 <HAL_GPIO_Init+0x23e>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a57      	ldr	r2, [pc, #348]	; (8009f64 <HAL_GPIO_Init+0x330>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d031      	beq.n	8009e6e <HAL_GPIO_Init+0x23a>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a56      	ldr	r2, [pc, #344]	; (8009f68 <HAL_GPIO_Init+0x334>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d02b      	beq.n	8009e6a <HAL_GPIO_Init+0x236>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a55      	ldr	r2, [pc, #340]	; (8009f6c <HAL_GPIO_Init+0x338>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d025      	beq.n	8009e66 <HAL_GPIO_Init+0x232>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a54      	ldr	r2, [pc, #336]	; (8009f70 <HAL_GPIO_Init+0x33c>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d01f      	beq.n	8009e62 <HAL_GPIO_Init+0x22e>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a53      	ldr	r2, [pc, #332]	; (8009f74 <HAL_GPIO_Init+0x340>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d019      	beq.n	8009e5e <HAL_GPIO_Init+0x22a>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a52      	ldr	r2, [pc, #328]	; (8009f78 <HAL_GPIO_Init+0x344>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d013      	beq.n	8009e5a <HAL_GPIO_Init+0x226>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a51      	ldr	r2, [pc, #324]	; (8009f7c <HAL_GPIO_Init+0x348>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d00d      	beq.n	8009e56 <HAL_GPIO_Init+0x222>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a50      	ldr	r2, [pc, #320]	; (8009f80 <HAL_GPIO_Init+0x34c>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d007      	beq.n	8009e52 <HAL_GPIO_Init+0x21e>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a4f      	ldr	r2, [pc, #316]	; (8009f84 <HAL_GPIO_Init+0x350>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d101      	bne.n	8009e4e <HAL_GPIO_Init+0x21a>
 8009e4a:	2309      	movs	r3, #9
 8009e4c:	e012      	b.n	8009e74 <HAL_GPIO_Init+0x240>
 8009e4e:	230a      	movs	r3, #10
 8009e50:	e010      	b.n	8009e74 <HAL_GPIO_Init+0x240>
 8009e52:	2308      	movs	r3, #8
 8009e54:	e00e      	b.n	8009e74 <HAL_GPIO_Init+0x240>
 8009e56:	2307      	movs	r3, #7
 8009e58:	e00c      	b.n	8009e74 <HAL_GPIO_Init+0x240>
 8009e5a:	2306      	movs	r3, #6
 8009e5c:	e00a      	b.n	8009e74 <HAL_GPIO_Init+0x240>
 8009e5e:	2305      	movs	r3, #5
 8009e60:	e008      	b.n	8009e74 <HAL_GPIO_Init+0x240>
 8009e62:	2304      	movs	r3, #4
 8009e64:	e006      	b.n	8009e74 <HAL_GPIO_Init+0x240>
 8009e66:	2303      	movs	r3, #3
 8009e68:	e004      	b.n	8009e74 <HAL_GPIO_Init+0x240>
 8009e6a:	2302      	movs	r3, #2
 8009e6c:	e002      	b.n	8009e74 <HAL_GPIO_Init+0x240>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e000      	b.n	8009e74 <HAL_GPIO_Init+0x240>
 8009e72:	2300      	movs	r3, #0
 8009e74:	69fa      	ldr	r2, [r7, #28]
 8009e76:	f002 0203 	and.w	r2, r2, #3
 8009e7a:	0092      	lsls	r2, r2, #2
 8009e7c:	4093      	lsls	r3, r2
 8009e7e:	69ba      	ldr	r2, [r7, #24]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009e84:	4935      	ldr	r1, [pc, #212]	; (8009f5c <HAL_GPIO_Init+0x328>)
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	089b      	lsrs	r3, r3, #2
 8009e8a:	3302      	adds	r3, #2
 8009e8c:	69ba      	ldr	r2, [r7, #24]
 8009e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009e92:	4b3d      	ldr	r3, [pc, #244]	; (8009f88 <HAL_GPIO_Init+0x354>)
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	43db      	mvns	r3, r3
 8009e9c:	69ba      	ldr	r2, [r7, #24]
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d003      	beq.n	8009eb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009eae:	69ba      	ldr	r2, [r7, #24]
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009eb6:	4a34      	ldr	r2, [pc, #208]	; (8009f88 <HAL_GPIO_Init+0x354>)
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009ebc:	4b32      	ldr	r3, [pc, #200]	; (8009f88 <HAL_GPIO_Init+0x354>)
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	43db      	mvns	r3, r3
 8009ec6:	69ba      	ldr	r2, [r7, #24]
 8009ec8:	4013      	ands	r3, r2
 8009eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d003      	beq.n	8009ee0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009ed8:	69ba      	ldr	r2, [r7, #24]
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009ee0:	4a29      	ldr	r2, [pc, #164]	; (8009f88 <HAL_GPIO_Init+0x354>)
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009ee6:	4b28      	ldr	r3, [pc, #160]	; (8009f88 <HAL_GPIO_Init+0x354>)
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	43db      	mvns	r3, r3
 8009ef0:	69ba      	ldr	r2, [r7, #24]
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d003      	beq.n	8009f0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009f02:	69ba      	ldr	r2, [r7, #24]
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009f0a:	4a1f      	ldr	r2, [pc, #124]	; (8009f88 <HAL_GPIO_Init+0x354>)
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009f10:	4b1d      	ldr	r3, [pc, #116]	; (8009f88 <HAL_GPIO_Init+0x354>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	43db      	mvns	r3, r3
 8009f1a:	69ba      	ldr	r2, [r7, #24]
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d003      	beq.n	8009f34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009f2c:	69ba      	ldr	r2, [r7, #24]
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009f34:	4a14      	ldr	r2, [pc, #80]	; (8009f88 <HAL_GPIO_Init+0x354>)
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	61fb      	str	r3, [r7, #28]
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	2b0f      	cmp	r3, #15
 8009f44:	f67f ae86 	bls.w	8009c54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009f48:	bf00      	nop
 8009f4a:	bf00      	nop
 8009f4c:	3724      	adds	r7, #36	; 0x24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	40023800 	.word	0x40023800
 8009f5c:	40013800 	.word	0x40013800
 8009f60:	40020000 	.word	0x40020000
 8009f64:	40020400 	.word	0x40020400
 8009f68:	40020800 	.word	0x40020800
 8009f6c:	40020c00 	.word	0x40020c00
 8009f70:	40021000 	.word	0x40021000
 8009f74:	40021400 	.word	0x40021400
 8009f78:	40021800 	.word	0x40021800
 8009f7c:	40021c00 	.word	0x40021c00
 8009f80:	40022000 	.word	0x40022000
 8009f84:	40022400 	.word	0x40022400
 8009f88:	40013c00 	.word	0x40013c00

08009f8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	460b      	mov	r3, r1
 8009f96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	691a      	ldr	r2, [r3, #16]
 8009f9c:	887b      	ldrh	r3, [r7, #2]
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	73fb      	strb	r3, [r7, #15]
 8009fa8:	e001      	b.n	8009fae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009faa:	2300      	movs	r3, #0
 8009fac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	807b      	strh	r3, [r7, #2]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009fcc:	787b      	ldrb	r3, [r7, #1]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009fd2:	887a      	ldrh	r2, [r7, #2]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009fd8:	e003      	b.n	8009fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009fda:	887b      	ldrh	r3, [r7, #2]
 8009fdc:	041a      	lsls	r2, r3, #16
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	619a      	str	r2, [r3, #24]
}
 8009fe2:	bf00      	nop
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
	...

08009ff0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009ffa:	4b23      	ldr	r3, [pc, #140]	; (800a088 <HAL_PWREx_EnableOverDrive+0x98>)
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffe:	4a22      	ldr	r2, [pc, #136]	; (800a088 <HAL_PWREx_EnableOverDrive+0x98>)
 800a000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a004:	6413      	str	r3, [r2, #64]	; 0x40
 800a006:	4b20      	ldr	r3, [pc, #128]	; (800a088 <HAL_PWREx_EnableOverDrive+0x98>)
 800a008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a012:	4b1e      	ldr	r3, [pc, #120]	; (800a08c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a1d      	ldr	r2, [pc, #116]	; (800a08c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a01c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a01e:	f7fd fa89 	bl	8007534 <HAL_GetTick>
 800a022:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a024:	e009      	b.n	800a03a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a026:	f7fd fa85 	bl	8007534 <HAL_GetTick>
 800a02a:	4602      	mov	r2, r0
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a034:	d901      	bls.n	800a03a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e022      	b.n	800a080 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a03a:	4b14      	ldr	r3, [pc, #80]	; (800a08c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a046:	d1ee      	bne.n	800a026 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a048:	4b10      	ldr	r3, [pc, #64]	; (800a08c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a0f      	ldr	r2, [pc, #60]	; (800a08c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a04e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a052:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a054:	f7fd fa6e 	bl	8007534 <HAL_GetTick>
 800a058:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a05a:	e009      	b.n	800a070 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a05c:	f7fd fa6a 	bl	8007534 <HAL_GetTick>
 800a060:	4602      	mov	r2, r0
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a06a:	d901      	bls.n	800a070 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e007      	b.n	800a080 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a070:	4b06      	ldr	r3, [pc, #24]	; (800a08c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a07c:	d1ee      	bne.n	800a05c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	40023800 	.word	0x40023800
 800a08c:	40007000 	.word	0x40007000

0800a090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a098:	2300      	movs	r3, #0
 800a09a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e291      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 8087 	beq.w	800a1c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a0b4:	4b96      	ldr	r3, [pc, #600]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f003 030c 	and.w	r3, r3, #12
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	d00c      	beq.n	800a0da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0c0:	4b93      	ldr	r3, [pc, #588]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f003 030c 	and.w	r3, r3, #12
 800a0c8:	2b08      	cmp	r3, #8
 800a0ca:	d112      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x62>
 800a0cc:	4b90      	ldr	r3, [pc, #576]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0d8:	d10b      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0da:	4b8d      	ldr	r3, [pc, #564]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d06c      	beq.n	800a1c0 <HAL_RCC_OscConfig+0x130>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d168      	bne.n	800a1c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e26b      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0fa:	d106      	bne.n	800a10a <HAL_RCC_OscConfig+0x7a>
 800a0fc:	4b84      	ldr	r3, [pc, #528]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a83      	ldr	r2, [pc, #524]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a106:	6013      	str	r3, [r2, #0]
 800a108:	e02e      	b.n	800a168 <HAL_RCC_OscConfig+0xd8>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10c      	bne.n	800a12c <HAL_RCC_OscConfig+0x9c>
 800a112:	4b7f      	ldr	r3, [pc, #508]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a7e      	ldr	r2, [pc, #504]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a11c:	6013      	str	r3, [r2, #0]
 800a11e:	4b7c      	ldr	r3, [pc, #496]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a7b      	ldr	r2, [pc, #492]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a128:	6013      	str	r3, [r2, #0]
 800a12a:	e01d      	b.n	800a168 <HAL_RCC_OscConfig+0xd8>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a134:	d10c      	bne.n	800a150 <HAL_RCC_OscConfig+0xc0>
 800a136:	4b76      	ldr	r3, [pc, #472]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a75      	ldr	r2, [pc, #468]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a13c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a140:	6013      	str	r3, [r2, #0]
 800a142:	4b73      	ldr	r3, [pc, #460]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a72      	ldr	r2, [pc, #456]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a14c:	6013      	str	r3, [r2, #0]
 800a14e:	e00b      	b.n	800a168 <HAL_RCC_OscConfig+0xd8>
 800a150:	4b6f      	ldr	r3, [pc, #444]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a6e      	ldr	r2, [pc, #440]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a15a:	6013      	str	r3, [r2, #0]
 800a15c:	4b6c      	ldr	r3, [pc, #432]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a6b      	ldr	r2, [pc, #428]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d013      	beq.n	800a198 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a170:	f7fd f9e0 	bl	8007534 <HAL_GetTick>
 800a174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a176:	e008      	b.n	800a18a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a178:	f7fd f9dc 	bl	8007534 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b64      	cmp	r3, #100	; 0x64
 800a184:	d901      	bls.n	800a18a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e21f      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a18a:	4b61      	ldr	r3, [pc, #388]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0f0      	beq.n	800a178 <HAL_RCC_OscConfig+0xe8>
 800a196:	e014      	b.n	800a1c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a198:	f7fd f9cc 	bl	8007534 <HAL_GetTick>
 800a19c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a19e:	e008      	b.n	800a1b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1a0:	f7fd f9c8 	bl	8007534 <HAL_GetTick>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	2b64      	cmp	r3, #100	; 0x64
 800a1ac:	d901      	bls.n	800a1b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e20b      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1b2:	4b57      	ldr	r3, [pc, #348]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1f0      	bne.n	800a1a0 <HAL_RCC_OscConfig+0x110>
 800a1be:	e000      	b.n	800a1c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 0302 	and.w	r3, r3, #2
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d069      	beq.n	800a2a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a1ce:	4b50      	ldr	r3, [pc, #320]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f003 030c 	and.w	r3, r3, #12
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00b      	beq.n	800a1f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1da:	4b4d      	ldr	r3, [pc, #308]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 030c 	and.w	r3, r3, #12
 800a1e2:	2b08      	cmp	r3, #8
 800a1e4:	d11c      	bne.n	800a220 <HAL_RCC_OscConfig+0x190>
 800a1e6:	4b4a      	ldr	r3, [pc, #296]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d116      	bne.n	800a220 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1f2:	4b47      	ldr	r3, [pc, #284]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d005      	beq.n	800a20a <HAL_RCC_OscConfig+0x17a>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d001      	beq.n	800a20a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e1df      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a20a:	4b41      	ldr	r3, [pc, #260]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	493d      	ldr	r1, [pc, #244]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a21a:	4313      	orrs	r3, r2
 800a21c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a21e:	e040      	b.n	800a2a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d023      	beq.n	800a270 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a228:	4b39      	ldr	r3, [pc, #228]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a38      	ldr	r2, [pc, #224]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a22e:	f043 0301 	orr.w	r3, r3, #1
 800a232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a234:	f7fd f97e 	bl	8007534 <HAL_GetTick>
 800a238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a23a:	e008      	b.n	800a24e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a23c:	f7fd f97a 	bl	8007534 <HAL_GetTick>
 800a240:	4602      	mov	r2, r0
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	2b02      	cmp	r3, #2
 800a248:	d901      	bls.n	800a24e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e1bd      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a24e:	4b30      	ldr	r3, [pc, #192]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 0302 	and.w	r3, r3, #2
 800a256:	2b00      	cmp	r3, #0
 800a258:	d0f0      	beq.n	800a23c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a25a:	4b2d      	ldr	r3, [pc, #180]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	4929      	ldr	r1, [pc, #164]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a26a:	4313      	orrs	r3, r2
 800a26c:	600b      	str	r3, [r1, #0]
 800a26e:	e018      	b.n	800a2a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a270:	4b27      	ldr	r3, [pc, #156]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a26      	ldr	r2, [pc, #152]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a276:	f023 0301 	bic.w	r3, r3, #1
 800a27a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a27c:	f7fd f95a 	bl	8007534 <HAL_GetTick>
 800a280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a282:	e008      	b.n	800a296 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a284:	f7fd f956 	bl	8007534 <HAL_GetTick>
 800a288:	4602      	mov	r2, r0
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d901      	bls.n	800a296 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e199      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a296:	4b1e      	ldr	r3, [pc, #120]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1f0      	bne.n	800a284 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0308 	and.w	r3, r3, #8
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d038      	beq.n	800a320 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d019      	beq.n	800a2ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2b6:	4b16      	ldr	r3, [pc, #88]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ba:	4a15      	ldr	r2, [pc, #84]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2bc:	f043 0301 	orr.w	r3, r3, #1
 800a2c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2c2:	f7fd f937 	bl	8007534 <HAL_GetTick>
 800a2c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2c8:	e008      	b.n	800a2dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2ca:	f7fd f933 	bl	8007534 <HAL_GetTick>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d901      	bls.n	800a2dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e176      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2dc:	4b0c      	ldr	r3, [pc, #48]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d0f0      	beq.n	800a2ca <HAL_RCC_OscConfig+0x23a>
 800a2e8:	e01a      	b.n	800a320 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a2ea:	4b09      	ldr	r3, [pc, #36]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ee:	4a08      	ldr	r2, [pc, #32]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2f0:	f023 0301 	bic.w	r3, r3, #1
 800a2f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2f6:	f7fd f91d 	bl	8007534 <HAL_GetTick>
 800a2fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2fc:	e00a      	b.n	800a314 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2fe:	f7fd f919 	bl	8007534 <HAL_GetTick>
 800a302:	4602      	mov	r2, r0
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d903      	bls.n	800a314 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e15c      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
 800a310:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a314:	4b91      	ldr	r3, [pc, #580]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a318:	f003 0302 	and.w	r3, r3, #2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1ee      	bne.n	800a2fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0304 	and.w	r3, r3, #4
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 80a4 	beq.w	800a476 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a32e:	4b8b      	ldr	r3, [pc, #556]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10d      	bne.n	800a356 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a33a:	4b88      	ldr	r3, [pc, #544]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33e:	4a87      	ldr	r2, [pc, #540]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a344:	6413      	str	r3, [r2, #64]	; 0x40
 800a346:	4b85      	ldr	r3, [pc, #532]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a34e:	60bb      	str	r3, [r7, #8]
 800a350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a352:	2301      	movs	r3, #1
 800a354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a356:	4b82      	ldr	r3, [pc, #520]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d118      	bne.n	800a394 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a362:	4b7f      	ldr	r3, [pc, #508]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a7e      	ldr	r2, [pc, #504]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a36c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a36e:	f7fd f8e1 	bl	8007534 <HAL_GetTick>
 800a372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a374:	e008      	b.n	800a388 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a376:	f7fd f8dd 	bl	8007534 <HAL_GetTick>
 800a37a:	4602      	mov	r2, r0
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	2b64      	cmp	r3, #100	; 0x64
 800a382:	d901      	bls.n	800a388 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	e120      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a388:	4b75      	ldr	r3, [pc, #468]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a390:	2b00      	cmp	r3, #0
 800a392:	d0f0      	beq.n	800a376 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d106      	bne.n	800a3aa <HAL_RCC_OscConfig+0x31a>
 800a39c:	4b6f      	ldr	r3, [pc, #444]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a0:	4a6e      	ldr	r2, [pc, #440]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3a2:	f043 0301 	orr.w	r3, r3, #1
 800a3a6:	6713      	str	r3, [r2, #112]	; 0x70
 800a3a8:	e02d      	b.n	800a406 <HAL_RCC_OscConfig+0x376>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10c      	bne.n	800a3cc <HAL_RCC_OscConfig+0x33c>
 800a3b2:	4b6a      	ldr	r3, [pc, #424]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b6:	4a69      	ldr	r2, [pc, #420]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3b8:	f023 0301 	bic.w	r3, r3, #1
 800a3bc:	6713      	str	r3, [r2, #112]	; 0x70
 800a3be:	4b67      	ldr	r3, [pc, #412]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c2:	4a66      	ldr	r2, [pc, #408]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3c4:	f023 0304 	bic.w	r3, r3, #4
 800a3c8:	6713      	str	r3, [r2, #112]	; 0x70
 800a3ca:	e01c      	b.n	800a406 <HAL_RCC_OscConfig+0x376>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	2b05      	cmp	r3, #5
 800a3d2:	d10c      	bne.n	800a3ee <HAL_RCC_OscConfig+0x35e>
 800a3d4:	4b61      	ldr	r3, [pc, #388]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d8:	4a60      	ldr	r2, [pc, #384]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3da:	f043 0304 	orr.w	r3, r3, #4
 800a3de:	6713      	str	r3, [r2, #112]	; 0x70
 800a3e0:	4b5e      	ldr	r3, [pc, #376]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e4:	4a5d      	ldr	r2, [pc, #372]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3e6:	f043 0301 	orr.w	r3, r3, #1
 800a3ea:	6713      	str	r3, [r2, #112]	; 0x70
 800a3ec:	e00b      	b.n	800a406 <HAL_RCC_OscConfig+0x376>
 800a3ee:	4b5b      	ldr	r3, [pc, #364]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f2:	4a5a      	ldr	r2, [pc, #360]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3f4:	f023 0301 	bic.w	r3, r3, #1
 800a3f8:	6713      	str	r3, [r2, #112]	; 0x70
 800a3fa:	4b58      	ldr	r3, [pc, #352]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fe:	4a57      	ldr	r2, [pc, #348]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a400:	f023 0304 	bic.w	r3, r3, #4
 800a404:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d015      	beq.n	800a43a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a40e:	f7fd f891 	bl	8007534 <HAL_GetTick>
 800a412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a414:	e00a      	b.n	800a42c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a416:	f7fd f88d 	bl	8007534 <HAL_GetTick>
 800a41a:	4602      	mov	r2, r0
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	f241 3288 	movw	r2, #5000	; 0x1388
 800a424:	4293      	cmp	r3, r2
 800a426:	d901      	bls.n	800a42c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a428:	2303      	movs	r3, #3
 800a42a:	e0ce      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a42c:	4b4b      	ldr	r3, [pc, #300]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a430:	f003 0302 	and.w	r3, r3, #2
 800a434:	2b00      	cmp	r3, #0
 800a436:	d0ee      	beq.n	800a416 <HAL_RCC_OscConfig+0x386>
 800a438:	e014      	b.n	800a464 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a43a:	f7fd f87b 	bl	8007534 <HAL_GetTick>
 800a43e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a440:	e00a      	b.n	800a458 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a442:	f7fd f877 	bl	8007534 <HAL_GetTick>
 800a446:	4602      	mov	r2, r0
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a450:	4293      	cmp	r3, r2
 800a452:	d901      	bls.n	800a458 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a454:	2303      	movs	r3, #3
 800a456:	e0b8      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a458:	4b40      	ldr	r3, [pc, #256]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a45a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45c:	f003 0302 	and.w	r3, r3, #2
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1ee      	bne.n	800a442 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d105      	bne.n	800a476 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a46a:	4b3c      	ldr	r3, [pc, #240]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a46e:	4a3b      	ldr	r2, [pc, #236]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a474:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 80a4 	beq.w	800a5c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a480:	4b36      	ldr	r3, [pc, #216]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	f003 030c 	and.w	r3, r3, #12
 800a488:	2b08      	cmp	r3, #8
 800a48a:	d06b      	beq.n	800a564 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	699b      	ldr	r3, [r3, #24]
 800a490:	2b02      	cmp	r3, #2
 800a492:	d149      	bne.n	800a528 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a494:	4b31      	ldr	r3, [pc, #196]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a30      	ldr	r2, [pc, #192]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a49a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a49e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4a0:	f7fd f848 	bl	8007534 <HAL_GetTick>
 800a4a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4a6:	e008      	b.n	800a4ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4a8:	f7fd f844 	bl	8007534 <HAL_GetTick>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d901      	bls.n	800a4ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e087      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4ba:	4b28      	ldr	r3, [pc, #160]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1f0      	bne.n	800a4a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	69da      	ldr	r2, [r3, #28]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d4:	019b      	lsls	r3, r3, #6
 800a4d6:	431a      	orrs	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4dc:	085b      	lsrs	r3, r3, #1
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	041b      	lsls	r3, r3, #16
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e8:	061b      	lsls	r3, r3, #24
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	4a1b      	ldr	r2, [pc, #108]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a4ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a4f4:	4b19      	ldr	r3, [pc, #100]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a18      	ldr	r2, [pc, #96]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a4fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a4fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a500:	f7fd f818 	bl	8007534 <HAL_GetTick>
 800a504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a506:	e008      	b.n	800a51a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a508:	f7fd f814 	bl	8007534 <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	2b02      	cmp	r3, #2
 800a514:	d901      	bls.n	800a51a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e057      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a51a:	4b10      	ldr	r3, [pc, #64]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d0f0      	beq.n	800a508 <HAL_RCC_OscConfig+0x478>
 800a526:	e04f      	b.n	800a5c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a528:	4b0c      	ldr	r3, [pc, #48]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a0b      	ldr	r2, [pc, #44]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a52e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a534:	f7fc fffe 	bl	8007534 <HAL_GetTick>
 800a538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a53a:	e008      	b.n	800a54e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a53c:	f7fc fffa 	bl	8007534 <HAL_GetTick>
 800a540:	4602      	mov	r2, r0
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	2b02      	cmp	r3, #2
 800a548:	d901      	bls.n	800a54e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e03d      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a54e:	4b03      	ldr	r3, [pc, #12]	; (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1f0      	bne.n	800a53c <HAL_RCC_OscConfig+0x4ac>
 800a55a:	e035      	b.n	800a5c8 <HAL_RCC_OscConfig+0x538>
 800a55c:	40023800 	.word	0x40023800
 800a560:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a564:	4b1b      	ldr	r3, [pc, #108]	; (800a5d4 <HAL_RCC_OscConfig+0x544>)
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d028      	beq.n	800a5c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d121      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d11a      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a594:	4013      	ands	r3, r2
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a59a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d111      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5aa:	085b      	lsrs	r3, r3, #1
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d107      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d001      	beq.n	800a5c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e000      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	40023800 	.word	0x40023800

0800a5d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e0d0      	b.n	800a792 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a5f0:	4b6a      	ldr	r3, [pc, #424]	; (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 030f 	and.w	r3, r3, #15
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d910      	bls.n	800a620 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5fe:	4b67      	ldr	r3, [pc, #412]	; (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f023 020f 	bic.w	r2, r3, #15
 800a606:	4965      	ldr	r1, [pc, #404]	; (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a60e:	4b63      	ldr	r3, [pc, #396]	; (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 030f 	and.w	r3, r3, #15
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d001      	beq.n	800a620 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e0b8      	b.n	800a792 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 0302 	and.w	r3, r3, #2
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d020      	beq.n	800a66e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0304 	and.w	r3, r3, #4
 800a634:	2b00      	cmp	r3, #0
 800a636:	d005      	beq.n	800a644 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a638:	4b59      	ldr	r3, [pc, #356]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	4a58      	ldr	r2, [pc, #352]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a63e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a642:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0308 	and.w	r3, r3, #8
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d005      	beq.n	800a65c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a650:	4b53      	ldr	r3, [pc, #332]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	4a52      	ldr	r2, [pc, #328]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a65a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a65c:	4b50      	ldr	r3, [pc, #320]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	494d      	ldr	r1, [pc, #308]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a66a:	4313      	orrs	r3, r2
 800a66c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	d040      	beq.n	800a6fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d107      	bne.n	800a692 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a682:	4b47      	ldr	r3, [pc, #284]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d115      	bne.n	800a6ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e07f      	b.n	800a792 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d107      	bne.n	800a6aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a69a:	4b41      	ldr	r3, [pc, #260]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d109      	bne.n	800a6ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e073      	b.n	800a792 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6aa:	4b3d      	ldr	r3, [pc, #244]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0302 	and.w	r3, r3, #2
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d101      	bne.n	800a6ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e06b      	b.n	800a792 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6ba:	4b39      	ldr	r3, [pc, #228]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	f023 0203 	bic.w	r2, r3, #3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	4936      	ldr	r1, [pc, #216]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6cc:	f7fc ff32 	bl	8007534 <HAL_GetTick>
 800a6d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6d2:	e00a      	b.n	800a6ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6d4:	f7fc ff2e 	bl	8007534 <HAL_GetTick>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d901      	bls.n	800a6ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e053      	b.n	800a792 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6ea:	4b2d      	ldr	r3, [pc, #180]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	f003 020c 	and.w	r2, r3, #12
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d1eb      	bne.n	800a6d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6fc:	4b27      	ldr	r3, [pc, #156]	; (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 030f 	and.w	r3, r3, #15
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	429a      	cmp	r2, r3
 800a708:	d210      	bcs.n	800a72c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a70a:	4b24      	ldr	r3, [pc, #144]	; (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f023 020f 	bic.w	r2, r3, #15
 800a712:	4922      	ldr	r1, [pc, #136]	; (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	4313      	orrs	r3, r2
 800a718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a71a:	4b20      	ldr	r3, [pc, #128]	; (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 030f 	and.w	r3, r3, #15
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	429a      	cmp	r2, r3
 800a726:	d001      	beq.n	800a72c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e032      	b.n	800a792 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0304 	and.w	r3, r3, #4
 800a734:	2b00      	cmp	r3, #0
 800a736:	d008      	beq.n	800a74a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a738:	4b19      	ldr	r3, [pc, #100]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	4916      	ldr	r1, [pc, #88]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a746:	4313      	orrs	r3, r2
 800a748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0308 	and.w	r3, r3, #8
 800a752:	2b00      	cmp	r3, #0
 800a754:	d009      	beq.n	800a76a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a756:	4b12      	ldr	r3, [pc, #72]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	00db      	lsls	r3, r3, #3
 800a764:	490e      	ldr	r1, [pc, #56]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a766:	4313      	orrs	r3, r2
 800a768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a76a:	f000 f821 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800a76e:	4602      	mov	r2, r0
 800a770:	4b0b      	ldr	r3, [pc, #44]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	091b      	lsrs	r3, r3, #4
 800a776:	f003 030f 	and.w	r3, r3, #15
 800a77a:	490a      	ldr	r1, [pc, #40]	; (800a7a4 <HAL_RCC_ClockConfig+0x1cc>)
 800a77c:	5ccb      	ldrb	r3, [r1, r3]
 800a77e:	fa22 f303 	lsr.w	r3, r2, r3
 800a782:	4a09      	ldr	r2, [pc, #36]	; (800a7a8 <HAL_RCC_ClockConfig+0x1d0>)
 800a784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a786:	4b09      	ldr	r3, [pc, #36]	; (800a7ac <HAL_RCC_ClockConfig+0x1d4>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fc fb8a 	bl	8006ea4 <HAL_InitTick>

  return HAL_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	40023c00 	.word	0x40023c00
 800a7a0:	40023800 	.word	0x40023800
 800a7a4:	08023fa8 	.word	0x08023fa8
 800a7a8:	20000004 	.word	0x20000004
 800a7ac:	20000008 	.word	0x20000008

0800a7b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7b4:	b090      	sub	sp, #64	; 0x40
 800a7b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a7bc:	2300      	movs	r3, #0
 800a7be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7c8:	4b59      	ldr	r3, [pc, #356]	; (800a930 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	f003 030c 	and.w	r3, r3, #12
 800a7d0:	2b08      	cmp	r3, #8
 800a7d2:	d00d      	beq.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x40>
 800a7d4:	2b08      	cmp	r3, #8
 800a7d6:	f200 80a1 	bhi.w	800a91c <HAL_RCC_GetSysClockFreq+0x16c>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d002      	beq.n	800a7e4 <HAL_RCC_GetSysClockFreq+0x34>
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d003      	beq.n	800a7ea <HAL_RCC_GetSysClockFreq+0x3a>
 800a7e2:	e09b      	b.n	800a91c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a7e4:	4b53      	ldr	r3, [pc, #332]	; (800a934 <HAL_RCC_GetSysClockFreq+0x184>)
 800a7e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a7e8:	e09b      	b.n	800a922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a7ea:	4b53      	ldr	r3, [pc, #332]	; (800a938 <HAL_RCC_GetSysClockFreq+0x188>)
 800a7ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a7ee:	e098      	b.n	800a922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a7f0:	4b4f      	ldr	r3, [pc, #316]	; (800a930 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a7fa:	4b4d      	ldr	r3, [pc, #308]	; (800a930 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d028      	beq.n	800a858 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a806:	4b4a      	ldr	r3, [pc, #296]	; (800a930 <HAL_RCC_GetSysClockFreq+0x180>)
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	099b      	lsrs	r3, r3, #6
 800a80c:	2200      	movs	r2, #0
 800a80e:	623b      	str	r3, [r7, #32]
 800a810:	627a      	str	r2, [r7, #36]	; 0x24
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a818:	2100      	movs	r1, #0
 800a81a:	4b47      	ldr	r3, [pc, #284]	; (800a938 <HAL_RCC_GetSysClockFreq+0x188>)
 800a81c:	fb03 f201 	mul.w	r2, r3, r1
 800a820:	2300      	movs	r3, #0
 800a822:	fb00 f303 	mul.w	r3, r0, r3
 800a826:	4413      	add	r3, r2
 800a828:	4a43      	ldr	r2, [pc, #268]	; (800a938 <HAL_RCC_GetSysClockFreq+0x188>)
 800a82a:	fba0 1202 	umull	r1, r2, r0, r2
 800a82e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a830:	460a      	mov	r2, r1
 800a832:	62ba      	str	r2, [r7, #40]	; 0x28
 800a834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a836:	4413      	add	r3, r2
 800a838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a83c:	2200      	movs	r2, #0
 800a83e:	61bb      	str	r3, [r7, #24]
 800a840:	61fa      	str	r2, [r7, #28]
 800a842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a846:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a84a:	f7f5 fd39 	bl	80002c0 <__aeabi_uldivmod>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	4613      	mov	r3, r2
 800a854:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a856:	e053      	b.n	800a900 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a858:	4b35      	ldr	r3, [pc, #212]	; (800a930 <HAL_RCC_GetSysClockFreq+0x180>)
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	099b      	lsrs	r3, r3, #6
 800a85e:	2200      	movs	r2, #0
 800a860:	613b      	str	r3, [r7, #16]
 800a862:	617a      	str	r2, [r7, #20]
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a86a:	f04f 0b00 	mov.w	fp, #0
 800a86e:	4652      	mov	r2, sl
 800a870:	465b      	mov	r3, fp
 800a872:	f04f 0000 	mov.w	r0, #0
 800a876:	f04f 0100 	mov.w	r1, #0
 800a87a:	0159      	lsls	r1, r3, #5
 800a87c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a880:	0150      	lsls	r0, r2, #5
 800a882:	4602      	mov	r2, r0
 800a884:	460b      	mov	r3, r1
 800a886:	ebb2 080a 	subs.w	r8, r2, sl
 800a88a:	eb63 090b 	sbc.w	r9, r3, fp
 800a88e:	f04f 0200 	mov.w	r2, #0
 800a892:	f04f 0300 	mov.w	r3, #0
 800a896:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a89a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a89e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a8a2:	ebb2 0408 	subs.w	r4, r2, r8
 800a8a6:	eb63 0509 	sbc.w	r5, r3, r9
 800a8aa:	f04f 0200 	mov.w	r2, #0
 800a8ae:	f04f 0300 	mov.w	r3, #0
 800a8b2:	00eb      	lsls	r3, r5, #3
 800a8b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8b8:	00e2      	lsls	r2, r4, #3
 800a8ba:	4614      	mov	r4, r2
 800a8bc:	461d      	mov	r5, r3
 800a8be:	eb14 030a 	adds.w	r3, r4, sl
 800a8c2:	603b      	str	r3, [r7, #0]
 800a8c4:	eb45 030b 	adc.w	r3, r5, fp
 800a8c8:	607b      	str	r3, [r7, #4]
 800a8ca:	f04f 0200 	mov.w	r2, #0
 800a8ce:	f04f 0300 	mov.w	r3, #0
 800a8d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	028b      	lsls	r3, r1, #10
 800a8da:	4621      	mov	r1, r4
 800a8dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	028a      	lsls	r2, r1, #10
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	60bb      	str	r3, [r7, #8]
 800a8ee:	60fa      	str	r2, [r7, #12]
 800a8f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a8f4:	f7f5 fce4 	bl	80002c0 <__aeabi_uldivmod>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a900:	4b0b      	ldr	r3, [pc, #44]	; (800a930 <HAL_RCC_GetSysClockFreq+0x180>)
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	0c1b      	lsrs	r3, r3, #16
 800a906:	f003 0303 	and.w	r3, r3, #3
 800a90a:	3301      	adds	r3, #1
 800a90c:	005b      	lsls	r3, r3, #1
 800a90e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800a910:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	fbb2 f3f3 	udiv	r3, r2, r3
 800a918:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a91a:	e002      	b.n	800a922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a91c:	4b05      	ldr	r3, [pc, #20]	; (800a934 <HAL_RCC_GetSysClockFreq+0x184>)
 800a91e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a920:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a924:	4618      	mov	r0, r3
 800a926:	3740      	adds	r7, #64	; 0x40
 800a928:	46bd      	mov	sp, r7
 800a92a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a92e:	bf00      	nop
 800a930:	40023800 	.word	0x40023800
 800a934:	00f42400 	.word	0x00f42400
 800a938:	017d7840 	.word	0x017d7840

0800a93c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a940:	4b03      	ldr	r3, [pc, #12]	; (800a950 <HAL_RCC_GetHCLKFreq+0x14>)
 800a942:	681b      	ldr	r3, [r3, #0]
}
 800a944:	4618      	mov	r0, r3
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	20000004 	.word	0x20000004

0800a954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a958:	f7ff fff0 	bl	800a93c <HAL_RCC_GetHCLKFreq>
 800a95c:	4602      	mov	r2, r0
 800a95e:	4b05      	ldr	r3, [pc, #20]	; (800a974 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	0a9b      	lsrs	r3, r3, #10
 800a964:	f003 0307 	and.w	r3, r3, #7
 800a968:	4903      	ldr	r1, [pc, #12]	; (800a978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a96a:	5ccb      	ldrb	r3, [r1, r3]
 800a96c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a970:	4618      	mov	r0, r3
 800a972:	bd80      	pop	{r7, pc}
 800a974:	40023800 	.word	0x40023800
 800a978:	08023fb8 	.word	0x08023fb8

0800a97c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a980:	f7ff ffdc 	bl	800a93c <HAL_RCC_GetHCLKFreq>
 800a984:	4602      	mov	r2, r0
 800a986:	4b05      	ldr	r3, [pc, #20]	; (800a99c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	0b5b      	lsrs	r3, r3, #13
 800a98c:	f003 0307 	and.w	r3, r3, #7
 800a990:	4903      	ldr	r1, [pc, #12]	; (800a9a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a992:	5ccb      	ldrb	r3, [r1, r3]
 800a994:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a998:	4618      	mov	r0, r3
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	40023800 	.word	0x40023800
 800a9a0:	08023fb8 	.word	0x08023fb8

0800a9a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	220f      	movs	r2, #15
 800a9b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a9b4:	4b12      	ldr	r3, [pc, #72]	; (800aa00 <HAL_RCC_GetClockConfig+0x5c>)
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	f003 0203 	and.w	r2, r3, #3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a9c0:	4b0f      	ldr	r3, [pc, #60]	; (800aa00 <HAL_RCC_GetClockConfig+0x5c>)
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a9cc:	4b0c      	ldr	r3, [pc, #48]	; (800aa00 <HAL_RCC_GetClockConfig+0x5c>)
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a9d8:	4b09      	ldr	r3, [pc, #36]	; (800aa00 <HAL_RCC_GetClockConfig+0x5c>)
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	08db      	lsrs	r3, r3, #3
 800a9de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a9e6:	4b07      	ldr	r3, [pc, #28]	; (800aa04 <HAL_RCC_GetClockConfig+0x60>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 020f 	and.w	r2, r3, #15
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	601a      	str	r2, [r3, #0]
}
 800a9f2:	bf00      	nop
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	40023800 	.word	0x40023800
 800aa04:	40023c00 	.word	0x40023c00

0800aa08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 0301 	and.w	r3, r3, #1
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d012      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aa30:	4b69      	ldr	r3, [pc, #420]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	4a68      	ldr	r2, [pc, #416]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aa3a:	6093      	str	r3, [r2, #8]
 800aa3c:	4b66      	ldr	r3, [pc, #408]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa3e:	689a      	ldr	r2, [r3, #8]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa44:	4964      	ldr	r1, [pc, #400]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa46:	4313      	orrs	r3, r2
 800aa48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800aa52:	2301      	movs	r3, #1
 800aa54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d017      	beq.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa62:	4b5d      	ldr	r3, [pc, #372]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa70:	4959      	ldr	r1, [pc, #356]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa72:	4313      	orrs	r3, r2
 800aa74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa80:	d101      	bne.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800aa82:	2301      	movs	r3, #1
 800aa84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d017      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800aa9e:	4b4e      	ldr	r3, [pc, #312]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aaa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaac:	494a      	ldr	r1, [pc, #296]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aaae:	4313      	orrs	r3, r2
 800aab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aabc:	d101      	bne.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800aabe:	2301      	movs	r3, #1
 800aac0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800aaca:	2301      	movs	r3, #1
 800aacc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d001      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800aada:	2301      	movs	r3, #1
 800aadc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 0320 	and.w	r3, r3, #32
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f000 808b 	beq.w	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800aaec:	4b3a      	ldr	r3, [pc, #232]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aaee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf0:	4a39      	ldr	r2, [pc, #228]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aaf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaf6:	6413      	str	r3, [r2, #64]	; 0x40
 800aaf8:	4b37      	ldr	r3, [pc, #220]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab00:	60bb      	str	r3, [r7, #8]
 800ab02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab04:	4b35      	ldr	r3, [pc, #212]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a34      	ldr	r2, [pc, #208]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ab0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab10:	f7fc fd10 	bl	8007534 <HAL_GetTick>
 800ab14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ab16:	e008      	b.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab18:	f7fc fd0c 	bl	8007534 <HAL_GetTick>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	2b64      	cmp	r3, #100	; 0x64
 800ab24:	d901      	bls.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ab26:	2303      	movs	r3, #3
 800ab28:	e357      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ab2a:	4b2c      	ldr	r3, [pc, #176]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d0f0      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ab36:	4b28      	ldr	r3, [pc, #160]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d035      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d02e      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab54:	4b20      	ldr	r3, [pc, #128]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ab5e:	4b1e      	ldr	r3, [pc, #120]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab62:	4a1d      	ldr	r2, [pc, #116]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ab6a:	4b1b      	ldr	r3, [pc, #108]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab6e:	4a1a      	ldr	r2, [pc, #104]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ab76:	4a18      	ldr	r2, [pc, #96]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ab7c:	4b16      	ldr	r3, [pc, #88]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab80:	f003 0301 	and.w	r3, r3, #1
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d114      	bne.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab88:	f7fc fcd4 	bl	8007534 <HAL_GetTick>
 800ab8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab8e:	e00a      	b.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab90:	f7fc fcd0 	bl	8007534 <HAL_GetTick>
 800ab94:	4602      	mov	r2, r0
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	1ad3      	subs	r3, r2, r3
 800ab9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d901      	bls.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e319      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aba6:	4b0c      	ldr	r3, [pc, #48]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abaa:	f003 0302 	and.w	r3, r3, #2
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d0ee      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abbe:	d111      	bne.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800abc0:	4b05      	ldr	r3, [pc, #20]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800abcc:	4b04      	ldr	r3, [pc, #16]	; (800abe0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800abce:	400b      	ands	r3, r1
 800abd0:	4901      	ldr	r1, [pc, #4]	; (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abd2:	4313      	orrs	r3, r2
 800abd4:	608b      	str	r3, [r1, #8]
 800abd6:	e00b      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800abd8:	40023800 	.word	0x40023800
 800abdc:	40007000 	.word	0x40007000
 800abe0:	0ffffcff 	.word	0x0ffffcff
 800abe4:	4baa      	ldr	r3, [pc, #680]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	4aa9      	ldr	r2, [pc, #676]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800abee:	6093      	str	r3, [r2, #8]
 800abf0:	4ba7      	ldr	r3, [pc, #668]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abfc:	49a4      	ldr	r1, [pc, #656]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abfe:	4313      	orrs	r3, r2
 800ac00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0310 	and.w	r3, r3, #16
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d010      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ac0e:	4ba0      	ldr	r3, [pc, #640]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac14:	4a9e      	ldr	r2, [pc, #632]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ac1e:	4b9c      	ldr	r3, [pc, #624]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac28:	4999      	ldr	r1, [pc, #612]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00a      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ac3c:	4b94      	ldr	r3, [pc, #592]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac4a:	4991      	ldr	r1, [pc, #580]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00a      	beq.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ac5e:	4b8c      	ldr	r3, [pc, #560]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac6c:	4988      	ldr	r1, [pc, #544]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00a      	beq.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ac80:	4b83      	ldr	r3, [pc, #524]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac8e:	4980      	ldr	r1, [pc, #512]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac90:	4313      	orrs	r3, r2
 800ac92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00a      	beq.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aca2:	4b7b      	ldr	r3, [pc, #492]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb0:	4977      	ldr	r1, [pc, #476]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acb2:	4313      	orrs	r3, r2
 800acb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00a      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800acc4:	4b72      	ldr	r3, [pc, #456]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acca:	f023 0203 	bic.w	r2, r3, #3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acd2:	496f      	ldr	r1, [pc, #444]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acd4:	4313      	orrs	r3, r2
 800acd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00a      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ace6:	4b6a      	ldr	r3, [pc, #424]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ace8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acec:	f023 020c 	bic.w	r2, r3, #12
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acf4:	4966      	ldr	r1, [pc, #408]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acf6:	4313      	orrs	r3, r2
 800acf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00a      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ad08:	4b61      	ldr	r3, [pc, #388]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad16:	495e      	ldr	r1, [pc, #376]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00a      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ad2a:	4b59      	ldr	r3, [pc, #356]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad38:	4955      	ldr	r1, [pc, #340]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00a      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ad4c:	4b50      	ldr	r3, [pc, #320]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad5a:	494d      	ldr	r1, [pc, #308]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00a      	beq.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ad6e:	4b48      	ldr	r3, [pc, #288]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad7c:	4944      	ldr	r1, [pc, #272]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00a      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ad90:	4b3f      	ldr	r3, [pc, #252]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad9e:	493c      	ldr	r1, [pc, #240]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ada0:	4313      	orrs	r3, r2
 800ada2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00a      	beq.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800adb2:	4b37      	ldr	r3, [pc, #220]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800adb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adc0:	4933      	ldr	r1, [pc, #204]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800adc2:	4313      	orrs	r3, r2
 800adc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00a      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800add4:	4b2e      	ldr	r3, [pc, #184]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800add6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ade2:	492b      	ldr	r1, [pc, #172]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ade4:	4313      	orrs	r3, r2
 800ade6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d011      	beq.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800adf6:	4b26      	ldr	r3, [pc, #152]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800adf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae04:	4922      	ldr	r1, [pc, #136]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae06:	4313      	orrs	r3, r2
 800ae08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae14:	d101      	bne.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800ae16:	2301      	movs	r3, #1
 800ae18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0308 	and.w	r3, r3, #8
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800ae26:	2301      	movs	r3, #1
 800ae28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00a      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae36:	4b16      	ldr	r3, [pc, #88]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae44:	4912      	ldr	r1, [pc, #72]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae46:	4313      	orrs	r3, r2
 800ae48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00b      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ae58:	4b0d      	ldr	r3, [pc, #52]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae68:	4909      	ldr	r1, [pc, #36]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d006      	beq.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f000 80d9 	beq.w	800b036 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ae84:	4b02      	ldr	r3, [pc, #8]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a01      	ldr	r2, [pc, #4]	; (800ae90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ae8e:	e001      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800ae90:	40023800 	.word	0x40023800
 800ae94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae96:	f7fc fb4d 	bl	8007534 <HAL_GetTick>
 800ae9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ae9c:	e008      	b.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ae9e:	f7fc fb49 	bl	8007534 <HAL_GetTick>
 800aea2:	4602      	mov	r2, r0
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	2b64      	cmp	r3, #100	; 0x64
 800aeaa:	d901      	bls.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e194      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aeb0:	4b6c      	ldr	r3, [pc, #432]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1f0      	bne.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 0301 	and.w	r3, r3, #1
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d021      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d11d      	bne.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800aed0:	4b64      	ldr	r3, [pc, #400]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aed6:	0c1b      	lsrs	r3, r3, #16
 800aed8:	f003 0303 	and.w	r3, r3, #3
 800aedc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800aede:	4b61      	ldr	r3, [pc, #388]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aee4:	0e1b      	lsrs	r3, r3, #24
 800aee6:	f003 030f 	and.w	r3, r3, #15
 800aeea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	019a      	lsls	r2, r3, #6
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	041b      	lsls	r3, r3, #16
 800aef6:	431a      	orrs	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	061b      	lsls	r3, r3, #24
 800aefc:	431a      	orrs	r2, r3
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	071b      	lsls	r3, r3, #28
 800af04:	4957      	ldr	r1, [pc, #348]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af06:	4313      	orrs	r3, r2
 800af08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af14:	2b00      	cmp	r3, #0
 800af16:	d004      	beq.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af20:	d00a      	beq.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d02e      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af36:	d129      	bne.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800af38:	4b4a      	ldr	r3, [pc, #296]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af3e:	0c1b      	lsrs	r3, r3, #16
 800af40:	f003 0303 	and.w	r3, r3, #3
 800af44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800af46:	4b47      	ldr	r3, [pc, #284]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af4c:	0f1b      	lsrs	r3, r3, #28
 800af4e:	f003 0307 	and.w	r3, r3, #7
 800af52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	019a      	lsls	r2, r3, #6
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	041b      	lsls	r3, r3, #16
 800af5e:	431a      	orrs	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	061b      	lsls	r3, r3, #24
 800af66:	431a      	orrs	r2, r3
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	071b      	lsls	r3, r3, #28
 800af6c:	493d      	ldr	r1, [pc, #244]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af6e:	4313      	orrs	r3, r2
 800af70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800af74:	4b3b      	ldr	r3, [pc, #236]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af7a:	f023 021f 	bic.w	r2, r3, #31
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af82:	3b01      	subs	r3, #1
 800af84:	4937      	ldr	r1, [pc, #220]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af86:	4313      	orrs	r3, r2
 800af88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af94:	2b00      	cmp	r3, #0
 800af96:	d01d      	beq.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800af98:	4b32      	ldr	r3, [pc, #200]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af9e:	0e1b      	lsrs	r3, r3, #24
 800afa0:	f003 030f 	and.w	r3, r3, #15
 800afa4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800afa6:	4b2f      	ldr	r3, [pc, #188]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800afa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afac:	0f1b      	lsrs	r3, r3, #28
 800afae:	f003 0307 	and.w	r3, r3, #7
 800afb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	019a      	lsls	r2, r3, #6
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	691b      	ldr	r3, [r3, #16]
 800afbe:	041b      	lsls	r3, r3, #16
 800afc0:	431a      	orrs	r2, r3
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	061b      	lsls	r3, r3, #24
 800afc6:	431a      	orrs	r2, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	071b      	lsls	r3, r3, #28
 800afcc:	4925      	ldr	r1, [pc, #148]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800afce:	4313      	orrs	r3, r2
 800afd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d011      	beq.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	019a      	lsls	r2, r3, #6
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	041b      	lsls	r3, r3, #16
 800afec:	431a      	orrs	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	061b      	lsls	r3, r3, #24
 800aff4:	431a      	orrs	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	071b      	lsls	r3, r3, #28
 800affc:	4919      	ldr	r1, [pc, #100]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800affe:	4313      	orrs	r3, r2
 800b000:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b004:	4b17      	ldr	r3, [pc, #92]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a16      	ldr	r2, [pc, #88]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b00a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b00e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b010:	f7fc fa90 	bl	8007534 <HAL_GetTick>
 800b014:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b016:	e008      	b.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b018:	f7fc fa8c 	bl	8007534 <HAL_GetTick>
 800b01c:	4602      	mov	r2, r0
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	1ad3      	subs	r3, r2, r3
 800b022:	2b64      	cmp	r3, #100	; 0x64
 800b024:	d901      	bls.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b026:	2303      	movs	r3, #3
 800b028:	e0d7      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b02a:	4b0e      	ldr	r3, [pc, #56]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b032:	2b00      	cmp	r3, #0
 800b034:	d0f0      	beq.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	f040 80cd 	bne.w	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b03e:	4b09      	ldr	r3, [pc, #36]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a08      	ldr	r2, [pc, #32]	; (800b064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b04a:	f7fc fa73 	bl	8007534 <HAL_GetTick>
 800b04e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b050:	e00a      	b.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b052:	f7fc fa6f 	bl	8007534 <HAL_GetTick>
 800b056:	4602      	mov	r2, r0
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	1ad3      	subs	r3, r2, r3
 800b05c:	2b64      	cmp	r3, #100	; 0x64
 800b05e:	d903      	bls.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b060:	2303      	movs	r3, #3
 800b062:	e0ba      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b064:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b068:	4b5e      	ldr	r3, [pc, #376]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b074:	d0ed      	beq.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d003      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x682>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b086:	2b00      	cmp	r3, #0
 800b088:	d009      	beq.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b092:	2b00      	cmp	r3, #0
 800b094:	d02e      	beq.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d12a      	bne.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b09e:	4b51      	ldr	r3, [pc, #324]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0a4:	0c1b      	lsrs	r3, r3, #16
 800b0a6:	f003 0303 	and.w	r3, r3, #3
 800b0aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b0ac:	4b4d      	ldr	r3, [pc, #308]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b0ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0b2:	0f1b      	lsrs	r3, r3, #28
 800b0b4:	f003 0307 	and.w	r3, r3, #7
 800b0b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	695b      	ldr	r3, [r3, #20]
 800b0be:	019a      	lsls	r2, r3, #6
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	041b      	lsls	r3, r3, #16
 800b0c4:	431a      	orrs	r2, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	061b      	lsls	r3, r3, #24
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	071b      	lsls	r3, r3, #28
 800b0d2:	4944      	ldr	r1, [pc, #272]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b0da:	4b42      	ldr	r3, [pc, #264]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b0dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	021b      	lsls	r3, r3, #8
 800b0ec:	493d      	ldr	r1, [pc, #244]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d022      	beq.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b108:	d11d      	bne.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b10a:	4b36      	ldr	r3, [pc, #216]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b110:	0e1b      	lsrs	r3, r3, #24
 800b112:	f003 030f 	and.w	r3, r3, #15
 800b116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b118:	4b32      	ldr	r3, [pc, #200]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b11e:	0f1b      	lsrs	r3, r3, #28
 800b120:	f003 0307 	and.w	r3, r3, #7
 800b124:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	695b      	ldr	r3, [r3, #20]
 800b12a:	019a      	lsls	r2, r3, #6
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a1b      	ldr	r3, [r3, #32]
 800b130:	041b      	lsls	r3, r3, #16
 800b132:	431a      	orrs	r2, r3
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	061b      	lsls	r3, r3, #24
 800b138:	431a      	orrs	r2, r3
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	071b      	lsls	r3, r3, #28
 800b13e:	4929      	ldr	r1, [pc, #164]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b140:	4313      	orrs	r3, r2
 800b142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 0308 	and.w	r3, r3, #8
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d028      	beq.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b152:	4b24      	ldr	r3, [pc, #144]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b158:	0e1b      	lsrs	r3, r3, #24
 800b15a:	f003 030f 	and.w	r3, r3, #15
 800b15e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b160:	4b20      	ldr	r3, [pc, #128]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b166:	0c1b      	lsrs	r3, r3, #16
 800b168:	f003 0303 	and.w	r3, r3, #3
 800b16c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	695b      	ldr	r3, [r3, #20]
 800b172:	019a      	lsls	r2, r3, #6
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	041b      	lsls	r3, r3, #16
 800b178:	431a      	orrs	r2, r3
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	061b      	lsls	r3, r3, #24
 800b17e:	431a      	orrs	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	69db      	ldr	r3, [r3, #28]
 800b184:	071b      	lsls	r3, r3, #28
 800b186:	4917      	ldr	r1, [pc, #92]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b188:	4313      	orrs	r3, r2
 800b18a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b18e:	4b15      	ldr	r3, [pc, #84]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b194:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19c:	4911      	ldr	r1, [pc, #68]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b1a4:	4b0f      	ldr	r3, [pc, #60]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a0e      	ldr	r2, [pc, #56]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1b0:	f7fc f9c0 	bl	8007534 <HAL_GetTick>
 800b1b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b1b6:	e008      	b.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b1b8:	f7fc f9bc 	bl	8007534 <HAL_GetTick>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	2b64      	cmp	r3, #100	; 0x64
 800b1c4:	d901      	bls.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	e007      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b1ca:	4b06      	ldr	r3, [pc, #24]	; (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1d6:	d1ef      	bne.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3720      	adds	r7, #32
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	40023800 	.word	0x40023800

0800b1e8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d101      	bne.n	800b1fe <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e038      	b.n	800b270 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b204:	b2db      	uxtb	r3, r3
 800b206:	2b00      	cmp	r3, #0
 800b208:	d106      	bne.n	800b218 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f7fb fe3c 	bl	8006e90 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	3308      	adds	r3, #8
 800b220:	4619      	mov	r1, r3
 800b222:	4610      	mov	r0, r2
 800b224:	f001 ff82 	bl	800d12c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6818      	ldr	r0, [r3, #0]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	461a      	mov	r2, r3
 800b232:	68b9      	ldr	r1, [r7, #8]
 800b234:	f002 f80a 	bl	800d24c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6858      	ldr	r0, [r3, #4]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	689a      	ldr	r2, [r3, #8]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b244:	6879      	ldr	r1, [r7, #4]
 800b246:	f002 f851 	bl	800d2ec <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	6892      	ldr	r2, [r2, #8]
 800b252:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	6892      	ldr	r2, [r2, #8]
 800b25e:	f041 0101 	orr.w	r1, r1, #1
 800b262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d101      	bne.n	800b28a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e049      	b.n	800b31e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b290:	b2db      	uxtb	r3, r3
 800b292:	2b00      	cmp	r3, #0
 800b294:	d106      	bne.n	800b2a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7fb fbac 	bl	80069fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	4610      	mov	r0, r2
 800b2b8:	f000 f9f6 	bl	800b6a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2201      	movs	r2, #1
 800b300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
	...

0800b328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b336:	b2db      	uxtb	r3, r3
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d001      	beq.n	800b340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e054      	b.n	800b3ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2202      	movs	r2, #2
 800b344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68da      	ldr	r2, [r3, #12]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f042 0201 	orr.w	r2, r2, #1
 800b356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a26      	ldr	r2, [pc, #152]	; (800b3f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d022      	beq.n	800b3a8 <HAL_TIM_Base_Start_IT+0x80>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b36a:	d01d      	beq.n	800b3a8 <HAL_TIM_Base_Start_IT+0x80>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a22      	ldr	r2, [pc, #136]	; (800b3fc <HAL_TIM_Base_Start_IT+0xd4>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d018      	beq.n	800b3a8 <HAL_TIM_Base_Start_IT+0x80>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a21      	ldr	r2, [pc, #132]	; (800b400 <HAL_TIM_Base_Start_IT+0xd8>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d013      	beq.n	800b3a8 <HAL_TIM_Base_Start_IT+0x80>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a1f      	ldr	r2, [pc, #124]	; (800b404 <HAL_TIM_Base_Start_IT+0xdc>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d00e      	beq.n	800b3a8 <HAL_TIM_Base_Start_IT+0x80>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a1e      	ldr	r2, [pc, #120]	; (800b408 <HAL_TIM_Base_Start_IT+0xe0>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d009      	beq.n	800b3a8 <HAL_TIM_Base_Start_IT+0x80>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a1c      	ldr	r2, [pc, #112]	; (800b40c <HAL_TIM_Base_Start_IT+0xe4>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d004      	beq.n	800b3a8 <HAL_TIM_Base_Start_IT+0x80>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a1b      	ldr	r2, [pc, #108]	; (800b410 <HAL_TIM_Base_Start_IT+0xe8>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d115      	bne.n	800b3d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	689a      	ldr	r2, [r3, #8]
 800b3ae:	4b19      	ldr	r3, [pc, #100]	; (800b414 <HAL_TIM_Base_Start_IT+0xec>)
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2b06      	cmp	r3, #6
 800b3b8:	d015      	beq.n	800b3e6 <HAL_TIM_Base_Start_IT+0xbe>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3c0:	d011      	beq.n	800b3e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f042 0201 	orr.w	r2, r2, #1
 800b3d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3d2:	e008      	b.n	800b3e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f042 0201 	orr.w	r2, r2, #1
 800b3e2:	601a      	str	r2, [r3, #0]
 800b3e4:	e000      	b.n	800b3e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3714      	adds	r7, #20
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	40010000 	.word	0x40010000
 800b3fc:	40000400 	.word	0x40000400
 800b400:	40000800 	.word	0x40000800
 800b404:	40000c00 	.word	0x40000c00
 800b408:	40010400 	.word	0x40010400
 800b40c:	40014000 	.word	0x40014000
 800b410:	40001800 	.word	0x40001800
 800b414:	00010007 	.word	0x00010007

0800b418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	f003 0302 	and.w	r3, r3, #2
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	d122      	bne.n	800b474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	f003 0302 	and.w	r3, r3, #2
 800b438:	2b02      	cmp	r3, #2
 800b43a:	d11b      	bne.n	800b474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f06f 0202 	mvn.w	r2, #2
 800b444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	699b      	ldr	r3, [r3, #24]
 800b452:	f003 0303 	and.w	r3, r3, #3
 800b456:	2b00      	cmp	r3, #0
 800b458:	d003      	beq.n	800b462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f905 	bl	800b66a <HAL_TIM_IC_CaptureCallback>
 800b460:	e005      	b.n	800b46e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f8f7 	bl	800b656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 f908 	bl	800b67e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	f003 0304 	and.w	r3, r3, #4
 800b47e:	2b04      	cmp	r3, #4
 800b480:	d122      	bne.n	800b4c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	f003 0304 	and.w	r3, r3, #4
 800b48c:	2b04      	cmp	r3, #4
 800b48e:	d11b      	bne.n	800b4c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f06f 0204 	mvn.w	r2, #4
 800b498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2202      	movs	r2, #2
 800b49e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	699b      	ldr	r3, [r3, #24]
 800b4a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d003      	beq.n	800b4b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f8db 	bl	800b66a <HAL_TIM_IC_CaptureCallback>
 800b4b4:	e005      	b.n	800b4c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f8cd 	bl	800b656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f8de 	bl	800b67e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	691b      	ldr	r3, [r3, #16]
 800b4ce:	f003 0308 	and.w	r3, r3, #8
 800b4d2:	2b08      	cmp	r3, #8
 800b4d4:	d122      	bne.n	800b51c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	f003 0308 	and.w	r3, r3, #8
 800b4e0:	2b08      	cmp	r3, #8
 800b4e2:	d11b      	bne.n	800b51c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f06f 0208 	mvn.w	r2, #8
 800b4ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2204      	movs	r2, #4
 800b4f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	69db      	ldr	r3, [r3, #28]
 800b4fa:	f003 0303 	and.w	r3, r3, #3
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d003      	beq.n	800b50a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 f8b1 	bl	800b66a <HAL_TIM_IC_CaptureCallback>
 800b508:	e005      	b.n	800b516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 f8a3 	bl	800b656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 f8b4 	bl	800b67e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	691b      	ldr	r3, [r3, #16]
 800b522:	f003 0310 	and.w	r3, r3, #16
 800b526:	2b10      	cmp	r3, #16
 800b528:	d122      	bne.n	800b570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	f003 0310 	and.w	r3, r3, #16
 800b534:	2b10      	cmp	r3, #16
 800b536:	d11b      	bne.n	800b570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f06f 0210 	mvn.w	r2, #16
 800b540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2208      	movs	r2, #8
 800b546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	69db      	ldr	r3, [r3, #28]
 800b54e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b552:	2b00      	cmp	r3, #0
 800b554:	d003      	beq.n	800b55e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f887 	bl	800b66a <HAL_TIM_IC_CaptureCallback>
 800b55c:	e005      	b.n	800b56a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 f879 	bl	800b656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f88a 	bl	800b67e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	f003 0301 	and.w	r3, r3, #1
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d10e      	bne.n	800b59c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	f003 0301 	and.w	r3, r3, #1
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d107      	bne.n	800b59c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f06f 0201 	mvn.w	r2, #1
 800b594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f7f5 ffec 	bl	8001574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5a6:	2b80      	cmp	r3, #128	; 0x80
 800b5a8:	d10e      	bne.n	800b5c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5b4:	2b80      	cmp	r3, #128	; 0x80
 800b5b6:	d107      	bne.n	800b5c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f9a8 	bl	800b918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5d6:	d10e      	bne.n	800b5f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5e2:	2b80      	cmp	r3, #128	; 0x80
 800b5e4:	d107      	bne.n	800b5f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b5ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 f99b 	bl	800b92c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	691b      	ldr	r3, [r3, #16]
 800b5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b600:	2b40      	cmp	r3, #64	; 0x40
 800b602:	d10e      	bne.n	800b622 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b60e:	2b40      	cmp	r3, #64	; 0x40
 800b610:	d107      	bne.n	800b622 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b61a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f838 	bl	800b692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	f003 0320 	and.w	r3, r3, #32
 800b62c:	2b20      	cmp	r3, #32
 800b62e:	d10e      	bne.n	800b64e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	f003 0320 	and.w	r3, r3, #32
 800b63a:	2b20      	cmp	r3, #32
 800b63c:	d107      	bne.n	800b64e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f06f 0220 	mvn.w	r2, #32
 800b646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f95b 	bl	800b904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b64e:	bf00      	nop
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b656:	b480      	push	{r7}
 800b658:	b083      	sub	sp, #12
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b65e:	bf00      	nop
 800b660:	370c      	adds	r7, #12
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr

0800b66a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b66a:	b480      	push	{r7}
 800b66c:	b083      	sub	sp, #12
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b672:	bf00      	nop
 800b674:	370c      	adds	r7, #12
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b67e:	b480      	push	{r7}
 800b680:	b083      	sub	sp, #12
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b686:	bf00      	nop
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b69a:	bf00      	nop
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
	...

0800b6a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a40      	ldr	r2, [pc, #256]	; (800b7bc <TIM_Base_SetConfig+0x114>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d013      	beq.n	800b6e8 <TIM_Base_SetConfig+0x40>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c6:	d00f      	beq.n	800b6e8 <TIM_Base_SetConfig+0x40>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a3d      	ldr	r2, [pc, #244]	; (800b7c0 <TIM_Base_SetConfig+0x118>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d00b      	beq.n	800b6e8 <TIM_Base_SetConfig+0x40>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a3c      	ldr	r2, [pc, #240]	; (800b7c4 <TIM_Base_SetConfig+0x11c>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d007      	beq.n	800b6e8 <TIM_Base_SetConfig+0x40>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a3b      	ldr	r2, [pc, #236]	; (800b7c8 <TIM_Base_SetConfig+0x120>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d003      	beq.n	800b6e8 <TIM_Base_SetConfig+0x40>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4a3a      	ldr	r2, [pc, #232]	; (800b7cc <TIM_Base_SetConfig+0x124>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d108      	bne.n	800b6fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a2f      	ldr	r2, [pc, #188]	; (800b7bc <TIM_Base_SetConfig+0x114>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d02b      	beq.n	800b75a <TIM_Base_SetConfig+0xb2>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b708:	d027      	beq.n	800b75a <TIM_Base_SetConfig+0xb2>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a2c      	ldr	r2, [pc, #176]	; (800b7c0 <TIM_Base_SetConfig+0x118>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d023      	beq.n	800b75a <TIM_Base_SetConfig+0xb2>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a2b      	ldr	r2, [pc, #172]	; (800b7c4 <TIM_Base_SetConfig+0x11c>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d01f      	beq.n	800b75a <TIM_Base_SetConfig+0xb2>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a2a      	ldr	r2, [pc, #168]	; (800b7c8 <TIM_Base_SetConfig+0x120>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d01b      	beq.n	800b75a <TIM_Base_SetConfig+0xb2>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a29      	ldr	r2, [pc, #164]	; (800b7cc <TIM_Base_SetConfig+0x124>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d017      	beq.n	800b75a <TIM_Base_SetConfig+0xb2>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a28      	ldr	r2, [pc, #160]	; (800b7d0 <TIM_Base_SetConfig+0x128>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d013      	beq.n	800b75a <TIM_Base_SetConfig+0xb2>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a27      	ldr	r2, [pc, #156]	; (800b7d4 <TIM_Base_SetConfig+0x12c>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d00f      	beq.n	800b75a <TIM_Base_SetConfig+0xb2>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a26      	ldr	r2, [pc, #152]	; (800b7d8 <TIM_Base_SetConfig+0x130>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d00b      	beq.n	800b75a <TIM_Base_SetConfig+0xb2>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4a25      	ldr	r2, [pc, #148]	; (800b7dc <TIM_Base_SetConfig+0x134>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d007      	beq.n	800b75a <TIM_Base_SetConfig+0xb2>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a24      	ldr	r2, [pc, #144]	; (800b7e0 <TIM_Base_SetConfig+0x138>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d003      	beq.n	800b75a <TIM_Base_SetConfig+0xb2>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a23      	ldr	r2, [pc, #140]	; (800b7e4 <TIM_Base_SetConfig+0x13c>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d108      	bne.n	800b76c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	4313      	orrs	r3, r2
 800b76a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	695b      	ldr	r3, [r3, #20]
 800b776:	4313      	orrs	r3, r2
 800b778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	689a      	ldr	r2, [r3, #8]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a0a      	ldr	r2, [pc, #40]	; (800b7bc <TIM_Base_SetConfig+0x114>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d003      	beq.n	800b7a0 <TIM_Base_SetConfig+0xf8>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a0c      	ldr	r2, [pc, #48]	; (800b7cc <TIM_Base_SetConfig+0x124>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d103      	bne.n	800b7a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	691a      	ldr	r2, [r3, #16]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	615a      	str	r2, [r3, #20]
}
 800b7ae:	bf00      	nop
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	40010000 	.word	0x40010000
 800b7c0:	40000400 	.word	0x40000400
 800b7c4:	40000800 	.word	0x40000800
 800b7c8:	40000c00 	.word	0x40000c00
 800b7cc:	40010400 	.word	0x40010400
 800b7d0:	40014000 	.word	0x40014000
 800b7d4:	40014400 	.word	0x40014400
 800b7d8:	40014800 	.word	0x40014800
 800b7dc:	40001800 	.word	0x40001800
 800b7e0:	40001c00 	.word	0x40001c00
 800b7e4:	40002000 	.word	0x40002000

0800b7e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d101      	bne.n	800b800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	e06d      	b.n	800b8dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2202      	movs	r2, #2
 800b80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a30      	ldr	r2, [pc, #192]	; (800b8e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d004      	beq.n	800b834 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a2f      	ldr	r2, [pc, #188]	; (800b8ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d108      	bne.n	800b846 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b83a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	4313      	orrs	r3, r2
 800b844:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b84c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	4313      	orrs	r3, r2
 800b856:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a20      	ldr	r2, [pc, #128]	; (800b8e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d022      	beq.n	800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b872:	d01d      	beq.n	800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a1d      	ldr	r2, [pc, #116]	; (800b8f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d018      	beq.n	800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a1c      	ldr	r2, [pc, #112]	; (800b8f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d013      	beq.n	800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a1a      	ldr	r2, [pc, #104]	; (800b8f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d00e      	beq.n	800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a15      	ldr	r2, [pc, #84]	; (800b8ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d009      	beq.n	800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a16      	ldr	r2, [pc, #88]	; (800b8fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d004      	beq.n	800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a15      	ldr	r2, [pc, #84]	; (800b900 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d10c      	bne.n	800b8ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3714      	adds	r7, #20
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr
 800b8e8:	40010000 	.word	0x40010000
 800b8ec:	40010400 	.word	0x40010400
 800b8f0:	40000400 	.word	0x40000400
 800b8f4:	40000800 	.word	0x40000800
 800b8f8:	40000c00 	.word	0x40000c00
 800b8fc:	40014000 	.word	0x40014000
 800b900:	40001800 	.word	0x40001800

0800b904 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b920:	bf00      	nop
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b934:	bf00      	nop
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d101      	bne.n	800b952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e040      	b.n	800b9d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b956:	2b00      	cmp	r3, #0
 800b958:	d106      	bne.n	800b968 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f7fb f870 	bl	8006a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2224      	movs	r2, #36	; 0x24
 800b96c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f022 0201 	bic.w	r2, r2, #1
 800b97c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 fc44 	bl	800c20c <UART_SetConfig>
 800b984:	4603      	mov	r3, r0
 800b986:	2b01      	cmp	r3, #1
 800b988:	d101      	bne.n	800b98e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	e022      	b.n	800b9d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b992:	2b00      	cmp	r3, #0
 800b994:	d002      	beq.n	800b99c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fe9c 	bl	800c6d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	685a      	ldr	r2, [r3, #4]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	689a      	ldr	r2, [r3, #8]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f042 0201 	orr.w	r2, r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 ff23 	bl	800c818 <UART_CheckIdleState>
 800b9d2:	4603      	mov	r3, r0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b08a      	sub	sp, #40	; 0x28
 800b9e0:	af02      	add	r7, sp, #8
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	603b      	str	r3, [r7, #0]
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9f0:	2b20      	cmp	r3, #32
 800b9f2:	d171      	bne.n	800bad8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d002      	beq.n	800ba00 <HAL_UART_Transmit+0x24>
 800b9fa:	88fb      	ldrh	r3, [r7, #6]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d101      	bne.n	800ba04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e06a      	b.n	800bada <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2221      	movs	r2, #33	; 0x21
 800ba10:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba12:	f7fb fd8f 	bl	8007534 <HAL_GetTick>
 800ba16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	88fa      	ldrh	r2, [r7, #6]
 800ba1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	88fa      	ldrh	r2, [r7, #6]
 800ba24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba30:	d108      	bne.n	800ba44 <HAL_UART_Transmit+0x68>
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d104      	bne.n	800ba44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	61bb      	str	r3, [r7, #24]
 800ba42:	e003      	b.n	800ba4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ba4c:	e02c      	b.n	800baa8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2200      	movs	r2, #0
 800ba56:	2180      	movs	r1, #128	; 0x80
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f000 ff14 	bl	800c886 <UART_WaitOnFlagUntilTimeout>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d001      	beq.n	800ba68 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800ba64:	2303      	movs	r3, #3
 800ba66:	e038      	b.n	800bada <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d10b      	bne.n	800ba86 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	881b      	ldrh	r3, [r3, #0]
 800ba72:	461a      	mov	r2, r3
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	3302      	adds	r3, #2
 800ba82:	61bb      	str	r3, [r7, #24]
 800ba84:	e007      	b.n	800ba96 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	781a      	ldrb	r2, [r3, #0]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	3301      	adds	r3, #1
 800ba94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800baae:	b29b      	uxth	r3, r3
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1cc      	bne.n	800ba4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	2200      	movs	r2, #0
 800babc:	2140      	movs	r1, #64	; 0x40
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f000 fee1 	bl	800c886 <UART_WaitOnFlagUntilTimeout>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d001      	beq.n	800bace <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800baca:	2303      	movs	r3, #3
 800bacc:	e005      	b.n	800bada <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2220      	movs	r2, #32
 800bad2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	e000      	b.n	800bada <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800bad8:	2302      	movs	r3, #2
  }
}
 800bada:	4618      	mov	r0, r3
 800badc:	3720      	adds	r7, #32
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
	...

0800bae4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b08b      	sub	sp, #44	; 0x2c
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	4613      	mov	r3, r2
 800baf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baf6:	2b20      	cmp	r3, #32
 800baf8:	d147      	bne.n	800bb8a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d002      	beq.n	800bb06 <HAL_UART_Transmit_IT+0x22>
 800bb00:	88fb      	ldrh	r3, [r7, #6]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d101      	bne.n	800bb0a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800bb06:	2301      	movs	r3, #1
 800bb08:	e040      	b.n	800bb8c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	68ba      	ldr	r2, [r7, #8]
 800bb0e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	88fa      	ldrh	r2, [r7, #6]
 800bb14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	88fa      	ldrh	r2, [r7, #6]
 800bb1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2221      	movs	r2, #33	; 0x21
 800bb32:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb3c:	d107      	bne.n	800bb4e <HAL_UART_Transmit_IT+0x6a>
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d103      	bne.n	800bb4e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	4a13      	ldr	r2, [pc, #76]	; (800bb98 <HAL_UART_Transmit_IT+0xb4>)
 800bb4a:	66da      	str	r2, [r3, #108]	; 0x6c
 800bb4c:	e002      	b.n	800bb54 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	4a12      	ldr	r2, [pc, #72]	; (800bb9c <HAL_UART_Transmit_IT+0xb8>)
 800bb52:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	e853 3f00 	ldrex	r3, [r3]
 800bb60:	613b      	str	r3, [r7, #16]
   return(result);
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb68:	627b      	str	r3, [r7, #36]	; 0x24
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb72:	623b      	str	r3, [r7, #32]
 800bb74:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb76:	69f9      	ldr	r1, [r7, #28]
 800bb78:	6a3a      	ldr	r2, [r7, #32]
 800bb7a:	e841 2300 	strex	r3, r2, [r1]
 800bb7e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1e6      	bne.n	800bb54 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800bb86:	2300      	movs	r3, #0
 800bb88:	e000      	b.n	800bb8c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800bb8a:	2302      	movs	r3, #2
  }
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	372c      	adds	r7, #44	; 0x2c
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr
 800bb98:	0800cd4b 	.word	0x0800cd4b
 800bb9c:	0800cc95 	.word	0x0800cc95

0800bba0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b08a      	sub	sp, #40	; 0x28
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbb4:	2b20      	cmp	r3, #32
 800bbb6:	d132      	bne.n	800bc1e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d002      	beq.n	800bbc4 <HAL_UART_Receive_IT+0x24>
 800bbbe:	88fb      	ldrh	r3, [r7, #6]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d101      	bne.n	800bbc8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e02b      	b.n	800bc20 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d018      	beq.n	800bc0e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	e853 3f00 	ldrex	r3, [r3]
 800bbe8:	613b      	str	r3, [r7, #16]
   return(result);
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bbf0:	627b      	str	r3, [r7, #36]	; 0x24
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfa:	623b      	str	r3, [r7, #32]
 800bbfc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfe:	69f9      	ldr	r1, [r7, #28]
 800bc00:	6a3a      	ldr	r2, [r7, #32]
 800bc02:	e841 2300 	strex	r3, r2, [r1]
 800bc06:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d1e6      	bne.n	800bbdc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bc0e:	88fb      	ldrh	r3, [r7, #6]
 800bc10:	461a      	mov	r2, r3
 800bc12:	68b9      	ldr	r1, [r7, #8]
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f000 fefd 	bl	800ca14 <UART_Start_Receive_IT>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	e000      	b.n	800bc20 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800bc1e:	2302      	movs	r3, #2
  }
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3728      	adds	r7, #40	; 0x28
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b0ba      	sub	sp, #232	; 0xe8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	69db      	ldr	r3, [r3, #28]
 800bc36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bc4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bc52:	f640 030f 	movw	r3, #2063	; 0x80f
 800bc56:	4013      	ands	r3, r2
 800bc58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bc5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d115      	bne.n	800bc90 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bc64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc68:	f003 0320 	and.w	r3, r3, #32
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00f      	beq.n	800bc90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bc70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc74:	f003 0320 	and.w	r3, r3, #32
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d009      	beq.n	800bc90 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f000 8297 	beq.w	800c1b4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	4798      	blx	r3
      }
      return;
 800bc8e:	e291      	b.n	800c1b4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bc90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f000 8117 	beq.w	800bec8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800bc9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc9e:	f003 0301 	and.w	r3, r3, #1
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d106      	bne.n	800bcb4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800bca6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bcaa:	4b85      	ldr	r3, [pc, #532]	; (800bec0 <HAL_UART_IRQHandler+0x298>)
 800bcac:	4013      	ands	r3, r2
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f000 810a 	beq.w	800bec8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bcb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcb8:	f003 0301 	and.w	r3, r3, #1
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d011      	beq.n	800bce4 <HAL_UART_IRQHandler+0xbc>
 800bcc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00b      	beq.n	800bce4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcda:	f043 0201 	orr.w	r2, r3, #1
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bce8:	f003 0302 	and.w	r3, r3, #2
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d011      	beq.n	800bd14 <HAL_UART_IRQHandler+0xec>
 800bcf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcf4:	f003 0301 	and.w	r3, r3, #1
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00b      	beq.n	800bd14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2202      	movs	r2, #2
 800bd02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd0a:	f043 0204 	orr.w	r2, r3, #4
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd18:	f003 0304 	and.w	r3, r3, #4
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d011      	beq.n	800bd44 <HAL_UART_IRQHandler+0x11c>
 800bd20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd24:	f003 0301 	and.w	r3, r3, #1
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00b      	beq.n	800bd44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2204      	movs	r2, #4
 800bd32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd3a:	f043 0202 	orr.w	r2, r3, #2
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bd44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd48:	f003 0308 	and.w	r3, r3, #8
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d017      	beq.n	800bd80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bd50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd54:	f003 0320 	and.w	r3, r3, #32
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d105      	bne.n	800bd68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bd5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00b      	beq.n	800bd80 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2208      	movs	r2, #8
 800bd6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd76:	f043 0208 	orr.w	r2, r3, #8
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bd80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d012      	beq.n	800bdb2 <HAL_UART_IRQHandler+0x18a>
 800bd8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00c      	beq.n	800bdb2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bda0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bda8:	f043 0220 	orr.w	r2, r3, #32
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 81fd 	beq.w	800c1b8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bdbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdc2:	f003 0320 	and.w	r3, r3, #32
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00d      	beq.n	800bde6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bdca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdce:	f003 0320 	and.w	r3, r3, #32
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d007      	beq.n	800bde6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d003      	beq.n	800bde6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdfa:	2b40      	cmp	r3, #64	; 0x40
 800bdfc:	d005      	beq.n	800be0a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bdfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be06:	2b00      	cmp	r3, #0
 800be08:	d04f      	beq.n	800beaa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fec8 	bl	800cba0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be1a:	2b40      	cmp	r3, #64	; 0x40
 800be1c:	d141      	bne.n	800bea2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3308      	adds	r3, #8
 800be24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be2c:	e853 3f00 	ldrex	r3, [r3]
 800be30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800be34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800be38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	3308      	adds	r3, #8
 800be46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800be4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800be4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800be56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800be5a:	e841 2300 	strex	r3, r2, [r1]
 800be5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800be62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1d9      	bne.n	800be1e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d013      	beq.n	800be9a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be76:	4a13      	ldr	r2, [pc, #76]	; (800bec4 <HAL_UART_IRQHandler+0x29c>)
 800be78:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be7e:	4618      	mov	r0, r3
 800be80:	f7fc fc08 	bl	8008694 <HAL_DMA_Abort_IT>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d017      	beq.n	800beba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800be94:	4610      	mov	r0, r2
 800be96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be98:	e00f      	b.n	800beba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 f9a0 	bl	800c1e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bea0:	e00b      	b.n	800beba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f99c 	bl	800c1e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bea8:	e007      	b.n	800beba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 f998 	bl	800c1e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800beb8:	e17e      	b.n	800c1b8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800beba:	bf00      	nop
    return;
 800bebc:	e17c      	b.n	800c1b8 <HAL_UART_IRQHandler+0x590>
 800bebe:	bf00      	nop
 800bec0:	04000120 	.word	0x04000120
 800bec4:	0800cc69 	.word	0x0800cc69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800becc:	2b01      	cmp	r3, #1
 800bece:	f040 814c 	bne.w	800c16a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bed6:	f003 0310 	and.w	r3, r3, #16
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f000 8145 	beq.w	800c16a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bee4:	f003 0310 	and.w	r3, r3, #16
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f000 813e 	beq.w	800c16a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2210      	movs	r2, #16
 800bef4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf00:	2b40      	cmp	r3, #64	; 0x40
 800bf02:	f040 80b6 	bne.w	800c072 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 8150 	beq.w	800c1bc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bf22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf26:	429a      	cmp	r2, r3
 800bf28:	f080 8148 	bcs.w	800c1bc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf3a:	69db      	ldr	r3, [r3, #28]
 800bf3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf40:	f000 8086 	beq.w	800c050 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf50:	e853 3f00 	ldrex	r3, [r3]
 800bf54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bf58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	461a      	mov	r2, r3
 800bf6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bf6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bf7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf7e:	e841 2300 	strex	r3, r2, [r1]
 800bf82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1da      	bne.n	800bf44 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	3308      	adds	r3, #8
 800bf94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf98:	e853 3f00 	ldrex	r3, [r3]
 800bf9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfa0:	f023 0301 	bic.w	r3, r3, #1
 800bfa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3308      	adds	r3, #8
 800bfae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bfb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bfb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bfba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bfbe:	e841 2300 	strex	r3, r2, [r1]
 800bfc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bfc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1e1      	bne.n	800bf8e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	3308      	adds	r3, #8
 800bfd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfd4:	e853 3f00 	ldrex	r3, [r3]
 800bfd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bfda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	3308      	adds	r3, #8
 800bfea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bfee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bff0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bff4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bff6:	e841 2300 	strex	r3, r2, [r1]
 800bffa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1e3      	bne.n	800bfca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2220      	movs	r2, #32
 800c006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c018:	e853 3f00 	ldrex	r3, [r3]
 800c01c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c01e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c020:	f023 0310 	bic.w	r3, r3, #16
 800c024:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	461a      	mov	r2, r3
 800c02e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c032:	65bb      	str	r3, [r7, #88]	; 0x58
 800c034:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c036:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c038:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c03a:	e841 2300 	strex	r3, r2, [r1]
 800c03e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1e4      	bne.n	800c010 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fc fab2 	bl	80085b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2202      	movs	r2, #2
 800c054:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c062:	b29b      	uxth	r3, r3
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	b29b      	uxth	r3, r3
 800c068:	4619      	mov	r1, r3
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f8c2 	bl	800c1f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c070:	e0a4      	b.n	800c1bc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c07e:	b29b      	uxth	r3, r3
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f000 8096 	beq.w	800c1c0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800c094:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 8091 	beq.w	800c1c0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	e853 3f00 	ldrex	r3, [r3]
 800c0aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c0c0:	647b      	str	r3, [r7, #68]	; 0x44
 800c0c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c0c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0c8:	e841 2300 	strex	r3, r2, [r1]
 800c0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d1e4      	bne.n	800c09e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	3308      	adds	r3, #8
 800c0da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0de:	e853 3f00 	ldrex	r3, [r3]
 800c0e2:	623b      	str	r3, [r7, #32]
   return(result);
 800c0e4:	6a3b      	ldr	r3, [r7, #32]
 800c0e6:	f023 0301 	bic.w	r3, r3, #1
 800c0ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3308      	adds	r3, #8
 800c0f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c0f8:	633a      	str	r2, [r7, #48]	; 0x30
 800c0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c100:	e841 2300 	strex	r3, r2, [r1]
 800c104:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1e3      	bne.n	800c0d4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2220      	movs	r2, #32
 800c110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	e853 3f00 	ldrex	r3, [r3]
 800c12c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f023 0310 	bic.w	r3, r3, #16
 800c134:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	461a      	mov	r2, r3
 800c13e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c142:	61fb      	str	r3, [r7, #28]
 800c144:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c146:	69b9      	ldr	r1, [r7, #24]
 800c148:	69fa      	ldr	r2, [r7, #28]
 800c14a:	e841 2300 	strex	r3, r2, [r1]
 800c14e:	617b      	str	r3, [r7, #20]
   return(result);
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1e4      	bne.n	800c120 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2202      	movs	r2, #2
 800c15a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c15c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 f846 	bl	800c1f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c168:	e02a      	b.n	800c1c0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c16a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00e      	beq.n	800c194 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d008      	beq.n	800c194 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c186:	2b00      	cmp	r3, #0
 800c188:	d01c      	beq.n	800c1c4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	4798      	blx	r3
    }
    return;
 800c192:	e017      	b.n	800c1c4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d012      	beq.n	800c1c6 <HAL_UART_IRQHandler+0x59e>
 800c1a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00c      	beq.n	800c1c6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fe2c 	bl	800ce0a <UART_EndTransmit_IT>
    return;
 800c1b2:	e008      	b.n	800c1c6 <HAL_UART_IRQHandler+0x59e>
      return;
 800c1b4:	bf00      	nop
 800c1b6:	e006      	b.n	800c1c6 <HAL_UART_IRQHandler+0x59e>
    return;
 800c1b8:	bf00      	nop
 800c1ba:	e004      	b.n	800c1c6 <HAL_UART_IRQHandler+0x59e>
      return;
 800c1bc:	bf00      	nop
 800c1be:	e002      	b.n	800c1c6 <HAL_UART_IRQHandler+0x59e>
      return;
 800c1c0:	bf00      	nop
 800c1c2:	e000      	b.n	800c1c6 <HAL_UART_IRQHandler+0x59e>
    return;
 800c1c4:	bf00      	nop
  }

}
 800c1c6:	37e8      	adds	r7, #232	; 0xe8
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c1d4:	bf00      	nop
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b088      	sub	sp, #32
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c214:	2300      	movs	r3, #0
 800c216:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	431a      	orrs	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	695b      	ldr	r3, [r3, #20]
 800c226:	431a      	orrs	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	69db      	ldr	r3, [r3, #28]
 800c22c:	4313      	orrs	r3, r2
 800c22e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	4ba6      	ldr	r3, [pc, #664]	; (800c4d0 <UART_SetConfig+0x2c4>)
 800c238:	4013      	ands	r3, r2
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	6812      	ldr	r2, [r2, #0]
 800c23e:	6979      	ldr	r1, [r7, #20]
 800c240:	430b      	orrs	r3, r1
 800c242:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	68da      	ldr	r2, [r3, #12]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	430a      	orrs	r2, r1
 800c258:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	699b      	ldr	r3, [r3, #24]
 800c25e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6a1b      	ldr	r3, [r3, #32]
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	4313      	orrs	r3, r2
 800c268:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	697a      	ldr	r2, [r7, #20]
 800c27a:	430a      	orrs	r2, r1
 800c27c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a94      	ldr	r2, [pc, #592]	; (800c4d4 <UART_SetConfig+0x2c8>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d120      	bne.n	800c2ca <UART_SetConfig+0xbe>
 800c288:	4b93      	ldr	r3, [pc, #588]	; (800c4d8 <UART_SetConfig+0x2cc>)
 800c28a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c28e:	f003 0303 	and.w	r3, r3, #3
 800c292:	2b03      	cmp	r3, #3
 800c294:	d816      	bhi.n	800c2c4 <UART_SetConfig+0xb8>
 800c296:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <UART_SetConfig+0x90>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c2ad 	.word	0x0800c2ad
 800c2a0:	0800c2b9 	.word	0x0800c2b9
 800c2a4:	0800c2b3 	.word	0x0800c2b3
 800c2a8:	0800c2bf 	.word	0x0800c2bf
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	77fb      	strb	r3, [r7, #31]
 800c2b0:	e150      	b.n	800c554 <UART_SetConfig+0x348>
 800c2b2:	2302      	movs	r3, #2
 800c2b4:	77fb      	strb	r3, [r7, #31]
 800c2b6:	e14d      	b.n	800c554 <UART_SetConfig+0x348>
 800c2b8:	2304      	movs	r3, #4
 800c2ba:	77fb      	strb	r3, [r7, #31]
 800c2bc:	e14a      	b.n	800c554 <UART_SetConfig+0x348>
 800c2be:	2308      	movs	r3, #8
 800c2c0:	77fb      	strb	r3, [r7, #31]
 800c2c2:	e147      	b.n	800c554 <UART_SetConfig+0x348>
 800c2c4:	2310      	movs	r3, #16
 800c2c6:	77fb      	strb	r3, [r7, #31]
 800c2c8:	e144      	b.n	800c554 <UART_SetConfig+0x348>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a83      	ldr	r2, [pc, #524]	; (800c4dc <UART_SetConfig+0x2d0>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d132      	bne.n	800c33a <UART_SetConfig+0x12e>
 800c2d4:	4b80      	ldr	r3, [pc, #512]	; (800c4d8 <UART_SetConfig+0x2cc>)
 800c2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2da:	f003 030c 	and.w	r3, r3, #12
 800c2de:	2b0c      	cmp	r3, #12
 800c2e0:	d828      	bhi.n	800c334 <UART_SetConfig+0x128>
 800c2e2:	a201      	add	r2, pc, #4	; (adr r2, 800c2e8 <UART_SetConfig+0xdc>)
 800c2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e8:	0800c31d 	.word	0x0800c31d
 800c2ec:	0800c335 	.word	0x0800c335
 800c2f0:	0800c335 	.word	0x0800c335
 800c2f4:	0800c335 	.word	0x0800c335
 800c2f8:	0800c329 	.word	0x0800c329
 800c2fc:	0800c335 	.word	0x0800c335
 800c300:	0800c335 	.word	0x0800c335
 800c304:	0800c335 	.word	0x0800c335
 800c308:	0800c323 	.word	0x0800c323
 800c30c:	0800c335 	.word	0x0800c335
 800c310:	0800c335 	.word	0x0800c335
 800c314:	0800c335 	.word	0x0800c335
 800c318:	0800c32f 	.word	0x0800c32f
 800c31c:	2300      	movs	r3, #0
 800c31e:	77fb      	strb	r3, [r7, #31]
 800c320:	e118      	b.n	800c554 <UART_SetConfig+0x348>
 800c322:	2302      	movs	r3, #2
 800c324:	77fb      	strb	r3, [r7, #31]
 800c326:	e115      	b.n	800c554 <UART_SetConfig+0x348>
 800c328:	2304      	movs	r3, #4
 800c32a:	77fb      	strb	r3, [r7, #31]
 800c32c:	e112      	b.n	800c554 <UART_SetConfig+0x348>
 800c32e:	2308      	movs	r3, #8
 800c330:	77fb      	strb	r3, [r7, #31]
 800c332:	e10f      	b.n	800c554 <UART_SetConfig+0x348>
 800c334:	2310      	movs	r3, #16
 800c336:	77fb      	strb	r3, [r7, #31]
 800c338:	e10c      	b.n	800c554 <UART_SetConfig+0x348>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a68      	ldr	r2, [pc, #416]	; (800c4e0 <UART_SetConfig+0x2d4>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d120      	bne.n	800c386 <UART_SetConfig+0x17a>
 800c344:	4b64      	ldr	r3, [pc, #400]	; (800c4d8 <UART_SetConfig+0x2cc>)
 800c346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c34a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c34e:	2b30      	cmp	r3, #48	; 0x30
 800c350:	d013      	beq.n	800c37a <UART_SetConfig+0x16e>
 800c352:	2b30      	cmp	r3, #48	; 0x30
 800c354:	d814      	bhi.n	800c380 <UART_SetConfig+0x174>
 800c356:	2b20      	cmp	r3, #32
 800c358:	d009      	beq.n	800c36e <UART_SetConfig+0x162>
 800c35a:	2b20      	cmp	r3, #32
 800c35c:	d810      	bhi.n	800c380 <UART_SetConfig+0x174>
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d002      	beq.n	800c368 <UART_SetConfig+0x15c>
 800c362:	2b10      	cmp	r3, #16
 800c364:	d006      	beq.n	800c374 <UART_SetConfig+0x168>
 800c366:	e00b      	b.n	800c380 <UART_SetConfig+0x174>
 800c368:	2300      	movs	r3, #0
 800c36a:	77fb      	strb	r3, [r7, #31]
 800c36c:	e0f2      	b.n	800c554 <UART_SetConfig+0x348>
 800c36e:	2302      	movs	r3, #2
 800c370:	77fb      	strb	r3, [r7, #31]
 800c372:	e0ef      	b.n	800c554 <UART_SetConfig+0x348>
 800c374:	2304      	movs	r3, #4
 800c376:	77fb      	strb	r3, [r7, #31]
 800c378:	e0ec      	b.n	800c554 <UART_SetConfig+0x348>
 800c37a:	2308      	movs	r3, #8
 800c37c:	77fb      	strb	r3, [r7, #31]
 800c37e:	e0e9      	b.n	800c554 <UART_SetConfig+0x348>
 800c380:	2310      	movs	r3, #16
 800c382:	77fb      	strb	r3, [r7, #31]
 800c384:	e0e6      	b.n	800c554 <UART_SetConfig+0x348>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a56      	ldr	r2, [pc, #344]	; (800c4e4 <UART_SetConfig+0x2d8>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d120      	bne.n	800c3d2 <UART_SetConfig+0x1c6>
 800c390:	4b51      	ldr	r3, [pc, #324]	; (800c4d8 <UART_SetConfig+0x2cc>)
 800c392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c396:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c39a:	2bc0      	cmp	r3, #192	; 0xc0
 800c39c:	d013      	beq.n	800c3c6 <UART_SetConfig+0x1ba>
 800c39e:	2bc0      	cmp	r3, #192	; 0xc0
 800c3a0:	d814      	bhi.n	800c3cc <UART_SetConfig+0x1c0>
 800c3a2:	2b80      	cmp	r3, #128	; 0x80
 800c3a4:	d009      	beq.n	800c3ba <UART_SetConfig+0x1ae>
 800c3a6:	2b80      	cmp	r3, #128	; 0x80
 800c3a8:	d810      	bhi.n	800c3cc <UART_SetConfig+0x1c0>
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d002      	beq.n	800c3b4 <UART_SetConfig+0x1a8>
 800c3ae:	2b40      	cmp	r3, #64	; 0x40
 800c3b0:	d006      	beq.n	800c3c0 <UART_SetConfig+0x1b4>
 800c3b2:	e00b      	b.n	800c3cc <UART_SetConfig+0x1c0>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	77fb      	strb	r3, [r7, #31]
 800c3b8:	e0cc      	b.n	800c554 <UART_SetConfig+0x348>
 800c3ba:	2302      	movs	r3, #2
 800c3bc:	77fb      	strb	r3, [r7, #31]
 800c3be:	e0c9      	b.n	800c554 <UART_SetConfig+0x348>
 800c3c0:	2304      	movs	r3, #4
 800c3c2:	77fb      	strb	r3, [r7, #31]
 800c3c4:	e0c6      	b.n	800c554 <UART_SetConfig+0x348>
 800c3c6:	2308      	movs	r3, #8
 800c3c8:	77fb      	strb	r3, [r7, #31]
 800c3ca:	e0c3      	b.n	800c554 <UART_SetConfig+0x348>
 800c3cc:	2310      	movs	r3, #16
 800c3ce:	77fb      	strb	r3, [r7, #31]
 800c3d0:	e0c0      	b.n	800c554 <UART_SetConfig+0x348>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a44      	ldr	r2, [pc, #272]	; (800c4e8 <UART_SetConfig+0x2dc>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d125      	bne.n	800c428 <UART_SetConfig+0x21c>
 800c3dc:	4b3e      	ldr	r3, [pc, #248]	; (800c4d8 <UART_SetConfig+0x2cc>)
 800c3de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3ea:	d017      	beq.n	800c41c <UART_SetConfig+0x210>
 800c3ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3f0:	d817      	bhi.n	800c422 <UART_SetConfig+0x216>
 800c3f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3f6:	d00b      	beq.n	800c410 <UART_SetConfig+0x204>
 800c3f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3fc:	d811      	bhi.n	800c422 <UART_SetConfig+0x216>
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d003      	beq.n	800c40a <UART_SetConfig+0x1fe>
 800c402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c406:	d006      	beq.n	800c416 <UART_SetConfig+0x20a>
 800c408:	e00b      	b.n	800c422 <UART_SetConfig+0x216>
 800c40a:	2300      	movs	r3, #0
 800c40c:	77fb      	strb	r3, [r7, #31]
 800c40e:	e0a1      	b.n	800c554 <UART_SetConfig+0x348>
 800c410:	2302      	movs	r3, #2
 800c412:	77fb      	strb	r3, [r7, #31]
 800c414:	e09e      	b.n	800c554 <UART_SetConfig+0x348>
 800c416:	2304      	movs	r3, #4
 800c418:	77fb      	strb	r3, [r7, #31]
 800c41a:	e09b      	b.n	800c554 <UART_SetConfig+0x348>
 800c41c:	2308      	movs	r3, #8
 800c41e:	77fb      	strb	r3, [r7, #31]
 800c420:	e098      	b.n	800c554 <UART_SetConfig+0x348>
 800c422:	2310      	movs	r3, #16
 800c424:	77fb      	strb	r3, [r7, #31]
 800c426:	e095      	b.n	800c554 <UART_SetConfig+0x348>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a2f      	ldr	r2, [pc, #188]	; (800c4ec <UART_SetConfig+0x2e0>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d125      	bne.n	800c47e <UART_SetConfig+0x272>
 800c432:	4b29      	ldr	r3, [pc, #164]	; (800c4d8 <UART_SetConfig+0x2cc>)
 800c434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c438:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c43c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c440:	d017      	beq.n	800c472 <UART_SetConfig+0x266>
 800c442:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c446:	d817      	bhi.n	800c478 <UART_SetConfig+0x26c>
 800c448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c44c:	d00b      	beq.n	800c466 <UART_SetConfig+0x25a>
 800c44e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c452:	d811      	bhi.n	800c478 <UART_SetConfig+0x26c>
 800c454:	2b00      	cmp	r3, #0
 800c456:	d003      	beq.n	800c460 <UART_SetConfig+0x254>
 800c458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c45c:	d006      	beq.n	800c46c <UART_SetConfig+0x260>
 800c45e:	e00b      	b.n	800c478 <UART_SetConfig+0x26c>
 800c460:	2301      	movs	r3, #1
 800c462:	77fb      	strb	r3, [r7, #31]
 800c464:	e076      	b.n	800c554 <UART_SetConfig+0x348>
 800c466:	2302      	movs	r3, #2
 800c468:	77fb      	strb	r3, [r7, #31]
 800c46a:	e073      	b.n	800c554 <UART_SetConfig+0x348>
 800c46c:	2304      	movs	r3, #4
 800c46e:	77fb      	strb	r3, [r7, #31]
 800c470:	e070      	b.n	800c554 <UART_SetConfig+0x348>
 800c472:	2308      	movs	r3, #8
 800c474:	77fb      	strb	r3, [r7, #31]
 800c476:	e06d      	b.n	800c554 <UART_SetConfig+0x348>
 800c478:	2310      	movs	r3, #16
 800c47a:	77fb      	strb	r3, [r7, #31]
 800c47c:	e06a      	b.n	800c554 <UART_SetConfig+0x348>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a1b      	ldr	r2, [pc, #108]	; (800c4f0 <UART_SetConfig+0x2e4>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d138      	bne.n	800c4fa <UART_SetConfig+0x2ee>
 800c488:	4b13      	ldr	r3, [pc, #76]	; (800c4d8 <UART_SetConfig+0x2cc>)
 800c48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c48e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c492:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c496:	d017      	beq.n	800c4c8 <UART_SetConfig+0x2bc>
 800c498:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c49c:	d82a      	bhi.n	800c4f4 <UART_SetConfig+0x2e8>
 800c49e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4a2:	d00b      	beq.n	800c4bc <UART_SetConfig+0x2b0>
 800c4a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4a8:	d824      	bhi.n	800c4f4 <UART_SetConfig+0x2e8>
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d003      	beq.n	800c4b6 <UART_SetConfig+0x2aa>
 800c4ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4b2:	d006      	beq.n	800c4c2 <UART_SetConfig+0x2b6>
 800c4b4:	e01e      	b.n	800c4f4 <UART_SetConfig+0x2e8>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	77fb      	strb	r3, [r7, #31]
 800c4ba:	e04b      	b.n	800c554 <UART_SetConfig+0x348>
 800c4bc:	2302      	movs	r3, #2
 800c4be:	77fb      	strb	r3, [r7, #31]
 800c4c0:	e048      	b.n	800c554 <UART_SetConfig+0x348>
 800c4c2:	2304      	movs	r3, #4
 800c4c4:	77fb      	strb	r3, [r7, #31]
 800c4c6:	e045      	b.n	800c554 <UART_SetConfig+0x348>
 800c4c8:	2308      	movs	r3, #8
 800c4ca:	77fb      	strb	r3, [r7, #31]
 800c4cc:	e042      	b.n	800c554 <UART_SetConfig+0x348>
 800c4ce:	bf00      	nop
 800c4d0:	efff69f3 	.word	0xefff69f3
 800c4d4:	40011000 	.word	0x40011000
 800c4d8:	40023800 	.word	0x40023800
 800c4dc:	40004400 	.word	0x40004400
 800c4e0:	40004800 	.word	0x40004800
 800c4e4:	40004c00 	.word	0x40004c00
 800c4e8:	40005000 	.word	0x40005000
 800c4ec:	40011400 	.word	0x40011400
 800c4f0:	40007800 	.word	0x40007800
 800c4f4:	2310      	movs	r3, #16
 800c4f6:	77fb      	strb	r3, [r7, #31]
 800c4f8:	e02c      	b.n	800c554 <UART_SetConfig+0x348>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a72      	ldr	r2, [pc, #456]	; (800c6c8 <UART_SetConfig+0x4bc>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d125      	bne.n	800c550 <UART_SetConfig+0x344>
 800c504:	4b71      	ldr	r3, [pc, #452]	; (800c6cc <UART_SetConfig+0x4c0>)
 800c506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c50a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c50e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c512:	d017      	beq.n	800c544 <UART_SetConfig+0x338>
 800c514:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c518:	d817      	bhi.n	800c54a <UART_SetConfig+0x33e>
 800c51a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c51e:	d00b      	beq.n	800c538 <UART_SetConfig+0x32c>
 800c520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c524:	d811      	bhi.n	800c54a <UART_SetConfig+0x33e>
 800c526:	2b00      	cmp	r3, #0
 800c528:	d003      	beq.n	800c532 <UART_SetConfig+0x326>
 800c52a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c52e:	d006      	beq.n	800c53e <UART_SetConfig+0x332>
 800c530:	e00b      	b.n	800c54a <UART_SetConfig+0x33e>
 800c532:	2300      	movs	r3, #0
 800c534:	77fb      	strb	r3, [r7, #31]
 800c536:	e00d      	b.n	800c554 <UART_SetConfig+0x348>
 800c538:	2302      	movs	r3, #2
 800c53a:	77fb      	strb	r3, [r7, #31]
 800c53c:	e00a      	b.n	800c554 <UART_SetConfig+0x348>
 800c53e:	2304      	movs	r3, #4
 800c540:	77fb      	strb	r3, [r7, #31]
 800c542:	e007      	b.n	800c554 <UART_SetConfig+0x348>
 800c544:	2308      	movs	r3, #8
 800c546:	77fb      	strb	r3, [r7, #31]
 800c548:	e004      	b.n	800c554 <UART_SetConfig+0x348>
 800c54a:	2310      	movs	r3, #16
 800c54c:	77fb      	strb	r3, [r7, #31]
 800c54e:	e001      	b.n	800c554 <UART_SetConfig+0x348>
 800c550:	2310      	movs	r3, #16
 800c552:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	69db      	ldr	r3, [r3, #28]
 800c558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c55c:	d15b      	bne.n	800c616 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c55e:	7ffb      	ldrb	r3, [r7, #31]
 800c560:	2b08      	cmp	r3, #8
 800c562:	d828      	bhi.n	800c5b6 <UART_SetConfig+0x3aa>
 800c564:	a201      	add	r2, pc, #4	; (adr r2, 800c56c <UART_SetConfig+0x360>)
 800c566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c56a:	bf00      	nop
 800c56c:	0800c591 	.word	0x0800c591
 800c570:	0800c599 	.word	0x0800c599
 800c574:	0800c5a1 	.word	0x0800c5a1
 800c578:	0800c5b7 	.word	0x0800c5b7
 800c57c:	0800c5a7 	.word	0x0800c5a7
 800c580:	0800c5b7 	.word	0x0800c5b7
 800c584:	0800c5b7 	.word	0x0800c5b7
 800c588:	0800c5b7 	.word	0x0800c5b7
 800c58c:	0800c5af 	.word	0x0800c5af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c590:	f7fe f9e0 	bl	800a954 <HAL_RCC_GetPCLK1Freq>
 800c594:	61b8      	str	r0, [r7, #24]
        break;
 800c596:	e013      	b.n	800c5c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c598:	f7fe f9f0 	bl	800a97c <HAL_RCC_GetPCLK2Freq>
 800c59c:	61b8      	str	r0, [r7, #24]
        break;
 800c59e:	e00f      	b.n	800c5c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c5a0:	4b4b      	ldr	r3, [pc, #300]	; (800c6d0 <UART_SetConfig+0x4c4>)
 800c5a2:	61bb      	str	r3, [r7, #24]
        break;
 800c5a4:	e00c      	b.n	800c5c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c5a6:	f7fe f903 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800c5aa:	61b8      	str	r0, [r7, #24]
        break;
 800c5ac:	e008      	b.n	800c5c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5b2:	61bb      	str	r3, [r7, #24]
        break;
 800c5b4:	e004      	b.n	800c5c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	77bb      	strb	r3, [r7, #30]
        break;
 800c5be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d074      	beq.n	800c6b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	005a      	lsls	r2, r3, #1
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	085b      	lsrs	r3, r3, #1
 800c5d0:	441a      	add	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	2b0f      	cmp	r3, #15
 800c5e0:	d916      	bls.n	800c610 <UART_SetConfig+0x404>
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5e8:	d212      	bcs.n	800c610 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	f023 030f 	bic.w	r3, r3, #15
 800c5f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	085b      	lsrs	r3, r3, #1
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	f003 0307 	and.w	r3, r3, #7
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	89fb      	ldrh	r3, [r7, #14]
 800c602:	4313      	orrs	r3, r2
 800c604:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	89fa      	ldrh	r2, [r7, #14]
 800c60c:	60da      	str	r2, [r3, #12]
 800c60e:	e04f      	b.n	800c6b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	77bb      	strb	r3, [r7, #30]
 800c614:	e04c      	b.n	800c6b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c616:	7ffb      	ldrb	r3, [r7, #31]
 800c618:	2b08      	cmp	r3, #8
 800c61a:	d828      	bhi.n	800c66e <UART_SetConfig+0x462>
 800c61c:	a201      	add	r2, pc, #4	; (adr r2, 800c624 <UART_SetConfig+0x418>)
 800c61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c622:	bf00      	nop
 800c624:	0800c649 	.word	0x0800c649
 800c628:	0800c651 	.word	0x0800c651
 800c62c:	0800c659 	.word	0x0800c659
 800c630:	0800c66f 	.word	0x0800c66f
 800c634:	0800c65f 	.word	0x0800c65f
 800c638:	0800c66f 	.word	0x0800c66f
 800c63c:	0800c66f 	.word	0x0800c66f
 800c640:	0800c66f 	.word	0x0800c66f
 800c644:	0800c667 	.word	0x0800c667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c648:	f7fe f984 	bl	800a954 <HAL_RCC_GetPCLK1Freq>
 800c64c:	61b8      	str	r0, [r7, #24]
        break;
 800c64e:	e013      	b.n	800c678 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c650:	f7fe f994 	bl	800a97c <HAL_RCC_GetPCLK2Freq>
 800c654:	61b8      	str	r0, [r7, #24]
        break;
 800c656:	e00f      	b.n	800c678 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c658:	4b1d      	ldr	r3, [pc, #116]	; (800c6d0 <UART_SetConfig+0x4c4>)
 800c65a:	61bb      	str	r3, [r7, #24]
        break;
 800c65c:	e00c      	b.n	800c678 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c65e:	f7fe f8a7 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800c662:	61b8      	str	r0, [r7, #24]
        break;
 800c664:	e008      	b.n	800c678 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c66a:	61bb      	str	r3, [r7, #24]
        break;
 800c66c:	e004      	b.n	800c678 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c66e:	2300      	movs	r3, #0
 800c670:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	77bb      	strb	r3, [r7, #30]
        break;
 800c676:	bf00      	nop
    }

    if (pclk != 0U)
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d018      	beq.n	800c6b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	085a      	lsrs	r2, r3, #1
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	441a      	add	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c690:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	2b0f      	cmp	r3, #15
 800c696:	d909      	bls.n	800c6ac <UART_SetConfig+0x4a0>
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c69e:	d205      	bcs.n	800c6ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	b29a      	uxth	r2, r3
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	60da      	str	r2, [r3, #12]
 800c6aa:	e001      	b.n	800c6b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800c6bc:	7fbb      	ldrb	r3, [r7, #30]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3720      	adds	r7, #32
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	40007c00 	.word	0x40007c00
 800c6cc:	40023800 	.word	0x40023800
 800c6d0:	00f42400 	.word	0x00f42400

0800c6d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e0:	f003 0301 	and.w	r3, r3, #1
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00a      	beq.n	800c6fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	430a      	orrs	r2, r1
 800c6fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c702:	f003 0302 	and.w	r3, r3, #2
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00a      	beq.n	800c720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	430a      	orrs	r2, r1
 800c71e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c724:	f003 0304 	and.w	r3, r3, #4
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00a      	beq.n	800c742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	430a      	orrs	r2, r1
 800c740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c746:	f003 0308 	and.w	r3, r3, #8
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00a      	beq.n	800c764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	430a      	orrs	r2, r1
 800c762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c768:	f003 0310 	and.w	r3, r3, #16
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00a      	beq.n	800c786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	689b      	ldr	r3, [r3, #8]
 800c776:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	430a      	orrs	r2, r1
 800c784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c78a:	f003 0320 	and.w	r3, r3, #32
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00a      	beq.n	800c7a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	430a      	orrs	r2, r1
 800c7a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d01a      	beq.n	800c7ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	430a      	orrs	r2, r1
 800c7c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7d2:	d10a      	bne.n	800c7ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00a      	beq.n	800c80c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	430a      	orrs	r2, r1
 800c80a:	605a      	str	r2, [r3, #4]
  }
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b086      	sub	sp, #24
 800c81c:	af02      	add	r7, sp, #8
 800c81e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c828:	f7fa fe84 	bl	8007534 <HAL_GetTick>
 800c82c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f003 0308 	and.w	r3, r3, #8
 800c838:	2b08      	cmp	r3, #8
 800c83a:	d10e      	bne.n	800c85a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c83c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c840:	9300      	str	r3, [sp, #0]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2200      	movs	r2, #0
 800c846:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f81b 	bl	800c886 <UART_WaitOnFlagUntilTimeout>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d001      	beq.n	800c85a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c856:	2303      	movs	r3, #3
 800c858:	e011      	b.n	800c87e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2220      	movs	r2, #32
 800c85e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2220      	movs	r2, #32
 800c864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b09c      	sub	sp, #112	; 0x70
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	60b9      	str	r1, [r7, #8]
 800c890:	603b      	str	r3, [r7, #0]
 800c892:	4613      	mov	r3, r2
 800c894:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c896:	e0a7      	b.n	800c9e8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c89a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c89e:	f000 80a3 	beq.w	800c9e8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8a2:	f7fa fe47 	bl	8007534 <HAL_GetTick>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d302      	bcc.n	800c8b8 <UART_WaitOnFlagUntilTimeout+0x32>
 800c8b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d13f      	bne.n	800c938 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8c0:	e853 3f00 	ldrex	r3, [r3]
 800c8c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c8cc:	667b      	str	r3, [r7, #100]	; 0x64
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c8d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c8dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8de:	e841 2300 	strex	r3, r2, [r1]
 800c8e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c8e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1e6      	bne.n	800c8b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3308      	adds	r3, #8
 800c8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8f4:	e853 3f00 	ldrex	r3, [r3]
 800c8f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fc:	f023 0301 	bic.w	r3, r3, #1
 800c900:	663b      	str	r3, [r7, #96]	; 0x60
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	3308      	adds	r3, #8
 800c908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c90a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c90c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c912:	e841 2300 	strex	r3, r2, [r1]
 800c916:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1e5      	bne.n	800c8ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2220      	movs	r2, #32
 800c922:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2220      	movs	r2, #32
 800c928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800c934:	2303      	movs	r3, #3
 800c936:	e068      	b.n	800ca0a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f003 0304 	and.w	r3, r3, #4
 800c942:	2b00      	cmp	r3, #0
 800c944:	d050      	beq.n	800c9e8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	69db      	ldr	r3, [r3, #28]
 800c94c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c954:	d148      	bne.n	800c9e8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c95e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c968:	e853 3f00 	ldrex	r3, [r3]
 800c96c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c974:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	461a      	mov	r2, r3
 800c97c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c97e:	637b      	str	r3, [r7, #52]	; 0x34
 800c980:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c986:	e841 2300 	strex	r3, r2, [r1]
 800c98a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1e6      	bne.n	800c960 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	3308      	adds	r3, #8
 800c998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	e853 3f00 	ldrex	r3, [r3]
 800c9a0:	613b      	str	r3, [r7, #16]
   return(result);
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f023 0301 	bic.w	r3, r3, #1
 800c9a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	3308      	adds	r3, #8
 800c9b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c9b2:	623a      	str	r2, [r7, #32]
 800c9b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b6:	69f9      	ldr	r1, [r7, #28]
 800c9b8:	6a3a      	ldr	r2, [r7, #32]
 800c9ba:	e841 2300 	strex	r3, r2, [r1]
 800c9be:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1e5      	bne.n	800c992 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2220      	movs	r2, #32
 800c9ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2220      	movs	r2, #32
 800c9d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2220      	movs	r2, #32
 800c9d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c9e4:	2303      	movs	r3, #3
 800c9e6:	e010      	b.n	800ca0a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	69da      	ldr	r2, [r3, #28]
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	4013      	ands	r3, r2
 800c9f2:	68ba      	ldr	r2, [r7, #8]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	bf0c      	ite	eq
 800c9f8:	2301      	moveq	r3, #1
 800c9fa:	2300      	movne	r3, #0
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	461a      	mov	r2, r3
 800ca00:	79fb      	ldrb	r3, [r7, #7]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	f43f af48 	beq.w	800c898 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3770      	adds	r7, #112	; 0x70
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
	...

0800ca14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b097      	sub	sp, #92	; 0x5c
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	4613      	mov	r3, r2
 800ca20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	88fa      	ldrh	r2, [r7, #6]
 800ca2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	88fa      	ldrh	r2, [r7, #6]
 800ca34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca46:	d10e      	bne.n	800ca66 <UART_Start_Receive_IT+0x52>
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	691b      	ldr	r3, [r3, #16]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d105      	bne.n	800ca5c <UART_Start_Receive_IT+0x48>
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ca56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ca5a:	e02d      	b.n	800cab8 <UART_Start_Receive_IT+0xa4>
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	22ff      	movs	r2, #255	; 0xff
 800ca60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ca64:	e028      	b.n	800cab8 <UART_Start_Receive_IT+0xa4>
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d10d      	bne.n	800ca8a <UART_Start_Receive_IT+0x76>
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d104      	bne.n	800ca80 <UART_Start_Receive_IT+0x6c>
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	22ff      	movs	r2, #255	; 0xff
 800ca7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ca7e:	e01b      	b.n	800cab8 <UART_Start_Receive_IT+0xa4>
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	227f      	movs	r2, #127	; 0x7f
 800ca84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ca88:	e016      	b.n	800cab8 <UART_Start_Receive_IT+0xa4>
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca92:	d10d      	bne.n	800cab0 <UART_Start_Receive_IT+0x9c>
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	691b      	ldr	r3, [r3, #16]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d104      	bne.n	800caa6 <UART_Start_Receive_IT+0x92>
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	227f      	movs	r2, #127	; 0x7f
 800caa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800caa4:	e008      	b.n	800cab8 <UART_Start_Receive_IT+0xa4>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	223f      	movs	r2, #63	; 0x3f
 800caaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800caae:	e003      	b.n	800cab8 <UART_Start_Receive_IT+0xa4>
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2200      	movs	r2, #0
 800cabc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2222      	movs	r2, #34	; 0x22
 800cac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	3308      	adds	r3, #8
 800cace:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad2:	e853 3f00 	ldrex	r3, [r3]
 800cad6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cada:	f043 0301 	orr.w	r3, r3, #1
 800cade:	657b      	str	r3, [r7, #84]	; 0x54
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	3308      	adds	r3, #8
 800cae6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cae8:	64ba      	str	r2, [r7, #72]	; 0x48
 800caea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800caee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800caf0:	e841 2300 	strex	r3, r2, [r1]
 800caf4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800caf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d1e5      	bne.n	800cac8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	689b      	ldr	r3, [r3, #8]
 800cb00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb04:	d107      	bne.n	800cb16 <UART_Start_Receive_IT+0x102>
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d103      	bne.n	800cb16 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	4a21      	ldr	r2, [pc, #132]	; (800cb98 <UART_Start_Receive_IT+0x184>)
 800cb12:	669a      	str	r2, [r3, #104]	; 0x68
 800cb14:	e002      	b.n	800cb1c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	4a20      	ldr	r2, [pc, #128]	; (800cb9c <UART_Start_Receive_IT+0x188>)
 800cb1a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d019      	beq.n	800cb58 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2c:	e853 3f00 	ldrex	r3, [r3]
 800cb30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800cb38:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb42:	637b      	str	r3, [r7, #52]	; 0x34
 800cb44:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb4a:	e841 2300 	strex	r3, r2, [r1]
 800cb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d1e6      	bne.n	800cb24 <UART_Start_Receive_IT+0x110>
 800cb56:	e018      	b.n	800cb8a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	e853 3f00 	ldrex	r3, [r3]
 800cb64:	613b      	str	r3, [r7, #16]
   return(result);
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	f043 0320 	orr.w	r3, r3, #32
 800cb6c:	653b      	str	r3, [r7, #80]	; 0x50
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	461a      	mov	r2, r3
 800cb74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb76:	623b      	str	r3, [r7, #32]
 800cb78:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb7a:	69f9      	ldr	r1, [r7, #28]
 800cb7c:	6a3a      	ldr	r2, [r7, #32]
 800cb7e:	e841 2300 	strex	r3, r2, [r1]
 800cb82:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d1e6      	bne.n	800cb58 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	375c      	adds	r7, #92	; 0x5c
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr
 800cb98:	0800cfc5 	.word	0x0800cfc5
 800cb9c:	0800ce5f 	.word	0x0800ce5f

0800cba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b095      	sub	sp, #84	; 0x54
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb0:	e853 3f00 	ldrex	r3, [r3]
 800cbb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cbbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbc6:	643b      	str	r3, [r7, #64]	; 0x40
 800cbc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cbcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cbce:	e841 2300 	strex	r3, r2, [r1]
 800cbd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d1e6      	bne.n	800cba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	3308      	adds	r3, #8
 800cbe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe2:	6a3b      	ldr	r3, [r7, #32]
 800cbe4:	e853 3f00 	ldrex	r3, [r3]
 800cbe8:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbea:	69fb      	ldr	r3, [r7, #28]
 800cbec:	f023 0301 	bic.w	r3, r3, #1
 800cbf0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	3308      	adds	r3, #8
 800cbf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cbfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc02:	e841 2300 	strex	r3, r2, [r1]
 800cc06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1e5      	bne.n	800cbda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d118      	bne.n	800cc48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	e853 3f00 	ldrex	r3, [r3]
 800cc22:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	f023 0310 	bic.w	r3, r3, #16
 800cc2a:	647b      	str	r3, [r7, #68]	; 0x44
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	461a      	mov	r2, r3
 800cc32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc34:	61bb      	str	r3, [r7, #24]
 800cc36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc38:	6979      	ldr	r1, [r7, #20]
 800cc3a:	69ba      	ldr	r2, [r7, #24]
 800cc3c:	e841 2300 	strex	r3, r2, [r1]
 800cc40:	613b      	str	r3, [r7, #16]
   return(result);
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1e6      	bne.n	800cc16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2220      	movs	r2, #32
 800cc4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2200      	movs	r2, #0
 800cc54:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800cc5c:	bf00      	nop
 800cc5e:	3754      	adds	r7, #84	; 0x54
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2200      	movs	r2, #0
 800cc82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f7ff faaa 	bl	800c1e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc8c:	bf00      	nop
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b08f      	sub	sp, #60	; 0x3c
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cca0:	2b21      	cmp	r3, #33	; 0x21
 800cca2:	d14c      	bne.n	800cd3e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d132      	bne.n	800cd16 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb6:	6a3b      	ldr	r3, [r7, #32]
 800ccb8:	e853 3f00 	ldrex	r3, [r3]
 800ccbc:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccc4:	637b      	str	r3, [r7, #52]	; 0x34
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	461a      	mov	r2, r3
 800cccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccd0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccd6:	e841 2300 	strex	r3, r2, [r1]
 800ccda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1e6      	bne.n	800ccb0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	e853 3f00 	ldrex	r3, [r3]
 800ccee:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccf6:	633b      	str	r3, [r7, #48]	; 0x30
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd00:	61bb      	str	r3, [r7, #24]
 800cd02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd04:	6979      	ldr	r1, [r7, #20]
 800cd06:	69ba      	ldr	r2, [r7, #24]
 800cd08:	e841 2300 	strex	r3, r2, [r1]
 800cd0c:	613b      	str	r3, [r7, #16]
   return(result);
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1e6      	bne.n	800cce2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800cd14:	e013      	b.n	800cd3e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd1a:	781a      	ldrb	r2, [r3, #0]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd26:	1c5a      	adds	r2, r3, #1
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	3b01      	subs	r3, #1
 800cd36:	b29a      	uxth	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800cd3e:	bf00      	nop
 800cd40:	373c      	adds	r7, #60	; 0x3c
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr

0800cd4a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cd4a:	b480      	push	{r7}
 800cd4c:	b091      	sub	sp, #68	; 0x44
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd56:	2b21      	cmp	r3, #33	; 0x21
 800cd58:	d151      	bne.n	800cdfe <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d132      	bne.n	800cdcc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6e:	e853 3f00 	ldrex	r3, [r3]
 800cd72:	623b      	str	r3, [r7, #32]
   return(result);
 800cd74:	6a3b      	ldr	r3, [r7, #32]
 800cd76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd7a:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	461a      	mov	r2, r3
 800cd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd84:	633b      	str	r3, [r7, #48]	; 0x30
 800cd86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd8c:	e841 2300 	strex	r3, r2, [r1]
 800cd90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d1e6      	bne.n	800cd66 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	e853 3f00 	ldrex	r3, [r3]
 800cda4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdac:	637b      	str	r3, [r7, #52]	; 0x34
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb6:	61fb      	str	r3, [r7, #28]
 800cdb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdba:	69b9      	ldr	r1, [r7, #24]
 800cdbc:	69fa      	ldr	r2, [r7, #28]
 800cdbe:	e841 2300 	strex	r3, r2, [r1]
 800cdc2:	617b      	str	r3, [r7, #20]
   return(result);
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1e6      	bne.n	800cd98 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800cdca:	e018      	b.n	800cdfe <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdd0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cdd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd4:	881b      	ldrh	r3, [r3, #0]
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cde0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cde6:	1c9a      	adds	r2, r3, #2
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	3b01      	subs	r3, #1
 800cdf6:	b29a      	uxth	r2, r3
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800cdfe:	bf00      	nop
 800ce00:	3744      	adds	r7, #68	; 0x44
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr

0800ce0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b088      	sub	sp, #32
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	e853 3f00 	ldrex	r3, [r3]
 800ce1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce26:	61fb      	str	r3, [r7, #28]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	61bb      	str	r3, [r7, #24]
 800ce32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce34:	6979      	ldr	r1, [r7, #20]
 800ce36:	69ba      	ldr	r2, [r7, #24]
 800ce38:	e841 2300 	strex	r3, r2, [r1]
 800ce3c:	613b      	str	r3, [r7, #16]
   return(result);
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1e6      	bne.n	800ce12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2220      	movs	r2, #32
 800ce48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f7ff f9bb 	bl	800c1cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce56:	bf00      	nop
 800ce58:	3720      	adds	r7, #32
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b096      	sub	sp, #88	; 0x58
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce76:	2b22      	cmp	r3, #34	; 0x22
 800ce78:	f040 8098 	bne.w	800cfac <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce82:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ce86:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800ce8a:	b2d9      	uxtb	r1, r3
 800ce8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ce90:	b2da      	uxtb	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce96:	400a      	ands	r2, r1
 800ce98:	b2d2      	uxtb	r2, r2
 800ce9a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cea0:	1c5a      	adds	r2, r3, #1
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d17b      	bne.n	800cfbc <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cecc:	e853 3f00 	ldrex	r3, [r3]
 800ced0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ced2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ced8:	653b      	str	r3, [r7, #80]	; 0x50
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	461a      	mov	r2, r3
 800cee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cee2:	647b      	str	r3, [r7, #68]	; 0x44
 800cee4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cee8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ceea:	e841 2300 	strex	r3, r2, [r1]
 800ceee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1e6      	bne.n	800cec4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	3308      	adds	r3, #8
 800cefc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf00:	e853 3f00 	ldrex	r3, [r3]
 800cf04:	623b      	str	r3, [r7, #32]
   return(result);
 800cf06:	6a3b      	ldr	r3, [r7, #32]
 800cf08:	f023 0301 	bic.w	r3, r3, #1
 800cf0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3308      	adds	r3, #8
 800cf14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf16:	633a      	str	r2, [r7, #48]	; 0x30
 800cf18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf1e:	e841 2300 	strex	r3, r2, [r1]
 800cf22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1e5      	bne.n	800cef6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2220      	movs	r2, #32
 800cf2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2200      	movs	r2, #0
 800cf36:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d12e      	bne.n	800cfa4 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	e853 3f00 	ldrex	r3, [r3]
 800cf58:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f023 0310 	bic.w	r3, r3, #16
 800cf60:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	461a      	mov	r2, r3
 800cf68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf6a:	61fb      	str	r3, [r7, #28]
 800cf6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf6e:	69b9      	ldr	r1, [r7, #24]
 800cf70:	69fa      	ldr	r2, [r7, #28]
 800cf72:	e841 2300 	strex	r3, r2, [r1]
 800cf76:	617b      	str	r3, [r7, #20]
   return(result);
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d1e6      	bne.n	800cf4c <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	69db      	ldr	r3, [r3, #28]
 800cf84:	f003 0310 	and.w	r3, r3, #16
 800cf88:	2b10      	cmp	r3, #16
 800cf8a:	d103      	bne.n	800cf94 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2210      	movs	r2, #16
 800cf92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f7ff f929 	bl	800c1f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cfa2:	e00b      	b.n	800cfbc <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7f3 fb47 	bl	8000638 <HAL_UART_RxCpltCallback>
}
 800cfaa:	e007      	b.n	800cfbc <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	699a      	ldr	r2, [r3, #24]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f042 0208 	orr.w	r2, r2, #8
 800cfba:	619a      	str	r2, [r3, #24]
}
 800cfbc:	bf00      	nop
 800cfbe:	3758      	adds	r7, #88	; 0x58
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b096      	sub	sp, #88	; 0x58
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cfd2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfdc:	2b22      	cmp	r3, #34	; 0x22
 800cfde:	f040 8098 	bne.w	800d112 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cff0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800cff2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800cff6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cffa:	4013      	ands	r3, r2
 800cffc:	b29a      	uxth	r2, r3
 800cffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d000:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d006:	1c9a      	adds	r2, r3, #2
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d012:	b29b      	uxth	r3, r3
 800d014:	3b01      	subs	r3, #1
 800d016:	b29a      	uxth	r2, r3
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d024:	b29b      	uxth	r3, r3
 800d026:	2b00      	cmp	r3, #0
 800d028:	d17b      	bne.n	800d122 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d032:	e853 3f00 	ldrex	r3, [r3]
 800d036:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d03e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	461a      	mov	r2, r3
 800d046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d048:	643b      	str	r3, [r7, #64]	; 0x40
 800d04a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d04c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d04e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d050:	e841 2300 	strex	r3, r2, [r1]
 800d054:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1e6      	bne.n	800d02a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	3308      	adds	r3, #8
 800d062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d064:	6a3b      	ldr	r3, [r7, #32]
 800d066:	e853 3f00 	ldrex	r3, [r3]
 800d06a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d06c:	69fb      	ldr	r3, [r7, #28]
 800d06e:	f023 0301 	bic.w	r3, r3, #1
 800d072:	64bb      	str	r3, [r7, #72]	; 0x48
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	3308      	adds	r3, #8
 800d07a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d07c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d07e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d084:	e841 2300 	strex	r3, r2, [r1]
 800d088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1e5      	bne.n	800d05c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2220      	movs	r2, #32
 800d094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d12e      	bne.n	800d10a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	e853 3f00 	ldrex	r3, [r3]
 800d0be:	60bb      	str	r3, [r7, #8]
   return(result);
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	f023 0310 	bic.w	r3, r3, #16
 800d0c6:	647b      	str	r3, [r7, #68]	; 0x44
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0d0:	61bb      	str	r3, [r7, #24]
 800d0d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d4:	6979      	ldr	r1, [r7, #20]
 800d0d6:	69ba      	ldr	r2, [r7, #24]
 800d0d8:	e841 2300 	strex	r3, r2, [r1]
 800d0dc:	613b      	str	r3, [r7, #16]
   return(result);
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d1e6      	bne.n	800d0b2 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	69db      	ldr	r3, [r3, #28]
 800d0ea:	f003 0310 	and.w	r3, r3, #16
 800d0ee:	2b10      	cmp	r3, #16
 800d0f0:	d103      	bne.n	800d0fa <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2210      	movs	r2, #16
 800d0f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d100:	4619      	mov	r1, r3
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f7ff f876 	bl	800c1f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d108:	e00b      	b.n	800d122 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7f3 fa94 	bl	8000638 <HAL_UART_RxCpltCallback>
}
 800d110:	e007      	b.n	800d122 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	699a      	ldr	r2, [r3, #24]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f042 0208 	orr.w	r2, r2, #8
 800d120:	619a      	str	r2, [r3, #24]
}
 800d122:	bf00      	nop
 800d124:	3758      	adds	r7, #88	; 0x58
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
	...

0800d12c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b087      	sub	sp, #28
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d140:	683a      	ldr	r2, [r7, #0]
 800d142:	6812      	ldr	r2, [r2, #0]
 800d144:	f023 0101 	bic.w	r1, r3, #1
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	2b08      	cmp	r3, #8
 800d154:	d102      	bne.n	800d15c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800d156:	2340      	movs	r3, #64	; 0x40
 800d158:	617b      	str	r3, [r7, #20]
 800d15a:	e001      	b.n	800d160 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800d15c:	2300      	movs	r3, #0
 800d15e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800d16c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800d172:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800d178:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800d17e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800d184:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800d18a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800d190:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800d196:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800d19c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1aa:	693a      	ldr	r2, [r7, #16]
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b4:	693a      	ldr	r2, [r7, #16]
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1be:	693a      	ldr	r2, [r7, #16]
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 800d1c4:	4b20      	ldr	r3, [pc, #128]	; (800d248 <FMC_NORSRAM_Init+0x11c>)
 800d1c6:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1ce:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d1d6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800d1de:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	43db      	mvns	r3, r3
 800d1ee:	ea02 0103 	and.w	r1, r2, r3
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	4319      	orrs	r1, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d208:	d10c      	bne.n	800d224 <FMC_NORSRAM_Init+0xf8>
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d008      	beq.n	800d224 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d21e:	431a      	orrs	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d006      	beq.n	800d23a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d234:	431a      	orrs	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	371c      	adds	r7, #28
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr
 800d248:	0008fb7f 	.word	0x0008fb7f

0800d24c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b087      	sub	sp, #28
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	1c5a      	adds	r2, r3, #1
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d262:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	011b      	lsls	r3, r3, #4
 800d270:	431a      	orrs	r2, r3
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	021b      	lsls	r3, r3, #8
 800d278:	431a      	orrs	r2, r3
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	68db      	ldr	r3, [r3, #12]
 800d27e:	041b      	lsls	r3, r3, #16
 800d280:	431a      	orrs	r2, r3
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	3b01      	subs	r3, #1
 800d288:	051b      	lsls	r3, r3, #20
 800d28a:	431a      	orrs	r2, r3
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	695b      	ldr	r3, [r3, #20]
 800d290:	3b02      	subs	r3, #2
 800d292:	061b      	lsls	r3, r3, #24
 800d294:	431a      	orrs	r2, r3
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	699b      	ldr	r3, [r3, #24]
 800d29a:	4313      	orrs	r3, r2
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	3201      	adds	r2, #1
 800d2a0:	4319      	orrs	r1, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2b4:	d113      	bne.n	800d2de <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d2be:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	051b      	lsls	r3, r3, #20
 800d2c8:	697a      	ldr	r2, [r7, #20]
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	431a      	orrs	r2, r3
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	371c      	adds	r7, #28
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
 800d2f8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d300:	d11d      	bne.n	800d33e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d30a:	4b13      	ldr	r3, [pc, #76]	; (800d358 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800d30c:	4013      	ands	r3, r2
 800d30e:	68ba      	ldr	r2, [r7, #8]
 800d310:	6811      	ldr	r1, [r2, #0]
 800d312:	68ba      	ldr	r2, [r7, #8]
 800d314:	6852      	ldr	r2, [r2, #4]
 800d316:	0112      	lsls	r2, r2, #4
 800d318:	4311      	orrs	r1, r2
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	6892      	ldr	r2, [r2, #8]
 800d31e:	0212      	lsls	r2, r2, #8
 800d320:	4311      	orrs	r1, r2
 800d322:	68ba      	ldr	r2, [r7, #8]
 800d324:	6992      	ldr	r2, [r2, #24]
 800d326:	4311      	orrs	r1, r2
 800d328:	68ba      	ldr	r2, [r7, #8]
 800d32a:	68d2      	ldr	r2, [r2, #12]
 800d32c:	0412      	lsls	r2, r2, #16
 800d32e:	430a      	orrs	r2, r1
 800d330:	ea43 0102 	orr.w	r1, r3, r2
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d33c:	e005      	b.n	800d34a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800d34a:	2300      	movs	r3, #0
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3714      	adds	r7, #20
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr
 800d358:	cff00000 	.word	0xcff00000

0800d35c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800d35c:	b5b0      	push	{r4, r5, r7, lr}
 800d35e:	b08c      	sub	sp, #48	; 0x30
 800d360:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800d362:	4b96      	ldr	r3, [pc, #600]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d364:	22c0      	movs	r2, #192	; 0xc0
 800d366:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800d368:	4b94      	ldr	r3, [pc, #592]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d36a:	22a8      	movs	r2, #168	; 0xa8
 800d36c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800d36e:	4b93      	ldr	r3, [pc, #588]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d370:	2201      	movs	r2, #1
 800d372:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 30;
 800d374:	4b91      	ldr	r3, [pc, #580]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d376:	221e      	movs	r2, #30
 800d378:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800d37a:	4b91      	ldr	r3, [pc, #580]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d37c:	22ff      	movs	r2, #255	; 0xff
 800d37e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800d380:	4b8f      	ldr	r3, [pc, #572]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d382:	22ff      	movs	r2, #255	; 0xff
 800d384:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800d386:	4b8e      	ldr	r3, [pc, #568]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d388:	22ff      	movs	r2, #255	; 0xff
 800d38a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800d38c:	4b8c      	ldr	r3, [pc, #560]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d38e:	2200      	movs	r2, #0
 800d390:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800d392:	4b8c      	ldr	r3, [pc, #560]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d394:	22c0      	movs	r2, #192	; 0xc0
 800d396:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800d398:	4b8a      	ldr	r3, [pc, #552]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d39a:	22a8      	movs	r2, #168	; 0xa8
 800d39c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800d39e:	4b89      	ldr	r3, [pc, #548]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800d3a4:	4b87      	ldr	r3, [pc, #540]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	f006 fa6b 	bl	8013888 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800d3b2:	4b82      	ldr	r3, [pc, #520]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	061a      	lsls	r2, r3, #24
 800d3b8:	4b80      	ldr	r3, [pc, #512]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d3ba:	785b      	ldrb	r3, [r3, #1]
 800d3bc:	041b      	lsls	r3, r3, #16
 800d3be:	431a      	orrs	r2, r3
 800d3c0:	4b7e      	ldr	r3, [pc, #504]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d3c2:	789b      	ldrb	r3, [r3, #2]
 800d3c4:	021b      	lsls	r3, r3, #8
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	4a7c      	ldr	r2, [pc, #496]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d3ca:	78d2      	ldrb	r2, [r2, #3]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	061a      	lsls	r2, r3, #24
 800d3d0:	4b7a      	ldr	r3, [pc, #488]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	0619      	lsls	r1, r3, #24
 800d3d6:	4b79      	ldr	r3, [pc, #484]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d3d8:	785b      	ldrb	r3, [r3, #1]
 800d3da:	041b      	lsls	r3, r3, #16
 800d3dc:	4319      	orrs	r1, r3
 800d3de:	4b77      	ldr	r3, [pc, #476]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d3e0:	789b      	ldrb	r3, [r3, #2]
 800d3e2:	021b      	lsls	r3, r3, #8
 800d3e4:	430b      	orrs	r3, r1
 800d3e6:	4975      	ldr	r1, [pc, #468]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d3e8:	78c9      	ldrb	r1, [r1, #3]
 800d3ea:	430b      	orrs	r3, r1
 800d3ec:	021b      	lsls	r3, r3, #8
 800d3ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3f2:	431a      	orrs	r2, r3
 800d3f4:	4b71      	ldr	r3, [pc, #452]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	0619      	lsls	r1, r3, #24
 800d3fa:	4b70      	ldr	r3, [pc, #448]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d3fc:	785b      	ldrb	r3, [r3, #1]
 800d3fe:	041b      	lsls	r3, r3, #16
 800d400:	4319      	orrs	r1, r3
 800d402:	4b6e      	ldr	r3, [pc, #440]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d404:	789b      	ldrb	r3, [r3, #2]
 800d406:	021b      	lsls	r3, r3, #8
 800d408:	430b      	orrs	r3, r1
 800d40a:	496c      	ldr	r1, [pc, #432]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d40c:	78c9      	ldrb	r1, [r1, #3]
 800d40e:	430b      	orrs	r3, r1
 800d410:	0a1b      	lsrs	r3, r3, #8
 800d412:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d416:	431a      	orrs	r2, r3
 800d418:	4b68      	ldr	r3, [pc, #416]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	0619      	lsls	r1, r3, #24
 800d41e:	4b67      	ldr	r3, [pc, #412]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d420:	785b      	ldrb	r3, [r3, #1]
 800d422:	041b      	lsls	r3, r3, #16
 800d424:	4319      	orrs	r1, r3
 800d426:	4b65      	ldr	r3, [pc, #404]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d428:	789b      	ldrb	r3, [r3, #2]
 800d42a:	021b      	lsls	r3, r3, #8
 800d42c:	430b      	orrs	r3, r1
 800d42e:	4963      	ldr	r1, [pc, #396]	; (800d5bc <MX_LWIP_Init+0x260>)
 800d430:	78c9      	ldrb	r1, [r1, #3]
 800d432:	430b      	orrs	r3, r1
 800d434:	0e1b      	lsrs	r3, r3, #24
 800d436:	4313      	orrs	r3, r2
 800d438:	4a63      	ldr	r2, [pc, #396]	; (800d5c8 <MX_LWIP_Init+0x26c>)
 800d43a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800d43c:	4b60      	ldr	r3, [pc, #384]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	061a      	lsls	r2, r3, #24
 800d442:	4b5f      	ldr	r3, [pc, #380]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d444:	785b      	ldrb	r3, [r3, #1]
 800d446:	041b      	lsls	r3, r3, #16
 800d448:	431a      	orrs	r2, r3
 800d44a:	4b5d      	ldr	r3, [pc, #372]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d44c:	789b      	ldrb	r3, [r3, #2]
 800d44e:	021b      	lsls	r3, r3, #8
 800d450:	4313      	orrs	r3, r2
 800d452:	4a5b      	ldr	r2, [pc, #364]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d454:	78d2      	ldrb	r2, [r2, #3]
 800d456:	4313      	orrs	r3, r2
 800d458:	061a      	lsls	r2, r3, #24
 800d45a:	4b59      	ldr	r3, [pc, #356]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	0619      	lsls	r1, r3, #24
 800d460:	4b57      	ldr	r3, [pc, #348]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d462:	785b      	ldrb	r3, [r3, #1]
 800d464:	041b      	lsls	r3, r3, #16
 800d466:	4319      	orrs	r1, r3
 800d468:	4b55      	ldr	r3, [pc, #340]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d46a:	789b      	ldrb	r3, [r3, #2]
 800d46c:	021b      	lsls	r3, r3, #8
 800d46e:	430b      	orrs	r3, r1
 800d470:	4953      	ldr	r1, [pc, #332]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d472:	78c9      	ldrb	r1, [r1, #3]
 800d474:	430b      	orrs	r3, r1
 800d476:	021b      	lsls	r3, r3, #8
 800d478:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d47c:	431a      	orrs	r2, r3
 800d47e:	4b50      	ldr	r3, [pc, #320]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	0619      	lsls	r1, r3, #24
 800d484:	4b4e      	ldr	r3, [pc, #312]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d486:	785b      	ldrb	r3, [r3, #1]
 800d488:	041b      	lsls	r3, r3, #16
 800d48a:	4319      	orrs	r1, r3
 800d48c:	4b4c      	ldr	r3, [pc, #304]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d48e:	789b      	ldrb	r3, [r3, #2]
 800d490:	021b      	lsls	r3, r3, #8
 800d492:	430b      	orrs	r3, r1
 800d494:	494a      	ldr	r1, [pc, #296]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d496:	78c9      	ldrb	r1, [r1, #3]
 800d498:	430b      	orrs	r3, r1
 800d49a:	0a1b      	lsrs	r3, r3, #8
 800d49c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d4a0:	431a      	orrs	r2, r3
 800d4a2:	4b47      	ldr	r3, [pc, #284]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	0619      	lsls	r1, r3, #24
 800d4a8:	4b45      	ldr	r3, [pc, #276]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d4aa:	785b      	ldrb	r3, [r3, #1]
 800d4ac:	041b      	lsls	r3, r3, #16
 800d4ae:	4319      	orrs	r1, r3
 800d4b0:	4b43      	ldr	r3, [pc, #268]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d4b2:	789b      	ldrb	r3, [r3, #2]
 800d4b4:	021b      	lsls	r3, r3, #8
 800d4b6:	430b      	orrs	r3, r1
 800d4b8:	4941      	ldr	r1, [pc, #260]	; (800d5c0 <MX_LWIP_Init+0x264>)
 800d4ba:	78c9      	ldrb	r1, [r1, #3]
 800d4bc:	430b      	orrs	r3, r1
 800d4be:	0e1b      	lsrs	r3, r3, #24
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	4a42      	ldr	r2, [pc, #264]	; (800d5cc <MX_LWIP_Init+0x270>)
 800d4c4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800d4c6:	4b3f      	ldr	r3, [pc, #252]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	061a      	lsls	r2, r3, #24
 800d4cc:	4b3d      	ldr	r3, [pc, #244]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d4ce:	785b      	ldrb	r3, [r3, #1]
 800d4d0:	041b      	lsls	r3, r3, #16
 800d4d2:	431a      	orrs	r2, r3
 800d4d4:	4b3b      	ldr	r3, [pc, #236]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d4d6:	789b      	ldrb	r3, [r3, #2]
 800d4d8:	021b      	lsls	r3, r3, #8
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	4a39      	ldr	r2, [pc, #228]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d4de:	78d2      	ldrb	r2, [r2, #3]
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	061a      	lsls	r2, r3, #24
 800d4e4:	4b37      	ldr	r3, [pc, #220]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	0619      	lsls	r1, r3, #24
 800d4ea:	4b36      	ldr	r3, [pc, #216]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d4ec:	785b      	ldrb	r3, [r3, #1]
 800d4ee:	041b      	lsls	r3, r3, #16
 800d4f0:	4319      	orrs	r1, r3
 800d4f2:	4b34      	ldr	r3, [pc, #208]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d4f4:	789b      	ldrb	r3, [r3, #2]
 800d4f6:	021b      	lsls	r3, r3, #8
 800d4f8:	430b      	orrs	r3, r1
 800d4fa:	4932      	ldr	r1, [pc, #200]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d4fc:	78c9      	ldrb	r1, [r1, #3]
 800d4fe:	430b      	orrs	r3, r1
 800d500:	021b      	lsls	r3, r3, #8
 800d502:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d506:	431a      	orrs	r2, r3
 800d508:	4b2e      	ldr	r3, [pc, #184]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	0619      	lsls	r1, r3, #24
 800d50e:	4b2d      	ldr	r3, [pc, #180]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d510:	785b      	ldrb	r3, [r3, #1]
 800d512:	041b      	lsls	r3, r3, #16
 800d514:	4319      	orrs	r1, r3
 800d516:	4b2b      	ldr	r3, [pc, #172]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d518:	789b      	ldrb	r3, [r3, #2]
 800d51a:	021b      	lsls	r3, r3, #8
 800d51c:	430b      	orrs	r3, r1
 800d51e:	4929      	ldr	r1, [pc, #164]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d520:	78c9      	ldrb	r1, [r1, #3]
 800d522:	430b      	orrs	r3, r1
 800d524:	0a1b      	lsrs	r3, r3, #8
 800d526:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d52a:	431a      	orrs	r2, r3
 800d52c:	4b25      	ldr	r3, [pc, #148]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	0619      	lsls	r1, r3, #24
 800d532:	4b24      	ldr	r3, [pc, #144]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d534:	785b      	ldrb	r3, [r3, #1]
 800d536:	041b      	lsls	r3, r3, #16
 800d538:	4319      	orrs	r1, r3
 800d53a:	4b22      	ldr	r3, [pc, #136]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d53c:	789b      	ldrb	r3, [r3, #2]
 800d53e:	021b      	lsls	r3, r3, #8
 800d540:	430b      	orrs	r3, r1
 800d542:	4920      	ldr	r1, [pc, #128]	; (800d5c4 <MX_LWIP_Init+0x268>)
 800d544:	78c9      	ldrb	r1, [r1, #3]
 800d546:	430b      	orrs	r3, r1
 800d548:	0e1b      	lsrs	r3, r3, #24
 800d54a:	4313      	orrs	r3, r2
 800d54c:	4a20      	ldr	r2, [pc, #128]	; (800d5d0 <MX_LWIP_Init+0x274>)
 800d54e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800d550:	4b20      	ldr	r3, [pc, #128]	; (800d5d4 <MX_LWIP_Init+0x278>)
 800d552:	9302      	str	r3, [sp, #8]
 800d554:	4b20      	ldr	r3, [pc, #128]	; (800d5d8 <MX_LWIP_Init+0x27c>)
 800d556:	9301      	str	r3, [sp, #4]
 800d558:	2300      	movs	r3, #0
 800d55a:	9300      	str	r3, [sp, #0]
 800d55c:	4b1c      	ldr	r3, [pc, #112]	; (800d5d0 <MX_LWIP_Init+0x274>)
 800d55e:	4a1b      	ldr	r2, [pc, #108]	; (800d5cc <MX_LWIP_Init+0x270>)
 800d560:	4919      	ldr	r1, [pc, #100]	; (800d5c8 <MX_LWIP_Init+0x26c>)
 800d562:	481e      	ldr	r0, [pc, #120]	; (800d5dc <MX_LWIP_Init+0x280>)
 800d564:	f006 ff5a 	bl	801441c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800d568:	481c      	ldr	r0, [pc, #112]	; (800d5dc <MX_LWIP_Init+0x280>)
 800d56a:	f007 f909 	bl	8014780 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800d56e:	4b1b      	ldr	r3, [pc, #108]	; (800d5dc <MX_LWIP_Init+0x280>)
 800d570:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d574:	089b      	lsrs	r3, r3, #2
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d003      	beq.n	800d588 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800d580:	4816      	ldr	r0, [pc, #88]	; (800d5dc <MX_LWIP_Init+0x280>)
 800d582:	f007 f90d 	bl	80147a0 <netif_set_up>
 800d586:	e002      	b.n	800d58e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800d588:	4814      	ldr	r0, [pc, #80]	; (800d5dc <MX_LWIP_Init+0x280>)
 800d58a:	f007 f975 	bl	8014878 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800d58e:	4914      	ldr	r1, [pc, #80]	; (800d5e0 <MX_LWIP_Init+0x284>)
 800d590:	4812      	ldr	r0, [pc, #72]	; (800d5dc <MX_LWIP_Init+0x280>)
 800d592:	f007 fa07 	bl	80149a4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800d596:	4b13      	ldr	r3, [pc, #76]	; (800d5e4 <MX_LWIP_Init+0x288>)
 800d598:	1d3c      	adds	r4, r7, #4
 800d59a:	461d      	mov	r5, r3
 800d59c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d59e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d5a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800d5a8:	1d3b      	adds	r3, r7, #4
 800d5aa:	490c      	ldr	r1, [pc, #48]	; (800d5dc <MX_LWIP_Init+0x280>)
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f000 fd47 	bl	800e040 <osThreadCreate>

/* USER CODE BEGIN 3 */
/*Create the Ethernet link Handler Thread*/

/* USER CODE END 3 */
}
 800d5b2:	bf00      	nop
 800d5b4:	3720      	adds	r7, #32
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bdb0      	pop	{r4, r5, r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	20001aa8 	.word	0x20001aa8
 800d5c0:	20001aac 	.word	0x20001aac
 800d5c4:	20001ab0 	.word	0x20001ab0
 800d5c8:	20001a9c 	.word	0x20001a9c
 800d5cc:	20001aa0 	.word	0x20001aa0
 800d5d0:	20001aa4 	.word	0x20001aa4
 800d5d4:	08013799 	.word	0x08013799
 800d5d8:	0800dae1 	.word	0x0800dae1
 800d5dc:	20001a68 	.word	0x20001a68
 800d5e0:	0800d5e9 	.word	0x0800d5e9
 800d5e4:	08020a2c 	.word	0x08020a2c

0800d5e8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800d5f0:	bf00      	nop
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b087      	sub	sp, #28
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800d60e:	2320      	movs	r3, #32
 800d610:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d612:	f3bf 8f4f 	dsb	sy
}
 800d616:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800d618:	e00b      	b.n	800d632 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800d61a:	4a0d      	ldr	r2, [pc, #52]	; (800d650 <SCB_InvalidateDCache_by_Addr+0x54>)
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	693a      	ldr	r2, [r7, #16]
 800d626:	4413      	add	r3, r2
 800d628:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	1ad3      	subs	r3, r2, r3
 800d630:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	2b00      	cmp	r3, #0
 800d636:	dcf0      	bgt.n	800d61a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800d638:	f3bf 8f4f 	dsb	sy
}
 800d63c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d63e:	f3bf 8f6f 	isb	sy
}
 800d642:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800d644:	bf00      	nop
 800d646:	371c      	adds	r7, #28
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr
 800d650:	e000ed00 	.word	0xe000ed00

0800d654 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800d65c:	4b04      	ldr	r3, [pc, #16]	; (800d670 <HAL_ETH_RxCpltCallback+0x1c>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4618      	mov	r0, r3
 800d662:	f000 fe69 	bl	800e338 <osSemaphoreRelease>
}
 800d666:	bf00      	nop
 800d668:	3708      	adds	r7, #8
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	20006440 	.word	0x20006440

0800d674 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800d67c:	4b04      	ldr	r3, [pc, #16]	; (800d690 <HAL_ETH_TxCpltCallback+0x1c>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4618      	mov	r0, r3
 800d682:	f000 fe59 	bl	800e338 <osSemaphoreRelease>
}
 800d686:	bf00      	nop
 800d688:	3708      	adds	r7, #8
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	20006444 	.word	0x20006444

0800d694 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7fb feb9 	bl	8009414 <HAL_ETH_GetDMAError>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6a8:	2b80      	cmp	r3, #128	; 0x80
 800d6aa:	d104      	bne.n	800d6b6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800d6ac:	4b04      	ldr	r3, [pc, #16]	; (800d6c0 <HAL_ETH_ErrorCallback+0x2c>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f000 fe41 	bl	800e338 <osSemaphoreRelease>
  }
}
 800d6b6:	bf00      	nop
 800d6b8:	3708      	adds	r7, #8
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	20006440 	.word	0x20006440

0800d6c4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800d6c4:	b5b0      	push	{r4, r5, r7, lr}
 800d6c6:	b0a8      	sub	sp, #160	; 0xa0
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800d6de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d6e2:	2264      	movs	r2, #100	; 0x64
 800d6e4:	2100      	movs	r1, #0
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f011 fe72 	bl	801f3d0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800d6ec:	4b85      	ldr	r3, [pc, #532]	; (800d904 <low_level_init+0x240>)
 800d6ee:	4a86      	ldr	r2, [pc, #536]	; (800d908 <low_level_init+0x244>)
 800d6f0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800d6f8:	2380      	movs	r3, #128	; 0x80
 800d6fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800d6fe:	23e1      	movs	r3, #225	; 0xe1
 800d700:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 800d704:	2300      	movs	r3, #0
 800d706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800d70a:	2300      	movs	r3, #0
 800d70c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 800d710:	2300      	movs	r3, #0
 800d712:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800d716:	4a7b      	ldr	r2, [pc, #492]	; (800d904 <low_level_init+0x240>)
 800d718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d71c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800d71e:	4b79      	ldr	r3, [pc, #484]	; (800d904 <low_level_init+0x240>)
 800d720:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800d724:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800d726:	4b77      	ldr	r3, [pc, #476]	; (800d904 <low_level_init+0x240>)
 800d728:	4a78      	ldr	r2, [pc, #480]	; (800d90c <low_level_init+0x248>)
 800d72a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800d72c:	4b75      	ldr	r3, [pc, #468]	; (800d904 <low_level_init+0x240>)
 800d72e:	4a78      	ldr	r2, [pc, #480]	; (800d910 <low_level_init+0x24c>)
 800d730:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800d732:	4b74      	ldr	r3, [pc, #464]	; (800d904 <low_level_init+0x240>)
 800d734:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d738:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800d73a:	4872      	ldr	r0, [pc, #456]	; (800d904 <low_level_init+0x240>)
 800d73c:	f7fa ffcc 	bl	80086d8 <HAL_ETH_Init>
 800d740:	4603      	mov	r3, r0
 800d742:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800d746:	2238      	movs	r2, #56	; 0x38
 800d748:	2100      	movs	r1, #0
 800d74a:	4872      	ldr	r0, [pc, #456]	; (800d914 <low_level_init+0x250>)
 800d74c:	f011 fe40 	bl	801f3d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800d750:	4b70      	ldr	r3, [pc, #448]	; (800d914 <low_level_init+0x250>)
 800d752:	2221      	movs	r2, #33	; 0x21
 800d754:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800d756:	4b6f      	ldr	r3, [pc, #444]	; (800d914 <low_level_init+0x250>)
 800d758:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800d75c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800d75e:	4b6d      	ldr	r3, [pc, #436]	; (800d914 <low_level_init+0x250>)
 800d760:	2200      	movs	r2, #0
 800d762:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800d764:	486c      	ldr	r0, [pc, #432]	; (800d918 <low_level_init+0x254>)
 800d766:	f006 fd13 	bl	8014190 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2206      	movs	r2, #6
 800d76e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800d772:	4b64      	ldr	r3, [pc, #400]	; (800d904 <low_level_init+0x240>)
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	781a      	ldrb	r2, [r3, #0]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800d77e:	4b61      	ldr	r3, [pc, #388]	; (800d904 <low_level_init+0x240>)
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	785a      	ldrb	r2, [r3, #1]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800d78a:	4b5e      	ldr	r3, [pc, #376]	; (800d904 <low_level_init+0x240>)
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	789a      	ldrb	r2, [r3, #2]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800d796:	4b5b      	ldr	r3, [pc, #364]	; (800d904 <low_level_init+0x240>)
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	78da      	ldrb	r2, [r3, #3]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800d7a2:	4b58      	ldr	r3, [pc, #352]	; (800d904 <low_level_init+0x240>)
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	791a      	ldrb	r2, [r3, #4]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800d7ae:	4b55      	ldr	r3, [pc, #340]	; (800d904 <low_level_init+0x240>)
 800d7b0:	685b      	ldr	r3, [r3, #4]
 800d7b2:	795a      	ldrb	r2, [r3, #5]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d7c0:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7c8:	f043 030a 	orr.w	r3, r3, #10
 800d7cc:	b2da      	uxtb	r2, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800d7d4:	2203      	movs	r2, #3
 800d7d6:	2100      	movs	r1, #0
 800d7d8:	2001      	movs	r0, #1
 800d7da:	f001 f89d 	bl	800e918 <xQueueGenericCreate>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	4a4e      	ldr	r2, [pc, #312]	; (800d91c <low_level_init+0x258>)
 800d7e2:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800d7e4:	2203      	movs	r2, #3
 800d7e6:	2100      	movs	r1, #0
 800d7e8:	2001      	movs	r0, #1
 800d7ea:	f001 f895 	bl	800e918 <xQueueGenericCreate>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	4a4b      	ldr	r2, [pc, #300]	; (800d920 <low_level_init+0x25c>)
 800d7f2:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800d7f4:	4b4b      	ldr	r3, [pc, #300]	; (800d924 <low_level_init+0x260>)
 800d7f6:	f107 0408 	add.w	r4, r7, #8
 800d7fa:	461d      	mov	r5, r3
 800d7fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d800:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800d808:	f107 0308 	add.w	r3, r7, #8
 800d80c:	6879      	ldr	r1, [r7, #4]
 800d80e:	4618      	mov	r0, r3
 800d810:	f000 fc16 	bl	800e040 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800d814:	4944      	ldr	r1, [pc, #272]	; (800d928 <low_level_init+0x264>)
 800d816:	4845      	ldr	r0, [pc, #276]	; (800d92c <low_level_init+0x268>)
 800d818:	f7f9 fd09 	bl	800722e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800d81c:	4843      	ldr	r0, [pc, #268]	; (800d92c <low_level_init+0x268>)
 800d81e:	f7f9 fd38 	bl	8007292 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800d822:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d826:	2b00      	cmp	r3, #0
 800d828:	d165      	bne.n	800d8f6 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800d82a:	4840      	ldr	r0, [pc, #256]	; (800d92c <low_level_init+0x268>)
 800d82c:	f7f9 fdd9 	bl	80073e2 <LAN8742_GetLinkState>
 800d830:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800d834:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d838:	2b01      	cmp	r3, #1
 800d83a:	dc06      	bgt.n	800d84a <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f007 f881 	bl	8014944 <netif_set_link_down>
      netif_set_down(netif);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f007 f818 	bl	8014878 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800d848:	e057      	b.n	800d8fa <low_level_init+0x236>
      switch (PHYLinkState)
 800d84a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d84e:	3b02      	subs	r3, #2
 800d850:	2b03      	cmp	r3, #3
 800d852:	d82b      	bhi.n	800d8ac <low_level_init+0x1e8>
 800d854:	a201      	add	r2, pc, #4	; (adr r2, 800d85c <low_level_init+0x198>)
 800d856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d85a:	bf00      	nop
 800d85c:	0800d86d 	.word	0x0800d86d
 800d860:	0800d87f 	.word	0x0800d87f
 800d864:	0800d88f 	.word	0x0800d88f
 800d868:	0800d89f 	.word	0x0800d89f
        duplex = ETH_FULLDUPLEX_MODE;
 800d86c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800d874:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800d87c:	e01f      	b.n	800d8be <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800d87e:	2300      	movs	r3, #0
 800d880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800d884:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800d88c:	e017      	b.n	800d8be <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800d88e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d892:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800d896:	2300      	movs	r3, #0
 800d898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800d89c:	e00f      	b.n	800d8be <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800d8aa:	e008      	b.n	800d8be <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800d8ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d8b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800d8b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d8b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800d8bc:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800d8be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	480f      	ldr	r0, [pc, #60]	; (800d904 <low_level_init+0x240>)
 800d8c6:	f7fb fc4b 	bl	8009160 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800d8ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d8ce:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 800d8d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8d4:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800d8d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d8da:	4619      	mov	r1, r3
 800d8dc:	4809      	ldr	r0, [pc, #36]	; (800d904 <low_level_init+0x240>)
 800d8de:	f7fb fd29 	bl	8009334 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800d8e2:	4808      	ldr	r0, [pc, #32]	; (800d904 <low_level_init+0x240>)
 800d8e4:	f7fa ffd4 	bl	8008890 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f006 ff59 	bl	80147a0 <netif_set_up>
    netif_set_link_up(netif);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f006 fff4 	bl	80148dc <netif_set_link_up>
}
 800d8f4:	e001      	b.n	800d8fa <low_level_init+0x236>
    Error_Handler();
 800d8f6:	f7f3 fe4f 	bl	8001598 <Error_Handler>
}
 800d8fa:	bf00      	nop
 800d8fc:	37a0      	adds	r7, #160	; 0xa0
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bdb0      	pop	{r4, r5, r7, pc}
 800d902:	bf00      	nop
 800d904:	20006448 	.word	0x20006448
 800d908:	40028000 	.word	0x40028000
 800d90c:	2000013c 	.word	0x2000013c
 800d910:	2000009c 	.word	0x2000009c
 800d914:	200064f8 	.word	0x200064f8
 800d918:	08023fc0 	.word	0x08023fc0
 800d91c:	20006440 	.word	0x20006440
 800d920:	20006444 	.word	0x20006444
 800d924:	08020a50 	.word	0x08020a50
 800d928:	20000010 	.word	0x20000010
 800d92c:	20006530 	.word	0x20006530

0800d930 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b092      	sub	sp, #72	; 0x48
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800d93a:	2300      	movs	r3, #0
 800d93c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800d93e:	2300      	movs	r3, #0
 800d940:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800d942:	2300      	movs	r3, #0
 800d944:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800d948:	f107 030c 	add.w	r3, r7, #12
 800d94c:	2230      	movs	r2, #48	; 0x30
 800d94e:	2100      	movs	r1, #0
 800d950:	4618      	mov	r0, r3
 800d952:	f011 fd3d 	bl	801f3d0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800d956:	f107 030c 	add.w	r3, r7, #12
 800d95a:	2230      	movs	r2, #48	; 0x30
 800d95c:	2100      	movs	r1, #0
 800d95e:	4618      	mov	r0, r3
 800d960:	f011 fd36 	bl	801f3d0 <memset>

  for(q = p; q != NULL; q = q->next)
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	643b      	str	r3, [r7, #64]	; 0x40
 800d968:	e045      	b.n	800d9f6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800d96a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d96c:	2b03      	cmp	r3, #3
 800d96e:	d902      	bls.n	800d976 <low_level_output+0x46>
      return ERR_IF;
 800d970:	f06f 030b 	mvn.w	r3, #11
 800d974:	e065      	b.n	800da42 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800d976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d978:	6859      	ldr	r1, [r3, #4]
 800d97a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d97c:	4613      	mov	r3, r2
 800d97e:	005b      	lsls	r3, r3, #1
 800d980:	4413      	add	r3, r2
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	3348      	adds	r3, #72	; 0x48
 800d986:	443b      	add	r3, r7
 800d988:	3b3c      	subs	r3, #60	; 0x3c
 800d98a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800d98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d98e:	895b      	ldrh	r3, [r3, #10]
 800d990:	4619      	mov	r1, r3
 800d992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d994:	4613      	mov	r3, r2
 800d996:	005b      	lsls	r3, r3, #1
 800d998:	4413      	add	r3, r2
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	3348      	adds	r3, #72	; 0x48
 800d99e:	443b      	add	r3, r7
 800d9a0:	3b38      	subs	r3, #56	; 0x38
 800d9a2:	6019      	str	r1, [r3, #0]

    if(i>0)
 800d9a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d011      	beq.n	800d9ce <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800d9aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9ac:	1e5a      	subs	r2, r3, #1
 800d9ae:	f107 000c 	add.w	r0, r7, #12
 800d9b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	440b      	add	r3, r1
 800d9ba:	009b      	lsls	r3, r3, #2
 800d9bc:	18c1      	adds	r1, r0, r3
 800d9be:	4613      	mov	r3, r2
 800d9c0:	005b      	lsls	r3, r3, #1
 800d9c2:	4413      	add	r3, r2
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	3348      	adds	r3, #72	; 0x48
 800d9c8:	443b      	add	r3, r7
 800d9ca:	3b34      	subs	r3, #52	; 0x34
 800d9cc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800d9ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d109      	bne.n	800d9ea <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800d9d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9d8:	4613      	mov	r3, r2
 800d9da:	005b      	lsls	r3, r3, #1
 800d9dc:	4413      	add	r3, r2
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	3348      	adds	r3, #72	; 0x48
 800d9e2:	443b      	add	r3, r7
 800d9e4:	3b34      	subs	r3, #52	; 0x34
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	601a      	str	r2, [r3, #0]
    }

    i++;
 800d9ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800d9f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	643b      	str	r3, [r7, #64]	; 0x40
 800d9f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1b6      	bne.n	800d96a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	891b      	ldrh	r3, [r3, #8]
 800da00:	461a      	mov	r2, r3
 800da02:	4b12      	ldr	r3, [pc, #72]	; (800da4c <low_level_output+0x11c>)
 800da04:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800da06:	4a11      	ldr	r2, [pc, #68]	; (800da4c <low_level_output+0x11c>)
 800da08:	f107 030c 	add.w	r3, r7, #12
 800da0c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800da0e:	4a0f      	ldr	r2, [pc, #60]	; (800da4c <low_level_output+0x11c>)
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800da14:	6838      	ldr	r0, [r7, #0]
 800da16:	f007 fc19 	bl	801524c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800da1a:	490c      	ldr	r1, [pc, #48]	; (800da4c <low_level_output+0x11c>)
 800da1c:	480c      	ldr	r0, [pc, #48]	; (800da50 <low_level_output+0x120>)
 800da1e:	f7fb f845 	bl	8008aac <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800da22:	bf00      	nop
 800da24:	4b0b      	ldr	r3, [pc, #44]	; (800da54 <low_level_output+0x124>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800da2c:	4618      	mov	r0, r3
 800da2e:	f000 fc35 	bl	800e29c <osSemaphoreWait>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1f5      	bne.n	800da24 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800da38:	4805      	ldr	r0, [pc, #20]	; (800da50 <low_level_output+0x120>)
 800da3a:	f7fb f9cb 	bl	8008dd4 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800da3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800da42:	4618      	mov	r0, r3
 800da44:	3748      	adds	r7, #72	; 0x48
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	200064f8 	.word	0x200064f8
 800da50:	20006448 	.word	0x20006448
 800da54:	20006444 	.word	0x20006444

0800da58 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800da60:	2300      	movs	r3, #0
 800da62:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800da64:	4b07      	ldr	r3, [pc, #28]	; (800da84 <low_level_input+0x2c>)
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d105      	bne.n	800da78 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800da6c:	f107 030c 	add.w	r3, r7, #12
 800da70:	4619      	mov	r1, r3
 800da72:	4805      	ldr	r0, [pc, #20]	; (800da88 <low_level_input+0x30>)
 800da74:	f7fb f876 	bl	8008b64 <HAL_ETH_ReadData>
  }

  return p;
 800da78:	68fb      	ldr	r3, [r7, #12]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	2000643c 	.word	0x2000643c
 800da88:	20006448 	.word	0x20006448

0800da8c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800da94:	2300      	movs	r3, #0
 800da96:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800da9c:	4b0f      	ldr	r3, [pc, #60]	; (800dadc <ethernetif_input+0x50>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800daa4:	4618      	mov	r0, r3
 800daa6:	f000 fbf9 	bl	800e29c <osSemaphoreWait>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d1f5      	bne.n	800da9c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800dab0:	68b8      	ldr	r0, [r7, #8]
 800dab2:	f7ff ffd1 	bl	800da58 <low_level_input>
 800dab6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00a      	beq.n	800dad4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	691b      	ldr	r3, [r3, #16]
 800dac2:	68b9      	ldr	r1, [r7, #8]
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	4798      	blx	r3
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d002      	beq.n	800dad4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800dace:	68f8      	ldr	r0, [r7, #12]
 800dad0:	f007 fb16 	bl	8015100 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d1ea      	bne.n	800dab0 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800dada:	e7df      	b.n	800da9c <ethernetif_input+0x10>
 800dadc:	20006440 	.word	0x20006440

0800dae0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d106      	bne.n	800dafc <ethernetif_init+0x1c>
 800daee:	4b0e      	ldr	r3, [pc, #56]	; (800db28 <ethernetif_init+0x48>)
 800daf0:	f240 12ef 	movw	r2, #495	; 0x1ef
 800daf4:	490d      	ldr	r1, [pc, #52]	; (800db2c <ethernetif_init+0x4c>)
 800daf6:	480e      	ldr	r0, [pc, #56]	; (800db30 <ethernetif_init+0x50>)
 800daf8:	f011 fd52 	bl	801f5a0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2273      	movs	r2, #115	; 0x73
 800db00:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2274      	movs	r2, #116	; 0x74
 800db08:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	4a09      	ldr	r2, [pc, #36]	; (800db34 <ethernetif_init+0x54>)
 800db10:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	4a08      	ldr	r2, [pc, #32]	; (800db38 <ethernetif_init+0x58>)
 800db16:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f7ff fdd3 	bl	800d6c4 <low_level_init>

  return ERR_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	3708      	adds	r7, #8
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	08020a6c 	.word	0x08020a6c
 800db2c:	08020a88 	.word	0x08020a88
 800db30:	08020a98 	.word	0x08020a98
 800db34:	0801cfcd 	.word	0x0801cfcd
 800db38:	0800d931 	.word	0x0800d931

0800db3c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800db48:	68f9      	ldr	r1, [r7, #12]
 800db4a:	4809      	ldr	r0, [pc, #36]	; (800db70 <pbuf_free_custom+0x34>)
 800db4c:	f006 fc10 	bl	8014370 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800db50:	4b08      	ldr	r3, [pc, #32]	; (800db74 <pbuf_free_custom+0x38>)
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	2b01      	cmp	r3, #1
 800db56:	d107      	bne.n	800db68 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800db58:	4b06      	ldr	r3, [pc, #24]	; (800db74 <pbuf_free_custom+0x38>)
 800db5a:	2200      	movs	r2, #0
 800db5c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800db5e:	4b06      	ldr	r3, [pc, #24]	; (800db78 <pbuf_free_custom+0x3c>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4618      	mov	r0, r3
 800db64:	f000 fbe8 	bl	800e338 <osSemaphoreRelease>
  }
}
 800db68:	bf00      	nop
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	08023fc0 	.word	0x08023fc0
 800db74:	2000643c 	.word	0x2000643c
 800db78:	20006440 	.word	0x20006440

0800db7c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800db80:	f7f9 fcd8 	bl	8007534 <HAL_GetTick>
 800db84:	4603      	mov	r3, r0
}
 800db86:	4618      	mov	r0, r3
 800db88:	bd80      	pop	{r7, pc}
	...

0800db8c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b08e      	sub	sp, #56	; 0x38
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db98:	2200      	movs	r2, #0
 800db9a:	601a      	str	r2, [r3, #0]
 800db9c:	605a      	str	r2, [r3, #4]
 800db9e:	609a      	str	r2, [r3, #8]
 800dba0:	60da      	str	r2, [r3, #12]
 800dba2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a52      	ldr	r2, [pc, #328]	; (800dcf4 <HAL_ETH_MspInit+0x168>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	f040 809e 	bne.w	800dcec <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800dbb0:	4b51      	ldr	r3, [pc, #324]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dbb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb4:	4a50      	ldr	r2, [pc, #320]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dbb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dbba:	6313      	str	r3, [r2, #48]	; 0x30
 800dbbc:	4b4e      	ldr	r3, [pc, #312]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dbbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbc4:	623b      	str	r3, [r7, #32]
 800dbc6:	6a3b      	ldr	r3, [r7, #32]
 800dbc8:	4b4b      	ldr	r3, [pc, #300]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dbca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbcc:	4a4a      	ldr	r2, [pc, #296]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dbce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dbd2:	6313      	str	r3, [r2, #48]	; 0x30
 800dbd4:	4b48      	ldr	r3, [pc, #288]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dbdc:	61fb      	str	r3, [r7, #28]
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	4b45      	ldr	r3, [pc, #276]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbe4:	4a44      	ldr	r2, [pc, #272]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dbe6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dbea:	6313      	str	r3, [r2, #48]	; 0x30
 800dbec:	4b42      	ldr	r3, [pc, #264]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dbee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dbf4:	61bb      	str	r3, [r7, #24]
 800dbf6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dbf8:	4b3f      	ldr	r3, [pc, #252]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dbfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbfc:	4a3e      	ldr	r2, [pc, #248]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dbfe:	f043 0304 	orr.w	r3, r3, #4
 800dc02:	6313      	str	r3, [r2, #48]	; 0x30
 800dc04:	4b3c      	ldr	r3, [pc, #240]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dc06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc08:	f003 0304 	and.w	r3, r3, #4
 800dc0c:	617b      	str	r3, [r7, #20]
 800dc0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc10:	4b39      	ldr	r3, [pc, #228]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dc12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc14:	4a38      	ldr	r2, [pc, #224]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dc16:	f043 0301 	orr.w	r3, r3, #1
 800dc1a:	6313      	str	r3, [r2, #48]	; 0x30
 800dc1c:	4b36      	ldr	r3, [pc, #216]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc20:	f003 0301 	and.w	r3, r3, #1
 800dc24:	613b      	str	r3, [r7, #16]
 800dc26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dc28:	4b33      	ldr	r3, [pc, #204]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc2c:	4a32      	ldr	r2, [pc, #200]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dc2e:	f043 0302 	orr.w	r3, r3, #2
 800dc32:	6313      	str	r3, [r2, #48]	; 0x30
 800dc34:	4b30      	ldr	r3, [pc, #192]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dc36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc38:	f003 0302 	and.w	r3, r3, #2
 800dc3c:	60fb      	str	r3, [r7, #12]
 800dc3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800dc40:	4b2d      	ldr	r3, [pc, #180]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dc42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc44:	4a2c      	ldr	r2, [pc, #176]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dc46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc4a:	6313      	str	r3, [r2, #48]	; 0x30
 800dc4c:	4b2a      	ldr	r3, [pc, #168]	; (800dcf8 <HAL_ETH_MspInit+0x16c>)
 800dc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc54:	60bb      	str	r3, [r7, #8]
 800dc56:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800dc58:	2332      	movs	r3, #50	; 0x32
 800dc5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc5c:	2302      	movs	r3, #2
 800dc5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc60:	2300      	movs	r3, #0
 800dc62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc64:	2303      	movs	r3, #3
 800dc66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800dc68:	230b      	movs	r3, #11
 800dc6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dc6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc70:	4619      	mov	r1, r3
 800dc72:	4822      	ldr	r0, [pc, #136]	; (800dcfc <HAL_ETH_MspInit+0x170>)
 800dc74:	f7fb ffde 	bl	8009c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800dc78:	2386      	movs	r3, #134	; 0x86
 800dc7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc7c:	2302      	movs	r3, #2
 800dc7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc80:	2300      	movs	r3, #0
 800dc82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc84:	2303      	movs	r3, #3
 800dc86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800dc88:	230b      	movs	r3, #11
 800dc8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc90:	4619      	mov	r1, r3
 800dc92:	481b      	ldr	r0, [pc, #108]	; (800dd00 <HAL_ETH_MspInit+0x174>)
 800dc94:	f7fb ffce 	bl	8009c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800dc98:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800dc9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc9e:	2302      	movs	r3, #2
 800dca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dca2:	2300      	movs	r3, #0
 800dca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dca6:	2303      	movs	r3, #3
 800dca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800dcaa:	230b      	movs	r3, #11
 800dcac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dcae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	4813      	ldr	r0, [pc, #76]	; (800dd04 <HAL_ETH_MspInit+0x178>)
 800dcb6:	f7fb ffbd 	bl	8009c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800dcba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dcbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dcc8:	2303      	movs	r3, #3
 800dcca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800dccc:	230b      	movs	r3, #11
 800dcce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800dcd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	480c      	ldr	r0, [pc, #48]	; (800dd08 <HAL_ETH_MspInit+0x17c>)
 800dcd8:	f7fb ffac 	bl	8009c34 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800dcdc:	2200      	movs	r2, #0
 800dcde:	2105      	movs	r1, #5
 800dce0:	203d      	movs	r0, #61	; 0x3d
 800dce2:	f7fa fc2f 	bl	8008544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800dce6:	203d      	movs	r0, #61	; 0x3d
 800dce8:	f7fa fc48 	bl	800857c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800dcec:	bf00      	nop
 800dcee:	3738      	adds	r7, #56	; 0x38
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	40028000 	.word	0x40028000
 800dcf8:	40023800 	.word	0x40023800
 800dcfc:	40020800 	.word	0x40020800
 800dd00:	40020000 	.word	0x40020000
 800dd04:	40020400 	.word	0x40020400
 800dd08:	40021800 	.word	0x40021800

0800dd0c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800dd10:	4802      	ldr	r0, [pc, #8]	; (800dd1c <ETH_PHY_IO_Init+0x10>)
 800dd12:	f7fb fb29 	bl	8009368 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	20006448 	.word	0x20006448

0800dd20 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800dd20:	b480      	push	{r7}
 800dd22:	af00      	add	r7, sp, #0
  return 0;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	68f9      	ldr	r1, [r7, #12]
 800dd42:	4807      	ldr	r0, [pc, #28]	; (800dd60 <ETH_PHY_IO_ReadReg+0x30>)
 800dd44:	f7fb f978 	bl	8009038 <HAL_ETH_ReadPHYRegister>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d002      	beq.n	800dd54 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800dd4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd52:	e000      	b.n	800dd56 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800dd54:	2300      	movs	r3, #0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3710      	adds	r7, #16
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	20006448 	.word	0x20006448

0800dd64 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	60f8      	str	r0, [r7, #12]
 800dd6c:	60b9      	str	r1, [r7, #8]
 800dd6e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	68ba      	ldr	r2, [r7, #8]
 800dd74:	68f9      	ldr	r1, [r7, #12]
 800dd76:	4807      	ldr	r0, [pc, #28]	; (800dd94 <ETH_PHY_IO_WriteReg+0x30>)
 800dd78:	f7fb f9a9 	bl	80090ce <HAL_ETH_WritePHYRegister>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d002      	beq.n	800dd88 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800dd82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd86:	e000      	b.n	800dd8a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800dd88:	2300      	movs	r3, #0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	20006448 	.word	0x20006448

0800dd98 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800dd9c:	f7f9 fbca 	bl	8007534 <HAL_GetTick>
 800dda0:	4603      	mov	r3, r0
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	bd80      	pop	{r7, pc}
	...

0800dda8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b0a0      	sub	sp, #128	; 0x80
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800ddb0:	f107 0308 	add.w	r3, r7, #8
 800ddb4:	2264      	movs	r2, #100	; 0x64
 800ddb6:	2100      	movs	r1, #0
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f011 fb09 	bl	801f3d0 <memset>
  int32_t PHYLinkState = 0;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	67bb      	str	r3, [r7, #120]	; 0x78
 800ddca:	2300      	movs	r3, #0
 800ddcc:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ddd2:	483a      	ldr	r0, [pc, #232]	; (800debc <ethernet_link_thread+0x114>)
 800ddd4:	f7f9 fb05 	bl	80073e2 <LAN8742_GetLinkState>
 800ddd8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800ddda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dddc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dde0:	089b      	lsrs	r3, r3, #2
 800dde2:	f003 0301 	and.w	r3, r3, #1
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d00c      	beq.n	800de06 <ethernet_link_thread+0x5e>
 800ddec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	dc09      	bgt.n	800de06 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800ddf2:	4833      	ldr	r0, [pc, #204]	; (800dec0 <ethernet_link_thread+0x118>)
 800ddf4:	f7fa fdda 	bl	80089ac <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800ddf8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ddfa:	f006 fd3d 	bl	8014878 <netif_set_down>
    netif_set_link_down(netif);
 800ddfe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800de00:	f006 fda0 	bl	8014944 <netif_set_link_down>
 800de04:	e055      	b.n	800deb2 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800de06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de0c:	f003 0304 	and.w	r3, r3, #4
 800de10:	2b00      	cmp	r3, #0
 800de12:	d14e      	bne.n	800deb2 <ethernet_link_thread+0x10a>
 800de14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de16:	2b01      	cmp	r3, #1
 800de18:	dd4b      	ble.n	800deb2 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800de1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de1c:	3b02      	subs	r3, #2
 800de1e:	2b03      	cmp	r3, #3
 800de20:	d82a      	bhi.n	800de78 <ethernet_link_thread+0xd0>
 800de22:	a201      	add	r2, pc, #4	; (adr r2, 800de28 <ethernet_link_thread+0x80>)
 800de24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de28:	0800de39 	.word	0x0800de39
 800de2c:	0800de4b 	.word	0x0800de4b
 800de30:	0800de5b 	.word	0x0800de5b
 800de34:	0800de6b 	.word	0x0800de6b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800de38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de3c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800de3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800de42:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800de44:	2301      	movs	r3, #1
 800de46:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800de48:	e017      	b.n	800de7a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800de4a:	2300      	movs	r3, #0
 800de4c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800de4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800de52:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800de54:	2301      	movs	r3, #1
 800de56:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800de58:	e00f      	b.n	800de7a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800de5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de5e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800de60:	2300      	movs	r3, #0
 800de62:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800de64:	2301      	movs	r3, #1
 800de66:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800de68:	e007      	b.n	800de7a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800de6a:	2300      	movs	r3, #0
 800de6c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800de6e:	2300      	movs	r3, #0
 800de70:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800de72:	2301      	movs	r3, #1
 800de74:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800de76:	e000      	b.n	800de7a <ethernet_link_thread+0xd2>
    default:
      break;
 800de78:	bf00      	nop
    }

    if(linkchanged)
 800de7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d018      	beq.n	800deb2 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800de80:	f107 0308 	add.w	r3, r7, #8
 800de84:	4619      	mov	r1, r3
 800de86:	480e      	ldr	r0, [pc, #56]	; (800dec0 <ethernet_link_thread+0x118>)
 800de88:	f7fb f96a 	bl	8009160 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800de8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de8e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800de90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de92:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800de94:	f107 0308 	add.w	r3, r7, #8
 800de98:	4619      	mov	r1, r3
 800de9a:	4809      	ldr	r0, [pc, #36]	; (800dec0 <ethernet_link_thread+0x118>)
 800de9c:	f7fb fa4a 	bl	8009334 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800dea0:	4807      	ldr	r0, [pc, #28]	; (800dec0 <ethernet_link_thread+0x118>)
 800dea2:	f7fa fc95 	bl	80087d0 <HAL_ETH_Start>
      netif_set_up(netif);
 800dea6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dea8:	f006 fc7a 	bl	80147a0 <netif_set_up>
      netif_set_link_up(netif);
 800deac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800deae:	f006 fd15 	bl	80148dc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800deb2:	2064      	movs	r0, #100	; 0x64
 800deb4:	f000 f910 	bl	800e0d8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800deb8:	e78b      	b.n	800ddd2 <ethernet_link_thread+0x2a>
 800deba:	bf00      	nop
 800debc:	20006530 	.word	0x20006530
 800dec0:	20006448 	.word	0x20006448

0800dec4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b086      	sub	sp, #24
 800dec8:	af02      	add	r7, sp, #8
 800deca:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800decc:	4812      	ldr	r0, [pc, #72]	; (800df18 <HAL_ETH_RxAllocateCallback+0x54>)
 800dece:	f006 f9db 	bl	8014288 <memp_malloc_pool>
 800ded2:	60f8      	str	r0, [r7, #12]
  if (p)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d014      	beq.n	800df04 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	f103 0220 	add.w	r2, r3, #32
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	4a0d      	ldr	r2, [pc, #52]	; (800df1c <HAL_ETH_RxAllocateCallback+0x58>)
 800dee8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800def2:	9201      	str	r2, [sp, #4]
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2241      	movs	r2, #65	; 0x41
 800defa:	2100      	movs	r1, #0
 800defc:	2000      	movs	r0, #0
 800defe:	f006 ff45 	bl	8014d8c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800df02:	e005      	b.n	800df10 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800df04:	4b06      	ldr	r3, [pc, #24]	; (800df20 <HAL_ETH_RxAllocateCallback+0x5c>)
 800df06:	2201      	movs	r2, #1
 800df08:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	601a      	str	r2, [r3, #0]
}
 800df10:	bf00      	nop
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	08023fc0 	.word	0x08023fc0
 800df1c:	0800db3d 	.word	0x0800db3d
 800df20:	2000643c 	.word	0x2000643c

0800df24 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b088      	sub	sp, #32
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	607a      	str	r2, [r7, #4]
 800df30:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800df3a:	2300      	movs	r3, #0
 800df3c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	3b20      	subs	r3, #32
 800df42:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	2200      	movs	r2, #0
 800df48:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	2200      	movs	r2, #0
 800df4e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	887a      	ldrh	r2, [r7, #2]
 800df54:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d103      	bne.n	800df66 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	69fa      	ldr	r2, [r7, #28]
 800df62:	601a      	str	r2, [r3, #0]
 800df64:	e003      	b.n	800df6e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	69fa      	ldr	r2, [r7, #28]
 800df6c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	69fa      	ldr	r2, [r7, #28]
 800df72:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	61fb      	str	r3, [r7, #28]
 800df7a:	e009      	b.n	800df90 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	891a      	ldrh	r2, [r3, #8]
 800df80:	887b      	ldrh	r3, [r7, #2]
 800df82:	4413      	add	r3, r2
 800df84:	b29a      	uxth	r2, r3
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	61fb      	str	r3, [r7, #28]
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d1f2      	bne.n	800df7c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800df96:	887b      	ldrh	r3, [r7, #2]
 800df98:	4619      	mov	r1, r3
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7ff fb2e 	bl	800d5fc <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800dfa0:	bf00      	nop
 800dfa2:	3720      	adds	r7, #32
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f007 f8a5 	bl	8015100 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800dfb6:	bf00      	nop
 800dfb8:	3708      	adds	r7, #8
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800dfbe:	b480      	push	{r7}
 800dfc0:	b085      	sub	sp, #20
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800dfcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dfd0:	2b84      	cmp	r3, #132	; 0x84
 800dfd2:	d005      	beq.n	800dfe0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800dfd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	4413      	add	r3, r2
 800dfdc:	3303      	adds	r3, #3
 800dfde:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3714      	adds	r7, #20
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr

0800dfee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800dfee:	b480      	push	{r7}
 800dff0:	b083      	sub	sp, #12
 800dff2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dff4:	f3ef 8305 	mrs	r3, IPSR
 800dff8:	607b      	str	r3, [r7, #4]
  return(result);
 800dffa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	bf14      	ite	ne
 800e000:	2301      	movne	r3, #1
 800e002:	2300      	moveq	r3, #0
 800e004:	b2db      	uxtb	r3, r3
}
 800e006:	4618      	mov	r0, r3
 800e008:	370c      	adds	r7, #12
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr

0800e012 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e012:	b580      	push	{r7, lr}
 800e014:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e016:	f001 fe9f 	bl	800fd58 <vTaskStartScheduler>
  
  return osOK;
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800e024:	f7ff ffe3 	bl	800dfee <inHandlerMode>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d003      	beq.n	800e036 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800e02e:	f001 ffbd 	bl	800ffac <xTaskGetTickCountFromISR>
 800e032:	4603      	mov	r3, r0
 800e034:	e002      	b.n	800e03c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800e036:	f001 ffa9 	bl	800ff8c <xTaskGetTickCount>
 800e03a:	4603      	mov	r3, r0
  }
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e042:	b089      	sub	sp, #36	; 0x24
 800e044:	af04      	add	r7, sp, #16
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	695b      	ldr	r3, [r3, #20]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d020      	beq.n	800e094 <osThreadCreate+0x54>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	699b      	ldr	r3, [r3, #24]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d01c      	beq.n	800e094 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	685c      	ldr	r4, [r3, #4]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681d      	ldr	r5, [r3, #0]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	691e      	ldr	r6, [r3, #16]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7ff ffa6 	bl	800dfbe <makeFreeRtosPriority>
 800e072:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	695b      	ldr	r3, [r3, #20]
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e07c:	9202      	str	r2, [sp, #8]
 800e07e:	9301      	str	r3, [sp, #4]
 800e080:	9100      	str	r1, [sp, #0]
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	4632      	mov	r2, r6
 800e086:	4629      	mov	r1, r5
 800e088:	4620      	mov	r0, r4
 800e08a:	f001 fb67 	bl	800f75c <xTaskCreateStatic>
 800e08e:	4603      	mov	r3, r0
 800e090:	60fb      	str	r3, [r7, #12]
 800e092:	e01c      	b.n	800e0ce <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	685c      	ldr	r4, [r3, #4]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e0a0:	b29e      	uxth	r6, r3
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7ff ff88 	bl	800dfbe <makeFreeRtosPriority>
 800e0ae:	4602      	mov	r2, r0
 800e0b0:	f107 030c 	add.w	r3, r7, #12
 800e0b4:	9301      	str	r3, [sp, #4]
 800e0b6:	9200      	str	r2, [sp, #0]
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	4632      	mov	r2, r6
 800e0bc:	4629      	mov	r1, r5
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f001 fbaf 	bl	800f822 <xTaskCreate>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d001      	beq.n	800e0ce <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	e000      	b.n	800e0d0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3714      	adds	r7, #20
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e0d8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <osDelay+0x16>
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	e000      	b.n	800e0f0 <osDelay+0x18>
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f001 fdfb 	bl	800fcec <vTaskDelay>
  
  return osOK;
 800e0f6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d007      	beq.n	800e120 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	4619      	mov	r1, r3
 800e116:	2001      	movs	r0, #1
 800e118:	f000 fc91 	bl	800ea3e <xQueueCreateMutexStatic>
 800e11c:	4603      	mov	r3, r0
 800e11e:	e003      	b.n	800e128 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800e120:	2001      	movs	r0, #1
 800e122:	f000 fc74 	bl	800ea0e <xQueueCreateMutex>
 800e126:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3708      	adds	r7, #8
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e13a:	2300      	movs	r3, #0
 800e13c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d101      	bne.n	800e148 <osMutexWait+0x18>
    return osErrorParameter;
 800e144:	2380      	movs	r3, #128	; 0x80
 800e146:	e03a      	b.n	800e1be <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800e148:	2300      	movs	r3, #0
 800e14a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e152:	d103      	bne.n	800e15c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800e154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e158:	60fb      	str	r3, [r7, #12]
 800e15a:	e009      	b.n	800e170 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d006      	beq.n	800e170 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d101      	bne.n	800e170 <osMutexWait+0x40>
      ticks = 1;
 800e16c:	2301      	movs	r3, #1
 800e16e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800e170:	f7ff ff3d 	bl	800dfee <inHandlerMode>
 800e174:	4603      	mov	r3, r0
 800e176:	2b00      	cmp	r3, #0
 800e178:	d017      	beq.n	800e1aa <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800e17a:	f107 0308 	add.w	r3, r7, #8
 800e17e:	461a      	mov	r2, r3
 800e180:	2100      	movs	r1, #0
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f001 f8ac 	bl	800f2e0 <xQueueReceiveFromISR>
 800e188:	4603      	mov	r3, r0
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d001      	beq.n	800e192 <osMutexWait+0x62>
      return osErrorOS;
 800e18e:	23ff      	movs	r3, #255	; 0xff
 800e190:	e015      	b.n	800e1be <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d011      	beq.n	800e1bc <osMutexWait+0x8c>
 800e198:	4b0b      	ldr	r3, [pc, #44]	; (800e1c8 <osMutexWait+0x98>)
 800e19a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e19e:	601a      	str	r2, [r3, #0]
 800e1a0:	f3bf 8f4f 	dsb	sy
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	e008      	b.n	800e1bc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800e1aa:	68f9      	ldr	r1, [r7, #12]
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 ff83 	bl	800f0b8 <xQueueSemaphoreTake>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d001      	beq.n	800e1bc <osMutexWait+0x8c>
    return osErrorOS;
 800e1b8:	23ff      	movs	r3, #255	; 0xff
 800e1ba:	e000      	b.n	800e1be <osMutexWait+0x8e>
  }
  
  return osOK;
 800e1bc:	2300      	movs	r3, #0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3710      	adds	r7, #16
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	e000ed04 	.word	0xe000ed04

0800e1cc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800e1dc:	f7ff ff07 	bl	800dfee <inHandlerMode>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d016      	beq.n	800e214 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800e1e6:	f107 0308 	add.w	r3, r7, #8
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 fde7 	bl	800edc0 <xQueueGiveFromISR>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d001      	beq.n	800e1fc <osMutexRelease+0x30>
      return osErrorOS;
 800e1f8:	23ff      	movs	r3, #255	; 0xff
 800e1fa:	e017      	b.n	800e22c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d013      	beq.n	800e22a <osMutexRelease+0x5e>
 800e202:	4b0c      	ldr	r3, [pc, #48]	; (800e234 <osMutexRelease+0x68>)
 800e204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e208:	601a      	str	r2, [r3, #0]
 800e20a:	f3bf 8f4f 	dsb	sy
 800e20e:	f3bf 8f6f 	isb	sy
 800e212:	e00a      	b.n	800e22a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800e214:	2300      	movs	r3, #0
 800e216:	2200      	movs	r2, #0
 800e218:	2100      	movs	r1, #0
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 fc2a 	bl	800ea74 <xQueueGenericSend>
 800e220:	4603      	mov	r3, r0
 800e222:	2b01      	cmp	r3, #1
 800e224:	d001      	beq.n	800e22a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800e226:	23ff      	movs	r3, #255	; 0xff
 800e228:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800e22a:	68fb      	ldr	r3, [r7, #12]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	e000ed04 	.word	0xe000ed04

0800e238 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800e238:	b580      	push	{r7, lr}
 800e23a:	b086      	sub	sp, #24
 800e23c:	af02      	add	r7, sp, #8
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d00f      	beq.n	800e26a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d10a      	bne.n	800e266 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	2203      	movs	r2, #3
 800e256:	9200      	str	r2, [sp, #0]
 800e258:	2200      	movs	r2, #0
 800e25a:	2100      	movs	r1, #0
 800e25c:	2001      	movs	r0, #1
 800e25e:	f000 fad9 	bl	800e814 <xQueueGenericCreateStatic>
 800e262:	4603      	mov	r3, r0
 800e264:	e016      	b.n	800e294 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800e266:	2300      	movs	r3, #0
 800e268:	e014      	b.n	800e294 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d110      	bne.n	800e292 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800e270:	2203      	movs	r2, #3
 800e272:	2100      	movs	r1, #0
 800e274:	2001      	movs	r0, #1
 800e276:	f000 fb4f 	bl	800e918 <xQueueGenericCreate>
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d005      	beq.n	800e28e <osSemaphoreCreate+0x56>
 800e282:	2300      	movs	r3, #0
 800e284:	2200      	movs	r2, #0
 800e286:	2100      	movs	r1, #0
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f000 fbf3 	bl	800ea74 <xQueueGenericSend>
      return sema;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	e000      	b.n	800e294 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800e292:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800e294:	4618      	mov	r0, r3
 800e296:	3710      	adds	r7, #16
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d101      	bne.n	800e2b4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800e2b0:	2380      	movs	r3, #128	; 0x80
 800e2b2:	e03a      	b.n	800e32a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2be:	d103      	bne.n	800e2c8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800e2c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2c4:	60fb      	str	r3, [r7, #12]
 800e2c6:	e009      	b.n	800e2dc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d006      	beq.n	800e2dc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d101      	bne.n	800e2dc <osSemaphoreWait+0x40>
      ticks = 1;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800e2dc:	f7ff fe87 	bl	800dfee <inHandlerMode>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d017      	beq.n	800e316 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e2e6:	f107 0308 	add.w	r3, r7, #8
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 fff6 	bl	800f2e0 <xQueueReceiveFromISR>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d001      	beq.n	800e2fe <osSemaphoreWait+0x62>
      return osErrorOS;
 800e2fa:	23ff      	movs	r3, #255	; 0xff
 800e2fc:	e015      	b.n	800e32a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d011      	beq.n	800e328 <osSemaphoreWait+0x8c>
 800e304:	4b0b      	ldr	r3, [pc, #44]	; (800e334 <osSemaphoreWait+0x98>)
 800e306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e30a:	601a      	str	r2, [r3, #0]
 800e30c:	f3bf 8f4f 	dsb	sy
 800e310:	f3bf 8f6f 	isb	sy
 800e314:	e008      	b.n	800e328 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e316:	68f9      	ldr	r1, [r7, #12]
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 fecd 	bl	800f0b8 <xQueueSemaphoreTake>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b01      	cmp	r3, #1
 800e322:	d001      	beq.n	800e328 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800e324:	23ff      	movs	r3, #255	; 0xff
 800e326:	e000      	b.n	800e32a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800e328:	2300      	movs	r3, #0
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	e000ed04 	.word	0xe000ed04

0800e338 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800e340:	2300      	movs	r3, #0
 800e342:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800e344:	2300      	movs	r3, #0
 800e346:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800e348:	f7ff fe51 	bl	800dfee <inHandlerMode>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d016      	beq.n	800e380 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e352:	f107 0308 	add.w	r3, r7, #8
 800e356:	4619      	mov	r1, r3
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 fd31 	bl	800edc0 <xQueueGiveFromISR>
 800e35e:	4603      	mov	r3, r0
 800e360:	2b01      	cmp	r3, #1
 800e362:	d001      	beq.n	800e368 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800e364:	23ff      	movs	r3, #255	; 0xff
 800e366:	e017      	b.n	800e398 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d013      	beq.n	800e396 <osSemaphoreRelease+0x5e>
 800e36e:	4b0c      	ldr	r3, [pc, #48]	; (800e3a0 <osSemaphoreRelease+0x68>)
 800e370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e374:	601a      	str	r2, [r3, #0]
 800e376:	f3bf 8f4f 	dsb	sy
 800e37a:	f3bf 8f6f 	isb	sy
 800e37e:	e00a      	b.n	800e396 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e380:	2300      	movs	r3, #0
 800e382:	2200      	movs	r2, #0
 800e384:	2100      	movs	r1, #0
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 fb74 	bl	800ea74 <xQueueGenericSend>
 800e38c:	4603      	mov	r3, r0
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d001      	beq.n	800e396 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800e392:	23ff      	movs	r3, #255	; 0xff
 800e394:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800e396:	68fb      	ldr	r3, [r7, #12]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3710      	adds	r7, #16
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	e000ed04 	.word	0xe000ed04

0800e3a4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800e3ac:	f7ff fe1f 	bl	800dfee <inHandlerMode>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d001      	beq.n	800e3ba <osSemaphoreDelete+0x16>
    return osErrorISR;
 800e3b6:	2382      	movs	r3, #130	; 0x82
 800e3b8:	e003      	b.n	800e3c2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f001 f856 	bl	800f46c <vQueueDelete>

  return osOK; 
 800e3c0:	2300      	movs	r3, #0
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e3ca:	b590      	push	{r4, r7, lr}
 800e3cc:	b085      	sub	sp, #20
 800e3ce:	af02      	add	r7, sp, #8
 800e3d0:	6078      	str	r0, [r7, #4]
 800e3d2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	689b      	ldr	r3, [r3, #8]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d011      	beq.n	800e400 <osMessageCreate+0x36>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	68db      	ldr	r3, [r3, #12]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00d      	beq.n	800e400 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6818      	ldr	r0, [r3, #0]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6859      	ldr	r1, [r3, #4]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	689a      	ldr	r2, [r3, #8]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	2400      	movs	r4, #0
 800e3f6:	9400      	str	r4, [sp, #0]
 800e3f8:	f000 fa0c 	bl	800e814 <xQueueGenericCreateStatic>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	e008      	b.n	800e412 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6818      	ldr	r0, [r3, #0]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	2200      	movs	r2, #0
 800e40a:	4619      	mov	r1, r3
 800e40c:	f000 fa84 	bl	800e918 <xQueueGenericCreate>
 800e410:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800e412:	4618      	mov	r0, r3
 800e414:	370c      	adds	r7, #12
 800e416:	46bd      	mov	sp, r7
 800e418:	bd90      	pop	{r4, r7, pc}
	...

0800e41c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b086      	sub	sp, #24
 800e420:	af00      	add	r7, sp, #0
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	60b9      	str	r1, [r7, #8]
 800e426:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e428:	2300      	movs	r3, #0
 800e42a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d101      	bne.n	800e43a <osMessagePut+0x1e>
    ticks = 1;
 800e436:	2301      	movs	r3, #1
 800e438:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e43a:	f7ff fdd8 	bl	800dfee <inHandlerMode>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d018      	beq.n	800e476 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e444:	f107 0210 	add.w	r2, r7, #16
 800e448:	f107 0108 	add.w	r1, r7, #8
 800e44c:	2300      	movs	r3, #0
 800e44e:	68f8      	ldr	r0, [r7, #12]
 800e450:	f000 fc16 	bl	800ec80 <xQueueGenericSendFromISR>
 800e454:	4603      	mov	r3, r0
 800e456:	2b01      	cmp	r3, #1
 800e458:	d001      	beq.n	800e45e <osMessagePut+0x42>
      return osErrorOS;
 800e45a:	23ff      	movs	r3, #255	; 0xff
 800e45c:	e018      	b.n	800e490 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d014      	beq.n	800e48e <osMessagePut+0x72>
 800e464:	4b0c      	ldr	r3, [pc, #48]	; (800e498 <osMessagePut+0x7c>)
 800e466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e46a:	601a      	str	r2, [r3, #0]
 800e46c:	f3bf 8f4f 	dsb	sy
 800e470:	f3bf 8f6f 	isb	sy
 800e474:	e00b      	b.n	800e48e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e476:	f107 0108 	add.w	r1, r7, #8
 800e47a:	2300      	movs	r3, #0
 800e47c:	697a      	ldr	r2, [r7, #20]
 800e47e:	68f8      	ldr	r0, [r7, #12]
 800e480:	f000 faf8 	bl	800ea74 <xQueueGenericSend>
 800e484:	4603      	mov	r3, r0
 800e486:	2b01      	cmp	r3, #1
 800e488:	d001      	beq.n	800e48e <osMessagePut+0x72>
      return osErrorOS;
 800e48a:	23ff      	movs	r3, #255	; 0xff
 800e48c:	e000      	b.n	800e490 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e48e:	2300      	movs	r3, #0
}
 800e490:	4618      	mov	r0, r3
 800e492:	3718      	adds	r7, #24
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	e000ed04 	.word	0xe000ed04

0800e49c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e49c:	b590      	push	{r4, r7, lr}
 800e49e:	b08b      	sub	sp, #44	; 0x2c
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d10a      	bne.n	800e4cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e4b6:	2380      	movs	r3, #128	; 0x80
 800e4b8:	617b      	str	r3, [r7, #20]
    return event;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	461c      	mov	r4, r3
 800e4be:	f107 0314 	add.w	r3, r7, #20
 800e4c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e4c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e4ca:	e054      	b.n	800e576 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4da:	d103      	bne.n	800e4e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e4dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4e0:	627b      	str	r3, [r7, #36]	; 0x24
 800e4e2:	e009      	b.n	800e4f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d006      	beq.n	800e4f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d101      	bne.n	800e4f8 <osMessageGet+0x5c>
      ticks = 1;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e4f8:	f7ff fd79 	bl	800dfee <inHandlerMode>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d01c      	beq.n	800e53c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e502:	f107 0220 	add.w	r2, r7, #32
 800e506:	f107 0314 	add.w	r3, r7, #20
 800e50a:	3304      	adds	r3, #4
 800e50c:	4619      	mov	r1, r3
 800e50e:	68b8      	ldr	r0, [r7, #8]
 800e510:	f000 fee6 	bl	800f2e0 <xQueueReceiveFromISR>
 800e514:	4603      	mov	r3, r0
 800e516:	2b01      	cmp	r3, #1
 800e518:	d102      	bne.n	800e520 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e51a:	2310      	movs	r3, #16
 800e51c:	617b      	str	r3, [r7, #20]
 800e51e:	e001      	b.n	800e524 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e520:	2300      	movs	r3, #0
 800e522:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e524:	6a3b      	ldr	r3, [r7, #32]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d01d      	beq.n	800e566 <osMessageGet+0xca>
 800e52a:	4b15      	ldr	r3, [pc, #84]	; (800e580 <osMessageGet+0xe4>)
 800e52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e530:	601a      	str	r2, [r3, #0]
 800e532:	f3bf 8f4f 	dsb	sy
 800e536:	f3bf 8f6f 	isb	sy
 800e53a:	e014      	b.n	800e566 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e53c:	f107 0314 	add.w	r3, r7, #20
 800e540:	3304      	adds	r3, #4
 800e542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e544:	4619      	mov	r1, r3
 800e546:	68b8      	ldr	r0, [r7, #8]
 800e548:	f000 fcd0 	bl	800eeec <xQueueReceive>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d102      	bne.n	800e558 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e552:	2310      	movs	r3, #16
 800e554:	617b      	str	r3, [r7, #20]
 800e556:	e006      	b.n	800e566 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d101      	bne.n	800e562 <osMessageGet+0xc6>
 800e55e:	2300      	movs	r3, #0
 800e560:	e000      	b.n	800e564 <osMessageGet+0xc8>
 800e562:	2340      	movs	r3, #64	; 0x40
 800e564:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	461c      	mov	r4, r3
 800e56a:	f107 0314 	add.w	r3, r7, #20
 800e56e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	372c      	adds	r7, #44	; 0x2c
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd90      	pop	{r4, r7, pc}
 800e57e:	bf00      	nop
 800e580:	e000ed04 	.word	0xe000ed04

0800e584 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800e58c:	f7ff fd2f 	bl	800dfee <inHandlerMode>
 800e590:	4603      	mov	r3, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	d004      	beq.n	800e5a0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 ff48 	bl	800f42c <uxQueueMessagesWaitingFromISR>
 800e59c:	4603      	mov	r3, r0
 800e59e:	e003      	b.n	800e5a8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 ff23 	bl	800f3ec <uxQueueMessagesWaiting>
 800e5a6:	4603      	mov	r3, r0
  }
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3708      	adds	r7, #8
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800e5b8:	f7ff fd19 	bl	800dfee <inHandlerMode>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d001      	beq.n	800e5c6 <osMessageDelete+0x16>
    return osErrorISR;
 800e5c2:	2382      	movs	r3, #130	; 0x82
 800e5c4:	e003      	b.n	800e5ce <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 ff50 	bl	800f46c <vQueueDelete>

  return osOK; 
 800e5cc:	2300      	movs	r3, #0
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3708      	adds	r7, #8
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e5d6:	b480      	push	{r7}
 800e5d8:	b083      	sub	sp, #12
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f103 0208 	add.w	r2, r3, #8
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f103 0208 	add.w	r2, r3, #8
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f103 0208 	add.w	r2, r3, #8
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e60a:	bf00      	nop
 800e60c:	370c      	adds	r7, #12
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr

0800e616 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e616:	b480      	push	{r7}
 800e618:	b083      	sub	sp, #12
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2200      	movs	r2, #0
 800e622:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e624:	bf00      	nop
 800e626:	370c      	adds	r7, #12
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e630:	b480      	push	{r7}
 800e632:	b085      	sub	sp, #20
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	68fa      	ldr	r2, [r7, #12]
 800e644:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	689a      	ldr	r2, [r3, #8]
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	689b      	ldr	r3, [r3, #8]
 800e652:	683a      	ldr	r2, [r7, #0]
 800e654:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	683a      	ldr	r2, [r7, #0]
 800e65a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	1c5a      	adds	r2, r3, #1
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	601a      	str	r2, [r3, #0]
}
 800e66c:	bf00      	nop
 800e66e:	3714      	adds	r7, #20
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr

0800e678 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e68e:	d103      	bne.n	800e698 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	691b      	ldr	r3, [r3, #16]
 800e694:	60fb      	str	r3, [r7, #12]
 800e696:	e00c      	b.n	800e6b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	3308      	adds	r3, #8
 800e69c:	60fb      	str	r3, [r7, #12]
 800e69e:	e002      	b.n	800e6a6 <vListInsert+0x2e>
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	60fb      	str	r3, [r7, #12]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	685b      	ldr	r3, [r3, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d2f6      	bcs.n	800e6a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	685a      	ldr	r2, [r3, #4]
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	683a      	ldr	r2, [r7, #0]
 800e6c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	68fa      	ldr	r2, [r7, #12]
 800e6c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	683a      	ldr	r2, [r7, #0]
 800e6cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	1c5a      	adds	r2, r3, #1
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	601a      	str	r2, [r3, #0]
}
 800e6de:	bf00      	nop
 800e6e0:	3714      	adds	r7, #20
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr

0800e6ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e6ea:	b480      	push	{r7}
 800e6ec:	b085      	sub	sp, #20
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	691b      	ldr	r3, [r3, #16]
 800e6f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	6892      	ldr	r2, [r2, #8]
 800e700:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	6852      	ldr	r2, [r2, #4]
 800e70a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	429a      	cmp	r2, r3
 800e714:	d103      	bne.n	800e71e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	689a      	ldr	r2, [r3, #8]
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2200      	movs	r2, #0
 800e722:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	1e5a      	subs	r2, r3, #1
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
}
 800e732:	4618      	mov	r0, r3
 800e734:	3714      	adds	r7, #20
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr
	...

0800e740 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d10c      	bne.n	800e76e <xQueueGenericReset+0x2e>
	__asm volatile
 800e754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e758:	b672      	cpsid	i
 800e75a:	f383 8811 	msr	BASEPRI, r3
 800e75e:	f3bf 8f6f 	isb	sy
 800e762:	f3bf 8f4f 	dsb	sy
 800e766:	b662      	cpsie	i
 800e768:	60bb      	str	r3, [r7, #8]
}
 800e76a:	bf00      	nop
 800e76c:	e7fe      	b.n	800e76c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e76e:	f002 fa85 	bl	8010c7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681a      	ldr	r2, [r3, #0]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e77a:	68f9      	ldr	r1, [r7, #12]
 800e77c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e77e:	fb01 f303 	mul.w	r3, r1, r3
 800e782:	441a      	add	r2, r3
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2200      	movs	r2, #0
 800e78c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681a      	ldr	r2, [r3, #0]
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	68f9      	ldr	r1, [r7, #12]
 800e7a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e7a4:	fb01 f303 	mul.w	r3, r1, r3
 800e7a8:	441a      	add	r2, r3
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	22ff      	movs	r2, #255	; 0xff
 800e7b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	22ff      	movs	r2, #255	; 0xff
 800e7ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d114      	bne.n	800e7ee <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	691b      	ldr	r3, [r3, #16]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d01a      	beq.n	800e802 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	3310      	adds	r3, #16
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f001 fd41 	bl	8010258 <xTaskRemoveFromEventList>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d012      	beq.n	800e802 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e7dc:	4b0c      	ldr	r3, [pc, #48]	; (800e810 <xQueueGenericReset+0xd0>)
 800e7de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7e2:	601a      	str	r2, [r3, #0]
 800e7e4:	f3bf 8f4f 	dsb	sy
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	e009      	b.n	800e802 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	3310      	adds	r3, #16
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7ff feef 	bl	800e5d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	3324      	adds	r3, #36	; 0x24
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7ff feea 	bl	800e5d6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e802:	f002 fa6f 	bl	8010ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e806:	2301      	movs	r3, #1
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	e000ed04 	.word	0xe000ed04

0800e814 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e814:	b580      	push	{r7, lr}
 800e816:	b08e      	sub	sp, #56	; 0x38
 800e818:	af02      	add	r7, sp, #8
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	607a      	str	r2, [r7, #4]
 800e820:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d10c      	bne.n	800e842 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e82c:	b672      	cpsid	i
 800e82e:	f383 8811 	msr	BASEPRI, r3
 800e832:	f3bf 8f6f 	isb	sy
 800e836:	f3bf 8f4f 	dsb	sy
 800e83a:	b662      	cpsie	i
 800e83c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e83e:	bf00      	nop
 800e840:	e7fe      	b.n	800e840 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d10c      	bne.n	800e862 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84c:	b672      	cpsid	i
 800e84e:	f383 8811 	msr	BASEPRI, r3
 800e852:	f3bf 8f6f 	isb	sy
 800e856:	f3bf 8f4f 	dsb	sy
 800e85a:	b662      	cpsie	i
 800e85c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e85e:	bf00      	nop
 800e860:	e7fe      	b.n	800e860 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d002      	beq.n	800e86e <xQueueGenericCreateStatic+0x5a>
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d001      	beq.n	800e872 <xQueueGenericCreateStatic+0x5e>
 800e86e:	2301      	movs	r3, #1
 800e870:	e000      	b.n	800e874 <xQueueGenericCreateStatic+0x60>
 800e872:	2300      	movs	r3, #0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d10c      	bne.n	800e892 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87c:	b672      	cpsid	i
 800e87e:	f383 8811 	msr	BASEPRI, r3
 800e882:	f3bf 8f6f 	isb	sy
 800e886:	f3bf 8f4f 	dsb	sy
 800e88a:	b662      	cpsie	i
 800e88c:	623b      	str	r3, [r7, #32]
}
 800e88e:	bf00      	nop
 800e890:	e7fe      	b.n	800e890 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d102      	bne.n	800e89e <xQueueGenericCreateStatic+0x8a>
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d101      	bne.n	800e8a2 <xQueueGenericCreateStatic+0x8e>
 800e89e:	2301      	movs	r3, #1
 800e8a0:	e000      	b.n	800e8a4 <xQueueGenericCreateStatic+0x90>
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d10c      	bne.n	800e8c2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ac:	b672      	cpsid	i
 800e8ae:	f383 8811 	msr	BASEPRI, r3
 800e8b2:	f3bf 8f6f 	isb	sy
 800e8b6:	f3bf 8f4f 	dsb	sy
 800e8ba:	b662      	cpsie	i
 800e8bc:	61fb      	str	r3, [r7, #28]
}
 800e8be:	bf00      	nop
 800e8c0:	e7fe      	b.n	800e8c0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e8c2:	2348      	movs	r3, #72	; 0x48
 800e8c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	2b48      	cmp	r3, #72	; 0x48
 800e8ca:	d00c      	beq.n	800e8e6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d0:	b672      	cpsid	i
 800e8d2:	f383 8811 	msr	BASEPRI, r3
 800e8d6:	f3bf 8f6f 	isb	sy
 800e8da:	f3bf 8f4f 	dsb	sy
 800e8de:	b662      	cpsie	i
 800e8e0:	61bb      	str	r3, [r7, #24]
}
 800e8e2:	bf00      	nop
 800e8e4:	e7fe      	b.n	800e8e4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e8e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d00d      	beq.n	800e90e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e8fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e900:	9300      	str	r3, [sp, #0]
 800e902:	4613      	mov	r3, r2
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	68b9      	ldr	r1, [r7, #8]
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f000 f847 	bl	800e99c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e910:	4618      	mov	r0, r3
 800e912:	3730      	adds	r7, #48	; 0x30
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b08a      	sub	sp, #40	; 0x28
 800e91c:	af02      	add	r7, sp, #8
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	4613      	mov	r3, r2
 800e924:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d10c      	bne.n	800e946 <xQueueGenericCreate+0x2e>
	__asm volatile
 800e92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e930:	b672      	cpsid	i
 800e932:	f383 8811 	msr	BASEPRI, r3
 800e936:	f3bf 8f6f 	isb	sy
 800e93a:	f3bf 8f4f 	dsb	sy
 800e93e:	b662      	cpsie	i
 800e940:	613b      	str	r3, [r7, #16]
}
 800e942:	bf00      	nop
 800e944:	e7fe      	b.n	800e944 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d102      	bne.n	800e952 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e94c:	2300      	movs	r3, #0
 800e94e:	61fb      	str	r3, [r7, #28]
 800e950:	e004      	b.n	800e95c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	68ba      	ldr	r2, [r7, #8]
 800e956:	fb02 f303 	mul.w	r3, r2, r3
 800e95a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	3348      	adds	r3, #72	; 0x48
 800e960:	4618      	mov	r0, r3
 800e962:	f7f2 f8d0 	bl	8000b06 <pvPortMalloc>
 800e966:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d011      	beq.n	800e992 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	3348      	adds	r3, #72	; 0x48
 800e976:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e978:	69bb      	ldr	r3, [r7, #24]
 800e97a:	2200      	movs	r2, #0
 800e97c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e980:	79fa      	ldrb	r2, [r7, #7]
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	9300      	str	r3, [sp, #0]
 800e986:	4613      	mov	r3, r2
 800e988:	697a      	ldr	r2, [r7, #20]
 800e98a:	68b9      	ldr	r1, [r7, #8]
 800e98c:	68f8      	ldr	r0, [r7, #12]
 800e98e:	f000 f805 	bl	800e99c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e992:	69bb      	ldr	r3, [r7, #24]
	}
 800e994:	4618      	mov	r0, r3
 800e996:	3720      	adds	r7, #32
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	607a      	str	r2, [r7, #4]
 800e9a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d103      	bne.n	800e9b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e9b0:	69bb      	ldr	r3, [r7, #24]
 800e9b2:	69ba      	ldr	r2, [r7, #24]
 800e9b4:	601a      	str	r2, [r3, #0]
 800e9b6:	e002      	b.n	800e9be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e9be:	69bb      	ldr	r3, [r7, #24]
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e9c4:	69bb      	ldr	r3, [r7, #24]
 800e9c6:	68ba      	ldr	r2, [r7, #8]
 800e9c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e9ca:	2101      	movs	r1, #1
 800e9cc:	69b8      	ldr	r0, [r7, #24]
 800e9ce:	f7ff feb7 	bl	800e740 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e9d2:	bf00      	nop
 800e9d4:	3710      	adds	r7, #16
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b082      	sub	sp, #8
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d00e      	beq.n	800ea06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	2100      	movs	r1, #0
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 f837 	bl	800ea74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ea06:	bf00      	nop
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b086      	sub	sp, #24
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	4603      	mov	r3, r0
 800ea16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	617b      	str	r3, [r7, #20]
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ea20:	79fb      	ldrb	r3, [r7, #7]
 800ea22:	461a      	mov	r2, r3
 800ea24:	6939      	ldr	r1, [r7, #16]
 800ea26:	6978      	ldr	r0, [r7, #20]
 800ea28:	f7ff ff76 	bl	800e918 <xQueueGenericCreate>
 800ea2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ea2e:	68f8      	ldr	r0, [r7, #12]
 800ea30:	f7ff ffd3 	bl	800e9da <prvInitialiseMutex>

		return xNewQueue;
 800ea34:	68fb      	ldr	r3, [r7, #12]
	}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3718      	adds	r7, #24
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b088      	sub	sp, #32
 800ea42:	af02      	add	r7, sp, #8
 800ea44:	4603      	mov	r3, r0
 800ea46:	6039      	str	r1, [r7, #0]
 800ea48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	617b      	str	r3, [r7, #20]
 800ea4e:	2300      	movs	r3, #0
 800ea50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ea52:	79fb      	ldrb	r3, [r7, #7]
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	6939      	ldr	r1, [r7, #16]
 800ea5c:	6978      	ldr	r0, [r7, #20]
 800ea5e:	f7ff fed9 	bl	800e814 <xQueueGenericCreateStatic>
 800ea62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f7ff ffb8 	bl	800e9da <prvInitialiseMutex>

		return xNewQueue;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
	}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3718      	adds	r7, #24
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b08e      	sub	sp, #56	; 0x38
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	607a      	str	r2, [r7, #4]
 800ea80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ea82:	2300      	movs	r3, #0
 800ea84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ea8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d10c      	bne.n	800eaaa <xQueueGenericSend+0x36>
	__asm volatile
 800ea90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea94:	b672      	cpsid	i
 800ea96:	f383 8811 	msr	BASEPRI, r3
 800ea9a:	f3bf 8f6f 	isb	sy
 800ea9e:	f3bf 8f4f 	dsb	sy
 800eaa2:	b662      	cpsie	i
 800eaa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eaa6:	bf00      	nop
 800eaa8:	e7fe      	b.n	800eaa8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d103      	bne.n	800eab8 <xQueueGenericSend+0x44>
 800eab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d101      	bne.n	800eabc <xQueueGenericSend+0x48>
 800eab8:	2301      	movs	r3, #1
 800eaba:	e000      	b.n	800eabe <xQueueGenericSend+0x4a>
 800eabc:	2300      	movs	r3, #0
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d10c      	bne.n	800eadc <xQueueGenericSend+0x68>
	__asm volatile
 800eac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac6:	b672      	cpsid	i
 800eac8:	f383 8811 	msr	BASEPRI, r3
 800eacc:	f3bf 8f6f 	isb	sy
 800ead0:	f3bf 8f4f 	dsb	sy
 800ead4:	b662      	cpsie	i
 800ead6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ead8:	bf00      	nop
 800eada:	e7fe      	b.n	800eada <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	2b02      	cmp	r3, #2
 800eae0:	d103      	bne.n	800eaea <xQueueGenericSend+0x76>
 800eae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d101      	bne.n	800eaee <xQueueGenericSend+0x7a>
 800eaea:	2301      	movs	r3, #1
 800eaec:	e000      	b.n	800eaf0 <xQueueGenericSend+0x7c>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d10c      	bne.n	800eb0e <xQueueGenericSend+0x9a>
	__asm volatile
 800eaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf8:	b672      	cpsid	i
 800eafa:	f383 8811 	msr	BASEPRI, r3
 800eafe:	f3bf 8f6f 	isb	sy
 800eb02:	f3bf 8f4f 	dsb	sy
 800eb06:	b662      	cpsie	i
 800eb08:	623b      	str	r3, [r7, #32]
}
 800eb0a:	bf00      	nop
 800eb0c:	e7fe      	b.n	800eb0c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb0e:	f001 fd6b 	bl	80105e8 <xTaskGetSchedulerState>
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d102      	bne.n	800eb1e <xQueueGenericSend+0xaa>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d101      	bne.n	800eb22 <xQueueGenericSend+0xae>
 800eb1e:	2301      	movs	r3, #1
 800eb20:	e000      	b.n	800eb24 <xQueueGenericSend+0xb0>
 800eb22:	2300      	movs	r3, #0
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d10c      	bne.n	800eb42 <xQueueGenericSend+0xce>
	__asm volatile
 800eb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2c:	b672      	cpsid	i
 800eb2e:	f383 8811 	msr	BASEPRI, r3
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	f3bf 8f4f 	dsb	sy
 800eb3a:	b662      	cpsie	i
 800eb3c:	61fb      	str	r3, [r7, #28]
}
 800eb3e:	bf00      	nop
 800eb40:	e7fe      	b.n	800eb40 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb42:	f002 f89b 	bl	8010c7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d302      	bcc.n	800eb58 <xQueueGenericSend+0xe4>
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	2b02      	cmp	r3, #2
 800eb56:	d129      	bne.n	800ebac <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb58:	683a      	ldr	r2, [r7, #0]
 800eb5a:	68b9      	ldr	r1, [r7, #8]
 800eb5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb5e:	f000 fcc2 	bl	800f4e6 <prvCopyDataToQueue>
 800eb62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d010      	beq.n	800eb8e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6e:	3324      	adds	r3, #36	; 0x24
 800eb70:	4618      	mov	r0, r3
 800eb72:	f001 fb71 	bl	8010258 <xTaskRemoveFromEventList>
 800eb76:	4603      	mov	r3, r0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d013      	beq.n	800eba4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800eb7c:	4b3f      	ldr	r3, [pc, #252]	; (800ec7c <xQueueGenericSend+0x208>)
 800eb7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb82:	601a      	str	r2, [r3, #0]
 800eb84:	f3bf 8f4f 	dsb	sy
 800eb88:	f3bf 8f6f 	isb	sy
 800eb8c:	e00a      	b.n	800eba4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d007      	beq.n	800eba4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eb94:	4b39      	ldr	r3, [pc, #228]	; (800ec7c <xQueueGenericSend+0x208>)
 800eb96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb9a:	601a      	str	r2, [r3, #0]
 800eb9c:	f3bf 8f4f 	dsb	sy
 800eba0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eba4:	f002 f89e 	bl	8010ce4 <vPortExitCritical>
				return pdPASS;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	e063      	b.n	800ec74 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d103      	bne.n	800ebba <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ebb2:	f002 f897 	bl	8010ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	e05c      	b.n	800ec74 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ebba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d106      	bne.n	800ebce <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ebc0:	f107 0314 	add.w	r3, r7, #20
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f001 fbab 	bl	8010320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ebce:	f002 f889 	bl	8010ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ebd2:	f001 f92f 	bl	800fe34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebd6:	f002 f851 	bl	8010c7c <vPortEnterCritical>
 800ebda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebe0:	b25b      	sxtb	r3, r3
 800ebe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebe6:	d103      	bne.n	800ebf0 <xQueueGenericSend+0x17c>
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebea:	2200      	movs	r2, #0
 800ebec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebf6:	b25b      	sxtb	r3, r3
 800ebf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebfc:	d103      	bne.n	800ec06 <xQueueGenericSend+0x192>
 800ebfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec00:	2200      	movs	r2, #0
 800ec02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec06:	f002 f86d 	bl	8010ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec0a:	1d3a      	adds	r2, r7, #4
 800ec0c:	f107 0314 	add.w	r3, r7, #20
 800ec10:	4611      	mov	r1, r2
 800ec12:	4618      	mov	r0, r3
 800ec14:	f001 fb9a 	bl	801034c <xTaskCheckForTimeOut>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d124      	bne.n	800ec68 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ec1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec20:	f000 fd59 	bl	800f6d6 <prvIsQueueFull>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d018      	beq.n	800ec5c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ec2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec2c:	3310      	adds	r3, #16
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	4611      	mov	r1, r2
 800ec32:	4618      	mov	r0, r3
 800ec34:	f001 faea 	bl	801020c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ec38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec3a:	f000 fce4 	bl	800f606 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ec3e:	f001 f907 	bl	800fe50 <xTaskResumeAll>
 800ec42:	4603      	mov	r3, r0
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f47f af7c 	bne.w	800eb42 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800ec4a:	4b0c      	ldr	r3, [pc, #48]	; (800ec7c <xQueueGenericSend+0x208>)
 800ec4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec50:	601a      	str	r2, [r3, #0]
 800ec52:	f3bf 8f4f 	dsb	sy
 800ec56:	f3bf 8f6f 	isb	sy
 800ec5a:	e772      	b.n	800eb42 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ec5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec5e:	f000 fcd2 	bl	800f606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec62:	f001 f8f5 	bl	800fe50 <xTaskResumeAll>
 800ec66:	e76c      	b.n	800eb42 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ec68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec6a:	f000 fccc 	bl	800f606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec6e:	f001 f8ef 	bl	800fe50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ec72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3738      	adds	r7, #56	; 0x38
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	e000ed04 	.word	0xe000ed04

0800ec80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b08e      	sub	sp, #56	; 0x38
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	60b9      	str	r1, [r7, #8]
 800ec8a:	607a      	str	r2, [r7, #4]
 800ec8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ec92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d10c      	bne.n	800ecb2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800ec98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9c:	b672      	cpsid	i
 800ec9e:	f383 8811 	msr	BASEPRI, r3
 800eca2:	f3bf 8f6f 	isb	sy
 800eca6:	f3bf 8f4f 	dsb	sy
 800ecaa:	b662      	cpsie	i
 800ecac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ecae:	bf00      	nop
 800ecb0:	e7fe      	b.n	800ecb0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d103      	bne.n	800ecc0 <xQueueGenericSendFromISR+0x40>
 800ecb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d101      	bne.n	800ecc4 <xQueueGenericSendFromISR+0x44>
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e000      	b.n	800ecc6 <xQueueGenericSendFromISR+0x46>
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d10c      	bne.n	800ece4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800ecca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecce:	b672      	cpsid	i
 800ecd0:	f383 8811 	msr	BASEPRI, r3
 800ecd4:	f3bf 8f6f 	isb	sy
 800ecd8:	f3bf 8f4f 	dsb	sy
 800ecdc:	b662      	cpsie	i
 800ecde:	623b      	str	r3, [r7, #32]
}
 800ece0:	bf00      	nop
 800ece2:	e7fe      	b.n	800ece2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	2b02      	cmp	r3, #2
 800ece8:	d103      	bne.n	800ecf2 <xQueueGenericSendFromISR+0x72>
 800ecea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	d101      	bne.n	800ecf6 <xQueueGenericSendFromISR+0x76>
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e000      	b.n	800ecf8 <xQueueGenericSendFromISR+0x78>
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d10c      	bne.n	800ed16 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800ecfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed00:	b672      	cpsid	i
 800ed02:	f383 8811 	msr	BASEPRI, r3
 800ed06:	f3bf 8f6f 	isb	sy
 800ed0a:	f3bf 8f4f 	dsb	sy
 800ed0e:	b662      	cpsie	i
 800ed10:	61fb      	str	r3, [r7, #28]
}
 800ed12:	bf00      	nop
 800ed14:	e7fe      	b.n	800ed14 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed16:	f002 f899 	bl	8010e4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ed1a:	f3ef 8211 	mrs	r2, BASEPRI
 800ed1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed22:	b672      	cpsid	i
 800ed24:	f383 8811 	msr	BASEPRI, r3
 800ed28:	f3bf 8f6f 	isb	sy
 800ed2c:	f3bf 8f4f 	dsb	sy
 800ed30:	b662      	cpsie	i
 800ed32:	61ba      	str	r2, [r7, #24]
 800ed34:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ed36:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d302      	bcc.n	800ed4c <xQueueGenericSendFromISR+0xcc>
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	2b02      	cmp	r3, #2
 800ed4a:	d12c      	bne.n	800eda6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed56:	683a      	ldr	r2, [r7, #0]
 800ed58:	68b9      	ldr	r1, [r7, #8]
 800ed5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed5c:	f000 fbc3 	bl	800f4e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ed60:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ed64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed68:	d112      	bne.n	800ed90 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d016      	beq.n	800eda0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed74:	3324      	adds	r3, #36	; 0x24
 800ed76:	4618      	mov	r0, r3
 800ed78:	f001 fa6e 	bl	8010258 <xTaskRemoveFromEventList>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d00e      	beq.n	800eda0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00b      	beq.n	800eda0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	601a      	str	r2, [r3, #0]
 800ed8e:	e007      	b.n	800eda0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ed90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ed94:	3301      	adds	r3, #1
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	b25a      	sxtb	r2, r3
 800ed9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eda0:	2301      	movs	r3, #1
 800eda2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800eda4:	e001      	b.n	800edaa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eda6:	2300      	movs	r3, #0
 800eda8:	637b      	str	r3, [r7, #52]	; 0x34
 800edaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800edb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800edb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3738      	adds	r7, #56	; 0x38
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b08e      	sub	sp, #56	; 0x38
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800edce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d10c      	bne.n	800edee <xQueueGiveFromISR+0x2e>
	__asm volatile
 800edd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd8:	b672      	cpsid	i
 800edda:	f383 8811 	msr	BASEPRI, r3
 800edde:	f3bf 8f6f 	isb	sy
 800ede2:	f3bf 8f4f 	dsb	sy
 800ede6:	b662      	cpsie	i
 800ede8:	623b      	str	r3, [r7, #32]
}
 800edea:	bf00      	nop
 800edec:	e7fe      	b.n	800edec <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800edee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00c      	beq.n	800ee10 <xQueueGiveFromISR+0x50>
	__asm volatile
 800edf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfa:	b672      	cpsid	i
 800edfc:	f383 8811 	msr	BASEPRI, r3
 800ee00:	f3bf 8f6f 	isb	sy
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	b662      	cpsie	i
 800ee0a:	61fb      	str	r3, [r7, #28]
}
 800ee0c:	bf00      	nop
 800ee0e:	e7fe      	b.n	800ee0e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ee10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d103      	bne.n	800ee20 <xQueueGiveFromISR+0x60>
 800ee18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d101      	bne.n	800ee24 <xQueueGiveFromISR+0x64>
 800ee20:	2301      	movs	r3, #1
 800ee22:	e000      	b.n	800ee26 <xQueueGiveFromISR+0x66>
 800ee24:	2300      	movs	r3, #0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d10c      	bne.n	800ee44 <xQueueGiveFromISR+0x84>
	__asm volatile
 800ee2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2e:	b672      	cpsid	i
 800ee30:	f383 8811 	msr	BASEPRI, r3
 800ee34:	f3bf 8f6f 	isb	sy
 800ee38:	f3bf 8f4f 	dsb	sy
 800ee3c:	b662      	cpsie	i
 800ee3e:	61bb      	str	r3, [r7, #24]
}
 800ee40:	bf00      	nop
 800ee42:	e7fe      	b.n	800ee42 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee44:	f002 f802 	bl	8010e4c <vPortValidateInterruptPriority>
	__asm volatile
 800ee48:	f3ef 8211 	mrs	r2, BASEPRI
 800ee4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee50:	b672      	cpsid	i
 800ee52:	f383 8811 	msr	BASEPRI, r3
 800ee56:	f3bf 8f6f 	isb	sy
 800ee5a:	f3bf 8f4f 	dsb	sy
 800ee5e:	b662      	cpsie	i
 800ee60:	617a      	str	r2, [r7, #20]
 800ee62:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ee64:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee66:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee6c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ee6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d22b      	bcs.n	800eed0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ee78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ee82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee84:	1c5a      	adds	r2, r3, #1
 800ee86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee88:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee92:	d112      	bne.n	800eeba <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d016      	beq.n	800eeca <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee9e:	3324      	adds	r3, #36	; 0x24
 800eea0:	4618      	mov	r0, r3
 800eea2:	f001 f9d9 	bl	8010258 <xTaskRemoveFromEventList>
 800eea6:	4603      	mov	r3, r0
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d00e      	beq.n	800eeca <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d00b      	beq.n	800eeca <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	601a      	str	r2, [r3, #0]
 800eeb8:	e007      	b.n	800eeca <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eeba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eebe:	3301      	adds	r3, #1
 800eec0:	b2db      	uxtb	r3, r3
 800eec2:	b25a      	sxtb	r2, r3
 800eec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eeca:	2301      	movs	r3, #1
 800eecc:	637b      	str	r3, [r7, #52]	; 0x34
 800eece:	e001      	b.n	800eed4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eed0:	2300      	movs	r3, #0
 800eed2:	637b      	str	r3, [r7, #52]	; 0x34
 800eed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f383 8811 	msr	BASEPRI, r3
}
 800eede:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3738      	adds	r7, #56	; 0x38
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
	...

0800eeec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b08c      	sub	sp, #48	; 0x30
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	60b9      	str	r1, [r7, #8]
 800eef6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eef8:	2300      	movs	r3, #0
 800eefa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ef00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d10c      	bne.n	800ef20 <xQueueReceive+0x34>
	__asm volatile
 800ef06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0a:	b672      	cpsid	i
 800ef0c:	f383 8811 	msr	BASEPRI, r3
 800ef10:	f3bf 8f6f 	isb	sy
 800ef14:	f3bf 8f4f 	dsb	sy
 800ef18:	b662      	cpsie	i
 800ef1a:	623b      	str	r3, [r7, #32]
}
 800ef1c:	bf00      	nop
 800ef1e:	e7fe      	b.n	800ef1e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d103      	bne.n	800ef2e <xQueueReceive+0x42>
 800ef26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d101      	bne.n	800ef32 <xQueueReceive+0x46>
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e000      	b.n	800ef34 <xQueueReceive+0x48>
 800ef32:	2300      	movs	r3, #0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d10c      	bne.n	800ef52 <xQueueReceive+0x66>
	__asm volatile
 800ef38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef3c:	b672      	cpsid	i
 800ef3e:	f383 8811 	msr	BASEPRI, r3
 800ef42:	f3bf 8f6f 	isb	sy
 800ef46:	f3bf 8f4f 	dsb	sy
 800ef4a:	b662      	cpsie	i
 800ef4c:	61fb      	str	r3, [r7, #28]
}
 800ef4e:	bf00      	nop
 800ef50:	e7fe      	b.n	800ef50 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef52:	f001 fb49 	bl	80105e8 <xTaskGetSchedulerState>
 800ef56:	4603      	mov	r3, r0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d102      	bne.n	800ef62 <xQueueReceive+0x76>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d101      	bne.n	800ef66 <xQueueReceive+0x7a>
 800ef62:	2301      	movs	r3, #1
 800ef64:	e000      	b.n	800ef68 <xQueueReceive+0x7c>
 800ef66:	2300      	movs	r3, #0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d10c      	bne.n	800ef86 <xQueueReceive+0x9a>
	__asm volatile
 800ef6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef70:	b672      	cpsid	i
 800ef72:	f383 8811 	msr	BASEPRI, r3
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	f3bf 8f4f 	dsb	sy
 800ef7e:	b662      	cpsie	i
 800ef80:	61bb      	str	r3, [r7, #24]
}
 800ef82:	bf00      	nop
 800ef84:	e7fe      	b.n	800ef84 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef86:	f001 fe79 	bl	8010c7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d01f      	beq.n	800efd6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef96:	68b9      	ldr	r1, [r7, #8]
 800ef98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef9a:	f000 fb0e 	bl	800f5ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa0:	1e5a      	subs	r2, r3, #1
 800efa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa8:	691b      	ldr	r3, [r3, #16]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00f      	beq.n	800efce <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb0:	3310      	adds	r3, #16
 800efb2:	4618      	mov	r0, r3
 800efb4:	f001 f950 	bl	8010258 <xTaskRemoveFromEventList>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d007      	beq.n	800efce <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800efbe:	4b3d      	ldr	r3, [pc, #244]	; (800f0b4 <xQueueReceive+0x1c8>)
 800efc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efc4:	601a      	str	r2, [r3, #0]
 800efc6:	f3bf 8f4f 	dsb	sy
 800efca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800efce:	f001 fe89 	bl	8010ce4 <vPortExitCritical>
				return pdPASS;
 800efd2:	2301      	movs	r3, #1
 800efd4:	e069      	b.n	800f0aa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d103      	bne.n	800efe4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800efdc:	f001 fe82 	bl	8010ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800efe0:	2300      	movs	r3, #0
 800efe2:	e062      	b.n	800f0aa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800efe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d106      	bne.n	800eff8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800efea:	f107 0310 	add.w	r3, r7, #16
 800efee:	4618      	mov	r0, r3
 800eff0:	f001 f996 	bl	8010320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eff4:	2301      	movs	r3, #1
 800eff6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eff8:	f001 fe74 	bl	8010ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800effc:	f000 ff1a 	bl	800fe34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f000:	f001 fe3c 	bl	8010c7c <vPortEnterCritical>
 800f004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f00a:	b25b      	sxtb	r3, r3
 800f00c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f010:	d103      	bne.n	800f01a <xQueueReceive+0x12e>
 800f012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f014:	2200      	movs	r2, #0
 800f016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f020:	b25b      	sxtb	r3, r3
 800f022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f026:	d103      	bne.n	800f030 <xQueueReceive+0x144>
 800f028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f02a:	2200      	movs	r2, #0
 800f02c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f030:	f001 fe58 	bl	8010ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f034:	1d3a      	adds	r2, r7, #4
 800f036:	f107 0310 	add.w	r3, r7, #16
 800f03a:	4611      	mov	r1, r2
 800f03c:	4618      	mov	r0, r3
 800f03e:	f001 f985 	bl	801034c <xTaskCheckForTimeOut>
 800f042:	4603      	mov	r3, r0
 800f044:	2b00      	cmp	r3, #0
 800f046:	d123      	bne.n	800f090 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f04a:	f000 fb2e 	bl	800f6aa <prvIsQueueEmpty>
 800f04e:	4603      	mov	r3, r0
 800f050:	2b00      	cmp	r3, #0
 800f052:	d017      	beq.n	800f084 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f056:	3324      	adds	r3, #36	; 0x24
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	4611      	mov	r1, r2
 800f05c:	4618      	mov	r0, r3
 800f05e:	f001 f8d5 	bl	801020c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f064:	f000 facf 	bl	800f606 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f068:	f000 fef2 	bl	800fe50 <xTaskResumeAll>
 800f06c:	4603      	mov	r3, r0
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d189      	bne.n	800ef86 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800f072:	4b10      	ldr	r3, [pc, #64]	; (800f0b4 <xQueueReceive+0x1c8>)
 800f074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f078:	601a      	str	r2, [r3, #0]
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	f3bf 8f6f 	isb	sy
 800f082:	e780      	b.n	800ef86 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f086:	f000 fabe 	bl	800f606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f08a:	f000 fee1 	bl	800fe50 <xTaskResumeAll>
 800f08e:	e77a      	b.n	800ef86 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f092:	f000 fab8 	bl	800f606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f096:	f000 fedb 	bl	800fe50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f09a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f09c:	f000 fb05 	bl	800f6aa <prvIsQueueEmpty>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	f43f af6f 	beq.w	800ef86 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f0a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3730      	adds	r7, #48	; 0x30
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	e000ed04 	.word	0xe000ed04

0800f0b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b08e      	sub	sp, #56	; 0x38
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d10c      	bne.n	800f0ee <xQueueSemaphoreTake+0x36>
	__asm volatile
 800f0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d8:	b672      	cpsid	i
 800f0da:	f383 8811 	msr	BASEPRI, r3
 800f0de:	f3bf 8f6f 	isb	sy
 800f0e2:	f3bf 8f4f 	dsb	sy
 800f0e6:	b662      	cpsie	i
 800f0e8:	623b      	str	r3, [r7, #32]
}
 800f0ea:	bf00      	nop
 800f0ec:	e7fe      	b.n	800f0ec <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d00c      	beq.n	800f110 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800f0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fa:	b672      	cpsid	i
 800f0fc:	f383 8811 	msr	BASEPRI, r3
 800f100:	f3bf 8f6f 	isb	sy
 800f104:	f3bf 8f4f 	dsb	sy
 800f108:	b662      	cpsie	i
 800f10a:	61fb      	str	r3, [r7, #28]
}
 800f10c:	bf00      	nop
 800f10e:	e7fe      	b.n	800f10e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f110:	f001 fa6a 	bl	80105e8 <xTaskGetSchedulerState>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	d102      	bne.n	800f120 <xQueueSemaphoreTake+0x68>
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d101      	bne.n	800f124 <xQueueSemaphoreTake+0x6c>
 800f120:	2301      	movs	r3, #1
 800f122:	e000      	b.n	800f126 <xQueueSemaphoreTake+0x6e>
 800f124:	2300      	movs	r3, #0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d10c      	bne.n	800f144 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800f12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f12e:	b672      	cpsid	i
 800f130:	f383 8811 	msr	BASEPRI, r3
 800f134:	f3bf 8f6f 	isb	sy
 800f138:	f3bf 8f4f 	dsb	sy
 800f13c:	b662      	cpsie	i
 800f13e:	61bb      	str	r3, [r7, #24]
}
 800f140:	bf00      	nop
 800f142:	e7fe      	b.n	800f142 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f144:	f001 fd9a 	bl	8010c7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f14c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f150:	2b00      	cmp	r3, #0
 800f152:	d024      	beq.n	800f19e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f156:	1e5a      	subs	r2, r3, #1
 800f158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d104      	bne.n	800f16e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f164:	f001 fc06 	bl	8010974 <pvTaskIncrementMutexHeldCount>
 800f168:	4602      	mov	r2, r0
 800f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f170:	691b      	ldr	r3, [r3, #16]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d00f      	beq.n	800f196 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f178:	3310      	adds	r3, #16
 800f17a:	4618      	mov	r0, r3
 800f17c:	f001 f86c 	bl	8010258 <xTaskRemoveFromEventList>
 800f180:	4603      	mov	r3, r0
 800f182:	2b00      	cmp	r3, #0
 800f184:	d007      	beq.n	800f196 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f186:	4b55      	ldr	r3, [pc, #340]	; (800f2dc <xQueueSemaphoreTake+0x224>)
 800f188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f18c:	601a      	str	r2, [r3, #0]
 800f18e:	f3bf 8f4f 	dsb	sy
 800f192:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f196:	f001 fda5 	bl	8010ce4 <vPortExitCritical>
				return pdPASS;
 800f19a:	2301      	movs	r3, #1
 800f19c:	e099      	b.n	800f2d2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d113      	bne.n	800f1cc <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d00c      	beq.n	800f1c4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800f1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ae:	b672      	cpsid	i
 800f1b0:	f383 8811 	msr	BASEPRI, r3
 800f1b4:	f3bf 8f6f 	isb	sy
 800f1b8:	f3bf 8f4f 	dsb	sy
 800f1bc:	b662      	cpsie	i
 800f1be:	617b      	str	r3, [r7, #20]
}
 800f1c0:	bf00      	nop
 800f1c2:	e7fe      	b.n	800f1c2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f1c4:	f001 fd8e 	bl	8010ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	e082      	b.n	800f2d2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d106      	bne.n	800f1e0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f1d2:	f107 030c 	add.w	r3, r7, #12
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f001 f8a2 	bl	8010320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f1e0:	f001 fd80 	bl	8010ce4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f1e4:	f000 fe26 	bl	800fe34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f1e8:	f001 fd48 	bl	8010c7c <vPortEnterCritical>
 800f1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1f2:	b25b      	sxtb	r3, r3
 800f1f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1f8:	d103      	bne.n	800f202 <xQueueSemaphoreTake+0x14a>
 800f1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f208:	b25b      	sxtb	r3, r3
 800f20a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f20e:	d103      	bne.n	800f218 <xQueueSemaphoreTake+0x160>
 800f210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f212:	2200      	movs	r2, #0
 800f214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f218:	f001 fd64 	bl	8010ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f21c:	463a      	mov	r2, r7
 800f21e:	f107 030c 	add.w	r3, r7, #12
 800f222:	4611      	mov	r1, r2
 800f224:	4618      	mov	r0, r3
 800f226:	f001 f891 	bl	801034c <xTaskCheckForTimeOut>
 800f22a:	4603      	mov	r3, r0
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d132      	bne.n	800f296 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f230:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f232:	f000 fa3a 	bl	800f6aa <prvIsQueueEmpty>
 800f236:	4603      	mov	r3, r0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d026      	beq.n	800f28a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d109      	bne.n	800f258 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800f244:	f001 fd1a 	bl	8010c7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24a:	689b      	ldr	r3, [r3, #8]
 800f24c:	4618      	mov	r0, r3
 800f24e:	f001 f9e9 	bl	8010624 <xTaskPriorityInherit>
 800f252:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f254:	f001 fd46 	bl	8010ce4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25a:	3324      	adds	r3, #36	; 0x24
 800f25c:	683a      	ldr	r2, [r7, #0]
 800f25e:	4611      	mov	r1, r2
 800f260:	4618      	mov	r0, r3
 800f262:	f000 ffd3 	bl	801020c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f266:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f268:	f000 f9cd 	bl	800f606 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f26c:	f000 fdf0 	bl	800fe50 <xTaskResumeAll>
 800f270:	4603      	mov	r3, r0
 800f272:	2b00      	cmp	r3, #0
 800f274:	f47f af66 	bne.w	800f144 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800f278:	4b18      	ldr	r3, [pc, #96]	; (800f2dc <xQueueSemaphoreTake+0x224>)
 800f27a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f27e:	601a      	str	r2, [r3, #0]
 800f280:	f3bf 8f4f 	dsb	sy
 800f284:	f3bf 8f6f 	isb	sy
 800f288:	e75c      	b.n	800f144 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f28a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f28c:	f000 f9bb 	bl	800f606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f290:	f000 fdde 	bl	800fe50 <xTaskResumeAll>
 800f294:	e756      	b.n	800f144 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f296:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f298:	f000 f9b5 	bl	800f606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f29c:	f000 fdd8 	bl	800fe50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2a2:	f000 fa02 	bl	800f6aa <prvIsQueueEmpty>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	f43f af4b 	beq.w	800f144 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d00d      	beq.n	800f2d0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800f2b4:	f001 fce2 	bl	8010c7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f2b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2ba:	f000 f8fc 	bl	800f4b6 <prvGetDisinheritPriorityAfterTimeout>
 800f2be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f001 fab6 	bl	8010838 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f2cc:	f001 fd0a 	bl	8010ce4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f2d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3738      	adds	r7, #56	; 0x38
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	e000ed04 	.word	0xe000ed04

0800f2e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b08e      	sub	sp, #56	; 0x38
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	60b9      	str	r1, [r7, #8]
 800f2ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d10c      	bne.n	800f310 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800f2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fa:	b672      	cpsid	i
 800f2fc:	f383 8811 	msr	BASEPRI, r3
 800f300:	f3bf 8f6f 	isb	sy
 800f304:	f3bf 8f4f 	dsb	sy
 800f308:	b662      	cpsie	i
 800f30a:	623b      	str	r3, [r7, #32]
}
 800f30c:	bf00      	nop
 800f30e:	e7fe      	b.n	800f30e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d103      	bne.n	800f31e <xQueueReceiveFromISR+0x3e>
 800f316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d101      	bne.n	800f322 <xQueueReceiveFromISR+0x42>
 800f31e:	2301      	movs	r3, #1
 800f320:	e000      	b.n	800f324 <xQueueReceiveFromISR+0x44>
 800f322:	2300      	movs	r3, #0
 800f324:	2b00      	cmp	r3, #0
 800f326:	d10c      	bne.n	800f342 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800f328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f32c:	b672      	cpsid	i
 800f32e:	f383 8811 	msr	BASEPRI, r3
 800f332:	f3bf 8f6f 	isb	sy
 800f336:	f3bf 8f4f 	dsb	sy
 800f33a:	b662      	cpsie	i
 800f33c:	61fb      	str	r3, [r7, #28]
}
 800f33e:	bf00      	nop
 800f340:	e7fe      	b.n	800f340 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f342:	f001 fd83 	bl	8010e4c <vPortValidateInterruptPriority>
	__asm volatile
 800f346:	f3ef 8211 	mrs	r2, BASEPRI
 800f34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f34e:	b672      	cpsid	i
 800f350:	f383 8811 	msr	BASEPRI, r3
 800f354:	f3bf 8f6f 	isb	sy
 800f358:	f3bf 8f4f 	dsb	sy
 800f35c:	b662      	cpsie	i
 800f35e:	61ba      	str	r2, [r7, #24]
 800f360:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f362:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f364:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f36a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d02f      	beq.n	800f3d2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f37c:	68b9      	ldr	r1, [r7, #8]
 800f37e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f380:	f000 f91b 	bl	800f5ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f386:	1e5a      	subs	r2, r3, #1
 800f388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f38c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f394:	d112      	bne.n	800f3bc <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f398:	691b      	ldr	r3, [r3, #16]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d016      	beq.n	800f3cc <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a0:	3310      	adds	r3, #16
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f000 ff58 	bl	8010258 <xTaskRemoveFromEventList>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d00e      	beq.n	800f3cc <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d00b      	beq.n	800f3cc <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	601a      	str	r2, [r3, #0]
 800f3ba:	e007      	b.n	800f3cc <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f3bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	b2db      	uxtb	r3, r3
 800f3c4:	b25a      	sxtb	r2, r3
 800f3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	637b      	str	r3, [r7, #52]	; 0x34
 800f3d0:	e001      	b.n	800f3d6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	637b      	str	r3, [r7, #52]	; 0x34
 800f3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	f383 8811 	msr	BASEPRI, r3
}
 800f3e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3738      	adds	r7, #56	; 0x38
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d10c      	bne.n	800f414 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800f3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3fe:	b672      	cpsid	i
 800f400:	f383 8811 	msr	BASEPRI, r3
 800f404:	f3bf 8f6f 	isb	sy
 800f408:	f3bf 8f4f 	dsb	sy
 800f40c:	b662      	cpsie	i
 800f40e:	60bb      	str	r3, [r7, #8]
}
 800f410:	bf00      	nop
 800f412:	e7fe      	b.n	800f412 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800f414:	f001 fc32 	bl	8010c7c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f41c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800f41e:	f001 fc61 	bl	8010ce4 <vPortExitCritical>

	return uxReturn;
 800f422:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f424:	4618      	mov	r0, r3
 800f426:	3710      	adds	r7, #16
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800f42c:	b480      	push	{r7}
 800f42e:	b087      	sub	sp, #28
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d10c      	bne.n	800f458 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800f43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f442:	b672      	cpsid	i
 800f444:	f383 8811 	msr	BASEPRI, r3
 800f448:	f3bf 8f6f 	isb	sy
 800f44c:	f3bf 8f4f 	dsb	sy
 800f450:	b662      	cpsie	i
 800f452:	60fb      	str	r3, [r7, #12]
}
 800f454:	bf00      	nop
 800f456:	e7fe      	b.n	800f456 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f45c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800f45e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f460:	4618      	mov	r0, r3
 800f462:	371c      	adds	r7, #28
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr

0800f46c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b084      	sub	sp, #16
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d10c      	bne.n	800f498 <vQueueDelete+0x2c>
	__asm volatile
 800f47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f482:	b672      	cpsid	i
 800f484:	f383 8811 	msr	BASEPRI, r3
 800f488:	f3bf 8f6f 	isb	sy
 800f48c:	f3bf 8f4f 	dsb	sy
 800f490:	b662      	cpsie	i
 800f492:	60bb      	str	r3, [r7, #8]
}
 800f494:	bf00      	nop
 800f496:	e7fe      	b.n	800f496 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f000 f935 	bl	800f708 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d102      	bne.n	800f4ae <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800f4a8:	68f8      	ldr	r0, [r7, #12]
 800f4aa:	f7f1 fb3a 	bl	8000b22 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f4ae:	bf00      	nop
 800f4b0:	3710      	adds	r7, #16
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}

0800f4b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f4b6:	b480      	push	{r7}
 800f4b8:	b085      	sub	sp, #20
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d006      	beq.n	800f4d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f1c3 0307 	rsb	r3, r3, #7
 800f4d0:	60fb      	str	r3, [r7, #12]
 800f4d2:	e001      	b.n	800f4d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
	}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3714      	adds	r7, #20
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr

0800f4e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f4e6:	b580      	push	{r7, lr}
 800f4e8:	b086      	sub	sp, #24
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	60f8      	str	r0, [r7, #12]
 800f4ee:	60b9      	str	r1, [r7, #8]
 800f4f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f500:	2b00      	cmp	r3, #0
 800f502:	d10d      	bne.n	800f520 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d14d      	bne.n	800f5a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	689b      	ldr	r3, [r3, #8]
 800f510:	4618      	mov	r0, r3
 800f512:	f001 f907 	bl	8010724 <xTaskPriorityDisinherit>
 800f516:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	2200      	movs	r2, #0
 800f51c:	609a      	str	r2, [r3, #8]
 800f51e:	e043      	b.n	800f5a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d119      	bne.n	800f55a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	6858      	ldr	r0, [r3, #4]
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f52e:	461a      	mov	r2, r3
 800f530:	68b9      	ldr	r1, [r7, #8]
 800f532:	f00f ff25 	bl	801f380 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	685a      	ldr	r2, [r3, #4]
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f53e:	441a      	add	r2, r3
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	685a      	ldr	r2, [r3, #4]
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	689b      	ldr	r3, [r3, #8]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d32b      	bcc.n	800f5a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	605a      	str	r2, [r3, #4]
 800f558:	e026      	b.n	800f5a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	68d8      	ldr	r0, [r3, #12]
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f562:	461a      	mov	r2, r3
 800f564:	68b9      	ldr	r1, [r7, #8]
 800f566:	f00f ff0b 	bl	801f380 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	68da      	ldr	r2, [r3, #12]
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f572:	425b      	negs	r3, r3
 800f574:	441a      	add	r2, r3
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	68da      	ldr	r2, [r3, #12]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	429a      	cmp	r2, r3
 800f584:	d207      	bcs.n	800f596 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	689a      	ldr	r2, [r3, #8]
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f58e:	425b      	negs	r3, r3
 800f590:	441a      	add	r2, r3
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2b02      	cmp	r3, #2
 800f59a:	d105      	bne.n	800f5a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d002      	beq.n	800f5a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	3b01      	subs	r3, #1
 800f5a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	1c5a      	adds	r2, r3, #1
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f5b0:	697b      	ldr	r3, [r7, #20]
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3718      	adds	r7, #24
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}

0800f5ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b082      	sub	sp, #8
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
 800f5c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d018      	beq.n	800f5fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	68da      	ldr	r2, [r3, #12]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5d4:	441a      	add	r2, r3
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	68da      	ldr	r2, [r3, #12]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	689b      	ldr	r3, [r3, #8]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d303      	bcc.n	800f5ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	68d9      	ldr	r1, [r3, #12]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5f6:	461a      	mov	r2, r3
 800f5f8:	6838      	ldr	r0, [r7, #0]
 800f5fa:	f00f fec1 	bl	801f380 <memcpy>
	}
}
 800f5fe:	bf00      	nop
 800f600:	3708      	adds	r7, #8
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b084      	sub	sp, #16
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f60e:	f001 fb35 	bl	8010c7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f618:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f61a:	e011      	b.n	800f640 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f620:	2b00      	cmp	r3, #0
 800f622:	d012      	beq.n	800f64a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	3324      	adds	r3, #36	; 0x24
 800f628:	4618      	mov	r0, r3
 800f62a:	f000 fe15 	bl	8010258 <xTaskRemoveFromEventList>
 800f62e:	4603      	mov	r3, r0
 800f630:	2b00      	cmp	r3, #0
 800f632:	d001      	beq.n	800f638 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f634:	f000 fef0 	bl	8010418 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f638:	7bfb      	ldrb	r3, [r7, #15]
 800f63a:	3b01      	subs	r3, #1
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f644:	2b00      	cmp	r3, #0
 800f646:	dce9      	bgt.n	800f61c <prvUnlockQueue+0x16>
 800f648:	e000      	b.n	800f64c <prvUnlockQueue+0x46>
					break;
 800f64a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	22ff      	movs	r2, #255	; 0xff
 800f650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f654:	f001 fb46 	bl	8010ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f658:	f001 fb10 	bl	8010c7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f662:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f664:	e011      	b.n	800f68a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	691b      	ldr	r3, [r3, #16]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d012      	beq.n	800f694 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	3310      	adds	r3, #16
 800f672:	4618      	mov	r0, r3
 800f674:	f000 fdf0 	bl	8010258 <xTaskRemoveFromEventList>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d001      	beq.n	800f682 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f67e:	f000 fecb 	bl	8010418 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f682:	7bbb      	ldrb	r3, [r7, #14]
 800f684:	3b01      	subs	r3, #1
 800f686:	b2db      	uxtb	r3, r3
 800f688:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f68a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	dce9      	bgt.n	800f666 <prvUnlockQueue+0x60>
 800f692:	e000      	b.n	800f696 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f694:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	22ff      	movs	r2, #255	; 0xff
 800f69a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f69e:	f001 fb21 	bl	8010ce4 <vPortExitCritical>
}
 800f6a2:	bf00      	nop
 800f6a4:	3710      	adds	r7, #16
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}

0800f6aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b084      	sub	sp, #16
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f6b2:	f001 fae3 	bl	8010c7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d102      	bne.n	800f6c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	60fb      	str	r3, [r7, #12]
 800f6c2:	e001      	b.n	800f6c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f6c8:	f001 fb0c 	bl	8010ce4 <vPortExitCritical>

	return xReturn;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3710      	adds	r7, #16
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b084      	sub	sp, #16
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f6de:	f001 facd 	bl	8010c7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d102      	bne.n	800f6f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	60fb      	str	r3, [r7, #12]
 800f6f2:	e001      	b.n	800f6f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f6f8:	f001 faf4 	bl	8010ce4 <vPortExitCritical>

	return xReturn;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3710      	adds	r7, #16
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
	...

0800f708 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f708:	b480      	push	{r7}
 800f70a:	b085      	sub	sp, #20
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f710:	2300      	movs	r3, #0
 800f712:	60fb      	str	r3, [r7, #12]
 800f714:	e016      	b.n	800f744 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f716:	4a10      	ldr	r2, [pc, #64]	; (800f758 <vQueueUnregisterQueue+0x50>)
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	00db      	lsls	r3, r3, #3
 800f71c:	4413      	add	r3, r2
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	687a      	ldr	r2, [r7, #4]
 800f722:	429a      	cmp	r2, r3
 800f724:	d10b      	bne.n	800f73e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f726:	4a0c      	ldr	r2, [pc, #48]	; (800f758 <vQueueUnregisterQueue+0x50>)
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2100      	movs	r1, #0
 800f72c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f730:	4a09      	ldr	r2, [pc, #36]	; (800f758 <vQueueUnregisterQueue+0x50>)
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	00db      	lsls	r3, r3, #3
 800f736:	4413      	add	r3, r2
 800f738:	2200      	movs	r2, #0
 800f73a:	605a      	str	r2, [r3, #4]
				break;
 800f73c:	e006      	b.n	800f74c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	3301      	adds	r3, #1
 800f742:	60fb      	str	r3, [r7, #12]
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2b07      	cmp	r3, #7
 800f748:	d9e5      	bls.n	800f716 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f74a:	bf00      	nop
 800f74c:	bf00      	nop
 800f74e:	3714      	adds	r7, #20
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr
 800f758:	20006550 	.word	0x20006550

0800f75c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b08e      	sub	sp, #56	; 0x38
 800f760:	af04      	add	r7, sp, #16
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	607a      	str	r2, [r7, #4]
 800f768:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d10c      	bne.n	800f78a <xTaskCreateStatic+0x2e>
	__asm volatile
 800f770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f774:	b672      	cpsid	i
 800f776:	f383 8811 	msr	BASEPRI, r3
 800f77a:	f3bf 8f6f 	isb	sy
 800f77e:	f3bf 8f4f 	dsb	sy
 800f782:	b662      	cpsie	i
 800f784:	623b      	str	r3, [r7, #32]
}
 800f786:	bf00      	nop
 800f788:	e7fe      	b.n	800f788 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d10c      	bne.n	800f7aa <xTaskCreateStatic+0x4e>
	__asm volatile
 800f790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f794:	b672      	cpsid	i
 800f796:	f383 8811 	msr	BASEPRI, r3
 800f79a:	f3bf 8f6f 	isb	sy
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	b662      	cpsie	i
 800f7a4:	61fb      	str	r3, [r7, #28]
}
 800f7a6:	bf00      	nop
 800f7a8:	e7fe      	b.n	800f7a8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f7aa:	23b4      	movs	r3, #180	; 0xb4
 800f7ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	2bb4      	cmp	r3, #180	; 0xb4
 800f7b2:	d00c      	beq.n	800f7ce <xTaskCreateStatic+0x72>
	__asm volatile
 800f7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b8:	b672      	cpsid	i
 800f7ba:	f383 8811 	msr	BASEPRI, r3
 800f7be:	f3bf 8f6f 	isb	sy
 800f7c2:	f3bf 8f4f 	dsb	sy
 800f7c6:	b662      	cpsie	i
 800f7c8:	61bb      	str	r3, [r7, #24]
}
 800f7ca:	bf00      	nop
 800f7cc:	e7fe      	b.n	800f7cc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f7ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d01e      	beq.n	800f814 <xTaskCreateStatic+0xb8>
 800f7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d01b      	beq.n	800f814 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e8:	2202      	movs	r2, #2
 800f7ea:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	9303      	str	r3, [sp, #12]
 800f7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f4:	9302      	str	r3, [sp, #8]
 800f7f6:	f107 0314 	add.w	r3, r7, #20
 800f7fa:	9301      	str	r3, [sp, #4]
 800f7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fe:	9300      	str	r3, [sp, #0]
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	687a      	ldr	r2, [r7, #4]
 800f804:	68b9      	ldr	r1, [r7, #8]
 800f806:	68f8      	ldr	r0, [r7, #12]
 800f808:	f000 f850 	bl	800f8ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f80c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f80e:	f000 f8ed 	bl	800f9ec <prvAddNewTaskToReadyList>
 800f812:	e001      	b.n	800f818 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f814:	2300      	movs	r3, #0
 800f816:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f818:	697b      	ldr	r3, [r7, #20]
	}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3728      	adds	r7, #40	; 0x28
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}

0800f822 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f822:	b580      	push	{r7, lr}
 800f824:	b08c      	sub	sp, #48	; 0x30
 800f826:	af04      	add	r7, sp, #16
 800f828:	60f8      	str	r0, [r7, #12]
 800f82a:	60b9      	str	r1, [r7, #8]
 800f82c:	603b      	str	r3, [r7, #0]
 800f82e:	4613      	mov	r3, r2
 800f830:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f832:	88fb      	ldrh	r3, [r7, #6]
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	4618      	mov	r0, r3
 800f838:	f7f1 f965 	bl	8000b06 <pvPortMalloc>
 800f83c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d00e      	beq.n	800f862 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f844:	20b4      	movs	r0, #180	; 0xb4
 800f846:	f7f1 f95e 	bl	8000b06 <pvPortMalloc>
 800f84a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d003      	beq.n	800f85a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	697a      	ldr	r2, [r7, #20]
 800f856:	631a      	str	r2, [r3, #48]	; 0x30
 800f858:	e005      	b.n	800f866 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f85a:	6978      	ldr	r0, [r7, #20]
 800f85c:	f7f1 f961 	bl	8000b22 <vPortFree>
 800f860:	e001      	b.n	800f866 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f862:	2300      	movs	r3, #0
 800f864:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d017      	beq.n	800f89c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	2200      	movs	r2, #0
 800f870:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f874:	88fa      	ldrh	r2, [r7, #6]
 800f876:	2300      	movs	r3, #0
 800f878:	9303      	str	r3, [sp, #12]
 800f87a:	69fb      	ldr	r3, [r7, #28]
 800f87c:	9302      	str	r3, [sp, #8]
 800f87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f880:	9301      	str	r3, [sp, #4]
 800f882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f884:	9300      	str	r3, [sp, #0]
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	68b9      	ldr	r1, [r7, #8]
 800f88a:	68f8      	ldr	r0, [r7, #12]
 800f88c:	f000 f80e 	bl	800f8ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f890:	69f8      	ldr	r0, [r7, #28]
 800f892:	f000 f8ab 	bl	800f9ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f896:	2301      	movs	r3, #1
 800f898:	61bb      	str	r3, [r7, #24]
 800f89a:	e002      	b.n	800f8a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f89c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f8a2:	69bb      	ldr	r3, [r7, #24]
	}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3720      	adds	r7, #32
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b088      	sub	sp, #32
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	607a      	str	r2, [r7, #4]
 800f8b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f8be:	6879      	ldr	r1, [r7, #4]
 800f8c0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f8c4:	440b      	add	r3, r1
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	4413      	add	r3, r2
 800f8ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f8cc:	69bb      	ldr	r3, [r7, #24]
 800f8ce:	f023 0307 	bic.w	r3, r3, #7
 800f8d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f8d4:	69bb      	ldr	r3, [r7, #24]
 800f8d6:	f003 0307 	and.w	r3, r3, #7
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d00c      	beq.n	800f8f8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800f8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e2:	b672      	cpsid	i
 800f8e4:	f383 8811 	msr	BASEPRI, r3
 800f8e8:	f3bf 8f6f 	isb	sy
 800f8ec:	f3bf 8f4f 	dsb	sy
 800f8f0:	b662      	cpsie	i
 800f8f2:	617b      	str	r3, [r7, #20]
}
 800f8f4:	bf00      	nop
 800f8f6:	e7fe      	b.n	800f8f6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d01f      	beq.n	800f93e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f8fe:	2300      	movs	r3, #0
 800f900:	61fb      	str	r3, [r7, #28]
 800f902:	e012      	b.n	800f92a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f904:	68ba      	ldr	r2, [r7, #8]
 800f906:	69fb      	ldr	r3, [r7, #28]
 800f908:	4413      	add	r3, r2
 800f90a:	7819      	ldrb	r1, [r3, #0]
 800f90c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	4413      	add	r3, r2
 800f912:	3334      	adds	r3, #52	; 0x34
 800f914:	460a      	mov	r2, r1
 800f916:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f918:	68ba      	ldr	r2, [r7, #8]
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	4413      	add	r3, r2
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d006      	beq.n	800f932 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	3301      	adds	r3, #1
 800f928:	61fb      	str	r3, [r7, #28]
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	2b0f      	cmp	r3, #15
 800f92e:	d9e9      	bls.n	800f904 <prvInitialiseNewTask+0x58>
 800f930:	e000      	b.n	800f934 <prvInitialiseNewTask+0x88>
			{
				break;
 800f932:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f936:	2200      	movs	r2, #0
 800f938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f93c:	e003      	b.n	800f946 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f940:	2200      	movs	r2, #0
 800f942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f948:	2b06      	cmp	r3, #6
 800f94a:	d901      	bls.n	800f950 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f94c:	2306      	movs	r3, #6
 800f94e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f954:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f95a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95e:	2200      	movs	r2, #0
 800f960:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f964:	3304      	adds	r3, #4
 800f966:	4618      	mov	r0, r3
 800f968:	f7fe fe55 	bl	800e616 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96e:	3318      	adds	r3, #24
 800f970:	4618      	mov	r0, r3
 800f972:	f7fe fe50 	bl	800e616 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f97a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f97e:	f1c3 0207 	rsb	r2, r3, #7
 800f982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f984:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f98a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f98e:	2200      	movs	r2, #0
 800f990:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f996:	2200      	movs	r2, #0
 800f998:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99e:	334c      	adds	r3, #76	; 0x4c
 800f9a0:	2260      	movs	r2, #96	; 0x60
 800f9a2:	2100      	movs	r1, #0
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f00f fd13 	bl	801f3d0 <memset>
 800f9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ac:	4a0c      	ldr	r2, [pc, #48]	; (800f9e0 <prvInitialiseNewTask+0x134>)
 800f9ae:	651a      	str	r2, [r3, #80]	; 0x50
 800f9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b2:	4a0c      	ldr	r2, [pc, #48]	; (800f9e4 <prvInitialiseNewTask+0x138>)
 800f9b4:	655a      	str	r2, [r3, #84]	; 0x54
 800f9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b8:	4a0b      	ldr	r2, [pc, #44]	; (800f9e8 <prvInitialiseNewTask+0x13c>)
 800f9ba:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f9bc:	683a      	ldr	r2, [r7, #0]
 800f9be:	68f9      	ldr	r1, [r7, #12]
 800f9c0:	69b8      	ldr	r0, [r7, #24]
 800f9c2:	f001 f851 	bl	8010a68 <pxPortInitialiseStack>
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d002      	beq.n	800f9d8 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9d8:	bf00      	nop
 800f9da:	3720      	adds	r7, #32
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	0802411c 	.word	0x0802411c
 800f9e4:	0802413c 	.word	0x0802413c
 800f9e8:	080240fc 	.word	0x080240fc

0800f9ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f9f4:	f001 f942 	bl	8010c7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f9f8:	4b2a      	ldr	r3, [pc, #168]	; (800faa4 <prvAddNewTaskToReadyList+0xb8>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	4a29      	ldr	r2, [pc, #164]	; (800faa4 <prvAddNewTaskToReadyList+0xb8>)
 800fa00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fa02:	4b29      	ldr	r3, [pc, #164]	; (800faa8 <prvAddNewTaskToReadyList+0xbc>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d109      	bne.n	800fa1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fa0a:	4a27      	ldr	r2, [pc, #156]	; (800faa8 <prvAddNewTaskToReadyList+0xbc>)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fa10:	4b24      	ldr	r3, [pc, #144]	; (800faa4 <prvAddNewTaskToReadyList+0xb8>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d110      	bne.n	800fa3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fa18:	f000 fd22 	bl	8010460 <prvInitialiseTaskLists>
 800fa1c:	e00d      	b.n	800fa3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fa1e:	4b23      	ldr	r3, [pc, #140]	; (800faac <prvAddNewTaskToReadyList+0xc0>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d109      	bne.n	800fa3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fa26:	4b20      	ldr	r3, [pc, #128]	; (800faa8 <prvAddNewTaskToReadyList+0xbc>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d802      	bhi.n	800fa3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fa34:	4a1c      	ldr	r2, [pc, #112]	; (800faa8 <prvAddNewTaskToReadyList+0xbc>)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fa3a:	4b1d      	ldr	r3, [pc, #116]	; (800fab0 <prvAddNewTaskToReadyList+0xc4>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	3301      	adds	r3, #1
 800fa40:	4a1b      	ldr	r2, [pc, #108]	; (800fab0 <prvAddNewTaskToReadyList+0xc4>)
 800fa42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa48:	2201      	movs	r2, #1
 800fa4a:	409a      	lsls	r2, r3
 800fa4c:	4b19      	ldr	r3, [pc, #100]	; (800fab4 <prvAddNewTaskToReadyList+0xc8>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4313      	orrs	r3, r2
 800fa52:	4a18      	ldr	r2, [pc, #96]	; (800fab4 <prvAddNewTaskToReadyList+0xc8>)
 800fa54:	6013      	str	r3, [r2, #0]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa5a:	4613      	mov	r3, r2
 800fa5c:	009b      	lsls	r3, r3, #2
 800fa5e:	4413      	add	r3, r2
 800fa60:	009b      	lsls	r3, r3, #2
 800fa62:	4a15      	ldr	r2, [pc, #84]	; (800fab8 <prvAddNewTaskToReadyList+0xcc>)
 800fa64:	441a      	add	r2, r3
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	3304      	adds	r3, #4
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	4610      	mov	r0, r2
 800fa6e:	f7fe fddf 	bl	800e630 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fa72:	f001 f937 	bl	8010ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fa76:	4b0d      	ldr	r3, [pc, #52]	; (800faac <prvAddNewTaskToReadyList+0xc0>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d00e      	beq.n	800fa9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fa7e:	4b0a      	ldr	r3, [pc, #40]	; (800faa8 <prvAddNewTaskToReadyList+0xbc>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d207      	bcs.n	800fa9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fa8c:	4b0b      	ldr	r3, [pc, #44]	; (800fabc <prvAddNewTaskToReadyList+0xd0>)
 800fa8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa92:	601a      	str	r2, [r3, #0]
 800fa94:	f3bf 8f4f 	dsb	sy
 800fa98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa9c:	bf00      	nop
 800fa9e:	3708      	adds	r7, #8
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	20006690 	.word	0x20006690
 800faa8:	20006590 	.word	0x20006590
 800faac:	2000669c 	.word	0x2000669c
 800fab0:	200066ac 	.word	0x200066ac
 800fab4:	20006698 	.word	0x20006698
 800fab8:	20006594 	.word	0x20006594
 800fabc:	e000ed04 	.word	0xe000ed04

0800fac0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800fac8:	f001 f8d8 	bl	8010c7c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d102      	bne.n	800fad8 <vTaskDelete+0x18>
 800fad2:	4b3a      	ldr	r3, [pc, #232]	; (800fbbc <vTaskDelete+0xfc>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	e000      	b.n	800fada <vTaskDelete+0x1a>
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	3304      	adds	r3, #4
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7fe fe02 	bl	800e6ea <uxListRemove>
 800fae6:	4603      	mov	r3, r0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d115      	bne.n	800fb18 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faf0:	4933      	ldr	r1, [pc, #204]	; (800fbc0 <vTaskDelete+0x100>)
 800faf2:	4613      	mov	r3, r2
 800faf4:	009b      	lsls	r3, r3, #2
 800faf6:	4413      	add	r3, r2
 800faf8:	009b      	lsls	r3, r3, #2
 800fafa:	440b      	add	r3, r1
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d10a      	bne.n	800fb18 <vTaskDelete+0x58>
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb06:	2201      	movs	r2, #1
 800fb08:	fa02 f303 	lsl.w	r3, r2, r3
 800fb0c:	43da      	mvns	r2, r3
 800fb0e:	4b2d      	ldr	r3, [pc, #180]	; (800fbc4 <vTaskDelete+0x104>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	4013      	ands	r3, r2
 800fb14:	4a2b      	ldr	r2, [pc, #172]	; (800fbc4 <vTaskDelete+0x104>)
 800fb16:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d004      	beq.n	800fb2a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	3318      	adds	r3, #24
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7fe fde0 	bl	800e6ea <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800fb2a:	4b27      	ldr	r3, [pc, #156]	; (800fbc8 <vTaskDelete+0x108>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	4a25      	ldr	r2, [pc, #148]	; (800fbc8 <vTaskDelete+0x108>)
 800fb32:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800fb34:	4b21      	ldr	r3, [pc, #132]	; (800fbbc <vTaskDelete+0xfc>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	68fa      	ldr	r2, [r7, #12]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d10b      	bne.n	800fb56 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	3304      	adds	r3, #4
 800fb42:	4619      	mov	r1, r3
 800fb44:	4821      	ldr	r0, [pc, #132]	; (800fbcc <vTaskDelete+0x10c>)
 800fb46:	f7fe fd73 	bl	800e630 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800fb4a:	4b21      	ldr	r3, [pc, #132]	; (800fbd0 <vTaskDelete+0x110>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	3301      	adds	r3, #1
 800fb50:	4a1f      	ldr	r2, [pc, #124]	; (800fbd0 <vTaskDelete+0x110>)
 800fb52:	6013      	str	r3, [r2, #0]
 800fb54:	e009      	b.n	800fb6a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800fb56:	4b1f      	ldr	r3, [pc, #124]	; (800fbd4 <vTaskDelete+0x114>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	3b01      	subs	r3, #1
 800fb5c:	4a1d      	ldr	r2, [pc, #116]	; (800fbd4 <vTaskDelete+0x114>)
 800fb5e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800fb60:	68f8      	ldr	r0, [r7, #12]
 800fb62:	f000 fceb 	bl	801053c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800fb66:	f000 fd1f 	bl	80105a8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800fb6a:	f001 f8bb 	bl	8010ce4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800fb6e:	4b1a      	ldr	r3, [pc, #104]	; (800fbd8 <vTaskDelete+0x118>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d01d      	beq.n	800fbb2 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800fb76:	4b11      	ldr	r3, [pc, #68]	; (800fbbc <vTaskDelete+0xfc>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	68fa      	ldr	r2, [r7, #12]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d118      	bne.n	800fbb2 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800fb80:	4b16      	ldr	r3, [pc, #88]	; (800fbdc <vTaskDelete+0x11c>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d00c      	beq.n	800fba2 <vTaskDelete+0xe2>
	__asm volatile
 800fb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8c:	b672      	cpsid	i
 800fb8e:	f383 8811 	msr	BASEPRI, r3
 800fb92:	f3bf 8f6f 	isb	sy
 800fb96:	f3bf 8f4f 	dsb	sy
 800fb9a:	b662      	cpsie	i
 800fb9c:	60bb      	str	r3, [r7, #8]
}
 800fb9e:	bf00      	nop
 800fba0:	e7fe      	b.n	800fba0 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800fba2:	4b0f      	ldr	r3, [pc, #60]	; (800fbe0 <vTaskDelete+0x120>)
 800fba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fba8:	601a      	str	r2, [r3, #0]
 800fbaa:	f3bf 8f4f 	dsb	sy
 800fbae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fbb2:	bf00      	nop
 800fbb4:	3710      	adds	r7, #16
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}
 800fbba:	bf00      	nop
 800fbbc:	20006590 	.word	0x20006590
 800fbc0:	20006594 	.word	0x20006594
 800fbc4:	20006698 	.word	0x20006698
 800fbc8:	200066ac 	.word	0x200066ac
 800fbcc:	20006664 	.word	0x20006664
 800fbd0:	20006678 	.word	0x20006678
 800fbd4:	20006690 	.word	0x20006690
 800fbd8:	2000669c 	.word	0x2000669c
 800fbdc:	200066b8 	.word	0x200066b8
 800fbe0:	e000ed04 	.word	0xe000ed04

0800fbe4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b08a      	sub	sp, #40	; 0x28
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d10c      	bne.n	800fc12 <vTaskDelayUntil+0x2e>
	__asm volatile
 800fbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbfc:	b672      	cpsid	i
 800fbfe:	f383 8811 	msr	BASEPRI, r3
 800fc02:	f3bf 8f6f 	isb	sy
 800fc06:	f3bf 8f4f 	dsb	sy
 800fc0a:	b662      	cpsie	i
 800fc0c:	617b      	str	r3, [r7, #20]
}
 800fc0e:	bf00      	nop
 800fc10:	e7fe      	b.n	800fc10 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d10c      	bne.n	800fc32 <vTaskDelayUntil+0x4e>
	__asm volatile
 800fc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc1c:	b672      	cpsid	i
 800fc1e:	f383 8811 	msr	BASEPRI, r3
 800fc22:	f3bf 8f6f 	isb	sy
 800fc26:	f3bf 8f4f 	dsb	sy
 800fc2a:	b662      	cpsie	i
 800fc2c:	613b      	str	r3, [r7, #16]
}
 800fc2e:	bf00      	nop
 800fc30:	e7fe      	b.n	800fc30 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800fc32:	4b2b      	ldr	r3, [pc, #172]	; (800fce0 <vTaskDelayUntil+0xfc>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d00c      	beq.n	800fc54 <vTaskDelayUntil+0x70>
	__asm volatile
 800fc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc3e:	b672      	cpsid	i
 800fc40:	f383 8811 	msr	BASEPRI, r3
 800fc44:	f3bf 8f6f 	isb	sy
 800fc48:	f3bf 8f4f 	dsb	sy
 800fc4c:	b662      	cpsie	i
 800fc4e:	60fb      	str	r3, [r7, #12]
}
 800fc50:	bf00      	nop
 800fc52:	e7fe      	b.n	800fc52 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800fc54:	f000 f8ee 	bl	800fe34 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800fc58:	4b22      	ldr	r3, [pc, #136]	; (800fce4 <vTaskDelayUntil+0x100>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	683a      	ldr	r2, [r7, #0]
 800fc64:	4413      	add	r3, r2
 800fc66:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	6a3a      	ldr	r2, [r7, #32]
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d20b      	bcs.n	800fc8a <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	69fa      	ldr	r2, [r7, #28]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d211      	bcs.n	800fca0 <vTaskDelayUntil+0xbc>
 800fc7c:	69fa      	ldr	r2, [r7, #28]
 800fc7e:	6a3b      	ldr	r3, [r7, #32]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d90d      	bls.n	800fca0 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800fc84:	2301      	movs	r3, #1
 800fc86:	627b      	str	r3, [r7, #36]	; 0x24
 800fc88:	e00a      	b.n	800fca0 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	69fa      	ldr	r2, [r7, #28]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d303      	bcc.n	800fc9c <vTaskDelayUntil+0xb8>
 800fc94:	69fa      	ldr	r2, [r7, #28]
 800fc96:	6a3b      	ldr	r3, [r7, #32]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d901      	bls.n	800fca0 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	69fa      	ldr	r2, [r7, #28]
 800fca4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800fca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d006      	beq.n	800fcba <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800fcac:	69fa      	ldr	r2, [r7, #28]
 800fcae:	6a3b      	ldr	r3, [r7, #32]
 800fcb0:	1ad3      	subs	r3, r2, r3
 800fcb2:	2100      	movs	r1, #0
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f000 fe71 	bl	801099c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800fcba:	f000 f8c9 	bl	800fe50 <xTaskResumeAll>
 800fcbe:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fcc0:	69bb      	ldr	r3, [r7, #24]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d107      	bne.n	800fcd6 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800fcc6:	4b08      	ldr	r3, [pc, #32]	; (800fce8 <vTaskDelayUntil+0x104>)
 800fcc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fccc:	601a      	str	r2, [r3, #0]
 800fcce:	f3bf 8f4f 	dsb	sy
 800fcd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fcd6:	bf00      	nop
 800fcd8:	3728      	adds	r7, #40	; 0x28
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}
 800fcde:	bf00      	nop
 800fce0:	200066b8 	.word	0x200066b8
 800fce4:	20006694 	.word	0x20006694
 800fce8:	e000ed04 	.word	0xe000ed04

0800fcec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d019      	beq.n	800fd32 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fcfe:	4b14      	ldr	r3, [pc, #80]	; (800fd50 <vTaskDelay+0x64>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d00c      	beq.n	800fd20 <vTaskDelay+0x34>
	__asm volatile
 800fd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0a:	b672      	cpsid	i
 800fd0c:	f383 8811 	msr	BASEPRI, r3
 800fd10:	f3bf 8f6f 	isb	sy
 800fd14:	f3bf 8f4f 	dsb	sy
 800fd18:	b662      	cpsie	i
 800fd1a:	60bb      	str	r3, [r7, #8]
}
 800fd1c:	bf00      	nop
 800fd1e:	e7fe      	b.n	800fd1e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800fd20:	f000 f888 	bl	800fe34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fd24:	2100      	movs	r1, #0
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 fe38 	bl	801099c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fd2c:	f000 f890 	bl	800fe50 <xTaskResumeAll>
 800fd30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d107      	bne.n	800fd48 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800fd38:	4b06      	ldr	r3, [pc, #24]	; (800fd54 <vTaskDelay+0x68>)
 800fd3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd3e:	601a      	str	r2, [r3, #0]
 800fd40:	f3bf 8f4f 	dsb	sy
 800fd44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd48:	bf00      	nop
 800fd4a:	3710      	adds	r7, #16
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}
 800fd50:	200066b8 	.word	0x200066b8
 800fd54:	e000ed04 	.word	0xe000ed04

0800fd58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b08a      	sub	sp, #40	; 0x28
 800fd5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fd62:	2300      	movs	r3, #0
 800fd64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fd66:	463a      	mov	r2, r7
 800fd68:	1d39      	adds	r1, r7, #4
 800fd6a:	f107 0308 	add.w	r3, r7, #8
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7f6 fc3e 	bl	80065f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fd74:	6839      	ldr	r1, [r7, #0]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	68ba      	ldr	r2, [r7, #8]
 800fd7a:	9202      	str	r2, [sp, #8]
 800fd7c:	9301      	str	r3, [sp, #4]
 800fd7e:	2300      	movs	r3, #0
 800fd80:	9300      	str	r3, [sp, #0]
 800fd82:	2300      	movs	r3, #0
 800fd84:	460a      	mov	r2, r1
 800fd86:	4923      	ldr	r1, [pc, #140]	; (800fe14 <vTaskStartScheduler+0xbc>)
 800fd88:	4823      	ldr	r0, [pc, #140]	; (800fe18 <vTaskStartScheduler+0xc0>)
 800fd8a:	f7ff fce7 	bl	800f75c <xTaskCreateStatic>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	4a22      	ldr	r2, [pc, #136]	; (800fe1c <vTaskStartScheduler+0xc4>)
 800fd92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fd94:	4b21      	ldr	r3, [pc, #132]	; (800fe1c <vTaskStartScheduler+0xc4>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d002      	beq.n	800fda2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	617b      	str	r3, [r7, #20]
 800fda0:	e001      	b.n	800fda6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fda2:	2300      	movs	r3, #0
 800fda4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	d11d      	bne.n	800fde8 <vTaskStartScheduler+0x90>
	__asm volatile
 800fdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb0:	b672      	cpsid	i
 800fdb2:	f383 8811 	msr	BASEPRI, r3
 800fdb6:	f3bf 8f6f 	isb	sy
 800fdba:	f3bf 8f4f 	dsb	sy
 800fdbe:	b662      	cpsie	i
 800fdc0:	613b      	str	r3, [r7, #16]
}
 800fdc2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fdc4:	4b16      	ldr	r3, [pc, #88]	; (800fe20 <vTaskStartScheduler+0xc8>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	334c      	adds	r3, #76	; 0x4c
 800fdca:	4a16      	ldr	r2, [pc, #88]	; (800fe24 <vTaskStartScheduler+0xcc>)
 800fdcc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fdce:	4b16      	ldr	r3, [pc, #88]	; (800fe28 <vTaskStartScheduler+0xd0>)
 800fdd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fdd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fdd6:	4b15      	ldr	r3, [pc, #84]	; (800fe2c <vTaskStartScheduler+0xd4>)
 800fdd8:	2201      	movs	r2, #1
 800fdda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fddc:	4b14      	ldr	r3, [pc, #80]	; (800fe30 <vTaskStartScheduler+0xd8>)
 800fdde:	2200      	movs	r2, #0
 800fde0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fde2:	f000 fecd 	bl	8010b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fde6:	e010      	b.n	800fe0a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fdee:	d10c      	bne.n	800fe0a <vTaskStartScheduler+0xb2>
	__asm volatile
 800fdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf4:	b672      	cpsid	i
 800fdf6:	f383 8811 	msr	BASEPRI, r3
 800fdfa:	f3bf 8f6f 	isb	sy
 800fdfe:	f3bf 8f4f 	dsb	sy
 800fe02:	b662      	cpsie	i
 800fe04:	60fb      	str	r3, [r7, #12]
}
 800fe06:	bf00      	nop
 800fe08:	e7fe      	b.n	800fe08 <vTaskStartScheduler+0xb0>
}
 800fe0a:	bf00      	nop
 800fe0c:	3718      	adds	r7, #24
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}
 800fe12:	bf00      	nop
 800fe14:	08020ac0 	.word	0x08020ac0
 800fe18:	08010431 	.word	0x08010431
 800fe1c:	200066b4 	.word	0x200066b4
 800fe20:	20006590 	.word	0x20006590
 800fe24:	20000034 	.word	0x20000034
 800fe28:	200066b0 	.word	0x200066b0
 800fe2c:	2000669c 	.word	0x2000669c
 800fe30:	20006694 	.word	0x20006694

0800fe34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fe34:	b480      	push	{r7}
 800fe36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fe38:	4b04      	ldr	r3, [pc, #16]	; (800fe4c <vTaskSuspendAll+0x18>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	4a03      	ldr	r2, [pc, #12]	; (800fe4c <vTaskSuspendAll+0x18>)
 800fe40:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fe42:	bf00      	nop
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr
 800fe4c:	200066b8 	.word	0x200066b8

0800fe50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b084      	sub	sp, #16
 800fe54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fe56:	2300      	movs	r3, #0
 800fe58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fe5e:	4b42      	ldr	r3, [pc, #264]	; (800ff68 <xTaskResumeAll+0x118>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d10c      	bne.n	800fe80 <xTaskResumeAll+0x30>
	__asm volatile
 800fe66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe6a:	b672      	cpsid	i
 800fe6c:	f383 8811 	msr	BASEPRI, r3
 800fe70:	f3bf 8f6f 	isb	sy
 800fe74:	f3bf 8f4f 	dsb	sy
 800fe78:	b662      	cpsie	i
 800fe7a:	603b      	str	r3, [r7, #0]
}
 800fe7c:	bf00      	nop
 800fe7e:	e7fe      	b.n	800fe7e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fe80:	f000 fefc 	bl	8010c7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fe84:	4b38      	ldr	r3, [pc, #224]	; (800ff68 <xTaskResumeAll+0x118>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	3b01      	subs	r3, #1
 800fe8a:	4a37      	ldr	r2, [pc, #220]	; (800ff68 <xTaskResumeAll+0x118>)
 800fe8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe8e:	4b36      	ldr	r3, [pc, #216]	; (800ff68 <xTaskResumeAll+0x118>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d161      	bne.n	800ff5a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fe96:	4b35      	ldr	r3, [pc, #212]	; (800ff6c <xTaskResumeAll+0x11c>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d05d      	beq.n	800ff5a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fe9e:	e02e      	b.n	800fefe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fea0:	4b33      	ldr	r3, [pc, #204]	; (800ff70 <xTaskResumeAll+0x120>)
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	68db      	ldr	r3, [r3, #12]
 800fea6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	3318      	adds	r3, #24
 800feac:	4618      	mov	r0, r3
 800feae:	f7fe fc1c 	bl	800e6ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	3304      	adds	r3, #4
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fe fc17 	bl	800e6ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fec0:	2201      	movs	r2, #1
 800fec2:	409a      	lsls	r2, r3
 800fec4:	4b2b      	ldr	r3, [pc, #172]	; (800ff74 <xTaskResumeAll+0x124>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4313      	orrs	r3, r2
 800feca:	4a2a      	ldr	r2, [pc, #168]	; (800ff74 <xTaskResumeAll+0x124>)
 800fecc:	6013      	str	r3, [r2, #0]
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fed2:	4613      	mov	r3, r2
 800fed4:	009b      	lsls	r3, r3, #2
 800fed6:	4413      	add	r3, r2
 800fed8:	009b      	lsls	r3, r3, #2
 800feda:	4a27      	ldr	r2, [pc, #156]	; (800ff78 <xTaskResumeAll+0x128>)
 800fedc:	441a      	add	r2, r3
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	3304      	adds	r3, #4
 800fee2:	4619      	mov	r1, r3
 800fee4:	4610      	mov	r0, r2
 800fee6:	f7fe fba3 	bl	800e630 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feee:	4b23      	ldr	r3, [pc, #140]	; (800ff7c <xTaskResumeAll+0x12c>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d302      	bcc.n	800fefe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fef8:	4b21      	ldr	r3, [pc, #132]	; (800ff80 <xTaskResumeAll+0x130>)
 800fefa:	2201      	movs	r2, #1
 800fefc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fefe:	4b1c      	ldr	r3, [pc, #112]	; (800ff70 <xTaskResumeAll+0x120>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d1cc      	bne.n	800fea0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d001      	beq.n	800ff10 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ff0c:	f000 fb4c 	bl	80105a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ff10:	4b1c      	ldr	r3, [pc, #112]	; (800ff84 <xTaskResumeAll+0x134>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d010      	beq.n	800ff3e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ff1c:	f000 f858 	bl	800ffd0 <xTaskIncrementTick>
 800ff20:	4603      	mov	r3, r0
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d002      	beq.n	800ff2c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ff26:	4b16      	ldr	r3, [pc, #88]	; (800ff80 <xTaskResumeAll+0x130>)
 800ff28:	2201      	movs	r2, #1
 800ff2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	3b01      	subs	r3, #1
 800ff30:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d1f1      	bne.n	800ff1c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800ff38:	4b12      	ldr	r3, [pc, #72]	; (800ff84 <xTaskResumeAll+0x134>)
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ff3e:	4b10      	ldr	r3, [pc, #64]	; (800ff80 <xTaskResumeAll+0x130>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d009      	beq.n	800ff5a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ff46:	2301      	movs	r3, #1
 800ff48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ff4a:	4b0f      	ldr	r3, [pc, #60]	; (800ff88 <xTaskResumeAll+0x138>)
 800ff4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff50:	601a      	str	r2, [r3, #0]
 800ff52:	f3bf 8f4f 	dsb	sy
 800ff56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff5a:	f000 fec3 	bl	8010ce4 <vPortExitCritical>

	return xAlreadyYielded;
 800ff5e:	68bb      	ldr	r3, [r7, #8]
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	3710      	adds	r7, #16
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	200066b8 	.word	0x200066b8
 800ff6c:	20006690 	.word	0x20006690
 800ff70:	20006650 	.word	0x20006650
 800ff74:	20006698 	.word	0x20006698
 800ff78:	20006594 	.word	0x20006594
 800ff7c:	20006590 	.word	0x20006590
 800ff80:	200066a4 	.word	0x200066a4
 800ff84:	200066a0 	.word	0x200066a0
 800ff88:	e000ed04 	.word	0xe000ed04

0800ff8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b083      	sub	sp, #12
 800ff90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ff92:	4b05      	ldr	r3, [pc, #20]	; (800ffa8 <xTaskGetTickCount+0x1c>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ff98:	687b      	ldr	r3, [r7, #4]
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	370c      	adds	r7, #12
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr
 800ffa6:	bf00      	nop
 800ffa8:	20006694 	.word	0x20006694

0800ffac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ffb2:	f000 ff4b 	bl	8010e4c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ffba:	4b04      	ldr	r3, [pc, #16]	; (800ffcc <xTaskGetTickCountFromISR+0x20>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ffc0:	683b      	ldr	r3, [r7, #0]
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3708      	adds	r7, #8
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	20006694 	.word	0x20006694

0800ffd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b086      	sub	sp, #24
 800ffd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffda:	4b4f      	ldr	r3, [pc, #316]	; (8010118 <xTaskIncrementTick+0x148>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	f040 808a 	bne.w	80100f8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ffe4:	4b4d      	ldr	r3, [pc, #308]	; (801011c <xTaskIncrementTick+0x14c>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	3301      	adds	r3, #1
 800ffea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ffec:	4a4b      	ldr	r2, [pc, #300]	; (801011c <xTaskIncrementTick+0x14c>)
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d122      	bne.n	801003e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800fff8:	4b49      	ldr	r3, [pc, #292]	; (8010120 <xTaskIncrementTick+0x150>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d00c      	beq.n	801001c <xTaskIncrementTick+0x4c>
	__asm volatile
 8010002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010006:	b672      	cpsid	i
 8010008:	f383 8811 	msr	BASEPRI, r3
 801000c:	f3bf 8f6f 	isb	sy
 8010010:	f3bf 8f4f 	dsb	sy
 8010014:	b662      	cpsie	i
 8010016:	603b      	str	r3, [r7, #0]
}
 8010018:	bf00      	nop
 801001a:	e7fe      	b.n	801001a <xTaskIncrementTick+0x4a>
 801001c:	4b40      	ldr	r3, [pc, #256]	; (8010120 <xTaskIncrementTick+0x150>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	60fb      	str	r3, [r7, #12]
 8010022:	4b40      	ldr	r3, [pc, #256]	; (8010124 <xTaskIncrementTick+0x154>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	4a3e      	ldr	r2, [pc, #248]	; (8010120 <xTaskIncrementTick+0x150>)
 8010028:	6013      	str	r3, [r2, #0]
 801002a:	4a3e      	ldr	r2, [pc, #248]	; (8010124 <xTaskIncrementTick+0x154>)
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	6013      	str	r3, [r2, #0]
 8010030:	4b3d      	ldr	r3, [pc, #244]	; (8010128 <xTaskIncrementTick+0x158>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	3301      	adds	r3, #1
 8010036:	4a3c      	ldr	r2, [pc, #240]	; (8010128 <xTaskIncrementTick+0x158>)
 8010038:	6013      	str	r3, [r2, #0]
 801003a:	f000 fab5 	bl	80105a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801003e:	4b3b      	ldr	r3, [pc, #236]	; (801012c <xTaskIncrementTick+0x15c>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	693a      	ldr	r2, [r7, #16]
 8010044:	429a      	cmp	r2, r3
 8010046:	d348      	bcc.n	80100da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010048:	4b35      	ldr	r3, [pc, #212]	; (8010120 <xTaskIncrementTick+0x150>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d104      	bne.n	801005c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010052:	4b36      	ldr	r3, [pc, #216]	; (801012c <xTaskIncrementTick+0x15c>)
 8010054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010058:	601a      	str	r2, [r3, #0]
					break;
 801005a:	e03e      	b.n	80100da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801005c:	4b30      	ldr	r3, [pc, #192]	; (8010120 <xTaskIncrementTick+0x150>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	68db      	ldr	r3, [r3, #12]
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	685b      	ldr	r3, [r3, #4]
 801006a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801006c:	693a      	ldr	r2, [r7, #16]
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	429a      	cmp	r2, r3
 8010072:	d203      	bcs.n	801007c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010074:	4a2d      	ldr	r2, [pc, #180]	; (801012c <xTaskIncrementTick+0x15c>)
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801007a:	e02e      	b.n	80100da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	3304      	adds	r3, #4
 8010080:	4618      	mov	r0, r3
 8010082:	f7fe fb32 	bl	800e6ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801008a:	2b00      	cmp	r3, #0
 801008c:	d004      	beq.n	8010098 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	3318      	adds	r3, #24
 8010092:	4618      	mov	r0, r3
 8010094:	f7fe fb29 	bl	800e6ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801009c:	2201      	movs	r2, #1
 801009e:	409a      	lsls	r2, r3
 80100a0:	4b23      	ldr	r3, [pc, #140]	; (8010130 <xTaskIncrementTick+0x160>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4313      	orrs	r3, r2
 80100a6:	4a22      	ldr	r2, [pc, #136]	; (8010130 <xTaskIncrementTick+0x160>)
 80100a8:	6013      	str	r3, [r2, #0]
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ae:	4613      	mov	r3, r2
 80100b0:	009b      	lsls	r3, r3, #2
 80100b2:	4413      	add	r3, r2
 80100b4:	009b      	lsls	r3, r3, #2
 80100b6:	4a1f      	ldr	r2, [pc, #124]	; (8010134 <xTaskIncrementTick+0x164>)
 80100b8:	441a      	add	r2, r3
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	3304      	adds	r3, #4
 80100be:	4619      	mov	r1, r3
 80100c0:	4610      	mov	r0, r2
 80100c2:	f7fe fab5 	bl	800e630 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ca:	4b1b      	ldr	r3, [pc, #108]	; (8010138 <xTaskIncrementTick+0x168>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d3b9      	bcc.n	8010048 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80100d4:	2301      	movs	r3, #1
 80100d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100d8:	e7b6      	b.n	8010048 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80100da:	4b17      	ldr	r3, [pc, #92]	; (8010138 <xTaskIncrementTick+0x168>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100e0:	4914      	ldr	r1, [pc, #80]	; (8010134 <xTaskIncrementTick+0x164>)
 80100e2:	4613      	mov	r3, r2
 80100e4:	009b      	lsls	r3, r3, #2
 80100e6:	4413      	add	r3, r2
 80100e8:	009b      	lsls	r3, r3, #2
 80100ea:	440b      	add	r3, r1
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	2b01      	cmp	r3, #1
 80100f0:	d907      	bls.n	8010102 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80100f2:	2301      	movs	r3, #1
 80100f4:	617b      	str	r3, [r7, #20]
 80100f6:	e004      	b.n	8010102 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80100f8:	4b10      	ldr	r3, [pc, #64]	; (801013c <xTaskIncrementTick+0x16c>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	3301      	adds	r3, #1
 80100fe:	4a0f      	ldr	r2, [pc, #60]	; (801013c <xTaskIncrementTick+0x16c>)
 8010100:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010102:	4b0f      	ldr	r3, [pc, #60]	; (8010140 <xTaskIncrementTick+0x170>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d001      	beq.n	801010e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801010a:	2301      	movs	r3, #1
 801010c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801010e:	697b      	ldr	r3, [r7, #20]
}
 8010110:	4618      	mov	r0, r3
 8010112:	3718      	adds	r7, #24
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	200066b8 	.word	0x200066b8
 801011c:	20006694 	.word	0x20006694
 8010120:	20006648 	.word	0x20006648
 8010124:	2000664c 	.word	0x2000664c
 8010128:	200066a8 	.word	0x200066a8
 801012c:	200066b0 	.word	0x200066b0
 8010130:	20006698 	.word	0x20006698
 8010134:	20006594 	.word	0x20006594
 8010138:	20006590 	.word	0x20006590
 801013c:	200066a0 	.word	0x200066a0
 8010140:	200066a4 	.word	0x200066a4

08010144 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010144:	b480      	push	{r7}
 8010146:	b087      	sub	sp, #28
 8010148:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801014a:	4b2a      	ldr	r3, [pc, #168]	; (80101f4 <vTaskSwitchContext+0xb0>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d003      	beq.n	801015a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010152:	4b29      	ldr	r3, [pc, #164]	; (80101f8 <vTaskSwitchContext+0xb4>)
 8010154:	2201      	movs	r2, #1
 8010156:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010158:	e046      	b.n	80101e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801015a:	4b27      	ldr	r3, [pc, #156]	; (80101f8 <vTaskSwitchContext+0xb4>)
 801015c:	2200      	movs	r2, #0
 801015e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010160:	4b26      	ldr	r3, [pc, #152]	; (80101fc <vTaskSwitchContext+0xb8>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	fab3 f383 	clz	r3, r3
 801016c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801016e:	7afb      	ldrb	r3, [r7, #11]
 8010170:	f1c3 031f 	rsb	r3, r3, #31
 8010174:	617b      	str	r3, [r7, #20]
 8010176:	4922      	ldr	r1, [pc, #136]	; (8010200 <vTaskSwitchContext+0xbc>)
 8010178:	697a      	ldr	r2, [r7, #20]
 801017a:	4613      	mov	r3, r2
 801017c:	009b      	lsls	r3, r3, #2
 801017e:	4413      	add	r3, r2
 8010180:	009b      	lsls	r3, r3, #2
 8010182:	440b      	add	r3, r1
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d10c      	bne.n	80101a4 <vTaskSwitchContext+0x60>
	__asm volatile
 801018a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018e:	b672      	cpsid	i
 8010190:	f383 8811 	msr	BASEPRI, r3
 8010194:	f3bf 8f6f 	isb	sy
 8010198:	f3bf 8f4f 	dsb	sy
 801019c:	b662      	cpsie	i
 801019e:	607b      	str	r3, [r7, #4]
}
 80101a0:	bf00      	nop
 80101a2:	e7fe      	b.n	80101a2 <vTaskSwitchContext+0x5e>
 80101a4:	697a      	ldr	r2, [r7, #20]
 80101a6:	4613      	mov	r3, r2
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	4413      	add	r3, r2
 80101ac:	009b      	lsls	r3, r3, #2
 80101ae:	4a14      	ldr	r2, [pc, #80]	; (8010200 <vTaskSwitchContext+0xbc>)
 80101b0:	4413      	add	r3, r2
 80101b2:	613b      	str	r3, [r7, #16]
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	685b      	ldr	r3, [r3, #4]
 80101b8:	685a      	ldr	r2, [r3, #4]
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	605a      	str	r2, [r3, #4]
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	685a      	ldr	r2, [r3, #4]
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	3308      	adds	r3, #8
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d104      	bne.n	80101d4 <vTaskSwitchContext+0x90>
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	685a      	ldr	r2, [r3, #4]
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	605a      	str	r2, [r3, #4]
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	68db      	ldr	r3, [r3, #12]
 80101da:	4a0a      	ldr	r2, [pc, #40]	; (8010204 <vTaskSwitchContext+0xc0>)
 80101dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80101de:	4b09      	ldr	r3, [pc, #36]	; (8010204 <vTaskSwitchContext+0xc0>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	334c      	adds	r3, #76	; 0x4c
 80101e4:	4a08      	ldr	r2, [pc, #32]	; (8010208 <vTaskSwitchContext+0xc4>)
 80101e6:	6013      	str	r3, [r2, #0]
}
 80101e8:	bf00      	nop
 80101ea:	371c      	adds	r7, #28
 80101ec:	46bd      	mov	sp, r7
 80101ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f2:	4770      	bx	lr
 80101f4:	200066b8 	.word	0x200066b8
 80101f8:	200066a4 	.word	0x200066a4
 80101fc:	20006698 	.word	0x20006698
 8010200:	20006594 	.word	0x20006594
 8010204:	20006590 	.word	0x20006590
 8010208:	20000034 	.word	0x20000034

0801020c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d10c      	bne.n	8010236 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 801021c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010220:	b672      	cpsid	i
 8010222:	f383 8811 	msr	BASEPRI, r3
 8010226:	f3bf 8f6f 	isb	sy
 801022a:	f3bf 8f4f 	dsb	sy
 801022e:	b662      	cpsie	i
 8010230:	60fb      	str	r3, [r7, #12]
}
 8010232:	bf00      	nop
 8010234:	e7fe      	b.n	8010234 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010236:	4b07      	ldr	r3, [pc, #28]	; (8010254 <vTaskPlaceOnEventList+0x48>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	3318      	adds	r3, #24
 801023c:	4619      	mov	r1, r3
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f7fe fa1a 	bl	800e678 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010244:	2101      	movs	r1, #1
 8010246:	6838      	ldr	r0, [r7, #0]
 8010248:	f000 fba8 	bl	801099c <prvAddCurrentTaskToDelayedList>
}
 801024c:	bf00      	nop
 801024e:	3710      	adds	r7, #16
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}
 8010254:	20006590 	.word	0x20006590

08010258 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b086      	sub	sp, #24
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	68db      	ldr	r3, [r3, #12]
 8010266:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d10c      	bne.n	8010288 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 801026e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010272:	b672      	cpsid	i
 8010274:	f383 8811 	msr	BASEPRI, r3
 8010278:	f3bf 8f6f 	isb	sy
 801027c:	f3bf 8f4f 	dsb	sy
 8010280:	b662      	cpsie	i
 8010282:	60fb      	str	r3, [r7, #12]
}
 8010284:	bf00      	nop
 8010286:	e7fe      	b.n	8010286 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	3318      	adds	r3, #24
 801028c:	4618      	mov	r0, r3
 801028e:	f7fe fa2c 	bl	800e6ea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010292:	4b1d      	ldr	r3, [pc, #116]	; (8010308 <xTaskRemoveFromEventList+0xb0>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d11c      	bne.n	80102d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	3304      	adds	r3, #4
 801029e:	4618      	mov	r0, r3
 80102a0:	f7fe fa23 	bl	800e6ea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102a8:	2201      	movs	r2, #1
 80102aa:	409a      	lsls	r2, r3
 80102ac:	4b17      	ldr	r3, [pc, #92]	; (801030c <xTaskRemoveFromEventList+0xb4>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	4313      	orrs	r3, r2
 80102b2:	4a16      	ldr	r2, [pc, #88]	; (801030c <xTaskRemoveFromEventList+0xb4>)
 80102b4:	6013      	str	r3, [r2, #0]
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102ba:	4613      	mov	r3, r2
 80102bc:	009b      	lsls	r3, r3, #2
 80102be:	4413      	add	r3, r2
 80102c0:	009b      	lsls	r3, r3, #2
 80102c2:	4a13      	ldr	r2, [pc, #76]	; (8010310 <xTaskRemoveFromEventList+0xb8>)
 80102c4:	441a      	add	r2, r3
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	3304      	adds	r3, #4
 80102ca:	4619      	mov	r1, r3
 80102cc:	4610      	mov	r0, r2
 80102ce:	f7fe f9af 	bl	800e630 <vListInsertEnd>
 80102d2:	e005      	b.n	80102e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	3318      	adds	r3, #24
 80102d8:	4619      	mov	r1, r3
 80102da:	480e      	ldr	r0, [pc, #56]	; (8010314 <xTaskRemoveFromEventList+0xbc>)
 80102dc:	f7fe f9a8 	bl	800e630 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102e4:	4b0c      	ldr	r3, [pc, #48]	; (8010318 <xTaskRemoveFromEventList+0xc0>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d905      	bls.n	80102fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80102ee:	2301      	movs	r3, #1
 80102f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80102f2:	4b0a      	ldr	r3, [pc, #40]	; (801031c <xTaskRemoveFromEventList+0xc4>)
 80102f4:	2201      	movs	r2, #1
 80102f6:	601a      	str	r2, [r3, #0]
 80102f8:	e001      	b.n	80102fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80102fa:	2300      	movs	r3, #0
 80102fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80102fe:	697b      	ldr	r3, [r7, #20]
}
 8010300:	4618      	mov	r0, r3
 8010302:	3718      	adds	r7, #24
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	200066b8 	.word	0x200066b8
 801030c:	20006698 	.word	0x20006698
 8010310:	20006594 	.word	0x20006594
 8010314:	20006650 	.word	0x20006650
 8010318:	20006590 	.word	0x20006590
 801031c:	200066a4 	.word	0x200066a4

08010320 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010320:	b480      	push	{r7}
 8010322:	b083      	sub	sp, #12
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010328:	4b06      	ldr	r3, [pc, #24]	; (8010344 <vTaskInternalSetTimeOutState+0x24>)
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010330:	4b05      	ldr	r3, [pc, #20]	; (8010348 <vTaskInternalSetTimeOutState+0x28>)
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	605a      	str	r2, [r3, #4]
}
 8010338:	bf00      	nop
 801033a:	370c      	adds	r7, #12
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr
 8010344:	200066a8 	.word	0x200066a8
 8010348:	20006694 	.word	0x20006694

0801034c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b088      	sub	sp, #32
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d10c      	bne.n	8010376 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 801035c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010360:	b672      	cpsid	i
 8010362:	f383 8811 	msr	BASEPRI, r3
 8010366:	f3bf 8f6f 	isb	sy
 801036a:	f3bf 8f4f 	dsb	sy
 801036e:	b662      	cpsie	i
 8010370:	613b      	str	r3, [r7, #16]
}
 8010372:	bf00      	nop
 8010374:	e7fe      	b.n	8010374 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d10c      	bne.n	8010396 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 801037c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010380:	b672      	cpsid	i
 8010382:	f383 8811 	msr	BASEPRI, r3
 8010386:	f3bf 8f6f 	isb	sy
 801038a:	f3bf 8f4f 	dsb	sy
 801038e:	b662      	cpsie	i
 8010390:	60fb      	str	r3, [r7, #12]
}
 8010392:	bf00      	nop
 8010394:	e7fe      	b.n	8010394 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8010396:	f000 fc71 	bl	8010c7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801039a:	4b1d      	ldr	r3, [pc, #116]	; (8010410 <xTaskCheckForTimeOut+0xc4>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	69ba      	ldr	r2, [r7, #24]
 80103a6:	1ad3      	subs	r3, r2, r3
 80103a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103b2:	d102      	bne.n	80103ba <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80103b4:	2300      	movs	r3, #0
 80103b6:	61fb      	str	r3, [r7, #28]
 80103b8:	e023      	b.n	8010402 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681a      	ldr	r2, [r3, #0]
 80103be:	4b15      	ldr	r3, [pc, #84]	; (8010414 <xTaskCheckForTimeOut+0xc8>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d007      	beq.n	80103d6 <xTaskCheckForTimeOut+0x8a>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	69ba      	ldr	r2, [r7, #24]
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d302      	bcc.n	80103d6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80103d0:	2301      	movs	r3, #1
 80103d2:	61fb      	str	r3, [r7, #28]
 80103d4:	e015      	b.n	8010402 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	697a      	ldr	r2, [r7, #20]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d20b      	bcs.n	80103f8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	681a      	ldr	r2, [r3, #0]
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	1ad2      	subs	r2, r2, r3
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f7ff ff97 	bl	8010320 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80103f2:	2300      	movs	r3, #0
 80103f4:	61fb      	str	r3, [r7, #28]
 80103f6:	e004      	b.n	8010402 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	2200      	movs	r2, #0
 80103fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80103fe:	2301      	movs	r3, #1
 8010400:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010402:	f000 fc6f 	bl	8010ce4 <vPortExitCritical>

	return xReturn;
 8010406:	69fb      	ldr	r3, [r7, #28]
}
 8010408:	4618      	mov	r0, r3
 801040a:	3720      	adds	r7, #32
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}
 8010410:	20006694 	.word	0x20006694
 8010414:	200066a8 	.word	0x200066a8

08010418 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010418:	b480      	push	{r7}
 801041a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801041c:	4b03      	ldr	r3, [pc, #12]	; (801042c <vTaskMissedYield+0x14>)
 801041e:	2201      	movs	r2, #1
 8010420:	601a      	str	r2, [r3, #0]
}
 8010422:	bf00      	nop
 8010424:	46bd      	mov	sp, r7
 8010426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042a:	4770      	bx	lr
 801042c:	200066a4 	.word	0x200066a4

08010430 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010438:	f000 f852 	bl	80104e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801043c:	4b06      	ldr	r3, [pc, #24]	; (8010458 <prvIdleTask+0x28>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	2b01      	cmp	r3, #1
 8010442:	d9f9      	bls.n	8010438 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010444:	4b05      	ldr	r3, [pc, #20]	; (801045c <prvIdleTask+0x2c>)
 8010446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801044a:	601a      	str	r2, [r3, #0]
 801044c:	f3bf 8f4f 	dsb	sy
 8010450:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010454:	e7f0      	b.n	8010438 <prvIdleTask+0x8>
 8010456:	bf00      	nop
 8010458:	20006594 	.word	0x20006594
 801045c:	e000ed04 	.word	0xe000ed04

08010460 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010466:	2300      	movs	r3, #0
 8010468:	607b      	str	r3, [r7, #4]
 801046a:	e00c      	b.n	8010486 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801046c:	687a      	ldr	r2, [r7, #4]
 801046e:	4613      	mov	r3, r2
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	4413      	add	r3, r2
 8010474:	009b      	lsls	r3, r3, #2
 8010476:	4a12      	ldr	r2, [pc, #72]	; (80104c0 <prvInitialiseTaskLists+0x60>)
 8010478:	4413      	add	r3, r2
 801047a:	4618      	mov	r0, r3
 801047c:	f7fe f8ab 	bl	800e5d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	3301      	adds	r3, #1
 8010484:	607b      	str	r3, [r7, #4]
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2b06      	cmp	r3, #6
 801048a:	d9ef      	bls.n	801046c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801048c:	480d      	ldr	r0, [pc, #52]	; (80104c4 <prvInitialiseTaskLists+0x64>)
 801048e:	f7fe f8a2 	bl	800e5d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010492:	480d      	ldr	r0, [pc, #52]	; (80104c8 <prvInitialiseTaskLists+0x68>)
 8010494:	f7fe f89f 	bl	800e5d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010498:	480c      	ldr	r0, [pc, #48]	; (80104cc <prvInitialiseTaskLists+0x6c>)
 801049a:	f7fe f89c 	bl	800e5d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801049e:	480c      	ldr	r0, [pc, #48]	; (80104d0 <prvInitialiseTaskLists+0x70>)
 80104a0:	f7fe f899 	bl	800e5d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80104a4:	480b      	ldr	r0, [pc, #44]	; (80104d4 <prvInitialiseTaskLists+0x74>)
 80104a6:	f7fe f896 	bl	800e5d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80104aa:	4b0b      	ldr	r3, [pc, #44]	; (80104d8 <prvInitialiseTaskLists+0x78>)
 80104ac:	4a05      	ldr	r2, [pc, #20]	; (80104c4 <prvInitialiseTaskLists+0x64>)
 80104ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80104b0:	4b0a      	ldr	r3, [pc, #40]	; (80104dc <prvInitialiseTaskLists+0x7c>)
 80104b2:	4a05      	ldr	r2, [pc, #20]	; (80104c8 <prvInitialiseTaskLists+0x68>)
 80104b4:	601a      	str	r2, [r3, #0]
}
 80104b6:	bf00      	nop
 80104b8:	3708      	adds	r7, #8
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop
 80104c0:	20006594 	.word	0x20006594
 80104c4:	20006620 	.word	0x20006620
 80104c8:	20006634 	.word	0x20006634
 80104cc:	20006650 	.word	0x20006650
 80104d0:	20006664 	.word	0x20006664
 80104d4:	2000667c 	.word	0x2000667c
 80104d8:	20006648 	.word	0x20006648
 80104dc:	2000664c 	.word	0x2000664c

080104e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b082      	sub	sp, #8
 80104e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80104e6:	e019      	b.n	801051c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80104e8:	f000 fbc8 	bl	8010c7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104ec:	4b10      	ldr	r3, [pc, #64]	; (8010530 <prvCheckTasksWaitingTermination+0x50>)
 80104ee:	68db      	ldr	r3, [r3, #12]
 80104f0:	68db      	ldr	r3, [r3, #12]
 80104f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	3304      	adds	r3, #4
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7fe f8f6 	bl	800e6ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 80104fe:	4b0d      	ldr	r3, [pc, #52]	; (8010534 <prvCheckTasksWaitingTermination+0x54>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	3b01      	subs	r3, #1
 8010504:	4a0b      	ldr	r2, [pc, #44]	; (8010534 <prvCheckTasksWaitingTermination+0x54>)
 8010506:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010508:	4b0b      	ldr	r3, [pc, #44]	; (8010538 <prvCheckTasksWaitingTermination+0x58>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	3b01      	subs	r3, #1
 801050e:	4a0a      	ldr	r2, [pc, #40]	; (8010538 <prvCheckTasksWaitingTermination+0x58>)
 8010510:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010512:	f000 fbe7 	bl	8010ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f000 f810 	bl	801053c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801051c:	4b06      	ldr	r3, [pc, #24]	; (8010538 <prvCheckTasksWaitingTermination+0x58>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d1e1      	bne.n	80104e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010524:	bf00      	nop
 8010526:	bf00      	nop
 8010528:	3708      	adds	r7, #8
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	20006664 	.word	0x20006664
 8010534:	20006690 	.word	0x20006690
 8010538:	20006678 	.word	0x20006678

0801053c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801053c:	b580      	push	{r7, lr}
 801053e:	b084      	sub	sp, #16
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	334c      	adds	r3, #76	; 0x4c
 8010548:	4618      	mov	r0, r3
 801054a:	f00f f88d 	bl	801f668 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8010554:	2b00      	cmp	r3, #0
 8010556:	d108      	bne.n	801056a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801055c:	4618      	mov	r0, r3
 801055e:	f7f0 fae0 	bl	8000b22 <vPortFree>
				vPortFree( pxTCB );
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f7f0 fadd 	bl	8000b22 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010568:	e01a      	b.n	80105a0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8010570:	2b01      	cmp	r3, #1
 8010572:	d103      	bne.n	801057c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f7f0 fad4 	bl	8000b22 <vPortFree>
	}
 801057a:	e011      	b.n	80105a0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8010582:	2b02      	cmp	r3, #2
 8010584:	d00c      	beq.n	80105a0 <prvDeleteTCB+0x64>
	__asm volatile
 8010586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801058a:	b672      	cpsid	i
 801058c:	f383 8811 	msr	BASEPRI, r3
 8010590:	f3bf 8f6f 	isb	sy
 8010594:	f3bf 8f4f 	dsb	sy
 8010598:	b662      	cpsie	i
 801059a:	60fb      	str	r3, [r7, #12]
}
 801059c:	bf00      	nop
 801059e:	e7fe      	b.n	801059e <prvDeleteTCB+0x62>
	}
 80105a0:	bf00      	nop
 80105a2:	3710      	adds	r7, #16
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80105ae:	4b0c      	ldr	r3, [pc, #48]	; (80105e0 <prvResetNextTaskUnblockTime+0x38>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d104      	bne.n	80105c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80105b8:	4b0a      	ldr	r3, [pc, #40]	; (80105e4 <prvResetNextTaskUnblockTime+0x3c>)
 80105ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80105be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80105c0:	e008      	b.n	80105d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105c2:	4b07      	ldr	r3, [pc, #28]	; (80105e0 <prvResetNextTaskUnblockTime+0x38>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	4a04      	ldr	r2, [pc, #16]	; (80105e4 <prvResetNextTaskUnblockTime+0x3c>)
 80105d2:	6013      	str	r3, [r2, #0]
}
 80105d4:	bf00      	nop
 80105d6:	370c      	adds	r7, #12
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr
 80105e0:	20006648 	.word	0x20006648
 80105e4:	200066b0 	.word	0x200066b0

080105e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80105e8:	b480      	push	{r7}
 80105ea:	b083      	sub	sp, #12
 80105ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80105ee:	4b0b      	ldr	r3, [pc, #44]	; (801061c <xTaskGetSchedulerState+0x34>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d102      	bne.n	80105fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80105f6:	2301      	movs	r3, #1
 80105f8:	607b      	str	r3, [r7, #4]
 80105fa:	e008      	b.n	801060e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105fc:	4b08      	ldr	r3, [pc, #32]	; (8010620 <xTaskGetSchedulerState+0x38>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d102      	bne.n	801060a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010604:	2302      	movs	r3, #2
 8010606:	607b      	str	r3, [r7, #4]
 8010608:	e001      	b.n	801060e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801060a:	2300      	movs	r3, #0
 801060c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801060e:	687b      	ldr	r3, [r7, #4]
	}
 8010610:	4618      	mov	r0, r3
 8010612:	370c      	adds	r7, #12
 8010614:	46bd      	mov	sp, r7
 8010616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061a:	4770      	bx	lr
 801061c:	2000669c 	.word	0x2000669c
 8010620:	200066b8 	.word	0x200066b8

08010624 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010630:	2300      	movs	r3, #0
 8010632:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d069      	beq.n	801070e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801063e:	4b36      	ldr	r3, [pc, #216]	; (8010718 <xTaskPriorityInherit+0xf4>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010644:	429a      	cmp	r2, r3
 8010646:	d259      	bcs.n	80106fc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	699b      	ldr	r3, [r3, #24]
 801064c:	2b00      	cmp	r3, #0
 801064e:	db06      	blt.n	801065e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010650:	4b31      	ldr	r3, [pc, #196]	; (8010718 <xTaskPriorityInherit+0xf4>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010656:	f1c3 0207 	rsb	r2, r3, #7
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	6959      	ldr	r1, [r3, #20]
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010666:	4613      	mov	r3, r2
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	4413      	add	r3, r2
 801066c:	009b      	lsls	r3, r3, #2
 801066e:	4a2b      	ldr	r2, [pc, #172]	; (801071c <xTaskPriorityInherit+0xf8>)
 8010670:	4413      	add	r3, r2
 8010672:	4299      	cmp	r1, r3
 8010674:	d13a      	bne.n	80106ec <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	3304      	adds	r3, #4
 801067a:	4618      	mov	r0, r3
 801067c:	f7fe f835 	bl	800e6ea <uxListRemove>
 8010680:	4603      	mov	r3, r0
 8010682:	2b00      	cmp	r3, #0
 8010684:	d115      	bne.n	80106b2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801068a:	4924      	ldr	r1, [pc, #144]	; (801071c <xTaskPriorityInherit+0xf8>)
 801068c:	4613      	mov	r3, r2
 801068e:	009b      	lsls	r3, r3, #2
 8010690:	4413      	add	r3, r2
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	440b      	add	r3, r1
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d10a      	bne.n	80106b2 <xTaskPriorityInherit+0x8e>
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106a0:	2201      	movs	r2, #1
 80106a2:	fa02 f303 	lsl.w	r3, r2, r3
 80106a6:	43da      	mvns	r2, r3
 80106a8:	4b1d      	ldr	r3, [pc, #116]	; (8010720 <xTaskPriorityInherit+0xfc>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	4013      	ands	r3, r2
 80106ae:	4a1c      	ldr	r2, [pc, #112]	; (8010720 <xTaskPriorityInherit+0xfc>)
 80106b0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80106b2:	4b19      	ldr	r3, [pc, #100]	; (8010718 <xTaskPriorityInherit+0xf4>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106c0:	2201      	movs	r2, #1
 80106c2:	409a      	lsls	r2, r3
 80106c4:	4b16      	ldr	r3, [pc, #88]	; (8010720 <xTaskPriorityInherit+0xfc>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	4313      	orrs	r3, r2
 80106ca:	4a15      	ldr	r2, [pc, #84]	; (8010720 <xTaskPriorityInherit+0xfc>)
 80106cc:	6013      	str	r3, [r2, #0]
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106d2:	4613      	mov	r3, r2
 80106d4:	009b      	lsls	r3, r3, #2
 80106d6:	4413      	add	r3, r2
 80106d8:	009b      	lsls	r3, r3, #2
 80106da:	4a10      	ldr	r2, [pc, #64]	; (801071c <xTaskPriorityInherit+0xf8>)
 80106dc:	441a      	add	r2, r3
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	3304      	adds	r3, #4
 80106e2:	4619      	mov	r1, r3
 80106e4:	4610      	mov	r0, r2
 80106e6:	f7fd ffa3 	bl	800e630 <vListInsertEnd>
 80106ea:	e004      	b.n	80106f6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80106ec:	4b0a      	ldr	r3, [pc, #40]	; (8010718 <xTaskPriorityInherit+0xf4>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80106f6:	2301      	movs	r3, #1
 80106f8:	60fb      	str	r3, [r7, #12]
 80106fa:	e008      	b.n	801070e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010700:	4b05      	ldr	r3, [pc, #20]	; (8010718 <xTaskPriorityInherit+0xf4>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010706:	429a      	cmp	r2, r3
 8010708:	d201      	bcs.n	801070e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801070a:	2301      	movs	r3, #1
 801070c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801070e:	68fb      	ldr	r3, [r7, #12]
	}
 8010710:	4618      	mov	r0, r3
 8010712:	3710      	adds	r7, #16
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}
 8010718:	20006590 	.word	0x20006590
 801071c:	20006594 	.word	0x20006594
 8010720:	20006698 	.word	0x20006698

08010724 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010724:	b580      	push	{r7, lr}
 8010726:	b086      	sub	sp, #24
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010730:	2300      	movs	r3, #0
 8010732:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d072      	beq.n	8010820 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801073a:	4b3c      	ldr	r3, [pc, #240]	; (801082c <xTaskPriorityDisinherit+0x108>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	693a      	ldr	r2, [r7, #16]
 8010740:	429a      	cmp	r2, r3
 8010742:	d00c      	beq.n	801075e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8010744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010748:	b672      	cpsid	i
 801074a:	f383 8811 	msr	BASEPRI, r3
 801074e:	f3bf 8f6f 	isb	sy
 8010752:	f3bf 8f4f 	dsb	sy
 8010756:	b662      	cpsie	i
 8010758:	60fb      	str	r3, [r7, #12]
}
 801075a:	bf00      	nop
 801075c:	e7fe      	b.n	801075c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801075e:	693b      	ldr	r3, [r7, #16]
 8010760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010762:	2b00      	cmp	r3, #0
 8010764:	d10c      	bne.n	8010780 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8010766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801076a:	b672      	cpsid	i
 801076c:	f383 8811 	msr	BASEPRI, r3
 8010770:	f3bf 8f6f 	isb	sy
 8010774:	f3bf 8f4f 	dsb	sy
 8010778:	b662      	cpsie	i
 801077a:	60bb      	str	r3, [r7, #8]
}
 801077c:	bf00      	nop
 801077e:	e7fe      	b.n	801077e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010784:	1e5a      	subs	r2, r3, #1
 8010786:	693b      	ldr	r3, [r7, #16]
 8010788:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010792:	429a      	cmp	r2, r3
 8010794:	d044      	beq.n	8010820 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801079a:	2b00      	cmp	r3, #0
 801079c:	d140      	bne.n	8010820 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801079e:	693b      	ldr	r3, [r7, #16]
 80107a0:	3304      	adds	r3, #4
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7fd ffa1 	bl	800e6ea <uxListRemove>
 80107a8:	4603      	mov	r3, r0
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d115      	bne.n	80107da <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107b2:	491f      	ldr	r1, [pc, #124]	; (8010830 <xTaskPriorityDisinherit+0x10c>)
 80107b4:	4613      	mov	r3, r2
 80107b6:	009b      	lsls	r3, r3, #2
 80107b8:	4413      	add	r3, r2
 80107ba:	009b      	lsls	r3, r3, #2
 80107bc:	440b      	add	r3, r1
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d10a      	bne.n	80107da <xTaskPriorityDisinherit+0xb6>
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107c8:	2201      	movs	r2, #1
 80107ca:	fa02 f303 	lsl.w	r3, r2, r3
 80107ce:	43da      	mvns	r2, r3
 80107d0:	4b18      	ldr	r3, [pc, #96]	; (8010834 <xTaskPriorityDisinherit+0x110>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	4013      	ands	r3, r2
 80107d6:	4a17      	ldr	r2, [pc, #92]	; (8010834 <xTaskPriorityDisinherit+0x110>)
 80107d8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107e6:	f1c3 0207 	rsb	r2, r3, #7
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f2:	2201      	movs	r2, #1
 80107f4:	409a      	lsls	r2, r3
 80107f6:	4b0f      	ldr	r3, [pc, #60]	; (8010834 <xTaskPriorityDisinherit+0x110>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	4313      	orrs	r3, r2
 80107fc:	4a0d      	ldr	r2, [pc, #52]	; (8010834 <xTaskPriorityDisinherit+0x110>)
 80107fe:	6013      	str	r3, [r2, #0]
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010804:	4613      	mov	r3, r2
 8010806:	009b      	lsls	r3, r3, #2
 8010808:	4413      	add	r3, r2
 801080a:	009b      	lsls	r3, r3, #2
 801080c:	4a08      	ldr	r2, [pc, #32]	; (8010830 <xTaskPriorityDisinherit+0x10c>)
 801080e:	441a      	add	r2, r3
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	3304      	adds	r3, #4
 8010814:	4619      	mov	r1, r3
 8010816:	4610      	mov	r0, r2
 8010818:	f7fd ff0a 	bl	800e630 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801081c:	2301      	movs	r3, #1
 801081e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010820:	697b      	ldr	r3, [r7, #20]
	}
 8010822:	4618      	mov	r0, r3
 8010824:	3718      	adds	r7, #24
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
 801082a:	bf00      	nop
 801082c:	20006590 	.word	0x20006590
 8010830:	20006594 	.word	0x20006594
 8010834:	20006698 	.word	0x20006698

08010838 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010838:	b580      	push	{r7, lr}
 801083a:	b088      	sub	sp, #32
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010846:	2301      	movs	r3, #1
 8010848:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2b00      	cmp	r3, #0
 801084e:	f000 8087 	beq.w	8010960 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010856:	2b00      	cmp	r3, #0
 8010858:	d10c      	bne.n	8010874 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 801085a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801085e:	b672      	cpsid	i
 8010860:	f383 8811 	msr	BASEPRI, r3
 8010864:	f3bf 8f6f 	isb	sy
 8010868:	f3bf 8f4f 	dsb	sy
 801086c:	b662      	cpsie	i
 801086e:	60fb      	str	r3, [r7, #12]
}
 8010870:	bf00      	nop
 8010872:	e7fe      	b.n	8010872 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010874:	69bb      	ldr	r3, [r7, #24]
 8010876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010878:	683a      	ldr	r2, [r7, #0]
 801087a:	429a      	cmp	r2, r3
 801087c:	d902      	bls.n	8010884 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	61fb      	str	r3, [r7, #28]
 8010882:	e002      	b.n	801088a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010884:	69bb      	ldr	r3, [r7, #24]
 8010886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010888:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801088a:	69bb      	ldr	r3, [r7, #24]
 801088c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801088e:	69fa      	ldr	r2, [r7, #28]
 8010890:	429a      	cmp	r2, r3
 8010892:	d065      	beq.n	8010960 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010898:	697a      	ldr	r2, [r7, #20]
 801089a:	429a      	cmp	r2, r3
 801089c:	d160      	bne.n	8010960 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801089e:	4b32      	ldr	r3, [pc, #200]	; (8010968 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	69ba      	ldr	r2, [r7, #24]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d10c      	bne.n	80108c2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 80108a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ac:	b672      	cpsid	i
 80108ae:	f383 8811 	msr	BASEPRI, r3
 80108b2:	f3bf 8f6f 	isb	sy
 80108b6:	f3bf 8f4f 	dsb	sy
 80108ba:	b662      	cpsie	i
 80108bc:	60bb      	str	r3, [r7, #8]
}
 80108be:	bf00      	nop
 80108c0:	e7fe      	b.n	80108c0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80108c2:	69bb      	ldr	r3, [r7, #24]
 80108c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108c6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80108c8:	69bb      	ldr	r3, [r7, #24]
 80108ca:	69fa      	ldr	r2, [r7, #28]
 80108cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80108ce:	69bb      	ldr	r3, [r7, #24]
 80108d0:	699b      	ldr	r3, [r3, #24]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	db04      	blt.n	80108e0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108d6:	69fb      	ldr	r3, [r7, #28]
 80108d8:	f1c3 0207 	rsb	r2, r3, #7
 80108dc:	69bb      	ldr	r3, [r7, #24]
 80108de:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80108e0:	69bb      	ldr	r3, [r7, #24]
 80108e2:	6959      	ldr	r1, [r3, #20]
 80108e4:	693a      	ldr	r2, [r7, #16]
 80108e6:	4613      	mov	r3, r2
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	4413      	add	r3, r2
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	4a1f      	ldr	r2, [pc, #124]	; (801096c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80108f0:	4413      	add	r3, r2
 80108f2:	4299      	cmp	r1, r3
 80108f4:	d134      	bne.n	8010960 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80108f6:	69bb      	ldr	r3, [r7, #24]
 80108f8:	3304      	adds	r3, #4
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7fd fef5 	bl	800e6ea <uxListRemove>
 8010900:	4603      	mov	r3, r0
 8010902:	2b00      	cmp	r3, #0
 8010904:	d115      	bne.n	8010932 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010906:	69bb      	ldr	r3, [r7, #24]
 8010908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801090a:	4918      	ldr	r1, [pc, #96]	; (801096c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801090c:	4613      	mov	r3, r2
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	4413      	add	r3, r2
 8010912:	009b      	lsls	r3, r3, #2
 8010914:	440b      	add	r3, r1
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d10a      	bne.n	8010932 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010920:	2201      	movs	r2, #1
 8010922:	fa02 f303 	lsl.w	r3, r2, r3
 8010926:	43da      	mvns	r2, r3
 8010928:	4b11      	ldr	r3, [pc, #68]	; (8010970 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4013      	ands	r3, r2
 801092e:	4a10      	ldr	r2, [pc, #64]	; (8010970 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010930:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010936:	2201      	movs	r2, #1
 8010938:	409a      	lsls	r2, r3
 801093a:	4b0d      	ldr	r3, [pc, #52]	; (8010970 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	4313      	orrs	r3, r2
 8010940:	4a0b      	ldr	r2, [pc, #44]	; (8010970 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010942:	6013      	str	r3, [r2, #0]
 8010944:	69bb      	ldr	r3, [r7, #24]
 8010946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010948:	4613      	mov	r3, r2
 801094a:	009b      	lsls	r3, r3, #2
 801094c:	4413      	add	r3, r2
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	4a06      	ldr	r2, [pc, #24]	; (801096c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010952:	441a      	add	r2, r3
 8010954:	69bb      	ldr	r3, [r7, #24]
 8010956:	3304      	adds	r3, #4
 8010958:	4619      	mov	r1, r3
 801095a:	4610      	mov	r0, r2
 801095c:	f7fd fe68 	bl	800e630 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010960:	bf00      	nop
 8010962:	3720      	adds	r7, #32
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	20006590 	.word	0x20006590
 801096c:	20006594 	.word	0x20006594
 8010970:	20006698 	.word	0x20006698

08010974 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010974:	b480      	push	{r7}
 8010976:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010978:	4b07      	ldr	r3, [pc, #28]	; (8010998 <pvTaskIncrementMutexHeldCount+0x24>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d004      	beq.n	801098a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010980:	4b05      	ldr	r3, [pc, #20]	; (8010998 <pvTaskIncrementMutexHeldCount+0x24>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010986:	3201      	adds	r2, #1
 8010988:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801098a:	4b03      	ldr	r3, [pc, #12]	; (8010998 <pvTaskIncrementMutexHeldCount+0x24>)
 801098c:	681b      	ldr	r3, [r3, #0]
	}
 801098e:	4618      	mov	r0, r3
 8010990:	46bd      	mov	sp, r7
 8010992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010996:	4770      	bx	lr
 8010998:	20006590 	.word	0x20006590

0801099c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b084      	sub	sp, #16
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80109a6:	4b29      	ldr	r3, [pc, #164]	; (8010a4c <prvAddCurrentTaskToDelayedList+0xb0>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109ac:	4b28      	ldr	r3, [pc, #160]	; (8010a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	3304      	adds	r3, #4
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7fd fe99 	bl	800e6ea <uxListRemove>
 80109b8:	4603      	mov	r3, r0
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d10b      	bne.n	80109d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80109be:	4b24      	ldr	r3, [pc, #144]	; (8010a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109c4:	2201      	movs	r2, #1
 80109c6:	fa02 f303 	lsl.w	r3, r2, r3
 80109ca:	43da      	mvns	r2, r3
 80109cc:	4b21      	ldr	r3, [pc, #132]	; (8010a54 <prvAddCurrentTaskToDelayedList+0xb8>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4013      	ands	r3, r2
 80109d2:	4a20      	ldr	r2, [pc, #128]	; (8010a54 <prvAddCurrentTaskToDelayedList+0xb8>)
 80109d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80109dc:	d10a      	bne.n	80109f4 <prvAddCurrentTaskToDelayedList+0x58>
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d007      	beq.n	80109f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80109e4:	4b1a      	ldr	r3, [pc, #104]	; (8010a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	3304      	adds	r3, #4
 80109ea:	4619      	mov	r1, r3
 80109ec:	481a      	ldr	r0, [pc, #104]	; (8010a58 <prvAddCurrentTaskToDelayedList+0xbc>)
 80109ee:	f7fd fe1f 	bl	800e630 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80109f2:	e026      	b.n	8010a42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80109f4:	68fa      	ldr	r2, [r7, #12]
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	4413      	add	r3, r2
 80109fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80109fc:	4b14      	ldr	r3, [pc, #80]	; (8010a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	68ba      	ldr	r2, [r7, #8]
 8010a02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010a04:	68ba      	ldr	r2, [r7, #8]
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d209      	bcs.n	8010a20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a0c:	4b13      	ldr	r3, [pc, #76]	; (8010a5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	4b0f      	ldr	r3, [pc, #60]	; (8010a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	3304      	adds	r3, #4
 8010a16:	4619      	mov	r1, r3
 8010a18:	4610      	mov	r0, r2
 8010a1a:	f7fd fe2d 	bl	800e678 <vListInsert>
}
 8010a1e:	e010      	b.n	8010a42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a20:	4b0f      	ldr	r3, [pc, #60]	; (8010a60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010a22:	681a      	ldr	r2, [r3, #0]
 8010a24:	4b0a      	ldr	r3, [pc, #40]	; (8010a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	3304      	adds	r3, #4
 8010a2a:	4619      	mov	r1, r3
 8010a2c:	4610      	mov	r0, r2
 8010a2e:	f7fd fe23 	bl	800e678 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010a32:	4b0c      	ldr	r3, [pc, #48]	; (8010a64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	68ba      	ldr	r2, [r7, #8]
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d202      	bcs.n	8010a42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010a3c:	4a09      	ldr	r2, [pc, #36]	; (8010a64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	6013      	str	r3, [r2, #0]
}
 8010a42:	bf00      	nop
 8010a44:	3710      	adds	r7, #16
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	20006694 	.word	0x20006694
 8010a50:	20006590 	.word	0x20006590
 8010a54:	20006698 	.word	0x20006698
 8010a58:	2000667c 	.word	0x2000667c
 8010a5c:	2000664c 	.word	0x2000664c
 8010a60:	20006648 	.word	0x20006648
 8010a64:	200066b0 	.word	0x200066b0

08010a68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	60f8      	str	r0, [r7, #12]
 8010a70:	60b9      	str	r1, [r7, #8]
 8010a72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	3b04      	subs	r3, #4
 8010a78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	3b04      	subs	r3, #4
 8010a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	f023 0201 	bic.w	r2, r3, #1
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	3b04      	subs	r3, #4
 8010a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010a98:	4a0c      	ldr	r2, [pc, #48]	; (8010acc <pxPortInitialiseStack+0x64>)
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	3b14      	subs	r3, #20
 8010aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010aa4:	687a      	ldr	r2, [r7, #4]
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	3b04      	subs	r3, #4
 8010aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	f06f 0202 	mvn.w	r2, #2
 8010ab6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	3b20      	subs	r3, #32
 8010abc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010abe:	68fb      	ldr	r3, [r7, #12]
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3714      	adds	r7, #20
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr
 8010acc:	08010ad1 	.word	0x08010ad1

08010ad0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b085      	sub	sp, #20
 8010ad4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010ada:	4b14      	ldr	r3, [pc, #80]	; (8010b2c <prvTaskExitError+0x5c>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ae2:	d00c      	beq.n	8010afe <prvTaskExitError+0x2e>
	__asm volatile
 8010ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae8:	b672      	cpsid	i
 8010aea:	f383 8811 	msr	BASEPRI, r3
 8010aee:	f3bf 8f6f 	isb	sy
 8010af2:	f3bf 8f4f 	dsb	sy
 8010af6:	b662      	cpsie	i
 8010af8:	60fb      	str	r3, [r7, #12]
}
 8010afa:	bf00      	nop
 8010afc:	e7fe      	b.n	8010afc <prvTaskExitError+0x2c>
	__asm volatile
 8010afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b02:	b672      	cpsid	i
 8010b04:	f383 8811 	msr	BASEPRI, r3
 8010b08:	f3bf 8f6f 	isb	sy
 8010b0c:	f3bf 8f4f 	dsb	sy
 8010b10:	b662      	cpsie	i
 8010b12:	60bb      	str	r3, [r7, #8]
}
 8010b14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010b16:	bf00      	nop
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d0fc      	beq.n	8010b18 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010b1e:	bf00      	nop
 8010b20:	bf00      	nop
 8010b22:	3714      	adds	r7, #20
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr
 8010b2c:	20000024 	.word	0x20000024

08010b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010b30:	4b07      	ldr	r3, [pc, #28]	; (8010b50 <pxCurrentTCBConst2>)
 8010b32:	6819      	ldr	r1, [r3, #0]
 8010b34:	6808      	ldr	r0, [r1, #0]
 8010b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b3a:	f380 8809 	msr	PSP, r0
 8010b3e:	f3bf 8f6f 	isb	sy
 8010b42:	f04f 0000 	mov.w	r0, #0
 8010b46:	f380 8811 	msr	BASEPRI, r0
 8010b4a:	4770      	bx	lr
 8010b4c:	f3af 8000 	nop.w

08010b50 <pxCurrentTCBConst2>:
 8010b50:	20006590 	.word	0x20006590
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010b54:	bf00      	nop
 8010b56:	bf00      	nop

08010b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010b58:	4808      	ldr	r0, [pc, #32]	; (8010b7c <prvPortStartFirstTask+0x24>)
 8010b5a:	6800      	ldr	r0, [r0, #0]
 8010b5c:	6800      	ldr	r0, [r0, #0]
 8010b5e:	f380 8808 	msr	MSP, r0
 8010b62:	f04f 0000 	mov.w	r0, #0
 8010b66:	f380 8814 	msr	CONTROL, r0
 8010b6a:	b662      	cpsie	i
 8010b6c:	b661      	cpsie	f
 8010b6e:	f3bf 8f4f 	dsb	sy
 8010b72:	f3bf 8f6f 	isb	sy
 8010b76:	df00      	svc	0
 8010b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010b7a:	bf00      	nop
 8010b7c:	e000ed08 	.word	0xe000ed08

08010b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b084      	sub	sp, #16
 8010b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010b86:	4b37      	ldr	r3, [pc, #220]	; (8010c64 <xPortStartScheduler+0xe4>)
 8010b88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	b2db      	uxtb	r3, r3
 8010b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	22ff      	movs	r2, #255	; 0xff
 8010b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	b2db      	uxtb	r3, r3
 8010b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ba0:	78fb      	ldrb	r3, [r7, #3]
 8010ba2:	b2db      	uxtb	r3, r3
 8010ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ba8:	b2da      	uxtb	r2, r3
 8010baa:	4b2f      	ldr	r3, [pc, #188]	; (8010c68 <xPortStartScheduler+0xe8>)
 8010bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010bae:	4b2f      	ldr	r3, [pc, #188]	; (8010c6c <xPortStartScheduler+0xec>)
 8010bb0:	2207      	movs	r2, #7
 8010bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010bb4:	e009      	b.n	8010bca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010bb6:	4b2d      	ldr	r3, [pc, #180]	; (8010c6c <xPortStartScheduler+0xec>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	3b01      	subs	r3, #1
 8010bbc:	4a2b      	ldr	r2, [pc, #172]	; (8010c6c <xPortStartScheduler+0xec>)
 8010bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010bc0:	78fb      	ldrb	r3, [r7, #3]
 8010bc2:	b2db      	uxtb	r3, r3
 8010bc4:	005b      	lsls	r3, r3, #1
 8010bc6:	b2db      	uxtb	r3, r3
 8010bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010bca:	78fb      	ldrb	r3, [r7, #3]
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bd2:	2b80      	cmp	r3, #128	; 0x80
 8010bd4:	d0ef      	beq.n	8010bb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010bd6:	4b25      	ldr	r3, [pc, #148]	; (8010c6c <xPortStartScheduler+0xec>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f1c3 0307 	rsb	r3, r3, #7
 8010bde:	2b04      	cmp	r3, #4
 8010be0:	d00c      	beq.n	8010bfc <xPortStartScheduler+0x7c>
	__asm volatile
 8010be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010be6:	b672      	cpsid	i
 8010be8:	f383 8811 	msr	BASEPRI, r3
 8010bec:	f3bf 8f6f 	isb	sy
 8010bf0:	f3bf 8f4f 	dsb	sy
 8010bf4:	b662      	cpsie	i
 8010bf6:	60bb      	str	r3, [r7, #8]
}
 8010bf8:	bf00      	nop
 8010bfa:	e7fe      	b.n	8010bfa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010bfc:	4b1b      	ldr	r3, [pc, #108]	; (8010c6c <xPortStartScheduler+0xec>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	021b      	lsls	r3, r3, #8
 8010c02:	4a1a      	ldr	r2, [pc, #104]	; (8010c6c <xPortStartScheduler+0xec>)
 8010c04:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010c06:	4b19      	ldr	r3, [pc, #100]	; (8010c6c <xPortStartScheduler+0xec>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010c0e:	4a17      	ldr	r2, [pc, #92]	; (8010c6c <xPortStartScheduler+0xec>)
 8010c10:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	b2da      	uxtb	r2, r3
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010c1a:	4b15      	ldr	r3, [pc, #84]	; (8010c70 <xPortStartScheduler+0xf0>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	4a14      	ldr	r2, [pc, #80]	; (8010c70 <xPortStartScheduler+0xf0>)
 8010c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010c24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010c26:	4b12      	ldr	r3, [pc, #72]	; (8010c70 <xPortStartScheduler+0xf0>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	4a11      	ldr	r2, [pc, #68]	; (8010c70 <xPortStartScheduler+0xf0>)
 8010c2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010c30:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010c32:	f000 f8dd 	bl	8010df0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010c36:	4b0f      	ldr	r3, [pc, #60]	; (8010c74 <xPortStartScheduler+0xf4>)
 8010c38:	2200      	movs	r2, #0
 8010c3a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010c3c:	f000 f8fc 	bl	8010e38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010c40:	4b0d      	ldr	r3, [pc, #52]	; (8010c78 <xPortStartScheduler+0xf8>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	4a0c      	ldr	r2, [pc, #48]	; (8010c78 <xPortStartScheduler+0xf8>)
 8010c46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010c4a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010c4c:	f7ff ff84 	bl	8010b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010c50:	f7ff fa78 	bl	8010144 <vTaskSwitchContext>
	prvTaskExitError();
 8010c54:	f7ff ff3c 	bl	8010ad0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010c58:	2300      	movs	r3, #0
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3710      	adds	r7, #16
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	e000e400 	.word	0xe000e400
 8010c68:	200066bc 	.word	0x200066bc
 8010c6c:	200066c0 	.word	0x200066c0
 8010c70:	e000ed20 	.word	0xe000ed20
 8010c74:	20000024 	.word	0x20000024
 8010c78:	e000ef34 	.word	0xe000ef34

08010c7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	af00      	add	r7, sp, #0
	__asm volatile
 8010c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c86:	b672      	cpsid	i
 8010c88:	f383 8811 	msr	BASEPRI, r3
 8010c8c:	f3bf 8f6f 	isb	sy
 8010c90:	f3bf 8f4f 	dsb	sy
 8010c94:	b662      	cpsie	i
 8010c96:	607b      	str	r3, [r7, #4]
}
 8010c98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010c9a:	4b10      	ldr	r3, [pc, #64]	; (8010cdc <vPortEnterCritical+0x60>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	3301      	adds	r3, #1
 8010ca0:	4a0e      	ldr	r2, [pc, #56]	; (8010cdc <vPortEnterCritical+0x60>)
 8010ca2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010ca4:	4b0d      	ldr	r3, [pc, #52]	; (8010cdc <vPortEnterCritical+0x60>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	d111      	bne.n	8010cd0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010cac:	4b0c      	ldr	r3, [pc, #48]	; (8010ce0 <vPortEnterCritical+0x64>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d00c      	beq.n	8010cd0 <vPortEnterCritical+0x54>
	__asm volatile
 8010cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cba:	b672      	cpsid	i
 8010cbc:	f383 8811 	msr	BASEPRI, r3
 8010cc0:	f3bf 8f6f 	isb	sy
 8010cc4:	f3bf 8f4f 	dsb	sy
 8010cc8:	b662      	cpsie	i
 8010cca:	603b      	str	r3, [r7, #0]
}
 8010ccc:	bf00      	nop
 8010cce:	e7fe      	b.n	8010cce <vPortEnterCritical+0x52>
	}
}
 8010cd0:	bf00      	nop
 8010cd2:	370c      	adds	r7, #12
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr
 8010cdc:	20000024 	.word	0x20000024
 8010ce0:	e000ed04 	.word	0xe000ed04

08010ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b083      	sub	sp, #12
 8010ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010cea:	4b13      	ldr	r3, [pc, #76]	; (8010d38 <vPortExitCritical+0x54>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d10c      	bne.n	8010d0c <vPortExitCritical+0x28>
	__asm volatile
 8010cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf6:	b672      	cpsid	i
 8010cf8:	f383 8811 	msr	BASEPRI, r3
 8010cfc:	f3bf 8f6f 	isb	sy
 8010d00:	f3bf 8f4f 	dsb	sy
 8010d04:	b662      	cpsie	i
 8010d06:	607b      	str	r3, [r7, #4]
}
 8010d08:	bf00      	nop
 8010d0a:	e7fe      	b.n	8010d0a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010d0c:	4b0a      	ldr	r3, [pc, #40]	; (8010d38 <vPortExitCritical+0x54>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	3b01      	subs	r3, #1
 8010d12:	4a09      	ldr	r2, [pc, #36]	; (8010d38 <vPortExitCritical+0x54>)
 8010d14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010d16:	4b08      	ldr	r3, [pc, #32]	; (8010d38 <vPortExitCritical+0x54>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d105      	bne.n	8010d2a <vPortExitCritical+0x46>
 8010d1e:	2300      	movs	r3, #0
 8010d20:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	f383 8811 	msr	BASEPRI, r3
}
 8010d28:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010d2a:	bf00      	nop
 8010d2c:	370c      	adds	r7, #12
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d34:	4770      	bx	lr
 8010d36:	bf00      	nop
 8010d38:	20000024 	.word	0x20000024
 8010d3c:	00000000 	.word	0x00000000

08010d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010d40:	f3ef 8009 	mrs	r0, PSP
 8010d44:	f3bf 8f6f 	isb	sy
 8010d48:	4b15      	ldr	r3, [pc, #84]	; (8010da0 <pxCurrentTCBConst>)
 8010d4a:	681a      	ldr	r2, [r3, #0]
 8010d4c:	f01e 0f10 	tst.w	lr, #16
 8010d50:	bf08      	it	eq
 8010d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d5a:	6010      	str	r0, [r2, #0]
 8010d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010d64:	b672      	cpsid	i
 8010d66:	f380 8811 	msr	BASEPRI, r0
 8010d6a:	f3bf 8f4f 	dsb	sy
 8010d6e:	f3bf 8f6f 	isb	sy
 8010d72:	b662      	cpsie	i
 8010d74:	f7ff f9e6 	bl	8010144 <vTaskSwitchContext>
 8010d78:	f04f 0000 	mov.w	r0, #0
 8010d7c:	f380 8811 	msr	BASEPRI, r0
 8010d80:	bc09      	pop	{r0, r3}
 8010d82:	6819      	ldr	r1, [r3, #0]
 8010d84:	6808      	ldr	r0, [r1, #0]
 8010d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d8a:	f01e 0f10 	tst.w	lr, #16
 8010d8e:	bf08      	it	eq
 8010d90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010d94:	f380 8809 	msr	PSP, r0
 8010d98:	f3bf 8f6f 	isb	sy
 8010d9c:	4770      	bx	lr
 8010d9e:	bf00      	nop

08010da0 <pxCurrentTCBConst>:
 8010da0:	20006590 	.word	0x20006590
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010da4:	bf00      	nop
 8010da6:	bf00      	nop

08010da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
	__asm volatile
 8010dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db2:	b672      	cpsid	i
 8010db4:	f383 8811 	msr	BASEPRI, r3
 8010db8:	f3bf 8f6f 	isb	sy
 8010dbc:	f3bf 8f4f 	dsb	sy
 8010dc0:	b662      	cpsie	i
 8010dc2:	607b      	str	r3, [r7, #4]
}
 8010dc4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010dc6:	f7ff f903 	bl	800ffd0 <xTaskIncrementTick>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d003      	beq.n	8010dd8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010dd0:	4b06      	ldr	r3, [pc, #24]	; (8010dec <SysTick_Handler+0x44>)
 8010dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dd6:	601a      	str	r2, [r3, #0]
 8010dd8:	2300      	movs	r3, #0
 8010dda:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	f383 8811 	msr	BASEPRI, r3
}
 8010de2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010de4:	bf00      	nop
 8010de6:	3708      	adds	r7, #8
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	e000ed04 	.word	0xe000ed04

08010df0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010df0:	b480      	push	{r7}
 8010df2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010df4:	4b0b      	ldr	r3, [pc, #44]	; (8010e24 <vPortSetupTimerInterrupt+0x34>)
 8010df6:	2200      	movs	r2, #0
 8010df8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010dfa:	4b0b      	ldr	r3, [pc, #44]	; (8010e28 <vPortSetupTimerInterrupt+0x38>)
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e00:	4b0a      	ldr	r3, [pc, #40]	; (8010e2c <vPortSetupTimerInterrupt+0x3c>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	4a0a      	ldr	r2, [pc, #40]	; (8010e30 <vPortSetupTimerInterrupt+0x40>)
 8010e06:	fba2 2303 	umull	r2, r3, r2, r3
 8010e0a:	099b      	lsrs	r3, r3, #6
 8010e0c:	4a09      	ldr	r2, [pc, #36]	; (8010e34 <vPortSetupTimerInterrupt+0x44>)
 8010e0e:	3b01      	subs	r3, #1
 8010e10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010e12:	4b04      	ldr	r3, [pc, #16]	; (8010e24 <vPortSetupTimerInterrupt+0x34>)
 8010e14:	2207      	movs	r2, #7
 8010e16:	601a      	str	r2, [r3, #0]
}
 8010e18:	bf00      	nop
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e20:	4770      	bx	lr
 8010e22:	bf00      	nop
 8010e24:	e000e010 	.word	0xe000e010
 8010e28:	e000e018 	.word	0xe000e018
 8010e2c:	20000004 	.word	0x20000004
 8010e30:	10624dd3 	.word	0x10624dd3
 8010e34:	e000e014 	.word	0xe000e014

08010e38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010e38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010e48 <vPortEnableVFP+0x10>
 8010e3c:	6801      	ldr	r1, [r0, #0]
 8010e3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010e42:	6001      	str	r1, [r0, #0]
 8010e44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010e46:	bf00      	nop
 8010e48:	e000ed88 	.word	0xe000ed88

08010e4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010e4c:	b480      	push	{r7}
 8010e4e:	b085      	sub	sp, #20
 8010e50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010e52:	f3ef 8305 	mrs	r3, IPSR
 8010e56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	2b0f      	cmp	r3, #15
 8010e5c:	d916      	bls.n	8010e8c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010e5e:	4a19      	ldr	r2, [pc, #100]	; (8010ec4 <vPortValidateInterruptPriority+0x78>)
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	4413      	add	r3, r2
 8010e64:	781b      	ldrb	r3, [r3, #0]
 8010e66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010e68:	4b17      	ldr	r3, [pc, #92]	; (8010ec8 <vPortValidateInterruptPriority+0x7c>)
 8010e6a:	781b      	ldrb	r3, [r3, #0]
 8010e6c:	7afa      	ldrb	r2, [r7, #11]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d20c      	bcs.n	8010e8c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e76:	b672      	cpsid	i
 8010e78:	f383 8811 	msr	BASEPRI, r3
 8010e7c:	f3bf 8f6f 	isb	sy
 8010e80:	f3bf 8f4f 	dsb	sy
 8010e84:	b662      	cpsie	i
 8010e86:	607b      	str	r3, [r7, #4]
}
 8010e88:	bf00      	nop
 8010e8a:	e7fe      	b.n	8010e8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010e8c:	4b0f      	ldr	r3, [pc, #60]	; (8010ecc <vPortValidateInterruptPriority+0x80>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010e94:	4b0e      	ldr	r3, [pc, #56]	; (8010ed0 <vPortValidateInterruptPriority+0x84>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d90c      	bls.n	8010eb6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8010e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea0:	b672      	cpsid	i
 8010ea2:	f383 8811 	msr	BASEPRI, r3
 8010ea6:	f3bf 8f6f 	isb	sy
 8010eaa:	f3bf 8f4f 	dsb	sy
 8010eae:	b662      	cpsie	i
 8010eb0:	603b      	str	r3, [r7, #0]
}
 8010eb2:	bf00      	nop
 8010eb4:	e7fe      	b.n	8010eb4 <vPortValidateInterruptPriority+0x68>
	}
 8010eb6:	bf00      	nop
 8010eb8:	3714      	adds	r7, #20
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec0:	4770      	bx	lr
 8010ec2:	bf00      	nop
 8010ec4:	e000e3f0 	.word	0xe000e3f0
 8010ec8:	200066bc 	.word	0x200066bc
 8010ecc:	e000ed0c 	.word	0xe000ed0c
 8010ed0:	200066c0 	.word	0x200066c0

08010ed4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b084      	sub	sp, #16
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	330c      	adds	r3, #12
 8010ee4:	461a      	mov	r2, r3
 8010ee6:	6839      	ldr	r1, [r7, #0]
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f002 fcb7 	bl	801385c <tcpip_send_msg_wait_sem>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d103      	bne.n	8010f02 <netconn_apimsg+0x2e>
    return apimsg->err;
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010f00:	e001      	b.n	8010f06 <netconn_apimsg+0x32>
  }
  return err;
 8010f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3710      	adds	r7, #16
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
	...

08010f10 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b08c      	sub	sp, #48	; 0x30
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	4603      	mov	r3, r0
 8010f18:	603a      	str	r2, [r7, #0]
 8010f1a:	71fb      	strb	r3, [r7, #7]
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8010f20:	79fb      	ldrb	r3, [r7, #7]
 8010f22:	6839      	ldr	r1, [r7, #0]
 8010f24:	4618      	mov	r0, r3
 8010f26:	f001 f989 	bl	801223c <netconn_alloc>
 8010f2a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8010f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d054      	beq.n	8010fdc <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8010f32:	79bb      	ldrb	r3, [r7, #6]
 8010f34:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8010f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f38:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8010f3a:	f107 0308 	add.w	r3, r7, #8
 8010f3e:	4619      	mov	r1, r3
 8010f40:	4829      	ldr	r0, [pc, #164]	; (8010fe8 <netconn_new_with_proto_and_callback+0xd8>)
 8010f42:	f7ff ffc7 	bl	8010ed4 <netconn_apimsg>
 8010f46:	4603      	mov	r3, r0
 8010f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8010f4c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d043      	beq.n	8010fdc <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8010f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d005      	beq.n	8010f68 <netconn_new_with_proto_and_callback+0x58>
 8010f5c:	4b23      	ldr	r3, [pc, #140]	; (8010fec <netconn_new_with_proto_and_callback+0xdc>)
 8010f5e:	22a3      	movs	r2, #163	; 0xa3
 8010f60:	4923      	ldr	r1, [pc, #140]	; (8010ff0 <netconn_new_with_proto_and_callback+0xe0>)
 8010f62:	4824      	ldr	r0, [pc, #144]	; (8010ff4 <netconn_new_with_proto_and_callback+0xe4>)
 8010f64:	f00e fb1c 	bl	801f5a0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8010f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6a:	3310      	adds	r3, #16
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f00d ff50 	bl	801ee12 <sys_mbox_valid>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d105      	bne.n	8010f84 <netconn_new_with_proto_and_callback+0x74>
 8010f78:	4b1c      	ldr	r3, [pc, #112]	; (8010fec <netconn_new_with_proto_and_callback+0xdc>)
 8010f7a:	22a4      	movs	r2, #164	; 0xa4
 8010f7c:	491e      	ldr	r1, [pc, #120]	; (8010ff8 <netconn_new_with_proto_and_callback+0xe8>)
 8010f7e:	481d      	ldr	r0, [pc, #116]	; (8010ff4 <netconn_new_with_proto_and_callback+0xe4>)
 8010f80:	f00e fb0e 	bl	801f5a0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8010f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f86:	3314      	adds	r3, #20
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f00d ff42 	bl	801ee12 <sys_mbox_valid>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d005      	beq.n	8010fa0 <netconn_new_with_proto_and_callback+0x90>
 8010f94:	4b15      	ldr	r3, [pc, #84]	; (8010fec <netconn_new_with_proto_and_callback+0xdc>)
 8010f96:	22a6      	movs	r2, #166	; 0xa6
 8010f98:	4918      	ldr	r1, [pc, #96]	; (8010ffc <netconn_new_with_proto_and_callback+0xec>)
 8010f9a:	4816      	ldr	r0, [pc, #88]	; (8010ff4 <netconn_new_with_proto_and_callback+0xe4>)
 8010f9c:	f00e fb00 	bl	801f5a0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8010fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa2:	330c      	adds	r3, #12
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f00d ffc5 	bl	801ef34 <sys_sem_valid>
 8010faa:	4603      	mov	r3, r0
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d105      	bne.n	8010fbc <netconn_new_with_proto_and_callback+0xac>
 8010fb0:	4b0e      	ldr	r3, [pc, #56]	; (8010fec <netconn_new_with_proto_and_callback+0xdc>)
 8010fb2:	22a9      	movs	r2, #169	; 0xa9
 8010fb4:	4912      	ldr	r1, [pc, #72]	; (8011000 <netconn_new_with_proto_and_callback+0xf0>)
 8010fb6:	480f      	ldr	r0, [pc, #60]	; (8010ff4 <netconn_new_with_proto_and_callback+0xe4>)
 8010fb8:	f00e faf2 	bl	801f5a0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8010fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fbe:	330c      	adds	r3, #12
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f00d ffaa 	bl	801ef1a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8010fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc8:	3310      	adds	r3, #16
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f00d fe9a 	bl	801ed04 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8010fd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010fd2:	2007      	movs	r0, #7
 8010fd4:	f003 f9f0 	bl	80143b8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	e000      	b.n	8010fde <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8010fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3730      	adds	r7, #48	; 0x30
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	08012211 	.word	0x08012211
 8010fec:	08020ac8 	.word	0x08020ac8
 8010ff0:	08020afc 	.word	0x08020afc
 8010ff4:	08020b20 	.word	0x08020b20
 8010ff8:	08020b48 	.word	0x08020b48
 8010ffc:	08020b60 	.word	0x08020b60
 8011000:	08020b84 	.word	0x08020b84

08011004 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b08c      	sub	sp, #48	; 0x30
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d101      	bne.n	8011016 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8011012:	2300      	movs	r3, #0
 8011014:	e014      	b.n	8011040 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801101a:	2329      	movs	r3, #41	; 0x29
 801101c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 801101e:	f107 030c 	add.w	r3, r7, #12
 8011022:	4619      	mov	r1, r3
 8011024:	4808      	ldr	r0, [pc, #32]	; (8011048 <netconn_prepare_delete+0x44>)
 8011026:	f7ff ff55 	bl	8010ed4 <netconn_apimsg>
 801102a:	4603      	mov	r3, r0
 801102c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8011030:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8011034:	2b00      	cmp	r3, #0
 8011036:	d002      	beq.n	801103e <netconn_prepare_delete+0x3a>
    return err;
 8011038:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801103c:	e000      	b.n	8011040 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 801103e:	2300      	movs	r3, #0
}
 8011040:	4618      	mov	r0, r3
 8011042:	3730      	adds	r7, #48	; 0x30
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}
 8011048:	0801277d 	.word	0x0801277d

0801104c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d101      	bne.n	801105e <netconn_delete+0x12>
    return ERR_OK;
 801105a:	2300      	movs	r3, #0
 801105c:	e00d      	b.n	801107a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f7ff ffd0 	bl	8011004 <netconn_prepare_delete>
 8011064:	4603      	mov	r3, r0
 8011066:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8011068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d102      	bne.n	8011076 <netconn_delete+0x2a>
    netconn_free(conn);
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f001 f951 	bl	8012318 <netconn_free>
  }
  return err;
 8011076:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801107a:	4618      	mov	r0, r3
 801107c:	3710      	adds	r7, #16
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
	...

08011084 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b08e      	sub	sp, #56	; 0x38
 8011088:	af00      	add	r7, sp, #0
 801108a:	60f8      	str	r0, [r7, #12]
 801108c:	60b9      	str	r1, [r7, #8]
 801108e:	4613      	mov	r3, r2
 8011090:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d109      	bne.n	80110ac <netconn_bind+0x28>
 8011098:	4b11      	ldr	r3, [pc, #68]	; (80110e0 <netconn_bind+0x5c>)
 801109a:	f44f 729c 	mov.w	r2, #312	; 0x138
 801109e:	4911      	ldr	r1, [pc, #68]	; (80110e4 <netconn_bind+0x60>)
 80110a0:	4811      	ldr	r0, [pc, #68]	; (80110e8 <netconn_bind+0x64>)
 80110a2:	f00e fa7d 	bl	801f5a0 <iprintf>
 80110a6:	f06f 030f 	mvn.w	r3, #15
 80110aa:	e015      	b.n	80110d8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d101      	bne.n	80110b6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80110b2:	4b0e      	ldr	r3, [pc, #56]	; (80110ec <netconn_bind+0x68>)
 80110b4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80110be:	88fb      	ldrh	r3, [r7, #6]
 80110c0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80110c2:	f107 0314 	add.w	r3, r7, #20
 80110c6:	4619      	mov	r1, r3
 80110c8:	4809      	ldr	r0, [pc, #36]	; (80110f0 <netconn_bind+0x6c>)
 80110ca:	f7ff ff03 	bl	8010ed4 <netconn_apimsg>
 80110ce:	4603      	mov	r3, r0
 80110d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80110d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3738      	adds	r7, #56	; 0x38
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	08020ac8 	.word	0x08020ac8
 80110e4:	08020c00 	.word	0x08020c00
 80110e8:	08020b20 	.word	0x08020b20
 80110ec:	080240e0 	.word	0x080240e0
 80110f0:	08012945 	.word	0x08012945

080110f4 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b08e      	sub	sp, #56	; 0x38
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	60f8      	str	r0, [r7, #12]
 80110fc:	60b9      	str	r1, [r7, #8]
 80110fe:	4613      	mov	r3, r2
 8011100:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d109      	bne.n	801111c <netconn_connect+0x28>
 8011108:	4b11      	ldr	r3, [pc, #68]	; (8011150 <netconn_connect+0x5c>)
 801110a:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 801110e:	4911      	ldr	r1, [pc, #68]	; (8011154 <netconn_connect+0x60>)
 8011110:	4811      	ldr	r0, [pc, #68]	; (8011158 <netconn_connect+0x64>)
 8011112:	f00e fa45 	bl	801f5a0 <iprintf>
 8011116:	f06f 030f 	mvn.w	r3, #15
 801111a:	e015      	b.n	8011148 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d101      	bne.n	8011126 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8011122:	4b0e      	ldr	r3, [pc, #56]	; (801115c <netconn_connect+0x68>)
 8011124:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 801112e:	88fb      	ldrh	r3, [r7, #6]
 8011130:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8011132:	f107 0314 	add.w	r3, r7, #20
 8011136:	4619      	mov	r1, r3
 8011138:	4809      	ldr	r0, [pc, #36]	; (8011160 <netconn_connect+0x6c>)
 801113a:	f7ff fecb 	bl	8010ed4 <netconn_apimsg>
 801113e:	4603      	mov	r3, r0
 8011140:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011144:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8011148:	4618      	mov	r0, r3
 801114a:	3738      	adds	r7, #56	; 0x38
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}
 8011150:	08020ac8 	.word	0x08020ac8
 8011154:	08020c3c 	.word	0x08020c3c
 8011158:	08020b20 	.word	0x08020b20
 801115c:	080240e0 	.word	0x080240e0
 8011160:	08012ad9 	.word	0x08012ad9

08011164 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b08c      	sub	sp, #48	; 0x30
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	460b      	mov	r3, r1
 801116e:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d109      	bne.n	801118a <netconn_listen_with_backlog+0x26>
 8011176:	4b0d      	ldr	r3, [pc, #52]	; (80111ac <netconn_listen_with_backlog+0x48>)
 8011178:	f240 12bb 	movw	r2, #443	; 0x1bb
 801117c:	490c      	ldr	r1, [pc, #48]	; (80111b0 <netconn_listen_with_backlog+0x4c>)
 801117e:	480d      	ldr	r0, [pc, #52]	; (80111b4 <netconn_listen_with_backlog+0x50>)
 8011180:	f00e fa0e 	bl	801f5a0 <iprintf>
 8011184:	f06f 030f 	mvn.w	r3, #15
 8011188:	e00c      	b.n	80111a4 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 801118e:	f107 030c 	add.w	r3, r7, #12
 8011192:	4619      	mov	r1, r3
 8011194:	4808      	ldr	r0, [pc, #32]	; (80111b8 <netconn_listen_with_backlog+0x54>)
 8011196:	f7ff fe9d 	bl	8010ed4 <netconn_apimsg>
 801119a:	4603      	mov	r3, r0
 801119c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80111a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3730      	adds	r7, #48	; 0x30
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	08020ac8 	.word	0x08020ac8
 80111b0:	08020c80 	.word	0x08020c80
 80111b4:	08020b20 	.word	0x08020b20
 80111b8:	08012c55 	.word	0x08012c55

080111bc <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b086      	sub	sp, #24
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d109      	bne.n	80111e0 <netconn_accept+0x24>
 80111cc:	4b3d      	ldr	r3, [pc, #244]	; (80112c4 <netconn_accept+0x108>)
 80111ce:	f240 12e1 	movw	r2, #481	; 0x1e1
 80111d2:	493d      	ldr	r1, [pc, #244]	; (80112c8 <netconn_accept+0x10c>)
 80111d4:	483d      	ldr	r0, [pc, #244]	; (80112cc <netconn_accept+0x110>)
 80111d6:	f00e f9e3 	bl	801f5a0 <iprintf>
 80111da:	f06f 030f 	mvn.w	r3, #15
 80111de:	e06c      	b.n	80112ba <netconn_accept+0xfe>
  *new_conn = NULL;
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	2200      	movs	r2, #0
 80111e4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d109      	bne.n	8011200 <netconn_accept+0x44>
 80111ec:	4b35      	ldr	r3, [pc, #212]	; (80112c4 <netconn_accept+0x108>)
 80111ee:	f240 12e3 	movw	r2, #483	; 0x1e3
 80111f2:	4937      	ldr	r1, [pc, #220]	; (80112d0 <netconn_accept+0x114>)
 80111f4:	4835      	ldr	r0, [pc, #212]	; (80112cc <netconn_accept+0x110>)
 80111f6:	f00e f9d3 	bl	801f5a0 <iprintf>
 80111fa:	f06f 030f 	mvn.w	r3, #15
 80111fe:	e05c      	b.n	80112ba <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f000 fb9a 	bl	801193a <netconn_err>
 8011206:	4603      	mov	r3, r0
 8011208:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 801120a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d002      	beq.n	8011218 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8011212:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011216:	e050      	b.n	80112ba <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	3314      	adds	r3, #20
 801121c:	4618      	mov	r0, r3
 801121e:	f00d fdf8 	bl	801ee12 <sys_mbox_valid>
 8011222:	4603      	mov	r3, r0
 8011224:	2b00      	cmp	r3, #0
 8011226:	d005      	beq.n	8011234 <netconn_accept+0x78>
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	7f1b      	ldrb	r3, [r3, #28]
 801122c:	f003 0301 	and.w	r3, r3, #1
 8011230:	2b00      	cmp	r3, #0
 8011232:	d002      	beq.n	801123a <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8011234:	f06f 030e 	mvn.w	r3, #14
 8011238:	e03f      	b.n	80112ba <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	7f1b      	ldrb	r3, [r3, #28]
 801123e:	f003 0302 	and.w	r3, r3, #2
 8011242:	2b00      	cmp	r3, #0
 8011244:	d00e      	beq.n	8011264 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	3314      	adds	r3, #20
 801124a:	f107 020c 	add.w	r2, r7, #12
 801124e:	4611      	mov	r1, r2
 8011250:	4618      	mov	r0, r3
 8011252:	f00d fdc2 	bl	801edda <sys_arch_mbox_tryfetch>
 8011256:	4603      	mov	r3, r0
 8011258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801125c:	d10a      	bne.n	8011274 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 801125e:	f06f 0306 	mvn.w	r3, #6
 8011262:	e02a      	b.n	80112ba <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	3314      	adds	r3, #20
 8011268:	f107 010c 	add.w	r1, r7, #12
 801126c:	2200      	movs	r2, #0
 801126e:	4618      	mov	r0, r3
 8011270:	f00d fd74 	bl	801ed5c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011278:	2b00      	cmp	r3, #0
 801127a:	d005      	beq.n	8011288 <netconn_accept+0xcc>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011280:	2200      	movs	r2, #0
 8011282:	2101      	movs	r1, #1
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	f107 0213 	add.w	r2, r7, #19
 801128e:	4611      	mov	r1, r2
 8011290:	4618      	mov	r0, r3
 8011292:	f000 fba3 	bl	80119dc <lwip_netconn_is_err_msg>
 8011296:	4603      	mov	r3, r0
 8011298:	2b00      	cmp	r3, #0
 801129a:	d002      	beq.n	80112a2 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 801129c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80112a0:	e00b      	b.n	80112ba <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d102      	bne.n	80112ae <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80112a8:	f06f 030e 	mvn.w	r3, #14
 80112ac:	e005      	b.n	80112ba <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	697a      	ldr	r2, [r7, #20]
 80112b6:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80112b8:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3718      	adds	r7, #24
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	08020ac8 	.word	0x08020ac8
 80112c8:	08020ca0 	.word	0x08020ca0
 80112cc:	08020b20 	.word	0x08020b20
 80112d0:	08020cc0 	.word	0x08020cc0

080112d4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b088      	sub	sp, #32
 80112d8:	af00      	add	r7, sp, #0
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	4613      	mov	r3, r2
 80112e0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80112e2:	2300      	movs	r3, #0
 80112e4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d109      	bne.n	8011300 <netconn_recv_data+0x2c>
 80112ec:	4b58      	ldr	r3, [pc, #352]	; (8011450 <netconn_recv_data+0x17c>)
 80112ee:	f44f 7212 	mov.w	r2, #584	; 0x248
 80112f2:	4958      	ldr	r1, [pc, #352]	; (8011454 <netconn_recv_data+0x180>)
 80112f4:	4858      	ldr	r0, [pc, #352]	; (8011458 <netconn_recv_data+0x184>)
 80112f6:	f00e f953 	bl	801f5a0 <iprintf>
 80112fa:	f06f 030f 	mvn.w	r3, #15
 80112fe:	e0a2      	b.n	8011446 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	2200      	movs	r2, #0
 8011304:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d109      	bne.n	8011320 <netconn_recv_data+0x4c>
 801130c:	4b50      	ldr	r3, [pc, #320]	; (8011450 <netconn_recv_data+0x17c>)
 801130e:	f240 224a 	movw	r2, #586	; 0x24a
 8011312:	4952      	ldr	r1, [pc, #328]	; (801145c <netconn_recv_data+0x188>)
 8011314:	4850      	ldr	r0, [pc, #320]	; (8011458 <netconn_recv_data+0x184>)
 8011316:	f00e f943 	bl	801f5a0 <iprintf>
 801131a:	f06f 030f 	mvn.w	r3, #15
 801131e:	e092      	b.n	8011446 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	3310      	adds	r3, #16
 8011324:	4618      	mov	r0, r3
 8011326:	f00d fd74 	bl	801ee12 <sys_mbox_valid>
 801132a:	4603      	mov	r3, r0
 801132c:	2b00      	cmp	r3, #0
 801132e:	d10e      	bne.n	801134e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8011330:	68f8      	ldr	r0, [r7, #12]
 8011332:	f000 fb02 	bl	801193a <netconn_err>
 8011336:	4603      	mov	r3, r0
 8011338:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 801133a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d002      	beq.n	8011348 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8011342:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011346:	e07e      	b.n	8011446 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8011348:	f06f 030a 	mvn.w	r3, #10
 801134c:	e07b      	b.n	8011446 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	7f1b      	ldrb	r3, [r3, #28]
 8011352:	f003 0302 	and.w	r3, r3, #2
 8011356:	2b00      	cmp	r3, #0
 8011358:	d10f      	bne.n	801137a <netconn_recv_data+0xa6>
 801135a:	79fb      	ldrb	r3, [r7, #7]
 801135c:	f003 0304 	and.w	r3, r3, #4
 8011360:	2b00      	cmp	r3, #0
 8011362:	d10a      	bne.n	801137a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	7f1b      	ldrb	r3, [r3, #28]
 8011368:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 801136c:	2b00      	cmp	r3, #0
 801136e:	d104      	bne.n	801137a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d023      	beq.n	80113c2 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	3310      	adds	r3, #16
 801137e:	f107 0218 	add.w	r2, r7, #24
 8011382:	4611      	mov	r1, r2
 8011384:	4618      	mov	r0, r3
 8011386:	f00d fd28 	bl	801edda <sys_arch_mbox_tryfetch>
 801138a:	4603      	mov	r3, r0
 801138c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011390:	d11f      	bne.n	80113d2 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8011392:	68f8      	ldr	r0, [r7, #12]
 8011394:	f000 fad1 	bl	801193a <netconn_err>
 8011398:	4603      	mov	r3, r0
 801139a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 801139c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d002      	beq.n	80113aa <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80113a4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80113a8:	e04d      	b.n	8011446 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	7f1b      	ldrb	r3, [r3, #28]
 80113ae:	f003 0301 	and.w	r3, r3, #1
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d002      	beq.n	80113bc <netconn_recv_data+0xe8>
        return ERR_CONN;
 80113b6:	f06f 030a 	mvn.w	r3, #10
 80113ba:	e044      	b.n	8011446 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80113bc:	f06f 0306 	mvn.w	r3, #6
 80113c0:	e041      	b.n	8011446 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	3310      	adds	r3, #16
 80113c6:	f107 0118 	add.w	r1, r7, #24
 80113ca:	2200      	movs	r2, #0
 80113cc:	4618      	mov	r0, r3
 80113ce:	f00d fcc5 	bl	801ed5c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	781b      	ldrb	r3, [r3, #0]
 80113d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113da:	2b10      	cmp	r3, #16
 80113dc:	d117      	bne.n	801140e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80113de:	69bb      	ldr	r3, [r7, #24]
 80113e0:	f107 0217 	add.w	r2, r7, #23
 80113e4:	4611      	mov	r1, r2
 80113e6:	4618      	mov	r0, r3
 80113e8:	f000 faf8 	bl	80119dc <lwip_netconn_is_err_msg>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d009      	beq.n	8011406 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80113f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113f6:	f113 0f0f 	cmn.w	r3, #15
 80113fa:	d101      	bne.n	8011400 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80113fc:	2300      	movs	r3, #0
 80113fe:	e022      	b.n	8011446 <netconn_recv_data+0x172>
      }
      return err;
 8011400:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011404:	e01f      	b.n	8011446 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8011406:	69bb      	ldr	r3, [r7, #24]
 8011408:	891b      	ldrh	r3, [r3, #8]
 801140a:	83fb      	strh	r3, [r7, #30]
 801140c:	e00d      	b.n	801142a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801140e:	69bb      	ldr	r3, [r7, #24]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d106      	bne.n	8011422 <netconn_recv_data+0x14e>
 8011414:	4b0e      	ldr	r3, [pc, #56]	; (8011450 <netconn_recv_data+0x17c>)
 8011416:	f240 2291 	movw	r2, #657	; 0x291
 801141a:	4911      	ldr	r1, [pc, #68]	; (8011460 <netconn_recv_data+0x18c>)
 801141c:	480e      	ldr	r0, [pc, #56]	; (8011458 <netconn_recv_data+0x184>)
 801141e:	f00e f8bf 	bl	801f5a0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	891b      	ldrh	r3, [r3, #8]
 8011428:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801142e:	2b00      	cmp	r3, #0
 8011430:	d005      	beq.n	801143e <netconn_recv_data+0x16a>
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011436:	8bfa      	ldrh	r2, [r7, #30]
 8011438:	2101      	movs	r1, #1
 801143a:	68f8      	ldr	r0, [r7, #12]
 801143c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801143e:	69ba      	ldr	r2, [r7, #24]
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8011444:	2300      	movs	r3, #0
}
 8011446:	4618      	mov	r0, r3
 8011448:	3720      	adds	r7, #32
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}
 801144e:	bf00      	nop
 8011450:	08020ac8 	.word	0x08020ac8
 8011454:	08020ce0 	.word	0x08020ce0
 8011458:	08020b20 	.word	0x08020b20
 801145c:	08020d00 	.word	0x08020d00
 8011460:	08020d1c 	.word	0x08020d1c

08011464 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b084      	sub	sp, #16
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	60b9      	str	r1, [r7, #8]
 801146e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d005      	beq.n	8011482 <netconn_tcp_recvd_msg+0x1e>
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	781b      	ldrb	r3, [r3, #0]
 801147a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801147e:	2b10      	cmp	r3, #16
 8011480:	d009      	beq.n	8011496 <netconn_tcp_recvd_msg+0x32>
 8011482:	4b0c      	ldr	r3, [pc, #48]	; (80114b4 <netconn_tcp_recvd_msg+0x50>)
 8011484:	f240 22a7 	movw	r2, #679	; 0x2a7
 8011488:	490b      	ldr	r1, [pc, #44]	; (80114b8 <netconn_tcp_recvd_msg+0x54>)
 801148a:	480c      	ldr	r0, [pc, #48]	; (80114bc <netconn_tcp_recvd_msg+0x58>)
 801148c:	f00e f888 	bl	801f5a0 <iprintf>
 8011490:	f06f 030f 	mvn.w	r3, #15
 8011494:	e00a      	b.n	80114ac <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	68fa      	ldr	r2, [r7, #12]
 801149a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	68ba      	ldr	r2, [r7, #8]
 80114a0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80114a2:	6879      	ldr	r1, [r7, #4]
 80114a4:	4806      	ldr	r0, [pc, #24]	; (80114c0 <netconn_tcp_recvd_msg+0x5c>)
 80114a6:	f7ff fd15 	bl	8010ed4 <netconn_apimsg>
 80114aa:	4603      	mov	r3, r0
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3710      	adds	r7, #16
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}
 80114b4:	08020ac8 	.word	0x08020ac8
 80114b8:	08020d28 	.word	0x08020d28
 80114bc:	08020b20 	.word	0x08020b20
 80114c0:	08012e1f 	.word	0x08012e1f

080114c4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b090      	sub	sp, #64	; 0x40
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	60f8      	str	r0, [r7, #12]
 80114cc:	60b9      	str	r1, [r7, #8]
 80114ce:	4613      	mov	r3, r2
 80114d0:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	3310      	adds	r3, #16
 80114d6:	4618      	mov	r0, r3
 80114d8:	f00d fc9b 	bl	801ee12 <sys_mbox_valid>
 80114dc:	4603      	mov	r3, r0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d102      	bne.n	80114e8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80114e2:	f06f 030a 	mvn.w	r3, #10
 80114e6:	e06d      	b.n	80115c4 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	7f1b      	ldrb	r3, [r3, #28]
 80114ec:	b25b      	sxtb	r3, r3
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	da07      	bge.n	8011502 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	7f1b      	ldrb	r3, [r3, #28]
 80114f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114fa:	b2da      	uxtb	r2, r3
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8011500:	e039      	b.n	8011576 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8011502:	79fb      	ldrb	r3, [r7, #7]
 8011504:	461a      	mov	r2, r3
 8011506:	68b9      	ldr	r1, [r7, #8]
 8011508:	68f8      	ldr	r0, [r7, #12]
 801150a:	f7ff fee3 	bl	80112d4 <netconn_recv_data>
 801150e:	4603      	mov	r3, r0
 8011510:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8011514:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011518:	2b00      	cmp	r3, #0
 801151a:	d002      	beq.n	8011522 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 801151c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011520:	e050      	b.n	80115c4 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8011528:	79fb      	ldrb	r3, [r7, #7]
 801152a:	f003 0308 	and.w	r3, r3, #8
 801152e:	2b00      	cmp	r3, #0
 8011530:	d10e      	bne.n	8011550 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8011532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011534:	2b00      	cmp	r3, #0
 8011536:	d002      	beq.n	801153e <netconn_recv_data_tcp+0x7a>
 8011538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801153a:	891b      	ldrh	r3, [r3, #8]
 801153c:	e000      	b.n	8011540 <netconn_recv_data_tcp+0x7c>
 801153e:	2301      	movs	r3, #1
 8011540:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8011542:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011544:	f107 0214 	add.w	r2, r7, #20
 8011548:	4619      	mov	r1, r3
 801154a:	68f8      	ldr	r0, [r7, #12]
 801154c:	f7ff ff8a 	bl	8011464 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8011550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011552:	2b00      	cmp	r3, #0
 8011554:	d134      	bne.n	80115c0 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8011556:	79fb      	ldrb	r3, [r7, #7]
 8011558:	f003 0310 	and.w	r3, r3, #16
 801155c:	2b00      	cmp	r3, #0
 801155e:	d009      	beq.n	8011574 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	7f1b      	ldrb	r3, [r3, #28]
 8011564:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011568:	b2da      	uxtb	r2, r3
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 801156e:	f06f 0306 	mvn.w	r3, #6
 8011572:	e027      	b.n	80115c4 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8011574:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801157a:	2b00      	cmp	r3, #0
 801157c:	d005      	beq.n	801158a <netconn_recv_data_tcp+0xc6>
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011582:	2200      	movs	r2, #0
 8011584:	2101      	movs	r1, #1
 8011586:	68f8      	ldr	r0, [r7, #12]
 8011588:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d10f      	bne.n	80115b2 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8011592:	68f8      	ldr	r0, [r7, #12]
 8011594:	f000 f9d1 	bl	801193a <netconn_err>
 8011598:	4603      	mov	r3, r0
 801159a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 801159e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d002      	beq.n	80115ac <netconn_recv_data_tcp+0xe8>
          return err;
 80115a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80115aa:	e00b      	b.n	80115c4 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80115ac:	f06f 030d 	mvn.w	r3, #13
 80115b0:	e008      	b.n	80115c4 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80115b2:	2101      	movs	r1, #1
 80115b4:	68f8      	ldr	r0, [r7, #12]
 80115b6:	f000 f983 	bl	80118c0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80115ba:	f06f 030e 	mvn.w	r3, #14
 80115be:	e001      	b.n	80115c4 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80115c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3740      	adds	r7, #64	; 0x40
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}

080115cc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b086      	sub	sp, #24
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80115d6:	2300      	movs	r3, #0
 80115d8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d109      	bne.n	80115f4 <netconn_recv+0x28>
 80115e0:	4b32      	ldr	r3, [pc, #200]	; (80116ac <netconn_recv+0xe0>)
 80115e2:	f240 3263 	movw	r2, #867	; 0x363
 80115e6:	4932      	ldr	r1, [pc, #200]	; (80116b0 <netconn_recv+0xe4>)
 80115e8:	4832      	ldr	r0, [pc, #200]	; (80116b4 <netconn_recv+0xe8>)
 80115ea:	f00d ffd9 	bl	801f5a0 <iprintf>
 80115ee:	f06f 030f 	mvn.w	r3, #15
 80115f2:	e056      	b.n	80116a2 <netconn_recv+0xd6>
  *new_buf = NULL;
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	2200      	movs	r2, #0
 80115f8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d109      	bne.n	8011614 <netconn_recv+0x48>
 8011600:	4b2a      	ldr	r3, [pc, #168]	; (80116ac <netconn_recv+0xe0>)
 8011602:	f240 3265 	movw	r2, #869	; 0x365
 8011606:	492c      	ldr	r1, [pc, #176]	; (80116b8 <netconn_recv+0xec>)
 8011608:	482a      	ldr	r0, [pc, #168]	; (80116b4 <netconn_recv+0xe8>)
 801160a:	f00d ffc9 	bl	801f5a0 <iprintf>
 801160e:	f06f 030f 	mvn.w	r3, #15
 8011612:	e046      	b.n	80116a2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801161c:	2b10      	cmp	r3, #16
 801161e:	d13a      	bne.n	8011696 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8011620:	2300      	movs	r3, #0
 8011622:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011624:	2006      	movs	r0, #6
 8011626:	f002 fe51 	bl	80142cc <memp_malloc>
 801162a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d102      	bne.n	8011638 <netconn_recv+0x6c>
      return ERR_MEM;
 8011632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011636:	e034      	b.n	80116a2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8011638:	f107 030c 	add.w	r3, r7, #12
 801163c:	2200      	movs	r2, #0
 801163e:	4619      	mov	r1, r3
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f7ff ff3f 	bl	80114c4 <netconn_recv_data_tcp>
 8011646:	4603      	mov	r3, r0
 8011648:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801164a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d006      	beq.n	8011660 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8011652:	6979      	ldr	r1, [r7, #20]
 8011654:	2006      	movs	r0, #6
 8011656:	f002 feaf 	bl	80143b8 <memp_free>
      return err;
 801165a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801165e:	e020      	b.n	80116a2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d106      	bne.n	8011674 <netconn_recv+0xa8>
 8011666:	4b11      	ldr	r3, [pc, #68]	; (80116ac <netconn_recv+0xe0>)
 8011668:	f240 3279 	movw	r2, #889	; 0x379
 801166c:	4913      	ldr	r1, [pc, #76]	; (80116bc <netconn_recv+0xf0>)
 801166e:	4811      	ldr	r0, [pc, #68]	; (80116b4 <netconn_recv+0xe8>)
 8011670:	f00d ff96 	bl	801f5a0 <iprintf>

    buf->p = p;
 8011674:	68fa      	ldr	r2, [r7, #12]
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801167a:	68fa      	ldr	r2, [r7, #12]
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	2200      	movs	r2, #0
 8011684:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	2200      	movs	r2, #0
 801168a:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	697a      	ldr	r2, [r7, #20]
 8011690:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8011692:	2300      	movs	r3, #0
 8011694:	e005      	b.n	80116a2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8011696:	2200      	movs	r2, #0
 8011698:	6839      	ldr	r1, [r7, #0]
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f7ff fe1a 	bl	80112d4 <netconn_recv_data>
 80116a0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3718      	adds	r7, #24
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}
 80116aa:	bf00      	nop
 80116ac:	08020ac8 	.word	0x08020ac8
 80116b0:	08020ce0 	.word	0x08020ce0
 80116b4:	08020b20 	.word	0x08020b20
 80116b8:	08020d00 	.word	0x08020d00
 80116bc:	08020d78 	.word	0x08020d78

080116c0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b08c      	sub	sp, #48	; 0x30
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d109      	bne.n	80116e4 <netconn_send+0x24>
 80116d0:	4b0e      	ldr	r3, [pc, #56]	; (801170c <netconn_send+0x4c>)
 80116d2:	f240 32b2 	movw	r2, #946	; 0x3b2
 80116d6:	490e      	ldr	r1, [pc, #56]	; (8011710 <netconn_send+0x50>)
 80116d8:	480e      	ldr	r0, [pc, #56]	; (8011714 <netconn_send+0x54>)
 80116da:	f00d ff61 	bl	801f5a0 <iprintf>
 80116de:	f06f 030f 	mvn.w	r3, #15
 80116e2:	e00e      	b.n	8011702 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80116ec:	f107 030c 	add.w	r3, r7, #12
 80116f0:	4619      	mov	r1, r3
 80116f2:	4809      	ldr	r0, [pc, #36]	; (8011718 <netconn_send+0x58>)
 80116f4:	f7ff fbee 	bl	8010ed4 <netconn_apimsg>
 80116f8:	4603      	mov	r3, r0
 80116fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80116fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8011702:	4618      	mov	r0, r3
 8011704:	3730      	adds	r7, #48	; 0x30
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
 801170a:	bf00      	nop
 801170c:	08020ac8 	.word	0x08020ac8
 8011710:	08020d84 	.word	0x08020d84
 8011714:	08020b20 	.word	0x08020b20
 8011718:	08012d85 	.word	0x08012d85

0801171c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b088      	sub	sp, #32
 8011720:	af02      	add	r7, sp, #8
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	60b9      	str	r1, [r7, #8]
 8011726:	607a      	str	r2, [r7, #4]
 8011728:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8011732:	78fa      	ldrb	r2, [r7, #3]
 8011734:	f107 0110 	add.w	r1, r7, #16
 8011738:	6a3b      	ldr	r3, [r7, #32]
 801173a:	9300      	str	r3, [sp, #0]
 801173c:	4613      	mov	r3, r2
 801173e:	2201      	movs	r2, #1
 8011740:	68f8      	ldr	r0, [r7, #12]
 8011742:	f000 f805 	bl	8011750 <netconn_write_vectors_partly>
 8011746:	4603      	mov	r3, r0
}
 8011748:	4618      	mov	r0, r3
 801174a:	3718      	adds	r7, #24
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}

08011750 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b092      	sub	sp, #72	; 0x48
 8011754:	af00      	add	r7, sp, #0
 8011756:	60f8      	str	r0, [r7, #12]
 8011758:	60b9      	str	r1, [r7, #8]
 801175a:	4611      	mov	r1, r2
 801175c:	461a      	mov	r2, r3
 801175e:	460b      	mov	r3, r1
 8011760:	80fb      	strh	r3, [r7, #6]
 8011762:	4613      	mov	r3, r2
 8011764:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d109      	bne.n	8011780 <netconn_write_vectors_partly+0x30>
 801176c:	4b4e      	ldr	r3, [pc, #312]	; (80118a8 <netconn_write_vectors_partly+0x158>)
 801176e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8011772:	494e      	ldr	r1, [pc, #312]	; (80118ac <netconn_write_vectors_partly+0x15c>)
 8011774:	484e      	ldr	r0, [pc, #312]	; (80118b0 <netconn_write_vectors_partly+0x160>)
 8011776:	f00d ff13 	bl	801f5a0 <iprintf>
 801177a:	f06f 030f 	mvn.w	r3, #15
 801177e:	e08e      	b.n	801189e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011788:	2b10      	cmp	r3, #16
 801178a:	d009      	beq.n	80117a0 <netconn_write_vectors_partly+0x50>
 801178c:	4b46      	ldr	r3, [pc, #280]	; (80118a8 <netconn_write_vectors_partly+0x158>)
 801178e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8011792:	4948      	ldr	r1, [pc, #288]	; (80118b4 <netconn_write_vectors_partly+0x164>)
 8011794:	4846      	ldr	r0, [pc, #280]	; (80118b0 <netconn_write_vectors_partly+0x160>)
 8011796:	f00d ff03 	bl	801f5a0 <iprintf>
 801179a:	f06f 0305 	mvn.w	r3, #5
 801179e:	e07e      	b.n	801189e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	7f1b      	ldrb	r3, [r3, #28]
 80117a4:	f003 0302 	and.w	r3, r3, #2
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d104      	bne.n	80117b6 <netconn_write_vectors_partly+0x66>
 80117ac:	797b      	ldrb	r3, [r7, #5]
 80117ae:	f003 0304 	and.w	r3, r3, #4
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d001      	beq.n	80117ba <netconn_write_vectors_partly+0x6a>
 80117b6:	2301      	movs	r3, #1
 80117b8:	e000      	b.n	80117bc <netconn_write_vectors_partly+0x6c>
 80117ba:	2300      	movs	r3, #0
 80117bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80117c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d005      	beq.n	80117d4 <netconn_write_vectors_partly+0x84>
 80117c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d102      	bne.n	80117d4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80117ce:	f06f 0305 	mvn.w	r3, #5
 80117d2:	e064      	b.n	801189e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80117d4:	2300      	movs	r3, #0
 80117d6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80117d8:	2300      	movs	r3, #0
 80117da:	643b      	str	r3, [r7, #64]	; 0x40
 80117dc:	e015      	b.n	801180a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80117de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117e0:	00db      	lsls	r3, r3, #3
 80117e2:	68ba      	ldr	r2, [r7, #8]
 80117e4:	4413      	add	r3, r2
 80117e6:	685b      	ldr	r3, [r3, #4]
 80117e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80117ea:	4413      	add	r3, r2
 80117ec:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80117ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117f0:	00db      	lsls	r3, r3, #3
 80117f2:	68ba      	ldr	r2, [r7, #8]
 80117f4:	4413      	add	r3, r2
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d202      	bcs.n	8011804 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80117fe:	f06f 0305 	mvn.w	r3, #5
 8011802:	e04c      	b.n	801189e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8011804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011806:	3301      	adds	r3, #1
 8011808:	643b      	str	r3, [r7, #64]	; 0x40
 801180a:	88fb      	ldrh	r3, [r7, #6]
 801180c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801180e:	429a      	cmp	r2, r3
 8011810:	dbe5      	blt.n	80117de <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8011812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011814:	2b00      	cmp	r3, #0
 8011816:	d101      	bne.n	801181c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8011818:	2300      	movs	r3, #0
 801181a:	e040      	b.n	801189e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 801181c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801181e:	2b00      	cmp	r3, #0
 8011820:	da0a      	bge.n	8011838 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8011822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011824:	2b00      	cmp	r3, #0
 8011826:	d102      	bne.n	801182e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8011828:	f06f 0305 	mvn.w	r3, #5
 801182c:	e037      	b.n	801189e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 801182e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011832:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8011834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011836:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8011840:	88fb      	ldrh	r3, [r7, #6]
 8011842:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8011844:	2300      	movs	r3, #0
 8011846:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8011848:	797b      	ldrb	r3, [r7, #5]
 801184a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 801184e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011850:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8011852:	2300      	movs	r3, #0
 8011854:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8011856:	f107 0314 	add.w	r3, r7, #20
 801185a:	4619      	mov	r1, r3
 801185c:	4816      	ldr	r0, [pc, #88]	; (80118b8 <netconn_write_vectors_partly+0x168>)
 801185e:	f7ff fb39 	bl	8010ed4 <netconn_apimsg>
 8011862:	4603      	mov	r3, r0
 8011864:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8011868:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801186c:	2b00      	cmp	r3, #0
 801186e:	d114      	bne.n	801189a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8011870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011872:	2b00      	cmp	r3, #0
 8011874:	d002      	beq.n	801187c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8011876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801187a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 801187c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011880:	2b00      	cmp	r3, #0
 8011882:	d10a      	bne.n	801189a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8011884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011888:	429a      	cmp	r2, r3
 801188a:	d006      	beq.n	801189a <netconn_write_vectors_partly+0x14a>
 801188c:	4b06      	ldr	r3, [pc, #24]	; (80118a8 <netconn_write_vectors_partly+0x158>)
 801188e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011892:	490a      	ldr	r1, [pc, #40]	; (80118bc <netconn_write_vectors_partly+0x16c>)
 8011894:	4806      	ldr	r0, [pc, #24]	; (80118b0 <netconn_write_vectors_partly+0x160>)
 8011896:	f00d fe83 	bl	801f5a0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 801189a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3748      	adds	r7, #72	; 0x48
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}
 80118a6:	bf00      	nop
 80118a8:	08020ac8 	.word	0x08020ac8
 80118ac:	08020da0 	.word	0x08020da0
 80118b0:	08020b20 	.word	0x08020b20
 80118b4:	08020dbc 	.word	0x08020dbc
 80118b8:	08013221 	.word	0x08013221
 80118bc:	08020de0 	.word	0x08020de0

080118c0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b08c      	sub	sp, #48	; 0x30
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
 80118c8:	460b      	mov	r3, r1
 80118ca:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d109      	bne.n	80118e6 <netconn_close_shutdown+0x26>
 80118d2:	4b0f      	ldr	r3, [pc, #60]	; (8011910 <netconn_close_shutdown+0x50>)
 80118d4:	f240 4247 	movw	r2, #1095	; 0x447
 80118d8:	490e      	ldr	r1, [pc, #56]	; (8011914 <netconn_close_shutdown+0x54>)
 80118da:	480f      	ldr	r0, [pc, #60]	; (8011918 <netconn_close_shutdown+0x58>)
 80118dc:	f00d fe60 	bl	801f5a0 <iprintf>
 80118e0:	f06f 030f 	mvn.w	r3, #15
 80118e4:	e010      	b.n	8011908 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80118ea:	78fb      	ldrb	r3, [r7, #3]
 80118ec:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80118ee:	2329      	movs	r3, #41	; 0x29
 80118f0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80118f2:	f107 030c 	add.w	r3, r7, #12
 80118f6:	4619      	mov	r1, r3
 80118f8:	4808      	ldr	r0, [pc, #32]	; (801191c <netconn_close_shutdown+0x5c>)
 80118fa:	f7ff faeb 	bl	8010ed4 <netconn_apimsg>
 80118fe:	4603      	mov	r3, r0
 8011900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011904:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8011908:	4618      	mov	r0, r3
 801190a:	3730      	adds	r7, #48	; 0x30
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	08020ac8 	.word	0x08020ac8
 8011914:	08020e04 	.word	0x08020e04
 8011918:	08020b20 	.word	0x08020b20
 801191c:	08013339 	.word	0x08013339

08011920 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b082      	sub	sp, #8
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8011928:	2103      	movs	r1, #3
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f7ff ffc8 	bl	80118c0 <netconn_close_shutdown>
 8011930:	4603      	mov	r3, r0
}
 8011932:	4618      	mov	r0, r3
 8011934:	3708      	adds	r7, #8
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}

0801193a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 801193a:	b580      	push	{r7, lr}
 801193c:	b084      	sub	sp, #16
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d101      	bne.n	801194c <netconn_err+0x12>
    return ERR_OK;
 8011948:	2300      	movs	r3, #0
 801194a:	e00d      	b.n	8011968 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 801194c:	f00d fb7c 	bl	801f048 <sys_arch_protect>
 8011950:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	7a1b      	ldrb	r3, [r3, #8]
 8011956:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2200      	movs	r2, #0
 801195c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 801195e:	68f8      	ldr	r0, [r7, #12]
 8011960:	f00d fb80 	bl	801f064 <sys_arch_unprotect>
  return err;
 8011964:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011968:	4618      	mov	r0, r3
 801196a:	3710      	adds	r7, #16
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	4603      	mov	r3, r0
 8011978:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 801197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801197e:	f113 0f0d 	cmn.w	r3, #13
 8011982:	d009      	beq.n	8011998 <lwip_netconn_err_to_msg+0x28>
 8011984:	f113 0f0d 	cmn.w	r3, #13
 8011988:	dc0c      	bgt.n	80119a4 <lwip_netconn_err_to_msg+0x34>
 801198a:	f113 0f0f 	cmn.w	r3, #15
 801198e:	d007      	beq.n	80119a0 <lwip_netconn_err_to_msg+0x30>
 8011990:	f113 0f0e 	cmn.w	r3, #14
 8011994:	d002      	beq.n	801199c <lwip_netconn_err_to_msg+0x2c>
 8011996:	e005      	b.n	80119a4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8011998:	4b0a      	ldr	r3, [pc, #40]	; (80119c4 <lwip_netconn_err_to_msg+0x54>)
 801199a:	e00e      	b.n	80119ba <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 801199c:	4b0a      	ldr	r3, [pc, #40]	; (80119c8 <lwip_netconn_err_to_msg+0x58>)
 801199e:	e00c      	b.n	80119ba <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80119a0:	4b0a      	ldr	r3, [pc, #40]	; (80119cc <lwip_netconn_err_to_msg+0x5c>)
 80119a2:	e00a      	b.n	80119ba <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80119a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d005      	beq.n	80119b8 <lwip_netconn_err_to_msg+0x48>
 80119ac:	4b08      	ldr	r3, [pc, #32]	; (80119d0 <lwip_netconn_err_to_msg+0x60>)
 80119ae:	227d      	movs	r2, #125	; 0x7d
 80119b0:	4908      	ldr	r1, [pc, #32]	; (80119d4 <lwip_netconn_err_to_msg+0x64>)
 80119b2:	4809      	ldr	r0, [pc, #36]	; (80119d8 <lwip_netconn_err_to_msg+0x68>)
 80119b4:	f00d fdf4 	bl	801f5a0 <iprintf>
      return NULL;
 80119b8:	2300      	movs	r3, #0
  }
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3708      	adds	r7, #8
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	08023fcc 	.word	0x08023fcc
 80119c8:	08023fcd 	.word	0x08023fcd
 80119cc:	08023fce 	.word	0x08023fce
 80119d0:	08020e20 	.word	0x08020e20
 80119d4:	08020e54 	.word	0x08020e54
 80119d8:	08020e64 	.word	0x08020e64

080119dc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d105      	bne.n	80119f8 <lwip_netconn_is_err_msg+0x1c>
 80119ec:	4b12      	ldr	r3, [pc, #72]	; (8011a38 <lwip_netconn_is_err_msg+0x5c>)
 80119ee:	2285      	movs	r2, #133	; 0x85
 80119f0:	4912      	ldr	r1, [pc, #72]	; (8011a3c <lwip_netconn_is_err_msg+0x60>)
 80119f2:	4813      	ldr	r0, [pc, #76]	; (8011a40 <lwip_netconn_is_err_msg+0x64>)
 80119f4:	f00d fdd4 	bl	801f5a0 <iprintf>

  if (msg == &netconn_aborted) {
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	4a12      	ldr	r2, [pc, #72]	; (8011a44 <lwip_netconn_is_err_msg+0x68>)
 80119fc:	4293      	cmp	r3, r2
 80119fe:	d104      	bne.n	8011a0a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	22f3      	movs	r2, #243	; 0xf3
 8011a04:	701a      	strb	r2, [r3, #0]
    return 1;
 8011a06:	2301      	movs	r3, #1
 8011a08:	e012      	b.n	8011a30 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	4a0e      	ldr	r2, [pc, #56]	; (8011a48 <lwip_netconn_is_err_msg+0x6c>)
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	d104      	bne.n	8011a1c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	22f2      	movs	r2, #242	; 0xf2
 8011a16:	701a      	strb	r2, [r3, #0]
    return 1;
 8011a18:	2301      	movs	r3, #1
 8011a1a:	e009      	b.n	8011a30 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	4a0b      	ldr	r2, [pc, #44]	; (8011a4c <lwip_netconn_is_err_msg+0x70>)
 8011a20:	4293      	cmp	r3, r2
 8011a22:	d104      	bne.n	8011a2e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	22f1      	movs	r2, #241	; 0xf1
 8011a28:	701a      	strb	r2, [r3, #0]
    return 1;
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	e000      	b.n	8011a30 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8011a2e:	2300      	movs	r3, #0
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	3708      	adds	r7, #8
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}
 8011a38:	08020e20 	.word	0x08020e20
 8011a3c:	08020e8c 	.word	0x08020e8c
 8011a40:	08020e64 	.word	0x08020e64
 8011a44:	08023fcc 	.word	0x08023fcc
 8011a48:	08023fcd 	.word	0x08023fcd
 8011a4c:	08023fce 	.word	0x08023fce

08011a50 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b088      	sub	sp, #32
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	60f8      	str	r0, [r7, #12]
 8011a58:	60b9      	str	r1, [r7, #8]
 8011a5a:	607a      	str	r2, [r7, #4]
 8011a5c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d105      	bne.n	8011a70 <recv_udp+0x20>
 8011a64:	4b34      	ldr	r3, [pc, #208]	; (8011b38 <recv_udp+0xe8>)
 8011a66:	22e5      	movs	r2, #229	; 0xe5
 8011a68:	4934      	ldr	r1, [pc, #208]	; (8011b3c <recv_udp+0xec>)
 8011a6a:	4835      	ldr	r0, [pc, #212]	; (8011b40 <recv_udp+0xf0>)
 8011a6c:	f00d fd98 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d105      	bne.n	8011a82 <recv_udp+0x32>
 8011a76:	4b30      	ldr	r3, [pc, #192]	; (8011b38 <recv_udp+0xe8>)
 8011a78:	22e6      	movs	r2, #230	; 0xe6
 8011a7a:	4932      	ldr	r1, [pc, #200]	; (8011b44 <recv_udp+0xf4>)
 8011a7c:	4830      	ldr	r0, [pc, #192]	; (8011b40 <recv_udp+0xf0>)
 8011a7e:	f00d fd8f 	bl	801f5a0 <iprintf>
  conn = (struct netconn *)arg;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8011a86:	69fb      	ldr	r3, [r7, #28]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d103      	bne.n	8011a94 <recv_udp+0x44>
    pbuf_free(p);
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f003 fb37 	bl	8015100 <pbuf_free>
    return;
 8011a92:	e04d      	b.n	8011b30 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	68ba      	ldr	r2, [r7, #8]
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d005      	beq.n	8011aaa <recv_udp+0x5a>
 8011a9e:	4b26      	ldr	r3, [pc, #152]	; (8011b38 <recv_udp+0xe8>)
 8011aa0:	22ee      	movs	r2, #238	; 0xee
 8011aa2:	4929      	ldr	r1, [pc, #164]	; (8011b48 <recv_udp+0xf8>)
 8011aa4:	4826      	ldr	r0, [pc, #152]	; (8011b40 <recv_udp+0xf0>)
 8011aa6:	f00d fd7b 	bl	801f5a0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011aaa:	69fb      	ldr	r3, [r7, #28]
 8011aac:	3310      	adds	r3, #16
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f00d f9af 	bl	801ee12 <sys_mbox_valid>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d103      	bne.n	8011ac2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f003 fb20 	bl	8015100 <pbuf_free>
    return;
 8011ac0:	e036      	b.n	8011b30 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011ac2:	2006      	movs	r0, #6
 8011ac4:	f002 fc02 	bl	80142cc <memp_malloc>
 8011ac8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d103      	bne.n	8011ad8 <recv_udp+0x88>
    pbuf_free(p);
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f003 fb15 	bl	8015100 <pbuf_free>
    return;
 8011ad6:	e02b      	b.n	8011b30 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8011ad8:	69bb      	ldr	r3, [r7, #24]
 8011ada:	687a      	ldr	r2, [r7, #4]
 8011adc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011ade:	69bb      	ldr	r3, [r7, #24]
 8011ae0:	687a      	ldr	r2, [r7, #4]
 8011ae2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d002      	beq.n	8011af0 <recv_udp+0xa0>
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	e000      	b.n	8011af2 <recv_udp+0xa2>
 8011af0:	2300      	movs	r3, #0
 8011af2:	69ba      	ldr	r2, [r7, #24]
 8011af4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011af6:	69bb      	ldr	r3, [r7, #24]
 8011af8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8011afa:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	891b      	ldrh	r3, [r3, #8]
 8011b00:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8011b02:	69fb      	ldr	r3, [r7, #28]
 8011b04:	3310      	adds	r3, #16
 8011b06:	69b9      	ldr	r1, [r7, #24]
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f00d f90d 	bl	801ed28 <sys_mbox_trypost>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d003      	beq.n	8011b1c <recv_udp+0xcc>
    netbuf_delete(buf);
 8011b14:	69b8      	ldr	r0, [r7, #24]
 8011b16:	f001 fcaf 	bl	8013478 <netbuf_delete>
    return;
 8011b1a:	e009      	b.n	8011b30 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011b1c:	69fb      	ldr	r3, [r7, #28]
 8011b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d005      	beq.n	8011b30 <recv_udp+0xe0>
 8011b24:	69fb      	ldr	r3, [r7, #28]
 8011b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b28:	8afa      	ldrh	r2, [r7, #22]
 8011b2a:	2100      	movs	r1, #0
 8011b2c:	69f8      	ldr	r0, [r7, #28]
 8011b2e:	4798      	blx	r3
  }
}
 8011b30:	3720      	adds	r7, #32
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}
 8011b36:	bf00      	nop
 8011b38:	08020e20 	.word	0x08020e20
 8011b3c:	08020e98 	.word	0x08020e98
 8011b40:	08020e64 	.word	0x08020e64
 8011b44:	08020ebc 	.word	0x08020ebc
 8011b48:	08020edc 	.word	0x08020edc

08011b4c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b088      	sub	sp, #32
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	60f8      	str	r0, [r7, #12]
 8011b54:	60b9      	str	r1, [r7, #8]
 8011b56:	607a      	str	r2, [r7, #4]
 8011b58:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d106      	bne.n	8011b6e <recv_tcp+0x22>
 8011b60:	4b36      	ldr	r3, [pc, #216]	; (8011c3c <recv_tcp+0xf0>)
 8011b62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8011b66:	4936      	ldr	r1, [pc, #216]	; (8011c40 <recv_tcp+0xf4>)
 8011b68:	4836      	ldr	r0, [pc, #216]	; (8011c44 <recv_tcp+0xf8>)
 8011b6a:	f00d fd19 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d106      	bne.n	8011b82 <recv_tcp+0x36>
 8011b74:	4b31      	ldr	r3, [pc, #196]	; (8011c3c <recv_tcp+0xf0>)
 8011b76:	f240 122d 	movw	r2, #301	; 0x12d
 8011b7a:	4933      	ldr	r1, [pc, #204]	; (8011c48 <recv_tcp+0xfc>)
 8011b7c:	4831      	ldr	r0, [pc, #196]	; (8011c44 <recv_tcp+0xf8>)
 8011b7e:	f00d fd0f 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8011b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d006      	beq.n	8011b98 <recv_tcp+0x4c>
 8011b8a:	4b2c      	ldr	r3, [pc, #176]	; (8011c3c <recv_tcp+0xf0>)
 8011b8c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8011b90:	492e      	ldr	r1, [pc, #184]	; (8011c4c <recv_tcp+0x100>)
 8011b92:	482c      	ldr	r0, [pc, #176]	; (8011c44 <recv_tcp+0xf8>)
 8011b94:	f00d fd04 	bl	801f5a0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d102      	bne.n	8011ba8 <recv_tcp+0x5c>
    return ERR_VAL;
 8011ba2:	f06f 0305 	mvn.w	r3, #5
 8011ba6:	e045      	b.n	8011c34 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	685b      	ldr	r3, [r3, #4]
 8011bac:	68ba      	ldr	r2, [r7, #8]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d006      	beq.n	8011bc0 <recv_tcp+0x74>
 8011bb2:	4b22      	ldr	r3, [pc, #136]	; (8011c3c <recv_tcp+0xf0>)
 8011bb4:	f240 1235 	movw	r2, #309	; 0x135
 8011bb8:	4925      	ldr	r1, [pc, #148]	; (8011c50 <recv_tcp+0x104>)
 8011bba:	4822      	ldr	r0, [pc, #136]	; (8011c44 <recv_tcp+0xf8>)
 8011bbc:	f00d fcf0 	bl	801f5a0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011bc0:	697b      	ldr	r3, [r7, #20]
 8011bc2:	3310      	adds	r3, #16
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f00d f924 	bl	801ee12 <sys_mbox_valid>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d10d      	bne.n	8011bec <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d008      	beq.n	8011be8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	891b      	ldrh	r3, [r3, #8]
 8011bda:	4619      	mov	r1, r3
 8011bdc:	68b8      	ldr	r0, [r7, #8]
 8011bde:	f004 fa57 	bl	8016090 <tcp_recved>
      pbuf_free(p);
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f003 fa8c 	bl	8015100 <pbuf_free>
    }
    return ERR_OK;
 8011be8:	2300      	movs	r3, #0
 8011bea:	e023      	b.n	8011c34 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d005      	beq.n	8011bfe <recv_tcp+0xb2>
    msg = p;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	891b      	ldrh	r3, [r3, #8]
 8011bfa:	83fb      	strh	r3, [r7, #30]
 8011bfc:	e003      	b.n	8011c06 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8011bfe:	4b15      	ldr	r3, [pc, #84]	; (8011c54 <recv_tcp+0x108>)
 8011c00:	61bb      	str	r3, [r7, #24]
    len = 0;
 8011c02:	2300      	movs	r3, #0
 8011c04:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	3310      	adds	r3, #16
 8011c0a:	69b9      	ldr	r1, [r7, #24]
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f00d f88b 	bl	801ed28 <sys_mbox_trypost>
 8011c12:	4603      	mov	r3, r0
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d002      	beq.n	8011c1e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c1c:	e00a      	b.n	8011c34 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d005      	beq.n	8011c32 <recv_tcp+0xe6>
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c2a:	8bfa      	ldrh	r2, [r7, #30]
 8011c2c:	2100      	movs	r1, #0
 8011c2e:	6978      	ldr	r0, [r7, #20]
 8011c30:	4798      	blx	r3
  }

  return ERR_OK;
 8011c32:	2300      	movs	r3, #0
}
 8011c34:	4618      	mov	r0, r3
 8011c36:	3720      	adds	r7, #32
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	08020e20 	.word	0x08020e20
 8011c40:	08020efc 	.word	0x08020efc
 8011c44:	08020e64 	.word	0x08020e64
 8011c48:	08020f20 	.word	0x08020f20
 8011c4c:	08020f40 	.word	0x08020f40
 8011c50:	08020f58 	.word	0x08020f58
 8011c54:	08023fce 	.word	0x08023fce

08011c58 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b084      	sub	sp, #16
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d106      	bne.n	8011c7a <poll_tcp+0x22>
 8011c6c:	4b29      	ldr	r3, [pc, #164]	; (8011d14 <poll_tcp+0xbc>)
 8011c6e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8011c72:	4929      	ldr	r1, [pc, #164]	; (8011d18 <poll_tcp+0xc0>)
 8011c74:	4829      	ldr	r0, [pc, #164]	; (8011d1c <poll_tcp+0xc4>)
 8011c76:	f00d fc93 	bl	801f5a0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	785b      	ldrb	r3, [r3, #1]
 8011c7e:	2b01      	cmp	r3, #1
 8011c80:	d104      	bne.n	8011c8c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011c82:	2101      	movs	r1, #1
 8011c84:	68f8      	ldr	r0, [r7, #12]
 8011c86:	f001 f8ff 	bl	8012e88 <lwip_netconn_do_writemore>
 8011c8a:	e016      	b.n	8011cba <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	785b      	ldrb	r3, [r3, #1]
 8011c90:	2b04      	cmp	r3, #4
 8011c92:	d112      	bne.n	8011cba <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	6a1b      	ldr	r3, [r3, #32]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d00a      	beq.n	8011cb2 <poll_tcp+0x5a>
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	6a1b      	ldr	r3, [r3, #32]
 8011ca0:	7a5b      	ldrb	r3, [r3, #9]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d005      	beq.n	8011cb2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	6a1b      	ldr	r3, [r3, #32]
 8011caa:	7a5a      	ldrb	r2, [r3, #9]
 8011cac:	3a01      	subs	r2, #1
 8011cae:	b2d2      	uxtb	r2, r2
 8011cb0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011cb2:	2101      	movs	r1, #1
 8011cb4:	68f8      	ldr	r0, [r7, #12]
 8011cb6:	f000 fbf7 	bl	80124a8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	7f1b      	ldrb	r3, [r3, #28]
 8011cbe:	f003 0310 	and.w	r3, r3, #16
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d021      	beq.n	8011d0a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d01d      	beq.n	8011d0a <poll_tcp+0xb2>
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	685b      	ldr	r3, [r3, #4]
 8011cd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011cd6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8011cda:	d316      	bcc.n	8011d0a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	685b      	ldr	r3, [r3, #4]
 8011ce0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011ce4:	2b04      	cmp	r3, #4
 8011ce6:	d810      	bhi.n	8011d0a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	7f1b      	ldrb	r3, [r3, #28]
 8011cec:	f023 0310 	bic.w	r3, r3, #16
 8011cf0:	b2da      	uxtb	r2, r3
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d005      	beq.n	8011d0a <poll_tcp+0xb2>
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d02:	2200      	movs	r2, #0
 8011d04:	2102      	movs	r1, #2
 8011d06:	68f8      	ldr	r0, [r7, #12]
 8011d08:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011d0a:	2300      	movs	r3, #0
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3710      	adds	r7, #16
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}
 8011d14:	08020e20 	.word	0x08020e20
 8011d18:	08020f78 	.word	0x08020f78
 8011d1c:	08020e64 	.word	0x08020e64

08011d20 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b086      	sub	sp, #24
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	60f8      	str	r0, [r7, #12]
 8011d28:	60b9      	str	r1, [r7, #8]
 8011d2a:	4613      	mov	r3, r2
 8011d2c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011d32:	697b      	ldr	r3, [r7, #20]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d106      	bne.n	8011d46 <sent_tcp+0x26>
 8011d38:	4b20      	ldr	r3, [pc, #128]	; (8011dbc <sent_tcp+0x9c>)
 8011d3a:	f240 1293 	movw	r2, #403	; 0x193
 8011d3e:	4920      	ldr	r1, [pc, #128]	; (8011dc0 <sent_tcp+0xa0>)
 8011d40:	4820      	ldr	r0, [pc, #128]	; (8011dc4 <sent_tcp+0xa4>)
 8011d42:	f00d fc2d 	bl	801f5a0 <iprintf>

  if (conn) {
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d032      	beq.n	8011db2 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8011d4c:	697b      	ldr	r3, [r7, #20]
 8011d4e:	785b      	ldrb	r3, [r3, #1]
 8011d50:	2b01      	cmp	r3, #1
 8011d52:	d104      	bne.n	8011d5e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011d54:	2101      	movs	r1, #1
 8011d56:	6978      	ldr	r0, [r7, #20]
 8011d58:	f001 f896 	bl	8012e88 <lwip_netconn_do_writemore>
 8011d5c:	e007      	b.n	8011d6e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	785b      	ldrb	r3, [r3, #1]
 8011d62:	2b04      	cmp	r3, #4
 8011d64:	d103      	bne.n	8011d6e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011d66:	2101      	movs	r1, #1
 8011d68:	6978      	ldr	r0, [r7, #20]
 8011d6a:	f000 fb9d 	bl	80124a8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	685b      	ldr	r3, [r3, #4]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d01d      	beq.n	8011db2 <sent_tcp+0x92>
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011d7e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8011d82:	d316      	bcc.n	8011db2 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011d8c:	2b04      	cmp	r3, #4
 8011d8e:	d810      	bhi.n	8011db2 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	7f1b      	ldrb	r3, [r3, #28]
 8011d94:	f023 0310 	bic.w	r3, r3, #16
 8011d98:	b2da      	uxtb	r2, r3
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8011d9e:	697b      	ldr	r3, [r7, #20]
 8011da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d005      	beq.n	8011db2 <sent_tcp+0x92>
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011daa:	88fa      	ldrh	r2, [r7, #6]
 8011dac:	2102      	movs	r1, #2
 8011dae:	6978      	ldr	r0, [r7, #20]
 8011db0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011db2:	2300      	movs	r3, #0
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	3718      	adds	r7, #24
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	08020e20 	.word	0x08020e20
 8011dc0:	08020f78 	.word	0x08020f78
 8011dc4:	08020e64 	.word	0x08020e64

08011dc8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b088      	sub	sp, #32
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d106      	bne.n	8011dec <err_tcp+0x24>
 8011dde:	4b5f      	ldr	r3, [pc, #380]	; (8011f5c <err_tcp+0x194>)
 8011de0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011de4:	495e      	ldr	r1, [pc, #376]	; (8011f60 <err_tcp+0x198>)
 8011de6:	485f      	ldr	r0, [pc, #380]	; (8011f64 <err_tcp+0x19c>)
 8011de8:	f00d fbda 	bl	801f5a0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011dec:	f00d f92c 	bl	801f048 <sys_arch_protect>
 8011df0:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8011df2:	69fb      	ldr	r3, [r7, #28]
 8011df4:	2200      	movs	r2, #0
 8011df6:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8011df8:	69fb      	ldr	r3, [r7, #28]
 8011dfa:	78fa      	ldrb	r2, [r7, #3]
 8011dfc:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8011dfe:	69fb      	ldr	r3, [r7, #28]
 8011e00:	7f1b      	ldrb	r3, [r3, #28]
 8011e02:	f043 0301 	orr.w	r3, r3, #1
 8011e06:	b2da      	uxtb	r2, r3
 8011e08:	69fb      	ldr	r3, [r7, #28]
 8011e0a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011e0c:	69fb      	ldr	r3, [r7, #28]
 8011e0e:	785b      	ldrb	r3, [r3, #1]
 8011e10:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8011e12:	69fb      	ldr	r3, [r7, #28]
 8011e14:	2200      	movs	r2, #0
 8011e16:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011e18:	69b8      	ldr	r0, [r7, #24]
 8011e1a:	f00d f923 	bl	801f064 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011e1e:	69fb      	ldr	r3, [r7, #28]
 8011e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d005      	beq.n	8011e32 <err_tcp+0x6a>
 8011e26:	69fb      	ldr	r3, [r7, #28]
 8011e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	2104      	movs	r1, #4
 8011e2e:	69f8      	ldr	r0, [r7, #28]
 8011e30:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011e32:	69fb      	ldr	r3, [r7, #28]
 8011e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d005      	beq.n	8011e46 <err_tcp+0x7e>
 8011e3a:	69fb      	ldr	r3, [r7, #28]
 8011e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e3e:	2200      	movs	r2, #0
 8011e40:	2100      	movs	r1, #0
 8011e42:	69f8      	ldr	r0, [r7, #28]
 8011e44:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011e46:	69fb      	ldr	r3, [r7, #28]
 8011e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d005      	beq.n	8011e5a <err_tcp+0x92>
 8011e4e:	69fb      	ldr	r3, [r7, #28]
 8011e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e52:	2200      	movs	r2, #0
 8011e54:	2102      	movs	r1, #2
 8011e56:	69f8      	ldr	r0, [r7, #28]
 8011e58:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7ff fd86 	bl	8011970 <lwip_netconn_err_to_msg>
 8011e64:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011e66:	69fb      	ldr	r3, [r7, #28]
 8011e68:	3310      	adds	r3, #16
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f00c ffd1 	bl	801ee12 <sys_mbox_valid>
 8011e70:	4603      	mov	r3, r0
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d005      	beq.n	8011e82 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8011e76:	69fb      	ldr	r3, [r7, #28]
 8011e78:	3310      	adds	r3, #16
 8011e7a:	6939      	ldr	r1, [r7, #16]
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f00c ff53 	bl	801ed28 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011e82:	69fb      	ldr	r3, [r7, #28]
 8011e84:	3314      	adds	r3, #20
 8011e86:	4618      	mov	r0, r3
 8011e88:	f00c ffc3 	bl	801ee12 <sys_mbox_valid>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d005      	beq.n	8011e9e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8011e92:	69fb      	ldr	r3, [r7, #28]
 8011e94:	3314      	adds	r3, #20
 8011e96:	6939      	ldr	r1, [r7, #16]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f00c ff45 	bl	801ed28 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8011e9e:	7dfb      	ldrb	r3, [r7, #23]
 8011ea0:	2b01      	cmp	r3, #1
 8011ea2:	d005      	beq.n	8011eb0 <err_tcp+0xe8>
 8011ea4:	7dfb      	ldrb	r3, [r7, #23]
 8011ea6:	2b04      	cmp	r3, #4
 8011ea8:	d002      	beq.n	8011eb0 <err_tcp+0xe8>
 8011eaa:	7dfb      	ldrb	r3, [r7, #23]
 8011eac:	2b03      	cmp	r3, #3
 8011eae:	d143      	bne.n	8011f38 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8011eb0:	69fb      	ldr	r3, [r7, #28]
 8011eb2:	7f1b      	ldrb	r3, [r3, #28]
 8011eb4:	f003 0304 	and.w	r3, r3, #4
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	bf14      	ite	ne
 8011ebc:	2301      	movne	r3, #1
 8011ebe:	2300      	moveq	r3, #0
 8011ec0:	b2db      	uxtb	r3, r3
 8011ec2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8011ec4:	69fb      	ldr	r3, [r7, #28]
 8011ec6:	7f1b      	ldrb	r3, [r3, #28]
 8011ec8:	f023 0304 	bic.w	r3, r3, #4
 8011ecc:	b2da      	uxtb	r2, r3
 8011ece:	69fb      	ldr	r3, [r7, #28]
 8011ed0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d13b      	bne.n	8011f50 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	6a1b      	ldr	r3, [r3, #32]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d106      	bne.n	8011eee <err_tcp+0x126>
 8011ee0:	4b1e      	ldr	r3, [pc, #120]	; (8011f5c <err_tcp+0x194>)
 8011ee2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011ee6:	4920      	ldr	r1, [pc, #128]	; (8011f68 <err_tcp+0x1a0>)
 8011ee8:	481e      	ldr	r0, [pc, #120]	; (8011f64 <err_tcp+0x19c>)
 8011eea:	f00d fb59 	bl	801f5a0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8011eee:	7dfb      	ldrb	r3, [r7, #23]
 8011ef0:	2b04      	cmp	r3, #4
 8011ef2:	d104      	bne.n	8011efe <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8011ef4:	69fb      	ldr	r3, [r7, #28]
 8011ef6:	6a1b      	ldr	r3, [r3, #32]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	711a      	strb	r2, [r3, #4]
 8011efc:	e003      	b.n	8011f06 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8011efe:	69fb      	ldr	r3, [r7, #28]
 8011f00:	6a1b      	ldr	r3, [r3, #32]
 8011f02:	78fa      	ldrb	r2, [r7, #3]
 8011f04:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	6a1b      	ldr	r3, [r3, #32]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	330c      	adds	r3, #12
 8011f0e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8011f10:	68b8      	ldr	r0, [r7, #8]
 8011f12:	f00d f80f 	bl	801ef34 <sys_sem_valid>
 8011f16:	4603      	mov	r3, r0
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d106      	bne.n	8011f2a <err_tcp+0x162>
 8011f1c:	4b0f      	ldr	r3, [pc, #60]	; (8011f5c <err_tcp+0x194>)
 8011f1e:	f240 12ef 	movw	r2, #495	; 0x1ef
 8011f22:	4912      	ldr	r1, [pc, #72]	; (8011f6c <err_tcp+0x1a4>)
 8011f24:	480f      	ldr	r0, [pc, #60]	; (8011f64 <err_tcp+0x19c>)
 8011f26:	f00d fb3b 	bl	801f5a0 <iprintf>
      conn->current_msg = NULL;
 8011f2a:	69fb      	ldr	r3, [r7, #28]
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8011f30:	68b8      	ldr	r0, [r7, #8]
 8011f32:	f00c ffe5 	bl	801ef00 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8011f36:	e00b      	b.n	8011f50 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8011f38:	69fb      	ldr	r3, [r7, #28]
 8011f3a:	6a1b      	ldr	r3, [r3, #32]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d008      	beq.n	8011f52 <err_tcp+0x18a>
 8011f40:	4b06      	ldr	r3, [pc, #24]	; (8011f5c <err_tcp+0x194>)
 8011f42:	f240 12f7 	movw	r2, #503	; 0x1f7
 8011f46:	490a      	ldr	r1, [pc, #40]	; (8011f70 <err_tcp+0x1a8>)
 8011f48:	4806      	ldr	r0, [pc, #24]	; (8011f64 <err_tcp+0x19c>)
 8011f4a:	f00d fb29 	bl	801f5a0 <iprintf>
  }
}
 8011f4e:	e000      	b.n	8011f52 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8011f50:	bf00      	nop
}
 8011f52:	bf00      	nop
 8011f54:	3720      	adds	r7, #32
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}
 8011f5a:	bf00      	nop
 8011f5c:	08020e20 	.word	0x08020e20
 8011f60:	08020f78 	.word	0x08020f78
 8011f64:	08020e64 	.word	0x08020e64
 8011f68:	08020f88 	.word	0x08020f88
 8011f6c:	08020fa4 	.word	0x08020fa4
 8011f70:	08020fc0 	.word	0x08020fc0

08011f74 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b084      	sub	sp, #16
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	685b      	ldr	r3, [r3, #4]
 8011f80:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8011f82:	6879      	ldr	r1, [r7, #4]
 8011f84:	68f8      	ldr	r0, [r7, #12]
 8011f86:	f005 f861 	bl	801704c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8011f8a:	490a      	ldr	r1, [pc, #40]	; (8011fb4 <setup_tcp+0x40>)
 8011f8c:	68f8      	ldr	r0, [r7, #12]
 8011f8e:	f005 f86f 	bl	8017070 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8011f92:	4909      	ldr	r1, [pc, #36]	; (8011fb8 <setup_tcp+0x44>)
 8011f94:	68f8      	ldr	r0, [r7, #12]
 8011f96:	f005 f88d 	bl	80170b4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8011f9a:	2202      	movs	r2, #2
 8011f9c:	4907      	ldr	r1, [pc, #28]	; (8011fbc <setup_tcp+0x48>)
 8011f9e:	68f8      	ldr	r0, [r7, #12]
 8011fa0:	f005 f8e4 	bl	801716c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8011fa4:	4906      	ldr	r1, [pc, #24]	; (8011fc0 <setup_tcp+0x4c>)
 8011fa6:	68f8      	ldr	r0, [r7, #12]
 8011fa8:	f005 f8a6 	bl	80170f8 <tcp_err>
}
 8011fac:	bf00      	nop
 8011fae:	3710      	adds	r7, #16
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	08011b4d 	.word	0x08011b4d
 8011fb8:	08011d21 	.word	0x08011d21
 8011fbc:	08011c59 	.word	0x08011c59
 8011fc0:	08011dc9 	.word	0x08011dc9

08011fc4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8011fc4:	b590      	push	{r4, r7, lr}
 8011fc6:	b089      	sub	sp, #36	; 0x24
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	60f8      	str	r0, [r7, #12]
 8011fcc:	60b9      	str	r1, [r7, #8]
 8011fce:	4613      	mov	r3, r2
 8011fd0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8011fd6:	69fb      	ldr	r3, [r7, #28]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d102      	bne.n	8011fe2 <accept_function+0x1e>
    return ERR_VAL;
 8011fdc:	f06f 0305 	mvn.w	r3, #5
 8011fe0:	e0a1      	b.n	8012126 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	3314      	adds	r3, #20
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f00c ff13 	bl	801ee12 <sys_mbox_valid>
 8011fec:	4603      	mov	r3, r0
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d102      	bne.n	8011ff8 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8011ff2:	f06f 0305 	mvn.w	r3, #5
 8011ff6:	e096      	b.n	8012126 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d11b      	bne.n	8012036 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8011ffe:	69fb      	ldr	r3, [r7, #28]
 8012000:	f103 0414 	add.w	r4, r3, #20
 8012004:	f06f 000c 	mvn.w	r0, #12
 8012008:	f7ff fcb2 	bl	8011970 <lwip_netconn_err_to_msg>
 801200c:	4603      	mov	r3, r0
 801200e:	4619      	mov	r1, r3
 8012010:	4620      	mov	r0, r4
 8012012:	f00c fe89 	bl	801ed28 <sys_mbox_trypost>
 8012016:	4603      	mov	r3, r0
 8012018:	2b00      	cmp	r3, #0
 801201a:	d109      	bne.n	8012030 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801201c:	69fb      	ldr	r3, [r7, #28]
 801201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012020:	2b00      	cmp	r3, #0
 8012022:	d005      	beq.n	8012030 <accept_function+0x6c>
 8012024:	69fb      	ldr	r3, [r7, #28]
 8012026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012028:	2200      	movs	r2, #0
 801202a:	2100      	movs	r1, #0
 801202c:	69f8      	ldr	r0, [r7, #28]
 801202e:	4798      	blx	r3
    }
    return ERR_VAL;
 8012030:	f06f 0305 	mvn.w	r3, #5
 8012034:	e077      	b.n	8012126 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8012036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d006      	beq.n	801204c <accept_function+0x88>
 801203e:	4b3c      	ldr	r3, [pc, #240]	; (8012130 <accept_function+0x16c>)
 8012040:	f240 222a 	movw	r2, #554	; 0x22a
 8012044:	493b      	ldr	r1, [pc, #236]	; (8012134 <accept_function+0x170>)
 8012046:	483c      	ldr	r0, [pc, #240]	; (8012138 <accept_function+0x174>)
 8012048:	f00d faaa 	bl	801f5a0 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 801204c:	69fb      	ldr	r3, [r7, #28]
 801204e:	781a      	ldrb	r2, [r3, #0]
 8012050:	69fb      	ldr	r3, [r7, #28]
 8012052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012054:	4619      	mov	r1, r3
 8012056:	4610      	mov	r0, r2
 8012058:	f000 f8f0 	bl	801223c <netconn_alloc>
 801205c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 801205e:	69bb      	ldr	r3, [r7, #24]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d11b      	bne.n	801209c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8012064:	69fb      	ldr	r3, [r7, #28]
 8012066:	f103 0414 	add.w	r4, r3, #20
 801206a:	f06f 000c 	mvn.w	r0, #12
 801206e:	f7ff fc7f 	bl	8011970 <lwip_netconn_err_to_msg>
 8012072:	4603      	mov	r3, r0
 8012074:	4619      	mov	r1, r3
 8012076:	4620      	mov	r0, r4
 8012078:	f00c fe56 	bl	801ed28 <sys_mbox_trypost>
 801207c:	4603      	mov	r3, r0
 801207e:	2b00      	cmp	r3, #0
 8012080:	d109      	bne.n	8012096 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012082:	69fb      	ldr	r3, [r7, #28]
 8012084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012086:	2b00      	cmp	r3, #0
 8012088:	d005      	beq.n	8012096 <accept_function+0xd2>
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801208e:	2200      	movs	r2, #0
 8012090:	2100      	movs	r1, #0
 8012092:	69f8      	ldr	r0, [r7, #28]
 8012094:	4798      	blx	r3
    }
    return ERR_MEM;
 8012096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801209a:	e044      	b.n	8012126 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 801209c:	69bb      	ldr	r3, [r7, #24]
 801209e:	68ba      	ldr	r2, [r7, #8]
 80120a0:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80120a2:	69b8      	ldr	r0, [r7, #24]
 80120a4:	f7ff ff66 	bl	8011f74 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80120a8:	69fb      	ldr	r3, [r7, #28]
 80120aa:	3314      	adds	r3, #20
 80120ac:	69b9      	ldr	r1, [r7, #24]
 80120ae:	4618      	mov	r0, r3
 80120b0:	f00c fe3a 	bl	801ed28 <sys_mbox_trypost>
 80120b4:	4603      	mov	r3, r0
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d02a      	beq.n	8012110 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80120ba:	69bb      	ldr	r3, [r7, #24]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80120c0:	2100      	movs	r1, #0
 80120c2:	6978      	ldr	r0, [r7, #20]
 80120c4:	f004 ffc2 	bl	801704c <tcp_arg>
    tcp_recv(pcb, NULL);
 80120c8:	2100      	movs	r1, #0
 80120ca:	6978      	ldr	r0, [r7, #20]
 80120cc:	f004 ffd0 	bl	8017070 <tcp_recv>
    tcp_sent(pcb, NULL);
 80120d0:	2100      	movs	r1, #0
 80120d2:	6978      	ldr	r0, [r7, #20]
 80120d4:	f004 ffee 	bl	80170b4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80120d8:	2200      	movs	r2, #0
 80120da:	2100      	movs	r1, #0
 80120dc:	6978      	ldr	r0, [r7, #20]
 80120de:	f005 f845 	bl	801716c <tcp_poll>
    tcp_err(pcb, NULL);
 80120e2:	2100      	movs	r1, #0
 80120e4:	6978      	ldr	r0, [r7, #20]
 80120e6:	f005 f807 	bl	80170f8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80120ea:	69bb      	ldr	r3, [r7, #24]
 80120ec:	2200      	movs	r2, #0
 80120ee:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80120f0:	69bb      	ldr	r3, [r7, #24]
 80120f2:	3310      	adds	r3, #16
 80120f4:	4618      	mov	r0, r3
 80120f6:	f00c fe05 	bl	801ed04 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80120fa:	69bb      	ldr	r3, [r7, #24]
 80120fc:	3310      	adds	r3, #16
 80120fe:	4618      	mov	r0, r3
 8012100:	f00c fe98 	bl	801ee34 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8012104:	69b8      	ldr	r0, [r7, #24]
 8012106:	f000 f907 	bl	8012318 <netconn_free>
    return ERR_MEM;
 801210a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801210e:	e00a      	b.n	8012126 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012110:	69fb      	ldr	r3, [r7, #28]
 8012112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012114:	2b00      	cmp	r3, #0
 8012116:	d005      	beq.n	8012124 <accept_function+0x160>
 8012118:	69fb      	ldr	r3, [r7, #28]
 801211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801211c:	2200      	movs	r2, #0
 801211e:	2100      	movs	r1, #0
 8012120:	69f8      	ldr	r0, [r7, #28]
 8012122:	4798      	blx	r3
  }

  return ERR_OK;
 8012124:	2300      	movs	r3, #0
}
 8012126:	4618      	mov	r0, r3
 8012128:	3724      	adds	r7, #36	; 0x24
 801212a:	46bd      	mov	sp, r7
 801212c:	bd90      	pop	{r4, r7, pc}
 801212e:	bf00      	nop
 8012130:	08020e20 	.word	0x08020e20
 8012134:	08020fdc 	.word	0x08020fdc
 8012138:	08020e64 	.word	0x08020e64

0801213c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 801213c:	b590      	push	{r4, r7, lr}
 801213e:	b085      	sub	sp, #20
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8012144:	2300      	movs	r3, #0
 8012146:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d006      	beq.n	8012160 <pcb_new+0x24>
 8012152:	4b2b      	ldr	r3, [pc, #172]	; (8012200 <pcb_new+0xc4>)
 8012154:	f240 2265 	movw	r2, #613	; 0x265
 8012158:	492a      	ldr	r1, [pc, #168]	; (8012204 <pcb_new+0xc8>)
 801215a:	482b      	ldr	r0, [pc, #172]	; (8012208 <pcb_new+0xcc>)
 801215c:	f00d fa20 	bl	801f5a0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	781b      	ldrb	r3, [r3, #0]
 8012166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801216a:	2b10      	cmp	r3, #16
 801216c:	d022      	beq.n	80121b4 <pcb_new+0x78>
 801216e:	2b20      	cmp	r3, #32
 8012170:	d133      	bne.n	80121da <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681c      	ldr	r4, [r3, #0]
 8012176:	7bfb      	ldrb	r3, [r7, #15]
 8012178:	4618      	mov	r0, r3
 801217a:	f00a fa9e 	bl	801c6ba <udp_new_ip_type>
 801217e:	4603      	mov	r3, r0
 8012180:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d02a      	beq.n	80121e2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	2b22      	cmp	r3, #34	; 0x22
 8012194:	d104      	bne.n	80121a0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	685b      	ldr	r3, [r3, #4]
 801219c:	2201      	movs	r2, #1
 801219e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	6858      	ldr	r0, [r3, #4]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	461a      	mov	r2, r3
 80121ac:	4917      	ldr	r1, [pc, #92]	; (801220c <pcb_new+0xd0>)
 80121ae:	f00a fa0b 	bl	801c5c8 <udp_recv>
      }
      break;
 80121b2:	e016      	b.n	80121e2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681c      	ldr	r4, [r3, #0]
 80121b8:	7bfb      	ldrb	r3, [r7, #15]
 80121ba:	4618      	mov	r0, r3
 80121bc:	f004 ff38 	bl	8017030 <tcp_new_ip_type>
 80121c0:	4603      	mov	r3, r0
 80121c2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	685b      	ldr	r3, [r3, #4]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d00b      	beq.n	80121e6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7ff fece 	bl	8011f74 <setup_tcp>
      }
      break;
 80121d8:	e005      	b.n	80121e6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	22fa      	movs	r2, #250	; 0xfa
 80121de:	711a      	strb	r2, [r3, #4]
      return;
 80121e0:	e00a      	b.n	80121f8 <pcb_new+0xbc>
      break;
 80121e2:	bf00      	nop
 80121e4:	e000      	b.n	80121e8 <pcb_new+0xac>
      break;
 80121e6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d102      	bne.n	80121f8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	22ff      	movs	r2, #255	; 0xff
 80121f6:	711a      	strb	r2, [r3, #4]
  }
}
 80121f8:	3714      	adds	r7, #20
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd90      	pop	{r4, r7, pc}
 80121fe:	bf00      	nop
 8012200:	08020e20 	.word	0x08020e20
 8012204:	08021004 	.word	0x08021004
 8012208:	08020e64 	.word	0x08020e64
 801220c:	08011a51 	.word	0x08011a51

08012210 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b084      	sub	sp, #16
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	2200      	movs	r2, #0
 8012220:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	685b      	ldr	r3, [r3, #4]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d102      	bne.n	8012232 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 801222c:	68f8      	ldr	r0, [r7, #12]
 801222e:	f7ff ff85 	bl	801213c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8012232:	bf00      	nop
 8012234:	3710      	adds	r7, #16
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}
	...

0801223c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b086      	sub	sp, #24
 8012240:	af00      	add	r7, sp, #0
 8012242:	4603      	mov	r3, r0
 8012244:	6039      	str	r1, [r7, #0]
 8012246:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8012248:	2300      	movs	r3, #0
 801224a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 801224c:	2007      	movs	r0, #7
 801224e:	f002 f83d 	bl	80142cc <memp_malloc>
 8012252:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d101      	bne.n	801225e <netconn_alloc+0x22>
    return NULL;
 801225a:	2300      	movs	r3, #0
 801225c:	e052      	b.n	8012304 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	2200      	movs	r2, #0
 8012262:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	79fa      	ldrb	r2, [r7, #7]
 8012268:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	2200      	movs	r2, #0
 801226e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8012270:	79fb      	ldrb	r3, [r7, #7]
 8012272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012276:	2b10      	cmp	r3, #16
 8012278:	d004      	beq.n	8012284 <netconn_alloc+0x48>
 801227a:	2b20      	cmp	r3, #32
 801227c:	d105      	bne.n	801228a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 801227e:	2306      	movs	r3, #6
 8012280:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8012282:	e00a      	b.n	801229a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8012284:	2306      	movs	r3, #6
 8012286:	617b      	str	r3, [r7, #20]
      break;
 8012288:	e007      	b.n	801229a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 801228a:	4b20      	ldr	r3, [pc, #128]	; (801230c <netconn_alloc+0xd0>)
 801228c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8012290:	491f      	ldr	r1, [pc, #124]	; (8012310 <netconn_alloc+0xd4>)
 8012292:	4820      	ldr	r0, [pc, #128]	; (8012314 <netconn_alloc+0xd8>)
 8012294:	f00d f984 	bl	801f5a0 <iprintf>
      goto free_and_return;
 8012298:	e02f      	b.n	80122fa <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	3310      	adds	r3, #16
 801229e:	6979      	ldr	r1, [r7, #20]
 80122a0:	4618      	mov	r0, r3
 80122a2:	f00c fd0d 	bl	801ecc0 <sys_mbox_new>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d125      	bne.n	80122f8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	330c      	adds	r3, #12
 80122b0:	2100      	movs	r1, #0
 80122b2:	4618      	mov	r0, r3
 80122b4:	f00c fdcb 	bl	801ee4e <sys_sem_new>
 80122b8:	4603      	mov	r3, r0
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d005      	beq.n	80122ca <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	3310      	adds	r3, #16
 80122c2:	4618      	mov	r0, r3
 80122c4:	f00c fd1e 	bl	801ed04 <sys_mbox_free>
    goto free_and_return;
 80122c8:	e017      	b.n	80122fa <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	3314      	adds	r3, #20
 80122ce:	4618      	mov	r0, r3
 80122d0:	f00c fdb0 	bl	801ee34 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	2200      	movs	r2, #0
 80122d8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80122e0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	683a      	ldr	r2, [r7, #0]
 80122e6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	2200      	movs	r2, #0
 80122ec:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	7cfa      	ldrb	r2, [r7, #19]
 80122f2:	771a      	strb	r2, [r3, #28]
  return conn;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	e005      	b.n	8012304 <netconn_alloc+0xc8>
    goto free_and_return;
 80122f8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80122fa:	68f9      	ldr	r1, [r7, #12]
 80122fc:	2007      	movs	r0, #7
 80122fe:	f002 f85b 	bl	80143b8 <memp_free>
  return NULL;
 8012302:	2300      	movs	r3, #0
}
 8012304:	4618      	mov	r0, r3
 8012306:	3718      	adds	r7, #24
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	08020e20 	.word	0x08020e20
 8012310:	08021024 	.word	0x08021024
 8012314:	08020e64 	.word	0x08020e64

08012318 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	685b      	ldr	r3, [r3, #4]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d006      	beq.n	8012336 <netconn_free+0x1e>
 8012328:	4b1b      	ldr	r3, [pc, #108]	; (8012398 <netconn_free+0x80>)
 801232a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801232e:	491b      	ldr	r1, [pc, #108]	; (801239c <netconn_free+0x84>)
 8012330:	481b      	ldr	r0, [pc, #108]	; (80123a0 <netconn_free+0x88>)
 8012332:	f00d f935 	bl	801f5a0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	3310      	adds	r3, #16
 801233a:	4618      	mov	r0, r3
 801233c:	f00c fd69 	bl	801ee12 <sys_mbox_valid>
 8012340:	4603      	mov	r3, r0
 8012342:	2b00      	cmp	r3, #0
 8012344:	d006      	beq.n	8012354 <netconn_free+0x3c>
 8012346:	4b14      	ldr	r3, [pc, #80]	; (8012398 <netconn_free+0x80>)
 8012348:	f240 3223 	movw	r2, #803	; 0x323
 801234c:	4915      	ldr	r1, [pc, #84]	; (80123a4 <netconn_free+0x8c>)
 801234e:	4814      	ldr	r0, [pc, #80]	; (80123a0 <netconn_free+0x88>)
 8012350:	f00d f926 	bl	801f5a0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	3314      	adds	r3, #20
 8012358:	4618      	mov	r0, r3
 801235a:	f00c fd5a 	bl	801ee12 <sys_mbox_valid>
 801235e:	4603      	mov	r3, r0
 8012360:	2b00      	cmp	r3, #0
 8012362:	d006      	beq.n	8012372 <netconn_free+0x5a>
 8012364:	4b0c      	ldr	r3, [pc, #48]	; (8012398 <netconn_free+0x80>)
 8012366:	f240 3226 	movw	r2, #806	; 0x326
 801236a:	490f      	ldr	r1, [pc, #60]	; (80123a8 <netconn_free+0x90>)
 801236c:	480c      	ldr	r0, [pc, #48]	; (80123a0 <netconn_free+0x88>)
 801236e:	f00d f917 	bl	801f5a0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	330c      	adds	r3, #12
 8012376:	4618      	mov	r0, r3
 8012378:	f00c fdcf 	bl	801ef1a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	330c      	adds	r3, #12
 8012380:	4618      	mov	r0, r3
 8012382:	f00c fde8 	bl	801ef56 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8012386:	6879      	ldr	r1, [r7, #4]
 8012388:	2007      	movs	r0, #7
 801238a:	f002 f815 	bl	80143b8 <memp_free>
}
 801238e:	bf00      	nop
 8012390:	3708      	adds	r7, #8
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
 8012396:	bf00      	nop
 8012398:	08020e20 	.word	0x08020e20
 801239c:	0802104c 	.word	0x0802104c
 80123a0:	08020e64 	.word	0x08020e64
 80123a4:	0802107c 	.word	0x0802107c
 80123a8:	080210b8 	.word	0x080210b8

080123ac <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b086      	sub	sp, #24
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	3310      	adds	r3, #16
 80123b8:	4618      	mov	r0, r3
 80123ba:	f00c fd2a 	bl	801ee12 <sys_mbox_valid>
 80123be:	4603      	mov	r3, r0
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d02f      	beq.n	8012424 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80123c4:	e018      	b.n	80123f8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	781b      	ldrb	r3, [r3, #0]
 80123ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80123ce:	2b10      	cmp	r3, #16
 80123d0:	d10e      	bne.n	80123f0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	f107 020f 	add.w	r2, r7, #15
 80123d8:	4611      	mov	r1, r2
 80123da:	4618      	mov	r0, r3
 80123dc:	f7ff fafe 	bl	80119dc <lwip_netconn_is_err_msg>
 80123e0:	4603      	mov	r3, r0
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d108      	bne.n	80123f8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	4618      	mov	r0, r3
 80123ea:	f002 fe89 	bl	8015100 <pbuf_free>
 80123ee:	e003      	b.n	80123f8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	4618      	mov	r0, r3
 80123f4:	f001 f840 	bl	8013478 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	3310      	adds	r3, #16
 80123fc:	f107 0210 	add.w	r2, r7, #16
 8012400:	4611      	mov	r1, r2
 8012402:	4618      	mov	r0, r3
 8012404:	f00c fce9 	bl	801edda <sys_arch_mbox_tryfetch>
 8012408:	4603      	mov	r3, r0
 801240a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801240e:	d1da      	bne.n	80123c6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	3310      	adds	r3, #16
 8012414:	4618      	mov	r0, r3
 8012416:	f00c fc75 	bl	801ed04 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	3310      	adds	r3, #16
 801241e:	4618      	mov	r0, r3
 8012420:	f00c fd08 	bl	801ee34 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	3314      	adds	r3, #20
 8012428:	4618      	mov	r0, r3
 801242a:	f00c fcf2 	bl	801ee12 <sys_mbox_valid>
 801242e:	4603      	mov	r3, r0
 8012430:	2b00      	cmp	r3, #0
 8012432:	d034      	beq.n	801249e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012434:	e01d      	b.n	8012472 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	f107 020e 	add.w	r2, r7, #14
 801243c:	4611      	mov	r1, r2
 801243e:	4618      	mov	r0, r3
 8012440:	f7ff facc 	bl	80119dc <lwip_netconn_is_err_msg>
 8012444:	4603      	mov	r3, r0
 8012446:	2b00      	cmp	r3, #0
 8012448:	d113      	bne.n	8012472 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 801244a:	693b      	ldr	r3, [r7, #16]
 801244c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 801244e:	6978      	ldr	r0, [r7, #20]
 8012450:	f7ff ffac 	bl	80123ac <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	685b      	ldr	r3, [r3, #4]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d007      	beq.n	801246c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 801245c:	697b      	ldr	r3, [r7, #20]
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	4618      	mov	r0, r3
 8012462:	f003 fc4d 	bl	8015d00 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	2200      	movs	r2, #0
 801246a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 801246c:	6978      	ldr	r0, [r7, #20]
 801246e:	f7ff ff53 	bl	8012318 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	3314      	adds	r3, #20
 8012476:	f107 0210 	add.w	r2, r7, #16
 801247a:	4611      	mov	r1, r2
 801247c:	4618      	mov	r0, r3
 801247e:	f00c fcac 	bl	801edda <sys_arch_mbox_tryfetch>
 8012482:	4603      	mov	r3, r0
 8012484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012488:	d1d5      	bne.n	8012436 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	3314      	adds	r3, #20
 801248e:	4618      	mov	r0, r3
 8012490:	f00c fc38 	bl	801ed04 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	3314      	adds	r3, #20
 8012498:	4618      	mov	r0, r3
 801249a:	f00c fccb 	bl	801ee34 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801249e:	bf00      	nop
 80124a0:	3718      	adds	r7, #24
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
	...

080124a8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b086      	sub	sp, #24
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	460b      	mov	r3, r1
 80124b2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80124b4:	2300      	movs	r3, #0
 80124b6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d106      	bne.n	80124cc <lwip_netconn_do_close_internal+0x24>
 80124be:	4b87      	ldr	r3, [pc, #540]	; (80126dc <lwip_netconn_do_close_internal+0x234>)
 80124c0:	f240 32a2 	movw	r2, #930	; 0x3a2
 80124c4:	4986      	ldr	r1, [pc, #536]	; (80126e0 <lwip_netconn_do_close_internal+0x238>)
 80124c6:	4887      	ldr	r0, [pc, #540]	; (80126e4 <lwip_netconn_do_close_internal+0x23c>)
 80124c8:	f00d f86a 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80124d4:	2b10      	cmp	r3, #16
 80124d6:	d006      	beq.n	80124e6 <lwip_netconn_do_close_internal+0x3e>
 80124d8:	4b80      	ldr	r3, [pc, #512]	; (80126dc <lwip_netconn_do_close_internal+0x234>)
 80124da:	f240 32a3 	movw	r2, #931	; 0x3a3
 80124de:	4982      	ldr	r1, [pc, #520]	; (80126e8 <lwip_netconn_do_close_internal+0x240>)
 80124e0:	4880      	ldr	r0, [pc, #512]	; (80126e4 <lwip_netconn_do_close_internal+0x23c>)
 80124e2:	f00d f85d 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	785b      	ldrb	r3, [r3, #1]
 80124ea:	2b04      	cmp	r3, #4
 80124ec:	d006      	beq.n	80124fc <lwip_netconn_do_close_internal+0x54>
 80124ee:	4b7b      	ldr	r3, [pc, #492]	; (80126dc <lwip_netconn_do_close_internal+0x234>)
 80124f0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80124f4:	497d      	ldr	r1, [pc, #500]	; (80126ec <lwip_netconn_do_close_internal+0x244>)
 80124f6:	487b      	ldr	r0, [pc, #492]	; (80126e4 <lwip_netconn_do_close_internal+0x23c>)
 80124f8:	f00d f852 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	685b      	ldr	r3, [r3, #4]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d106      	bne.n	8012512 <lwip_netconn_do_close_internal+0x6a>
 8012504:	4b75      	ldr	r3, [pc, #468]	; (80126dc <lwip_netconn_do_close_internal+0x234>)
 8012506:	f240 32a5 	movw	r2, #933	; 0x3a5
 801250a:	4979      	ldr	r1, [pc, #484]	; (80126f0 <lwip_netconn_do_close_internal+0x248>)
 801250c:	4875      	ldr	r0, [pc, #468]	; (80126e4 <lwip_netconn_do_close_internal+0x23c>)
 801250e:	f00d f847 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6a1b      	ldr	r3, [r3, #32]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d106      	bne.n	8012528 <lwip_netconn_do_close_internal+0x80>
 801251a:	4b70      	ldr	r3, [pc, #448]	; (80126dc <lwip_netconn_do_close_internal+0x234>)
 801251c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012520:	4974      	ldr	r1, [pc, #464]	; (80126f4 <lwip_netconn_do_close_internal+0x24c>)
 8012522:	4870      	ldr	r0, [pc, #448]	; (80126e4 <lwip_netconn_do_close_internal+0x23c>)
 8012524:	f00d f83c 	bl	801f5a0 <iprintf>

  tpcb = conn->pcb.tcp;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6a1b      	ldr	r3, [r3, #32]
 8012532:	7a1b      	ldrb	r3, [r3, #8]
 8012534:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8012536:	7bfb      	ldrb	r3, [r7, #15]
 8012538:	f003 0301 	and.w	r3, r3, #1
 801253c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 801253e:	7bfb      	ldrb	r3, [r7, #15]
 8012540:	f003 0302 	and.w	r3, r3, #2
 8012544:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8012546:	7bfb      	ldrb	r3, [r7, #15]
 8012548:	2b03      	cmp	r3, #3
 801254a:	d102      	bne.n	8012552 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 801254c:	2301      	movs	r3, #1
 801254e:	75bb      	strb	r3, [r7, #22]
 8012550:	e01f      	b.n	8012592 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8012552:	7bbb      	ldrb	r3, [r7, #14]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d00e      	beq.n	8012576 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8012558:	693b      	ldr	r3, [r7, #16]
 801255a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 801255c:	2b05      	cmp	r3, #5
 801255e:	d007      	beq.n	8012570 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8012560:	693b      	ldr	r3, [r7, #16]
 8012562:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8012564:	2b06      	cmp	r3, #6
 8012566:	d003      	beq.n	8012570 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 801256c:	2b08      	cmp	r3, #8
 801256e:	d102      	bne.n	8012576 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8012570:	2301      	movs	r3, #1
 8012572:	75bb      	strb	r3, [r7, #22]
 8012574:	e00d      	b.n	8012592 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8012576:	7b7b      	ldrb	r3, [r7, #13]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d008      	beq.n	801258e <lwip_netconn_do_close_internal+0xe6>
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	8b5b      	ldrh	r3, [r3, #26]
 8012580:	f003 0310 	and.w	r3, r3, #16
 8012584:	2b00      	cmp	r3, #0
 8012586:	d002      	beq.n	801258e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8012588:	2301      	movs	r3, #1
 801258a:	75bb      	strb	r3, [r7, #22]
 801258c:	e001      	b.n	8012592 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 801258e:	2300      	movs	r3, #0
 8012590:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8012592:	7dbb      	ldrb	r3, [r7, #22]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d003      	beq.n	80125a0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8012598:	2100      	movs	r1, #0
 801259a:	6938      	ldr	r0, [r7, #16]
 801259c:	f004 fd56 	bl	801704c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	7d1b      	ldrb	r3, [r3, #20]
 80125a4:	2b01      	cmp	r3, #1
 80125a6:	d104      	bne.n	80125b2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80125a8:	2100      	movs	r1, #0
 80125aa:	6938      	ldr	r0, [r7, #16]
 80125ac:	f004 fdc6 	bl	801713c <tcp_accept>
 80125b0:	e01d      	b.n	80125ee <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80125b2:	7bbb      	ldrb	r3, [r7, #14]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d007      	beq.n	80125c8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80125b8:	2100      	movs	r1, #0
 80125ba:	6938      	ldr	r0, [r7, #16]
 80125bc:	f004 fd58 	bl	8017070 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80125c0:	2100      	movs	r1, #0
 80125c2:	6938      	ldr	r0, [r7, #16]
 80125c4:	f004 fdba 	bl	801713c <tcp_accept>
    }
    if (shut_tx) {
 80125c8:	7b7b      	ldrb	r3, [r7, #13]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d003      	beq.n	80125d6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80125ce:	2100      	movs	r1, #0
 80125d0:	6938      	ldr	r0, [r7, #16]
 80125d2:	f004 fd6f 	bl	80170b4 <tcp_sent>
    }
    if (shut_close) {
 80125d6:	7dbb      	ldrb	r3, [r7, #22]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d008      	beq.n	80125ee <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80125dc:	2200      	movs	r2, #0
 80125de:	2100      	movs	r1, #0
 80125e0:	6938      	ldr	r0, [r7, #16]
 80125e2:	f004 fdc3 	bl	801716c <tcp_poll>
      tcp_err(tpcb, NULL);
 80125e6:	2100      	movs	r1, #0
 80125e8:	6938      	ldr	r0, [r7, #16]
 80125ea:	f004 fd85 	bl	80170f8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80125ee:	7dbb      	ldrb	r3, [r7, #22]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d005      	beq.n	8012600 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80125f4:	6938      	ldr	r0, [r7, #16]
 80125f6:	f003 fa3d 	bl	8015a74 <tcp_close>
 80125fa:	4603      	mov	r3, r0
 80125fc:	75fb      	strb	r3, [r7, #23]
 80125fe:	e007      	b.n	8012610 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8012600:	7bbb      	ldrb	r3, [r7, #14]
 8012602:	7b7a      	ldrb	r2, [r7, #13]
 8012604:	4619      	mov	r1, r3
 8012606:	6938      	ldr	r0, [r7, #16]
 8012608:	f003 fa60 	bl	8015acc <tcp_shutdown>
 801260c:	4603      	mov	r3, r0
 801260e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8012610:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d102      	bne.n	801261e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8012618:	2301      	movs	r3, #1
 801261a:	757b      	strb	r3, [r7, #21]
 801261c:	e016      	b.n	801264c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 801261e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012626:	d10f      	bne.n	8012648 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	6a1b      	ldr	r3, [r3, #32]
 801262c:	7a5b      	ldrb	r3, [r3, #9]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d10c      	bne.n	801264c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8012632:	2301      	movs	r3, #1
 8012634:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8012636:	7dbb      	ldrb	r3, [r7, #22]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d007      	beq.n	801264c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 801263c:	6938      	ldr	r0, [r7, #16]
 801263e:	f003 fb5f 	bl	8015d00 <tcp_abort>
          err = ERR_OK;
 8012642:	2300      	movs	r3, #0
 8012644:	75fb      	strb	r3, [r7, #23]
 8012646:	e001      	b.n	801264c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8012648:	2301      	movs	r3, #1
 801264a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 801264c:	7d7b      	ldrb	r3, [r7, #21]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d052      	beq.n	80126f8 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6a1b      	ldr	r3, [r3, #32]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	330c      	adds	r3, #12
 801265a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6a1b      	ldr	r3, [r3, #32]
 8012660:	7dfa      	ldrb	r2, [r7, #23]
 8012662:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2200      	movs	r2, #0
 8012668:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2200      	movs	r2, #0
 801266e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8012670:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d129      	bne.n	80126cc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8012678:	7dbb      	ldrb	r3, [r7, #22]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d00c      	beq.n	8012698 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2200      	movs	r2, #0
 8012682:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012688:	2b00      	cmp	r3, #0
 801268a:	d005      	beq.n	8012698 <lwip_netconn_do_close_internal+0x1f0>
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012690:	2200      	movs	r2, #0
 8012692:	2104      	movs	r1, #4
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	4798      	blx	r3
      }
      if (shut_rx) {
 8012698:	7bbb      	ldrb	r3, [r7, #14]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d009      	beq.n	80126b2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d005      	beq.n	80126b2 <lwip_netconn_do_close_internal+0x20a>
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126aa:	2200      	movs	r2, #0
 80126ac:	2100      	movs	r1, #0
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	4798      	blx	r3
      }
      if (shut_tx) {
 80126b2:	7b7b      	ldrb	r3, [r7, #13]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d009      	beq.n	80126cc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d005      	beq.n	80126cc <lwip_netconn_do_close_internal+0x224>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c4:	2200      	movs	r2, #0
 80126c6:	2102      	movs	r1, #2
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80126cc:	78fb      	ldrb	r3, [r7, #3]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d002      	beq.n	80126d8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80126d2:	68b8      	ldr	r0, [r7, #8]
 80126d4:	f00c fc14 	bl	801ef00 <sys_sem_signal>
    }
    return ERR_OK;
 80126d8:	2300      	movs	r3, #0
 80126da:	e03c      	b.n	8012756 <lwip_netconn_do_close_internal+0x2ae>
 80126dc:	08020e20 	.word	0x08020e20
 80126e0:	080210f4 	.word	0x080210f4
 80126e4:	08020e64 	.word	0x08020e64
 80126e8:	08021104 	.word	0x08021104
 80126ec:	08021124 	.word	0x08021124
 80126f0:	08021148 	.word	0x08021148
 80126f4:	08020f88 	.word	0x08020f88
  }
  if (!close_finished) {
 80126f8:	7d7b      	ldrb	r3, [r7, #21]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d11e      	bne.n	801273c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	7d1b      	ldrb	r3, [r3, #20]
 8012702:	2b01      	cmp	r3, #1
 8012704:	d106      	bne.n	8012714 <lwip_netconn_do_close_internal+0x26c>
 8012706:	4b16      	ldr	r3, [pc, #88]	; (8012760 <lwip_netconn_do_close_internal+0x2b8>)
 8012708:	f240 4241 	movw	r2, #1089	; 0x441
 801270c:	4915      	ldr	r1, [pc, #84]	; (8012764 <lwip_netconn_do_close_internal+0x2bc>)
 801270e:	4816      	ldr	r0, [pc, #88]	; (8012768 <lwip_netconn_do_close_internal+0x2c0>)
 8012710:	f00c ff46 	bl	801f5a0 <iprintf>
    if (shut_tx) {
 8012714:	7b7b      	ldrb	r3, [r7, #13]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d003      	beq.n	8012722 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801271a:	4914      	ldr	r1, [pc, #80]	; (801276c <lwip_netconn_do_close_internal+0x2c4>)
 801271c:	6938      	ldr	r0, [r7, #16]
 801271e:	f004 fcc9 	bl	80170b4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8012722:	2201      	movs	r2, #1
 8012724:	4912      	ldr	r1, [pc, #72]	; (8012770 <lwip_netconn_do_close_internal+0x2c8>)
 8012726:	6938      	ldr	r0, [r7, #16]
 8012728:	f004 fd20 	bl	801716c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 801272c:	4911      	ldr	r1, [pc, #68]	; (8012774 <lwip_netconn_do_close_internal+0x2cc>)
 801272e:	6938      	ldr	r0, [r7, #16]
 8012730:	f004 fce2 	bl	80170f8 <tcp_err>
    tcp_arg(tpcb, conn);
 8012734:	6879      	ldr	r1, [r7, #4]
 8012736:	6938      	ldr	r0, [r7, #16]
 8012738:	f004 fc88 	bl	801704c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 801273c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d106      	bne.n	8012752 <lwip_netconn_do_close_internal+0x2aa>
 8012744:	4b06      	ldr	r3, [pc, #24]	; (8012760 <lwip_netconn_do_close_internal+0x2b8>)
 8012746:	f240 424d 	movw	r2, #1101	; 0x44d
 801274a:	490b      	ldr	r1, [pc, #44]	; (8012778 <lwip_netconn_do_close_internal+0x2d0>)
 801274c:	4806      	ldr	r0, [pc, #24]	; (8012768 <lwip_netconn_do_close_internal+0x2c0>)
 801274e:	f00c ff27 	bl	801f5a0 <iprintf>
  return err;
 8012752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012756:	4618      	mov	r0, r3
 8012758:	3718      	adds	r7, #24
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
 801275e:	bf00      	nop
 8012760:	08020e20 	.word	0x08020e20
 8012764:	0802115c 	.word	0x0802115c
 8012768:	08020e64 	.word	0x08020e64
 801276c:	08011d21 	.word	0x08011d21
 8012770:	08011c59 	.word	0x08011c59
 8012774:	08011dc9 	.word	0x08011dc9
 8012778:	08021180 	.word	0x08021180

0801277c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b084      	sub	sp, #16
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	785b      	ldrb	r3, [r3, #1]
 801278e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8012790:	7afb      	ldrb	r3, [r7, #11]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d00d      	beq.n	80127b2 <lwip_netconn_do_delconn+0x36>
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80127a0:	2b10      	cmp	r3, #16
 80127a2:	d006      	beq.n	80127b2 <lwip_netconn_do_delconn+0x36>
 80127a4:	4b60      	ldr	r3, [pc, #384]	; (8012928 <lwip_netconn_do_delconn+0x1ac>)
 80127a6:	f240 425e 	movw	r2, #1118	; 0x45e
 80127aa:	4960      	ldr	r1, [pc, #384]	; (801292c <lwip_netconn_do_delconn+0x1b0>)
 80127ac:	4860      	ldr	r0, [pc, #384]	; (8012930 <lwip_netconn_do_delconn+0x1b4>)
 80127ae:	f00c fef7 	bl	801f5a0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80127b2:	7afb      	ldrb	r3, [r7, #11]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d005      	beq.n	80127c4 <lwip_netconn_do_delconn+0x48>
 80127b8:	7afb      	ldrb	r3, [r7, #11]
 80127ba:	2b02      	cmp	r3, #2
 80127bc:	d002      	beq.n	80127c4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80127be:	7afb      	ldrb	r3, [r7, #11]
 80127c0:	2b03      	cmp	r3, #3
 80127c2:	d109      	bne.n	80127d8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80127c4:	7afb      	ldrb	r3, [r7, #11]
 80127c6:	2b03      	cmp	r3, #3
 80127c8:	d10a      	bne.n	80127e0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	7f1b      	ldrb	r3, [r3, #28]
 80127d0:	f003 0304 	and.w	r3, r3, #4
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d103      	bne.n	80127e0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	22fb      	movs	r2, #251	; 0xfb
 80127dc:	711a      	strb	r2, [r3, #4]
 80127de:	e097      	b.n	8012910 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80127e0:	7afb      	ldrb	r3, [r7, #11]
 80127e2:	2b03      	cmp	r3, #3
 80127e4:	d10d      	bne.n	8012802 <lwip_netconn_do_delconn+0x86>
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	7f1b      	ldrb	r3, [r3, #28]
 80127ec:	f003 0304 	and.w	r3, r3, #4
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d106      	bne.n	8012802 <lwip_netconn_do_delconn+0x86>
 80127f4:	4b4c      	ldr	r3, [pc, #304]	; (8012928 <lwip_netconn_do_delconn+0x1ac>)
 80127f6:	f240 427a 	movw	r2, #1146	; 0x47a
 80127fa:	494e      	ldr	r1, [pc, #312]	; (8012934 <lwip_netconn_do_delconn+0x1b8>)
 80127fc:	484c      	ldr	r0, [pc, #304]	; (8012930 <lwip_netconn_do_delconn+0x1b4>)
 80127fe:	f00c fecf 	bl	801f5a0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	2200      	movs	r2, #0
 8012806:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	4618      	mov	r0, r3
 801280e:	f7ff fdcd 	bl	80123ac <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	685b      	ldr	r3, [r3, #4]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d05f      	beq.n	80128dc <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	781b      	ldrb	r3, [r3, #0]
 8012822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012826:	2b10      	cmp	r3, #16
 8012828:	d00d      	beq.n	8012846 <lwip_netconn_do_delconn+0xca>
 801282a:	2b20      	cmp	r3, #32
 801282c:	d151      	bne.n	80128d2 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	2200      	movs	r2, #0
 8012836:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	4618      	mov	r0, r3
 8012840:	f009 fee2 	bl	801c608 <udp_remove>
          break;
 8012844:	e046      	b.n	80128d4 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	6a1b      	ldr	r3, [r3, #32]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d006      	beq.n	801285e <lwip_netconn_do_delconn+0xe2>
 8012850:	4b35      	ldr	r3, [pc, #212]	; (8012928 <lwip_netconn_do_delconn+0x1ac>)
 8012852:	f240 4294 	movw	r2, #1172	; 0x494
 8012856:	4938      	ldr	r1, [pc, #224]	; (8012938 <lwip_netconn_do_delconn+0x1bc>)
 8012858:	4835      	ldr	r0, [pc, #212]	; (8012930 <lwip_netconn_do_delconn+0x1b4>)
 801285a:	f00c fea1 	bl	801f5a0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	2204      	movs	r2, #4
 8012864:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	2203      	movs	r2, #3
 801286a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	68fa      	ldr	r2, [r7, #12]
 8012872:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	2100      	movs	r1, #0
 801287a:	4618      	mov	r0, r3
 801287c:	f7ff fe14 	bl	80124a8 <lwip_netconn_do_close_internal>
 8012880:	4603      	mov	r3, r0
 8012882:	2b00      	cmp	r3, #0
 8012884:	d04b      	beq.n	801291e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	785b      	ldrb	r3, [r3, #1]
 801288c:	2b04      	cmp	r3, #4
 801288e:	d006      	beq.n	801289e <lwip_netconn_do_delconn+0x122>
 8012890:	4b25      	ldr	r3, [pc, #148]	; (8012928 <lwip_netconn_do_delconn+0x1ac>)
 8012892:	f240 429a 	movw	r2, #1178	; 0x49a
 8012896:	4929      	ldr	r1, [pc, #164]	; (801293c <lwip_netconn_do_delconn+0x1c0>)
 8012898:	4825      	ldr	r0, [pc, #148]	; (8012930 <lwip_netconn_do_delconn+0x1b4>)
 801289a:	f00c fe81 	bl	801f5a0 <iprintf>
            UNLOCK_TCPIP_CORE();
 801289e:	4828      	ldr	r0, [pc, #160]	; (8012940 <lwip_netconn_do_delconn+0x1c4>)
 80128a0:	f00c fb9f 	bl	801efe2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	330c      	adds	r3, #12
 80128aa:	2100      	movs	r1, #0
 80128ac:	4618      	mov	r0, r3
 80128ae:	f00c faf6 	bl	801ee9e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80128b2:	4823      	ldr	r0, [pc, #140]	; (8012940 <lwip_netconn_do_delconn+0x1c4>)
 80128b4:	f00c fb86 	bl	801efc4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	785b      	ldrb	r3, [r3, #1]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d02d      	beq.n	801291e <lwip_netconn_do_delconn+0x1a2>
 80128c2:	4b19      	ldr	r3, [pc, #100]	; (8012928 <lwip_netconn_do_delconn+0x1ac>)
 80128c4:	f240 429e 	movw	r2, #1182	; 0x49e
 80128c8:	491c      	ldr	r1, [pc, #112]	; (801293c <lwip_netconn_do_delconn+0x1c0>)
 80128ca:	4819      	ldr	r0, [pc, #100]	; (8012930 <lwip_netconn_do_delconn+0x1b4>)
 80128cc:	f00c fe68 	bl	801f5a0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80128d0:	e025      	b.n	801291e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80128d2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	2200      	movs	r2, #0
 80128da:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d007      	beq.n	80128f6 <lwip_netconn_do_delconn+0x17a>
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ec:	68fa      	ldr	r2, [r7, #12]
 80128ee:	6810      	ldr	r0, [r2, #0]
 80128f0:	2200      	movs	r2, #0
 80128f2:	2100      	movs	r1, #0
 80128f4:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d007      	beq.n	8012910 <lwip_netconn_do_delconn+0x194>
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012906:	68fa      	ldr	r2, [r7, #12]
 8012908:	6810      	ldr	r0, [r2, #0]
 801290a:	2200      	movs	r2, #0
 801290c:	2102      	movs	r1, #2
 801290e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	330c      	adds	r3, #12
 8012916:	4618      	mov	r0, r3
 8012918:	f00c fb0c 	bl	801ef34 <sys_sem_valid>
 801291c:	e000      	b.n	8012920 <lwip_netconn_do_delconn+0x1a4>
          return;
 801291e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8012920:	3710      	adds	r7, #16
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
 8012926:	bf00      	nop
 8012928:	08020e20 	.word	0x08020e20
 801292c:	08021190 	.word	0x08021190
 8012930:	08020e64 	.word	0x08020e64
 8012934:	080211a4 	.word	0x080211a4
 8012938:	080211c4 	.word	0x080211c4
 801293c:	080211e0 	.word	0x080211e0
 8012940:	200066d0 	.word	0x200066d0

08012944 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b084      	sub	sp, #16
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d025      	beq.n	80129a6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	781b      	ldrb	r3, [r3, #0]
 8012960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012964:	2b10      	cmp	r3, #16
 8012966:	d00e      	beq.n	8012986 <lwip_netconn_do_bind+0x42>
 8012968:	2b20      	cmp	r3, #32
 801296a:	d119      	bne.n	80129a0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	6858      	ldr	r0, [r3, #4]
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	6899      	ldr	r1, [r3, #8]
 8012976:	68bb      	ldr	r3, [r7, #8]
 8012978:	899b      	ldrh	r3, [r3, #12]
 801297a:	461a      	mov	r2, r3
 801297c:	f009 fd2e 	bl	801c3dc <udp_bind>
 8012980:	4603      	mov	r3, r0
 8012982:	73fb      	strb	r3, [r7, #15]
        break;
 8012984:	e011      	b.n	80129aa <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	6858      	ldr	r0, [r3, #4]
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	6899      	ldr	r1, [r3, #8]
 8012990:	68bb      	ldr	r3, [r7, #8]
 8012992:	899b      	ldrh	r3, [r3, #12]
 8012994:	461a      	mov	r2, r3
 8012996:	f003 f9bf 	bl	8015d18 <tcp_bind>
 801299a:	4603      	mov	r3, r0
 801299c:	73fb      	strb	r3, [r7, #15]
        break;
 801299e:	e004      	b.n	80129aa <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80129a0:	23fa      	movs	r3, #250	; 0xfa
 80129a2:	73fb      	strb	r3, [r7, #15]
        break;
 80129a4:	e001      	b.n	80129aa <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80129a6:	23fa      	movs	r3, #250	; 0xfa
 80129a8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	7bfa      	ldrb	r2, [r7, #15]
 80129ae:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80129b0:	bf00      	nop
 80129b2:	3710      	adds	r7, #16
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}

080129b8 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b088      	sub	sp, #32
 80129bc:	af00      	add	r7, sp, #0
 80129be:	60f8      	str	r0, [r7, #12]
 80129c0:	60b9      	str	r1, [r7, #8]
 80129c2:	4613      	mov	r3, r2
 80129c4:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 80129c6:	2300      	movs	r3, #0
 80129c8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80129ce:	69bb      	ldr	r3, [r7, #24]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d102      	bne.n	80129da <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 80129d4:	f06f 0305 	mvn.w	r3, #5
 80129d8:	e070      	b.n	8012abc <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 80129da:	69bb      	ldr	r3, [r7, #24]
 80129dc:	785b      	ldrb	r3, [r3, #1]
 80129de:	2b03      	cmp	r3, #3
 80129e0:	d006      	beq.n	80129f0 <lwip_netconn_do_connected+0x38>
 80129e2:	4b38      	ldr	r3, [pc, #224]	; (8012ac4 <lwip_netconn_do_connected+0x10c>)
 80129e4:	f240 5223 	movw	r2, #1315	; 0x523
 80129e8:	4937      	ldr	r1, [pc, #220]	; (8012ac8 <lwip_netconn_do_connected+0x110>)
 80129ea:	4838      	ldr	r0, [pc, #224]	; (8012acc <lwip_netconn_do_connected+0x114>)
 80129ec:	f00c fdd8 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 80129f0:	69bb      	ldr	r3, [r7, #24]
 80129f2:	6a1b      	ldr	r3, [r3, #32]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d10c      	bne.n	8012a12 <lwip_netconn_do_connected+0x5a>
 80129f8:	69bb      	ldr	r3, [r7, #24]
 80129fa:	7f1b      	ldrb	r3, [r3, #28]
 80129fc:	f003 0304 	and.w	r3, r3, #4
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d106      	bne.n	8012a12 <lwip_netconn_do_connected+0x5a>
 8012a04:	4b2f      	ldr	r3, [pc, #188]	; (8012ac4 <lwip_netconn_do_connected+0x10c>)
 8012a06:	f240 5224 	movw	r2, #1316	; 0x524
 8012a0a:	4931      	ldr	r1, [pc, #196]	; (8012ad0 <lwip_netconn_do_connected+0x118>)
 8012a0c:	482f      	ldr	r0, [pc, #188]	; (8012acc <lwip_netconn_do_connected+0x114>)
 8012a0e:	f00c fdc7 	bl	801f5a0 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8012a12:	69bb      	ldr	r3, [r7, #24]
 8012a14:	6a1b      	ldr	r3, [r3, #32]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d008      	beq.n	8012a2c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8012a1a:	69bb      	ldr	r3, [r7, #24]
 8012a1c:	6a1b      	ldr	r3, [r3, #32]
 8012a1e:	79fa      	ldrb	r2, [r7, #7]
 8012a20:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012a22:	69bb      	ldr	r3, [r7, #24]
 8012a24:	6a1b      	ldr	r3, [r3, #32]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	330c      	adds	r3, #12
 8012a2a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8012a2c:	69bb      	ldr	r3, [r7, #24]
 8012a2e:	781b      	ldrb	r3, [r3, #0]
 8012a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012a34:	2b10      	cmp	r3, #16
 8012a36:	d106      	bne.n	8012a46 <lwip_netconn_do_connected+0x8e>
 8012a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d102      	bne.n	8012a46 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8012a40:	69b8      	ldr	r0, [r7, #24]
 8012a42:	f7ff fa97 	bl	8011f74 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8012a46:	69bb      	ldr	r3, [r7, #24]
 8012a48:	7f1b      	ldrb	r3, [r3, #28]
 8012a4a:	f003 0304 	and.w	r3, r3, #4
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	bf0c      	ite	eq
 8012a52:	2301      	moveq	r3, #1
 8012a54:	2300      	movne	r3, #0
 8012a56:	b2db      	uxtb	r3, r3
 8012a58:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8012a5a:	69bb      	ldr	r3, [r7, #24]
 8012a5c:	7f1b      	ldrb	r3, [r3, #28]
 8012a5e:	f023 0304 	bic.w	r3, r3, #4
 8012a62:	b2da      	uxtb	r2, r3
 8012a64:	69bb      	ldr	r3, [r7, #24]
 8012a66:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d002      	beq.n	8012a74 <lwip_netconn_do_connected+0xbc>
 8012a6e:	69fb      	ldr	r3, [r7, #28]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d10c      	bne.n	8012a8e <lwip_netconn_do_connected+0xd6>
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d102      	bne.n	8012a80 <lwip_netconn_do_connected+0xc8>
 8012a7a:	69fb      	ldr	r3, [r7, #28]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d006      	beq.n	8012a8e <lwip_netconn_do_connected+0xd6>
 8012a80:	4b10      	ldr	r3, [pc, #64]	; (8012ac4 <lwip_netconn_do_connected+0x10c>)
 8012a82:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8012a86:	4913      	ldr	r1, [pc, #76]	; (8012ad4 <lwip_netconn_do_connected+0x11c>)
 8012a88:	4810      	ldr	r0, [pc, #64]	; (8012acc <lwip_netconn_do_connected+0x114>)
 8012a8a:	f00c fd89 	bl	801f5a0 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8012a8e:	69bb      	ldr	r3, [r7, #24]
 8012a90:	2200      	movs	r2, #0
 8012a92:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8012a94:	69bb      	ldr	r3, [r7, #24]
 8012a96:	2200      	movs	r2, #0
 8012a98:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012a9a:	69bb      	ldr	r3, [r7, #24]
 8012a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d005      	beq.n	8012aae <lwip_netconn_do_connected+0xf6>
 8012aa2:	69bb      	ldr	r3, [r7, #24]
 8012aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	2102      	movs	r1, #2
 8012aaa:	69b8      	ldr	r0, [r7, #24]
 8012aac:	4798      	blx	r3

  if (was_blocking) {
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d002      	beq.n	8012aba <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8012ab4:	69f8      	ldr	r0, [r7, #28]
 8012ab6:	f00c fa23 	bl	801ef00 <sys_sem_signal>
  }
  return ERR_OK;
 8012aba:	2300      	movs	r3, #0
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	3720      	adds	r7, #32
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	08020e20 	.word	0x08020e20
 8012ac8:	080211e8 	.word	0x080211e8
 8012acc:	08020e64 	.word	0x08020e64
 8012ad0:	08021208 	.word	0x08021208
 8012ad4:	08021248 	.word	0x08021248

08012ad8 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b086      	sub	sp, #24
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d102      	bne.n	8012af4 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8012aee:	23f1      	movs	r3, #241	; 0xf1
 8012af0:	75fb      	strb	r3, [r7, #23]
 8012af2:	e09b      	b.n	8012c2c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012afe:	2b10      	cmp	r3, #16
 8012b00:	d00f      	beq.n	8012b22 <lwip_netconn_do_connect+0x4a>
 8012b02:	2b20      	cmp	r3, #32
 8012b04:	f040 8087 	bne.w	8012c16 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012b08:	693b      	ldr	r3, [r7, #16]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	6858      	ldr	r0, [r3, #4]
 8012b0e:	693b      	ldr	r3, [r7, #16]
 8012b10:	6899      	ldr	r1, [r3, #8]
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	899b      	ldrh	r3, [r3, #12]
 8012b16:	461a      	mov	r2, r3
 8012b18:	f009 fce8 	bl	801c4ec <udp_connect>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	75fb      	strb	r3, [r7, #23]
        break;
 8012b20:	e084      	b.n	8012c2c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8012b22:	693b      	ldr	r3, [r7, #16]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	785b      	ldrb	r3, [r3, #1]
 8012b28:	2b03      	cmp	r3, #3
 8012b2a:	d102      	bne.n	8012b32 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8012b2c:	23f7      	movs	r3, #247	; 0xf7
 8012b2e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8012b30:	e07b      	b.n	8012c2a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	785b      	ldrb	r3, [r3, #1]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d002      	beq.n	8012b42 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8012b3c:	23f6      	movs	r3, #246	; 0xf6
 8012b3e:	75fb      	strb	r3, [r7, #23]
        break;
 8012b40:	e073      	b.n	8012c2a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8012b42:	693b      	ldr	r3, [r7, #16]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7ff fa14 	bl	8011f74 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8012b4c:	693b      	ldr	r3, [r7, #16]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	6858      	ldr	r0, [r3, #4]
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	6899      	ldr	r1, [r3, #8]
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	899a      	ldrh	r2, [r3, #12]
 8012b5a:	4b38      	ldr	r3, [pc, #224]	; (8012c3c <lwip_netconn_do_connect+0x164>)
 8012b5c:	f003 fb2e 	bl	80161bc <tcp_connect>
 8012b60:	4603      	mov	r3, r0
 8012b62:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8012b64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d15e      	bne.n	8012c2a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	7f1b      	ldrb	r3, [r3, #28]
 8012b72:	f003 0302 	and.w	r3, r3, #2
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	bf14      	ite	ne
 8012b7a:	2301      	movne	r3, #1
 8012b7c:	2300      	moveq	r3, #0
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	2203      	movs	r2, #3
 8012b88:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8012b8a:	7bfb      	ldrb	r3, [r7, #15]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d009      	beq.n	8012ba4 <lwip_netconn_do_connect+0xcc>
 8012b90:	693b      	ldr	r3, [r7, #16]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	7f1a      	ldrb	r2, [r3, #28]
 8012b96:	693b      	ldr	r3, [r7, #16]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	f042 0204 	orr.w	r2, r2, #4
 8012b9e:	b2d2      	uxtb	r2, r2
 8012ba0:	771a      	strb	r2, [r3, #28]
 8012ba2:	e008      	b.n	8012bb6 <lwip_netconn_do_connect+0xde>
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	7f1a      	ldrb	r2, [r3, #28]
 8012baa:	693b      	ldr	r3, [r7, #16]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	f022 0204 	bic.w	r2, r2, #4
 8012bb2:	b2d2      	uxtb	r2, r2
 8012bb4:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8012bb6:	7bfb      	ldrb	r3, [r7, #15]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d002      	beq.n	8012bc2 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8012bbc:	23fb      	movs	r3, #251	; 0xfb
 8012bbe:	75fb      	strb	r3, [r7, #23]
        break;
 8012bc0:	e033      	b.n	8012c2a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	693a      	ldr	r2, [r7, #16]
 8012bc8:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	785b      	ldrb	r3, [r3, #1]
 8012bd0:	2b03      	cmp	r3, #3
 8012bd2:	d006      	beq.n	8012be2 <lwip_netconn_do_connect+0x10a>
 8012bd4:	4b1a      	ldr	r3, [pc, #104]	; (8012c40 <lwip_netconn_do_connect+0x168>)
 8012bd6:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8012bda:	491a      	ldr	r1, [pc, #104]	; (8012c44 <lwip_netconn_do_connect+0x16c>)
 8012bdc:	481a      	ldr	r0, [pc, #104]	; (8012c48 <lwip_netconn_do_connect+0x170>)
 8012bde:	f00c fcdf 	bl	801f5a0 <iprintf>
              UNLOCK_TCPIP_CORE();
 8012be2:	481a      	ldr	r0, [pc, #104]	; (8012c4c <lwip_netconn_do_connect+0x174>)
 8012be4:	f00c f9fd 	bl	801efe2 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	330c      	adds	r3, #12
 8012bee:	2100      	movs	r1, #0
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f00c f954 	bl	801ee9e <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8012bf6:	4815      	ldr	r0, [pc, #84]	; (8012c4c <lwip_netconn_do_connect+0x174>)
 8012bf8:	f00c f9e4 	bl	801efc4 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	785b      	ldrb	r3, [r3, #1]
 8012c02:	2b03      	cmp	r3, #3
 8012c04:	d116      	bne.n	8012c34 <lwip_netconn_do_connect+0x15c>
 8012c06:	4b0e      	ldr	r3, [pc, #56]	; (8012c40 <lwip_netconn_do_connect+0x168>)
 8012c08:	f240 5274 	movw	r2, #1396	; 0x574
 8012c0c:	490d      	ldr	r1, [pc, #52]	; (8012c44 <lwip_netconn_do_connect+0x16c>)
 8012c0e:	480e      	ldr	r0, [pc, #56]	; (8012c48 <lwip_netconn_do_connect+0x170>)
 8012c10:	f00c fcc6 	bl	801f5a0 <iprintf>
              return;
 8012c14:	e00e      	b.n	8012c34 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8012c16:	4b0a      	ldr	r3, [pc, #40]	; (8012c40 <lwip_netconn_do_connect+0x168>)
 8012c18:	f240 527d 	movw	r2, #1405	; 0x57d
 8012c1c:	490c      	ldr	r1, [pc, #48]	; (8012c50 <lwip_netconn_do_connect+0x178>)
 8012c1e:	480a      	ldr	r0, [pc, #40]	; (8012c48 <lwip_netconn_do_connect+0x170>)
 8012c20:	f00c fcbe 	bl	801f5a0 <iprintf>
 8012c24:	23fa      	movs	r3, #250	; 0xfa
 8012c26:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8012c28:	e000      	b.n	8012c2c <lwip_netconn_do_connect+0x154>
        break;
 8012c2a:	bf00      	nop
    }
  }
  msg->err = err;
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	7dfa      	ldrb	r2, [r7, #23]
 8012c30:	711a      	strb	r2, [r3, #4]
 8012c32:	e000      	b.n	8012c36 <lwip_netconn_do_connect+0x15e>
              return;
 8012c34:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8012c36:	3718      	adds	r7, #24
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}
 8012c3c:	080129b9 	.word	0x080129b9
 8012c40:	08020e20 	.word	0x08020e20
 8012c44:	080211e0 	.word	0x080211e0
 8012c48:	08020e64 	.word	0x08020e64
 8012c4c:	200066d0 	.word	0x200066d0
 8012c50:	08021268 	.word	0x08021268

08012c54 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b086      	sub	sp, #24
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	685b      	ldr	r3, [r3, #4]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d07f      	beq.n	8012d6a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012c74:	2b10      	cmp	r3, #16
 8012c76:	d175      	bne.n	8012d64 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8012c78:	697b      	ldr	r3, [r7, #20]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	785b      	ldrb	r3, [r3, #1]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d165      	bne.n	8012d4e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	685b      	ldr	r3, [r3, #4]
 8012c88:	7d1b      	ldrb	r3, [r3, #20]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d002      	beq.n	8012c94 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8012c8e:	23fa      	movs	r3, #250	; 0xfa
 8012c90:	72fb      	strb	r3, [r7, #11]
 8012c92:	e06c      	b.n	8012d6e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8012c94:	23ff      	movs	r3, #255	; 0xff
 8012c96:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	f107 020b 	add.w	r2, r7, #11
 8012ca2:	7cf9      	ldrb	r1, [r7, #19]
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f003 f8ef 	bl	8015e88 <tcp_listen_with_backlog_and_err>
 8012caa:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d05d      	beq.n	8012d6e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	3310      	adds	r3, #16
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f00c f8aa 	bl	801ee12 <sys_mbox_valid>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d00b      	beq.n	8012cdc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	3310      	adds	r3, #16
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f00c f81a 	bl	801ed04 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	3310      	adds	r3, #16
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f00c f8ac 	bl	801ee34 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8012cdc:	2300      	movs	r3, #0
 8012cde:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	3314      	adds	r3, #20
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f00c f893 	bl	801ee12 <sys_mbox_valid>
 8012cec:	4603      	mov	r3, r0
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d108      	bne.n	8012d04 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	3314      	adds	r3, #20
 8012cf8:	2106      	movs	r1, #6
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f00b ffe0 	bl	801ecc0 <sys_mbox_new>
 8012d00:	4603      	mov	r3, r0
 8012d02:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8012d04:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d118      	bne.n	8012d3e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	2202      	movs	r2, #2
 8012d12:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	68fa      	ldr	r2, [r7, #12]
 8012d1a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	685a      	ldr	r2, [r3, #4]
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	4619      	mov	r1, r3
 8012d28:	4610      	mov	r0, r2
 8012d2a:	f004 f98f 	bl	801704c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	685b      	ldr	r3, [r3, #4]
 8012d34:	4912      	ldr	r1, [pc, #72]	; (8012d80 <lwip_netconn_do_listen+0x12c>)
 8012d36:	4618      	mov	r0, r3
 8012d38:	f004 fa00 	bl	801713c <tcp_accept>
 8012d3c:	e017      	b.n	8012d6e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8012d3e:	68f8      	ldr	r0, [r7, #12]
 8012d40:	f002 fe98 	bl	8015a74 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	2200      	movs	r2, #0
 8012d4a:	605a      	str	r2, [r3, #4]
 8012d4c:	e00f      	b.n	8012d6e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8012d4e:	697b      	ldr	r3, [r7, #20]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	785b      	ldrb	r3, [r3, #1]
 8012d54:	2b02      	cmp	r3, #2
 8012d56:	d102      	bne.n	8012d5e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8012d58:	2300      	movs	r3, #0
 8012d5a:	72fb      	strb	r3, [r7, #11]
 8012d5c:	e007      	b.n	8012d6e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8012d5e:	23f5      	movs	r3, #245	; 0xf5
 8012d60:	72fb      	strb	r3, [r7, #11]
 8012d62:	e004      	b.n	8012d6e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8012d64:	23f0      	movs	r3, #240	; 0xf0
 8012d66:	72fb      	strb	r3, [r7, #11]
 8012d68:	e001      	b.n	8012d6e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8012d6a:	23f5      	movs	r3, #245	; 0xf5
 8012d6c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8012d6e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012d76:	bf00      	nop
 8012d78:	3718      	adds	r7, #24
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	08011fc5 	.word	0x08011fc5

08012d84 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b084      	sub	sp, #16
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7fe fdd0 	bl	801193a <netconn_err>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8012d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d134      	bne.n	8012e10 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	685b      	ldr	r3, [r3, #4]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d02d      	beq.n	8012e0c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	781b      	ldrb	r3, [r3, #0]
 8012db6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012dba:	2b20      	cmp	r3, #32
 8012dbc:	d123      	bne.n	8012e06 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	689b      	ldr	r3, [r3, #8]
 8012dc2:	689b      	ldr	r3, [r3, #8]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d10c      	bne.n	8012de2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	685a      	ldr	r2, [r3, #4]
 8012dce:	68bb      	ldr	r3, [r7, #8]
 8012dd0:	689b      	ldr	r3, [r3, #8]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	4619      	mov	r1, r3
 8012dd6:	4610      	mov	r0, r2
 8012dd8:	f009 f916 	bl	801c008 <udp_send>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8012de0:	e016      	b.n	8012e10 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	6858      	ldr	r0, [r3, #4]
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	689b      	ldr	r3, [r3, #8]
 8012dec:	6819      	ldr	r1, [r3, #0]
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	689b      	ldr	r3, [r3, #8]
 8012df2:	f103 0208 	add.w	r2, r3, #8
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	689b      	ldr	r3, [r3, #8]
 8012dfa:	899b      	ldrh	r3, [r3, #12]
 8012dfc:	f009 f938 	bl	801c070 <udp_sendto>
 8012e00:	4603      	mov	r3, r0
 8012e02:	73fb      	strb	r3, [r7, #15]
          break;
 8012e04:	e004      	b.n	8012e10 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8012e06:	23f5      	movs	r3, #245	; 0xf5
 8012e08:	73fb      	strb	r3, [r7, #15]
          break;
 8012e0a:	e001      	b.n	8012e10 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8012e0c:	23f5      	movs	r3, #245	; 0xf5
 8012e0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	7bfa      	ldrb	r2, [r7, #15]
 8012e14:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012e16:	bf00      	nop
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}

08012e1e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8012e1e:	b580      	push	{r7, lr}
 8012e20:	b086      	sub	sp, #24
 8012e22:	af00      	add	r7, sp, #0
 8012e24:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	685b      	ldr	r3, [r3, #4]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d022      	beq.n	8012e80 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012e44:	2b10      	cmp	r3, #16
 8012e46:	d11b      	bne.n	8012e80 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	689b      	ldr	r3, [r3, #8]
 8012e4c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e54:	d202      	bcs.n	8012e5c <lwip_netconn_do_recv+0x3e>
 8012e56:	697b      	ldr	r3, [r7, #20]
 8012e58:	b29b      	uxth	r3, r3
 8012e5a:	e001      	b.n	8012e60 <lwip_netconn_do_recv+0x42>
 8012e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012e60:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	685b      	ldr	r3, [r3, #4]
 8012e68:	89fa      	ldrh	r2, [r7, #14]
 8012e6a:	4611      	mov	r1, r2
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f003 f90f 	bl	8016090 <tcp_recved>
        remaining -= recved;
 8012e72:	89fb      	ldrh	r3, [r7, #14]
 8012e74:	697a      	ldr	r2, [r7, #20]
 8012e76:	1ad3      	subs	r3, r2, r3
 8012e78:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d1e6      	bne.n	8012e4e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012e80:	bf00      	nop
 8012e82:	3718      	adds	r7, #24
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b088      	sub	sp, #32
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	460b      	mov	r3, r1
 8012e92:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8012e94:	2300      	movs	r3, #0
 8012e96:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d106      	bne.n	8012eac <lwip_netconn_do_writemore+0x24>
 8012e9e:	4b96      	ldr	r3, [pc, #600]	; (80130f8 <lwip_netconn_do_writemore+0x270>)
 8012ea0:	f240 6273 	movw	r2, #1651	; 0x673
 8012ea4:	4995      	ldr	r1, [pc, #596]	; (80130fc <lwip_netconn_do_writemore+0x274>)
 8012ea6:	4896      	ldr	r0, [pc, #600]	; (8013100 <lwip_netconn_do_writemore+0x278>)
 8012ea8:	f00c fb7a 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	785b      	ldrb	r3, [r3, #1]
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	d006      	beq.n	8012ec2 <lwip_netconn_do_writemore+0x3a>
 8012eb4:	4b90      	ldr	r3, [pc, #576]	; (80130f8 <lwip_netconn_do_writemore+0x270>)
 8012eb6:	f240 6274 	movw	r2, #1652	; 0x674
 8012eba:	4992      	ldr	r1, [pc, #584]	; (8013104 <lwip_netconn_do_writemore+0x27c>)
 8012ebc:	4890      	ldr	r0, [pc, #576]	; (8013100 <lwip_netconn_do_writemore+0x278>)
 8012ebe:	f00c fb6f 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	6a1b      	ldr	r3, [r3, #32]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d106      	bne.n	8012ed8 <lwip_netconn_do_writemore+0x50>
 8012eca:	4b8b      	ldr	r3, [pc, #556]	; (80130f8 <lwip_netconn_do_writemore+0x270>)
 8012ecc:	f240 6275 	movw	r2, #1653	; 0x675
 8012ed0:	498d      	ldr	r1, [pc, #564]	; (8013108 <lwip_netconn_do_writemore+0x280>)
 8012ed2:	488b      	ldr	r0, [pc, #556]	; (8013100 <lwip_netconn_do_writemore+0x278>)
 8012ed4:	f00c fb64 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	685b      	ldr	r3, [r3, #4]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d106      	bne.n	8012eee <lwip_netconn_do_writemore+0x66>
 8012ee0:	4b85      	ldr	r3, [pc, #532]	; (80130f8 <lwip_netconn_do_writemore+0x270>)
 8012ee2:	f240 6276 	movw	r2, #1654	; 0x676
 8012ee6:	4989      	ldr	r1, [pc, #548]	; (801310c <lwip_netconn_do_writemore+0x284>)
 8012ee8:	4885      	ldr	r0, [pc, #532]	; (8013100 <lwip_netconn_do_writemore+0x278>)
 8012eea:	f00c fb59 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6a1b      	ldr	r3, [r3, #32]
 8012ef2:	699a      	ldr	r2, [r3, #24]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	6a1b      	ldr	r3, [r3, #32]
 8012ef8:	695b      	ldr	r3, [r3, #20]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d306      	bcc.n	8012f0c <lwip_netconn_do_writemore+0x84>
 8012efe:	4b7e      	ldr	r3, [pc, #504]	; (80130f8 <lwip_netconn_do_writemore+0x270>)
 8012f00:	f240 6277 	movw	r2, #1655	; 0x677
 8012f04:	4982      	ldr	r1, [pc, #520]	; (8013110 <lwip_netconn_do_writemore+0x288>)
 8012f06:	487e      	ldr	r0, [pc, #504]	; (8013100 <lwip_netconn_do_writemore+0x278>)
 8012f08:	f00c fb4a 	bl	801f5a0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	6a1b      	ldr	r3, [r3, #32]
 8012f10:	899b      	ldrh	r3, [r3, #12]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d106      	bne.n	8012f24 <lwip_netconn_do_writemore+0x9c>
 8012f16:	4b78      	ldr	r3, [pc, #480]	; (80130f8 <lwip_netconn_do_writemore+0x270>)
 8012f18:	f240 6279 	movw	r2, #1657	; 0x679
 8012f1c:	497d      	ldr	r1, [pc, #500]	; (8013114 <lwip_netconn_do_writemore+0x28c>)
 8012f1e:	4878      	ldr	r0, [pc, #480]	; (8013100 <lwip_netconn_do_writemore+0x278>)
 8012f20:	f00c fb3e 	bl	801f5a0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	6a1b      	ldr	r3, [r3, #32]
 8012f28:	7f1b      	ldrb	r3, [r3, #28]
 8012f2a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	7f1b      	ldrb	r3, [r3, #28]
 8012f30:	f003 0302 	and.w	r3, r3, #2
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d104      	bne.n	8012f42 <lwip_netconn_do_writemore+0xba>
 8012f38:	7ebb      	ldrb	r3, [r7, #26]
 8012f3a:	f003 0304 	and.w	r3, r3, #4
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d001      	beq.n	8012f46 <lwip_netconn_do_writemore+0xbe>
 8012f42:	2301      	movs	r3, #1
 8012f44:	e000      	b.n	8012f48 <lwip_netconn_do_writemore+0xc0>
 8012f46:	2300      	movs	r3, #0
 8012f48:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6a1b      	ldr	r3, [r3, #32]
 8012f4e:	689b      	ldr	r3, [r3, #8]
 8012f50:	681a      	ldr	r2, [r3, #0]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	6a1b      	ldr	r3, [r3, #32]
 8012f56:	691b      	ldr	r3, [r3, #16]
 8012f58:	4413      	add	r3, r2
 8012f5a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	6a1b      	ldr	r3, [r3, #32]
 8012f60:	689b      	ldr	r3, [r3, #8]
 8012f62:	685a      	ldr	r2, [r3, #4]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6a1b      	ldr	r3, [r3, #32]
 8012f68:	691b      	ldr	r3, [r3, #16]
 8012f6a:	1ad3      	subs	r3, r2, r3
 8012f6c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8012f6e:	693b      	ldr	r3, [r7, #16]
 8012f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f74:	d307      	bcc.n	8012f86 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8012f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012f7a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012f7c:	7ebb      	ldrb	r3, [r7, #26]
 8012f7e:	f043 0302 	orr.w	r3, r3, #2
 8012f82:	76bb      	strb	r3, [r7, #26]
 8012f84:	e001      	b.n	8012f8a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	685b      	ldr	r3, [r3, #4]
 8012f8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012f92:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8012f94:	89fa      	ldrh	r2, [r7, #14]
 8012f96:	8bbb      	ldrh	r3, [r7, #28]
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d216      	bcs.n	8012fca <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8012f9c:	89fb      	ldrh	r3, [r7, #14]
 8012f9e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8012fa0:	7e3b      	ldrb	r3, [r7, #24]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d00d      	beq.n	8012fc2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8012fa6:	8bbb      	ldrh	r3, [r7, #28]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d10e      	bne.n	8012fca <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6a1b      	ldr	r3, [r3, #32]
 8012fb0:	699b      	ldr	r3, [r3, #24]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d102      	bne.n	8012fbc <lwip_netconn_do_writemore+0x134>
 8012fb6:	f06f 0306 	mvn.w	r3, #6
 8012fba:	e000      	b.n	8012fbe <lwip_netconn_do_writemore+0x136>
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8012fc0:	e07d      	b.n	80130be <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8012fc2:	7ebb      	ldrb	r3, [r7, #26]
 8012fc4:	f043 0302 	orr.w	r3, r3, #2
 8012fc8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	6a1b      	ldr	r3, [r3, #32]
 8012fce:	691a      	ldr	r2, [r3, #16]
 8012fd0:	8bbb      	ldrh	r3, [r7, #28]
 8012fd2:	441a      	add	r2, r3
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6a1b      	ldr	r3, [r3, #32]
 8012fd8:	689b      	ldr	r3, [r3, #8]
 8012fda:	685b      	ldr	r3, [r3, #4]
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d906      	bls.n	8012fee <lwip_netconn_do_writemore+0x166>
 8012fe0:	4b45      	ldr	r3, [pc, #276]	; (80130f8 <lwip_netconn_do_writemore+0x270>)
 8012fe2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8012fe6:	494c      	ldr	r1, [pc, #304]	; (8013118 <lwip_netconn_do_writemore+0x290>)
 8012fe8:	4845      	ldr	r0, [pc, #276]	; (8013100 <lwip_netconn_do_writemore+0x278>)
 8012fea:	f00c fad9 	bl	801f5a0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012fee:	8bbb      	ldrh	r3, [r7, #28]
 8012ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ff4:	4293      	cmp	r3, r2
 8012ff6:	d103      	bne.n	8013000 <lwip_netconn_do_writemore+0x178>
 8012ff8:	693b      	ldr	r3, [r7, #16]
 8012ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ffe:	d209      	bcs.n	8013014 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8013000:	693b      	ldr	r3, [r7, #16]
 8013002:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8013004:	8bba      	ldrh	r2, [r7, #28]
 8013006:	429a      	cmp	r2, r3
 8013008:	d10b      	bne.n	8013022 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	6a1b      	ldr	r3, [r3, #32]
 801300e:	899b      	ldrh	r3, [r3, #12]
 8013010:	2b01      	cmp	r3, #1
 8013012:	d906      	bls.n	8013022 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8013014:	2301      	movs	r3, #1
 8013016:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8013018:	7ebb      	ldrb	r3, [r7, #26]
 801301a:	f043 0302 	orr.w	r3, r3, #2
 801301e:	76bb      	strb	r3, [r7, #26]
 8013020:	e001      	b.n	8013026 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8013022:	2300      	movs	r3, #0
 8013024:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6858      	ldr	r0, [r3, #4]
 801302a:	7ebb      	ldrb	r3, [r7, #26]
 801302c:	8bba      	ldrh	r2, [r7, #28]
 801302e:	6979      	ldr	r1, [r7, #20]
 8013030:	f006 ff4e 	bl	8019ed0 <tcp_write>
 8013034:	4603      	mov	r3, r0
 8013036:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8013038:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d12c      	bne.n	801309a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6a1b      	ldr	r3, [r3, #32]
 8013044:	6999      	ldr	r1, [r3, #24]
 8013046:	8bba      	ldrh	r2, [r7, #28]
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	6a1b      	ldr	r3, [r3, #32]
 801304c:	440a      	add	r2, r1
 801304e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	6a1b      	ldr	r3, [r3, #32]
 8013054:	6919      	ldr	r1, [r3, #16]
 8013056:	8bba      	ldrh	r2, [r7, #28]
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6a1b      	ldr	r3, [r3, #32]
 801305c:	440a      	add	r2, r1
 801305e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6a1b      	ldr	r3, [r3, #32]
 8013064:	691a      	ldr	r2, [r3, #16]
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6a1b      	ldr	r3, [r3, #32]
 801306a:	689b      	ldr	r3, [r3, #8]
 801306c:	685b      	ldr	r3, [r3, #4]
 801306e:	429a      	cmp	r2, r3
 8013070:	d113      	bne.n	801309a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6a1b      	ldr	r3, [r3, #32]
 8013076:	899a      	ldrh	r2, [r3, #12]
 8013078:	3a01      	subs	r2, #1
 801307a:	b292      	uxth	r2, r2
 801307c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	6a1b      	ldr	r3, [r3, #32]
 8013082:	899b      	ldrh	r3, [r3, #12]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d008      	beq.n	801309a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	6a1b      	ldr	r3, [r3, #32]
 801308c:	689a      	ldr	r2, [r3, #8]
 801308e:	3208      	adds	r2, #8
 8013090:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6a1b      	ldr	r3, [r3, #32]
 8013096:	2200      	movs	r2, #0
 8013098:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801309a:	7e7b      	ldrb	r3, [r7, #25]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d004      	beq.n	80130aa <lwip_netconn_do_writemore+0x222>
 80130a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	f43f af50 	beq.w	8012f4a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80130aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d004      	beq.n	80130bc <lwip_netconn_do_writemore+0x234>
 80130b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80130ba:	d146      	bne.n	801314a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80130bc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80130be:	7e3b      	ldrb	r3, [r7, #24]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d02b      	beq.n	801311c <lwip_netconn_do_writemore+0x294>
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	6a1b      	ldr	r3, [r3, #32]
 80130c8:	699a      	ldr	r2, [r3, #24]
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6a1b      	ldr	r3, [r3, #32]
 80130ce:	695b      	ldr	r3, [r3, #20]
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d223      	bcs.n	801311c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d005      	beq.n	80130e8 <lwip_netconn_do_writemore+0x260>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130e0:	2200      	movs	r2, #0
 80130e2:	2103      	movs	r1, #3
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	7f1b      	ldrb	r3, [r3, #28]
 80130ec:	f043 0310 	orr.w	r3, r3, #16
 80130f0:	b2da      	uxtb	r2, r3
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	771a      	strb	r2, [r3, #28]
 80130f6:	e028      	b.n	801314a <lwip_netconn_do_writemore+0x2c2>
 80130f8:	08020e20 	.word	0x08020e20
 80130fc:	08020f78 	.word	0x08020f78
 8013100:	08020e64 	.word	0x08020e64
 8013104:	08021280 	.word	0x08021280
 8013108:	08020f88 	.word	0x08020f88
 801310c:	080212a0 	.word	0x080212a0
 8013110:	080212b8 	.word	0x080212b8
 8013114:	080212f8 	.word	0x080212f8
 8013118:	08021320 	.word	0x08021320
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013124:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8013128:	d305      	bcc.n	8013136 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	685b      	ldr	r3, [r3, #4]
 801312e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8013132:	2b04      	cmp	r3, #4
 8013134:	d909      	bls.n	801314a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801313a:	2b00      	cmp	r3, #0
 801313c:	d005      	beq.n	801314a <lwip_netconn_do_writemore+0x2c2>
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013142:	2200      	movs	r2, #0
 8013144:	2103      	movs	r1, #3
 8013146:	6878      	ldr	r0, [r7, #4]
 8013148:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 801314a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d11d      	bne.n	801318e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	6a1b      	ldr	r3, [r3, #32]
 8013156:	699a      	ldr	r2, [r3, #24]
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6a1b      	ldr	r3, [r3, #32]
 801315c:	695b      	ldr	r3, [r3, #20]
 801315e:	429a      	cmp	r2, r3
 8013160:	d002      	beq.n	8013168 <lwip_netconn_do_writemore+0x2e0>
 8013162:	7e3b      	ldrb	r3, [r7, #24]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d001      	beq.n	801316c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8013168:	2301      	movs	r3, #1
 801316a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	4618      	mov	r0, r3
 8013172:	f007 fc97 	bl	801aaa4 <tcp_output>
 8013176:	4603      	mov	r3, r0
 8013178:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 801317a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801317e:	f113 0f04 	cmn.w	r3, #4
 8013182:	d12c      	bne.n	80131de <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8013184:	7b3b      	ldrb	r3, [r7, #12]
 8013186:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8013188:	2301      	movs	r3, #1
 801318a:	76fb      	strb	r3, [r7, #27]
 801318c:	e027      	b.n	80131de <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801318e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013196:	d120      	bne.n	80131da <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	4618      	mov	r0, r3
 801319e:	f007 fc81 	bl	801aaa4 <tcp_output>
 80131a2:	4603      	mov	r3, r0
 80131a4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80131a6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80131aa:	f113 0f04 	cmn.w	r3, #4
 80131ae:	d104      	bne.n	80131ba <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80131b0:	7b7b      	ldrb	r3, [r7, #13]
 80131b2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80131b4:	2301      	movs	r3, #1
 80131b6:	76fb      	strb	r3, [r7, #27]
 80131b8:	e011      	b.n	80131de <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80131ba:	7e3b      	ldrb	r3, [r7, #24]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d00e      	beq.n	80131de <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	6a1b      	ldr	r3, [r3, #32]
 80131c4:	699b      	ldr	r3, [r3, #24]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d102      	bne.n	80131d0 <lwip_netconn_do_writemore+0x348>
 80131ca:	f06f 0306 	mvn.w	r3, #6
 80131ce:	e000      	b.n	80131d2 <lwip_netconn_do_writemore+0x34a>
 80131d0:	2300      	movs	r3, #0
 80131d2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80131d4:	2301      	movs	r3, #1
 80131d6:	76fb      	strb	r3, [r7, #27]
 80131d8:	e001      	b.n	80131de <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80131da:	2301      	movs	r3, #1
 80131dc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80131de:	7efb      	ldrb	r3, [r7, #27]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d015      	beq.n	8013210 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	6a1b      	ldr	r3, [r3, #32]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	330c      	adds	r3, #12
 80131ec:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	6a1b      	ldr	r3, [r3, #32]
 80131f2:	7ffa      	ldrb	r2, [r7, #31]
 80131f4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2200      	movs	r2, #0
 80131fa:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2200      	movs	r2, #0
 8013200:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8013202:	78fb      	ldrb	r3, [r7, #3]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d006      	beq.n	8013216 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8013208:	68b8      	ldr	r0, [r7, #8]
 801320a:	f00b fe79 	bl	801ef00 <sys_sem_signal>
 801320e:	e002      	b.n	8013216 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8013210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013214:	e000      	b.n	8013218 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8013216:	2300      	movs	r3, #0
}
 8013218:	4618      	mov	r0, r3
 801321a:	3720      	adds	r7, #32
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}

08013220 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b084      	sub	sp, #16
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	4618      	mov	r0, r3
 8013232:	f7fe fb82 	bl	801193a <netconn_err>
 8013236:	4603      	mov	r3, r0
 8013238:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801323a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d166      	bne.n	8013310 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	781b      	ldrb	r3, [r3, #0]
 8013248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801324c:	2b10      	cmp	r3, #16
 801324e:	d15d      	bne.n	801330c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8013250:	68bb      	ldr	r3, [r7, #8]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	785b      	ldrb	r3, [r3, #1]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d002      	beq.n	8013260 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 801325a:	23fb      	movs	r3, #251	; 0xfb
 801325c:	73fb      	strb	r3, [r7, #15]
 801325e:	e057      	b.n	8013310 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8013260:	68bb      	ldr	r3, [r7, #8]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d04d      	beq.n	8013306 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	2201      	movs	r2, #1
 8013270:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	6a1b      	ldr	r3, [r3, #32]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d006      	beq.n	801328a <lwip_netconn_do_write+0x6a>
 801327c:	4b28      	ldr	r3, [pc, #160]	; (8013320 <lwip_netconn_do_write+0x100>)
 801327e:	f240 7223 	movw	r2, #1827	; 0x723
 8013282:	4928      	ldr	r1, [pc, #160]	; (8013324 <lwip_netconn_do_write+0x104>)
 8013284:	4828      	ldr	r0, [pc, #160]	; (8013328 <lwip_netconn_do_write+0x108>)
 8013286:	f00c f98b 	bl	801f5a0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	695b      	ldr	r3, [r3, #20]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d106      	bne.n	80132a0 <lwip_netconn_do_write+0x80>
 8013292:	4b23      	ldr	r3, [pc, #140]	; (8013320 <lwip_netconn_do_write+0x100>)
 8013294:	f240 7224 	movw	r2, #1828	; 0x724
 8013298:	4924      	ldr	r1, [pc, #144]	; (801332c <lwip_netconn_do_write+0x10c>)
 801329a:	4823      	ldr	r0, [pc, #140]	; (8013328 <lwip_netconn_do_write+0x108>)
 801329c:	f00c f980 	bl	801f5a0 <iprintf>
        msg->conn->current_msg = msg;
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	68ba      	ldr	r2, [r7, #8]
 80132a6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	2100      	movs	r1, #0
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7ff fdea 	bl	8012e88 <lwip_netconn_do_writemore>
 80132b4:	4603      	mov	r3, r0
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d02e      	beq.n	8013318 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	785b      	ldrb	r3, [r3, #1]
 80132c0:	2b01      	cmp	r3, #1
 80132c2:	d006      	beq.n	80132d2 <lwip_netconn_do_write+0xb2>
 80132c4:	4b16      	ldr	r3, [pc, #88]	; (8013320 <lwip_netconn_do_write+0x100>)
 80132c6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80132ca:	4919      	ldr	r1, [pc, #100]	; (8013330 <lwip_netconn_do_write+0x110>)
 80132cc:	4816      	ldr	r0, [pc, #88]	; (8013328 <lwip_netconn_do_write+0x108>)
 80132ce:	f00c f967 	bl	801f5a0 <iprintf>
          UNLOCK_TCPIP_CORE();
 80132d2:	4818      	ldr	r0, [pc, #96]	; (8013334 <lwip_netconn_do_write+0x114>)
 80132d4:	f00b fe85 	bl	801efe2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80132d8:	68bb      	ldr	r3, [r7, #8]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	330c      	adds	r3, #12
 80132de:	2100      	movs	r1, #0
 80132e0:	4618      	mov	r0, r3
 80132e2:	f00b fddc 	bl	801ee9e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80132e6:	4813      	ldr	r0, [pc, #76]	; (8013334 <lwip_netconn_do_write+0x114>)
 80132e8:	f00b fe6c 	bl	801efc4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	785b      	ldrb	r3, [r3, #1]
 80132f2:	2b01      	cmp	r3, #1
 80132f4:	d110      	bne.n	8013318 <lwip_netconn_do_write+0xf8>
 80132f6:	4b0a      	ldr	r3, [pc, #40]	; (8013320 <lwip_netconn_do_write+0x100>)
 80132f8:	f240 722c 	movw	r2, #1836	; 0x72c
 80132fc:	490c      	ldr	r1, [pc, #48]	; (8013330 <lwip_netconn_do_write+0x110>)
 80132fe:	480a      	ldr	r0, [pc, #40]	; (8013328 <lwip_netconn_do_write+0x108>)
 8013300:	f00c f94e 	bl	801f5a0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8013304:	e008      	b.n	8013318 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8013306:	23f5      	movs	r3, #245	; 0xf5
 8013308:	73fb      	strb	r3, [r7, #15]
 801330a:	e001      	b.n	8013310 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 801330c:	23fa      	movs	r3, #250	; 0xfa
 801330e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	7bfa      	ldrb	r2, [r7, #15]
 8013314:	711a      	strb	r2, [r3, #4]
 8013316:	e000      	b.n	801331a <lwip_netconn_do_write+0xfa>
        return;
 8013318:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 801331a:	3710      	adds	r7, #16
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}
 8013320:	08020e20 	.word	0x08020e20
 8013324:	080211c4 	.word	0x080211c4
 8013328:	08020e64 	.word	0x08020e64
 801332c:	0802134c 	.word	0x0802134c
 8013330:	080211e0 	.word	0x080211e0
 8013334:	200066d0 	.word	0x200066d0

08013338 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	785b      	ldrb	r3, [r3, #1]
 801334a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d069      	beq.n	801342a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8013360:	2b10      	cmp	r3, #16
 8013362:	d162      	bne.n	801342a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8013368:	2b03      	cmp	r3, #3
 801336a:	d002      	beq.n	8013372 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801336c:	7afb      	ldrb	r3, [r7, #11]
 801336e:	2b02      	cmp	r3, #2
 8013370:	d05b      	beq.n	801342a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8013372:	7afb      	ldrb	r3, [r7, #11]
 8013374:	2b03      	cmp	r3, #3
 8013376:	d103      	bne.n	8013380 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	22f5      	movs	r2, #245	; 0xf5
 801337c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801337e:	e059      	b.n	8013434 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8013380:	7afb      	ldrb	r3, [r7, #11]
 8013382:	2b01      	cmp	r3, #1
 8013384:	d103      	bne.n	801338e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	22fb      	movs	r2, #251	; 0xfb
 801338a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801338c:	e052      	b.n	8013434 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	7a1b      	ldrb	r3, [r3, #8]
 8013392:	f003 0301 	and.w	r3, r3, #1
 8013396:	2b00      	cmp	r3, #0
 8013398:	d004      	beq.n	80133a4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	4618      	mov	r0, r3
 80133a0:	f7ff f804 	bl	80123ac <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	6a1b      	ldr	r3, [r3, #32]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d006      	beq.n	80133bc <lwip_netconn_do_close+0x84>
 80133ae:	4b23      	ldr	r3, [pc, #140]	; (801343c <lwip_netconn_do_close+0x104>)
 80133b0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80133b4:	4922      	ldr	r1, [pc, #136]	; (8013440 <lwip_netconn_do_close+0x108>)
 80133b6:	4823      	ldr	r0, [pc, #140]	; (8013444 <lwip_netconn_do_close+0x10c>)
 80133b8:	f00c f8f2 	bl	801f5a0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	2204      	movs	r2, #4
 80133c2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	68fa      	ldr	r2, [r7, #12]
 80133ca:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	2100      	movs	r1, #0
 80133d2:	4618      	mov	r0, r3
 80133d4:	f7ff f868 	bl	80124a8 <lwip_netconn_do_close_internal>
 80133d8:	4603      	mov	r3, r0
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d029      	beq.n	8013432 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	785b      	ldrb	r3, [r3, #1]
 80133e4:	2b04      	cmp	r3, #4
 80133e6:	d006      	beq.n	80133f6 <lwip_netconn_do_close+0xbe>
 80133e8:	4b14      	ldr	r3, [pc, #80]	; (801343c <lwip_netconn_do_close+0x104>)
 80133ea:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80133ee:	4916      	ldr	r1, [pc, #88]	; (8013448 <lwip_netconn_do_close+0x110>)
 80133f0:	4814      	ldr	r0, [pc, #80]	; (8013444 <lwip_netconn_do_close+0x10c>)
 80133f2:	f00c f8d5 	bl	801f5a0 <iprintf>
        UNLOCK_TCPIP_CORE();
 80133f6:	4815      	ldr	r0, [pc, #84]	; (801344c <lwip_netconn_do_close+0x114>)
 80133f8:	f00b fdf3 	bl	801efe2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	330c      	adds	r3, #12
 8013402:	2100      	movs	r1, #0
 8013404:	4618      	mov	r0, r3
 8013406:	f00b fd4a 	bl	801ee9e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801340a:	4810      	ldr	r0, [pc, #64]	; (801344c <lwip_netconn_do_close+0x114>)
 801340c:	f00b fdda 	bl	801efc4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	785b      	ldrb	r3, [r3, #1]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d00b      	beq.n	8013432 <lwip_netconn_do_close+0xfa>
 801341a:	4b08      	ldr	r3, [pc, #32]	; (801343c <lwip_netconn_do_close+0x104>)
 801341c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8013420:	4909      	ldr	r1, [pc, #36]	; (8013448 <lwip_netconn_do_close+0x110>)
 8013422:	4808      	ldr	r0, [pc, #32]	; (8013444 <lwip_netconn_do_close+0x10c>)
 8013424:	f00c f8bc 	bl	801f5a0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8013428:	e003      	b.n	8013432 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	22f5      	movs	r2, #245	; 0xf5
 801342e:	711a      	strb	r2, [r3, #4]
 8013430:	e000      	b.n	8013434 <lwip_netconn_do_close+0xfc>
      return;
 8013432:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8013434:	3710      	adds	r7, #16
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}
 801343a:	bf00      	nop
 801343c:	08020e20 	.word	0x08020e20
 8013440:	080211c4 	.word	0x080211c4
 8013444:	08020e64 	.word	0x08020e64
 8013448:	080211e0 	.word	0x080211e0
 801344c:	200066d0 	.word	0x200066d0

08013450 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8013456:	2006      	movs	r0, #6
 8013458:	f000 ff38 	bl	80142cc <memp_malloc>
 801345c:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d004      	beq.n	801346e <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8013464:	2210      	movs	r2, #16
 8013466:	2100      	movs	r1, #0
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f00b ffb1 	bl	801f3d0 <memset>
  }
  return buf;
 801346e:	687b      	ldr	r3, [r7, #4]
}
 8013470:	4618      	mov	r0, r3
 8013472:	3708      	adds	r7, #8
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}

08013478 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b082      	sub	sp, #8
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d013      	beq.n	80134ae <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d00b      	beq.n	80134a6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	4618      	mov	r0, r3
 8013494:	f001 fe34 	bl	8015100 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2200      	movs	r2, #0
 801349c:	605a      	str	r2, [r3, #4]
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	685a      	ldr	r2, [r3, #4]
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80134a6:	6879      	ldr	r1, [r7, #4]
 80134a8:	2006      	movs	r0, #6
 80134aa:	f000 ff85 	bl	80143b8 <memp_free>
  }
}
 80134ae:	bf00      	nop
 80134b0:	3708      	adds	r7, #8
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
	...

080134b8 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b084      	sub	sp, #16
 80134bc:	af00      	add	r7, sp, #0
 80134be:	60f8      	str	r0, [r7, #12]
 80134c0:	60b9      	str	r1, [r7, #8]
 80134c2:	4613      	mov	r3, r2
 80134c4:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d108      	bne.n	80134de <netbuf_ref+0x26>
 80134cc:	4b1c      	ldr	r3, [pc, #112]	; (8013540 <netbuf_ref+0x88>)
 80134ce:	2299      	movs	r2, #153	; 0x99
 80134d0:	491c      	ldr	r1, [pc, #112]	; (8013544 <netbuf_ref+0x8c>)
 80134d2:	481d      	ldr	r0, [pc, #116]	; (8013548 <netbuf_ref+0x90>)
 80134d4:	f00c f864 	bl	801f5a0 <iprintf>
 80134d8:	f06f 030f 	mvn.w	r3, #15
 80134dc:	e02b      	b.n	8013536 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d004      	beq.n	80134f0 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	4618      	mov	r0, r3
 80134ec:	f001 fe08 	bl	8015100 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 80134f0:	2241      	movs	r2, #65	; 0x41
 80134f2:	2100      	movs	r1, #0
 80134f4:	2036      	movs	r0, #54	; 0x36
 80134f6:	f001 fb1f 	bl	8014b38 <pbuf_alloc>
 80134fa:	4602      	mov	r2, r0
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d105      	bne.n	8013514 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	2200      	movs	r2, #0
 801350c:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 801350e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013512:	e010      	b.n	8013536 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	68ba      	ldr	r2, [r7, #8]
 801351a:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	88fa      	ldrh	r2, [r7, #6]
 8013522:	811a      	strh	r2, [r3, #8]
 8013524:	68fa      	ldr	r2, [r7, #12]
 8013526:	6812      	ldr	r2, [r2, #0]
 8013528:	891b      	ldrh	r3, [r3, #8]
 801352a:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	681a      	ldr	r2, [r3, #0]
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8013534:	2300      	movs	r3, #0
}
 8013536:	4618      	mov	r0, r3
 8013538:	3710      	adds	r7, #16
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}
 801353e:	bf00      	nop
 8013540:	08021378 	.word	0x08021378
 8013544:	08021430 	.word	0x08021430
 8013548:	080213c8 	.word	0x080213c8

0801354c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b082      	sub	sp, #8
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d108      	bne.n	801356c <netbuf_next+0x20>
 801355a:	4b11      	ldr	r3, [pc, #68]	; (80135a0 <netbuf_next+0x54>)
 801355c:	22e0      	movs	r2, #224	; 0xe0
 801355e:	4911      	ldr	r1, [pc, #68]	; (80135a4 <netbuf_next+0x58>)
 8013560:	4811      	ldr	r0, [pc, #68]	; (80135a8 <netbuf_next+0x5c>)
 8013562:	f00c f81d 	bl	801f5a0 <iprintf>
 8013566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801356a:	e014      	b.n	8013596 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	685b      	ldr	r3, [r3, #4]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d102      	bne.n	801357c <netbuf_next+0x30>
    return -1;
 8013576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801357a:	e00c      	b.n	8013596 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	681a      	ldr	r2, [r3, #0]
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	685b      	ldr	r3, [r3, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d101      	bne.n	8013594 <netbuf_next+0x48>
    return 1;
 8013590:	2301      	movs	r3, #1
 8013592:	e000      	b.n	8013596 <netbuf_next+0x4a>
  }
  return 0;
 8013594:	2300      	movs	r3, #0
}
 8013596:	4618      	mov	r0, r3
 8013598:	3708      	adds	r7, #8
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	bf00      	nop
 80135a0:	08021378 	.word	0x08021378
 80135a4:	080214d8 	.word	0x080214d8
 80135a8:	080213c8 	.word	0x080213c8

080135ac <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b084      	sub	sp, #16
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
 80135b4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80135b6:	f008 fb2d 	bl	801bc14 <sys_timeouts_sleeptime>
 80135ba:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80135c2:	d10b      	bne.n	80135dc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80135c4:	4813      	ldr	r0, [pc, #76]	; (8013614 <tcpip_timeouts_mbox_fetch+0x68>)
 80135c6:	f00b fd0c 	bl	801efe2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80135ca:	2200      	movs	r2, #0
 80135cc:	6839      	ldr	r1, [r7, #0]
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f00b fbc4 	bl	801ed5c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80135d4:	480f      	ldr	r0, [pc, #60]	; (8013614 <tcpip_timeouts_mbox_fetch+0x68>)
 80135d6:	f00b fcf5 	bl	801efc4 <sys_mutex_lock>
    return;
 80135da:	e018      	b.n	801360e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d102      	bne.n	80135e8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80135e2:	f008 fadd 	bl	801bba0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80135e6:	e7e6      	b.n	80135b6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80135e8:	480a      	ldr	r0, [pc, #40]	; (8013614 <tcpip_timeouts_mbox_fetch+0x68>)
 80135ea:	f00b fcfa 	bl	801efe2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80135ee:	68fa      	ldr	r2, [r7, #12]
 80135f0:	6839      	ldr	r1, [r7, #0]
 80135f2:	6878      	ldr	r0, [r7, #4]
 80135f4:	f00b fbb2 	bl	801ed5c <sys_arch_mbox_fetch>
 80135f8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80135fa:	4806      	ldr	r0, [pc, #24]	; (8013614 <tcpip_timeouts_mbox_fetch+0x68>)
 80135fc:	f00b fce2 	bl	801efc4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013606:	d102      	bne.n	801360e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8013608:	f008 faca 	bl	801bba0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801360c:	e7d3      	b.n	80135b6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801360e:	3710      	adds	r7, #16
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}
 8013614:	200066d0 	.word	0x200066d0

08013618 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b084      	sub	sp, #16
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8013620:	4810      	ldr	r0, [pc, #64]	; (8013664 <tcpip_thread+0x4c>)
 8013622:	f00b fccf 	bl	801efc4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8013626:	4b10      	ldr	r3, [pc, #64]	; (8013668 <tcpip_thread+0x50>)
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d005      	beq.n	801363a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801362e:	4b0e      	ldr	r3, [pc, #56]	; (8013668 <tcpip_thread+0x50>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	4a0e      	ldr	r2, [pc, #56]	; (801366c <tcpip_thread+0x54>)
 8013634:	6812      	ldr	r2, [r2, #0]
 8013636:	4610      	mov	r0, r2
 8013638:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801363a:	f107 030c 	add.w	r3, r7, #12
 801363e:	4619      	mov	r1, r3
 8013640:	480b      	ldr	r0, [pc, #44]	; (8013670 <tcpip_thread+0x58>)
 8013642:	f7ff ffb3 	bl	80135ac <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d106      	bne.n	801365a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801364c:	4b09      	ldr	r3, [pc, #36]	; (8013674 <tcpip_thread+0x5c>)
 801364e:	2291      	movs	r2, #145	; 0x91
 8013650:	4909      	ldr	r1, [pc, #36]	; (8013678 <tcpip_thread+0x60>)
 8013652:	480a      	ldr	r0, [pc, #40]	; (801367c <tcpip_thread+0x64>)
 8013654:	f00b ffa4 	bl	801f5a0 <iprintf>
      continue;
 8013658:	e003      	b.n	8013662 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	4618      	mov	r0, r3
 801365e:	f000 f80f 	bl	8013680 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8013662:	e7ea      	b.n	801363a <tcpip_thread+0x22>
 8013664:	200066d0 	.word	0x200066d0
 8013668:	200066c4 	.word	0x200066c4
 801366c:	200066c8 	.word	0x200066c8
 8013670:	200066cc 	.word	0x200066cc
 8013674:	08021510 	.word	0x08021510
 8013678:	08021540 	.word	0x08021540
 801367c:	08021560 	.word	0x08021560

08013680 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b082      	sub	sp, #8
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	781b      	ldrb	r3, [r3, #0]
 801368c:	2b02      	cmp	r3, #2
 801368e:	d026      	beq.n	80136de <tcpip_thread_handle_msg+0x5e>
 8013690:	2b02      	cmp	r3, #2
 8013692:	dc2b      	bgt.n	80136ec <tcpip_thread_handle_msg+0x6c>
 8013694:	2b00      	cmp	r3, #0
 8013696:	d002      	beq.n	801369e <tcpip_thread_handle_msg+0x1e>
 8013698:	2b01      	cmp	r3, #1
 801369a:	d015      	beq.n	80136c8 <tcpip_thread_handle_msg+0x48>
 801369c:	e026      	b.n	80136ec <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	68db      	ldr	r3, [r3, #12]
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	6850      	ldr	r0, [r2, #4]
 80136a6:	687a      	ldr	r2, [r7, #4]
 80136a8:	6892      	ldr	r2, [r2, #8]
 80136aa:	4611      	mov	r1, r2
 80136ac:	4798      	blx	r3
 80136ae:	4603      	mov	r3, r0
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d004      	beq.n	80136be <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	685b      	ldr	r3, [r3, #4]
 80136b8:	4618      	mov	r0, r3
 80136ba:	f001 fd21 	bl	8015100 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80136be:	6879      	ldr	r1, [r7, #4]
 80136c0:	2009      	movs	r0, #9
 80136c2:	f000 fe79 	bl	80143b8 <memp_free>
      break;
 80136c6:	e018      	b.n	80136fa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	685b      	ldr	r3, [r3, #4]
 80136cc:	687a      	ldr	r2, [r7, #4]
 80136ce:	6892      	ldr	r2, [r2, #8]
 80136d0:	4610      	mov	r0, r2
 80136d2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80136d4:	6879      	ldr	r1, [r7, #4]
 80136d6:	2008      	movs	r0, #8
 80136d8:	f000 fe6e 	bl	80143b8 <memp_free>
      break;
 80136dc:	e00d      	b.n	80136fa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	685b      	ldr	r3, [r3, #4]
 80136e2:	687a      	ldr	r2, [r7, #4]
 80136e4:	6892      	ldr	r2, [r2, #8]
 80136e6:	4610      	mov	r0, r2
 80136e8:	4798      	blx	r3
      break;
 80136ea:	e006      	b.n	80136fa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80136ec:	4b05      	ldr	r3, [pc, #20]	; (8013704 <tcpip_thread_handle_msg+0x84>)
 80136ee:	22cf      	movs	r2, #207	; 0xcf
 80136f0:	4905      	ldr	r1, [pc, #20]	; (8013708 <tcpip_thread_handle_msg+0x88>)
 80136f2:	4806      	ldr	r0, [pc, #24]	; (801370c <tcpip_thread_handle_msg+0x8c>)
 80136f4:	f00b ff54 	bl	801f5a0 <iprintf>
      break;
 80136f8:	bf00      	nop
  }
}
 80136fa:	bf00      	nop
 80136fc:	3708      	adds	r7, #8
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}
 8013702:	bf00      	nop
 8013704:	08021510 	.word	0x08021510
 8013708:	08021540 	.word	0x08021540
 801370c:	08021560 	.word	0x08021560

08013710 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b086      	sub	sp, #24
 8013714:	af00      	add	r7, sp, #0
 8013716:	60f8      	str	r0, [r7, #12]
 8013718:	60b9      	str	r1, [r7, #8]
 801371a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801371c:	481a      	ldr	r0, [pc, #104]	; (8013788 <tcpip_inpkt+0x78>)
 801371e:	f00b fb78 	bl	801ee12 <sys_mbox_valid>
 8013722:	4603      	mov	r3, r0
 8013724:	2b00      	cmp	r3, #0
 8013726:	d105      	bne.n	8013734 <tcpip_inpkt+0x24>
 8013728:	4b18      	ldr	r3, [pc, #96]	; (801378c <tcpip_inpkt+0x7c>)
 801372a:	22fc      	movs	r2, #252	; 0xfc
 801372c:	4918      	ldr	r1, [pc, #96]	; (8013790 <tcpip_inpkt+0x80>)
 801372e:	4819      	ldr	r0, [pc, #100]	; (8013794 <tcpip_inpkt+0x84>)
 8013730:	f00b ff36 	bl	801f5a0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8013734:	2009      	movs	r0, #9
 8013736:	f000 fdc9 	bl	80142cc <memp_malloc>
 801373a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d102      	bne.n	8013748 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8013742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013746:	e01a      	b.n	801377e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	2200      	movs	r2, #0
 801374c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	68fa      	ldr	r2, [r7, #12]
 8013752:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	68ba      	ldr	r2, [r7, #8]
 8013758:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801375a:	697b      	ldr	r3, [r7, #20]
 801375c:	687a      	ldr	r2, [r7, #4]
 801375e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013760:	6979      	ldr	r1, [r7, #20]
 8013762:	4809      	ldr	r0, [pc, #36]	; (8013788 <tcpip_inpkt+0x78>)
 8013764:	f00b fae0 	bl	801ed28 <sys_mbox_trypost>
 8013768:	4603      	mov	r3, r0
 801376a:	2b00      	cmp	r3, #0
 801376c:	d006      	beq.n	801377c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801376e:	6979      	ldr	r1, [r7, #20]
 8013770:	2009      	movs	r0, #9
 8013772:	f000 fe21 	bl	80143b8 <memp_free>
    return ERR_MEM;
 8013776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801377a:	e000      	b.n	801377e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801377c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801377e:	4618      	mov	r0, r3
 8013780:	3718      	adds	r7, #24
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}
 8013786:	bf00      	nop
 8013788:	200066cc 	.word	0x200066cc
 801378c:	08021510 	.word	0x08021510
 8013790:	08021588 	.word	0x08021588
 8013794:	08021560 	.word	0x08021560

08013798 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b082      	sub	sp, #8
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
 80137a0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80137a2:	683b      	ldr	r3, [r7, #0]
 80137a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80137a8:	f003 0318 	and.w	r3, r3, #24
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d006      	beq.n	80137be <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80137b0:	4a08      	ldr	r2, [pc, #32]	; (80137d4 <tcpip_input+0x3c>)
 80137b2:	6839      	ldr	r1, [r7, #0]
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f7ff ffab 	bl	8013710 <tcpip_inpkt>
 80137ba:	4603      	mov	r3, r0
 80137bc:	e005      	b.n	80137ca <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80137be:	4a06      	ldr	r2, [pc, #24]	; (80137d8 <tcpip_input+0x40>)
 80137c0:	6839      	ldr	r1, [r7, #0]
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f7ff ffa4 	bl	8013710 <tcpip_inpkt>
 80137c8:	4603      	mov	r3, r0
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3708      	adds	r7, #8
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop
 80137d4:	0801eb15 	.word	0x0801eb15
 80137d8:	0801da1d 	.word	0x0801da1d

080137dc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b084      	sub	sp, #16
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
 80137e4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80137e6:	4819      	ldr	r0, [pc, #100]	; (801384c <tcpip_try_callback+0x70>)
 80137e8:	f00b fb13 	bl	801ee12 <sys_mbox_valid>
 80137ec:	4603      	mov	r3, r0
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d106      	bne.n	8013800 <tcpip_try_callback+0x24>
 80137f2:	4b17      	ldr	r3, [pc, #92]	; (8013850 <tcpip_try_callback+0x74>)
 80137f4:	f240 125d 	movw	r2, #349	; 0x15d
 80137f8:	4916      	ldr	r1, [pc, #88]	; (8013854 <tcpip_try_callback+0x78>)
 80137fa:	4817      	ldr	r0, [pc, #92]	; (8013858 <tcpip_try_callback+0x7c>)
 80137fc:	f00b fed0 	bl	801f5a0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8013800:	2008      	movs	r0, #8
 8013802:	f000 fd63 	bl	80142cc <memp_malloc>
 8013806:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d102      	bne.n	8013814 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801380e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013812:	e017      	b.n	8013844 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	2201      	movs	r2, #1
 8013818:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	687a      	ldr	r2, [r7, #4]
 801381e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	683a      	ldr	r2, [r7, #0]
 8013824:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013826:	68f9      	ldr	r1, [r7, #12]
 8013828:	4808      	ldr	r0, [pc, #32]	; (801384c <tcpip_try_callback+0x70>)
 801382a:	f00b fa7d 	bl	801ed28 <sys_mbox_trypost>
 801382e:	4603      	mov	r3, r0
 8013830:	2b00      	cmp	r3, #0
 8013832:	d006      	beq.n	8013842 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8013834:	68f9      	ldr	r1, [r7, #12]
 8013836:	2008      	movs	r0, #8
 8013838:	f000 fdbe 	bl	80143b8 <memp_free>
    return ERR_MEM;
 801383c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013840:	e000      	b.n	8013844 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8013842:	2300      	movs	r3, #0
}
 8013844:	4618      	mov	r0, r3
 8013846:	3710      	adds	r7, #16
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}
 801384c:	200066cc 	.word	0x200066cc
 8013850:	08021510 	.word	0x08021510
 8013854:	08021588 	.word	0x08021588
 8013858:	08021560 	.word	0x08021560

0801385c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b084      	sub	sp, #16
 8013860:	af00      	add	r7, sp, #0
 8013862:	60f8      	str	r0, [r7, #12]
 8013864:	60b9      	str	r1, [r7, #8]
 8013866:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8013868:	4806      	ldr	r0, [pc, #24]	; (8013884 <tcpip_send_msg_wait_sem+0x28>)
 801386a:	f00b fbab 	bl	801efc4 <sys_mutex_lock>
  fn(apimsg);
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	68b8      	ldr	r0, [r7, #8]
 8013872:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8013874:	4803      	ldr	r0, [pc, #12]	; (8013884 <tcpip_send_msg_wait_sem+0x28>)
 8013876:	f00b fbb4 	bl	801efe2 <sys_mutex_unlock>
  return ERR_OK;
 801387a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801387c:	4618      	mov	r0, r3
 801387e:	3710      	adds	r7, #16
 8013880:	46bd      	mov	sp, r7
 8013882:	bd80      	pop	{r7, pc}
 8013884:	200066d0 	.word	0x200066d0

08013888 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b084      	sub	sp, #16
 801388c:	af02      	add	r7, sp, #8
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	6039      	str	r1, [r7, #0]
  lwip_init();
 8013892:	f000 f871 	bl	8013978 <lwip_init>

  tcpip_init_done = initfunc;
 8013896:	4a17      	ldr	r2, [pc, #92]	; (80138f4 <tcpip_init+0x6c>)
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801389c:	4a16      	ldr	r2, [pc, #88]	; (80138f8 <tcpip_init+0x70>)
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80138a2:	2106      	movs	r1, #6
 80138a4:	4815      	ldr	r0, [pc, #84]	; (80138fc <tcpip_init+0x74>)
 80138a6:	f00b fa0b 	bl	801ecc0 <sys_mbox_new>
 80138aa:	4603      	mov	r3, r0
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d006      	beq.n	80138be <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80138b0:	4b13      	ldr	r3, [pc, #76]	; (8013900 <tcpip_init+0x78>)
 80138b2:	f240 2261 	movw	r2, #609	; 0x261
 80138b6:	4913      	ldr	r1, [pc, #76]	; (8013904 <tcpip_init+0x7c>)
 80138b8:	4813      	ldr	r0, [pc, #76]	; (8013908 <tcpip_init+0x80>)
 80138ba:	f00b fe71 	bl	801f5a0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80138be:	4813      	ldr	r0, [pc, #76]	; (801390c <tcpip_init+0x84>)
 80138c0:	f00b fb64 	bl	801ef8c <sys_mutex_new>
 80138c4:	4603      	mov	r3, r0
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d006      	beq.n	80138d8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80138ca:	4b0d      	ldr	r3, [pc, #52]	; (8013900 <tcpip_init+0x78>)
 80138cc:	f240 2265 	movw	r2, #613	; 0x265
 80138d0:	490f      	ldr	r1, [pc, #60]	; (8013910 <tcpip_init+0x88>)
 80138d2:	480d      	ldr	r0, [pc, #52]	; (8013908 <tcpip_init+0x80>)
 80138d4:	f00b fe64 	bl	801f5a0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80138d8:	2300      	movs	r3, #0
 80138da:	9300      	str	r3, [sp, #0]
 80138dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138e0:	2200      	movs	r2, #0
 80138e2:	490c      	ldr	r1, [pc, #48]	; (8013914 <tcpip_init+0x8c>)
 80138e4:	480c      	ldr	r0, [pc, #48]	; (8013918 <tcpip_init+0x90>)
 80138e6:	f00b fb89 	bl	801effc <sys_thread_new>
}
 80138ea:	bf00      	nop
 80138ec:	3708      	adds	r7, #8
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}
 80138f2:	bf00      	nop
 80138f4:	200066c4 	.word	0x200066c4
 80138f8:	200066c8 	.word	0x200066c8
 80138fc:	200066cc 	.word	0x200066cc
 8013900:	08021510 	.word	0x08021510
 8013904:	08021598 	.word	0x08021598
 8013908:	08021560 	.word	0x08021560
 801390c:	200066d0 	.word	0x200066d0
 8013910:	080215bc 	.word	0x080215bc
 8013914:	08013619 	.word	0x08013619
 8013918:	080215e0 	.word	0x080215e0

0801391c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801391c:	b480      	push	{r7}
 801391e:	b083      	sub	sp, #12
 8013920:	af00      	add	r7, sp, #0
 8013922:	4603      	mov	r3, r0
 8013924:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8013926:	88fb      	ldrh	r3, [r7, #6]
 8013928:	021b      	lsls	r3, r3, #8
 801392a:	b21a      	sxth	r2, r3
 801392c:	88fb      	ldrh	r3, [r7, #6]
 801392e:	0a1b      	lsrs	r3, r3, #8
 8013930:	b29b      	uxth	r3, r3
 8013932:	b21b      	sxth	r3, r3
 8013934:	4313      	orrs	r3, r2
 8013936:	b21b      	sxth	r3, r3
 8013938:	b29b      	uxth	r3, r3
}
 801393a:	4618      	mov	r0, r3
 801393c:	370c      	adds	r7, #12
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr

08013946 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8013946:	b480      	push	{r7}
 8013948:	b083      	sub	sp, #12
 801394a:	af00      	add	r7, sp, #0
 801394c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	061a      	lsls	r2, r3, #24
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	021b      	lsls	r3, r3, #8
 8013956:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801395a:	431a      	orrs	r2, r3
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	0a1b      	lsrs	r3, r3, #8
 8013960:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013964:	431a      	orrs	r2, r3
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	0e1b      	lsrs	r3, r3, #24
 801396a:	4313      	orrs	r3, r2
}
 801396c:	4618      	mov	r0, r3
 801396e:	370c      	adds	r7, #12
 8013970:	46bd      	mov	sp, r7
 8013972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013976:	4770      	bx	lr

08013978 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b082      	sub	sp, #8
 801397c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801397e:	2300      	movs	r3, #0
 8013980:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8013982:	f00b faf5 	bl	801ef70 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8013986:	f000 f8d5 	bl	8013b34 <mem_init>
  memp_init();
 801398a:	f000 fc31 	bl	80141f0 <memp_init>
  pbuf_init();
  netif_init();
 801398e:	f000 fd3d 	bl	801440c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013992:	f008 f977 	bl	801bc84 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8013996:	f001 fe5d 	bl	8015654 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801399a:	f008 f8b9 	bl	801bb10 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801399e:	bf00      	nop
 80139a0:	3708      	adds	r7, #8
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
	...

080139a8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80139a8:	b480      	push	{r7}
 80139aa:	b083      	sub	sp, #12
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	4603      	mov	r3, r0
 80139b0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80139b2:	4b05      	ldr	r3, [pc, #20]	; (80139c8 <ptr_to_mem+0x20>)
 80139b4:	681a      	ldr	r2, [r3, #0]
 80139b6:	88fb      	ldrh	r3, [r7, #6]
 80139b8:	4413      	add	r3, r2
}
 80139ba:	4618      	mov	r0, r3
 80139bc:	370c      	adds	r7, #12
 80139be:	46bd      	mov	sp, r7
 80139c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c4:	4770      	bx	lr
 80139c6:	bf00      	nop
 80139c8:	20008f00 	.word	0x20008f00

080139cc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80139cc:	b480      	push	{r7}
 80139ce:	b083      	sub	sp, #12
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80139d4:	4b05      	ldr	r3, [pc, #20]	; (80139ec <mem_to_ptr+0x20>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	687a      	ldr	r2, [r7, #4]
 80139da:	1ad3      	subs	r3, r2, r3
 80139dc:	b29b      	uxth	r3, r3
}
 80139de:	4618      	mov	r0, r3
 80139e0:	370c      	adds	r7, #12
 80139e2:	46bd      	mov	sp, r7
 80139e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e8:	4770      	bx	lr
 80139ea:	bf00      	nop
 80139ec:	20008f00 	.word	0x20008f00

080139f0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80139f0:	b590      	push	{r4, r7, lr}
 80139f2:	b085      	sub	sp, #20
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80139f8:	4b45      	ldr	r3, [pc, #276]	; (8013b10 <plug_holes+0x120>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	687a      	ldr	r2, [r7, #4]
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d206      	bcs.n	8013a10 <plug_holes+0x20>
 8013a02:	4b44      	ldr	r3, [pc, #272]	; (8013b14 <plug_holes+0x124>)
 8013a04:	f240 12df 	movw	r2, #479	; 0x1df
 8013a08:	4943      	ldr	r1, [pc, #268]	; (8013b18 <plug_holes+0x128>)
 8013a0a:	4844      	ldr	r0, [pc, #272]	; (8013b1c <plug_holes+0x12c>)
 8013a0c:	f00b fdc8 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8013a10:	4b43      	ldr	r3, [pc, #268]	; (8013b20 <plug_holes+0x130>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	687a      	ldr	r2, [r7, #4]
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d306      	bcc.n	8013a28 <plug_holes+0x38>
 8013a1a:	4b3e      	ldr	r3, [pc, #248]	; (8013b14 <plug_holes+0x124>)
 8013a1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013a20:	4940      	ldr	r1, [pc, #256]	; (8013b24 <plug_holes+0x134>)
 8013a22:	483e      	ldr	r0, [pc, #248]	; (8013b1c <plug_holes+0x12c>)
 8013a24:	f00b fdbc 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	791b      	ldrb	r3, [r3, #4]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d006      	beq.n	8013a3e <plug_holes+0x4e>
 8013a30:	4b38      	ldr	r3, [pc, #224]	; (8013b14 <plug_holes+0x124>)
 8013a32:	f240 12e1 	movw	r2, #481	; 0x1e1
 8013a36:	493c      	ldr	r1, [pc, #240]	; (8013b28 <plug_holes+0x138>)
 8013a38:	4838      	ldr	r0, [pc, #224]	; (8013b1c <plug_holes+0x12c>)
 8013a3a:	f00b fdb1 	bl	801f5a0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	881b      	ldrh	r3, [r3, #0]
 8013a42:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8013a46:	d906      	bls.n	8013a56 <plug_holes+0x66>
 8013a48:	4b32      	ldr	r3, [pc, #200]	; (8013b14 <plug_holes+0x124>)
 8013a4a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8013a4e:	4937      	ldr	r1, [pc, #220]	; (8013b2c <plug_holes+0x13c>)
 8013a50:	4832      	ldr	r0, [pc, #200]	; (8013b1c <plug_holes+0x12c>)
 8013a52:	f00b fda5 	bl	801f5a0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	881b      	ldrh	r3, [r3, #0]
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7ff ffa4 	bl	80139a8 <ptr_to_mem>
 8013a60:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8013a62:	687a      	ldr	r2, [r7, #4]
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d024      	beq.n	8013ab4 <plug_holes+0xc4>
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	791b      	ldrb	r3, [r3, #4]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d120      	bne.n	8013ab4 <plug_holes+0xc4>
 8013a72:	4b2b      	ldr	r3, [pc, #172]	; (8013b20 <plug_holes+0x130>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	68fa      	ldr	r2, [r7, #12]
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d01b      	beq.n	8013ab4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8013a7c:	4b2c      	ldr	r3, [pc, #176]	; (8013b30 <plug_holes+0x140>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	68fa      	ldr	r2, [r7, #12]
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d102      	bne.n	8013a8c <plug_holes+0x9c>
      lfree = mem;
 8013a86:	4a2a      	ldr	r2, [pc, #168]	; (8013b30 <plug_holes+0x140>)
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	881a      	ldrh	r2, [r3, #0]
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	881b      	ldrh	r3, [r3, #0]
 8013a98:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8013a9c:	d00a      	beq.n	8013ab4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	881b      	ldrh	r3, [r3, #0]
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7ff ff80 	bl	80139a8 <ptr_to_mem>
 8013aa8:	4604      	mov	r4, r0
 8013aaa:	6878      	ldr	r0, [r7, #4]
 8013aac:	f7ff ff8e 	bl	80139cc <mem_to_ptr>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	885b      	ldrh	r3, [r3, #2]
 8013ab8:	4618      	mov	r0, r3
 8013aba:	f7ff ff75 	bl	80139a8 <ptr_to_mem>
 8013abe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8013ac0:	68ba      	ldr	r2, [r7, #8]
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d01f      	beq.n	8013b08 <plug_holes+0x118>
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	791b      	ldrb	r3, [r3, #4]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d11b      	bne.n	8013b08 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8013ad0:	4b17      	ldr	r3, [pc, #92]	; (8013b30 <plug_holes+0x140>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	687a      	ldr	r2, [r7, #4]
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d102      	bne.n	8013ae0 <plug_holes+0xf0>
      lfree = pmem;
 8013ada:	4a15      	ldr	r2, [pc, #84]	; (8013b30 <plug_holes+0x140>)
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	881a      	ldrh	r2, [r3, #0]
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	881b      	ldrh	r3, [r3, #0]
 8013aec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8013af0:	d00a      	beq.n	8013b08 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	881b      	ldrh	r3, [r3, #0]
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7ff ff56 	bl	80139a8 <ptr_to_mem>
 8013afc:	4604      	mov	r4, r0
 8013afe:	68b8      	ldr	r0, [r7, #8]
 8013b00:	f7ff ff64 	bl	80139cc <mem_to_ptr>
 8013b04:	4603      	mov	r3, r0
 8013b06:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8013b08:	bf00      	nop
 8013b0a:	3714      	adds	r7, #20
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd90      	pop	{r4, r7, pc}
 8013b10:	20008f00 	.word	0x20008f00
 8013b14:	080215f0 	.word	0x080215f0
 8013b18:	08021620 	.word	0x08021620
 8013b1c:	08021638 	.word	0x08021638
 8013b20:	20008f04 	.word	0x20008f04
 8013b24:	08021660 	.word	0x08021660
 8013b28:	0802167c 	.word	0x0802167c
 8013b2c:	08021698 	.word	0x08021698
 8013b30:	20008f0c 	.word	0x20008f0c

08013b34 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b082      	sub	sp, #8
 8013b38:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013b3a:	4b1f      	ldr	r3, [pc, #124]	; (8013bb8 <mem_init+0x84>)
 8013b3c:	3303      	adds	r3, #3
 8013b3e:	f023 0303 	bic.w	r3, r3, #3
 8013b42:	461a      	mov	r2, r3
 8013b44:	4b1d      	ldr	r3, [pc, #116]	; (8013bbc <mem_init+0x88>)
 8013b46:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013b48:	4b1c      	ldr	r3, [pc, #112]	; (8013bbc <mem_init+0x88>)
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8013b54:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8013b62:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8013b66:	f7ff ff1f 	bl	80139a8 <ptr_to_mem>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	4a14      	ldr	r2, [pc, #80]	; (8013bc0 <mem_init+0x8c>)
 8013b6e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8013b70:	4b13      	ldr	r3, [pc, #76]	; (8013bc0 <mem_init+0x8c>)
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	2201      	movs	r2, #1
 8013b76:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013b78:	4b11      	ldr	r3, [pc, #68]	; (8013bc0 <mem_init+0x8c>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8013b80:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013b82:	4b0f      	ldr	r3, [pc, #60]	; (8013bc0 <mem_init+0x8c>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8013b8a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013b8c:	4b0b      	ldr	r3, [pc, #44]	; (8013bbc <mem_init+0x88>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	4a0c      	ldr	r2, [pc, #48]	; (8013bc4 <mem_init+0x90>)
 8013b92:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013b94:	480c      	ldr	r0, [pc, #48]	; (8013bc8 <mem_init+0x94>)
 8013b96:	f00b f9f9 	bl	801ef8c <sys_mutex_new>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d006      	beq.n	8013bae <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013ba0:	4b0a      	ldr	r3, [pc, #40]	; (8013bcc <mem_init+0x98>)
 8013ba2:	f240 221f 	movw	r2, #543	; 0x21f
 8013ba6:	490a      	ldr	r1, [pc, #40]	; (8013bd0 <mem_init+0x9c>)
 8013ba8:	480a      	ldr	r0, [pc, #40]	; (8013bd4 <mem_init+0xa0>)
 8013baa:	f00b fcf9 	bl	801f5a0 <iprintf>
  }
}
 8013bae:	bf00      	nop
 8013bb0:	3708      	adds	r7, #8
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}
 8013bb6:	bf00      	nop
 8013bb8:	200066ec 	.word	0x200066ec
 8013bbc:	20008f00 	.word	0x20008f00
 8013bc0:	20008f04 	.word	0x20008f04
 8013bc4:	20008f0c 	.word	0x20008f0c
 8013bc8:	20008f08 	.word	0x20008f08
 8013bcc:	080215f0 	.word	0x080215f0
 8013bd0:	080216c4 	.word	0x080216c4
 8013bd4:	08021638 	.word	0x08021638

08013bd8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b086      	sub	sp, #24
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f7ff fef3 	bl	80139cc <mem_to_ptr>
 8013be6:	4603      	mov	r3, r0
 8013be8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	881b      	ldrh	r3, [r3, #0]
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f7ff feda 	bl	80139a8 <ptr_to_mem>
 8013bf4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	885b      	ldrh	r3, [r3, #2]
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7ff fed4 	bl	80139a8 <ptr_to_mem>
 8013c00:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	881b      	ldrh	r3, [r3, #0]
 8013c06:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8013c0a:	d818      	bhi.n	8013c3e <mem_link_valid+0x66>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	885b      	ldrh	r3, [r3, #2]
 8013c10:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8013c14:	d813      	bhi.n	8013c3e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013c1a:	8afa      	ldrh	r2, [r7, #22]
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	d004      	beq.n	8013c2a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	881b      	ldrh	r3, [r3, #0]
 8013c24:	8afa      	ldrh	r2, [r7, #22]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d109      	bne.n	8013c3e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013c2a:	4b08      	ldr	r3, [pc, #32]	; (8013c4c <mem_link_valid+0x74>)
 8013c2c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013c2e:	693a      	ldr	r2, [r7, #16]
 8013c30:	429a      	cmp	r2, r3
 8013c32:	d006      	beq.n	8013c42 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013c34:	693b      	ldr	r3, [r7, #16]
 8013c36:	885b      	ldrh	r3, [r3, #2]
 8013c38:	8afa      	ldrh	r2, [r7, #22]
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	d001      	beq.n	8013c42 <mem_link_valid+0x6a>
    return 0;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	e000      	b.n	8013c44 <mem_link_valid+0x6c>
  }
  return 1;
 8013c42:	2301      	movs	r3, #1
}
 8013c44:	4618      	mov	r0, r3
 8013c46:	3718      	adds	r7, #24
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}
 8013c4c:	20008f04 	.word	0x20008f04

08013c50 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b088      	sub	sp, #32
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d070      	beq.n	8013d40 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	f003 0303 	and.w	r3, r3, #3
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d00d      	beq.n	8013c84 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013c68:	4b37      	ldr	r3, [pc, #220]	; (8013d48 <mem_free+0xf8>)
 8013c6a:	f240 2273 	movw	r2, #627	; 0x273
 8013c6e:	4937      	ldr	r1, [pc, #220]	; (8013d4c <mem_free+0xfc>)
 8013c70:	4837      	ldr	r0, [pc, #220]	; (8013d50 <mem_free+0x100>)
 8013c72:	f00b fc95 	bl	801f5a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013c76:	f00b f9e7 	bl	801f048 <sys_arch_protect>
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	68f8      	ldr	r0, [r7, #12]
 8013c7e:	f00b f9f1 	bl	801f064 <sys_arch_unprotect>
    return;
 8013c82:	e05e      	b.n	8013d42 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	3b08      	subs	r3, #8
 8013c88:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013c8a:	4b32      	ldr	r3, [pc, #200]	; (8013d54 <mem_free+0x104>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	69fa      	ldr	r2, [r7, #28]
 8013c90:	429a      	cmp	r2, r3
 8013c92:	d306      	bcc.n	8013ca2 <mem_free+0x52>
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f103 020c 	add.w	r2, r3, #12
 8013c9a:	4b2f      	ldr	r3, [pc, #188]	; (8013d58 <mem_free+0x108>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d90d      	bls.n	8013cbe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8013ca2:	4b29      	ldr	r3, [pc, #164]	; (8013d48 <mem_free+0xf8>)
 8013ca4:	f240 227f 	movw	r2, #639	; 0x27f
 8013ca8:	492c      	ldr	r1, [pc, #176]	; (8013d5c <mem_free+0x10c>)
 8013caa:	4829      	ldr	r0, [pc, #164]	; (8013d50 <mem_free+0x100>)
 8013cac:	f00b fc78 	bl	801f5a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013cb0:	f00b f9ca 	bl	801f048 <sys_arch_protect>
 8013cb4:	6138      	str	r0, [r7, #16]
 8013cb6:	6938      	ldr	r0, [r7, #16]
 8013cb8:	f00b f9d4 	bl	801f064 <sys_arch_unprotect>
    return;
 8013cbc:	e041      	b.n	8013d42 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013cbe:	4828      	ldr	r0, [pc, #160]	; (8013d60 <mem_free+0x110>)
 8013cc0:	f00b f980 	bl	801efc4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013cc4:	69fb      	ldr	r3, [r7, #28]
 8013cc6:	791b      	ldrb	r3, [r3, #4]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d110      	bne.n	8013cee <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013ccc:	4b1e      	ldr	r3, [pc, #120]	; (8013d48 <mem_free+0xf8>)
 8013cce:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8013cd2:	4924      	ldr	r1, [pc, #144]	; (8013d64 <mem_free+0x114>)
 8013cd4:	481e      	ldr	r0, [pc, #120]	; (8013d50 <mem_free+0x100>)
 8013cd6:	f00b fc63 	bl	801f5a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013cda:	4821      	ldr	r0, [pc, #132]	; (8013d60 <mem_free+0x110>)
 8013cdc:	f00b f981 	bl	801efe2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013ce0:	f00b f9b2 	bl	801f048 <sys_arch_protect>
 8013ce4:	6178      	str	r0, [r7, #20]
 8013ce6:	6978      	ldr	r0, [r7, #20]
 8013ce8:	f00b f9bc 	bl	801f064 <sys_arch_unprotect>
    return;
 8013cec:	e029      	b.n	8013d42 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8013cee:	69f8      	ldr	r0, [r7, #28]
 8013cf0:	f7ff ff72 	bl	8013bd8 <mem_link_valid>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d110      	bne.n	8013d1c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013cfa:	4b13      	ldr	r3, [pc, #76]	; (8013d48 <mem_free+0xf8>)
 8013cfc:	f240 2295 	movw	r2, #661	; 0x295
 8013d00:	4919      	ldr	r1, [pc, #100]	; (8013d68 <mem_free+0x118>)
 8013d02:	4813      	ldr	r0, [pc, #76]	; (8013d50 <mem_free+0x100>)
 8013d04:	f00b fc4c 	bl	801f5a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013d08:	4815      	ldr	r0, [pc, #84]	; (8013d60 <mem_free+0x110>)
 8013d0a:	f00b f96a 	bl	801efe2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013d0e:	f00b f99b 	bl	801f048 <sys_arch_protect>
 8013d12:	61b8      	str	r0, [r7, #24]
 8013d14:	69b8      	ldr	r0, [r7, #24]
 8013d16:	f00b f9a5 	bl	801f064 <sys_arch_unprotect>
    return;
 8013d1a:	e012      	b.n	8013d42 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013d1c:	69fb      	ldr	r3, [r7, #28]
 8013d1e:	2200      	movs	r2, #0
 8013d20:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8013d22:	4b12      	ldr	r3, [pc, #72]	; (8013d6c <mem_free+0x11c>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	69fa      	ldr	r2, [r7, #28]
 8013d28:	429a      	cmp	r2, r3
 8013d2a:	d202      	bcs.n	8013d32 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013d2c:	4a0f      	ldr	r2, [pc, #60]	; (8013d6c <mem_free+0x11c>)
 8013d2e:	69fb      	ldr	r3, [r7, #28]
 8013d30:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8013d32:	69f8      	ldr	r0, [r7, #28]
 8013d34:	f7ff fe5c 	bl	80139f0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013d38:	4809      	ldr	r0, [pc, #36]	; (8013d60 <mem_free+0x110>)
 8013d3a:	f00b f952 	bl	801efe2 <sys_mutex_unlock>
 8013d3e:	e000      	b.n	8013d42 <mem_free+0xf2>
    return;
 8013d40:	bf00      	nop
}
 8013d42:	3720      	adds	r7, #32
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}
 8013d48:	080215f0 	.word	0x080215f0
 8013d4c:	080216e0 	.word	0x080216e0
 8013d50:	08021638 	.word	0x08021638
 8013d54:	20008f00 	.word	0x20008f00
 8013d58:	20008f04 	.word	0x20008f04
 8013d5c:	08021704 	.word	0x08021704
 8013d60:	20008f08 	.word	0x20008f08
 8013d64:	08021720 	.word	0x08021720
 8013d68:	08021748 	.word	0x08021748
 8013d6c:	20008f0c 	.word	0x20008f0c

08013d70 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b088      	sub	sp, #32
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
 8013d78:	460b      	mov	r3, r1
 8013d7a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013d7c:	887b      	ldrh	r3, [r7, #2]
 8013d7e:	3303      	adds	r3, #3
 8013d80:	b29b      	uxth	r3, r3
 8013d82:	f023 0303 	bic.w	r3, r3, #3
 8013d86:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013d88:	8bfb      	ldrh	r3, [r7, #30]
 8013d8a:	2b0b      	cmp	r3, #11
 8013d8c:	d801      	bhi.n	8013d92 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8013d8e:	230c      	movs	r3, #12
 8013d90:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8013d92:	8bfb      	ldrh	r3, [r7, #30]
 8013d94:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8013d98:	d803      	bhi.n	8013da2 <mem_trim+0x32>
 8013d9a:	8bfa      	ldrh	r2, [r7, #30]
 8013d9c:	887b      	ldrh	r3, [r7, #2]
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d201      	bcs.n	8013da6 <mem_trim+0x36>
    return NULL;
 8013da2:	2300      	movs	r3, #0
 8013da4:	e0d8      	b.n	8013f58 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013da6:	4b6e      	ldr	r3, [pc, #440]	; (8013f60 <mem_trim+0x1f0>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	687a      	ldr	r2, [r7, #4]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d304      	bcc.n	8013dba <mem_trim+0x4a>
 8013db0:	4b6c      	ldr	r3, [pc, #432]	; (8013f64 <mem_trim+0x1f4>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	687a      	ldr	r2, [r7, #4]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d306      	bcc.n	8013dc8 <mem_trim+0x58>
 8013dba:	4b6b      	ldr	r3, [pc, #428]	; (8013f68 <mem_trim+0x1f8>)
 8013dbc:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013dc0:	496a      	ldr	r1, [pc, #424]	; (8013f6c <mem_trim+0x1fc>)
 8013dc2:	486b      	ldr	r0, [pc, #428]	; (8013f70 <mem_trim+0x200>)
 8013dc4:	f00b fbec 	bl	801f5a0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013dc8:	4b65      	ldr	r3, [pc, #404]	; (8013f60 <mem_trim+0x1f0>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	687a      	ldr	r2, [r7, #4]
 8013dce:	429a      	cmp	r2, r3
 8013dd0:	d304      	bcc.n	8013ddc <mem_trim+0x6c>
 8013dd2:	4b64      	ldr	r3, [pc, #400]	; (8013f64 <mem_trim+0x1f4>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	687a      	ldr	r2, [r7, #4]
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d307      	bcc.n	8013dec <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013ddc:	f00b f934 	bl	801f048 <sys_arch_protect>
 8013de0:	60b8      	str	r0, [r7, #8]
 8013de2:	68b8      	ldr	r0, [r7, #8]
 8013de4:	f00b f93e 	bl	801f064 <sys_arch_unprotect>
    return rmem;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	e0b5      	b.n	8013f58 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	3b08      	subs	r3, #8
 8013df0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8013df2:	69b8      	ldr	r0, [r7, #24]
 8013df4:	f7ff fdea 	bl	80139cc <mem_to_ptr>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013dfc:	69bb      	ldr	r3, [r7, #24]
 8013dfe:	881a      	ldrh	r2, [r3, #0]
 8013e00:	8afb      	ldrh	r3, [r7, #22]
 8013e02:	1ad3      	subs	r3, r2, r3
 8013e04:	b29b      	uxth	r3, r3
 8013e06:	3b08      	subs	r3, #8
 8013e08:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013e0a:	8bfa      	ldrh	r2, [r7, #30]
 8013e0c:	8abb      	ldrh	r3, [r7, #20]
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	d906      	bls.n	8013e20 <mem_trim+0xb0>
 8013e12:	4b55      	ldr	r3, [pc, #340]	; (8013f68 <mem_trim+0x1f8>)
 8013e14:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8013e18:	4956      	ldr	r1, [pc, #344]	; (8013f74 <mem_trim+0x204>)
 8013e1a:	4855      	ldr	r0, [pc, #340]	; (8013f70 <mem_trim+0x200>)
 8013e1c:	f00b fbc0 	bl	801f5a0 <iprintf>
  if (newsize > size) {
 8013e20:	8bfa      	ldrh	r2, [r7, #30]
 8013e22:	8abb      	ldrh	r3, [r7, #20]
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d901      	bls.n	8013e2c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	e095      	b.n	8013f58 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8013e2c:	8bfa      	ldrh	r2, [r7, #30]
 8013e2e:	8abb      	ldrh	r3, [r7, #20]
 8013e30:	429a      	cmp	r2, r3
 8013e32:	d101      	bne.n	8013e38 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	e08f      	b.n	8013f58 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013e38:	484f      	ldr	r0, [pc, #316]	; (8013f78 <mem_trim+0x208>)
 8013e3a:	f00b f8c3 	bl	801efc4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8013e3e:	69bb      	ldr	r3, [r7, #24]
 8013e40:	881b      	ldrh	r3, [r3, #0]
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7ff fdb0 	bl	80139a8 <ptr_to_mem>
 8013e48:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	791b      	ldrb	r3, [r3, #4]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d13f      	bne.n	8013ed2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013e52:	69bb      	ldr	r3, [r7, #24]
 8013e54:	881b      	ldrh	r3, [r3, #0]
 8013e56:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8013e5a:	d106      	bne.n	8013e6a <mem_trim+0xfa>
 8013e5c:	4b42      	ldr	r3, [pc, #264]	; (8013f68 <mem_trim+0x1f8>)
 8013e5e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8013e62:	4946      	ldr	r1, [pc, #280]	; (8013f7c <mem_trim+0x20c>)
 8013e64:	4842      	ldr	r0, [pc, #264]	; (8013f70 <mem_trim+0x200>)
 8013e66:	f00b fb9b 	bl	801f5a0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013e6a:	693b      	ldr	r3, [r7, #16]
 8013e6c:	881b      	ldrh	r3, [r3, #0]
 8013e6e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013e70:	8afa      	ldrh	r2, [r7, #22]
 8013e72:	8bfb      	ldrh	r3, [r7, #30]
 8013e74:	4413      	add	r3, r2
 8013e76:	b29b      	uxth	r3, r3
 8013e78:	3308      	adds	r3, #8
 8013e7a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013e7c:	4b40      	ldr	r3, [pc, #256]	; (8013f80 <mem_trim+0x210>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	693a      	ldr	r2, [r7, #16]
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d106      	bne.n	8013e94 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8013e86:	89fb      	ldrh	r3, [r7, #14]
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7ff fd8d 	bl	80139a8 <ptr_to_mem>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	4a3b      	ldr	r2, [pc, #236]	; (8013f80 <mem_trim+0x210>)
 8013e92:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013e94:	89fb      	ldrh	r3, [r7, #14]
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7ff fd86 	bl	80139a8 <ptr_to_mem>
 8013e9c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013ea4:	693b      	ldr	r3, [r7, #16]
 8013ea6:	89ba      	ldrh	r2, [r7, #12]
 8013ea8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	8afa      	ldrh	r2, [r7, #22]
 8013eae:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013eb0:	69bb      	ldr	r3, [r7, #24]
 8013eb2:	89fa      	ldrh	r2, [r7, #14]
 8013eb4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	881b      	ldrh	r3, [r3, #0]
 8013eba:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8013ebe:	d047      	beq.n	8013f50 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	881b      	ldrh	r3, [r3, #0]
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7ff fd6f 	bl	80139a8 <ptr_to_mem>
 8013eca:	4602      	mov	r2, r0
 8013ecc:	89fb      	ldrh	r3, [r7, #14]
 8013ece:	8053      	strh	r3, [r2, #2]
 8013ed0:	e03e      	b.n	8013f50 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013ed2:	8bfb      	ldrh	r3, [r7, #30]
 8013ed4:	f103 0214 	add.w	r2, r3, #20
 8013ed8:	8abb      	ldrh	r3, [r7, #20]
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d838      	bhi.n	8013f50 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013ede:	8afa      	ldrh	r2, [r7, #22]
 8013ee0:	8bfb      	ldrh	r3, [r7, #30]
 8013ee2:	4413      	add	r3, r2
 8013ee4:	b29b      	uxth	r3, r3
 8013ee6:	3308      	adds	r3, #8
 8013ee8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013eea:	69bb      	ldr	r3, [r7, #24]
 8013eec:	881b      	ldrh	r3, [r3, #0]
 8013eee:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8013ef2:	d106      	bne.n	8013f02 <mem_trim+0x192>
 8013ef4:	4b1c      	ldr	r3, [pc, #112]	; (8013f68 <mem_trim+0x1f8>)
 8013ef6:	f240 3216 	movw	r2, #790	; 0x316
 8013efa:	4920      	ldr	r1, [pc, #128]	; (8013f7c <mem_trim+0x20c>)
 8013efc:	481c      	ldr	r0, [pc, #112]	; (8013f70 <mem_trim+0x200>)
 8013efe:	f00b fb4f 	bl	801f5a0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8013f02:	89fb      	ldrh	r3, [r7, #14]
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7ff fd4f 	bl	80139a8 <ptr_to_mem>
 8013f0a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013f0c:	4b1c      	ldr	r3, [pc, #112]	; (8013f80 <mem_trim+0x210>)
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	693a      	ldr	r2, [r7, #16]
 8013f12:	429a      	cmp	r2, r3
 8013f14:	d202      	bcs.n	8013f1c <mem_trim+0x1ac>
      lfree = mem2;
 8013f16:	4a1a      	ldr	r2, [pc, #104]	; (8013f80 <mem_trim+0x210>)
 8013f18:	693b      	ldr	r3, [r7, #16]
 8013f1a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	2200      	movs	r2, #0
 8013f20:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8013f22:	69bb      	ldr	r3, [r7, #24]
 8013f24:	881a      	ldrh	r2, [r3, #0]
 8013f26:	693b      	ldr	r3, [r7, #16]
 8013f28:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013f2a:	693b      	ldr	r3, [r7, #16]
 8013f2c:	8afa      	ldrh	r2, [r7, #22]
 8013f2e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013f30:	69bb      	ldr	r3, [r7, #24]
 8013f32:	89fa      	ldrh	r2, [r7, #14]
 8013f34:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	881b      	ldrh	r3, [r3, #0]
 8013f3a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8013f3e:	d007      	beq.n	8013f50 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013f40:	693b      	ldr	r3, [r7, #16]
 8013f42:	881b      	ldrh	r3, [r3, #0]
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7ff fd2f 	bl	80139a8 <ptr_to_mem>
 8013f4a:	4602      	mov	r2, r0
 8013f4c:	89fb      	ldrh	r3, [r7, #14]
 8013f4e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013f50:	4809      	ldr	r0, [pc, #36]	; (8013f78 <mem_trim+0x208>)
 8013f52:	f00b f846 	bl	801efe2 <sys_mutex_unlock>
  return rmem;
 8013f56:	687b      	ldr	r3, [r7, #4]
}
 8013f58:	4618      	mov	r0, r3
 8013f5a:	3720      	adds	r7, #32
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}
 8013f60:	20008f00 	.word	0x20008f00
 8013f64:	20008f04 	.word	0x20008f04
 8013f68:	080215f0 	.word	0x080215f0
 8013f6c:	0802177c 	.word	0x0802177c
 8013f70:	08021638 	.word	0x08021638
 8013f74:	08021794 	.word	0x08021794
 8013f78:	20008f08 	.word	0x20008f08
 8013f7c:	080217b4 	.word	0x080217b4
 8013f80:	20008f0c 	.word	0x20008f0c

08013f84 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b088      	sub	sp, #32
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013f8e:	88fb      	ldrh	r3, [r7, #6]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d101      	bne.n	8013f98 <mem_malloc+0x14>
    return NULL;
 8013f94:	2300      	movs	r3, #0
 8013f96:	e0e2      	b.n	801415e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013f98:	88fb      	ldrh	r3, [r7, #6]
 8013f9a:	3303      	adds	r3, #3
 8013f9c:	b29b      	uxth	r3, r3
 8013f9e:	f023 0303 	bic.w	r3, r3, #3
 8013fa2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013fa4:	8bbb      	ldrh	r3, [r7, #28]
 8013fa6:	2b0b      	cmp	r3, #11
 8013fa8:	d801      	bhi.n	8013fae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013faa:	230c      	movs	r3, #12
 8013fac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013fae:	8bbb      	ldrh	r3, [r7, #28]
 8013fb0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8013fb4:	d803      	bhi.n	8013fbe <mem_malloc+0x3a>
 8013fb6:	8bba      	ldrh	r2, [r7, #28]
 8013fb8:	88fb      	ldrh	r3, [r7, #6]
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d201      	bcs.n	8013fc2 <mem_malloc+0x3e>
    return NULL;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	e0cd      	b.n	801415e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013fc2:	4869      	ldr	r0, [pc, #420]	; (8014168 <mem_malloc+0x1e4>)
 8013fc4:	f00a fffe 	bl	801efc4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013fc8:	4b68      	ldr	r3, [pc, #416]	; (801416c <mem_malloc+0x1e8>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f7ff fcfd 	bl	80139cc <mem_to_ptr>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	83fb      	strh	r3, [r7, #30]
 8013fd6:	e0b7      	b.n	8014148 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013fd8:	8bfb      	ldrh	r3, [r7, #30]
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f7ff fce4 	bl	80139a8 <ptr_to_mem>
 8013fe0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	791b      	ldrb	r3, [r3, #4]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	f040 80a7 	bne.w	801413a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	881b      	ldrh	r3, [r3, #0]
 8013ff0:	461a      	mov	r2, r3
 8013ff2:	8bfb      	ldrh	r3, [r7, #30]
 8013ff4:	1ad3      	subs	r3, r2, r3
 8013ff6:	f1a3 0208 	sub.w	r2, r3, #8
 8013ffa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	f0c0 809c 	bcc.w	801413a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	881b      	ldrh	r3, [r3, #0]
 8014006:	461a      	mov	r2, r3
 8014008:	8bfb      	ldrh	r3, [r7, #30]
 801400a:	1ad3      	subs	r3, r2, r3
 801400c:	f1a3 0208 	sub.w	r2, r3, #8
 8014010:	8bbb      	ldrh	r3, [r7, #28]
 8014012:	3314      	adds	r3, #20
 8014014:	429a      	cmp	r2, r3
 8014016:	d333      	bcc.n	8014080 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014018:	8bfa      	ldrh	r2, [r7, #30]
 801401a:	8bbb      	ldrh	r3, [r7, #28]
 801401c:	4413      	add	r3, r2
 801401e:	b29b      	uxth	r3, r3
 8014020:	3308      	adds	r3, #8
 8014022:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014024:	8a7b      	ldrh	r3, [r7, #18]
 8014026:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801402a:	d106      	bne.n	801403a <mem_malloc+0xb6>
 801402c:	4b50      	ldr	r3, [pc, #320]	; (8014170 <mem_malloc+0x1ec>)
 801402e:	f240 3287 	movw	r2, #903	; 0x387
 8014032:	4950      	ldr	r1, [pc, #320]	; (8014174 <mem_malloc+0x1f0>)
 8014034:	4850      	ldr	r0, [pc, #320]	; (8014178 <mem_malloc+0x1f4>)
 8014036:	f00b fab3 	bl	801f5a0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801403a:	8a7b      	ldrh	r3, [r7, #18]
 801403c:	4618      	mov	r0, r3
 801403e:	f7ff fcb3 	bl	80139a8 <ptr_to_mem>
 8014042:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	2200      	movs	r2, #0
 8014048:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801404a:	697b      	ldr	r3, [r7, #20]
 801404c:	881a      	ldrh	r2, [r3, #0]
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	8bfa      	ldrh	r2, [r7, #30]
 8014056:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	8a7a      	ldrh	r2, [r7, #18]
 801405c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	2201      	movs	r2, #1
 8014062:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	881b      	ldrh	r3, [r3, #0]
 8014068:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801406c:	d00b      	beq.n	8014086 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	881b      	ldrh	r3, [r3, #0]
 8014072:	4618      	mov	r0, r3
 8014074:	f7ff fc98 	bl	80139a8 <ptr_to_mem>
 8014078:	4602      	mov	r2, r0
 801407a:	8a7b      	ldrh	r3, [r7, #18]
 801407c:	8053      	strh	r3, [r2, #2]
 801407e:	e002      	b.n	8014086 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	2201      	movs	r2, #1
 8014084:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014086:	4b39      	ldr	r3, [pc, #228]	; (801416c <mem_malloc+0x1e8>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	697a      	ldr	r2, [r7, #20]
 801408c:	429a      	cmp	r2, r3
 801408e:	d127      	bne.n	80140e0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8014090:	4b36      	ldr	r3, [pc, #216]	; (801416c <mem_malloc+0x1e8>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014096:	e005      	b.n	80140a4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014098:	69bb      	ldr	r3, [r7, #24]
 801409a:	881b      	ldrh	r3, [r3, #0]
 801409c:	4618      	mov	r0, r3
 801409e:	f7ff fc83 	bl	80139a8 <ptr_to_mem>
 80140a2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80140a4:	69bb      	ldr	r3, [r7, #24]
 80140a6:	791b      	ldrb	r3, [r3, #4]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d004      	beq.n	80140b6 <mem_malloc+0x132>
 80140ac:	4b33      	ldr	r3, [pc, #204]	; (801417c <mem_malloc+0x1f8>)
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	69ba      	ldr	r2, [r7, #24]
 80140b2:	429a      	cmp	r2, r3
 80140b4:	d1f0      	bne.n	8014098 <mem_malloc+0x114>
          }
          lfree = cur;
 80140b6:	4a2d      	ldr	r2, [pc, #180]	; (801416c <mem_malloc+0x1e8>)
 80140b8:	69bb      	ldr	r3, [r7, #24]
 80140ba:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80140bc:	4b2b      	ldr	r3, [pc, #172]	; (801416c <mem_malloc+0x1e8>)
 80140be:	681a      	ldr	r2, [r3, #0]
 80140c0:	4b2e      	ldr	r3, [pc, #184]	; (801417c <mem_malloc+0x1f8>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	429a      	cmp	r2, r3
 80140c6:	d00b      	beq.n	80140e0 <mem_malloc+0x15c>
 80140c8:	4b28      	ldr	r3, [pc, #160]	; (801416c <mem_malloc+0x1e8>)
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	791b      	ldrb	r3, [r3, #4]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d006      	beq.n	80140e0 <mem_malloc+0x15c>
 80140d2:	4b27      	ldr	r3, [pc, #156]	; (8014170 <mem_malloc+0x1ec>)
 80140d4:	f240 32b5 	movw	r2, #949	; 0x3b5
 80140d8:	4929      	ldr	r1, [pc, #164]	; (8014180 <mem_malloc+0x1fc>)
 80140da:	4827      	ldr	r0, [pc, #156]	; (8014178 <mem_malloc+0x1f4>)
 80140dc:	f00b fa60 	bl	801f5a0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80140e0:	4821      	ldr	r0, [pc, #132]	; (8014168 <mem_malloc+0x1e4>)
 80140e2:	f00a ff7e 	bl	801efe2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80140e6:	8bba      	ldrh	r2, [r7, #28]
 80140e8:	697b      	ldr	r3, [r7, #20]
 80140ea:	4413      	add	r3, r2
 80140ec:	3308      	adds	r3, #8
 80140ee:	4a23      	ldr	r2, [pc, #140]	; (801417c <mem_malloc+0x1f8>)
 80140f0:	6812      	ldr	r2, [r2, #0]
 80140f2:	4293      	cmp	r3, r2
 80140f4:	d906      	bls.n	8014104 <mem_malloc+0x180>
 80140f6:	4b1e      	ldr	r3, [pc, #120]	; (8014170 <mem_malloc+0x1ec>)
 80140f8:	f240 32b9 	movw	r2, #953	; 0x3b9
 80140fc:	4921      	ldr	r1, [pc, #132]	; (8014184 <mem_malloc+0x200>)
 80140fe:	481e      	ldr	r0, [pc, #120]	; (8014178 <mem_malloc+0x1f4>)
 8014100:	f00b fa4e 	bl	801f5a0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014104:	697b      	ldr	r3, [r7, #20]
 8014106:	f003 0303 	and.w	r3, r3, #3
 801410a:	2b00      	cmp	r3, #0
 801410c:	d006      	beq.n	801411c <mem_malloc+0x198>
 801410e:	4b18      	ldr	r3, [pc, #96]	; (8014170 <mem_malloc+0x1ec>)
 8014110:	f240 32bb 	movw	r2, #955	; 0x3bb
 8014114:	491c      	ldr	r1, [pc, #112]	; (8014188 <mem_malloc+0x204>)
 8014116:	4818      	ldr	r0, [pc, #96]	; (8014178 <mem_malloc+0x1f4>)
 8014118:	f00b fa42 	bl	801f5a0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	f003 0303 	and.w	r3, r3, #3
 8014122:	2b00      	cmp	r3, #0
 8014124:	d006      	beq.n	8014134 <mem_malloc+0x1b0>
 8014126:	4b12      	ldr	r3, [pc, #72]	; (8014170 <mem_malloc+0x1ec>)
 8014128:	f240 32bd 	movw	r2, #957	; 0x3bd
 801412c:	4917      	ldr	r1, [pc, #92]	; (801418c <mem_malloc+0x208>)
 801412e:	4812      	ldr	r0, [pc, #72]	; (8014178 <mem_malloc+0x1f4>)
 8014130:	f00b fa36 	bl	801f5a0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	3308      	adds	r3, #8
 8014138:	e011      	b.n	801415e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801413a:	8bfb      	ldrh	r3, [r7, #30]
 801413c:	4618      	mov	r0, r3
 801413e:	f7ff fc33 	bl	80139a8 <ptr_to_mem>
 8014142:	4603      	mov	r3, r0
 8014144:	881b      	ldrh	r3, [r3, #0]
 8014146:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014148:	8bfa      	ldrh	r2, [r7, #30]
 801414a:	8bbb      	ldrh	r3, [r7, #28]
 801414c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8014150:	429a      	cmp	r2, r3
 8014152:	f4ff af41 	bcc.w	8013fd8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8014156:	4804      	ldr	r0, [pc, #16]	; (8014168 <mem_malloc+0x1e4>)
 8014158:	f00a ff43 	bl	801efe2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801415c:	2300      	movs	r3, #0
}
 801415e:	4618      	mov	r0, r3
 8014160:	3720      	adds	r7, #32
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}
 8014166:	bf00      	nop
 8014168:	20008f08 	.word	0x20008f08
 801416c:	20008f0c 	.word	0x20008f0c
 8014170:	080215f0 	.word	0x080215f0
 8014174:	080217b4 	.word	0x080217b4
 8014178:	08021638 	.word	0x08021638
 801417c:	20008f04 	.word	0x20008f04
 8014180:	080217c8 	.word	0x080217c8
 8014184:	080217e4 	.word	0x080217e4
 8014188:	08021814 	.word	0x08021814
 801418c:	08021844 	.word	0x08021844

08014190 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8014190:	b480      	push	{r7}
 8014192:	b085      	sub	sp, #20
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	689b      	ldr	r3, [r3, #8]
 801419c:	2200      	movs	r2, #0
 801419e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	685b      	ldr	r3, [r3, #4]
 80141a4:	3303      	adds	r3, #3
 80141a6:	f023 0303 	bic.w	r3, r3, #3
 80141aa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80141ac:	2300      	movs	r3, #0
 80141ae:	60fb      	str	r3, [r7, #12]
 80141b0:	e011      	b.n	80141d6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	689b      	ldr	r3, [r3, #8]
 80141b6:	681a      	ldr	r2, [r3, #0]
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	689b      	ldr	r3, [r3, #8]
 80141c0:	68ba      	ldr	r2, [r7, #8]
 80141c2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	881b      	ldrh	r3, [r3, #0]
 80141c8:	461a      	mov	r2, r3
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	4413      	add	r3, r2
 80141ce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	3301      	adds	r3, #1
 80141d4:	60fb      	str	r3, [r7, #12]
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	885b      	ldrh	r3, [r3, #2]
 80141da:	461a      	mov	r2, r3
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	4293      	cmp	r3, r2
 80141e0:	dbe7      	blt.n	80141b2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80141e2:	bf00      	nop
 80141e4:	bf00      	nop
 80141e6:	3714      	adds	r7, #20
 80141e8:	46bd      	mov	sp, r7
 80141ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ee:	4770      	bx	lr

080141f0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80141f6:	2300      	movs	r3, #0
 80141f8:	80fb      	strh	r3, [r7, #6]
 80141fa:	e009      	b.n	8014210 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80141fc:	88fb      	ldrh	r3, [r7, #6]
 80141fe:	4a08      	ldr	r2, [pc, #32]	; (8014220 <memp_init+0x30>)
 8014200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014204:	4618      	mov	r0, r3
 8014206:	f7ff ffc3 	bl	8014190 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801420a:	88fb      	ldrh	r3, [r7, #6]
 801420c:	3301      	adds	r3, #1
 801420e:	80fb      	strh	r3, [r7, #6]
 8014210:	88fb      	ldrh	r3, [r7, #6]
 8014212:	2b0c      	cmp	r3, #12
 8014214:	d9f2      	bls.n	80141fc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8014216:	bf00      	nop
 8014218:	bf00      	nop
 801421a:	3708      	adds	r7, #8
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}
 8014220:	0802406c 	.word	0x0802406c

08014224 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b084      	sub	sp, #16
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801422c:	f00a ff0c 	bl	801f048 <sys_arch_protect>
 8014230:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	689b      	ldr	r3, [r3, #8]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801423a:	68bb      	ldr	r3, [r7, #8]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d015      	beq.n	801426c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	689b      	ldr	r3, [r3, #8]
 8014244:	68ba      	ldr	r2, [r7, #8]
 8014246:	6812      	ldr	r2, [r2, #0]
 8014248:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	f003 0303 	and.w	r3, r3, #3
 8014250:	2b00      	cmp	r3, #0
 8014252:	d006      	beq.n	8014262 <do_memp_malloc_pool+0x3e>
 8014254:	4b09      	ldr	r3, [pc, #36]	; (801427c <do_memp_malloc_pool+0x58>)
 8014256:	f44f 728c 	mov.w	r2, #280	; 0x118
 801425a:	4909      	ldr	r1, [pc, #36]	; (8014280 <do_memp_malloc_pool+0x5c>)
 801425c:	4809      	ldr	r0, [pc, #36]	; (8014284 <do_memp_malloc_pool+0x60>)
 801425e:	f00b f99f 	bl	801f5a0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8014262:	68f8      	ldr	r0, [r7, #12]
 8014264:	f00a fefe 	bl	801f064 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	e003      	b.n	8014274 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801426c:	68f8      	ldr	r0, [r7, #12]
 801426e:	f00a fef9 	bl	801f064 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8014272:	2300      	movs	r3, #0
}
 8014274:	4618      	mov	r0, r3
 8014276:	3710      	adds	r7, #16
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	08021868 	.word	0x08021868
 8014280:	08021898 	.word	0x08021898
 8014284:	080218bc 	.word	0x080218bc

08014288 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b082      	sub	sp, #8
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d106      	bne.n	80142a4 <memp_malloc_pool+0x1c>
 8014296:	4b0a      	ldr	r3, [pc, #40]	; (80142c0 <memp_malloc_pool+0x38>)
 8014298:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801429c:	4909      	ldr	r1, [pc, #36]	; (80142c4 <memp_malloc_pool+0x3c>)
 801429e:	480a      	ldr	r0, [pc, #40]	; (80142c8 <memp_malloc_pool+0x40>)
 80142a0:	f00b f97e 	bl	801f5a0 <iprintf>
  if (desc == NULL) {
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d101      	bne.n	80142ae <memp_malloc_pool+0x26>
    return NULL;
 80142aa:	2300      	movs	r3, #0
 80142ac:	e003      	b.n	80142b6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80142ae:	6878      	ldr	r0, [r7, #4]
 80142b0:	f7ff ffb8 	bl	8014224 <do_memp_malloc_pool>
 80142b4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3708      	adds	r7, #8
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}
 80142be:	bf00      	nop
 80142c0:	08021868 	.word	0x08021868
 80142c4:	080218e4 	.word	0x080218e4
 80142c8:	080218bc 	.word	0x080218bc

080142cc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b084      	sub	sp, #16
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	4603      	mov	r3, r0
 80142d4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80142d6:	79fb      	ldrb	r3, [r7, #7]
 80142d8:	2b0c      	cmp	r3, #12
 80142da:	d908      	bls.n	80142ee <memp_malloc+0x22>
 80142dc:	4b0a      	ldr	r3, [pc, #40]	; (8014308 <memp_malloc+0x3c>)
 80142de:	f240 1257 	movw	r2, #343	; 0x157
 80142e2:	490a      	ldr	r1, [pc, #40]	; (801430c <memp_malloc+0x40>)
 80142e4:	480a      	ldr	r0, [pc, #40]	; (8014310 <memp_malloc+0x44>)
 80142e6:	f00b f95b 	bl	801f5a0 <iprintf>
 80142ea:	2300      	movs	r3, #0
 80142ec:	e008      	b.n	8014300 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80142ee:	79fb      	ldrb	r3, [r7, #7]
 80142f0:	4a08      	ldr	r2, [pc, #32]	; (8014314 <memp_malloc+0x48>)
 80142f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80142f6:	4618      	mov	r0, r3
 80142f8:	f7ff ff94 	bl	8014224 <do_memp_malloc_pool>
 80142fc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80142fe:	68fb      	ldr	r3, [r7, #12]
}
 8014300:	4618      	mov	r0, r3
 8014302:	3710      	adds	r7, #16
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}
 8014308:	08021868 	.word	0x08021868
 801430c:	080218f8 	.word	0x080218f8
 8014310:	080218bc 	.word	0x080218bc
 8014314:	0802406c 	.word	0x0802406c

08014318 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b084      	sub	sp, #16
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
 8014320:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	f003 0303 	and.w	r3, r3, #3
 8014328:	2b00      	cmp	r3, #0
 801432a:	d006      	beq.n	801433a <do_memp_free_pool+0x22>
 801432c:	4b0d      	ldr	r3, [pc, #52]	; (8014364 <do_memp_free_pool+0x4c>)
 801432e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8014332:	490d      	ldr	r1, [pc, #52]	; (8014368 <do_memp_free_pool+0x50>)
 8014334:	480d      	ldr	r0, [pc, #52]	; (801436c <do_memp_free_pool+0x54>)
 8014336:	f00b f933 	bl	801f5a0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801433a:	683b      	ldr	r3, [r7, #0]
 801433c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801433e:	f00a fe83 	bl	801f048 <sys_arch_protect>
 8014342:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	689b      	ldr	r3, [r3, #8]
 8014348:	681a      	ldr	r2, [r3, #0]
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	689b      	ldr	r3, [r3, #8]
 8014352:	68fa      	ldr	r2, [r7, #12]
 8014354:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8014356:	68b8      	ldr	r0, [r7, #8]
 8014358:	f00a fe84 	bl	801f064 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801435c:	bf00      	nop
 801435e:	3710      	adds	r7, #16
 8014360:	46bd      	mov	sp, r7
 8014362:	bd80      	pop	{r7, pc}
 8014364:	08021868 	.word	0x08021868
 8014368:	08021918 	.word	0x08021918
 801436c:	080218bc 	.word	0x080218bc

08014370 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b082      	sub	sp, #8
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
 8014378:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d106      	bne.n	801438e <memp_free_pool+0x1e>
 8014380:	4b0a      	ldr	r3, [pc, #40]	; (80143ac <memp_free_pool+0x3c>)
 8014382:	f240 1295 	movw	r2, #405	; 0x195
 8014386:	490a      	ldr	r1, [pc, #40]	; (80143b0 <memp_free_pool+0x40>)
 8014388:	480a      	ldr	r0, [pc, #40]	; (80143b4 <memp_free_pool+0x44>)
 801438a:	f00b f909 	bl	801f5a0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d007      	beq.n	80143a4 <memp_free_pool+0x34>
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d004      	beq.n	80143a4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801439a:	6839      	ldr	r1, [r7, #0]
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f7ff ffbb 	bl	8014318 <do_memp_free_pool>
 80143a2:	e000      	b.n	80143a6 <memp_free_pool+0x36>
    return;
 80143a4:	bf00      	nop
}
 80143a6:	3708      	adds	r7, #8
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}
 80143ac:	08021868 	.word	0x08021868
 80143b0:	080218e4 	.word	0x080218e4
 80143b4:	080218bc 	.word	0x080218bc

080143b8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b082      	sub	sp, #8
 80143bc:	af00      	add	r7, sp, #0
 80143be:	4603      	mov	r3, r0
 80143c0:	6039      	str	r1, [r7, #0]
 80143c2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80143c4:	79fb      	ldrb	r3, [r7, #7]
 80143c6:	2b0c      	cmp	r3, #12
 80143c8:	d907      	bls.n	80143da <memp_free+0x22>
 80143ca:	4b0c      	ldr	r3, [pc, #48]	; (80143fc <memp_free+0x44>)
 80143cc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80143d0:	490b      	ldr	r1, [pc, #44]	; (8014400 <memp_free+0x48>)
 80143d2:	480c      	ldr	r0, [pc, #48]	; (8014404 <memp_free+0x4c>)
 80143d4:	f00b f8e4 	bl	801f5a0 <iprintf>
 80143d8:	e00c      	b.n	80143f4 <memp_free+0x3c>

  if (mem == NULL) {
 80143da:	683b      	ldr	r3, [r7, #0]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d008      	beq.n	80143f2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80143e0:	79fb      	ldrb	r3, [r7, #7]
 80143e2:	4a09      	ldr	r2, [pc, #36]	; (8014408 <memp_free+0x50>)
 80143e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80143e8:	6839      	ldr	r1, [r7, #0]
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7ff ff94 	bl	8014318 <do_memp_free_pool>
 80143f0:	e000      	b.n	80143f4 <memp_free+0x3c>
    return;
 80143f2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80143f4:	3708      	adds	r7, #8
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
 80143fa:	bf00      	nop
 80143fc:	08021868 	.word	0x08021868
 8014400:	08021938 	.word	0x08021938
 8014404:	080218bc 	.word	0x080218bc
 8014408:	0802406c 	.word	0x0802406c

0801440c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801440c:	b480      	push	{r7}
 801440e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014410:	bf00      	nop
 8014412:	46bd      	mov	sp, r7
 8014414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014418:	4770      	bx	lr
	...

0801441c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b086      	sub	sp, #24
 8014420:	af00      	add	r7, sp, #0
 8014422:	60f8      	str	r0, [r7, #12]
 8014424:	60b9      	str	r1, [r7, #8]
 8014426:	607a      	str	r2, [r7, #4]
 8014428:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d108      	bne.n	8014442 <netif_add+0x26>
 8014430:	4b57      	ldr	r3, [pc, #348]	; (8014590 <netif_add+0x174>)
 8014432:	f240 1227 	movw	r2, #295	; 0x127
 8014436:	4957      	ldr	r1, [pc, #348]	; (8014594 <netif_add+0x178>)
 8014438:	4857      	ldr	r0, [pc, #348]	; (8014598 <netif_add+0x17c>)
 801443a:	f00b f8b1 	bl	801f5a0 <iprintf>
 801443e:	2300      	movs	r3, #0
 8014440:	e0a2      	b.n	8014588 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8014442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014444:	2b00      	cmp	r3, #0
 8014446:	d108      	bne.n	801445a <netif_add+0x3e>
 8014448:	4b51      	ldr	r3, [pc, #324]	; (8014590 <netif_add+0x174>)
 801444a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801444e:	4953      	ldr	r1, [pc, #332]	; (801459c <netif_add+0x180>)
 8014450:	4851      	ldr	r0, [pc, #324]	; (8014598 <netif_add+0x17c>)
 8014452:	f00b f8a5 	bl	801f5a0 <iprintf>
 8014456:	2300      	movs	r3, #0
 8014458:	e096      	b.n	8014588 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d101      	bne.n	8014464 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8014460:	4b4f      	ldr	r3, [pc, #316]	; (80145a0 <netif_add+0x184>)
 8014462:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d101      	bne.n	801446e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801446a:	4b4d      	ldr	r3, [pc, #308]	; (80145a0 <netif_add+0x184>)
 801446c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d101      	bne.n	8014478 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8014474:	4b4a      	ldr	r3, [pc, #296]	; (80145a0 <netif_add+0x184>)
 8014476:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	2200      	movs	r2, #0
 801447c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	2200      	movs	r2, #0
 8014482:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	2200      	movs	r2, #0
 8014488:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	4a45      	ldr	r2, [pc, #276]	; (80145a4 <netif_add+0x188>)
 801448e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	2200      	movs	r2, #0
 8014494:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	2200      	movs	r2, #0
 801449a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	2200      	movs	r2, #0
 80144a2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	6a3a      	ldr	r2, [r7, #32]
 80144a8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80144aa:	4b3f      	ldr	r3, [pc, #252]	; (80145a8 <netif_add+0x18c>)
 80144ac:	781a      	ldrb	r2, [r3, #0]
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144b8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	687a      	ldr	r2, [r7, #4]
 80144be:	68b9      	ldr	r1, [r7, #8]
 80144c0:	68f8      	ldr	r0, [r7, #12]
 80144c2:	f000 f913 	bl	80146ec <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80144c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c8:	68f8      	ldr	r0, [r7, #12]
 80144ca:	4798      	blx	r3
 80144cc:	4603      	mov	r3, r0
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d001      	beq.n	80144d6 <netif_add+0xba>
    return NULL;
 80144d2:	2300      	movs	r3, #0
 80144d4:	e058      	b.n	8014588 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80144dc:	2bff      	cmp	r3, #255	; 0xff
 80144de:	d103      	bne.n	80144e8 <netif_add+0xcc>
        netif->num = 0;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2200      	movs	r2, #0
 80144e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80144e8:	2300      	movs	r3, #0
 80144ea:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80144ec:	4b2f      	ldr	r3, [pc, #188]	; (80145ac <netif_add+0x190>)
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	617b      	str	r3, [r7, #20]
 80144f2:	e02b      	b.n	801454c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80144f4:	697a      	ldr	r2, [r7, #20]
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d106      	bne.n	801450a <netif_add+0xee>
 80144fc:	4b24      	ldr	r3, [pc, #144]	; (8014590 <netif_add+0x174>)
 80144fe:	f240 128b 	movw	r2, #395	; 0x18b
 8014502:	492b      	ldr	r1, [pc, #172]	; (80145b0 <netif_add+0x194>)
 8014504:	4824      	ldr	r0, [pc, #144]	; (8014598 <netif_add+0x17c>)
 8014506:	f00b f84b 	bl	801f5a0 <iprintf>
        num_netifs++;
 801450a:	693b      	ldr	r3, [r7, #16]
 801450c:	3301      	adds	r3, #1
 801450e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8014510:	693b      	ldr	r3, [r7, #16]
 8014512:	2bff      	cmp	r3, #255	; 0xff
 8014514:	dd06      	ble.n	8014524 <netif_add+0x108>
 8014516:	4b1e      	ldr	r3, [pc, #120]	; (8014590 <netif_add+0x174>)
 8014518:	f240 128d 	movw	r2, #397	; 0x18d
 801451c:	4925      	ldr	r1, [pc, #148]	; (80145b4 <netif_add+0x198>)
 801451e:	481e      	ldr	r0, [pc, #120]	; (8014598 <netif_add+0x17c>)
 8014520:	f00b f83e 	bl	801f5a0 <iprintf>
        if (netif2->num == netif->num) {
 8014524:	697b      	ldr	r3, [r7, #20]
 8014526:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014530:	429a      	cmp	r2, r3
 8014532:	d108      	bne.n	8014546 <netif_add+0x12a>
          netif->num++;
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801453a:	3301      	adds	r3, #1
 801453c:	b2da      	uxtb	r2, r3
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8014544:	e005      	b.n	8014552 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	617b      	str	r3, [r7, #20]
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d1d0      	bne.n	80144f4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8014552:	697b      	ldr	r3, [r7, #20]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d1be      	bne.n	80144d6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801455e:	2bfe      	cmp	r3, #254	; 0xfe
 8014560:	d103      	bne.n	801456a <netif_add+0x14e>
    netif_num = 0;
 8014562:	4b11      	ldr	r3, [pc, #68]	; (80145a8 <netif_add+0x18c>)
 8014564:	2200      	movs	r2, #0
 8014566:	701a      	strb	r2, [r3, #0]
 8014568:	e006      	b.n	8014578 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014570:	3301      	adds	r3, #1
 8014572:	b2da      	uxtb	r2, r3
 8014574:	4b0c      	ldr	r3, [pc, #48]	; (80145a8 <netif_add+0x18c>)
 8014576:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8014578:	4b0c      	ldr	r3, [pc, #48]	; (80145ac <netif_add+0x190>)
 801457a:	681a      	ldr	r2, [r3, #0]
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8014580:	4a0a      	ldr	r2, [pc, #40]	; (80145ac <netif_add+0x190>)
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8014586:	68fb      	ldr	r3, [r7, #12]
}
 8014588:	4618      	mov	r0, r3
 801458a:	3718      	adds	r7, #24
 801458c:	46bd      	mov	sp, r7
 801458e:	bd80      	pop	{r7, pc}
 8014590:	08021954 	.word	0x08021954
 8014594:	080219e8 	.word	0x080219e8
 8014598:	080219a4 	.word	0x080219a4
 801459c:	08021a04 	.word	0x08021a04
 80145a0:	080240e0 	.word	0x080240e0
 80145a4:	080149c7 	.word	0x080149c7
 80145a8:	2000bfe4 	.word	0x2000bfe4
 80145ac:	2000bfdc 	.word	0x2000bfdc
 80145b0:	08021a28 	.word	0x08021a28
 80145b4:	08021a3c 	.word	0x08021a3c

080145b8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
 80145c0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80145c2:	6839      	ldr	r1, [r7, #0]
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f002 ff77 	bl	80174b8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80145ca:	6839      	ldr	r1, [r7, #0]
 80145cc:	6878      	ldr	r0, [r7, #4]
 80145ce:	f008 f881 	bl	801c6d4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80145d2:	bf00      	nop
 80145d4:	3708      	adds	r7, #8
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
	...

080145dc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b086      	sub	sp, #24
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	60f8      	str	r0, [r7, #12]
 80145e4:	60b9      	str	r1, [r7, #8]
 80145e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80145e8:	68bb      	ldr	r3, [r7, #8]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d106      	bne.n	80145fc <netif_do_set_ipaddr+0x20>
 80145ee:	4b1d      	ldr	r3, [pc, #116]	; (8014664 <netif_do_set_ipaddr+0x88>)
 80145f0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80145f4:	491c      	ldr	r1, [pc, #112]	; (8014668 <netif_do_set_ipaddr+0x8c>)
 80145f6:	481d      	ldr	r0, [pc, #116]	; (801466c <netif_do_set_ipaddr+0x90>)
 80145f8:	f00a ffd2 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d106      	bne.n	8014610 <netif_do_set_ipaddr+0x34>
 8014602:	4b18      	ldr	r3, [pc, #96]	; (8014664 <netif_do_set_ipaddr+0x88>)
 8014604:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8014608:	4917      	ldr	r1, [pc, #92]	; (8014668 <netif_do_set_ipaddr+0x8c>)
 801460a:	4818      	ldr	r0, [pc, #96]	; (801466c <netif_do_set_ipaddr+0x90>)
 801460c:	f00a ffc8 	bl	801f5a0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014610:	68bb      	ldr	r3, [r7, #8]
 8014612:	681a      	ldr	r2, [r3, #0]
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	3304      	adds	r3, #4
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	429a      	cmp	r2, r3
 801461c:	d01c      	beq.n	8014658 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	3304      	adds	r3, #4
 8014628:	681a      	ldr	r2, [r3, #0]
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801462e:	f107 0314 	add.w	r3, r7, #20
 8014632:	4619      	mov	r1, r3
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f7ff ffbf 	bl	80145b8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d002      	beq.n	8014646 <netif_do_set_ipaddr+0x6a>
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	e000      	b.n	8014648 <netif_do_set_ipaddr+0x6c>
 8014646:	2300      	movs	r3, #0
 8014648:	68fa      	ldr	r2, [r7, #12]
 801464a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801464c:	2101      	movs	r1, #1
 801464e:	68f8      	ldr	r0, [r7, #12]
 8014650:	f000 f8d2 	bl	80147f8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8014654:	2301      	movs	r3, #1
 8014656:	e000      	b.n	801465a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8014658:	2300      	movs	r3, #0
}
 801465a:	4618      	mov	r0, r3
 801465c:	3718      	adds	r7, #24
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
 8014662:	bf00      	nop
 8014664:	08021954 	.word	0x08021954
 8014668:	08021a6c 	.word	0x08021a6c
 801466c:	080219a4 	.word	0x080219a4

08014670 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8014670:	b480      	push	{r7}
 8014672:	b085      	sub	sp, #20
 8014674:	af00      	add	r7, sp, #0
 8014676:	60f8      	str	r0, [r7, #12]
 8014678:	60b9      	str	r1, [r7, #8]
 801467a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	681a      	ldr	r2, [r3, #0]
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	3308      	adds	r3, #8
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	429a      	cmp	r2, r3
 8014688:	d00a      	beq.n	80146a0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d002      	beq.n	8014696 <netif_do_set_netmask+0x26>
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	e000      	b.n	8014698 <netif_do_set_netmask+0x28>
 8014696:	2300      	movs	r3, #0
 8014698:	68fa      	ldr	r2, [r7, #12]
 801469a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801469c:	2301      	movs	r3, #1
 801469e:	e000      	b.n	80146a2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80146a0:	2300      	movs	r3, #0
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	3714      	adds	r7, #20
 80146a6:	46bd      	mov	sp, r7
 80146a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ac:	4770      	bx	lr

080146ae <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80146ae:	b480      	push	{r7}
 80146b0:	b085      	sub	sp, #20
 80146b2:	af00      	add	r7, sp, #0
 80146b4:	60f8      	str	r0, [r7, #12]
 80146b6:	60b9      	str	r1, [r7, #8]
 80146b8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	681a      	ldr	r2, [r3, #0]
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	330c      	adds	r3, #12
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d00a      	beq.n	80146de <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d002      	beq.n	80146d4 <netif_do_set_gw+0x26>
 80146ce:	68bb      	ldr	r3, [r7, #8]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	e000      	b.n	80146d6 <netif_do_set_gw+0x28>
 80146d4:	2300      	movs	r3, #0
 80146d6:	68fa      	ldr	r2, [r7, #12]
 80146d8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80146da:	2301      	movs	r3, #1
 80146dc:	e000      	b.n	80146e0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80146de:	2300      	movs	r3, #0
}
 80146e0:	4618      	mov	r0, r3
 80146e2:	3714      	adds	r7, #20
 80146e4:	46bd      	mov	sp, r7
 80146e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ea:	4770      	bx	lr

080146ec <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b088      	sub	sp, #32
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	60f8      	str	r0, [r7, #12]
 80146f4:	60b9      	str	r1, [r7, #8]
 80146f6:	607a      	str	r2, [r7, #4]
 80146f8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80146fa:	2300      	movs	r3, #0
 80146fc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80146fe:	2300      	movs	r3, #0
 8014700:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d101      	bne.n	801470c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8014708:	4b1c      	ldr	r3, [pc, #112]	; (801477c <netif_set_addr+0x90>)
 801470a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d101      	bne.n	8014716 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8014712:	4b1a      	ldr	r3, [pc, #104]	; (801477c <netif_set_addr+0x90>)
 8014714:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d101      	bne.n	8014720 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801471c:	4b17      	ldr	r3, [pc, #92]	; (801477c <netif_set_addr+0x90>)
 801471e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d003      	beq.n	801472e <netif_set_addr+0x42>
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d101      	bne.n	8014732 <netif_set_addr+0x46>
 801472e:	2301      	movs	r3, #1
 8014730:	e000      	b.n	8014734 <netif_set_addr+0x48>
 8014732:	2300      	movs	r3, #0
 8014734:	617b      	str	r3, [r7, #20]
  if (remove) {
 8014736:	697b      	ldr	r3, [r7, #20]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d006      	beq.n	801474a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801473c:	f107 0310 	add.w	r3, r7, #16
 8014740:	461a      	mov	r2, r3
 8014742:	68b9      	ldr	r1, [r7, #8]
 8014744:	68f8      	ldr	r0, [r7, #12]
 8014746:	f7ff ff49 	bl	80145dc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801474a:	69fa      	ldr	r2, [r7, #28]
 801474c:	6879      	ldr	r1, [r7, #4]
 801474e:	68f8      	ldr	r0, [r7, #12]
 8014750:	f7ff ff8e 	bl	8014670 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8014754:	69ba      	ldr	r2, [r7, #24]
 8014756:	6839      	ldr	r1, [r7, #0]
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	f7ff ffa8 	bl	80146ae <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801475e:	697b      	ldr	r3, [r7, #20]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d106      	bne.n	8014772 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014764:	f107 0310 	add.w	r3, r7, #16
 8014768:	461a      	mov	r2, r3
 801476a:	68b9      	ldr	r1, [r7, #8]
 801476c:	68f8      	ldr	r0, [r7, #12]
 801476e:	f7ff ff35 	bl	80145dc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8014772:	bf00      	nop
 8014774:	3720      	adds	r7, #32
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}
 801477a:	bf00      	nop
 801477c:	080240e0 	.word	0x080240e0

08014780 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8014780:	b480      	push	{r7}
 8014782:	b083      	sub	sp, #12
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8014788:	4a04      	ldr	r2, [pc, #16]	; (801479c <netif_set_default+0x1c>)
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801478e:	bf00      	nop
 8014790:	370c      	adds	r7, #12
 8014792:	46bd      	mov	sp, r7
 8014794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014798:	4770      	bx	lr
 801479a:	bf00      	nop
 801479c:	2000bfe0 	.word	0x2000bfe0

080147a0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b082      	sub	sp, #8
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d107      	bne.n	80147be <netif_set_up+0x1e>
 80147ae:	4b0f      	ldr	r3, [pc, #60]	; (80147ec <netif_set_up+0x4c>)
 80147b0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80147b4:	490e      	ldr	r1, [pc, #56]	; (80147f0 <netif_set_up+0x50>)
 80147b6:	480f      	ldr	r0, [pc, #60]	; (80147f4 <netif_set_up+0x54>)
 80147b8:	f00a fef2 	bl	801f5a0 <iprintf>
 80147bc:	e013      	b.n	80147e6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80147c4:	f003 0301 	and.w	r3, r3, #1
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d10c      	bne.n	80147e6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80147d2:	f043 0301 	orr.w	r3, r3, #1
 80147d6:	b2da      	uxtb	r2, r3
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80147de:	2103      	movs	r1, #3
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f000 f809 	bl	80147f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80147e6:	3708      	adds	r7, #8
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}
 80147ec:	08021954 	.word	0x08021954
 80147f0:	08021adc 	.word	0x08021adc
 80147f4:	080219a4 	.word	0x080219a4

080147f8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b082      	sub	sp, #8
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	460b      	mov	r3, r1
 8014802:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d106      	bne.n	8014818 <netif_issue_reports+0x20>
 801480a:	4b18      	ldr	r3, [pc, #96]	; (801486c <netif_issue_reports+0x74>)
 801480c:	f240 326d 	movw	r2, #877	; 0x36d
 8014810:	4917      	ldr	r1, [pc, #92]	; (8014870 <netif_issue_reports+0x78>)
 8014812:	4818      	ldr	r0, [pc, #96]	; (8014874 <netif_issue_reports+0x7c>)
 8014814:	f00a fec4 	bl	801f5a0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801481e:	f003 0304 	and.w	r3, r3, #4
 8014822:	2b00      	cmp	r3, #0
 8014824:	d01e      	beq.n	8014864 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801482c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014830:	2b00      	cmp	r3, #0
 8014832:	d017      	beq.n	8014864 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014834:	78fb      	ldrb	r3, [r7, #3]
 8014836:	f003 0301 	and.w	r3, r3, #1
 801483a:	2b00      	cmp	r3, #0
 801483c:	d013      	beq.n	8014866 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	3304      	adds	r3, #4
 8014842:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014844:	2b00      	cmp	r3, #0
 8014846:	d00e      	beq.n	8014866 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801484e:	f003 0308 	and.w	r3, r3, #8
 8014852:	2b00      	cmp	r3, #0
 8014854:	d007      	beq.n	8014866 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	3304      	adds	r3, #4
 801485a:	4619      	mov	r1, r3
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f008 fea3 	bl	801d5a8 <etharp_request>
 8014862:	e000      	b.n	8014866 <netif_issue_reports+0x6e>
    return;
 8014864:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8014866:	3708      	adds	r7, #8
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}
 801486c:	08021954 	.word	0x08021954
 8014870:	08021af8 	.word	0x08021af8
 8014874:	080219a4 	.word	0x080219a4

08014878 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b082      	sub	sp, #8
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d107      	bne.n	8014896 <netif_set_down+0x1e>
 8014886:	4b12      	ldr	r3, [pc, #72]	; (80148d0 <netif_set_down+0x58>)
 8014888:	f240 329b 	movw	r2, #923	; 0x39b
 801488c:	4911      	ldr	r1, [pc, #68]	; (80148d4 <netif_set_down+0x5c>)
 801488e:	4812      	ldr	r0, [pc, #72]	; (80148d8 <netif_set_down+0x60>)
 8014890:	f00a fe86 	bl	801f5a0 <iprintf>
 8014894:	e019      	b.n	80148ca <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801489c:	f003 0301 	and.w	r3, r3, #1
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d012      	beq.n	80148ca <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80148aa:	f023 0301 	bic.w	r3, r3, #1
 80148ae:	b2da      	uxtb	r2, r3
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80148bc:	f003 0308 	and.w	r3, r3, #8
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d002      	beq.n	80148ca <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f008 fa2d 	bl	801cd24 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80148ca:	3708      	adds	r7, #8
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}
 80148d0:	08021954 	.word	0x08021954
 80148d4:	08021b1c 	.word	0x08021b1c
 80148d8:	080219a4 	.word	0x080219a4

080148dc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d107      	bne.n	80148fa <netif_set_link_up+0x1e>
 80148ea:	4b13      	ldr	r3, [pc, #76]	; (8014938 <netif_set_link_up+0x5c>)
 80148ec:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80148f0:	4912      	ldr	r1, [pc, #72]	; (801493c <netif_set_link_up+0x60>)
 80148f2:	4813      	ldr	r0, [pc, #76]	; (8014940 <netif_set_link_up+0x64>)
 80148f4:	f00a fe54 	bl	801f5a0 <iprintf>
 80148f8:	e01b      	b.n	8014932 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014900:	f003 0304 	and.w	r3, r3, #4
 8014904:	2b00      	cmp	r3, #0
 8014906:	d114      	bne.n	8014932 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801490e:	f043 0304 	orr.w	r3, r3, #4
 8014912:	b2da      	uxtb	r2, r3
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801491a:	2103      	movs	r1, #3
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f7ff ff6b 	bl	80147f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	69db      	ldr	r3, [r3, #28]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d003      	beq.n	8014932 <netif_set_link_up+0x56>
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	69db      	ldr	r3, [r3, #28]
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014932:	3708      	adds	r7, #8
 8014934:	46bd      	mov	sp, r7
 8014936:	bd80      	pop	{r7, pc}
 8014938:	08021954 	.word	0x08021954
 801493c:	08021b3c 	.word	0x08021b3c
 8014940:	080219a4 	.word	0x080219a4

08014944 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b082      	sub	sp, #8
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d107      	bne.n	8014962 <netif_set_link_down+0x1e>
 8014952:	4b11      	ldr	r3, [pc, #68]	; (8014998 <netif_set_link_down+0x54>)
 8014954:	f240 4206 	movw	r2, #1030	; 0x406
 8014958:	4910      	ldr	r1, [pc, #64]	; (801499c <netif_set_link_down+0x58>)
 801495a:	4811      	ldr	r0, [pc, #68]	; (80149a0 <netif_set_link_down+0x5c>)
 801495c:	f00a fe20 	bl	801f5a0 <iprintf>
 8014960:	e017      	b.n	8014992 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014968:	f003 0304 	and.w	r3, r3, #4
 801496c:	2b00      	cmp	r3, #0
 801496e:	d010      	beq.n	8014992 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014976:	f023 0304 	bic.w	r3, r3, #4
 801497a:	b2da      	uxtb	r2, r3
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	69db      	ldr	r3, [r3, #28]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d003      	beq.n	8014992 <netif_set_link_down+0x4e>
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	69db      	ldr	r3, [r3, #28]
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014992:	3708      	adds	r7, #8
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}
 8014998:	08021954 	.word	0x08021954
 801499c:	08021b60 	.word	0x08021b60
 80149a0:	080219a4 	.word	0x080219a4

080149a4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80149a4:	b480      	push	{r7}
 80149a6:	b083      	sub	sp, #12
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
 80149ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d002      	beq.n	80149ba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	683a      	ldr	r2, [r7, #0]
 80149b8:	61da      	str	r2, [r3, #28]
  }
}
 80149ba:	bf00      	nop
 80149bc:	370c      	adds	r7, #12
 80149be:	46bd      	mov	sp, r7
 80149c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c4:	4770      	bx	lr

080149c6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80149c6:	b480      	push	{r7}
 80149c8:	b085      	sub	sp, #20
 80149ca:	af00      	add	r7, sp, #0
 80149cc:	60f8      	str	r0, [r7, #12]
 80149ce:	60b9      	str	r1, [r7, #8]
 80149d0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80149d2:	f06f 030b 	mvn.w	r3, #11
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3714      	adds	r7, #20
 80149da:	46bd      	mov	sp, r7
 80149dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e0:	4770      	bx	lr
	...

080149e4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80149e4:	b480      	push	{r7}
 80149e6:	b085      	sub	sp, #20
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	4603      	mov	r3, r0
 80149ec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80149ee:	79fb      	ldrb	r3, [r7, #7]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d013      	beq.n	8014a1c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80149f4:	4b0d      	ldr	r3, [pc, #52]	; (8014a2c <netif_get_by_index+0x48>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	60fb      	str	r3, [r7, #12]
 80149fa:	e00c      	b.n	8014a16 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014a02:	3301      	adds	r3, #1
 8014a04:	b2db      	uxtb	r3, r3
 8014a06:	79fa      	ldrb	r2, [r7, #7]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d101      	bne.n	8014a10 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	e006      	b.n	8014a1e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	60fb      	str	r3, [r7, #12]
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d1ef      	bne.n	80149fc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014a1c:	2300      	movs	r3, #0
}
 8014a1e:	4618      	mov	r0, r3
 8014a20:	3714      	adds	r7, #20
 8014a22:	46bd      	mov	sp, r7
 8014a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a28:	4770      	bx	lr
 8014a2a:	bf00      	nop
 8014a2c:	2000bfdc 	.word	0x2000bfdc

08014a30 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b082      	sub	sp, #8
 8014a34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8014a36:	f00a fb07 	bl	801f048 <sys_arch_protect>
 8014a3a:	6038      	str	r0, [r7, #0]
 8014a3c:	4b0d      	ldr	r3, [pc, #52]	; (8014a74 <pbuf_free_ooseq+0x44>)
 8014a3e:	2200      	movs	r2, #0
 8014a40:	701a      	strb	r2, [r3, #0]
 8014a42:	6838      	ldr	r0, [r7, #0]
 8014a44:	f00a fb0e 	bl	801f064 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014a48:	4b0b      	ldr	r3, [pc, #44]	; (8014a78 <pbuf_free_ooseq+0x48>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	607b      	str	r3, [r7, #4]
 8014a4e:	e00a      	b.n	8014a66 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d003      	beq.n	8014a60 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f002 fd6b 	bl	8017534 <tcp_free_ooseq>
      return;
 8014a5e:	e005      	b.n	8014a6c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	68db      	ldr	r3, [r3, #12]
 8014a64:	607b      	str	r3, [r7, #4]
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d1f1      	bne.n	8014a50 <pbuf_free_ooseq+0x20>
    }
  }
}
 8014a6c:	3708      	adds	r7, #8
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	bd80      	pop	{r7, pc}
 8014a72:	bf00      	nop
 8014a74:	2000bfe5 	.word	0x2000bfe5
 8014a78:	2000bff4 	.word	0x2000bff4

08014a7c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b082      	sub	sp, #8
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8014a84:	f7ff ffd4 	bl	8014a30 <pbuf_free_ooseq>
}
 8014a88:	bf00      	nop
 8014a8a:	3708      	adds	r7, #8
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}

08014a90 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b082      	sub	sp, #8
 8014a94:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8014a96:	f00a fad7 	bl	801f048 <sys_arch_protect>
 8014a9a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014a9c:	4b0f      	ldr	r3, [pc, #60]	; (8014adc <pbuf_pool_is_empty+0x4c>)
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8014aa2:	4b0e      	ldr	r3, [pc, #56]	; (8014adc <pbuf_pool_is_empty+0x4c>)
 8014aa4:	2201      	movs	r2, #1
 8014aa6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014aa8:	6878      	ldr	r0, [r7, #4]
 8014aaa:	f00a fadb 	bl	801f064 <sys_arch_unprotect>

  if (!queued) {
 8014aae:	78fb      	ldrb	r3, [r7, #3]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d10f      	bne.n	8014ad4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8014ab4:	2100      	movs	r1, #0
 8014ab6:	480a      	ldr	r0, [pc, #40]	; (8014ae0 <pbuf_pool_is_empty+0x50>)
 8014ab8:	f7fe fe90 	bl	80137dc <tcpip_try_callback>
 8014abc:	4603      	mov	r3, r0
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d008      	beq.n	8014ad4 <pbuf_pool_is_empty+0x44>
 8014ac2:	f00a fac1 	bl	801f048 <sys_arch_protect>
 8014ac6:	6078      	str	r0, [r7, #4]
 8014ac8:	4b04      	ldr	r3, [pc, #16]	; (8014adc <pbuf_pool_is_empty+0x4c>)
 8014aca:	2200      	movs	r2, #0
 8014acc:	701a      	strb	r2, [r3, #0]
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	f00a fac8 	bl	801f064 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8014ad4:	bf00      	nop
 8014ad6:	3708      	adds	r7, #8
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}
 8014adc:	2000bfe5 	.word	0x2000bfe5
 8014ae0:	08014a7d 	.word	0x08014a7d

08014ae4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8014ae4:	b480      	push	{r7}
 8014ae6:	b085      	sub	sp, #20
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	60f8      	str	r0, [r7, #12]
 8014aec:	60b9      	str	r1, [r7, #8]
 8014aee:	4611      	mov	r1, r2
 8014af0:	461a      	mov	r2, r3
 8014af2:	460b      	mov	r3, r1
 8014af4:	80fb      	strh	r3, [r7, #6]
 8014af6:	4613      	mov	r3, r2
 8014af8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	2200      	movs	r2, #0
 8014afe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	68ba      	ldr	r2, [r7, #8]
 8014b04:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	88fa      	ldrh	r2, [r7, #6]
 8014b0a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	88ba      	ldrh	r2, [r7, #4]
 8014b10:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8014b12:	8b3b      	ldrh	r3, [r7, #24]
 8014b14:	b2da      	uxtb	r2, r3
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	7f3a      	ldrb	r2, [r7, #28]
 8014b1e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	2201      	movs	r2, #1
 8014b24:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	2200      	movs	r2, #0
 8014b2a:	73da      	strb	r2, [r3, #15]
}
 8014b2c:	bf00      	nop
 8014b2e:	3714      	adds	r7, #20
 8014b30:	46bd      	mov	sp, r7
 8014b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b36:	4770      	bx	lr

08014b38 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b08c      	sub	sp, #48	; 0x30
 8014b3c:	af02      	add	r7, sp, #8
 8014b3e:	4603      	mov	r3, r0
 8014b40:	71fb      	strb	r3, [r7, #7]
 8014b42:	460b      	mov	r3, r1
 8014b44:	80bb      	strh	r3, [r7, #4]
 8014b46:	4613      	mov	r3, r2
 8014b48:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014b4a:	79fb      	ldrb	r3, [r7, #7]
 8014b4c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8014b4e:	887b      	ldrh	r3, [r7, #2]
 8014b50:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014b54:	d07f      	beq.n	8014c56 <pbuf_alloc+0x11e>
 8014b56:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014b5a:	f300 80c8 	bgt.w	8014cee <pbuf_alloc+0x1b6>
 8014b5e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014b62:	d010      	beq.n	8014b86 <pbuf_alloc+0x4e>
 8014b64:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014b68:	f300 80c1 	bgt.w	8014cee <pbuf_alloc+0x1b6>
 8014b6c:	2b01      	cmp	r3, #1
 8014b6e:	d002      	beq.n	8014b76 <pbuf_alloc+0x3e>
 8014b70:	2b41      	cmp	r3, #65	; 0x41
 8014b72:	f040 80bc 	bne.w	8014cee <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8014b76:	887a      	ldrh	r2, [r7, #2]
 8014b78:	88bb      	ldrh	r3, [r7, #4]
 8014b7a:	4619      	mov	r1, r3
 8014b7c:	2000      	movs	r0, #0
 8014b7e:	f000 f8d1 	bl	8014d24 <pbuf_alloc_reference>
 8014b82:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8014b84:	e0bd      	b.n	8014d02 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8014b86:	2300      	movs	r3, #0
 8014b88:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014b8e:	88bb      	ldrh	r3, [r7, #4]
 8014b90:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014b92:	200c      	movs	r0, #12
 8014b94:	f7ff fb9a 	bl	80142cc <memp_malloc>
 8014b98:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014b9a:	693b      	ldr	r3, [r7, #16]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d109      	bne.n	8014bb4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8014ba0:	f7ff ff76 	bl	8014a90 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8014ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d002      	beq.n	8014bb0 <pbuf_alloc+0x78>
            pbuf_free(p);
 8014baa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014bac:	f000 faa8 	bl	8015100 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	e0a7      	b.n	8014d04 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8014bb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014bb6:	3303      	adds	r3, #3
 8014bb8:	b29b      	uxth	r3, r3
 8014bba:	f023 0303 	bic.w	r3, r3, #3
 8014bbe:	b29b      	uxth	r3, r3
 8014bc0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8014bc4:	b29b      	uxth	r3, r3
 8014bc6:	8b7a      	ldrh	r2, [r7, #26]
 8014bc8:	4293      	cmp	r3, r2
 8014bca:	bf28      	it	cs
 8014bcc:	4613      	movcs	r3, r2
 8014bce:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014bd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014bd2:	3310      	adds	r3, #16
 8014bd4:	693a      	ldr	r2, [r7, #16]
 8014bd6:	4413      	add	r3, r2
 8014bd8:	3303      	adds	r3, #3
 8014bda:	f023 0303 	bic.w	r3, r3, #3
 8014bde:	4618      	mov	r0, r3
 8014be0:	89f9      	ldrh	r1, [r7, #14]
 8014be2:	8b7a      	ldrh	r2, [r7, #26]
 8014be4:	2300      	movs	r3, #0
 8014be6:	9301      	str	r3, [sp, #4]
 8014be8:	887b      	ldrh	r3, [r7, #2]
 8014bea:	9300      	str	r3, [sp, #0]
 8014bec:	460b      	mov	r3, r1
 8014bee:	4601      	mov	r1, r0
 8014bf0:	6938      	ldr	r0, [r7, #16]
 8014bf2:	f7ff ff77 	bl	8014ae4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8014bf6:	693b      	ldr	r3, [r7, #16]
 8014bf8:	685b      	ldr	r3, [r3, #4]
 8014bfa:	f003 0303 	and.w	r3, r3, #3
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d006      	beq.n	8014c10 <pbuf_alloc+0xd8>
 8014c02:	4b42      	ldr	r3, [pc, #264]	; (8014d0c <pbuf_alloc+0x1d4>)
 8014c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014c08:	4941      	ldr	r1, [pc, #260]	; (8014d10 <pbuf_alloc+0x1d8>)
 8014c0a:	4842      	ldr	r0, [pc, #264]	; (8014d14 <pbuf_alloc+0x1dc>)
 8014c0c:	f00a fcc8 	bl	801f5a0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014c10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c12:	3303      	adds	r3, #3
 8014c14:	f023 0303 	bic.w	r3, r3, #3
 8014c18:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8014c1c:	d106      	bne.n	8014c2c <pbuf_alloc+0xf4>
 8014c1e:	4b3b      	ldr	r3, [pc, #236]	; (8014d0c <pbuf_alloc+0x1d4>)
 8014c20:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014c24:	493c      	ldr	r1, [pc, #240]	; (8014d18 <pbuf_alloc+0x1e0>)
 8014c26:	483b      	ldr	r0, [pc, #236]	; (8014d14 <pbuf_alloc+0x1dc>)
 8014c28:	f00a fcba 	bl	801f5a0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d102      	bne.n	8014c38 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014c32:	693b      	ldr	r3, [r7, #16]
 8014c34:	627b      	str	r3, [r7, #36]	; 0x24
 8014c36:	e002      	b.n	8014c3e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014c38:	69fb      	ldr	r3, [r7, #28]
 8014c3a:	693a      	ldr	r2, [r7, #16]
 8014c3c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014c3e:	693b      	ldr	r3, [r7, #16]
 8014c40:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014c42:	8b7a      	ldrh	r2, [r7, #26]
 8014c44:	89fb      	ldrh	r3, [r7, #14]
 8014c46:	1ad3      	subs	r3, r2, r3
 8014c48:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8014c4e:	8b7b      	ldrh	r3, [r7, #26]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d19e      	bne.n	8014b92 <pbuf_alloc+0x5a>
      break;
 8014c54:	e055      	b.n	8014d02 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8014c56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c58:	3303      	adds	r3, #3
 8014c5a:	b29b      	uxth	r3, r3
 8014c5c:	f023 0303 	bic.w	r3, r3, #3
 8014c60:	b29a      	uxth	r2, r3
 8014c62:	88bb      	ldrh	r3, [r7, #4]
 8014c64:	3303      	adds	r3, #3
 8014c66:	b29b      	uxth	r3, r3
 8014c68:	f023 0303 	bic.w	r3, r3, #3
 8014c6c:	b29b      	uxth	r3, r3
 8014c6e:	4413      	add	r3, r2
 8014c70:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8014c72:	8b3b      	ldrh	r3, [r7, #24]
 8014c74:	3310      	adds	r3, #16
 8014c76:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014c78:	8b3a      	ldrh	r2, [r7, #24]
 8014c7a:	88bb      	ldrh	r3, [r7, #4]
 8014c7c:	3303      	adds	r3, #3
 8014c7e:	f023 0303 	bic.w	r3, r3, #3
 8014c82:	429a      	cmp	r2, r3
 8014c84:	d306      	bcc.n	8014c94 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014c86:	8afa      	ldrh	r2, [r7, #22]
 8014c88:	88bb      	ldrh	r3, [r7, #4]
 8014c8a:	3303      	adds	r3, #3
 8014c8c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014c90:	429a      	cmp	r2, r3
 8014c92:	d201      	bcs.n	8014c98 <pbuf_alloc+0x160>
        return NULL;
 8014c94:	2300      	movs	r3, #0
 8014c96:	e035      	b.n	8014d04 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014c98:	8afb      	ldrh	r3, [r7, #22]
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f7ff f972 	bl	8013f84 <mem_malloc>
 8014ca0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8014ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d101      	bne.n	8014cac <pbuf_alloc+0x174>
        return NULL;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	e02b      	b.n	8014d04 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014cac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014cae:	3310      	adds	r3, #16
 8014cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cb2:	4413      	add	r3, r2
 8014cb4:	3303      	adds	r3, #3
 8014cb6:	f023 0303 	bic.w	r3, r3, #3
 8014cba:	4618      	mov	r0, r3
 8014cbc:	88b9      	ldrh	r1, [r7, #4]
 8014cbe:	88ba      	ldrh	r2, [r7, #4]
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	9301      	str	r3, [sp, #4]
 8014cc4:	887b      	ldrh	r3, [r7, #2]
 8014cc6:	9300      	str	r3, [sp, #0]
 8014cc8:	460b      	mov	r3, r1
 8014cca:	4601      	mov	r1, r0
 8014ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014cce:	f7ff ff09 	bl	8014ae4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8014cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cd4:	685b      	ldr	r3, [r3, #4]
 8014cd6:	f003 0303 	and.w	r3, r3, #3
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d010      	beq.n	8014d00 <pbuf_alloc+0x1c8>
 8014cde:	4b0b      	ldr	r3, [pc, #44]	; (8014d0c <pbuf_alloc+0x1d4>)
 8014ce0:	f44f 7291 	mov.w	r2, #290	; 0x122
 8014ce4:	490d      	ldr	r1, [pc, #52]	; (8014d1c <pbuf_alloc+0x1e4>)
 8014ce6:	480b      	ldr	r0, [pc, #44]	; (8014d14 <pbuf_alloc+0x1dc>)
 8014ce8:	f00a fc5a 	bl	801f5a0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014cec:	e008      	b.n	8014d00 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014cee:	4b07      	ldr	r3, [pc, #28]	; (8014d0c <pbuf_alloc+0x1d4>)
 8014cf0:	f240 1227 	movw	r2, #295	; 0x127
 8014cf4:	490a      	ldr	r1, [pc, #40]	; (8014d20 <pbuf_alloc+0x1e8>)
 8014cf6:	4807      	ldr	r0, [pc, #28]	; (8014d14 <pbuf_alloc+0x1dc>)
 8014cf8:	f00a fc52 	bl	801f5a0 <iprintf>
      return NULL;
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	e001      	b.n	8014d04 <pbuf_alloc+0x1cc>
      break;
 8014d00:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8014d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	3728      	adds	r7, #40	; 0x28
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}
 8014d0c:	08021b84 	.word	0x08021b84
 8014d10:	08021bb4 	.word	0x08021bb4
 8014d14:	08021be4 	.word	0x08021be4
 8014d18:	08021c0c 	.word	0x08021c0c
 8014d1c:	08021c40 	.word	0x08021c40
 8014d20:	08021c6c 	.word	0x08021c6c

08014d24 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b086      	sub	sp, #24
 8014d28:	af02      	add	r7, sp, #8
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	460b      	mov	r3, r1
 8014d2e:	807b      	strh	r3, [r7, #2]
 8014d30:	4613      	mov	r3, r2
 8014d32:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014d34:	883b      	ldrh	r3, [r7, #0]
 8014d36:	2b41      	cmp	r3, #65	; 0x41
 8014d38:	d009      	beq.n	8014d4e <pbuf_alloc_reference+0x2a>
 8014d3a:	883b      	ldrh	r3, [r7, #0]
 8014d3c:	2b01      	cmp	r3, #1
 8014d3e:	d006      	beq.n	8014d4e <pbuf_alloc_reference+0x2a>
 8014d40:	4b0f      	ldr	r3, [pc, #60]	; (8014d80 <pbuf_alloc_reference+0x5c>)
 8014d42:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8014d46:	490f      	ldr	r1, [pc, #60]	; (8014d84 <pbuf_alloc_reference+0x60>)
 8014d48:	480f      	ldr	r0, [pc, #60]	; (8014d88 <pbuf_alloc_reference+0x64>)
 8014d4a:	f00a fc29 	bl	801f5a0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014d4e:	200b      	movs	r0, #11
 8014d50:	f7ff fabc 	bl	80142cc <memp_malloc>
 8014d54:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d101      	bne.n	8014d60 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	e00b      	b.n	8014d78 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014d60:	8879      	ldrh	r1, [r7, #2]
 8014d62:	887a      	ldrh	r2, [r7, #2]
 8014d64:	2300      	movs	r3, #0
 8014d66:	9301      	str	r3, [sp, #4]
 8014d68:	883b      	ldrh	r3, [r7, #0]
 8014d6a:	9300      	str	r3, [sp, #0]
 8014d6c:	460b      	mov	r3, r1
 8014d6e:	6879      	ldr	r1, [r7, #4]
 8014d70:	68f8      	ldr	r0, [r7, #12]
 8014d72:	f7ff feb7 	bl	8014ae4 <pbuf_init_alloced_pbuf>
  return p;
 8014d76:	68fb      	ldr	r3, [r7, #12]
}
 8014d78:	4618      	mov	r0, r3
 8014d7a:	3710      	adds	r7, #16
 8014d7c:	46bd      	mov	sp, r7
 8014d7e:	bd80      	pop	{r7, pc}
 8014d80:	08021b84 	.word	0x08021b84
 8014d84:	08021c88 	.word	0x08021c88
 8014d88:	08021be4 	.word	0x08021be4

08014d8c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b088      	sub	sp, #32
 8014d90:	af02      	add	r7, sp, #8
 8014d92:	607b      	str	r3, [r7, #4]
 8014d94:	4603      	mov	r3, r0
 8014d96:	73fb      	strb	r3, [r7, #15]
 8014d98:	460b      	mov	r3, r1
 8014d9a:	81bb      	strh	r3, [r7, #12]
 8014d9c:	4613      	mov	r3, r2
 8014d9e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014da0:	7bfb      	ldrb	r3, [r7, #15]
 8014da2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014da4:	8a7b      	ldrh	r3, [r7, #18]
 8014da6:	3303      	adds	r3, #3
 8014da8:	f023 0203 	bic.w	r2, r3, #3
 8014dac:	89bb      	ldrh	r3, [r7, #12]
 8014dae:	441a      	add	r2, r3
 8014db0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014db2:	429a      	cmp	r2, r3
 8014db4:	d901      	bls.n	8014dba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8014db6:	2300      	movs	r3, #0
 8014db8:	e018      	b.n	8014dec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014dba:	6a3b      	ldr	r3, [r7, #32]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d007      	beq.n	8014dd0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014dc0:	8a7b      	ldrh	r3, [r7, #18]
 8014dc2:	3303      	adds	r3, #3
 8014dc4:	f023 0303 	bic.w	r3, r3, #3
 8014dc8:	6a3a      	ldr	r2, [r7, #32]
 8014dca:	4413      	add	r3, r2
 8014dcc:	617b      	str	r3, [r7, #20]
 8014dce:	e001      	b.n	8014dd4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	89b9      	ldrh	r1, [r7, #12]
 8014dd8:	89ba      	ldrh	r2, [r7, #12]
 8014dda:	2302      	movs	r3, #2
 8014ddc:	9301      	str	r3, [sp, #4]
 8014dde:	897b      	ldrh	r3, [r7, #10]
 8014de0:	9300      	str	r3, [sp, #0]
 8014de2:	460b      	mov	r3, r1
 8014de4:	6979      	ldr	r1, [r7, #20]
 8014de6:	f7ff fe7d 	bl	8014ae4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014dea:	687b      	ldr	r3, [r7, #4]
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	3718      	adds	r7, #24
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b084      	sub	sp, #16
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
 8014dfc:	460b      	mov	r3, r1
 8014dfe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d106      	bne.n	8014e14 <pbuf_realloc+0x20>
 8014e06:	4b3a      	ldr	r3, [pc, #232]	; (8014ef0 <pbuf_realloc+0xfc>)
 8014e08:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8014e0c:	4939      	ldr	r1, [pc, #228]	; (8014ef4 <pbuf_realloc+0x100>)
 8014e0e:	483a      	ldr	r0, [pc, #232]	; (8014ef8 <pbuf_realloc+0x104>)
 8014e10:	f00a fbc6 	bl	801f5a0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	891b      	ldrh	r3, [r3, #8]
 8014e18:	887a      	ldrh	r2, [r7, #2]
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	d263      	bcs.n	8014ee6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	891a      	ldrh	r2, [r3, #8]
 8014e22:	887b      	ldrh	r3, [r7, #2]
 8014e24:	1ad3      	subs	r3, r2, r3
 8014e26:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014e28:	887b      	ldrh	r3, [r7, #2]
 8014e2a:	817b      	strh	r3, [r7, #10]
  q = p;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014e30:	e018      	b.n	8014e64 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	895b      	ldrh	r3, [r3, #10]
 8014e36:	897a      	ldrh	r2, [r7, #10]
 8014e38:	1ad3      	subs	r3, r2, r3
 8014e3a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	891a      	ldrh	r2, [r3, #8]
 8014e40:	893b      	ldrh	r3, [r7, #8]
 8014e42:	1ad3      	subs	r3, r2, r3
 8014e44:	b29a      	uxth	r2, r3
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d106      	bne.n	8014e64 <pbuf_realloc+0x70>
 8014e56:	4b26      	ldr	r3, [pc, #152]	; (8014ef0 <pbuf_realloc+0xfc>)
 8014e58:	f240 12af 	movw	r2, #431	; 0x1af
 8014e5c:	4927      	ldr	r1, [pc, #156]	; (8014efc <pbuf_realloc+0x108>)
 8014e5e:	4826      	ldr	r0, [pc, #152]	; (8014ef8 <pbuf_realloc+0x104>)
 8014e60:	f00a fb9e 	bl	801f5a0 <iprintf>
  while (rem_len > q->len) {
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	895b      	ldrh	r3, [r3, #10]
 8014e68:	897a      	ldrh	r2, [r7, #10]
 8014e6a:	429a      	cmp	r2, r3
 8014e6c:	d8e1      	bhi.n	8014e32 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	7b1b      	ldrb	r3, [r3, #12]
 8014e72:	f003 030f 	and.w	r3, r3, #15
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d121      	bne.n	8014ebe <pbuf_realloc+0xca>
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	895b      	ldrh	r3, [r3, #10]
 8014e7e:	897a      	ldrh	r2, [r7, #10]
 8014e80:	429a      	cmp	r2, r3
 8014e82:	d01c      	beq.n	8014ebe <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	7b5b      	ldrb	r3, [r3, #13]
 8014e88:	f003 0302 	and.w	r3, r3, #2
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d116      	bne.n	8014ebe <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	685a      	ldr	r2, [r3, #4]
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	1ad3      	subs	r3, r2, r3
 8014e98:	b29a      	uxth	r2, r3
 8014e9a:	897b      	ldrh	r3, [r7, #10]
 8014e9c:	4413      	add	r3, r2
 8014e9e:	b29b      	uxth	r3, r3
 8014ea0:	4619      	mov	r1, r3
 8014ea2:	68f8      	ldr	r0, [r7, #12]
 8014ea4:	f7fe ff64 	bl	8013d70 <mem_trim>
 8014ea8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d106      	bne.n	8014ebe <pbuf_realloc+0xca>
 8014eb0:	4b0f      	ldr	r3, [pc, #60]	; (8014ef0 <pbuf_realloc+0xfc>)
 8014eb2:	f240 12bd 	movw	r2, #445	; 0x1bd
 8014eb6:	4912      	ldr	r1, [pc, #72]	; (8014f00 <pbuf_realloc+0x10c>)
 8014eb8:	480f      	ldr	r0, [pc, #60]	; (8014ef8 <pbuf_realloc+0x104>)
 8014eba:	f00a fb71 	bl	801f5a0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	897a      	ldrh	r2, [r7, #10]
 8014ec2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	895a      	ldrh	r2, [r3, #10]
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d004      	beq.n	8014ede <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f000 f911 	bl	8015100 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	601a      	str	r2, [r3, #0]
 8014ee4:	e000      	b.n	8014ee8 <pbuf_realloc+0xf4>
    return;
 8014ee6:	bf00      	nop

}
 8014ee8:	3710      	adds	r7, #16
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}
 8014eee:	bf00      	nop
 8014ef0:	08021b84 	.word	0x08021b84
 8014ef4:	08021c9c 	.word	0x08021c9c
 8014ef8:	08021be4 	.word	0x08021be4
 8014efc:	08021cb4 	.word	0x08021cb4
 8014f00:	08021ccc 	.word	0x08021ccc

08014f04 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b086      	sub	sp, #24
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	60f8      	str	r0, [r7, #12]
 8014f0c:	60b9      	str	r1, [r7, #8]
 8014f0e:	4613      	mov	r3, r2
 8014f10:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d106      	bne.n	8014f26 <pbuf_add_header_impl+0x22>
 8014f18:	4b2b      	ldr	r3, [pc, #172]	; (8014fc8 <pbuf_add_header_impl+0xc4>)
 8014f1a:	f240 12df 	movw	r2, #479	; 0x1df
 8014f1e:	492b      	ldr	r1, [pc, #172]	; (8014fcc <pbuf_add_header_impl+0xc8>)
 8014f20:	482b      	ldr	r0, [pc, #172]	; (8014fd0 <pbuf_add_header_impl+0xcc>)
 8014f22:	f00a fb3d 	bl	801f5a0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d003      	beq.n	8014f34 <pbuf_add_header_impl+0x30>
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f32:	d301      	bcc.n	8014f38 <pbuf_add_header_impl+0x34>
    return 1;
 8014f34:	2301      	movs	r3, #1
 8014f36:	e043      	b.n	8014fc0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014f38:	68bb      	ldr	r3, [r7, #8]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d101      	bne.n	8014f42 <pbuf_add_header_impl+0x3e>
    return 0;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	e03e      	b.n	8014fc0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014f42:	68bb      	ldr	r3, [r7, #8]
 8014f44:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	891a      	ldrh	r2, [r3, #8]
 8014f4a:	8a7b      	ldrh	r3, [r7, #18]
 8014f4c:	4413      	add	r3, r2
 8014f4e:	b29b      	uxth	r3, r3
 8014f50:	8a7a      	ldrh	r2, [r7, #18]
 8014f52:	429a      	cmp	r2, r3
 8014f54:	d901      	bls.n	8014f5a <pbuf_add_header_impl+0x56>
    return 1;
 8014f56:	2301      	movs	r3, #1
 8014f58:	e032      	b.n	8014fc0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	7b1b      	ldrb	r3, [r3, #12]
 8014f5e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014f60:	8a3b      	ldrh	r3, [r7, #16]
 8014f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d00c      	beq.n	8014f84 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	685a      	ldr	r2, [r3, #4]
 8014f6e:	68bb      	ldr	r3, [r7, #8]
 8014f70:	425b      	negs	r3, r3
 8014f72:	4413      	add	r3, r2
 8014f74:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	3310      	adds	r3, #16
 8014f7a:	697a      	ldr	r2, [r7, #20]
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	d20d      	bcs.n	8014f9c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014f80:	2301      	movs	r3, #1
 8014f82:	e01d      	b.n	8014fc0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014f84:	79fb      	ldrb	r3, [r7, #7]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d006      	beq.n	8014f98 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	685a      	ldr	r2, [r3, #4]
 8014f8e:	68bb      	ldr	r3, [r7, #8]
 8014f90:	425b      	negs	r3, r3
 8014f92:	4413      	add	r3, r2
 8014f94:	617b      	str	r3, [r7, #20]
 8014f96:	e001      	b.n	8014f9c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014f98:	2301      	movs	r3, #1
 8014f9a:	e011      	b.n	8014fc0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	697a      	ldr	r2, [r7, #20]
 8014fa0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	895a      	ldrh	r2, [r3, #10]
 8014fa6:	8a7b      	ldrh	r3, [r7, #18]
 8014fa8:	4413      	add	r3, r2
 8014faa:	b29a      	uxth	r2, r3
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	891a      	ldrh	r2, [r3, #8]
 8014fb4:	8a7b      	ldrh	r3, [r7, #18]
 8014fb6:	4413      	add	r3, r2
 8014fb8:	b29a      	uxth	r2, r3
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	811a      	strh	r2, [r3, #8]


  return 0;
 8014fbe:	2300      	movs	r3, #0
}
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	3718      	adds	r7, #24
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}
 8014fc8:	08021b84 	.word	0x08021b84
 8014fcc:	08021ce8 	.word	0x08021ce8
 8014fd0:	08021be4 	.word	0x08021be4

08014fd4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b082      	sub	sp, #8
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
 8014fdc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014fde:	2200      	movs	r2, #0
 8014fe0:	6839      	ldr	r1, [r7, #0]
 8014fe2:	6878      	ldr	r0, [r7, #4]
 8014fe4:	f7ff ff8e 	bl	8014f04 <pbuf_add_header_impl>
 8014fe8:	4603      	mov	r3, r0
}
 8014fea:	4618      	mov	r0, r3
 8014fec:	3708      	adds	r7, #8
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	bd80      	pop	{r7, pc}
	...

08014ff4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b084      	sub	sp, #16
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d106      	bne.n	8015012 <pbuf_remove_header+0x1e>
 8015004:	4b20      	ldr	r3, [pc, #128]	; (8015088 <pbuf_remove_header+0x94>)
 8015006:	f240 224b 	movw	r2, #587	; 0x24b
 801500a:	4920      	ldr	r1, [pc, #128]	; (801508c <pbuf_remove_header+0x98>)
 801500c:	4820      	ldr	r0, [pc, #128]	; (8015090 <pbuf_remove_header+0x9c>)
 801500e:	f00a fac7 	bl	801f5a0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d003      	beq.n	8015020 <pbuf_remove_header+0x2c>
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801501e:	d301      	bcc.n	8015024 <pbuf_remove_header+0x30>
    return 1;
 8015020:	2301      	movs	r3, #1
 8015022:	e02c      	b.n	801507e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d101      	bne.n	801502e <pbuf_remove_header+0x3a>
    return 0;
 801502a:	2300      	movs	r3, #0
 801502c:	e027      	b.n	801507e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801502e:	683b      	ldr	r3, [r7, #0]
 8015030:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	895b      	ldrh	r3, [r3, #10]
 8015036:	89fa      	ldrh	r2, [r7, #14]
 8015038:	429a      	cmp	r2, r3
 801503a:	d908      	bls.n	801504e <pbuf_remove_header+0x5a>
 801503c:	4b12      	ldr	r3, [pc, #72]	; (8015088 <pbuf_remove_header+0x94>)
 801503e:	f240 2255 	movw	r2, #597	; 0x255
 8015042:	4914      	ldr	r1, [pc, #80]	; (8015094 <pbuf_remove_header+0xa0>)
 8015044:	4812      	ldr	r0, [pc, #72]	; (8015090 <pbuf_remove_header+0x9c>)
 8015046:	f00a faab 	bl	801f5a0 <iprintf>
 801504a:	2301      	movs	r3, #1
 801504c:	e017      	b.n	801507e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	685b      	ldr	r3, [r3, #4]
 8015052:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	685a      	ldr	r2, [r3, #4]
 8015058:	683b      	ldr	r3, [r7, #0]
 801505a:	441a      	add	r2, r3
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	895a      	ldrh	r2, [r3, #10]
 8015064:	89fb      	ldrh	r3, [r7, #14]
 8015066:	1ad3      	subs	r3, r2, r3
 8015068:	b29a      	uxth	r2, r3
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	891a      	ldrh	r2, [r3, #8]
 8015072:	89fb      	ldrh	r3, [r7, #14]
 8015074:	1ad3      	subs	r3, r2, r3
 8015076:	b29a      	uxth	r2, r3
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801507c:	2300      	movs	r3, #0
}
 801507e:	4618      	mov	r0, r3
 8015080:	3710      	adds	r7, #16
 8015082:	46bd      	mov	sp, r7
 8015084:	bd80      	pop	{r7, pc}
 8015086:	bf00      	nop
 8015088:	08021b84 	.word	0x08021b84
 801508c:	08021ce8 	.word	0x08021ce8
 8015090:	08021be4 	.word	0x08021be4
 8015094:	08021cf4 	.word	0x08021cf4

08015098 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b082      	sub	sp, #8
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
 80150a0:	460b      	mov	r3, r1
 80150a2:	807b      	strh	r3, [r7, #2]
 80150a4:	4613      	mov	r3, r2
 80150a6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80150a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	da08      	bge.n	80150c2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80150b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80150b4:	425b      	negs	r3, r3
 80150b6:	4619      	mov	r1, r3
 80150b8:	6878      	ldr	r0, [r7, #4]
 80150ba:	f7ff ff9b 	bl	8014ff4 <pbuf_remove_header>
 80150be:	4603      	mov	r3, r0
 80150c0:	e007      	b.n	80150d2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80150c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80150c6:	787a      	ldrb	r2, [r7, #1]
 80150c8:	4619      	mov	r1, r3
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f7ff ff1a 	bl	8014f04 <pbuf_add_header_impl>
 80150d0:	4603      	mov	r3, r0
  }
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	3708      	adds	r7, #8
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}

080150da <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80150da:	b580      	push	{r7, lr}
 80150dc:	b082      	sub	sp, #8
 80150de:	af00      	add	r7, sp, #0
 80150e0:	6078      	str	r0, [r7, #4]
 80150e2:	460b      	mov	r3, r1
 80150e4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80150e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80150ea:	2201      	movs	r2, #1
 80150ec:	4619      	mov	r1, r3
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f7ff ffd2 	bl	8015098 <pbuf_header_impl>
 80150f4:	4603      	mov	r3, r0
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	3708      	adds	r7, #8
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}
	...

08015100 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b088      	sub	sp, #32
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d10b      	bne.n	8015126 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d106      	bne.n	8015122 <pbuf_free+0x22>
 8015114:	4b3b      	ldr	r3, [pc, #236]	; (8015204 <pbuf_free+0x104>)
 8015116:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801511a:	493b      	ldr	r1, [pc, #236]	; (8015208 <pbuf_free+0x108>)
 801511c:	483b      	ldr	r0, [pc, #236]	; (801520c <pbuf_free+0x10c>)
 801511e:	f00a fa3f 	bl	801f5a0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015122:	2300      	movs	r3, #0
 8015124:	e069      	b.n	80151fa <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015126:	2300      	movs	r3, #0
 8015128:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801512a:	e062      	b.n	80151f2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801512c:	f009 ff8c 	bl	801f048 <sys_arch_protect>
 8015130:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	7b9b      	ldrb	r3, [r3, #14]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d106      	bne.n	8015148 <pbuf_free+0x48>
 801513a:	4b32      	ldr	r3, [pc, #200]	; (8015204 <pbuf_free+0x104>)
 801513c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015140:	4933      	ldr	r1, [pc, #204]	; (8015210 <pbuf_free+0x110>)
 8015142:	4832      	ldr	r0, [pc, #200]	; (801520c <pbuf_free+0x10c>)
 8015144:	f00a fa2c 	bl	801f5a0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	7b9b      	ldrb	r3, [r3, #14]
 801514c:	3b01      	subs	r3, #1
 801514e:	b2da      	uxtb	r2, r3
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	739a      	strb	r2, [r3, #14]
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	7b9b      	ldrb	r3, [r3, #14]
 8015158:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801515a:	69b8      	ldr	r0, [r7, #24]
 801515c:	f009 ff82 	bl	801f064 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015160:	7dfb      	ldrb	r3, [r7, #23]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d143      	bne.n	80151ee <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	7b1b      	ldrb	r3, [r3, #12]
 8015170:	f003 030f 	and.w	r3, r3, #15
 8015174:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	7b5b      	ldrb	r3, [r3, #13]
 801517a:	f003 0302 	and.w	r3, r3, #2
 801517e:	2b00      	cmp	r3, #0
 8015180:	d011      	beq.n	80151a6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015186:	68bb      	ldr	r3, [r7, #8]
 8015188:	691b      	ldr	r3, [r3, #16]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d106      	bne.n	801519c <pbuf_free+0x9c>
 801518e:	4b1d      	ldr	r3, [pc, #116]	; (8015204 <pbuf_free+0x104>)
 8015190:	f240 22ff 	movw	r2, #767	; 0x2ff
 8015194:	491f      	ldr	r1, [pc, #124]	; (8015214 <pbuf_free+0x114>)
 8015196:	481d      	ldr	r0, [pc, #116]	; (801520c <pbuf_free+0x10c>)
 8015198:	f00a fa02 	bl	801f5a0 <iprintf>
        pc->custom_free_function(p);
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	691b      	ldr	r3, [r3, #16]
 80151a0:	6878      	ldr	r0, [r7, #4]
 80151a2:	4798      	blx	r3
 80151a4:	e01d      	b.n	80151e2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80151a6:	7bfb      	ldrb	r3, [r7, #15]
 80151a8:	2b02      	cmp	r3, #2
 80151aa:	d104      	bne.n	80151b6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80151ac:	6879      	ldr	r1, [r7, #4]
 80151ae:	200c      	movs	r0, #12
 80151b0:	f7ff f902 	bl	80143b8 <memp_free>
 80151b4:	e015      	b.n	80151e2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80151b6:	7bfb      	ldrb	r3, [r7, #15]
 80151b8:	2b01      	cmp	r3, #1
 80151ba:	d104      	bne.n	80151c6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80151bc:	6879      	ldr	r1, [r7, #4]
 80151be:	200b      	movs	r0, #11
 80151c0:	f7ff f8fa 	bl	80143b8 <memp_free>
 80151c4:	e00d      	b.n	80151e2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80151c6:	7bfb      	ldrb	r3, [r7, #15]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d103      	bne.n	80151d4 <pbuf_free+0xd4>
          mem_free(p);
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f7fe fd3f 	bl	8013c50 <mem_free>
 80151d2:	e006      	b.n	80151e2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80151d4:	4b0b      	ldr	r3, [pc, #44]	; (8015204 <pbuf_free+0x104>)
 80151d6:	f240 320f 	movw	r2, #783	; 0x30f
 80151da:	490f      	ldr	r1, [pc, #60]	; (8015218 <pbuf_free+0x118>)
 80151dc:	480b      	ldr	r0, [pc, #44]	; (801520c <pbuf_free+0x10c>)
 80151de:	f00a f9df 	bl	801f5a0 <iprintf>
        }
      }
      count++;
 80151e2:	7ffb      	ldrb	r3, [r7, #31]
 80151e4:	3301      	adds	r3, #1
 80151e6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80151e8:	693b      	ldr	r3, [r7, #16]
 80151ea:	607b      	str	r3, [r7, #4]
 80151ec:	e001      	b.n	80151f2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80151ee:	2300      	movs	r3, #0
 80151f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d199      	bne.n	801512c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80151f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	3720      	adds	r7, #32
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd80      	pop	{r7, pc}
 8015202:	bf00      	nop
 8015204:	08021b84 	.word	0x08021b84
 8015208:	08021ce8 	.word	0x08021ce8
 801520c:	08021be4 	.word	0x08021be4
 8015210:	08021d14 	.word	0x08021d14
 8015214:	08021d2c 	.word	0x08021d2c
 8015218:	08021d50 	.word	0x08021d50

0801521c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801521c:	b480      	push	{r7}
 801521e:	b085      	sub	sp, #20
 8015220:	af00      	add	r7, sp, #0
 8015222:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8015224:	2300      	movs	r3, #0
 8015226:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8015228:	e005      	b.n	8015236 <pbuf_clen+0x1a>
    ++len;
 801522a:	89fb      	ldrh	r3, [r7, #14]
 801522c:	3301      	adds	r3, #1
 801522e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d1f6      	bne.n	801522a <pbuf_clen+0xe>
  }
  return len;
 801523c:	89fb      	ldrh	r3, [r7, #14]
}
 801523e:	4618      	mov	r0, r3
 8015240:	3714      	adds	r7, #20
 8015242:	46bd      	mov	sp, r7
 8015244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015248:	4770      	bx	lr
	...

0801524c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b084      	sub	sp, #16
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d016      	beq.n	8015288 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801525a:	f009 fef5 	bl	801f048 <sys_arch_protect>
 801525e:	60f8      	str	r0, [r7, #12]
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	7b9b      	ldrb	r3, [r3, #14]
 8015264:	3301      	adds	r3, #1
 8015266:	b2da      	uxtb	r2, r3
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	739a      	strb	r2, [r3, #14]
 801526c:	68f8      	ldr	r0, [r7, #12]
 801526e:	f009 fef9 	bl	801f064 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	7b9b      	ldrb	r3, [r3, #14]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d106      	bne.n	8015288 <pbuf_ref+0x3c>
 801527a:	4b05      	ldr	r3, [pc, #20]	; (8015290 <pbuf_ref+0x44>)
 801527c:	f240 3242 	movw	r2, #834	; 0x342
 8015280:	4904      	ldr	r1, [pc, #16]	; (8015294 <pbuf_ref+0x48>)
 8015282:	4805      	ldr	r0, [pc, #20]	; (8015298 <pbuf_ref+0x4c>)
 8015284:	f00a f98c 	bl	801f5a0 <iprintf>
  }
}
 8015288:	bf00      	nop
 801528a:	3710      	adds	r7, #16
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}
 8015290:	08021b84 	.word	0x08021b84
 8015294:	08021d64 	.word	0x08021d64
 8015298:	08021be4 	.word	0x08021be4

0801529c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b084      	sub	sp, #16
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
 80152a4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d002      	beq.n	80152b2 <pbuf_cat+0x16>
 80152ac:	683b      	ldr	r3, [r7, #0]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d107      	bne.n	80152c2 <pbuf_cat+0x26>
 80152b2:	4b20      	ldr	r3, [pc, #128]	; (8015334 <pbuf_cat+0x98>)
 80152b4:	f240 3259 	movw	r2, #857	; 0x359
 80152b8:	491f      	ldr	r1, [pc, #124]	; (8015338 <pbuf_cat+0x9c>)
 80152ba:	4820      	ldr	r0, [pc, #128]	; (801533c <pbuf_cat+0xa0>)
 80152bc:	f00a f970 	bl	801f5a0 <iprintf>
 80152c0:	e034      	b.n	801532c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	60fb      	str	r3, [r7, #12]
 80152c6:	e00a      	b.n	80152de <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	891a      	ldrh	r2, [r3, #8]
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	891b      	ldrh	r3, [r3, #8]
 80152d0:	4413      	add	r3, r2
 80152d2:	b29a      	uxth	r2, r3
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	60fb      	str	r3, [r7, #12]
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d1f0      	bne.n	80152c8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	891a      	ldrh	r2, [r3, #8]
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	895b      	ldrh	r3, [r3, #10]
 80152ee:	429a      	cmp	r2, r3
 80152f0:	d006      	beq.n	8015300 <pbuf_cat+0x64>
 80152f2:	4b10      	ldr	r3, [pc, #64]	; (8015334 <pbuf_cat+0x98>)
 80152f4:	f240 3262 	movw	r2, #866	; 0x362
 80152f8:	4911      	ldr	r1, [pc, #68]	; (8015340 <pbuf_cat+0xa4>)
 80152fa:	4810      	ldr	r0, [pc, #64]	; (801533c <pbuf_cat+0xa0>)
 80152fc:	f00a f950 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d006      	beq.n	8015316 <pbuf_cat+0x7a>
 8015308:	4b0a      	ldr	r3, [pc, #40]	; (8015334 <pbuf_cat+0x98>)
 801530a:	f240 3263 	movw	r2, #867	; 0x363
 801530e:	490d      	ldr	r1, [pc, #52]	; (8015344 <pbuf_cat+0xa8>)
 8015310:	480a      	ldr	r0, [pc, #40]	; (801533c <pbuf_cat+0xa0>)
 8015312:	f00a f945 	bl	801f5a0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	891a      	ldrh	r2, [r3, #8]
 801531a:	683b      	ldr	r3, [r7, #0]
 801531c:	891b      	ldrh	r3, [r3, #8]
 801531e:	4413      	add	r3, r2
 8015320:	b29a      	uxth	r2, r3
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	683a      	ldr	r2, [r7, #0]
 801532a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801532c:	3710      	adds	r7, #16
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}
 8015332:	bf00      	nop
 8015334:	08021b84 	.word	0x08021b84
 8015338:	08021d78 	.word	0x08021d78
 801533c:	08021be4 	.word	0x08021be4
 8015340:	08021db0 	.word	0x08021db0
 8015344:	08021de0 	.word	0x08021de0

08015348 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b082      	sub	sp, #8
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
 8015350:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8015352:	6839      	ldr	r1, [r7, #0]
 8015354:	6878      	ldr	r0, [r7, #4]
 8015356:	f7ff ffa1 	bl	801529c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801535a:	6838      	ldr	r0, [r7, #0]
 801535c:	f7ff ff76 	bl	801524c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8015360:	bf00      	nop
 8015362:	3708      	adds	r7, #8
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}

08015368 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b086      	sub	sp, #24
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
 8015370:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8015372:	2300      	movs	r3, #0
 8015374:	617b      	str	r3, [r7, #20]
 8015376:	2300      	movs	r3, #0
 8015378:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d008      	beq.n	8015392 <pbuf_copy+0x2a>
 8015380:	683b      	ldr	r3, [r7, #0]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d005      	beq.n	8015392 <pbuf_copy+0x2a>
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	891a      	ldrh	r2, [r3, #8]
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	891b      	ldrh	r3, [r3, #8]
 801538e:	429a      	cmp	r2, r3
 8015390:	d209      	bcs.n	80153a6 <pbuf_copy+0x3e>
 8015392:	4b57      	ldr	r3, [pc, #348]	; (80154f0 <pbuf_copy+0x188>)
 8015394:	f240 32c9 	movw	r2, #969	; 0x3c9
 8015398:	4956      	ldr	r1, [pc, #344]	; (80154f4 <pbuf_copy+0x18c>)
 801539a:	4857      	ldr	r0, [pc, #348]	; (80154f8 <pbuf_copy+0x190>)
 801539c:	f00a f900 	bl	801f5a0 <iprintf>
 80153a0:	f06f 030f 	mvn.w	r3, #15
 80153a4:	e09f      	b.n	80154e6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	895b      	ldrh	r3, [r3, #10]
 80153aa:	461a      	mov	r2, r3
 80153ac:	697b      	ldr	r3, [r7, #20]
 80153ae:	1ad2      	subs	r2, r2, r3
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	895b      	ldrh	r3, [r3, #10]
 80153b4:	4619      	mov	r1, r3
 80153b6:	693b      	ldr	r3, [r7, #16]
 80153b8:	1acb      	subs	r3, r1, r3
 80153ba:	429a      	cmp	r2, r3
 80153bc:	d306      	bcc.n	80153cc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80153be:	683b      	ldr	r3, [r7, #0]
 80153c0:	895b      	ldrh	r3, [r3, #10]
 80153c2:	461a      	mov	r2, r3
 80153c4:	693b      	ldr	r3, [r7, #16]
 80153c6:	1ad3      	subs	r3, r2, r3
 80153c8:	60fb      	str	r3, [r7, #12]
 80153ca:	e005      	b.n	80153d8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	895b      	ldrh	r3, [r3, #10]
 80153d0:	461a      	mov	r2, r3
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	1ad3      	subs	r3, r2, r3
 80153d6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	685a      	ldr	r2, [r3, #4]
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	18d0      	adds	r0, r2, r3
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	685a      	ldr	r2, [r3, #4]
 80153e4:	693b      	ldr	r3, [r7, #16]
 80153e6:	4413      	add	r3, r2
 80153e8:	68fa      	ldr	r2, [r7, #12]
 80153ea:	4619      	mov	r1, r3
 80153ec:	f009 ffc8 	bl	801f380 <memcpy>
    offset_to += len;
 80153f0:	697a      	ldr	r2, [r7, #20]
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	4413      	add	r3, r2
 80153f6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80153f8:	693a      	ldr	r2, [r7, #16]
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	4413      	add	r3, r2
 80153fe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	895b      	ldrh	r3, [r3, #10]
 8015404:	461a      	mov	r2, r3
 8015406:	697b      	ldr	r3, [r7, #20]
 8015408:	4293      	cmp	r3, r2
 801540a:	d906      	bls.n	801541a <pbuf_copy+0xb2>
 801540c:	4b38      	ldr	r3, [pc, #224]	; (80154f0 <pbuf_copy+0x188>)
 801540e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8015412:	493a      	ldr	r1, [pc, #232]	; (80154fc <pbuf_copy+0x194>)
 8015414:	4838      	ldr	r0, [pc, #224]	; (80154f8 <pbuf_copy+0x190>)
 8015416:	f00a f8c3 	bl	801f5a0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	895b      	ldrh	r3, [r3, #10]
 801541e:	461a      	mov	r2, r3
 8015420:	693b      	ldr	r3, [r7, #16]
 8015422:	4293      	cmp	r3, r2
 8015424:	d906      	bls.n	8015434 <pbuf_copy+0xcc>
 8015426:	4b32      	ldr	r3, [pc, #200]	; (80154f0 <pbuf_copy+0x188>)
 8015428:	f240 32da 	movw	r2, #986	; 0x3da
 801542c:	4934      	ldr	r1, [pc, #208]	; (8015500 <pbuf_copy+0x198>)
 801542e:	4832      	ldr	r0, [pc, #200]	; (80154f8 <pbuf_copy+0x190>)
 8015430:	f00a f8b6 	bl	801f5a0 <iprintf>
    if (offset_from >= p_from->len) {
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	895b      	ldrh	r3, [r3, #10]
 8015438:	461a      	mov	r2, r3
 801543a:	693b      	ldr	r3, [r7, #16]
 801543c:	4293      	cmp	r3, r2
 801543e:	d304      	bcc.n	801544a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015440:	2300      	movs	r3, #0
 8015442:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	895b      	ldrh	r3, [r3, #10]
 801544e:	461a      	mov	r2, r3
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	4293      	cmp	r3, r2
 8015454:	d114      	bne.n	8015480 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015456:	2300      	movs	r3, #0
 8015458:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d10c      	bne.n	8015480 <pbuf_copy+0x118>
 8015466:	683b      	ldr	r3, [r7, #0]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d009      	beq.n	8015480 <pbuf_copy+0x118>
 801546c:	4b20      	ldr	r3, [pc, #128]	; (80154f0 <pbuf_copy+0x188>)
 801546e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8015472:	4924      	ldr	r1, [pc, #144]	; (8015504 <pbuf_copy+0x19c>)
 8015474:	4820      	ldr	r0, [pc, #128]	; (80154f8 <pbuf_copy+0x190>)
 8015476:	f00a f893 	bl	801f5a0 <iprintf>
 801547a:	f06f 030f 	mvn.w	r3, #15
 801547e:	e032      	b.n	80154e6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d013      	beq.n	80154ae <pbuf_copy+0x146>
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	895a      	ldrh	r2, [r3, #10]
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	891b      	ldrh	r3, [r3, #8]
 801548e:	429a      	cmp	r2, r3
 8015490:	d10d      	bne.n	80154ae <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015492:	683b      	ldr	r3, [r7, #0]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d009      	beq.n	80154ae <pbuf_copy+0x146>
 801549a:	4b15      	ldr	r3, [pc, #84]	; (80154f0 <pbuf_copy+0x188>)
 801549c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80154a0:	4919      	ldr	r1, [pc, #100]	; (8015508 <pbuf_copy+0x1a0>)
 80154a2:	4815      	ldr	r0, [pc, #84]	; (80154f8 <pbuf_copy+0x190>)
 80154a4:	f00a f87c 	bl	801f5a0 <iprintf>
 80154a8:	f06f 0305 	mvn.w	r3, #5
 80154ac:	e01b      	b.n	80154e6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d013      	beq.n	80154dc <pbuf_copy+0x174>
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	895a      	ldrh	r2, [r3, #10]
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	891b      	ldrh	r3, [r3, #8]
 80154bc:	429a      	cmp	r2, r3
 80154be:	d10d      	bne.n	80154dc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d009      	beq.n	80154dc <pbuf_copy+0x174>
 80154c8:	4b09      	ldr	r3, [pc, #36]	; (80154f0 <pbuf_copy+0x188>)
 80154ca:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80154ce:	490e      	ldr	r1, [pc, #56]	; (8015508 <pbuf_copy+0x1a0>)
 80154d0:	4809      	ldr	r0, [pc, #36]	; (80154f8 <pbuf_copy+0x190>)
 80154d2:	f00a f865 	bl	801f5a0 <iprintf>
 80154d6:	f06f 0305 	mvn.w	r3, #5
 80154da:	e004      	b.n	80154e6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	f47f af61 	bne.w	80153a6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80154e4:	2300      	movs	r3, #0
}
 80154e6:	4618      	mov	r0, r3
 80154e8:	3718      	adds	r7, #24
 80154ea:	46bd      	mov	sp, r7
 80154ec:	bd80      	pop	{r7, pc}
 80154ee:	bf00      	nop
 80154f0:	08021b84 	.word	0x08021b84
 80154f4:	08021e2c 	.word	0x08021e2c
 80154f8:	08021be4 	.word	0x08021be4
 80154fc:	08021e5c 	.word	0x08021e5c
 8015500:	08021e74 	.word	0x08021e74
 8015504:	08021e90 	.word	0x08021e90
 8015508:	08021ea0 	.word	0x08021ea0

0801550c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b088      	sub	sp, #32
 8015510:	af00      	add	r7, sp, #0
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	60b9      	str	r1, [r7, #8]
 8015516:	4611      	mov	r1, r2
 8015518:	461a      	mov	r2, r3
 801551a:	460b      	mov	r3, r1
 801551c:	80fb      	strh	r3, [r7, #6]
 801551e:	4613      	mov	r3, r2
 8015520:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8015522:	2300      	movs	r3, #0
 8015524:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8015526:	2300      	movs	r3, #0
 8015528:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d108      	bne.n	8015542 <pbuf_copy_partial+0x36>
 8015530:	4b2b      	ldr	r3, [pc, #172]	; (80155e0 <pbuf_copy_partial+0xd4>)
 8015532:	f240 420a 	movw	r2, #1034	; 0x40a
 8015536:	492b      	ldr	r1, [pc, #172]	; (80155e4 <pbuf_copy_partial+0xd8>)
 8015538:	482b      	ldr	r0, [pc, #172]	; (80155e8 <pbuf_copy_partial+0xdc>)
 801553a:	f00a f831 	bl	801f5a0 <iprintf>
 801553e:	2300      	movs	r3, #0
 8015540:	e04a      	b.n	80155d8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8015542:	68bb      	ldr	r3, [r7, #8]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d108      	bne.n	801555a <pbuf_copy_partial+0x4e>
 8015548:	4b25      	ldr	r3, [pc, #148]	; (80155e0 <pbuf_copy_partial+0xd4>)
 801554a:	f240 420b 	movw	r2, #1035	; 0x40b
 801554e:	4927      	ldr	r1, [pc, #156]	; (80155ec <pbuf_copy_partial+0xe0>)
 8015550:	4825      	ldr	r0, [pc, #148]	; (80155e8 <pbuf_copy_partial+0xdc>)
 8015552:	f00a f825 	bl	801f5a0 <iprintf>
 8015556:	2300      	movs	r3, #0
 8015558:	e03e      	b.n	80155d8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	61fb      	str	r3, [r7, #28]
 801555e:	e034      	b.n	80155ca <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8015560:	88bb      	ldrh	r3, [r7, #4]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d00a      	beq.n	801557c <pbuf_copy_partial+0x70>
 8015566:	69fb      	ldr	r3, [r7, #28]
 8015568:	895b      	ldrh	r3, [r3, #10]
 801556a:	88ba      	ldrh	r2, [r7, #4]
 801556c:	429a      	cmp	r2, r3
 801556e:	d305      	bcc.n	801557c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8015570:	69fb      	ldr	r3, [r7, #28]
 8015572:	895b      	ldrh	r3, [r3, #10]
 8015574:	88ba      	ldrh	r2, [r7, #4]
 8015576:	1ad3      	subs	r3, r2, r3
 8015578:	80bb      	strh	r3, [r7, #4]
 801557a:	e023      	b.n	80155c4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801557c:	69fb      	ldr	r3, [r7, #28]
 801557e:	895a      	ldrh	r2, [r3, #10]
 8015580:	88bb      	ldrh	r3, [r7, #4]
 8015582:	1ad3      	subs	r3, r2, r3
 8015584:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8015586:	8b3a      	ldrh	r2, [r7, #24]
 8015588:	88fb      	ldrh	r3, [r7, #6]
 801558a:	429a      	cmp	r2, r3
 801558c:	d901      	bls.n	8015592 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801558e:	88fb      	ldrh	r3, [r7, #6]
 8015590:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8015592:	8b7b      	ldrh	r3, [r7, #26]
 8015594:	68ba      	ldr	r2, [r7, #8]
 8015596:	18d0      	adds	r0, r2, r3
 8015598:	69fb      	ldr	r3, [r7, #28]
 801559a:	685a      	ldr	r2, [r3, #4]
 801559c:	88bb      	ldrh	r3, [r7, #4]
 801559e:	4413      	add	r3, r2
 80155a0:	8b3a      	ldrh	r2, [r7, #24]
 80155a2:	4619      	mov	r1, r3
 80155a4:	f009 feec 	bl	801f380 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80155a8:	8afa      	ldrh	r2, [r7, #22]
 80155aa:	8b3b      	ldrh	r3, [r7, #24]
 80155ac:	4413      	add	r3, r2
 80155ae:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80155b0:	8b7a      	ldrh	r2, [r7, #26]
 80155b2:	8b3b      	ldrh	r3, [r7, #24]
 80155b4:	4413      	add	r3, r2
 80155b6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80155b8:	88fa      	ldrh	r2, [r7, #6]
 80155ba:	8b3b      	ldrh	r3, [r7, #24]
 80155bc:	1ad3      	subs	r3, r2, r3
 80155be:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80155c0:	2300      	movs	r3, #0
 80155c2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80155c4:	69fb      	ldr	r3, [r7, #28]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	61fb      	str	r3, [r7, #28]
 80155ca:	88fb      	ldrh	r3, [r7, #6]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d002      	beq.n	80155d6 <pbuf_copy_partial+0xca>
 80155d0:	69fb      	ldr	r3, [r7, #28]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d1c4      	bne.n	8015560 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80155d6:	8afb      	ldrh	r3, [r7, #22]
}
 80155d8:	4618      	mov	r0, r3
 80155da:	3720      	adds	r7, #32
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	08021b84 	.word	0x08021b84
 80155e4:	08021ecc 	.word	0x08021ecc
 80155e8:	08021be4 	.word	0x08021be4
 80155ec:	08021eec 	.word	0x08021eec

080155f0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b084      	sub	sp, #16
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	4603      	mov	r3, r0
 80155f8:	603a      	str	r2, [r7, #0]
 80155fa:	71fb      	strb	r3, [r7, #7]
 80155fc:	460b      	mov	r3, r1
 80155fe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	8919      	ldrh	r1, [r3, #8]
 8015604:	88ba      	ldrh	r2, [r7, #4]
 8015606:	79fb      	ldrb	r3, [r7, #7]
 8015608:	4618      	mov	r0, r3
 801560a:	f7ff fa95 	bl	8014b38 <pbuf_alloc>
 801560e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d101      	bne.n	801561a <pbuf_clone+0x2a>
    return NULL;
 8015616:	2300      	movs	r3, #0
 8015618:	e011      	b.n	801563e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801561a:	6839      	ldr	r1, [r7, #0]
 801561c:	68f8      	ldr	r0, [r7, #12]
 801561e:	f7ff fea3 	bl	8015368 <pbuf_copy>
 8015622:	4603      	mov	r3, r0
 8015624:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8015626:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d006      	beq.n	801563c <pbuf_clone+0x4c>
 801562e:	4b06      	ldr	r3, [pc, #24]	; (8015648 <pbuf_clone+0x58>)
 8015630:	f240 5224 	movw	r2, #1316	; 0x524
 8015634:	4905      	ldr	r1, [pc, #20]	; (801564c <pbuf_clone+0x5c>)
 8015636:	4806      	ldr	r0, [pc, #24]	; (8015650 <pbuf_clone+0x60>)
 8015638:	f009 ffb2 	bl	801f5a0 <iprintf>
  return q;
 801563c:	68fb      	ldr	r3, [r7, #12]
}
 801563e:	4618      	mov	r0, r3
 8015640:	3710      	adds	r7, #16
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}
 8015646:	bf00      	nop
 8015648:	08021b84 	.word	0x08021b84
 801564c:	08021ff8 	.word	0x08021ff8
 8015650:	08021be4 	.word	0x08021be4

08015654 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015658:	f009 ffba 	bl	801f5d0 <rand>
 801565c:	4603      	mov	r3, r0
 801565e:	b29b      	uxth	r3, r3
 8015660:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015664:	b29b      	uxth	r3, r3
 8015666:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801566a:	b29a      	uxth	r2, r3
 801566c:	4b01      	ldr	r3, [pc, #4]	; (8015674 <tcp_init+0x20>)
 801566e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015670:	bf00      	nop
 8015672:	bd80      	pop	{r7, pc}
 8015674:	20000028 	.word	0x20000028

08015678 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b082      	sub	sp, #8
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	7d1b      	ldrb	r3, [r3, #20]
 8015684:	2b01      	cmp	r3, #1
 8015686:	d105      	bne.n	8015694 <tcp_free+0x1c>
 8015688:	4b06      	ldr	r3, [pc, #24]	; (80156a4 <tcp_free+0x2c>)
 801568a:	22d4      	movs	r2, #212	; 0xd4
 801568c:	4906      	ldr	r1, [pc, #24]	; (80156a8 <tcp_free+0x30>)
 801568e:	4807      	ldr	r0, [pc, #28]	; (80156ac <tcp_free+0x34>)
 8015690:	f009 ff86 	bl	801f5a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8015694:	6879      	ldr	r1, [r7, #4]
 8015696:	2001      	movs	r0, #1
 8015698:	f7fe fe8e 	bl	80143b8 <memp_free>
}
 801569c:	bf00      	nop
 801569e:	3708      	adds	r7, #8
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}
 80156a4:	08022084 	.word	0x08022084
 80156a8:	080220b4 	.word	0x080220b4
 80156ac:	080220c8 	.word	0x080220c8

080156b0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b082      	sub	sp, #8
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	7d1b      	ldrb	r3, [r3, #20]
 80156bc:	2b01      	cmp	r3, #1
 80156be:	d105      	bne.n	80156cc <tcp_free_listen+0x1c>
 80156c0:	4b06      	ldr	r3, [pc, #24]	; (80156dc <tcp_free_listen+0x2c>)
 80156c2:	22df      	movs	r2, #223	; 0xdf
 80156c4:	4906      	ldr	r1, [pc, #24]	; (80156e0 <tcp_free_listen+0x30>)
 80156c6:	4807      	ldr	r0, [pc, #28]	; (80156e4 <tcp_free_listen+0x34>)
 80156c8:	f009 ff6a 	bl	801f5a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80156cc:	6879      	ldr	r1, [r7, #4]
 80156ce:	2002      	movs	r0, #2
 80156d0:	f7fe fe72 	bl	80143b8 <memp_free>
}
 80156d4:	bf00      	nop
 80156d6:	3708      	adds	r7, #8
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}
 80156dc:	08022084 	.word	0x08022084
 80156e0:	080220f0 	.word	0x080220f0
 80156e4:	080220c8 	.word	0x080220c8

080156e8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80156ec:	f001 f9be 	bl	8016a6c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80156f0:	4b07      	ldr	r3, [pc, #28]	; (8015710 <tcp_tmr+0x28>)
 80156f2:	781b      	ldrb	r3, [r3, #0]
 80156f4:	3301      	adds	r3, #1
 80156f6:	b2da      	uxtb	r2, r3
 80156f8:	4b05      	ldr	r3, [pc, #20]	; (8015710 <tcp_tmr+0x28>)
 80156fa:	701a      	strb	r2, [r3, #0]
 80156fc:	4b04      	ldr	r3, [pc, #16]	; (8015710 <tcp_tmr+0x28>)
 80156fe:	781b      	ldrb	r3, [r3, #0]
 8015700:	f003 0301 	and.w	r3, r3, #1
 8015704:	2b00      	cmp	r3, #0
 8015706:	d001      	beq.n	801570c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8015708:	f000 fe70 	bl	80163ec <tcp_slowtmr>
  }
}
 801570c:	bf00      	nop
 801570e:	bd80      	pop	{r7, pc}
 8015710:	2000bffd 	.word	0x2000bffd

08015714 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b084      	sub	sp, #16
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
 801571c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801571e:	683b      	ldr	r3, [r7, #0]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d105      	bne.n	8015730 <tcp_remove_listener+0x1c>
 8015724:	4b0d      	ldr	r3, [pc, #52]	; (801575c <tcp_remove_listener+0x48>)
 8015726:	22ff      	movs	r2, #255	; 0xff
 8015728:	490d      	ldr	r1, [pc, #52]	; (8015760 <tcp_remove_listener+0x4c>)
 801572a:	480e      	ldr	r0, [pc, #56]	; (8015764 <tcp_remove_listener+0x50>)
 801572c:	f009 ff38 	bl	801f5a0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	60fb      	str	r3, [r7, #12]
 8015734:	e00a      	b.n	801574c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801573a:	683a      	ldr	r2, [r7, #0]
 801573c:	429a      	cmp	r2, r3
 801573e:	d102      	bne.n	8015746 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	2200      	movs	r2, #0
 8015744:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	68db      	ldr	r3, [r3, #12]
 801574a:	60fb      	str	r3, [r7, #12]
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d1f1      	bne.n	8015736 <tcp_remove_listener+0x22>
    }
  }
}
 8015752:	bf00      	nop
 8015754:	bf00      	nop
 8015756:	3710      	adds	r7, #16
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}
 801575c:	08022084 	.word	0x08022084
 8015760:	0802210c 	.word	0x0802210c
 8015764:	080220c8 	.word	0x080220c8

08015768 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b084      	sub	sp, #16
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d106      	bne.n	8015784 <tcp_listen_closed+0x1c>
 8015776:	4b14      	ldr	r3, [pc, #80]	; (80157c8 <tcp_listen_closed+0x60>)
 8015778:	f240 1211 	movw	r2, #273	; 0x111
 801577c:	4913      	ldr	r1, [pc, #76]	; (80157cc <tcp_listen_closed+0x64>)
 801577e:	4814      	ldr	r0, [pc, #80]	; (80157d0 <tcp_listen_closed+0x68>)
 8015780:	f009 ff0e 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	7d1b      	ldrb	r3, [r3, #20]
 8015788:	2b01      	cmp	r3, #1
 801578a:	d006      	beq.n	801579a <tcp_listen_closed+0x32>
 801578c:	4b0e      	ldr	r3, [pc, #56]	; (80157c8 <tcp_listen_closed+0x60>)
 801578e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8015792:	4910      	ldr	r1, [pc, #64]	; (80157d4 <tcp_listen_closed+0x6c>)
 8015794:	480e      	ldr	r0, [pc, #56]	; (80157d0 <tcp_listen_closed+0x68>)
 8015796:	f009 ff03 	bl	801f5a0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801579a:	2301      	movs	r3, #1
 801579c:	60fb      	str	r3, [r7, #12]
 801579e:	e00b      	b.n	80157b8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80157a0:	4a0d      	ldr	r2, [pc, #52]	; (80157d8 <tcp_listen_closed+0x70>)
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	6879      	ldr	r1, [r7, #4]
 80157ac:	4618      	mov	r0, r3
 80157ae:	f7ff ffb1 	bl	8015714 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	3301      	adds	r3, #1
 80157b6:	60fb      	str	r3, [r7, #12]
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	2b03      	cmp	r3, #3
 80157bc:	d9f0      	bls.n	80157a0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80157be:	bf00      	nop
 80157c0:	bf00      	nop
 80157c2:	3710      	adds	r7, #16
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}
 80157c8:	08022084 	.word	0x08022084
 80157cc:	08022134 	.word	0x08022134
 80157d0:	080220c8 	.word	0x080220c8
 80157d4:	08022140 	.word	0x08022140
 80157d8:	080240b8 	.word	0x080240b8

080157dc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80157dc:	b5b0      	push	{r4, r5, r7, lr}
 80157de:	b088      	sub	sp, #32
 80157e0:	af04      	add	r7, sp, #16
 80157e2:	6078      	str	r0, [r7, #4]
 80157e4:	460b      	mov	r3, r1
 80157e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d106      	bne.n	80157fc <tcp_close_shutdown+0x20>
 80157ee:	4b63      	ldr	r3, [pc, #396]	; (801597c <tcp_close_shutdown+0x1a0>)
 80157f0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80157f4:	4962      	ldr	r1, [pc, #392]	; (8015980 <tcp_close_shutdown+0x1a4>)
 80157f6:	4863      	ldr	r0, [pc, #396]	; (8015984 <tcp_close_shutdown+0x1a8>)
 80157f8:	f009 fed2 	bl	801f5a0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80157fc:	78fb      	ldrb	r3, [r7, #3]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d066      	beq.n	80158d0 <tcp_close_shutdown+0xf4>
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	7d1b      	ldrb	r3, [r3, #20]
 8015806:	2b04      	cmp	r3, #4
 8015808:	d003      	beq.n	8015812 <tcp_close_shutdown+0x36>
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	7d1b      	ldrb	r3, [r3, #20]
 801580e:	2b07      	cmp	r3, #7
 8015810:	d15e      	bne.n	80158d0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015816:	2b00      	cmp	r3, #0
 8015818:	d104      	bne.n	8015824 <tcp_close_shutdown+0x48>
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801581e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015822:	d055      	beq.n	80158d0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	8b5b      	ldrh	r3, [r3, #26]
 8015828:	f003 0310 	and.w	r3, r3, #16
 801582c:	2b00      	cmp	r3, #0
 801582e:	d106      	bne.n	801583e <tcp_close_shutdown+0x62>
 8015830:	4b52      	ldr	r3, [pc, #328]	; (801597c <tcp_close_shutdown+0x1a0>)
 8015832:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8015836:	4954      	ldr	r1, [pc, #336]	; (8015988 <tcp_close_shutdown+0x1ac>)
 8015838:	4852      	ldr	r0, [pc, #328]	; (8015984 <tcp_close_shutdown+0x1a8>)
 801583a:	f009 feb1 	bl	801f5a0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015846:	687d      	ldr	r5, [r7, #4]
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	3304      	adds	r3, #4
 801584c:	687a      	ldr	r2, [r7, #4]
 801584e:	8ad2      	ldrh	r2, [r2, #22]
 8015850:	6879      	ldr	r1, [r7, #4]
 8015852:	8b09      	ldrh	r1, [r1, #24]
 8015854:	9102      	str	r1, [sp, #8]
 8015856:	9201      	str	r2, [sp, #4]
 8015858:	9300      	str	r3, [sp, #0]
 801585a:	462b      	mov	r3, r5
 801585c:	4622      	mov	r2, r4
 801585e:	4601      	mov	r1, r0
 8015860:	6878      	ldr	r0, [r7, #4]
 8015862:	f005 fed3 	bl	801b60c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8015866:	6878      	ldr	r0, [r7, #4]
 8015868:	f001 fcb0 	bl	80171cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801586c:	4b47      	ldr	r3, [pc, #284]	; (801598c <tcp_close_shutdown+0x1b0>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	687a      	ldr	r2, [r7, #4]
 8015872:	429a      	cmp	r2, r3
 8015874:	d105      	bne.n	8015882 <tcp_close_shutdown+0xa6>
 8015876:	4b45      	ldr	r3, [pc, #276]	; (801598c <tcp_close_shutdown+0x1b0>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	68db      	ldr	r3, [r3, #12]
 801587c:	4a43      	ldr	r2, [pc, #268]	; (801598c <tcp_close_shutdown+0x1b0>)
 801587e:	6013      	str	r3, [r2, #0]
 8015880:	e013      	b.n	80158aa <tcp_close_shutdown+0xce>
 8015882:	4b42      	ldr	r3, [pc, #264]	; (801598c <tcp_close_shutdown+0x1b0>)
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	60fb      	str	r3, [r7, #12]
 8015888:	e00c      	b.n	80158a4 <tcp_close_shutdown+0xc8>
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	68db      	ldr	r3, [r3, #12]
 801588e:	687a      	ldr	r2, [r7, #4]
 8015890:	429a      	cmp	r2, r3
 8015892:	d104      	bne.n	801589e <tcp_close_shutdown+0xc2>
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	68da      	ldr	r2, [r3, #12]
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	60da      	str	r2, [r3, #12]
 801589c:	e005      	b.n	80158aa <tcp_close_shutdown+0xce>
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	68db      	ldr	r3, [r3, #12]
 80158a2:	60fb      	str	r3, [r7, #12]
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d1ef      	bne.n	801588a <tcp_close_shutdown+0xae>
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	2200      	movs	r2, #0
 80158ae:	60da      	str	r2, [r3, #12]
 80158b0:	4b37      	ldr	r3, [pc, #220]	; (8015990 <tcp_close_shutdown+0x1b4>)
 80158b2:	2201      	movs	r2, #1
 80158b4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80158b6:	4b37      	ldr	r3, [pc, #220]	; (8015994 <tcp_close_shutdown+0x1b8>)
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	687a      	ldr	r2, [r7, #4]
 80158bc:	429a      	cmp	r2, r3
 80158be:	d102      	bne.n	80158c6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80158c0:	f004 f948 	bl	8019b54 <tcp_trigger_input_pcb_close>
 80158c4:	e002      	b.n	80158cc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80158c6:	6878      	ldr	r0, [r7, #4]
 80158c8:	f7ff fed6 	bl	8015678 <tcp_free>
      }
      return ERR_OK;
 80158cc:	2300      	movs	r3, #0
 80158ce:	e050      	b.n	8015972 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	7d1b      	ldrb	r3, [r3, #20]
 80158d4:	2b02      	cmp	r3, #2
 80158d6:	d03b      	beq.n	8015950 <tcp_close_shutdown+0x174>
 80158d8:	2b02      	cmp	r3, #2
 80158da:	dc44      	bgt.n	8015966 <tcp_close_shutdown+0x18a>
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d002      	beq.n	80158e6 <tcp_close_shutdown+0x10a>
 80158e0:	2b01      	cmp	r3, #1
 80158e2:	d02a      	beq.n	801593a <tcp_close_shutdown+0x15e>
 80158e4:	e03f      	b.n	8015966 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	8adb      	ldrh	r3, [r3, #22]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d021      	beq.n	8015932 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80158ee:	4b2a      	ldr	r3, [pc, #168]	; (8015998 <tcp_close_shutdown+0x1bc>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	687a      	ldr	r2, [r7, #4]
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d105      	bne.n	8015904 <tcp_close_shutdown+0x128>
 80158f8:	4b27      	ldr	r3, [pc, #156]	; (8015998 <tcp_close_shutdown+0x1bc>)
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	68db      	ldr	r3, [r3, #12]
 80158fe:	4a26      	ldr	r2, [pc, #152]	; (8015998 <tcp_close_shutdown+0x1bc>)
 8015900:	6013      	str	r3, [r2, #0]
 8015902:	e013      	b.n	801592c <tcp_close_shutdown+0x150>
 8015904:	4b24      	ldr	r3, [pc, #144]	; (8015998 <tcp_close_shutdown+0x1bc>)
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	60bb      	str	r3, [r7, #8]
 801590a:	e00c      	b.n	8015926 <tcp_close_shutdown+0x14a>
 801590c:	68bb      	ldr	r3, [r7, #8]
 801590e:	68db      	ldr	r3, [r3, #12]
 8015910:	687a      	ldr	r2, [r7, #4]
 8015912:	429a      	cmp	r2, r3
 8015914:	d104      	bne.n	8015920 <tcp_close_shutdown+0x144>
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	68da      	ldr	r2, [r3, #12]
 801591a:	68bb      	ldr	r3, [r7, #8]
 801591c:	60da      	str	r2, [r3, #12]
 801591e:	e005      	b.n	801592c <tcp_close_shutdown+0x150>
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	68db      	ldr	r3, [r3, #12]
 8015924:	60bb      	str	r3, [r7, #8]
 8015926:	68bb      	ldr	r3, [r7, #8]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d1ef      	bne.n	801590c <tcp_close_shutdown+0x130>
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	2200      	movs	r2, #0
 8015930:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8015932:	6878      	ldr	r0, [r7, #4]
 8015934:	f7ff fea0 	bl	8015678 <tcp_free>
      break;
 8015938:	e01a      	b.n	8015970 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801593a:	6878      	ldr	r0, [r7, #4]
 801593c:	f7ff ff14 	bl	8015768 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015940:	6879      	ldr	r1, [r7, #4]
 8015942:	4816      	ldr	r0, [pc, #88]	; (801599c <tcp_close_shutdown+0x1c0>)
 8015944:	f001 fc92 	bl	801726c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	f7ff feb1 	bl	80156b0 <tcp_free_listen>
      break;
 801594e:	e00f      	b.n	8015970 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015950:	6879      	ldr	r1, [r7, #4]
 8015952:	480e      	ldr	r0, [pc, #56]	; (801598c <tcp_close_shutdown+0x1b0>)
 8015954:	f001 fc8a 	bl	801726c <tcp_pcb_remove>
 8015958:	4b0d      	ldr	r3, [pc, #52]	; (8015990 <tcp_close_shutdown+0x1b4>)
 801595a:	2201      	movs	r2, #1
 801595c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f7ff fe8a 	bl	8015678 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8015964:	e004      	b.n	8015970 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8015966:	6878      	ldr	r0, [r7, #4]
 8015968:	f000 f81a 	bl	80159a0 <tcp_close_shutdown_fin>
 801596c:	4603      	mov	r3, r0
 801596e:	e000      	b.n	8015972 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8015970:	2300      	movs	r3, #0
}
 8015972:	4618      	mov	r0, r3
 8015974:	3710      	adds	r7, #16
 8015976:	46bd      	mov	sp, r7
 8015978:	bdb0      	pop	{r4, r5, r7, pc}
 801597a:	bf00      	nop
 801597c:	08022084 	.word	0x08022084
 8015980:	08022158 	.word	0x08022158
 8015984:	080220c8 	.word	0x080220c8
 8015988:	08022178 	.word	0x08022178
 801598c:	2000bff4 	.word	0x2000bff4
 8015990:	2000bffc 	.word	0x2000bffc
 8015994:	2000c034 	.word	0x2000c034
 8015998:	2000bfec 	.word	0x2000bfec
 801599c:	2000bff0 	.word	0x2000bff0

080159a0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b084      	sub	sp, #16
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d106      	bne.n	80159bc <tcp_close_shutdown_fin+0x1c>
 80159ae:	4b2e      	ldr	r3, [pc, #184]	; (8015a68 <tcp_close_shutdown_fin+0xc8>)
 80159b0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80159b4:	492d      	ldr	r1, [pc, #180]	; (8015a6c <tcp_close_shutdown_fin+0xcc>)
 80159b6:	482e      	ldr	r0, [pc, #184]	; (8015a70 <tcp_close_shutdown_fin+0xd0>)
 80159b8:	f009 fdf2 	bl	801f5a0 <iprintf>

  switch (pcb->state) {
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	7d1b      	ldrb	r3, [r3, #20]
 80159c0:	2b07      	cmp	r3, #7
 80159c2:	d020      	beq.n	8015a06 <tcp_close_shutdown_fin+0x66>
 80159c4:	2b07      	cmp	r3, #7
 80159c6:	dc2b      	bgt.n	8015a20 <tcp_close_shutdown_fin+0x80>
 80159c8:	2b03      	cmp	r3, #3
 80159ca:	d002      	beq.n	80159d2 <tcp_close_shutdown_fin+0x32>
 80159cc:	2b04      	cmp	r3, #4
 80159ce:	d00d      	beq.n	80159ec <tcp_close_shutdown_fin+0x4c>
 80159d0:	e026      	b.n	8015a20 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80159d2:	6878      	ldr	r0, [r7, #4]
 80159d4:	f004 ff28 	bl	801a828 <tcp_send_fin>
 80159d8:	4603      	mov	r3, r0
 80159da:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80159dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d11f      	bne.n	8015a24 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	2205      	movs	r2, #5
 80159e8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80159ea:	e01b      	b.n	8015a24 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f004 ff1b 	bl	801a828 <tcp_send_fin>
 80159f2:	4603      	mov	r3, r0
 80159f4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80159f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d114      	bne.n	8015a28 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	2205      	movs	r2, #5
 8015a02:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015a04:	e010      	b.n	8015a28 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8015a06:	6878      	ldr	r0, [r7, #4]
 8015a08:	f004 ff0e 	bl	801a828 <tcp_send_fin>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d109      	bne.n	8015a2c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2209      	movs	r2, #9
 8015a1c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015a1e:	e005      	b.n	8015a2c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015a20:	2300      	movs	r3, #0
 8015a22:	e01c      	b.n	8015a5e <tcp_close_shutdown_fin+0xbe>
      break;
 8015a24:	bf00      	nop
 8015a26:	e002      	b.n	8015a2e <tcp_close_shutdown_fin+0x8e>
      break;
 8015a28:	bf00      	nop
 8015a2a:	e000      	b.n	8015a2e <tcp_close_shutdown_fin+0x8e>
      break;
 8015a2c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d103      	bne.n	8015a3e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	f005 f834 	bl	801aaa4 <tcp_output>
 8015a3c:	e00d      	b.n	8015a5a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8015a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a46:	d108      	bne.n	8015a5a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	8b5b      	ldrh	r3, [r3, #26]
 8015a4c:	f043 0308 	orr.w	r3, r3, #8
 8015a50:	b29a      	uxth	r2, r3
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8015a56:	2300      	movs	r3, #0
 8015a58:	e001      	b.n	8015a5e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8015a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3710      	adds	r7, #16
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}
 8015a66:	bf00      	nop
 8015a68:	08022084 	.word	0x08022084
 8015a6c:	08022134 	.word	0x08022134
 8015a70:	080220c8 	.word	0x080220c8

08015a74 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b082      	sub	sp, #8
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d109      	bne.n	8015a96 <tcp_close+0x22>
 8015a82:	4b0f      	ldr	r3, [pc, #60]	; (8015ac0 <tcp_close+0x4c>)
 8015a84:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8015a88:	490e      	ldr	r1, [pc, #56]	; (8015ac4 <tcp_close+0x50>)
 8015a8a:	480f      	ldr	r0, [pc, #60]	; (8015ac8 <tcp_close+0x54>)
 8015a8c:	f009 fd88 	bl	801f5a0 <iprintf>
 8015a90:	f06f 030f 	mvn.w	r3, #15
 8015a94:	e00f      	b.n	8015ab6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	7d1b      	ldrb	r3, [r3, #20]
 8015a9a:	2b01      	cmp	r3, #1
 8015a9c:	d006      	beq.n	8015aac <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	8b5b      	ldrh	r3, [r3, #26]
 8015aa2:	f043 0310 	orr.w	r3, r3, #16
 8015aa6:	b29a      	uxth	r2, r3
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015aac:	2101      	movs	r1, #1
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f7ff fe94 	bl	80157dc <tcp_close_shutdown>
 8015ab4:	4603      	mov	r3, r0
}
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3708      	adds	r7, #8
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}
 8015abe:	bf00      	nop
 8015ac0:	08022084 	.word	0x08022084
 8015ac4:	08022194 	.word	0x08022194
 8015ac8:	080220c8 	.word	0x080220c8

08015acc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b084      	sub	sp, #16
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	60f8      	str	r0, [r7, #12]
 8015ad4:	60b9      	str	r1, [r7, #8]
 8015ad6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d109      	bne.n	8015af2 <tcp_shutdown+0x26>
 8015ade:	4b26      	ldr	r3, [pc, #152]	; (8015b78 <tcp_shutdown+0xac>)
 8015ae0:	f240 2207 	movw	r2, #519	; 0x207
 8015ae4:	4925      	ldr	r1, [pc, #148]	; (8015b7c <tcp_shutdown+0xb0>)
 8015ae6:	4826      	ldr	r0, [pc, #152]	; (8015b80 <tcp_shutdown+0xb4>)
 8015ae8:	f009 fd5a 	bl	801f5a0 <iprintf>
 8015aec:	f06f 030f 	mvn.w	r3, #15
 8015af0:	e03d      	b.n	8015b6e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	7d1b      	ldrb	r3, [r3, #20]
 8015af6:	2b01      	cmp	r3, #1
 8015af8:	d102      	bne.n	8015b00 <tcp_shutdown+0x34>
    return ERR_CONN;
 8015afa:	f06f 030a 	mvn.w	r3, #10
 8015afe:	e036      	b.n	8015b6e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015b00:	68bb      	ldr	r3, [r7, #8]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d01b      	beq.n	8015b3e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	8b5b      	ldrh	r3, [r3, #26]
 8015b0a:	f043 0310 	orr.w	r3, r3, #16
 8015b0e:	b29a      	uxth	r2, r3
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d005      	beq.n	8015b26 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8015b1a:	2101      	movs	r1, #1
 8015b1c:	68f8      	ldr	r0, [r7, #12]
 8015b1e:	f7ff fe5d 	bl	80157dc <tcp_close_shutdown>
 8015b22:	4603      	mov	r3, r0
 8015b24:	e023      	b.n	8015b6e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d007      	beq.n	8015b3e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015b32:	4618      	mov	r0, r3
 8015b34:	f7ff fae4 	bl	8015100 <pbuf_free>
      pcb->refused_data = NULL;
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d013      	beq.n	8015b6c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	7d1b      	ldrb	r3, [r3, #20]
 8015b48:	2b04      	cmp	r3, #4
 8015b4a:	dc02      	bgt.n	8015b52 <tcp_shutdown+0x86>
 8015b4c:	2b03      	cmp	r3, #3
 8015b4e:	da02      	bge.n	8015b56 <tcp_shutdown+0x8a>
 8015b50:	e009      	b.n	8015b66 <tcp_shutdown+0x9a>
 8015b52:	2b07      	cmp	r3, #7
 8015b54:	d107      	bne.n	8015b66 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	b2db      	uxtb	r3, r3
 8015b5a:	4619      	mov	r1, r3
 8015b5c:	68f8      	ldr	r0, [r7, #12]
 8015b5e:	f7ff fe3d 	bl	80157dc <tcp_close_shutdown>
 8015b62:	4603      	mov	r3, r0
 8015b64:	e003      	b.n	8015b6e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8015b66:	f06f 030a 	mvn.w	r3, #10
 8015b6a:	e000      	b.n	8015b6e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8015b6c:	2300      	movs	r3, #0
}
 8015b6e:	4618      	mov	r0, r3
 8015b70:	3710      	adds	r7, #16
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bd80      	pop	{r7, pc}
 8015b76:	bf00      	nop
 8015b78:	08022084 	.word	0x08022084
 8015b7c:	080221ac 	.word	0x080221ac
 8015b80:	080220c8 	.word	0x080220c8

08015b84 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b08e      	sub	sp, #56	; 0x38
 8015b88:	af04      	add	r7, sp, #16
 8015b8a:	6078      	str	r0, [r7, #4]
 8015b8c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d107      	bne.n	8015ba4 <tcp_abandon+0x20>
 8015b94:	4b52      	ldr	r3, [pc, #328]	; (8015ce0 <tcp_abandon+0x15c>)
 8015b96:	f240 223d 	movw	r2, #573	; 0x23d
 8015b9a:	4952      	ldr	r1, [pc, #328]	; (8015ce4 <tcp_abandon+0x160>)
 8015b9c:	4852      	ldr	r0, [pc, #328]	; (8015ce8 <tcp_abandon+0x164>)
 8015b9e:	f009 fcff 	bl	801f5a0 <iprintf>
 8015ba2:	e099      	b.n	8015cd8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	7d1b      	ldrb	r3, [r3, #20]
 8015ba8:	2b01      	cmp	r3, #1
 8015baa:	d106      	bne.n	8015bba <tcp_abandon+0x36>
 8015bac:	4b4c      	ldr	r3, [pc, #304]	; (8015ce0 <tcp_abandon+0x15c>)
 8015bae:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015bb2:	494e      	ldr	r1, [pc, #312]	; (8015cec <tcp_abandon+0x168>)
 8015bb4:	484c      	ldr	r0, [pc, #304]	; (8015ce8 <tcp_abandon+0x164>)
 8015bb6:	f009 fcf3 	bl	801f5a0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	7d1b      	ldrb	r3, [r3, #20]
 8015bbe:	2b0a      	cmp	r3, #10
 8015bc0:	d107      	bne.n	8015bd2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8015bc2:	6879      	ldr	r1, [r7, #4]
 8015bc4:	484a      	ldr	r0, [pc, #296]	; (8015cf0 <tcp_abandon+0x16c>)
 8015bc6:	f001 fb51 	bl	801726c <tcp_pcb_remove>
    tcp_free(pcb);
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f7ff fd54 	bl	8015678 <tcp_free>
 8015bd0:	e082      	b.n	8015cd8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015bde:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015be4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015bec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	691b      	ldr	r3, [r3, #16]
 8015bf2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	7d1b      	ldrb	r3, [r3, #20]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d126      	bne.n	8015c4a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	8adb      	ldrh	r3, [r3, #22]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d02e      	beq.n	8015c62 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015c04:	4b3b      	ldr	r3, [pc, #236]	; (8015cf4 <tcp_abandon+0x170>)
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	687a      	ldr	r2, [r7, #4]
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d105      	bne.n	8015c1a <tcp_abandon+0x96>
 8015c0e:	4b39      	ldr	r3, [pc, #228]	; (8015cf4 <tcp_abandon+0x170>)
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	68db      	ldr	r3, [r3, #12]
 8015c14:	4a37      	ldr	r2, [pc, #220]	; (8015cf4 <tcp_abandon+0x170>)
 8015c16:	6013      	str	r3, [r2, #0]
 8015c18:	e013      	b.n	8015c42 <tcp_abandon+0xbe>
 8015c1a:	4b36      	ldr	r3, [pc, #216]	; (8015cf4 <tcp_abandon+0x170>)
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	61fb      	str	r3, [r7, #28]
 8015c20:	e00c      	b.n	8015c3c <tcp_abandon+0xb8>
 8015c22:	69fb      	ldr	r3, [r7, #28]
 8015c24:	68db      	ldr	r3, [r3, #12]
 8015c26:	687a      	ldr	r2, [r7, #4]
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d104      	bne.n	8015c36 <tcp_abandon+0xb2>
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	68da      	ldr	r2, [r3, #12]
 8015c30:	69fb      	ldr	r3, [r7, #28]
 8015c32:	60da      	str	r2, [r3, #12]
 8015c34:	e005      	b.n	8015c42 <tcp_abandon+0xbe>
 8015c36:	69fb      	ldr	r3, [r7, #28]
 8015c38:	68db      	ldr	r3, [r3, #12]
 8015c3a:	61fb      	str	r3, [r7, #28]
 8015c3c:	69fb      	ldr	r3, [r7, #28]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d1ef      	bne.n	8015c22 <tcp_abandon+0x9e>
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	2200      	movs	r2, #0
 8015c46:	60da      	str	r2, [r3, #12]
 8015c48:	e00b      	b.n	8015c62 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	8adb      	ldrh	r3, [r3, #22]
 8015c52:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015c54:	6879      	ldr	r1, [r7, #4]
 8015c56:	4828      	ldr	r0, [pc, #160]	; (8015cf8 <tcp_abandon+0x174>)
 8015c58:	f001 fb08 	bl	801726c <tcp_pcb_remove>
 8015c5c:	4b27      	ldr	r3, [pc, #156]	; (8015cfc <tcp_abandon+0x178>)
 8015c5e:	2201      	movs	r2, #1
 8015c60:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d004      	beq.n	8015c74 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f000 ffdc 	bl	8016c2c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d004      	beq.n	8015c86 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c80:	4618      	mov	r0, r3
 8015c82:	f000 ffd3 	bl	8016c2c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d004      	beq.n	8015c98 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c92:	4618      	mov	r0, r3
 8015c94:	f000 ffca 	bl	8016c2c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8015c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d00e      	beq.n	8015cbc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8015c9e:	6879      	ldr	r1, [r7, #4]
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	3304      	adds	r3, #4
 8015ca4:	687a      	ldr	r2, [r7, #4]
 8015ca6:	8b12      	ldrh	r2, [r2, #24]
 8015ca8:	9202      	str	r2, [sp, #8]
 8015caa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015cac:	9201      	str	r2, [sp, #4]
 8015cae:	9300      	str	r3, [sp, #0]
 8015cb0:	460b      	mov	r3, r1
 8015cb2:	697a      	ldr	r2, [r7, #20]
 8015cb4:	69b9      	ldr	r1, [r7, #24]
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f005 fca8 	bl	801b60c <tcp_rst>
    }
    last_state = pcb->state;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	7d1b      	ldrb	r3, [r3, #20]
 8015cc0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8015cc2:	6878      	ldr	r0, [r7, #4]
 8015cc4:	f7ff fcd8 	bl	8015678 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015cc8:	693b      	ldr	r3, [r7, #16]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d004      	beq.n	8015cd8 <tcp_abandon+0x154>
 8015cce:	693b      	ldr	r3, [r7, #16]
 8015cd0:	f06f 010c 	mvn.w	r1, #12
 8015cd4:	68f8      	ldr	r0, [r7, #12]
 8015cd6:	4798      	blx	r3
  }
}
 8015cd8:	3728      	adds	r7, #40	; 0x28
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	bd80      	pop	{r7, pc}
 8015cde:	bf00      	nop
 8015ce0:	08022084 	.word	0x08022084
 8015ce4:	080221c8 	.word	0x080221c8
 8015ce8:	080220c8 	.word	0x080220c8
 8015cec:	080221e4 	.word	0x080221e4
 8015cf0:	2000bff8 	.word	0x2000bff8
 8015cf4:	2000bfec 	.word	0x2000bfec
 8015cf8:	2000bff4 	.word	0x2000bff4
 8015cfc:	2000bffc 	.word	0x2000bffc

08015d00 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b082      	sub	sp, #8
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015d08:	2101      	movs	r1, #1
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	f7ff ff3a 	bl	8015b84 <tcp_abandon>
}
 8015d10:	bf00      	nop
 8015d12:	3708      	adds	r7, #8
 8015d14:	46bd      	mov	sp, r7
 8015d16:	bd80      	pop	{r7, pc}

08015d18 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b088      	sub	sp, #32
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	60f8      	str	r0, [r7, #12]
 8015d20:	60b9      	str	r1, [r7, #8]
 8015d22:	4613      	mov	r3, r2
 8015d24:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8015d26:	2304      	movs	r3, #4
 8015d28:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015d2a:	68bb      	ldr	r3, [r7, #8]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d101      	bne.n	8015d34 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015d30:	4b3e      	ldr	r3, [pc, #248]	; (8015e2c <tcp_bind+0x114>)
 8015d32:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d109      	bne.n	8015d4e <tcp_bind+0x36>
 8015d3a:	4b3d      	ldr	r3, [pc, #244]	; (8015e30 <tcp_bind+0x118>)
 8015d3c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8015d40:	493c      	ldr	r1, [pc, #240]	; (8015e34 <tcp_bind+0x11c>)
 8015d42:	483d      	ldr	r0, [pc, #244]	; (8015e38 <tcp_bind+0x120>)
 8015d44:	f009 fc2c 	bl	801f5a0 <iprintf>
 8015d48:	f06f 030f 	mvn.w	r3, #15
 8015d4c:	e06a      	b.n	8015e24 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	7d1b      	ldrb	r3, [r3, #20]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d009      	beq.n	8015d6a <tcp_bind+0x52>
 8015d56:	4b36      	ldr	r3, [pc, #216]	; (8015e30 <tcp_bind+0x118>)
 8015d58:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015d5c:	4937      	ldr	r1, [pc, #220]	; (8015e3c <tcp_bind+0x124>)
 8015d5e:	4836      	ldr	r0, [pc, #216]	; (8015e38 <tcp_bind+0x120>)
 8015d60:	f009 fc1e 	bl	801f5a0 <iprintf>
 8015d64:	f06f 0305 	mvn.w	r3, #5
 8015d68:	e05c      	b.n	8015e24 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8015d6a:	88fb      	ldrh	r3, [r7, #6]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d109      	bne.n	8015d84 <tcp_bind+0x6c>
    port = tcp_new_port();
 8015d70:	f000 f9de 	bl	8016130 <tcp_new_port>
 8015d74:	4603      	mov	r3, r0
 8015d76:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015d78:	88fb      	ldrh	r3, [r7, #6]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d135      	bne.n	8015dea <tcp_bind+0xd2>
      return ERR_BUF;
 8015d7e:	f06f 0301 	mvn.w	r3, #1
 8015d82:	e04f      	b.n	8015e24 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8015d84:	2300      	movs	r3, #0
 8015d86:	61fb      	str	r3, [r7, #28]
 8015d88:	e02b      	b.n	8015de2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015d8a:	4a2d      	ldr	r2, [pc, #180]	; (8015e40 <tcp_bind+0x128>)
 8015d8c:	69fb      	ldr	r3, [r7, #28]
 8015d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	61bb      	str	r3, [r7, #24]
 8015d96:	e01e      	b.n	8015dd6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8015d98:	69bb      	ldr	r3, [r7, #24]
 8015d9a:	8adb      	ldrh	r3, [r3, #22]
 8015d9c:	88fa      	ldrh	r2, [r7, #6]
 8015d9e:	429a      	cmp	r2, r3
 8015da0:	d116      	bne.n	8015dd0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8015da2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d010      	beq.n	8015dca <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015da8:	69bb      	ldr	r3, [r7, #24]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d00c      	beq.n	8015dca <tcp_bind+0xb2>
 8015db0:	68bb      	ldr	r3, [r7, #8]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d009      	beq.n	8015dca <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8015db6:	68bb      	ldr	r3, [r7, #8]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d005      	beq.n	8015dca <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8015dbe:	69bb      	ldr	r3, [r7, #24]
 8015dc0:	681a      	ldr	r2, [r3, #0]
 8015dc2:	68bb      	ldr	r3, [r7, #8]
 8015dc4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d102      	bne.n	8015dd0 <tcp_bind+0xb8>
              return ERR_USE;
 8015dca:	f06f 0307 	mvn.w	r3, #7
 8015dce:	e029      	b.n	8015e24 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015dd0:	69bb      	ldr	r3, [r7, #24]
 8015dd2:	68db      	ldr	r3, [r3, #12]
 8015dd4:	61bb      	str	r3, [r7, #24]
 8015dd6:	69bb      	ldr	r3, [r7, #24]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d1dd      	bne.n	8015d98 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015ddc:	69fb      	ldr	r3, [r7, #28]
 8015dde:	3301      	adds	r3, #1
 8015de0:	61fb      	str	r3, [r7, #28]
 8015de2:	69fa      	ldr	r2, [r7, #28]
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	429a      	cmp	r2, r3
 8015de8:	dbcf      	blt.n	8015d8a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8015dea:	68bb      	ldr	r3, [r7, #8]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d00c      	beq.n	8015e0a <tcp_bind+0xf2>
 8015df0:	68bb      	ldr	r3, [r7, #8]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d008      	beq.n	8015e0a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015df8:	68bb      	ldr	r3, [r7, #8]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d002      	beq.n	8015e04 <tcp_bind+0xec>
 8015dfe:	68bb      	ldr	r3, [r7, #8]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	e000      	b.n	8015e06 <tcp_bind+0xee>
 8015e04:	2300      	movs	r3, #0
 8015e06:	68fa      	ldr	r2, [r7, #12]
 8015e08:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	88fa      	ldrh	r2, [r7, #6]
 8015e0e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015e10:	4b0c      	ldr	r3, [pc, #48]	; (8015e44 <tcp_bind+0x12c>)
 8015e12:	681a      	ldr	r2, [r3, #0]
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	60da      	str	r2, [r3, #12]
 8015e18:	4a0a      	ldr	r2, [pc, #40]	; (8015e44 <tcp_bind+0x12c>)
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	6013      	str	r3, [r2, #0]
 8015e1e:	f005 fdb7 	bl	801b990 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015e22:	2300      	movs	r3, #0
}
 8015e24:	4618      	mov	r0, r3
 8015e26:	3720      	adds	r7, #32
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	080240e0 	.word	0x080240e0
 8015e30:	08022084 	.word	0x08022084
 8015e34:	08022218 	.word	0x08022218
 8015e38:	080220c8 	.word	0x080220c8
 8015e3c:	08022230 	.word	0x08022230
 8015e40:	080240b8 	.word	0x080240b8
 8015e44:	2000bfec 	.word	0x2000bfec

08015e48 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b084      	sub	sp, #16
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	60f8      	str	r0, [r7, #12]
 8015e50:	60b9      	str	r1, [r7, #8]
 8015e52:	4613      	mov	r3, r2
 8015e54:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8015e56:	68bb      	ldr	r3, [r7, #8]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d106      	bne.n	8015e6a <tcp_accept_null+0x22>
 8015e5c:	4b07      	ldr	r3, [pc, #28]	; (8015e7c <tcp_accept_null+0x34>)
 8015e5e:	f240 320f 	movw	r2, #783	; 0x30f
 8015e62:	4907      	ldr	r1, [pc, #28]	; (8015e80 <tcp_accept_null+0x38>)
 8015e64:	4807      	ldr	r0, [pc, #28]	; (8015e84 <tcp_accept_null+0x3c>)
 8015e66:	f009 fb9b 	bl	801f5a0 <iprintf>

  tcp_abort(pcb);
 8015e6a:	68b8      	ldr	r0, [r7, #8]
 8015e6c:	f7ff ff48 	bl	8015d00 <tcp_abort>

  return ERR_ABRT;
 8015e70:	f06f 030c 	mvn.w	r3, #12
}
 8015e74:	4618      	mov	r0, r3
 8015e76:	3710      	adds	r7, #16
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	bd80      	pop	{r7, pc}
 8015e7c:	08022084 	.word	0x08022084
 8015e80:	08022258 	.word	0x08022258
 8015e84:	080220c8 	.word	0x080220c8

08015e88 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b088      	sub	sp, #32
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	60f8      	str	r0, [r7, #12]
 8015e90:	460b      	mov	r3, r1
 8015e92:	607a      	str	r2, [r7, #4]
 8015e94:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8015e96:	2300      	movs	r3, #0
 8015e98:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d109      	bne.n	8015eb4 <tcp_listen_with_backlog_and_err+0x2c>
 8015ea0:	4b47      	ldr	r3, [pc, #284]	; (8015fc0 <tcp_listen_with_backlog_and_err+0x138>)
 8015ea2:	f240 3259 	movw	r2, #857	; 0x359
 8015ea6:	4947      	ldr	r1, [pc, #284]	; (8015fc4 <tcp_listen_with_backlog_and_err+0x13c>)
 8015ea8:	4847      	ldr	r0, [pc, #284]	; (8015fc8 <tcp_listen_with_backlog_and_err+0x140>)
 8015eaa:	f009 fb79 	bl	801f5a0 <iprintf>
 8015eae:	23f0      	movs	r3, #240	; 0xf0
 8015eb0:	76fb      	strb	r3, [r7, #27]
 8015eb2:	e079      	b.n	8015fa8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	7d1b      	ldrb	r3, [r3, #20]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d009      	beq.n	8015ed0 <tcp_listen_with_backlog_and_err+0x48>
 8015ebc:	4b40      	ldr	r3, [pc, #256]	; (8015fc0 <tcp_listen_with_backlog_and_err+0x138>)
 8015ebe:	f240 325a 	movw	r2, #858	; 0x35a
 8015ec2:	4942      	ldr	r1, [pc, #264]	; (8015fcc <tcp_listen_with_backlog_and_err+0x144>)
 8015ec4:	4840      	ldr	r0, [pc, #256]	; (8015fc8 <tcp_listen_with_backlog_and_err+0x140>)
 8015ec6:	f009 fb6b 	bl	801f5a0 <iprintf>
 8015eca:	23f1      	movs	r3, #241	; 0xf1
 8015ecc:	76fb      	strb	r3, [r7, #27]
 8015ece:	e06b      	b.n	8015fa8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	7d1b      	ldrb	r3, [r3, #20]
 8015ed4:	2b01      	cmp	r3, #1
 8015ed6:	d104      	bne.n	8015ee2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8015edc:	23f7      	movs	r3, #247	; 0xf7
 8015ede:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015ee0:	e062      	b.n	8015fa8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8015ee2:	2002      	movs	r0, #2
 8015ee4:	f7fe f9f2 	bl	80142cc <memp_malloc>
 8015ee8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8015eea:	69fb      	ldr	r3, [r7, #28]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d102      	bne.n	8015ef6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8015ef0:	23ff      	movs	r3, #255	; 0xff
 8015ef2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015ef4:	e058      	b.n	8015fa8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	691a      	ldr	r2, [r3, #16]
 8015efa:	69fb      	ldr	r3, [r7, #28]
 8015efc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	8ada      	ldrh	r2, [r3, #22]
 8015f02:	69fb      	ldr	r3, [r7, #28]
 8015f04:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8015f06:	69fb      	ldr	r3, [r7, #28]
 8015f08:	2201      	movs	r2, #1
 8015f0a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	7d5a      	ldrb	r2, [r3, #21]
 8015f10:	69fb      	ldr	r3, [r7, #28]
 8015f12:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	7a5a      	ldrb	r2, [r3, #9]
 8015f18:	69fb      	ldr	r3, [r7, #28]
 8015f1a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8015f1c:	69fb      	ldr	r3, [r7, #28]
 8015f1e:	2200      	movs	r2, #0
 8015f20:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	7ada      	ldrb	r2, [r3, #11]
 8015f26:	69fb      	ldr	r3, [r7, #28]
 8015f28:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	7a9a      	ldrb	r2, [r3, #10]
 8015f2e:	69fb      	ldr	r3, [r7, #28]
 8015f30:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	681a      	ldr	r2, [r3, #0]
 8015f36:	69fb      	ldr	r3, [r7, #28]
 8015f38:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	8adb      	ldrh	r3, [r3, #22]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d021      	beq.n	8015f86 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8015f42:	4b23      	ldr	r3, [pc, #140]	; (8015fd0 <tcp_listen_with_backlog_and_err+0x148>)
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	68fa      	ldr	r2, [r7, #12]
 8015f48:	429a      	cmp	r2, r3
 8015f4a:	d105      	bne.n	8015f58 <tcp_listen_with_backlog_and_err+0xd0>
 8015f4c:	4b20      	ldr	r3, [pc, #128]	; (8015fd0 <tcp_listen_with_backlog_and_err+0x148>)
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	68db      	ldr	r3, [r3, #12]
 8015f52:	4a1f      	ldr	r2, [pc, #124]	; (8015fd0 <tcp_listen_with_backlog_and_err+0x148>)
 8015f54:	6013      	str	r3, [r2, #0]
 8015f56:	e013      	b.n	8015f80 <tcp_listen_with_backlog_and_err+0xf8>
 8015f58:	4b1d      	ldr	r3, [pc, #116]	; (8015fd0 <tcp_listen_with_backlog_and_err+0x148>)
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	617b      	str	r3, [r7, #20]
 8015f5e:	e00c      	b.n	8015f7a <tcp_listen_with_backlog_and_err+0xf2>
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	68db      	ldr	r3, [r3, #12]
 8015f64:	68fa      	ldr	r2, [r7, #12]
 8015f66:	429a      	cmp	r2, r3
 8015f68:	d104      	bne.n	8015f74 <tcp_listen_with_backlog_and_err+0xec>
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	68da      	ldr	r2, [r3, #12]
 8015f6e:	697b      	ldr	r3, [r7, #20]
 8015f70:	60da      	str	r2, [r3, #12]
 8015f72:	e005      	b.n	8015f80 <tcp_listen_with_backlog_and_err+0xf8>
 8015f74:	697b      	ldr	r3, [r7, #20]
 8015f76:	68db      	ldr	r3, [r3, #12]
 8015f78:	617b      	str	r3, [r7, #20]
 8015f7a:	697b      	ldr	r3, [r7, #20]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d1ef      	bne.n	8015f60 <tcp_listen_with_backlog_and_err+0xd8>
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	2200      	movs	r2, #0
 8015f84:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8015f86:	68f8      	ldr	r0, [r7, #12]
 8015f88:	f7ff fb76 	bl	8015678 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8015f8c:	69fb      	ldr	r3, [r7, #28]
 8015f8e:	4a11      	ldr	r2, [pc, #68]	; (8015fd4 <tcp_listen_with_backlog_and_err+0x14c>)
 8015f90:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8015f92:	4b11      	ldr	r3, [pc, #68]	; (8015fd8 <tcp_listen_with_backlog_and_err+0x150>)
 8015f94:	681a      	ldr	r2, [r3, #0]
 8015f96:	69fb      	ldr	r3, [r7, #28]
 8015f98:	60da      	str	r2, [r3, #12]
 8015f9a:	4a0f      	ldr	r2, [pc, #60]	; (8015fd8 <tcp_listen_with_backlog_and_err+0x150>)
 8015f9c:	69fb      	ldr	r3, [r7, #28]
 8015f9e:	6013      	str	r3, [r2, #0]
 8015fa0:	f005 fcf6 	bl	801b990 <tcp_timer_needed>
  res = ERR_OK;
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d002      	beq.n	8015fb4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	7efa      	ldrb	r2, [r7, #27]
 8015fb2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8015fb4:	69fb      	ldr	r3, [r7, #28]
}
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	3720      	adds	r7, #32
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bd80      	pop	{r7, pc}
 8015fbe:	bf00      	nop
 8015fc0:	08022084 	.word	0x08022084
 8015fc4:	08022278 	.word	0x08022278
 8015fc8:	080220c8 	.word	0x080220c8
 8015fcc:	080222a8 	.word	0x080222a8
 8015fd0:	2000bfec 	.word	0x2000bfec
 8015fd4:	08015e49 	.word	0x08015e49
 8015fd8:	2000bff0 	.word	0x2000bff0

08015fdc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b084      	sub	sp, #16
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d106      	bne.n	8015ff8 <tcp_update_rcv_ann_wnd+0x1c>
 8015fea:	4b25      	ldr	r3, [pc, #148]	; (8016080 <tcp_update_rcv_ann_wnd+0xa4>)
 8015fec:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015ff0:	4924      	ldr	r1, [pc, #144]	; (8016084 <tcp_update_rcv_ann_wnd+0xa8>)
 8015ff2:	4825      	ldr	r0, [pc, #148]	; (8016088 <tcp_update_rcv_ann_wnd+0xac>)
 8015ff4:	f009 fad4 	bl	801f5a0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ffc:	687a      	ldr	r2, [r7, #4]
 8015ffe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8016000:	4413      	add	r3, r2
 8016002:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016008:	687a      	ldr	r2, [r7, #4]
 801600a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801600c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016010:	bf28      	it	cs
 8016012:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016016:	b292      	uxth	r2, r2
 8016018:	4413      	add	r3, r2
 801601a:	68fa      	ldr	r2, [r7, #12]
 801601c:	1ad3      	subs	r3, r2, r3
 801601e:	2b00      	cmp	r3, #0
 8016020:	db08      	blt.n	8016034 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801602e:	68fa      	ldr	r2, [r7, #12]
 8016030:	1ad3      	subs	r3, r2, r3
 8016032:	e020      	b.n	8016076 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801603c:	1ad3      	subs	r3, r2, r3
 801603e:	2b00      	cmp	r3, #0
 8016040:	dd03      	ble.n	801604a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	2200      	movs	r2, #0
 8016046:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016048:	e014      	b.n	8016074 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016052:	1ad3      	subs	r3, r2, r3
 8016054:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016056:	68bb      	ldr	r3, [r7, #8]
 8016058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801605c:	d306      	bcc.n	801606c <tcp_update_rcv_ann_wnd+0x90>
 801605e:	4b08      	ldr	r3, [pc, #32]	; (8016080 <tcp_update_rcv_ann_wnd+0xa4>)
 8016060:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016064:	4909      	ldr	r1, [pc, #36]	; (801608c <tcp_update_rcv_ann_wnd+0xb0>)
 8016066:	4808      	ldr	r0, [pc, #32]	; (8016088 <tcp_update_rcv_ann_wnd+0xac>)
 8016068:	f009 fa9a 	bl	801f5a0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801606c:	68bb      	ldr	r3, [r7, #8]
 801606e:	b29a      	uxth	r2, r3
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016074:	2300      	movs	r3, #0
  }
}
 8016076:	4618      	mov	r0, r3
 8016078:	3710      	adds	r7, #16
 801607a:	46bd      	mov	sp, r7
 801607c:	bd80      	pop	{r7, pc}
 801607e:	bf00      	nop
 8016080:	08022084 	.word	0x08022084
 8016084:	080222e0 	.word	0x080222e0
 8016088:	080220c8 	.word	0x080220c8
 801608c:	08022304 	.word	0x08022304

08016090 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b084      	sub	sp, #16
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
 8016098:	460b      	mov	r3, r1
 801609a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d107      	bne.n	80160b2 <tcp_recved+0x22>
 80160a2:	4b1f      	ldr	r3, [pc, #124]	; (8016120 <tcp_recved+0x90>)
 80160a4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80160a8:	491e      	ldr	r1, [pc, #120]	; (8016124 <tcp_recved+0x94>)
 80160aa:	481f      	ldr	r0, [pc, #124]	; (8016128 <tcp_recved+0x98>)
 80160ac:	f009 fa78 	bl	801f5a0 <iprintf>
 80160b0:	e032      	b.n	8016118 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	7d1b      	ldrb	r3, [r3, #20]
 80160b6:	2b01      	cmp	r3, #1
 80160b8:	d106      	bne.n	80160c8 <tcp_recved+0x38>
 80160ba:	4b19      	ldr	r3, [pc, #100]	; (8016120 <tcp_recved+0x90>)
 80160bc:	f240 32d2 	movw	r2, #978	; 0x3d2
 80160c0:	491a      	ldr	r1, [pc, #104]	; (801612c <tcp_recved+0x9c>)
 80160c2:	4819      	ldr	r0, [pc, #100]	; (8016128 <tcp_recved+0x98>)
 80160c4:	f009 fa6c 	bl	801f5a0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80160cc:	887b      	ldrh	r3, [r7, #2]
 80160ce:	4413      	add	r3, r2
 80160d0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80160d2:	89fb      	ldrh	r3, [r7, #14]
 80160d4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80160d8:	d804      	bhi.n	80160e4 <tcp_recved+0x54>
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80160de:	89fa      	ldrh	r2, [r7, #14]
 80160e0:	429a      	cmp	r2, r3
 80160e2:	d204      	bcs.n	80160ee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80160ea:	851a      	strh	r2, [r3, #40]	; 0x28
 80160ec:	e002      	b.n	80160f4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	89fa      	ldrh	r2, [r7, #14]
 80160f2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f7ff ff71 	bl	8015fdc <tcp_update_rcv_ann_wnd>
 80160fa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80160fc:	68bb      	ldr	r3, [r7, #8]
 80160fe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016102:	d309      	bcc.n	8016118 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	8b5b      	ldrh	r3, [r3, #26]
 8016108:	f043 0302 	orr.w	r3, r3, #2
 801610c:	b29a      	uxth	r2, r3
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016112:	6878      	ldr	r0, [r7, #4]
 8016114:	f004 fcc6 	bl	801aaa4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016118:	3710      	adds	r7, #16
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}
 801611e:	bf00      	nop
 8016120:	08022084 	.word	0x08022084
 8016124:	08022320 	.word	0x08022320
 8016128:	080220c8 	.word	0x080220c8
 801612c:	08022338 	.word	0x08022338

08016130 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016130:	b480      	push	{r7}
 8016132:	b083      	sub	sp, #12
 8016134:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016136:	2300      	movs	r3, #0
 8016138:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801613a:	4b1e      	ldr	r3, [pc, #120]	; (80161b4 <tcp_new_port+0x84>)
 801613c:	881b      	ldrh	r3, [r3, #0]
 801613e:	3301      	adds	r3, #1
 8016140:	b29a      	uxth	r2, r3
 8016142:	4b1c      	ldr	r3, [pc, #112]	; (80161b4 <tcp_new_port+0x84>)
 8016144:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016146:	4b1b      	ldr	r3, [pc, #108]	; (80161b4 <tcp_new_port+0x84>)
 8016148:	881b      	ldrh	r3, [r3, #0]
 801614a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801614e:	4293      	cmp	r3, r2
 8016150:	d103      	bne.n	801615a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016152:	4b18      	ldr	r3, [pc, #96]	; (80161b4 <tcp_new_port+0x84>)
 8016154:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016158:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801615a:	2300      	movs	r3, #0
 801615c:	71fb      	strb	r3, [r7, #7]
 801615e:	e01e      	b.n	801619e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016160:	79fb      	ldrb	r3, [r7, #7]
 8016162:	4a15      	ldr	r2, [pc, #84]	; (80161b8 <tcp_new_port+0x88>)
 8016164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	603b      	str	r3, [r7, #0]
 801616c:	e011      	b.n	8016192 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	8ada      	ldrh	r2, [r3, #22]
 8016172:	4b10      	ldr	r3, [pc, #64]	; (80161b4 <tcp_new_port+0x84>)
 8016174:	881b      	ldrh	r3, [r3, #0]
 8016176:	429a      	cmp	r2, r3
 8016178:	d108      	bne.n	801618c <tcp_new_port+0x5c>
        n++;
 801617a:	88bb      	ldrh	r3, [r7, #4]
 801617c:	3301      	adds	r3, #1
 801617e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016180:	88bb      	ldrh	r3, [r7, #4]
 8016182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016186:	d3d8      	bcc.n	801613a <tcp_new_port+0xa>
          return 0;
 8016188:	2300      	movs	r3, #0
 801618a:	e00d      	b.n	80161a8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	68db      	ldr	r3, [r3, #12]
 8016190:	603b      	str	r3, [r7, #0]
 8016192:	683b      	ldr	r3, [r7, #0]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d1ea      	bne.n	801616e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016198:	79fb      	ldrb	r3, [r7, #7]
 801619a:	3301      	adds	r3, #1
 801619c:	71fb      	strb	r3, [r7, #7]
 801619e:	79fb      	ldrb	r3, [r7, #7]
 80161a0:	2b03      	cmp	r3, #3
 80161a2:	d9dd      	bls.n	8016160 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80161a4:	4b03      	ldr	r3, [pc, #12]	; (80161b4 <tcp_new_port+0x84>)
 80161a6:	881b      	ldrh	r3, [r3, #0]
}
 80161a8:	4618      	mov	r0, r3
 80161aa:	370c      	adds	r7, #12
 80161ac:	46bd      	mov	sp, r7
 80161ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b2:	4770      	bx	lr
 80161b4:	20000028 	.word	0x20000028
 80161b8:	080240b8 	.word	0x080240b8

080161bc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b08a      	sub	sp, #40	; 0x28
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	60f8      	str	r0, [r7, #12]
 80161c4:	60b9      	str	r1, [r7, #8]
 80161c6:	603b      	str	r3, [r7, #0]
 80161c8:	4613      	mov	r3, r2
 80161ca:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80161cc:	2300      	movs	r3, #0
 80161ce:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d109      	bne.n	80161ea <tcp_connect+0x2e>
 80161d6:	4b7d      	ldr	r3, [pc, #500]	; (80163cc <tcp_connect+0x210>)
 80161d8:	f240 4235 	movw	r2, #1077	; 0x435
 80161dc:	497c      	ldr	r1, [pc, #496]	; (80163d0 <tcp_connect+0x214>)
 80161de:	487d      	ldr	r0, [pc, #500]	; (80163d4 <tcp_connect+0x218>)
 80161e0:	f009 f9de 	bl	801f5a0 <iprintf>
 80161e4:	f06f 030f 	mvn.w	r3, #15
 80161e8:	e0ec      	b.n	80163c4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80161ea:	68bb      	ldr	r3, [r7, #8]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d109      	bne.n	8016204 <tcp_connect+0x48>
 80161f0:	4b76      	ldr	r3, [pc, #472]	; (80163cc <tcp_connect+0x210>)
 80161f2:	f240 4236 	movw	r2, #1078	; 0x436
 80161f6:	4978      	ldr	r1, [pc, #480]	; (80163d8 <tcp_connect+0x21c>)
 80161f8:	4876      	ldr	r0, [pc, #472]	; (80163d4 <tcp_connect+0x218>)
 80161fa:	f009 f9d1 	bl	801f5a0 <iprintf>
 80161fe:	f06f 030f 	mvn.w	r3, #15
 8016202:	e0df      	b.n	80163c4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	7d1b      	ldrb	r3, [r3, #20]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d009      	beq.n	8016220 <tcp_connect+0x64>
 801620c:	4b6f      	ldr	r3, [pc, #444]	; (80163cc <tcp_connect+0x210>)
 801620e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8016212:	4972      	ldr	r1, [pc, #456]	; (80163dc <tcp_connect+0x220>)
 8016214:	486f      	ldr	r0, [pc, #444]	; (80163d4 <tcp_connect+0x218>)
 8016216:	f009 f9c3 	bl	801f5a0 <iprintf>
 801621a:	f06f 0309 	mvn.w	r3, #9
 801621e:	e0d1      	b.n	80163c4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8016220:	68bb      	ldr	r3, [r7, #8]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d002      	beq.n	801622c <tcp_connect+0x70>
 8016226:	68bb      	ldr	r3, [r7, #8]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	e000      	b.n	801622e <tcp_connect+0x72>
 801622c:	2300      	movs	r3, #0
 801622e:	68fa      	ldr	r2, [r7, #12]
 8016230:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	88fa      	ldrh	r2, [r7, #6]
 8016236:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	7a1b      	ldrb	r3, [r3, #8]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d006      	beq.n	801624e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	7a1b      	ldrb	r3, [r3, #8]
 8016244:	4618      	mov	r0, r3
 8016246:	f7fe fbcd 	bl	80149e4 <netif_get_by_index>
 801624a:	6278      	str	r0, [r7, #36]	; 0x24
 801624c:	e005      	b.n	801625a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	3304      	adds	r3, #4
 8016252:	4618      	mov	r0, r3
 8016254:	f007 fb48 	bl	801d8e8 <ip4_route>
 8016258:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801625c:	2b00      	cmp	r3, #0
 801625e:	d102      	bne.n	8016266 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8016260:	f06f 0303 	mvn.w	r3, #3
 8016264:	e0ae      	b.n	80163c4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d003      	beq.n	8016274 <tcp_connect+0xb8>
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d111      	bne.n	8016298 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8016274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016276:	2b00      	cmp	r3, #0
 8016278:	d002      	beq.n	8016280 <tcp_connect+0xc4>
 801627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801627c:	3304      	adds	r3, #4
 801627e:	e000      	b.n	8016282 <tcp_connect+0xc6>
 8016280:	2300      	movs	r3, #0
 8016282:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8016284:	69fb      	ldr	r3, [r7, #28]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d102      	bne.n	8016290 <tcp_connect+0xd4>
      return ERR_RTE;
 801628a:	f06f 0303 	mvn.w	r3, #3
 801628e:	e099      	b.n	80163c4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016290:	69fb      	ldr	r3, [r7, #28]
 8016292:	681a      	ldr	r2, [r3, #0]
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	8adb      	ldrh	r3, [r3, #22]
 801629c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	8adb      	ldrh	r3, [r3, #22]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d10c      	bne.n	80162c0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80162a6:	f7ff ff43 	bl	8016130 <tcp_new_port>
 80162aa:	4603      	mov	r3, r0
 80162ac:	461a      	mov	r2, r3
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	8adb      	ldrh	r3, [r3, #22]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d102      	bne.n	80162c0 <tcp_connect+0x104>
      return ERR_BUF;
 80162ba:	f06f 0301 	mvn.w	r3, #1
 80162be:	e081      	b.n	80163c4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80162c0:	68f8      	ldr	r0, [r7, #12]
 80162c2:	f001 f867 	bl	8017394 <tcp_next_iss>
 80162c6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	2200      	movs	r2, #0
 80162cc:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	697a      	ldr	r2, [r7, #20]
 80162d2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80162d4:	697b      	ldr	r3, [r7, #20]
 80162d6:	1e5a      	subs	r2, r3, #1
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80162dc:	697b      	ldr	r3, [r7, #20]
 80162de:	1e5a      	subs	r2, r3, #1
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80162e4:	697b      	ldr	r3, [r7, #20]
 80162e6:	1e5a      	subs	r2, r3, #1
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80162f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801630a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016314:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	3304      	adds	r3, #4
 801631e:	461a      	mov	r2, r3
 8016320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016322:	f001 f85d 	bl	80173e0 <tcp_eff_send_mss_netif>
 8016326:	4603      	mov	r3, r0
 8016328:	461a      	mov	r2, r3
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	2201      	movs	r2, #1
 8016332:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	683a      	ldr	r2, [r7, #0]
 801633a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801633e:	2102      	movs	r1, #2
 8016340:	68f8      	ldr	r0, [r7, #12]
 8016342:	f004 fac1 	bl	801a8c8 <tcp_enqueue_flags>
 8016346:	4603      	mov	r3, r0
 8016348:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801634a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d136      	bne.n	80163c0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	2202      	movs	r2, #2
 8016356:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8016358:	8b7b      	ldrh	r3, [r7, #26]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d021      	beq.n	80163a2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801635e:	4b20      	ldr	r3, [pc, #128]	; (80163e0 <tcp_connect+0x224>)
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	68fa      	ldr	r2, [r7, #12]
 8016364:	429a      	cmp	r2, r3
 8016366:	d105      	bne.n	8016374 <tcp_connect+0x1b8>
 8016368:	4b1d      	ldr	r3, [pc, #116]	; (80163e0 <tcp_connect+0x224>)
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	68db      	ldr	r3, [r3, #12]
 801636e:	4a1c      	ldr	r2, [pc, #112]	; (80163e0 <tcp_connect+0x224>)
 8016370:	6013      	str	r3, [r2, #0]
 8016372:	e013      	b.n	801639c <tcp_connect+0x1e0>
 8016374:	4b1a      	ldr	r3, [pc, #104]	; (80163e0 <tcp_connect+0x224>)
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	623b      	str	r3, [r7, #32]
 801637a:	e00c      	b.n	8016396 <tcp_connect+0x1da>
 801637c:	6a3b      	ldr	r3, [r7, #32]
 801637e:	68db      	ldr	r3, [r3, #12]
 8016380:	68fa      	ldr	r2, [r7, #12]
 8016382:	429a      	cmp	r2, r3
 8016384:	d104      	bne.n	8016390 <tcp_connect+0x1d4>
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	68da      	ldr	r2, [r3, #12]
 801638a:	6a3b      	ldr	r3, [r7, #32]
 801638c:	60da      	str	r2, [r3, #12]
 801638e:	e005      	b.n	801639c <tcp_connect+0x1e0>
 8016390:	6a3b      	ldr	r3, [r7, #32]
 8016392:	68db      	ldr	r3, [r3, #12]
 8016394:	623b      	str	r3, [r7, #32]
 8016396:	6a3b      	ldr	r3, [r7, #32]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d1ef      	bne.n	801637c <tcp_connect+0x1c0>
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	2200      	movs	r2, #0
 80163a0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80163a2:	4b10      	ldr	r3, [pc, #64]	; (80163e4 <tcp_connect+0x228>)
 80163a4:	681a      	ldr	r2, [r3, #0]
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	60da      	str	r2, [r3, #12]
 80163aa:	4a0e      	ldr	r2, [pc, #56]	; (80163e4 <tcp_connect+0x228>)
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	6013      	str	r3, [r2, #0]
 80163b0:	f005 faee 	bl	801b990 <tcp_timer_needed>
 80163b4:	4b0c      	ldr	r3, [pc, #48]	; (80163e8 <tcp_connect+0x22c>)
 80163b6:	2201      	movs	r2, #1
 80163b8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80163ba:	68f8      	ldr	r0, [r7, #12]
 80163bc:	f004 fb72 	bl	801aaa4 <tcp_output>
  }
  return ret;
 80163c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80163c4:	4618      	mov	r0, r3
 80163c6:	3728      	adds	r7, #40	; 0x28
 80163c8:	46bd      	mov	sp, r7
 80163ca:	bd80      	pop	{r7, pc}
 80163cc:	08022084 	.word	0x08022084
 80163d0:	08022360 	.word	0x08022360
 80163d4:	080220c8 	.word	0x080220c8
 80163d8:	0802237c 	.word	0x0802237c
 80163dc:	08022398 	.word	0x08022398
 80163e0:	2000bfec 	.word	0x2000bfec
 80163e4:	2000bff4 	.word	0x2000bff4
 80163e8:	2000bffc 	.word	0x2000bffc

080163ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80163ec:	b5b0      	push	{r4, r5, r7, lr}
 80163ee:	b090      	sub	sp, #64	; 0x40
 80163f0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80163f2:	2300      	movs	r3, #0
 80163f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80163f8:	4b94      	ldr	r3, [pc, #592]	; (801664c <tcp_slowtmr+0x260>)
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	3301      	adds	r3, #1
 80163fe:	4a93      	ldr	r2, [pc, #588]	; (801664c <tcp_slowtmr+0x260>)
 8016400:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016402:	4b93      	ldr	r3, [pc, #588]	; (8016650 <tcp_slowtmr+0x264>)
 8016404:	781b      	ldrb	r3, [r3, #0]
 8016406:	3301      	adds	r3, #1
 8016408:	b2da      	uxtb	r2, r3
 801640a:	4b91      	ldr	r3, [pc, #580]	; (8016650 <tcp_slowtmr+0x264>)
 801640c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801640e:	2300      	movs	r3, #0
 8016410:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8016412:	4b90      	ldr	r3, [pc, #576]	; (8016654 <tcp_slowtmr+0x268>)
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8016418:	e29d      	b.n	8016956 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801641c:	7d1b      	ldrb	r3, [r3, #20]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d106      	bne.n	8016430 <tcp_slowtmr+0x44>
 8016422:	4b8d      	ldr	r3, [pc, #564]	; (8016658 <tcp_slowtmr+0x26c>)
 8016424:	f240 42be 	movw	r2, #1214	; 0x4be
 8016428:	498c      	ldr	r1, [pc, #560]	; (801665c <tcp_slowtmr+0x270>)
 801642a:	488d      	ldr	r0, [pc, #564]	; (8016660 <tcp_slowtmr+0x274>)
 801642c:	f009 f8b8 	bl	801f5a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016432:	7d1b      	ldrb	r3, [r3, #20]
 8016434:	2b01      	cmp	r3, #1
 8016436:	d106      	bne.n	8016446 <tcp_slowtmr+0x5a>
 8016438:	4b87      	ldr	r3, [pc, #540]	; (8016658 <tcp_slowtmr+0x26c>)
 801643a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801643e:	4989      	ldr	r1, [pc, #548]	; (8016664 <tcp_slowtmr+0x278>)
 8016440:	4887      	ldr	r0, [pc, #540]	; (8016660 <tcp_slowtmr+0x274>)
 8016442:	f009 f8ad 	bl	801f5a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016448:	7d1b      	ldrb	r3, [r3, #20]
 801644a:	2b0a      	cmp	r3, #10
 801644c:	d106      	bne.n	801645c <tcp_slowtmr+0x70>
 801644e:	4b82      	ldr	r3, [pc, #520]	; (8016658 <tcp_slowtmr+0x26c>)
 8016450:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016454:	4984      	ldr	r1, [pc, #528]	; (8016668 <tcp_slowtmr+0x27c>)
 8016456:	4882      	ldr	r0, [pc, #520]	; (8016660 <tcp_slowtmr+0x274>)
 8016458:	f009 f8a2 	bl	801f5a0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801645e:	7f9a      	ldrb	r2, [r3, #30]
 8016460:	4b7b      	ldr	r3, [pc, #492]	; (8016650 <tcp_slowtmr+0x264>)
 8016462:	781b      	ldrb	r3, [r3, #0]
 8016464:	429a      	cmp	r2, r3
 8016466:	d105      	bne.n	8016474 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8016468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801646a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801646c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801646e:	68db      	ldr	r3, [r3, #12]
 8016470:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8016472:	e270      	b.n	8016956 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016474:	4b76      	ldr	r3, [pc, #472]	; (8016650 <tcp_slowtmr+0x264>)
 8016476:	781a      	ldrb	r2, [r3, #0]
 8016478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801647a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801647c:	2300      	movs	r3, #0
 801647e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8016482:	2300      	movs	r3, #0
 8016484:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801648a:	7d1b      	ldrb	r3, [r3, #20]
 801648c:	2b02      	cmp	r3, #2
 801648e:	d10a      	bne.n	80164a6 <tcp_slowtmr+0xba>
 8016490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016492:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016496:	2b05      	cmp	r3, #5
 8016498:	d905      	bls.n	80164a6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801649a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801649e:	3301      	adds	r3, #1
 80164a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80164a4:	e11e      	b.n	80166e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80164a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80164ac:	2b0b      	cmp	r3, #11
 80164ae:	d905      	bls.n	80164bc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80164b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164b4:	3301      	adds	r3, #1
 80164b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80164ba:	e113      	b.n	80166e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80164bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d075      	beq.n	80165b2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80164c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d006      	beq.n	80164dc <tcp_slowtmr+0xf0>
 80164ce:	4b62      	ldr	r3, [pc, #392]	; (8016658 <tcp_slowtmr+0x26c>)
 80164d0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80164d4:	4965      	ldr	r1, [pc, #404]	; (801666c <tcp_slowtmr+0x280>)
 80164d6:	4862      	ldr	r0, [pc, #392]	; (8016660 <tcp_slowtmr+0x274>)
 80164d8:	f009 f862 	bl	801f5a0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80164dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d106      	bne.n	80164f2 <tcp_slowtmr+0x106>
 80164e4:	4b5c      	ldr	r3, [pc, #368]	; (8016658 <tcp_slowtmr+0x26c>)
 80164e6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80164ea:	4961      	ldr	r1, [pc, #388]	; (8016670 <tcp_slowtmr+0x284>)
 80164ec:	485c      	ldr	r0, [pc, #368]	; (8016660 <tcp_slowtmr+0x274>)
 80164ee:	f009 f857 	bl	801f5a0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80164f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80164f8:	2b0b      	cmp	r3, #11
 80164fa:	d905      	bls.n	8016508 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80164fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016500:	3301      	adds	r3, #1
 8016502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016506:	e0ed      	b.n	80166e4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8016508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801650a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801650e:	3b01      	subs	r3, #1
 8016510:	4a58      	ldr	r2, [pc, #352]	; (8016674 <tcp_slowtmr+0x288>)
 8016512:	5cd3      	ldrb	r3, [r2, r3]
 8016514:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8016516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016518:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801651c:	7c7a      	ldrb	r2, [r7, #17]
 801651e:	429a      	cmp	r2, r3
 8016520:	d907      	bls.n	8016532 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8016522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016524:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016528:	3301      	adds	r3, #1
 801652a:	b2da      	uxtb	r2, r3
 801652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801652e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8016532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016534:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016538:	7c7a      	ldrb	r2, [r7, #17]
 801653a:	429a      	cmp	r2, r3
 801653c:	f200 80d2 	bhi.w	80166e4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8016540:	2301      	movs	r3, #1
 8016542:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8016544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016546:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801654a:	2b00      	cmp	r3, #0
 801654c:	d108      	bne.n	8016560 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801654e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016550:	f005 f950 	bl	801b7f4 <tcp_zero_window_probe>
 8016554:	4603      	mov	r3, r0
 8016556:	2b00      	cmp	r3, #0
 8016558:	d014      	beq.n	8016584 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801655a:	2300      	movs	r3, #0
 801655c:	623b      	str	r3, [r7, #32]
 801655e:	e011      	b.n	8016584 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8016560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016562:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016566:	4619      	mov	r1, r3
 8016568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801656a:	f004 f815 	bl	801a598 <tcp_split_unsent_seg>
 801656e:	4603      	mov	r3, r0
 8016570:	2b00      	cmp	r3, #0
 8016572:	d107      	bne.n	8016584 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8016574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016576:	f004 fa95 	bl	801aaa4 <tcp_output>
 801657a:	4603      	mov	r3, r0
 801657c:	2b00      	cmp	r3, #0
 801657e:	d101      	bne.n	8016584 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8016580:	2300      	movs	r3, #0
 8016582:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8016584:	6a3b      	ldr	r3, [r7, #32]
 8016586:	2b00      	cmp	r3, #0
 8016588:	f000 80ac 	beq.w	80166e4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801658e:	2200      	movs	r2, #0
 8016590:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016596:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801659a:	2b06      	cmp	r3, #6
 801659c:	f200 80a2 	bhi.w	80166e4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80165a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80165a6:	3301      	adds	r3, #1
 80165a8:	b2da      	uxtb	r2, r3
 80165aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80165b0:	e098      	b.n	80166e4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80165b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	db0f      	blt.n	80165dc <tcp_slowtmr+0x1f0>
 80165bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80165c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80165c6:	4293      	cmp	r3, r2
 80165c8:	d008      	beq.n	80165dc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80165ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80165d0:	b29b      	uxth	r3, r3
 80165d2:	3301      	adds	r3, #1
 80165d4:	b29b      	uxth	r3, r3
 80165d6:	b21a      	sxth	r2, r3
 80165d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165da:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80165dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165de:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80165e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80165e8:	429a      	cmp	r2, r3
 80165ea:	db7b      	blt.n	80166e4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80165ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165ee:	f004 fd4b 	bl	801b088 <tcp_rexmit_rto_prepare>
 80165f2:	4603      	mov	r3, r0
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d007      	beq.n	8016608 <tcp_slowtmr+0x21c>
 80165f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d171      	bne.n	80166e4 <tcp_slowtmr+0x2f8>
 8016600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016604:	2b00      	cmp	r3, #0
 8016606:	d06d      	beq.n	80166e4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8016608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801660a:	7d1b      	ldrb	r3, [r3, #20]
 801660c:	2b02      	cmp	r3, #2
 801660e:	d03a      	beq.n	8016686 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8016610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016616:	2b0c      	cmp	r3, #12
 8016618:	bf28      	it	cs
 801661a:	230c      	movcs	r3, #12
 801661c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016620:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016624:	10db      	asrs	r3, r3, #3
 8016626:	b21b      	sxth	r3, r3
 8016628:	461a      	mov	r2, r3
 801662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801662c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016630:	4413      	add	r3, r2
 8016632:	7efa      	ldrb	r2, [r7, #27]
 8016634:	4910      	ldr	r1, [pc, #64]	; (8016678 <tcp_slowtmr+0x28c>)
 8016636:	5c8a      	ldrb	r2, [r1, r2]
 8016638:	4093      	lsls	r3, r2
 801663a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801663c:	697b      	ldr	r3, [r7, #20]
 801663e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8016642:	4293      	cmp	r3, r2
 8016644:	dc1a      	bgt.n	801667c <tcp_slowtmr+0x290>
 8016646:	697b      	ldr	r3, [r7, #20]
 8016648:	b21a      	sxth	r2, r3
 801664a:	e019      	b.n	8016680 <tcp_slowtmr+0x294>
 801664c:	2000bfe8 	.word	0x2000bfe8
 8016650:	2000bffe 	.word	0x2000bffe
 8016654:	2000bff4 	.word	0x2000bff4
 8016658:	08022084 	.word	0x08022084
 801665c:	080223c8 	.word	0x080223c8
 8016660:	080220c8 	.word	0x080220c8
 8016664:	080223f4 	.word	0x080223f4
 8016668:	08022420 	.word	0x08022420
 801666c:	08022450 	.word	0x08022450
 8016670:	08022484 	.word	0x08022484
 8016674:	080240b0 	.word	0x080240b0
 8016678:	080240a0 	.word	0x080240a0
 801667c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016682:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8016686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016688:	2200      	movs	r2, #0
 801668a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801668e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016694:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016698:	4293      	cmp	r3, r2
 801669a:	bf28      	it	cs
 801669c:	4613      	movcs	r3, r2
 801669e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80166a0:	8a7b      	ldrh	r3, [r7, #18]
 80166a2:	085b      	lsrs	r3, r3, #1
 80166a4:	b29a      	uxth	r2, r3
 80166a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80166ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80166b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166b6:	005b      	lsls	r3, r3, #1
 80166b8:	b29b      	uxth	r3, r3
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d206      	bcs.n	80166cc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80166be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166c2:	005b      	lsls	r3, r3, #1
 80166c4:	b29a      	uxth	r2, r3
 80166c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80166cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ce:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80166d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80166d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166d8:	2200      	movs	r2, #0
 80166da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80166de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80166e0:	f004 fd42 	bl	801b168 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80166e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166e6:	7d1b      	ldrb	r3, [r3, #20]
 80166e8:	2b06      	cmp	r3, #6
 80166ea:	d111      	bne.n	8016710 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80166ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ee:	8b5b      	ldrh	r3, [r3, #26]
 80166f0:	f003 0310 	and.w	r3, r3, #16
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d00b      	beq.n	8016710 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80166f8:	4b9c      	ldr	r3, [pc, #624]	; (801696c <tcp_slowtmr+0x580>)
 80166fa:	681a      	ldr	r2, [r3, #0]
 80166fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166fe:	6a1b      	ldr	r3, [r3, #32]
 8016700:	1ad3      	subs	r3, r2, r3
 8016702:	2b28      	cmp	r3, #40	; 0x28
 8016704:	d904      	bls.n	8016710 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8016706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801670a:	3301      	adds	r3, #1
 801670c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016712:	7a5b      	ldrb	r3, [r3, #9]
 8016714:	f003 0308 	and.w	r3, r3, #8
 8016718:	2b00      	cmp	r3, #0
 801671a:	d04a      	beq.n	80167b2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801671e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016720:	2b04      	cmp	r3, #4
 8016722:	d003      	beq.n	801672c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8016724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016726:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8016728:	2b07      	cmp	r3, #7
 801672a:	d142      	bne.n	80167b2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801672c:	4b8f      	ldr	r3, [pc, #572]	; (801696c <tcp_slowtmr+0x580>)
 801672e:	681a      	ldr	r2, [r3, #0]
 8016730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016732:	6a1b      	ldr	r3, [r3, #32]
 8016734:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8016736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016738:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801673c:	4b8c      	ldr	r3, [pc, #560]	; (8016970 <tcp_slowtmr+0x584>)
 801673e:	440b      	add	r3, r1
 8016740:	498c      	ldr	r1, [pc, #560]	; (8016974 <tcp_slowtmr+0x588>)
 8016742:	fba1 1303 	umull	r1, r3, r1, r3
 8016746:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016748:	429a      	cmp	r2, r3
 801674a:	d90a      	bls.n	8016762 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801674c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016750:	3301      	adds	r3, #1
 8016752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8016756:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801675a:	3301      	adds	r3, #1
 801675c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016760:	e027      	b.n	80167b2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016762:	4b82      	ldr	r3, [pc, #520]	; (801696c <tcp_slowtmr+0x580>)
 8016764:	681a      	ldr	r2, [r3, #0]
 8016766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016768:	6a1b      	ldr	r3, [r3, #32]
 801676a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801676e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016774:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016778:	4618      	mov	r0, r3
 801677a:	4b7f      	ldr	r3, [pc, #508]	; (8016978 <tcp_slowtmr+0x58c>)
 801677c:	fb00 f303 	mul.w	r3, r0, r3
 8016780:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8016782:	497c      	ldr	r1, [pc, #496]	; (8016974 <tcp_slowtmr+0x588>)
 8016784:	fba1 1303 	umull	r1, r3, r1, r3
 8016788:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801678a:	429a      	cmp	r2, r3
 801678c:	d911      	bls.n	80167b2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801678e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016790:	f004 fff0 	bl	801b774 <tcp_keepalive>
 8016794:	4603      	mov	r3, r0
 8016796:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801679a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d107      	bne.n	80167b2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80167a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167a4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80167a8:	3301      	adds	r3, #1
 80167aa:	b2da      	uxtb	r2, r3
 80167ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ae:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80167b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d011      	beq.n	80167de <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80167ba:	4b6c      	ldr	r3, [pc, #432]	; (801696c <tcp_slowtmr+0x580>)
 80167bc:	681a      	ldr	r2, [r3, #0]
 80167be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167c0:	6a1b      	ldr	r3, [r3, #32]
 80167c2:	1ad2      	subs	r2, r2, r3
 80167c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167c6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80167ca:	4619      	mov	r1, r3
 80167cc:	460b      	mov	r3, r1
 80167ce:	005b      	lsls	r3, r3, #1
 80167d0:	440b      	add	r3, r1
 80167d2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80167d4:	429a      	cmp	r2, r3
 80167d6:	d302      	bcc.n	80167de <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80167d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80167da:	f000 feab 	bl	8017534 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80167de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167e0:	7d1b      	ldrb	r3, [r3, #20]
 80167e2:	2b03      	cmp	r3, #3
 80167e4:	d10b      	bne.n	80167fe <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80167e6:	4b61      	ldr	r3, [pc, #388]	; (801696c <tcp_slowtmr+0x580>)
 80167e8:	681a      	ldr	r2, [r3, #0]
 80167ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ec:	6a1b      	ldr	r3, [r3, #32]
 80167ee:	1ad3      	subs	r3, r2, r3
 80167f0:	2b28      	cmp	r3, #40	; 0x28
 80167f2:	d904      	bls.n	80167fe <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80167f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167f8:	3301      	adds	r3, #1
 80167fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80167fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016800:	7d1b      	ldrb	r3, [r3, #20]
 8016802:	2b09      	cmp	r3, #9
 8016804:	d10b      	bne.n	801681e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016806:	4b59      	ldr	r3, [pc, #356]	; (801696c <tcp_slowtmr+0x580>)
 8016808:	681a      	ldr	r2, [r3, #0]
 801680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801680c:	6a1b      	ldr	r3, [r3, #32]
 801680e:	1ad3      	subs	r3, r2, r3
 8016810:	2bf0      	cmp	r3, #240	; 0xf0
 8016812:	d904      	bls.n	801681e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8016814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016818:	3301      	adds	r3, #1
 801681a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801681e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016822:	2b00      	cmp	r3, #0
 8016824:	d060      	beq.n	80168e8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8016826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801682c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801682e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016830:	f000 fccc 	bl	80171cc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8016834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016836:	2b00      	cmp	r3, #0
 8016838:	d010      	beq.n	801685c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801683a:	4b50      	ldr	r3, [pc, #320]	; (801697c <tcp_slowtmr+0x590>)
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016840:	429a      	cmp	r2, r3
 8016842:	d106      	bne.n	8016852 <tcp_slowtmr+0x466>
 8016844:	4b4e      	ldr	r3, [pc, #312]	; (8016980 <tcp_slowtmr+0x594>)
 8016846:	f240 526d 	movw	r2, #1389	; 0x56d
 801684a:	494e      	ldr	r1, [pc, #312]	; (8016984 <tcp_slowtmr+0x598>)
 801684c:	484e      	ldr	r0, [pc, #312]	; (8016988 <tcp_slowtmr+0x59c>)
 801684e:	f008 fea7 	bl	801f5a0 <iprintf>
        prev->next = pcb->next;
 8016852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016854:	68da      	ldr	r2, [r3, #12]
 8016856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016858:	60da      	str	r2, [r3, #12]
 801685a:	e00f      	b.n	801687c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801685c:	4b47      	ldr	r3, [pc, #284]	; (801697c <tcp_slowtmr+0x590>)
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016862:	429a      	cmp	r2, r3
 8016864:	d006      	beq.n	8016874 <tcp_slowtmr+0x488>
 8016866:	4b46      	ldr	r3, [pc, #280]	; (8016980 <tcp_slowtmr+0x594>)
 8016868:	f240 5271 	movw	r2, #1393	; 0x571
 801686c:	4947      	ldr	r1, [pc, #284]	; (801698c <tcp_slowtmr+0x5a0>)
 801686e:	4846      	ldr	r0, [pc, #280]	; (8016988 <tcp_slowtmr+0x59c>)
 8016870:	f008 fe96 	bl	801f5a0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8016874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016876:	68db      	ldr	r3, [r3, #12]
 8016878:	4a40      	ldr	r2, [pc, #256]	; (801697c <tcp_slowtmr+0x590>)
 801687a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801687c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016880:	2b00      	cmp	r3, #0
 8016882:	d013      	beq.n	80168ac <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016886:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8016888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801688a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801688c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016890:	3304      	adds	r3, #4
 8016892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016894:	8ad2      	ldrh	r2, [r2, #22]
 8016896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016898:	8b09      	ldrh	r1, [r1, #24]
 801689a:	9102      	str	r1, [sp, #8]
 801689c:	9201      	str	r2, [sp, #4]
 801689e:	9300      	str	r3, [sp, #0]
 80168a0:	462b      	mov	r3, r5
 80168a2:	4622      	mov	r2, r4
 80168a4:	4601      	mov	r1, r0
 80168a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80168a8:	f004 feb0 	bl	801b60c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80168ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ae:	691b      	ldr	r3, [r3, #16]
 80168b0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80168b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168b4:	7d1b      	ldrb	r3, [r3, #20]
 80168b6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80168b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ba:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80168bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168be:	68db      	ldr	r3, [r3, #12]
 80168c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80168c2:	6838      	ldr	r0, [r7, #0]
 80168c4:	f7fe fed8 	bl	8015678 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80168c8:	4b31      	ldr	r3, [pc, #196]	; (8016990 <tcp_slowtmr+0x5a4>)
 80168ca:	2200      	movs	r2, #0
 80168cc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d004      	beq.n	80168de <tcp_slowtmr+0x4f2>
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	f06f 010c 	mvn.w	r1, #12
 80168da:	68b8      	ldr	r0, [r7, #8]
 80168dc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80168de:	4b2c      	ldr	r3, [pc, #176]	; (8016990 <tcp_slowtmr+0x5a4>)
 80168e0:	781b      	ldrb	r3, [r3, #0]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d037      	beq.n	8016956 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80168e6:	e592      	b.n	801640e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80168e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80168ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ee:	68db      	ldr	r3, [r3, #12]
 80168f0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80168f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f4:	7f1b      	ldrb	r3, [r3, #28]
 80168f6:	3301      	adds	r3, #1
 80168f8:	b2da      	uxtb	r2, r3
 80168fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168fc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80168fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016900:	7f1a      	ldrb	r2, [r3, #28]
 8016902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016904:	7f5b      	ldrb	r3, [r3, #29]
 8016906:	429a      	cmp	r2, r3
 8016908:	d325      	bcc.n	8016956 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801690c:	2200      	movs	r2, #0
 801690e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8016910:	4b1f      	ldr	r3, [pc, #124]	; (8016990 <tcp_slowtmr+0x5a4>)
 8016912:	2200      	movs	r2, #0
 8016914:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8016916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801691c:	2b00      	cmp	r3, #0
 801691e:	d00b      	beq.n	8016938 <tcp_slowtmr+0x54c>
 8016920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016928:	6912      	ldr	r2, [r2, #16]
 801692a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801692c:	4610      	mov	r0, r2
 801692e:	4798      	blx	r3
 8016930:	4603      	mov	r3, r0
 8016932:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8016936:	e002      	b.n	801693e <tcp_slowtmr+0x552>
 8016938:	2300      	movs	r3, #0
 801693a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801693e:	4b14      	ldr	r3, [pc, #80]	; (8016990 <tcp_slowtmr+0x5a4>)
 8016940:	781b      	ldrb	r3, [r3, #0]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d000      	beq.n	8016948 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8016946:	e562      	b.n	801640e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8016948:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801694c:	2b00      	cmp	r3, #0
 801694e:	d102      	bne.n	8016956 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8016950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016952:	f004 f8a7 	bl	801aaa4 <tcp_output>
  while (pcb != NULL) {
 8016956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016958:	2b00      	cmp	r3, #0
 801695a:	f47f ad5e 	bne.w	801641a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801695e:	2300      	movs	r3, #0
 8016960:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8016962:	4b0c      	ldr	r3, [pc, #48]	; (8016994 <tcp_slowtmr+0x5a8>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8016968:	e069      	b.n	8016a3e <tcp_slowtmr+0x652>
 801696a:	bf00      	nop
 801696c:	2000bfe8 	.word	0x2000bfe8
 8016970:	000a4cb8 	.word	0x000a4cb8
 8016974:	10624dd3 	.word	0x10624dd3
 8016978:	000124f8 	.word	0x000124f8
 801697c:	2000bff4 	.word	0x2000bff4
 8016980:	08022084 	.word	0x08022084
 8016984:	080224bc 	.word	0x080224bc
 8016988:	080220c8 	.word	0x080220c8
 801698c:	080224e8 	.word	0x080224e8
 8016990:	2000bffc 	.word	0x2000bffc
 8016994:	2000bff8 	.word	0x2000bff8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801699a:	7d1b      	ldrb	r3, [r3, #20]
 801699c:	2b0a      	cmp	r3, #10
 801699e:	d006      	beq.n	80169ae <tcp_slowtmr+0x5c2>
 80169a0:	4b2b      	ldr	r3, [pc, #172]	; (8016a50 <tcp_slowtmr+0x664>)
 80169a2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80169a6:	492b      	ldr	r1, [pc, #172]	; (8016a54 <tcp_slowtmr+0x668>)
 80169a8:	482b      	ldr	r0, [pc, #172]	; (8016a58 <tcp_slowtmr+0x66c>)
 80169aa:	f008 fdf9 	bl	801f5a0 <iprintf>
    pcb_remove = 0;
 80169ae:	2300      	movs	r3, #0
 80169b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80169b4:	4b29      	ldr	r3, [pc, #164]	; (8016a5c <tcp_slowtmr+0x670>)
 80169b6:	681a      	ldr	r2, [r3, #0]
 80169b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ba:	6a1b      	ldr	r3, [r3, #32]
 80169bc:	1ad3      	subs	r3, r2, r3
 80169be:	2bf0      	cmp	r3, #240	; 0xf0
 80169c0:	d904      	bls.n	80169cc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80169c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169c6:	3301      	adds	r3, #1
 80169c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80169cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d02f      	beq.n	8016a34 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80169d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80169d6:	f000 fbf9 	bl	80171cc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80169da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d010      	beq.n	8016a02 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80169e0:	4b1f      	ldr	r3, [pc, #124]	; (8016a60 <tcp_slowtmr+0x674>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80169e6:	429a      	cmp	r2, r3
 80169e8:	d106      	bne.n	80169f8 <tcp_slowtmr+0x60c>
 80169ea:	4b19      	ldr	r3, [pc, #100]	; (8016a50 <tcp_slowtmr+0x664>)
 80169ec:	f240 52af 	movw	r2, #1455	; 0x5af
 80169f0:	491c      	ldr	r1, [pc, #112]	; (8016a64 <tcp_slowtmr+0x678>)
 80169f2:	4819      	ldr	r0, [pc, #100]	; (8016a58 <tcp_slowtmr+0x66c>)
 80169f4:	f008 fdd4 	bl	801f5a0 <iprintf>
        prev->next = pcb->next;
 80169f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169fa:	68da      	ldr	r2, [r3, #12]
 80169fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169fe:	60da      	str	r2, [r3, #12]
 8016a00:	e00f      	b.n	8016a22 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8016a02:	4b17      	ldr	r3, [pc, #92]	; (8016a60 <tcp_slowtmr+0x674>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d006      	beq.n	8016a1a <tcp_slowtmr+0x62e>
 8016a0c:	4b10      	ldr	r3, [pc, #64]	; (8016a50 <tcp_slowtmr+0x664>)
 8016a0e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8016a12:	4915      	ldr	r1, [pc, #84]	; (8016a68 <tcp_slowtmr+0x67c>)
 8016a14:	4810      	ldr	r0, [pc, #64]	; (8016a58 <tcp_slowtmr+0x66c>)
 8016a16:	f008 fdc3 	bl	801f5a0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8016a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a1c:	68db      	ldr	r3, [r3, #12]
 8016a1e:	4a10      	ldr	r2, [pc, #64]	; (8016a60 <tcp_slowtmr+0x674>)
 8016a20:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8016a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a24:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8016a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a28:	68db      	ldr	r3, [r3, #12]
 8016a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016a2c:	69f8      	ldr	r0, [r7, #28]
 8016a2e:	f7fe fe23 	bl	8015678 <tcp_free>
 8016a32:	e004      	b.n	8016a3e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8016a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a3a:	68db      	ldr	r3, [r3, #12]
 8016a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8016a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d1a9      	bne.n	8016998 <tcp_slowtmr+0x5ac>
    }
  }
}
 8016a44:	bf00      	nop
 8016a46:	bf00      	nop
 8016a48:	3730      	adds	r7, #48	; 0x30
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8016a4e:	bf00      	nop
 8016a50:	08022084 	.word	0x08022084
 8016a54:	08022514 	.word	0x08022514
 8016a58:	080220c8 	.word	0x080220c8
 8016a5c:	2000bfe8 	.word	0x2000bfe8
 8016a60:	2000bff8 	.word	0x2000bff8
 8016a64:	08022544 	.word	0x08022544
 8016a68:	0802256c 	.word	0x0802256c

08016a6c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b082      	sub	sp, #8
 8016a70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8016a72:	4b2d      	ldr	r3, [pc, #180]	; (8016b28 <tcp_fasttmr+0xbc>)
 8016a74:	781b      	ldrb	r3, [r3, #0]
 8016a76:	3301      	adds	r3, #1
 8016a78:	b2da      	uxtb	r2, r3
 8016a7a:	4b2b      	ldr	r3, [pc, #172]	; (8016b28 <tcp_fasttmr+0xbc>)
 8016a7c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8016a7e:	4b2b      	ldr	r3, [pc, #172]	; (8016b2c <tcp_fasttmr+0xc0>)
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016a84:	e048      	b.n	8016b18 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	7f9a      	ldrb	r2, [r3, #30]
 8016a8a:	4b27      	ldr	r3, [pc, #156]	; (8016b28 <tcp_fasttmr+0xbc>)
 8016a8c:	781b      	ldrb	r3, [r3, #0]
 8016a8e:	429a      	cmp	r2, r3
 8016a90:	d03f      	beq.n	8016b12 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8016a92:	4b25      	ldr	r3, [pc, #148]	; (8016b28 <tcp_fasttmr+0xbc>)
 8016a94:	781a      	ldrb	r2, [r3, #0]
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	8b5b      	ldrh	r3, [r3, #26]
 8016a9e:	f003 0301 	and.w	r3, r3, #1
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d010      	beq.n	8016ac8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	8b5b      	ldrh	r3, [r3, #26]
 8016aaa:	f043 0302 	orr.w	r3, r3, #2
 8016aae:	b29a      	uxth	r2, r3
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8016ab4:	6878      	ldr	r0, [r7, #4]
 8016ab6:	f003 fff5 	bl	801aaa4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	8b5b      	ldrh	r3, [r3, #26]
 8016abe:	f023 0303 	bic.w	r3, r3, #3
 8016ac2:	b29a      	uxth	r2, r3
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	8b5b      	ldrh	r3, [r3, #26]
 8016acc:	f003 0308 	and.w	r3, r3, #8
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d009      	beq.n	8016ae8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	8b5b      	ldrh	r3, [r3, #26]
 8016ad8:	f023 0308 	bic.w	r3, r3, #8
 8016adc:	b29a      	uxth	r2, r3
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016ae2:	6878      	ldr	r0, [r7, #4]
 8016ae4:	f7fe ff5c 	bl	80159a0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	68db      	ldr	r3, [r3, #12]
 8016aec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d00a      	beq.n	8016b0c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8016af6:	4b0e      	ldr	r3, [pc, #56]	; (8016b30 <tcp_fasttmr+0xc4>)
 8016af8:	2200      	movs	r2, #0
 8016afa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016afc:	6878      	ldr	r0, [r7, #4]
 8016afe:	f000 f819 	bl	8016b34 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016b02:	4b0b      	ldr	r3, [pc, #44]	; (8016b30 <tcp_fasttmr+0xc4>)
 8016b04:	781b      	ldrb	r3, [r3, #0]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d000      	beq.n	8016b0c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8016b0a:	e7b8      	b.n	8016a7e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8016b0c:	683b      	ldr	r3, [r7, #0]
 8016b0e:	607b      	str	r3, [r7, #4]
 8016b10:	e002      	b.n	8016b18 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	68db      	ldr	r3, [r3, #12]
 8016b16:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d1b3      	bne.n	8016a86 <tcp_fasttmr+0x1a>
    }
  }
}
 8016b1e:	bf00      	nop
 8016b20:	bf00      	nop
 8016b22:	3708      	adds	r7, #8
 8016b24:	46bd      	mov	sp, r7
 8016b26:	bd80      	pop	{r7, pc}
 8016b28:	2000bffe 	.word	0x2000bffe
 8016b2c:	2000bff4 	.word	0x2000bff4
 8016b30:	2000bffc 	.word	0x2000bffc

08016b34 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016b34:	b590      	push	{r4, r7, lr}
 8016b36:	b085      	sub	sp, #20
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d109      	bne.n	8016b56 <tcp_process_refused_data+0x22>
 8016b42:	4b37      	ldr	r3, [pc, #220]	; (8016c20 <tcp_process_refused_data+0xec>)
 8016b44:	f240 6209 	movw	r2, #1545	; 0x609
 8016b48:	4936      	ldr	r1, [pc, #216]	; (8016c24 <tcp_process_refused_data+0xf0>)
 8016b4a:	4837      	ldr	r0, [pc, #220]	; (8016c28 <tcp_process_refused_data+0xf4>)
 8016b4c:	f008 fd28 	bl	801f5a0 <iprintf>
 8016b50:	f06f 030f 	mvn.w	r3, #15
 8016b54:	e060      	b.n	8016c18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016b5a:	7b5b      	ldrb	r3, [r3, #13]
 8016b5c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016b62:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	2200      	movs	r2, #0
 8016b68:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d00b      	beq.n	8016b8c <tcp_process_refused_data+0x58>
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	6918      	ldr	r0, [r3, #16]
 8016b7e:	2300      	movs	r3, #0
 8016b80:	68ba      	ldr	r2, [r7, #8]
 8016b82:	6879      	ldr	r1, [r7, #4]
 8016b84:	47a0      	blx	r4
 8016b86:	4603      	mov	r3, r0
 8016b88:	73fb      	strb	r3, [r7, #15]
 8016b8a:	e007      	b.n	8016b9c <tcp_process_refused_data+0x68>
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	68ba      	ldr	r2, [r7, #8]
 8016b90:	6879      	ldr	r1, [r7, #4]
 8016b92:	2000      	movs	r0, #0
 8016b94:	f000 f8a4 	bl	8016ce0 <tcp_recv_null>
 8016b98:	4603      	mov	r3, r0
 8016b9a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d12a      	bne.n	8016bfa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8016ba4:	7bbb      	ldrb	r3, [r7, #14]
 8016ba6:	f003 0320 	and.w	r3, r3, #32
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d033      	beq.n	8016c16 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016bb2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016bb6:	d005      	beq.n	8016bc4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016bbc:	3301      	adds	r3, #1
 8016bbe:	b29a      	uxth	r2, r3
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d00b      	beq.n	8016be6 <tcp_process_refused_data+0xb2>
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	6918      	ldr	r0, [r3, #16]
 8016bd8:	2300      	movs	r3, #0
 8016bda:	2200      	movs	r2, #0
 8016bdc:	6879      	ldr	r1, [r7, #4]
 8016bde:	47a0      	blx	r4
 8016be0:	4603      	mov	r3, r0
 8016be2:	73fb      	strb	r3, [r7, #15]
 8016be4:	e001      	b.n	8016bea <tcp_process_refused_data+0xb6>
 8016be6:	2300      	movs	r3, #0
 8016be8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8016bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016bee:	f113 0f0d 	cmn.w	r3, #13
 8016bf2:	d110      	bne.n	8016c16 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016bf4:	f06f 030c 	mvn.w	r3, #12
 8016bf8:	e00e      	b.n	8016c18 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8016bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016bfe:	f113 0f0d 	cmn.w	r3, #13
 8016c02:	d102      	bne.n	8016c0a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016c04:	f06f 030c 	mvn.w	r3, #12
 8016c08:	e006      	b.n	8016c18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	68ba      	ldr	r2, [r7, #8]
 8016c0e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8016c10:	f06f 0304 	mvn.w	r3, #4
 8016c14:	e000      	b.n	8016c18 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8016c16:	2300      	movs	r3, #0
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	3714      	adds	r7, #20
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd90      	pop	{r4, r7, pc}
 8016c20:	08022084 	.word	0x08022084
 8016c24:	08022594 	.word	0x08022594
 8016c28:	080220c8 	.word	0x080220c8

08016c2c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b084      	sub	sp, #16
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016c34:	e007      	b.n	8016c46 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8016c3c:	6878      	ldr	r0, [r7, #4]
 8016c3e:	f000 f80a 	bl	8016c56 <tcp_seg_free>
    seg = next;
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d1f4      	bne.n	8016c36 <tcp_segs_free+0xa>
  }
}
 8016c4c:	bf00      	nop
 8016c4e:	bf00      	nop
 8016c50:	3710      	adds	r7, #16
 8016c52:	46bd      	mov	sp, r7
 8016c54:	bd80      	pop	{r7, pc}

08016c56 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8016c56:	b580      	push	{r7, lr}
 8016c58:	b082      	sub	sp, #8
 8016c5a:	af00      	add	r7, sp, #0
 8016c5c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d00c      	beq.n	8016c7e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	685b      	ldr	r3, [r3, #4]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d004      	beq.n	8016c76 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	685b      	ldr	r3, [r3, #4]
 8016c70:	4618      	mov	r0, r3
 8016c72:	f7fe fa45 	bl	8015100 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8016c76:	6879      	ldr	r1, [r7, #4]
 8016c78:	2003      	movs	r0, #3
 8016c7a:	f7fd fb9d 	bl	80143b8 <memp_free>
  }
}
 8016c7e:	bf00      	nop
 8016c80:	3708      	adds	r7, #8
 8016c82:	46bd      	mov	sp, r7
 8016c84:	bd80      	pop	{r7, pc}
	...

08016c88 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b084      	sub	sp, #16
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d106      	bne.n	8016ca4 <tcp_seg_copy+0x1c>
 8016c96:	4b0f      	ldr	r3, [pc, #60]	; (8016cd4 <tcp_seg_copy+0x4c>)
 8016c98:	f240 6282 	movw	r2, #1666	; 0x682
 8016c9c:	490e      	ldr	r1, [pc, #56]	; (8016cd8 <tcp_seg_copy+0x50>)
 8016c9e:	480f      	ldr	r0, [pc, #60]	; (8016cdc <tcp_seg_copy+0x54>)
 8016ca0:	f008 fc7e 	bl	801f5a0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8016ca4:	2003      	movs	r0, #3
 8016ca6:	f7fd fb11 	bl	80142cc <memp_malloc>
 8016caa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d101      	bne.n	8016cb6 <tcp_seg_copy+0x2e>
    return NULL;
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	e00a      	b.n	8016ccc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8016cb6:	2210      	movs	r2, #16
 8016cb8:	6879      	ldr	r1, [r7, #4]
 8016cba:	68f8      	ldr	r0, [r7, #12]
 8016cbc:	f008 fb60 	bl	801f380 <memcpy>
  pbuf_ref(cseg->p);
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	685b      	ldr	r3, [r3, #4]
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f7fe fac1 	bl	801524c <pbuf_ref>
  return cseg;
 8016cca:	68fb      	ldr	r3, [r7, #12]
}
 8016ccc:	4618      	mov	r0, r3
 8016cce:	3710      	adds	r7, #16
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	bd80      	pop	{r7, pc}
 8016cd4:	08022084 	.word	0x08022084
 8016cd8:	080225d8 	.word	0x080225d8
 8016cdc:	080220c8 	.word	0x080220c8

08016ce0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b084      	sub	sp, #16
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	60f8      	str	r0, [r7, #12]
 8016ce8:	60b9      	str	r1, [r7, #8]
 8016cea:	607a      	str	r2, [r7, #4]
 8016cec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016cee:	68bb      	ldr	r3, [r7, #8]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d109      	bne.n	8016d08 <tcp_recv_null+0x28>
 8016cf4:	4b12      	ldr	r3, [pc, #72]	; (8016d40 <tcp_recv_null+0x60>)
 8016cf6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016cfa:	4912      	ldr	r1, [pc, #72]	; (8016d44 <tcp_recv_null+0x64>)
 8016cfc:	4812      	ldr	r0, [pc, #72]	; (8016d48 <tcp_recv_null+0x68>)
 8016cfe:	f008 fc4f 	bl	801f5a0 <iprintf>
 8016d02:	f06f 030f 	mvn.w	r3, #15
 8016d06:	e016      	b.n	8016d36 <tcp_recv_null+0x56>

  if (p != NULL) {
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d009      	beq.n	8016d22 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	891b      	ldrh	r3, [r3, #8]
 8016d12:	4619      	mov	r1, r3
 8016d14:	68b8      	ldr	r0, [r7, #8]
 8016d16:	f7ff f9bb 	bl	8016090 <tcp_recved>
    pbuf_free(p);
 8016d1a:	6878      	ldr	r0, [r7, #4]
 8016d1c:	f7fe f9f0 	bl	8015100 <pbuf_free>
 8016d20:	e008      	b.n	8016d34 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8016d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d104      	bne.n	8016d34 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8016d2a:	68b8      	ldr	r0, [r7, #8]
 8016d2c:	f7fe fea2 	bl	8015a74 <tcp_close>
 8016d30:	4603      	mov	r3, r0
 8016d32:	e000      	b.n	8016d36 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8016d34:	2300      	movs	r3, #0
}
 8016d36:	4618      	mov	r0, r3
 8016d38:	3710      	adds	r7, #16
 8016d3a:	46bd      	mov	sp, r7
 8016d3c:	bd80      	pop	{r7, pc}
 8016d3e:	bf00      	nop
 8016d40:	08022084 	.word	0x08022084
 8016d44:	080225f4 	.word	0x080225f4
 8016d48:	080220c8 	.word	0x080220c8

08016d4c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b086      	sub	sp, #24
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	4603      	mov	r3, r0
 8016d54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8016d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	db01      	blt.n	8016d62 <tcp_kill_prio+0x16>
 8016d5e:	79fb      	ldrb	r3, [r7, #7]
 8016d60:	e000      	b.n	8016d64 <tcp_kill_prio+0x18>
 8016d62:	237f      	movs	r3, #127	; 0x7f
 8016d64:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8016d66:	7afb      	ldrb	r3, [r7, #11]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d034      	beq.n	8016dd6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016d6c:	7afb      	ldrb	r3, [r7, #11]
 8016d6e:	3b01      	subs	r3, #1
 8016d70:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8016d72:	2300      	movs	r3, #0
 8016d74:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016d76:	2300      	movs	r3, #0
 8016d78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016d7a:	4b19      	ldr	r3, [pc, #100]	; (8016de0 <tcp_kill_prio+0x94>)
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	617b      	str	r3, [r7, #20]
 8016d80:	e01f      	b.n	8016dc2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8016d82:	697b      	ldr	r3, [r7, #20]
 8016d84:	7d5b      	ldrb	r3, [r3, #21]
 8016d86:	7afa      	ldrb	r2, [r7, #11]
 8016d88:	429a      	cmp	r2, r3
 8016d8a:	d80c      	bhi.n	8016da6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016d8c:	697b      	ldr	r3, [r7, #20]
 8016d8e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016d90:	7afa      	ldrb	r2, [r7, #11]
 8016d92:	429a      	cmp	r2, r3
 8016d94:	d112      	bne.n	8016dbc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016d96:	4b13      	ldr	r3, [pc, #76]	; (8016de4 <tcp_kill_prio+0x98>)
 8016d98:	681a      	ldr	r2, [r3, #0]
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	6a1b      	ldr	r3, [r3, #32]
 8016d9e:	1ad3      	subs	r3, r2, r3
 8016da0:	68fa      	ldr	r2, [r7, #12]
 8016da2:	429a      	cmp	r2, r3
 8016da4:	d80a      	bhi.n	8016dbc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8016da6:	4b0f      	ldr	r3, [pc, #60]	; (8016de4 <tcp_kill_prio+0x98>)
 8016da8:	681a      	ldr	r2, [r3, #0]
 8016daa:	697b      	ldr	r3, [r7, #20]
 8016dac:	6a1b      	ldr	r3, [r3, #32]
 8016dae:	1ad3      	subs	r3, r2, r3
 8016db0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8016db2:	697b      	ldr	r3, [r7, #20]
 8016db4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	7d5b      	ldrb	r3, [r3, #21]
 8016dba:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016dbc:	697b      	ldr	r3, [r7, #20]
 8016dbe:	68db      	ldr	r3, [r3, #12]
 8016dc0:	617b      	str	r3, [r7, #20]
 8016dc2:	697b      	ldr	r3, [r7, #20]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d1dc      	bne.n	8016d82 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8016dc8:	693b      	ldr	r3, [r7, #16]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d004      	beq.n	8016dd8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016dce:	6938      	ldr	r0, [r7, #16]
 8016dd0:	f7fe ff96 	bl	8015d00 <tcp_abort>
 8016dd4:	e000      	b.n	8016dd8 <tcp_kill_prio+0x8c>
    return;
 8016dd6:	bf00      	nop
  }
}
 8016dd8:	3718      	adds	r7, #24
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	bd80      	pop	{r7, pc}
 8016dde:	bf00      	nop
 8016de0:	2000bff4 	.word	0x2000bff4
 8016de4:	2000bfe8 	.word	0x2000bfe8

08016de8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b086      	sub	sp, #24
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	4603      	mov	r3, r0
 8016df0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8016df2:	79fb      	ldrb	r3, [r7, #7]
 8016df4:	2b08      	cmp	r3, #8
 8016df6:	d009      	beq.n	8016e0c <tcp_kill_state+0x24>
 8016df8:	79fb      	ldrb	r3, [r7, #7]
 8016dfa:	2b09      	cmp	r3, #9
 8016dfc:	d006      	beq.n	8016e0c <tcp_kill_state+0x24>
 8016dfe:	4b1a      	ldr	r3, [pc, #104]	; (8016e68 <tcp_kill_state+0x80>)
 8016e00:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8016e04:	4919      	ldr	r1, [pc, #100]	; (8016e6c <tcp_kill_state+0x84>)
 8016e06:	481a      	ldr	r0, [pc, #104]	; (8016e70 <tcp_kill_state+0x88>)
 8016e08:	f008 fbca 	bl	801f5a0 <iprintf>

  inactivity = 0;
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016e10:	2300      	movs	r3, #0
 8016e12:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016e14:	4b17      	ldr	r3, [pc, #92]	; (8016e74 <tcp_kill_state+0x8c>)
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	617b      	str	r3, [r7, #20]
 8016e1a:	e017      	b.n	8016e4c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8016e1c:	697b      	ldr	r3, [r7, #20]
 8016e1e:	7d1b      	ldrb	r3, [r3, #20]
 8016e20:	79fa      	ldrb	r2, [r7, #7]
 8016e22:	429a      	cmp	r2, r3
 8016e24:	d10f      	bne.n	8016e46 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016e26:	4b14      	ldr	r3, [pc, #80]	; (8016e78 <tcp_kill_state+0x90>)
 8016e28:	681a      	ldr	r2, [r3, #0]
 8016e2a:	697b      	ldr	r3, [r7, #20]
 8016e2c:	6a1b      	ldr	r3, [r3, #32]
 8016e2e:	1ad3      	subs	r3, r2, r3
 8016e30:	68fa      	ldr	r2, [r7, #12]
 8016e32:	429a      	cmp	r2, r3
 8016e34:	d807      	bhi.n	8016e46 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8016e36:	4b10      	ldr	r3, [pc, #64]	; (8016e78 <tcp_kill_state+0x90>)
 8016e38:	681a      	ldr	r2, [r3, #0]
 8016e3a:	697b      	ldr	r3, [r7, #20]
 8016e3c:	6a1b      	ldr	r3, [r3, #32]
 8016e3e:	1ad3      	subs	r3, r2, r3
 8016e40:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8016e42:	697b      	ldr	r3, [r7, #20]
 8016e44:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016e46:	697b      	ldr	r3, [r7, #20]
 8016e48:	68db      	ldr	r3, [r3, #12]
 8016e4a:	617b      	str	r3, [r7, #20]
 8016e4c:	697b      	ldr	r3, [r7, #20]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d1e4      	bne.n	8016e1c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8016e52:	693b      	ldr	r3, [r7, #16]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d003      	beq.n	8016e60 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8016e58:	2100      	movs	r1, #0
 8016e5a:	6938      	ldr	r0, [r7, #16]
 8016e5c:	f7fe fe92 	bl	8015b84 <tcp_abandon>
  }
}
 8016e60:	bf00      	nop
 8016e62:	3718      	adds	r7, #24
 8016e64:	46bd      	mov	sp, r7
 8016e66:	bd80      	pop	{r7, pc}
 8016e68:	08022084 	.word	0x08022084
 8016e6c:	08022610 	.word	0x08022610
 8016e70:	080220c8 	.word	0x080220c8
 8016e74:	2000bff4 	.word	0x2000bff4
 8016e78:	2000bfe8 	.word	0x2000bfe8

08016e7c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b084      	sub	sp, #16
 8016e80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8016e82:	2300      	movs	r3, #0
 8016e84:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8016e86:	2300      	movs	r3, #0
 8016e88:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016e8a:	4b12      	ldr	r3, [pc, #72]	; (8016ed4 <tcp_kill_timewait+0x58>)
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	60fb      	str	r3, [r7, #12]
 8016e90:	e012      	b.n	8016eb8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016e92:	4b11      	ldr	r3, [pc, #68]	; (8016ed8 <tcp_kill_timewait+0x5c>)
 8016e94:	681a      	ldr	r2, [r3, #0]
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	6a1b      	ldr	r3, [r3, #32]
 8016e9a:	1ad3      	subs	r3, r2, r3
 8016e9c:	687a      	ldr	r2, [r7, #4]
 8016e9e:	429a      	cmp	r2, r3
 8016ea0:	d807      	bhi.n	8016eb2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8016ea2:	4b0d      	ldr	r3, [pc, #52]	; (8016ed8 <tcp_kill_timewait+0x5c>)
 8016ea4:	681a      	ldr	r2, [r3, #0]
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	6a1b      	ldr	r3, [r3, #32]
 8016eaa:	1ad3      	subs	r3, r2, r3
 8016eac:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	68db      	ldr	r3, [r3, #12]
 8016eb6:	60fb      	str	r3, [r7, #12]
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d1e9      	bne.n	8016e92 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d002      	beq.n	8016eca <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016ec4:	68b8      	ldr	r0, [r7, #8]
 8016ec6:	f7fe ff1b 	bl	8015d00 <tcp_abort>
  }
}
 8016eca:	bf00      	nop
 8016ecc:	3710      	adds	r7, #16
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bd80      	pop	{r7, pc}
 8016ed2:	bf00      	nop
 8016ed4:	2000bff8 	.word	0x2000bff8
 8016ed8:	2000bfe8 	.word	0x2000bfe8

08016edc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b082      	sub	sp, #8
 8016ee0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8016ee2:	4b10      	ldr	r3, [pc, #64]	; (8016f24 <tcp_handle_closepend+0x48>)
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016ee8:	e014      	b.n	8016f14 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	68db      	ldr	r3, [r3, #12]
 8016eee:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	8b5b      	ldrh	r3, [r3, #26]
 8016ef4:	f003 0308 	and.w	r3, r3, #8
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d009      	beq.n	8016f10 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	8b5b      	ldrh	r3, [r3, #26]
 8016f00:	f023 0308 	bic.w	r3, r3, #8
 8016f04:	b29a      	uxth	r2, r3
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8016f0a:	6878      	ldr	r0, [r7, #4]
 8016f0c:	f7fe fd48 	bl	80159a0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8016f10:	683b      	ldr	r3, [r7, #0]
 8016f12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d1e7      	bne.n	8016eea <tcp_handle_closepend+0xe>
  }
}
 8016f1a:	bf00      	nop
 8016f1c:	bf00      	nop
 8016f1e:	3708      	adds	r7, #8
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bd80      	pop	{r7, pc}
 8016f24:	2000bff4 	.word	0x2000bff4

08016f28 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b084      	sub	sp, #16
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	4603      	mov	r3, r0
 8016f30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016f32:	2001      	movs	r0, #1
 8016f34:	f7fd f9ca 	bl	80142cc <memp_malloc>
 8016f38:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d126      	bne.n	8016f8e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016f40:	f7ff ffcc 	bl	8016edc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016f44:	f7ff ff9a 	bl	8016e7c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016f48:	2001      	movs	r0, #1
 8016f4a:	f7fd f9bf 	bl	80142cc <memp_malloc>
 8016f4e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d11b      	bne.n	8016f8e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016f56:	2009      	movs	r0, #9
 8016f58:	f7ff ff46 	bl	8016de8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016f5c:	2001      	movs	r0, #1
 8016f5e:	f7fd f9b5 	bl	80142cc <memp_malloc>
 8016f62:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d111      	bne.n	8016f8e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016f6a:	2008      	movs	r0, #8
 8016f6c:	f7ff ff3c 	bl	8016de8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016f70:	2001      	movs	r0, #1
 8016f72:	f7fd f9ab 	bl	80142cc <memp_malloc>
 8016f76:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d107      	bne.n	8016f8e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016f7e:	79fb      	ldrb	r3, [r7, #7]
 8016f80:	4618      	mov	r0, r3
 8016f82:	f7ff fee3 	bl	8016d4c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016f86:	2001      	movs	r0, #1
 8016f88:	f7fd f9a0 	bl	80142cc <memp_malloc>
 8016f8c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d03f      	beq.n	8017014 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016f94:	229c      	movs	r2, #156	; 0x9c
 8016f96:	2100      	movs	r1, #0
 8016f98:	68f8      	ldr	r0, [r7, #12]
 8016f9a:	f008 fa19 	bl	801f3d0 <memset>
    pcb->prio = prio;
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	79fa      	ldrb	r2, [r7, #7]
 8016fa2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016faa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	22ff      	movs	r2, #255	; 0xff
 8016fc2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016fca:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	2206      	movs	r2, #6
 8016fd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	2206      	movs	r2, #6
 8016fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016fe0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	2201      	movs	r2, #1
 8016fe6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8016fea:	4b0d      	ldr	r3, [pc, #52]	; (8017020 <tcp_alloc+0xf8>)
 8016fec:	681a      	ldr	r2, [r3, #0]
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016ff2:	4b0c      	ldr	r3, [pc, #48]	; (8017024 <tcp_alloc+0xfc>)
 8016ff4:	781a      	ldrb	r2, [r3, #0]
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017000:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	4a08      	ldr	r2, [pc, #32]	; (8017028 <tcp_alloc+0x100>)
 8017008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	4a07      	ldr	r2, [pc, #28]	; (801702c <tcp_alloc+0x104>)
 8017010:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017014:	68fb      	ldr	r3, [r7, #12]
}
 8017016:	4618      	mov	r0, r3
 8017018:	3710      	adds	r7, #16
 801701a:	46bd      	mov	sp, r7
 801701c:	bd80      	pop	{r7, pc}
 801701e:	bf00      	nop
 8017020:	2000bfe8 	.word	0x2000bfe8
 8017024:	2000bffe 	.word	0x2000bffe
 8017028:	08016ce1 	.word	0x08016ce1
 801702c:	006ddd00 	.word	0x006ddd00

08017030 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017030:	b580      	push	{r7, lr}
 8017032:	b084      	sub	sp, #16
 8017034:	af00      	add	r7, sp, #0
 8017036:	4603      	mov	r3, r0
 8017038:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801703a:	2040      	movs	r0, #64	; 0x40
 801703c:	f7ff ff74 	bl	8016f28 <tcp_alloc>
 8017040:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017042:	68fb      	ldr	r3, [r7, #12]
}
 8017044:	4618      	mov	r0, r3
 8017046:	3710      	adds	r7, #16
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}

0801704c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801704c:	b480      	push	{r7}
 801704e:	b083      	sub	sp, #12
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
 8017054:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d002      	beq.n	8017062 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	683a      	ldr	r2, [r7, #0]
 8017060:	611a      	str	r2, [r3, #16]
  }
}
 8017062:	bf00      	nop
 8017064:	370c      	adds	r7, #12
 8017066:	46bd      	mov	sp, r7
 8017068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706c:	4770      	bx	lr
	...

08017070 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b082      	sub	sp, #8
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
 8017078:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d00e      	beq.n	801709e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	7d1b      	ldrb	r3, [r3, #20]
 8017084:	2b01      	cmp	r3, #1
 8017086:	d106      	bne.n	8017096 <tcp_recv+0x26>
 8017088:	4b07      	ldr	r3, [pc, #28]	; (80170a8 <tcp_recv+0x38>)
 801708a:	f240 72df 	movw	r2, #2015	; 0x7df
 801708e:	4907      	ldr	r1, [pc, #28]	; (80170ac <tcp_recv+0x3c>)
 8017090:	4807      	ldr	r0, [pc, #28]	; (80170b0 <tcp_recv+0x40>)
 8017092:	f008 fa85 	bl	801f5a0 <iprintf>
    pcb->recv = recv;
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	683a      	ldr	r2, [r7, #0]
 801709a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801709e:	bf00      	nop
 80170a0:	3708      	adds	r7, #8
 80170a2:	46bd      	mov	sp, r7
 80170a4:	bd80      	pop	{r7, pc}
 80170a6:	bf00      	nop
 80170a8:	08022084 	.word	0x08022084
 80170ac:	08022620 	.word	0x08022620
 80170b0:	080220c8 	.word	0x080220c8

080170b4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b082      	sub	sp, #8
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	6078      	str	r0, [r7, #4]
 80170bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d00e      	beq.n	80170e2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	7d1b      	ldrb	r3, [r3, #20]
 80170c8:	2b01      	cmp	r3, #1
 80170ca:	d106      	bne.n	80170da <tcp_sent+0x26>
 80170cc:	4b07      	ldr	r3, [pc, #28]	; (80170ec <tcp_sent+0x38>)
 80170ce:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80170d2:	4907      	ldr	r1, [pc, #28]	; (80170f0 <tcp_sent+0x3c>)
 80170d4:	4807      	ldr	r0, [pc, #28]	; (80170f4 <tcp_sent+0x40>)
 80170d6:	f008 fa63 	bl	801f5a0 <iprintf>
    pcb->sent = sent;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	683a      	ldr	r2, [r7, #0]
 80170de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80170e2:	bf00      	nop
 80170e4:	3708      	adds	r7, #8
 80170e6:	46bd      	mov	sp, r7
 80170e8:	bd80      	pop	{r7, pc}
 80170ea:	bf00      	nop
 80170ec:	08022084 	.word	0x08022084
 80170f0:	08022648 	.word	0x08022648
 80170f4:	080220c8 	.word	0x080220c8

080170f8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b082      	sub	sp, #8
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
 8017100:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d00e      	beq.n	8017126 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	7d1b      	ldrb	r3, [r3, #20]
 801710c:	2b01      	cmp	r3, #1
 801710e:	d106      	bne.n	801711e <tcp_err+0x26>
 8017110:	4b07      	ldr	r3, [pc, #28]	; (8017130 <tcp_err+0x38>)
 8017112:	f640 020d 	movw	r2, #2061	; 0x80d
 8017116:	4907      	ldr	r1, [pc, #28]	; (8017134 <tcp_err+0x3c>)
 8017118:	4807      	ldr	r0, [pc, #28]	; (8017138 <tcp_err+0x40>)
 801711a:	f008 fa41 	bl	801f5a0 <iprintf>
    pcb->errf = err;
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	683a      	ldr	r2, [r7, #0]
 8017122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8017126:	bf00      	nop
 8017128:	3708      	adds	r7, #8
 801712a:	46bd      	mov	sp, r7
 801712c:	bd80      	pop	{r7, pc}
 801712e:	bf00      	nop
 8017130:	08022084 	.word	0x08022084
 8017134:	08022670 	.word	0x08022670
 8017138:	080220c8 	.word	0x080220c8

0801713c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801713c:	b480      	push	{r7}
 801713e:	b085      	sub	sp, #20
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
 8017144:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d008      	beq.n	801715e <tcp_accept+0x22>
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	7d1b      	ldrb	r3, [r3, #20]
 8017150:	2b01      	cmp	r3, #1
 8017152:	d104      	bne.n	801715e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	683a      	ldr	r2, [r7, #0]
 801715c:	619a      	str	r2, [r3, #24]
  }
}
 801715e:	bf00      	nop
 8017160:	3714      	adds	r7, #20
 8017162:	46bd      	mov	sp, r7
 8017164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017168:	4770      	bx	lr
	...

0801716c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801716c:	b580      	push	{r7, lr}
 801716e:	b084      	sub	sp, #16
 8017170:	af00      	add	r7, sp, #0
 8017172:	60f8      	str	r0, [r7, #12]
 8017174:	60b9      	str	r1, [r7, #8]
 8017176:	4613      	mov	r3, r2
 8017178:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d107      	bne.n	8017190 <tcp_poll+0x24>
 8017180:	4b0e      	ldr	r3, [pc, #56]	; (80171bc <tcp_poll+0x50>)
 8017182:	f640 023d 	movw	r2, #2109	; 0x83d
 8017186:	490e      	ldr	r1, [pc, #56]	; (80171c0 <tcp_poll+0x54>)
 8017188:	480e      	ldr	r0, [pc, #56]	; (80171c4 <tcp_poll+0x58>)
 801718a:	f008 fa09 	bl	801f5a0 <iprintf>
 801718e:	e011      	b.n	80171b4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	7d1b      	ldrb	r3, [r3, #20]
 8017194:	2b01      	cmp	r3, #1
 8017196:	d106      	bne.n	80171a6 <tcp_poll+0x3a>
 8017198:	4b08      	ldr	r3, [pc, #32]	; (80171bc <tcp_poll+0x50>)
 801719a:	f640 023e 	movw	r2, #2110	; 0x83e
 801719e:	490a      	ldr	r1, [pc, #40]	; (80171c8 <tcp_poll+0x5c>)
 80171a0:	4808      	ldr	r0, [pc, #32]	; (80171c4 <tcp_poll+0x58>)
 80171a2:	f008 f9fd 	bl	801f5a0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	68ba      	ldr	r2, [r7, #8]
 80171aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	79fa      	ldrb	r2, [r7, #7]
 80171b2:	775a      	strb	r2, [r3, #29]
}
 80171b4:	3710      	adds	r7, #16
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}
 80171ba:	bf00      	nop
 80171bc:	08022084 	.word	0x08022084
 80171c0:	08022698 	.word	0x08022698
 80171c4:	080220c8 	.word	0x080220c8
 80171c8:	080226b0 	.word	0x080226b0

080171cc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b082      	sub	sp, #8
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d107      	bne.n	80171ea <tcp_pcb_purge+0x1e>
 80171da:	4b21      	ldr	r3, [pc, #132]	; (8017260 <tcp_pcb_purge+0x94>)
 80171dc:	f640 0251 	movw	r2, #2129	; 0x851
 80171e0:	4920      	ldr	r1, [pc, #128]	; (8017264 <tcp_pcb_purge+0x98>)
 80171e2:	4821      	ldr	r0, [pc, #132]	; (8017268 <tcp_pcb_purge+0x9c>)
 80171e4:	f008 f9dc 	bl	801f5a0 <iprintf>
 80171e8:	e037      	b.n	801725a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	7d1b      	ldrb	r3, [r3, #20]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d033      	beq.n	801725a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80171f6:	2b0a      	cmp	r3, #10
 80171f8:	d02f      	beq.n	801725a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80171fe:	2b01      	cmp	r3, #1
 8017200:	d02b      	beq.n	801725a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017206:	2b00      	cmp	r3, #0
 8017208:	d007      	beq.n	801721a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801720e:	4618      	mov	r0, r3
 8017210:	f7fd ff76 	bl	8015100 <pbuf_free>
      pcb->refused_data = NULL;
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	2200      	movs	r2, #0
 8017218:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801721e:	2b00      	cmp	r3, #0
 8017220:	d002      	beq.n	8017228 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017222:	6878      	ldr	r0, [r7, #4]
 8017224:	f000 f986 	bl	8017534 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801722e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017234:	4618      	mov	r0, r3
 8017236:	f7ff fcf9 	bl	8016c2c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801723e:	4618      	mov	r0, r3
 8017240:	f7ff fcf4 	bl	8016c2c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	2200      	movs	r2, #0
 8017248:	66da      	str	r2, [r3, #108]	; 0x6c
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	2200      	movs	r2, #0
 8017256:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801725a:	3708      	adds	r7, #8
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}
 8017260:	08022084 	.word	0x08022084
 8017264:	080226d0 	.word	0x080226d0
 8017268:	080220c8 	.word	0x080220c8

0801726c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b084      	sub	sp, #16
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
 8017274:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d106      	bne.n	801728a <tcp_pcb_remove+0x1e>
 801727c:	4b3e      	ldr	r3, [pc, #248]	; (8017378 <tcp_pcb_remove+0x10c>)
 801727e:	f640 0283 	movw	r2, #2179	; 0x883
 8017282:	493e      	ldr	r1, [pc, #248]	; (801737c <tcp_pcb_remove+0x110>)
 8017284:	483e      	ldr	r0, [pc, #248]	; (8017380 <tcp_pcb_remove+0x114>)
 8017286:	f008 f98b 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d106      	bne.n	801729e <tcp_pcb_remove+0x32>
 8017290:	4b39      	ldr	r3, [pc, #228]	; (8017378 <tcp_pcb_remove+0x10c>)
 8017292:	f640 0284 	movw	r2, #2180	; 0x884
 8017296:	493b      	ldr	r1, [pc, #236]	; (8017384 <tcp_pcb_remove+0x118>)
 8017298:	4839      	ldr	r0, [pc, #228]	; (8017380 <tcp_pcb_remove+0x114>)
 801729a:	f008 f981 	bl	801f5a0 <iprintf>

  TCP_RMV(pcblist, pcb);
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	683a      	ldr	r2, [r7, #0]
 80172a4:	429a      	cmp	r2, r3
 80172a6:	d105      	bne.n	80172b4 <tcp_pcb_remove+0x48>
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	68da      	ldr	r2, [r3, #12]
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	601a      	str	r2, [r3, #0]
 80172b2:	e013      	b.n	80172dc <tcp_pcb_remove+0x70>
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	60fb      	str	r3, [r7, #12]
 80172ba:	e00c      	b.n	80172d6 <tcp_pcb_remove+0x6a>
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	68db      	ldr	r3, [r3, #12]
 80172c0:	683a      	ldr	r2, [r7, #0]
 80172c2:	429a      	cmp	r2, r3
 80172c4:	d104      	bne.n	80172d0 <tcp_pcb_remove+0x64>
 80172c6:	683b      	ldr	r3, [r7, #0]
 80172c8:	68da      	ldr	r2, [r3, #12]
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	60da      	str	r2, [r3, #12]
 80172ce:	e005      	b.n	80172dc <tcp_pcb_remove+0x70>
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	68db      	ldr	r3, [r3, #12]
 80172d4:	60fb      	str	r3, [r7, #12]
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d1ef      	bne.n	80172bc <tcp_pcb_remove+0x50>
 80172dc:	683b      	ldr	r3, [r7, #0]
 80172de:	2200      	movs	r2, #0
 80172e0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80172e2:	6838      	ldr	r0, [r7, #0]
 80172e4:	f7ff ff72 	bl	80171cc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80172e8:	683b      	ldr	r3, [r7, #0]
 80172ea:	7d1b      	ldrb	r3, [r3, #20]
 80172ec:	2b0a      	cmp	r3, #10
 80172ee:	d013      	beq.n	8017318 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80172f0:	683b      	ldr	r3, [r7, #0]
 80172f2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80172f4:	2b01      	cmp	r3, #1
 80172f6:	d00f      	beq.n	8017318 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	8b5b      	ldrh	r3, [r3, #26]
 80172fc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017300:	2b00      	cmp	r3, #0
 8017302:	d009      	beq.n	8017318 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017304:	683b      	ldr	r3, [r7, #0]
 8017306:	8b5b      	ldrh	r3, [r3, #26]
 8017308:	f043 0302 	orr.w	r3, r3, #2
 801730c:	b29a      	uxth	r2, r3
 801730e:	683b      	ldr	r3, [r7, #0]
 8017310:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017312:	6838      	ldr	r0, [r7, #0]
 8017314:	f003 fbc6 	bl	801aaa4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017318:	683b      	ldr	r3, [r7, #0]
 801731a:	7d1b      	ldrb	r3, [r3, #20]
 801731c:	2b01      	cmp	r3, #1
 801731e:	d020      	beq.n	8017362 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017320:	683b      	ldr	r3, [r7, #0]
 8017322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017324:	2b00      	cmp	r3, #0
 8017326:	d006      	beq.n	8017336 <tcp_pcb_remove+0xca>
 8017328:	4b13      	ldr	r3, [pc, #76]	; (8017378 <tcp_pcb_remove+0x10c>)
 801732a:	f640 0293 	movw	r2, #2195	; 0x893
 801732e:	4916      	ldr	r1, [pc, #88]	; (8017388 <tcp_pcb_remove+0x11c>)
 8017330:	4813      	ldr	r0, [pc, #76]	; (8017380 <tcp_pcb_remove+0x114>)
 8017332:	f008 f935 	bl	801f5a0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017336:	683b      	ldr	r3, [r7, #0]
 8017338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801733a:	2b00      	cmp	r3, #0
 801733c:	d006      	beq.n	801734c <tcp_pcb_remove+0xe0>
 801733e:	4b0e      	ldr	r3, [pc, #56]	; (8017378 <tcp_pcb_remove+0x10c>)
 8017340:	f640 0294 	movw	r2, #2196	; 0x894
 8017344:	4911      	ldr	r1, [pc, #68]	; (801738c <tcp_pcb_remove+0x120>)
 8017346:	480e      	ldr	r0, [pc, #56]	; (8017380 <tcp_pcb_remove+0x114>)
 8017348:	f008 f92a 	bl	801f5a0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801734c:	683b      	ldr	r3, [r7, #0]
 801734e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017350:	2b00      	cmp	r3, #0
 8017352:	d006      	beq.n	8017362 <tcp_pcb_remove+0xf6>
 8017354:	4b08      	ldr	r3, [pc, #32]	; (8017378 <tcp_pcb_remove+0x10c>)
 8017356:	f640 0296 	movw	r2, #2198	; 0x896
 801735a:	490d      	ldr	r1, [pc, #52]	; (8017390 <tcp_pcb_remove+0x124>)
 801735c:	4808      	ldr	r0, [pc, #32]	; (8017380 <tcp_pcb_remove+0x114>)
 801735e:	f008 f91f 	bl	801f5a0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017362:	683b      	ldr	r3, [r7, #0]
 8017364:	2200      	movs	r2, #0
 8017366:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017368:	683b      	ldr	r3, [r7, #0]
 801736a:	2200      	movs	r2, #0
 801736c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801736e:	bf00      	nop
 8017370:	3710      	adds	r7, #16
 8017372:	46bd      	mov	sp, r7
 8017374:	bd80      	pop	{r7, pc}
 8017376:	bf00      	nop
 8017378:	08022084 	.word	0x08022084
 801737c:	080226ec 	.word	0x080226ec
 8017380:	080220c8 	.word	0x080220c8
 8017384:	08022708 	.word	0x08022708
 8017388:	08022728 	.word	0x08022728
 801738c:	08022740 	.word	0x08022740
 8017390:	0802275c 	.word	0x0802275c

08017394 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b082      	sub	sp, #8
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d106      	bne.n	80173b0 <tcp_next_iss+0x1c>
 80173a2:	4b0a      	ldr	r3, [pc, #40]	; (80173cc <tcp_next_iss+0x38>)
 80173a4:	f640 02af 	movw	r2, #2223	; 0x8af
 80173a8:	4909      	ldr	r1, [pc, #36]	; (80173d0 <tcp_next_iss+0x3c>)
 80173aa:	480a      	ldr	r0, [pc, #40]	; (80173d4 <tcp_next_iss+0x40>)
 80173ac:	f008 f8f8 	bl	801f5a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80173b0:	4b09      	ldr	r3, [pc, #36]	; (80173d8 <tcp_next_iss+0x44>)
 80173b2:	681a      	ldr	r2, [r3, #0]
 80173b4:	4b09      	ldr	r3, [pc, #36]	; (80173dc <tcp_next_iss+0x48>)
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	4413      	add	r3, r2
 80173ba:	4a07      	ldr	r2, [pc, #28]	; (80173d8 <tcp_next_iss+0x44>)
 80173bc:	6013      	str	r3, [r2, #0]
  return iss;
 80173be:	4b06      	ldr	r3, [pc, #24]	; (80173d8 <tcp_next_iss+0x44>)
 80173c0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80173c2:	4618      	mov	r0, r3
 80173c4:	3708      	adds	r7, #8
 80173c6:	46bd      	mov	sp, r7
 80173c8:	bd80      	pop	{r7, pc}
 80173ca:	bf00      	nop
 80173cc:	08022084 	.word	0x08022084
 80173d0:	08022774 	.word	0x08022774
 80173d4:	080220c8 	.word	0x080220c8
 80173d8:	2000002c 	.word	0x2000002c
 80173dc:	2000bfe8 	.word	0x2000bfe8

080173e0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b086      	sub	sp, #24
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	4603      	mov	r3, r0
 80173e8:	60b9      	str	r1, [r7, #8]
 80173ea:	607a      	str	r2, [r7, #4]
 80173ec:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d106      	bne.n	8017402 <tcp_eff_send_mss_netif+0x22>
 80173f4:	4b14      	ldr	r3, [pc, #80]	; (8017448 <tcp_eff_send_mss_netif+0x68>)
 80173f6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80173fa:	4914      	ldr	r1, [pc, #80]	; (801744c <tcp_eff_send_mss_netif+0x6c>)
 80173fc:	4814      	ldr	r0, [pc, #80]	; (8017450 <tcp_eff_send_mss_netif+0x70>)
 80173fe:	f008 f8cf 	bl	801f5a0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017402:	68bb      	ldr	r3, [r7, #8]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d101      	bne.n	801740c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8017408:	89fb      	ldrh	r3, [r7, #14]
 801740a:	e019      	b.n	8017440 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801740c:	68bb      	ldr	r3, [r7, #8]
 801740e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017410:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017412:	8afb      	ldrh	r3, [r7, #22]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d012      	beq.n	801743e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8017418:	2328      	movs	r3, #40	; 0x28
 801741a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801741c:	8afa      	ldrh	r2, [r7, #22]
 801741e:	8abb      	ldrh	r3, [r7, #20]
 8017420:	429a      	cmp	r2, r3
 8017422:	d904      	bls.n	801742e <tcp_eff_send_mss_netif+0x4e>
 8017424:	8afa      	ldrh	r2, [r7, #22]
 8017426:	8abb      	ldrh	r3, [r7, #20]
 8017428:	1ad3      	subs	r3, r2, r3
 801742a:	b29b      	uxth	r3, r3
 801742c:	e000      	b.n	8017430 <tcp_eff_send_mss_netif+0x50>
 801742e:	2300      	movs	r3, #0
 8017430:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017432:	8a7a      	ldrh	r2, [r7, #18]
 8017434:	89fb      	ldrh	r3, [r7, #14]
 8017436:	4293      	cmp	r3, r2
 8017438:	bf28      	it	cs
 801743a:	4613      	movcs	r3, r2
 801743c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801743e:	89fb      	ldrh	r3, [r7, #14]
}
 8017440:	4618      	mov	r0, r3
 8017442:	3718      	adds	r7, #24
 8017444:	46bd      	mov	sp, r7
 8017446:	bd80      	pop	{r7, pc}
 8017448:	08022084 	.word	0x08022084
 801744c:	08022790 	.word	0x08022790
 8017450:	080220c8 	.word	0x080220c8

08017454 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017454:	b580      	push	{r7, lr}
 8017456:	b084      	sub	sp, #16
 8017458:	af00      	add	r7, sp, #0
 801745a:	6078      	str	r0, [r7, #4]
 801745c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801745e:	683b      	ldr	r3, [r7, #0]
 8017460:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	2b00      	cmp	r3, #0
 8017466:	d119      	bne.n	801749c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8017468:	4b10      	ldr	r3, [pc, #64]	; (80174ac <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801746a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801746e:	4910      	ldr	r1, [pc, #64]	; (80174b0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8017470:	4810      	ldr	r0, [pc, #64]	; (80174b4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017472:	f008 f895 	bl	801f5a0 <iprintf>

  while (pcb != NULL) {
 8017476:	e011      	b.n	801749c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	681a      	ldr	r2, [r3, #0]
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	429a      	cmp	r2, r3
 8017482:	d108      	bne.n	8017496 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	68db      	ldr	r3, [r3, #12]
 8017488:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801748a:	68f8      	ldr	r0, [r7, #12]
 801748c:	f7fe fc38 	bl	8015d00 <tcp_abort>
      pcb = next;
 8017490:	68bb      	ldr	r3, [r7, #8]
 8017492:	60fb      	str	r3, [r7, #12]
 8017494:	e002      	b.n	801749c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	68db      	ldr	r3, [r3, #12]
 801749a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d1ea      	bne.n	8017478 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80174a2:	bf00      	nop
 80174a4:	bf00      	nop
 80174a6:	3710      	adds	r7, #16
 80174a8:	46bd      	mov	sp, r7
 80174aa:	bd80      	pop	{r7, pc}
 80174ac:	08022084 	.word	0x08022084
 80174b0:	080227b8 	.word	0x080227b8
 80174b4:	080220c8 	.word	0x080220c8

080174b8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b084      	sub	sp, #16
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
 80174c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d02a      	beq.n	801751e <tcp_netif_ip_addr_changed+0x66>
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d026      	beq.n	801751e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80174d0:	4b15      	ldr	r3, [pc, #84]	; (8017528 <tcp_netif_ip_addr_changed+0x70>)
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	4619      	mov	r1, r3
 80174d6:	6878      	ldr	r0, [r7, #4]
 80174d8:	f7ff ffbc 	bl	8017454 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80174dc:	4b13      	ldr	r3, [pc, #76]	; (801752c <tcp_netif_ip_addr_changed+0x74>)
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	4619      	mov	r1, r3
 80174e2:	6878      	ldr	r0, [r7, #4]
 80174e4:	f7ff ffb6 	bl	8017454 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80174e8:	683b      	ldr	r3, [r7, #0]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d017      	beq.n	801751e <tcp_netif_ip_addr_changed+0x66>
 80174ee:	683b      	ldr	r3, [r7, #0]
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d013      	beq.n	801751e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80174f6:	4b0e      	ldr	r3, [pc, #56]	; (8017530 <tcp_netif_ip_addr_changed+0x78>)
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	60fb      	str	r3, [r7, #12]
 80174fc:	e00c      	b.n	8017518 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	681a      	ldr	r2, [r3, #0]
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	429a      	cmp	r2, r3
 8017508:	d103      	bne.n	8017512 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	681a      	ldr	r2, [r3, #0]
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	68db      	ldr	r3, [r3, #12]
 8017516:	60fb      	str	r3, [r7, #12]
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	2b00      	cmp	r3, #0
 801751c:	d1ef      	bne.n	80174fe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801751e:	bf00      	nop
 8017520:	3710      	adds	r7, #16
 8017522:	46bd      	mov	sp, r7
 8017524:	bd80      	pop	{r7, pc}
 8017526:	bf00      	nop
 8017528:	2000bff4 	.word	0x2000bff4
 801752c:	2000bfec 	.word	0x2000bfec
 8017530:	2000bff0 	.word	0x2000bff0

08017534 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b082      	sub	sp, #8
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017540:	2b00      	cmp	r3, #0
 8017542:	d007      	beq.n	8017554 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017548:	4618      	mov	r0, r3
 801754a:	f7ff fb6f 	bl	8016c2c <tcp_segs_free>
    pcb->ooseq = NULL;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	2200      	movs	r2, #0
 8017552:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017554:	bf00      	nop
 8017556:	3708      	adds	r7, #8
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}

0801755c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801755c:	b590      	push	{r4, r7, lr}
 801755e:	b08d      	sub	sp, #52	; 0x34
 8017560:	af04      	add	r7, sp, #16
 8017562:	6078      	str	r0, [r7, #4]
 8017564:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d105      	bne.n	8017578 <tcp_input+0x1c>
 801756c:	4b9b      	ldr	r3, [pc, #620]	; (80177dc <tcp_input+0x280>)
 801756e:	2283      	movs	r2, #131	; 0x83
 8017570:	499b      	ldr	r1, [pc, #620]	; (80177e0 <tcp_input+0x284>)
 8017572:	489c      	ldr	r0, [pc, #624]	; (80177e4 <tcp_input+0x288>)
 8017574:	f008 f814 	bl	801f5a0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	685b      	ldr	r3, [r3, #4]
 801757c:	4a9a      	ldr	r2, [pc, #616]	; (80177e8 <tcp_input+0x28c>)
 801757e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	895b      	ldrh	r3, [r3, #10]
 8017584:	2b13      	cmp	r3, #19
 8017586:	f240 83d1 	bls.w	8017d2c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801758a:	4b98      	ldr	r3, [pc, #608]	; (80177ec <tcp_input+0x290>)
 801758c:	695b      	ldr	r3, [r3, #20]
 801758e:	4a97      	ldr	r2, [pc, #604]	; (80177ec <tcp_input+0x290>)
 8017590:	6812      	ldr	r2, [r2, #0]
 8017592:	4611      	mov	r1, r2
 8017594:	4618      	mov	r0, r3
 8017596:	f006 fc3d 	bl	801de14 <ip4_addr_isbroadcast_u32>
 801759a:	4603      	mov	r3, r0
 801759c:	2b00      	cmp	r3, #0
 801759e:	f040 83c7 	bne.w	8017d30 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80175a2:	4b92      	ldr	r3, [pc, #584]	; (80177ec <tcp_input+0x290>)
 80175a4:	695b      	ldr	r3, [r3, #20]
 80175a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80175aa:	2be0      	cmp	r3, #224	; 0xe0
 80175ac:	f000 83c0 	beq.w	8017d30 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80175b0:	4b8d      	ldr	r3, [pc, #564]	; (80177e8 <tcp_input+0x28c>)
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	899b      	ldrh	r3, [r3, #12]
 80175b6:	b29b      	uxth	r3, r3
 80175b8:	4618      	mov	r0, r3
 80175ba:	f7fc f9af 	bl	801391c <lwip_htons>
 80175be:	4603      	mov	r3, r0
 80175c0:	0b1b      	lsrs	r3, r3, #12
 80175c2:	b29b      	uxth	r3, r3
 80175c4:	b2db      	uxtb	r3, r3
 80175c6:	009b      	lsls	r3, r3, #2
 80175c8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80175ca:	7cbb      	ldrb	r3, [r7, #18]
 80175cc:	2b13      	cmp	r3, #19
 80175ce:	f240 83b1 	bls.w	8017d34 <tcp_input+0x7d8>
 80175d2:	7cbb      	ldrb	r3, [r7, #18]
 80175d4:	b29a      	uxth	r2, r3
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	891b      	ldrh	r3, [r3, #8]
 80175da:	429a      	cmp	r2, r3
 80175dc:	f200 83aa 	bhi.w	8017d34 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80175e0:	7cbb      	ldrb	r3, [r7, #18]
 80175e2:	b29b      	uxth	r3, r3
 80175e4:	3b14      	subs	r3, #20
 80175e6:	b29a      	uxth	r2, r3
 80175e8:	4b81      	ldr	r3, [pc, #516]	; (80177f0 <tcp_input+0x294>)
 80175ea:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80175ec:	4b81      	ldr	r3, [pc, #516]	; (80177f4 <tcp_input+0x298>)
 80175ee:	2200      	movs	r2, #0
 80175f0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	895a      	ldrh	r2, [r3, #10]
 80175f6:	7cbb      	ldrb	r3, [r7, #18]
 80175f8:	b29b      	uxth	r3, r3
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d309      	bcc.n	8017612 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80175fe:	4b7c      	ldr	r3, [pc, #496]	; (80177f0 <tcp_input+0x294>)
 8017600:	881a      	ldrh	r2, [r3, #0]
 8017602:	4b7d      	ldr	r3, [pc, #500]	; (80177f8 <tcp_input+0x29c>)
 8017604:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8017606:	7cbb      	ldrb	r3, [r7, #18]
 8017608:	4619      	mov	r1, r3
 801760a:	6878      	ldr	r0, [r7, #4]
 801760c:	f7fd fcf2 	bl	8014ff4 <pbuf_remove_header>
 8017610:	e04e      	b.n	80176b0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	2b00      	cmp	r3, #0
 8017618:	d105      	bne.n	8017626 <tcp_input+0xca>
 801761a:	4b70      	ldr	r3, [pc, #448]	; (80177dc <tcp_input+0x280>)
 801761c:	22c2      	movs	r2, #194	; 0xc2
 801761e:	4977      	ldr	r1, [pc, #476]	; (80177fc <tcp_input+0x2a0>)
 8017620:	4870      	ldr	r0, [pc, #448]	; (80177e4 <tcp_input+0x288>)
 8017622:	f007 ffbd 	bl	801f5a0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8017626:	2114      	movs	r1, #20
 8017628:	6878      	ldr	r0, [r7, #4]
 801762a:	f7fd fce3 	bl	8014ff4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	895a      	ldrh	r2, [r3, #10]
 8017632:	4b71      	ldr	r3, [pc, #452]	; (80177f8 <tcp_input+0x29c>)
 8017634:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8017636:	4b6e      	ldr	r3, [pc, #440]	; (80177f0 <tcp_input+0x294>)
 8017638:	881a      	ldrh	r2, [r3, #0]
 801763a:	4b6f      	ldr	r3, [pc, #444]	; (80177f8 <tcp_input+0x29c>)
 801763c:	881b      	ldrh	r3, [r3, #0]
 801763e:	1ad3      	subs	r3, r2, r3
 8017640:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017642:	4b6d      	ldr	r3, [pc, #436]	; (80177f8 <tcp_input+0x29c>)
 8017644:	881b      	ldrh	r3, [r3, #0]
 8017646:	4619      	mov	r1, r3
 8017648:	6878      	ldr	r0, [r7, #4]
 801764a:	f7fd fcd3 	bl	8014ff4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	681b      	ldr	r3, [r3, #0]
 8017652:	895b      	ldrh	r3, [r3, #10]
 8017654:	8a3a      	ldrh	r2, [r7, #16]
 8017656:	429a      	cmp	r2, r3
 8017658:	f200 836e 	bhi.w	8017d38 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	685b      	ldr	r3, [r3, #4]
 8017662:	4a64      	ldr	r2, [pc, #400]	; (80177f4 <tcp_input+0x298>)
 8017664:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	8a3a      	ldrh	r2, [r7, #16]
 801766c:	4611      	mov	r1, r2
 801766e:	4618      	mov	r0, r3
 8017670:	f7fd fcc0 	bl	8014ff4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	891a      	ldrh	r2, [r3, #8]
 8017678:	8a3b      	ldrh	r3, [r7, #16]
 801767a:	1ad3      	subs	r3, r2, r3
 801767c:	b29a      	uxth	r2, r3
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	895b      	ldrh	r3, [r3, #10]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d005      	beq.n	8017696 <tcp_input+0x13a>
 801768a:	4b54      	ldr	r3, [pc, #336]	; (80177dc <tcp_input+0x280>)
 801768c:	22df      	movs	r2, #223	; 0xdf
 801768e:	495c      	ldr	r1, [pc, #368]	; (8017800 <tcp_input+0x2a4>)
 8017690:	4854      	ldr	r0, [pc, #336]	; (80177e4 <tcp_input+0x288>)
 8017692:	f007 ff85 	bl	801f5a0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	891a      	ldrh	r2, [r3, #8]
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	891b      	ldrh	r3, [r3, #8]
 80176a0:	429a      	cmp	r2, r3
 80176a2:	d005      	beq.n	80176b0 <tcp_input+0x154>
 80176a4:	4b4d      	ldr	r3, [pc, #308]	; (80177dc <tcp_input+0x280>)
 80176a6:	22e0      	movs	r2, #224	; 0xe0
 80176a8:	4956      	ldr	r1, [pc, #344]	; (8017804 <tcp_input+0x2a8>)
 80176aa:	484e      	ldr	r0, [pc, #312]	; (80177e4 <tcp_input+0x288>)
 80176ac:	f007 ff78 	bl	801f5a0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80176b0:	4b4d      	ldr	r3, [pc, #308]	; (80177e8 <tcp_input+0x28c>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	881b      	ldrh	r3, [r3, #0]
 80176b6:	b29b      	uxth	r3, r3
 80176b8:	4a4b      	ldr	r2, [pc, #300]	; (80177e8 <tcp_input+0x28c>)
 80176ba:	6814      	ldr	r4, [r2, #0]
 80176bc:	4618      	mov	r0, r3
 80176be:	f7fc f92d 	bl	801391c <lwip_htons>
 80176c2:	4603      	mov	r3, r0
 80176c4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80176c6:	4b48      	ldr	r3, [pc, #288]	; (80177e8 <tcp_input+0x28c>)
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	885b      	ldrh	r3, [r3, #2]
 80176cc:	b29b      	uxth	r3, r3
 80176ce:	4a46      	ldr	r2, [pc, #280]	; (80177e8 <tcp_input+0x28c>)
 80176d0:	6814      	ldr	r4, [r2, #0]
 80176d2:	4618      	mov	r0, r3
 80176d4:	f7fc f922 	bl	801391c <lwip_htons>
 80176d8:	4603      	mov	r3, r0
 80176da:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80176dc:	4b42      	ldr	r3, [pc, #264]	; (80177e8 <tcp_input+0x28c>)
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	685b      	ldr	r3, [r3, #4]
 80176e2:	4a41      	ldr	r2, [pc, #260]	; (80177e8 <tcp_input+0x28c>)
 80176e4:	6814      	ldr	r4, [r2, #0]
 80176e6:	4618      	mov	r0, r3
 80176e8:	f7fc f92d 	bl	8013946 <lwip_htonl>
 80176ec:	4603      	mov	r3, r0
 80176ee:	6063      	str	r3, [r4, #4]
 80176f0:	6863      	ldr	r3, [r4, #4]
 80176f2:	4a45      	ldr	r2, [pc, #276]	; (8017808 <tcp_input+0x2ac>)
 80176f4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80176f6:	4b3c      	ldr	r3, [pc, #240]	; (80177e8 <tcp_input+0x28c>)
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	689b      	ldr	r3, [r3, #8]
 80176fc:	4a3a      	ldr	r2, [pc, #232]	; (80177e8 <tcp_input+0x28c>)
 80176fe:	6814      	ldr	r4, [r2, #0]
 8017700:	4618      	mov	r0, r3
 8017702:	f7fc f920 	bl	8013946 <lwip_htonl>
 8017706:	4603      	mov	r3, r0
 8017708:	60a3      	str	r3, [r4, #8]
 801770a:	68a3      	ldr	r3, [r4, #8]
 801770c:	4a3f      	ldr	r2, [pc, #252]	; (801780c <tcp_input+0x2b0>)
 801770e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017710:	4b35      	ldr	r3, [pc, #212]	; (80177e8 <tcp_input+0x28c>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	89db      	ldrh	r3, [r3, #14]
 8017716:	b29b      	uxth	r3, r3
 8017718:	4a33      	ldr	r2, [pc, #204]	; (80177e8 <tcp_input+0x28c>)
 801771a:	6814      	ldr	r4, [r2, #0]
 801771c:	4618      	mov	r0, r3
 801771e:	f7fc f8fd 	bl	801391c <lwip_htons>
 8017722:	4603      	mov	r3, r0
 8017724:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017726:	4b30      	ldr	r3, [pc, #192]	; (80177e8 <tcp_input+0x28c>)
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	899b      	ldrh	r3, [r3, #12]
 801772c:	b29b      	uxth	r3, r3
 801772e:	4618      	mov	r0, r3
 8017730:	f7fc f8f4 	bl	801391c <lwip_htons>
 8017734:	4603      	mov	r3, r0
 8017736:	b2db      	uxtb	r3, r3
 8017738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801773c:	b2da      	uxtb	r2, r3
 801773e:	4b34      	ldr	r3, [pc, #208]	; (8017810 <tcp_input+0x2b4>)
 8017740:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	891a      	ldrh	r2, [r3, #8]
 8017746:	4b33      	ldr	r3, [pc, #204]	; (8017814 <tcp_input+0x2b8>)
 8017748:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801774a:	4b31      	ldr	r3, [pc, #196]	; (8017810 <tcp_input+0x2b4>)
 801774c:	781b      	ldrb	r3, [r3, #0]
 801774e:	f003 0303 	and.w	r3, r3, #3
 8017752:	2b00      	cmp	r3, #0
 8017754:	d00c      	beq.n	8017770 <tcp_input+0x214>
    tcplen++;
 8017756:	4b2f      	ldr	r3, [pc, #188]	; (8017814 <tcp_input+0x2b8>)
 8017758:	881b      	ldrh	r3, [r3, #0]
 801775a:	3301      	adds	r3, #1
 801775c:	b29a      	uxth	r2, r3
 801775e:	4b2d      	ldr	r3, [pc, #180]	; (8017814 <tcp_input+0x2b8>)
 8017760:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	891a      	ldrh	r2, [r3, #8]
 8017766:	4b2b      	ldr	r3, [pc, #172]	; (8017814 <tcp_input+0x2b8>)
 8017768:	881b      	ldrh	r3, [r3, #0]
 801776a:	429a      	cmp	r2, r3
 801776c:	f200 82e6 	bhi.w	8017d3c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017770:	2300      	movs	r3, #0
 8017772:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017774:	4b28      	ldr	r3, [pc, #160]	; (8017818 <tcp_input+0x2bc>)
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	61fb      	str	r3, [r7, #28]
 801777a:	e09d      	b.n	80178b8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801777c:	69fb      	ldr	r3, [r7, #28]
 801777e:	7d1b      	ldrb	r3, [r3, #20]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d105      	bne.n	8017790 <tcp_input+0x234>
 8017784:	4b15      	ldr	r3, [pc, #84]	; (80177dc <tcp_input+0x280>)
 8017786:	22fb      	movs	r2, #251	; 0xfb
 8017788:	4924      	ldr	r1, [pc, #144]	; (801781c <tcp_input+0x2c0>)
 801778a:	4816      	ldr	r0, [pc, #88]	; (80177e4 <tcp_input+0x288>)
 801778c:	f007 ff08 	bl	801f5a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017790:	69fb      	ldr	r3, [r7, #28]
 8017792:	7d1b      	ldrb	r3, [r3, #20]
 8017794:	2b0a      	cmp	r3, #10
 8017796:	d105      	bne.n	80177a4 <tcp_input+0x248>
 8017798:	4b10      	ldr	r3, [pc, #64]	; (80177dc <tcp_input+0x280>)
 801779a:	22fc      	movs	r2, #252	; 0xfc
 801779c:	4920      	ldr	r1, [pc, #128]	; (8017820 <tcp_input+0x2c4>)
 801779e:	4811      	ldr	r0, [pc, #68]	; (80177e4 <tcp_input+0x288>)
 80177a0:	f007 fefe 	bl	801f5a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80177a4:	69fb      	ldr	r3, [r7, #28]
 80177a6:	7d1b      	ldrb	r3, [r3, #20]
 80177a8:	2b01      	cmp	r3, #1
 80177aa:	d105      	bne.n	80177b8 <tcp_input+0x25c>
 80177ac:	4b0b      	ldr	r3, [pc, #44]	; (80177dc <tcp_input+0x280>)
 80177ae:	22fd      	movs	r2, #253	; 0xfd
 80177b0:	491c      	ldr	r1, [pc, #112]	; (8017824 <tcp_input+0x2c8>)
 80177b2:	480c      	ldr	r0, [pc, #48]	; (80177e4 <tcp_input+0x288>)
 80177b4:	f007 fef4 	bl	801f5a0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80177b8:	69fb      	ldr	r3, [r7, #28]
 80177ba:	7a1b      	ldrb	r3, [r3, #8]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d033      	beq.n	8017828 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80177c0:	69fb      	ldr	r3, [r7, #28]
 80177c2:	7a1a      	ldrb	r2, [r3, #8]
 80177c4:	4b09      	ldr	r3, [pc, #36]	; (80177ec <tcp_input+0x290>)
 80177c6:	685b      	ldr	r3, [r3, #4]
 80177c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80177cc:	3301      	adds	r3, #1
 80177ce:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80177d0:	429a      	cmp	r2, r3
 80177d2:	d029      	beq.n	8017828 <tcp_input+0x2cc>
      prev = pcb;
 80177d4:	69fb      	ldr	r3, [r7, #28]
 80177d6:	61bb      	str	r3, [r7, #24]
      continue;
 80177d8:	e06b      	b.n	80178b2 <tcp_input+0x356>
 80177da:	bf00      	nop
 80177dc:	080227ec 	.word	0x080227ec
 80177e0:	08022820 	.word	0x08022820
 80177e4:	08022838 	.word	0x08022838
 80177e8:	2000c010 	.word	0x2000c010
 80177ec:	200066d4 	.word	0x200066d4
 80177f0:	2000c014 	.word	0x2000c014
 80177f4:	2000c018 	.word	0x2000c018
 80177f8:	2000c016 	.word	0x2000c016
 80177fc:	08022860 	.word	0x08022860
 8017800:	08022870 	.word	0x08022870
 8017804:	0802287c 	.word	0x0802287c
 8017808:	2000c020 	.word	0x2000c020
 801780c:	2000c024 	.word	0x2000c024
 8017810:	2000c02c 	.word	0x2000c02c
 8017814:	2000c02a 	.word	0x2000c02a
 8017818:	2000bff4 	.word	0x2000bff4
 801781c:	0802289c 	.word	0x0802289c
 8017820:	080228c4 	.word	0x080228c4
 8017824:	080228f0 	.word	0x080228f0
    }

    if (pcb->remote_port == tcphdr->src &&
 8017828:	69fb      	ldr	r3, [r7, #28]
 801782a:	8b1a      	ldrh	r2, [r3, #24]
 801782c:	4b72      	ldr	r3, [pc, #456]	; (80179f8 <tcp_input+0x49c>)
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	881b      	ldrh	r3, [r3, #0]
 8017832:	b29b      	uxth	r3, r3
 8017834:	429a      	cmp	r2, r3
 8017836:	d13a      	bne.n	80178ae <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8017838:	69fb      	ldr	r3, [r7, #28]
 801783a:	8ada      	ldrh	r2, [r3, #22]
 801783c:	4b6e      	ldr	r3, [pc, #440]	; (80179f8 <tcp_input+0x49c>)
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	885b      	ldrh	r3, [r3, #2]
 8017842:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017844:	429a      	cmp	r2, r3
 8017846:	d132      	bne.n	80178ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017848:	69fb      	ldr	r3, [r7, #28]
 801784a:	685a      	ldr	r2, [r3, #4]
 801784c:	4b6b      	ldr	r3, [pc, #428]	; (80179fc <tcp_input+0x4a0>)
 801784e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017850:	429a      	cmp	r2, r3
 8017852:	d12c      	bne.n	80178ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017854:	69fb      	ldr	r3, [r7, #28]
 8017856:	681a      	ldr	r2, [r3, #0]
 8017858:	4b68      	ldr	r3, [pc, #416]	; (80179fc <tcp_input+0x4a0>)
 801785a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801785c:	429a      	cmp	r2, r3
 801785e:	d126      	bne.n	80178ae <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017860:	69fb      	ldr	r3, [r7, #28]
 8017862:	68db      	ldr	r3, [r3, #12]
 8017864:	69fa      	ldr	r2, [r7, #28]
 8017866:	429a      	cmp	r2, r3
 8017868:	d106      	bne.n	8017878 <tcp_input+0x31c>
 801786a:	4b65      	ldr	r3, [pc, #404]	; (8017a00 <tcp_input+0x4a4>)
 801786c:	f240 120d 	movw	r2, #269	; 0x10d
 8017870:	4964      	ldr	r1, [pc, #400]	; (8017a04 <tcp_input+0x4a8>)
 8017872:	4865      	ldr	r0, [pc, #404]	; (8017a08 <tcp_input+0x4ac>)
 8017874:	f007 fe94 	bl	801f5a0 <iprintf>
      if (prev != NULL) {
 8017878:	69bb      	ldr	r3, [r7, #24]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d00a      	beq.n	8017894 <tcp_input+0x338>
        prev->next = pcb->next;
 801787e:	69fb      	ldr	r3, [r7, #28]
 8017880:	68da      	ldr	r2, [r3, #12]
 8017882:	69bb      	ldr	r3, [r7, #24]
 8017884:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017886:	4b61      	ldr	r3, [pc, #388]	; (8017a0c <tcp_input+0x4b0>)
 8017888:	681a      	ldr	r2, [r3, #0]
 801788a:	69fb      	ldr	r3, [r7, #28]
 801788c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801788e:	4a5f      	ldr	r2, [pc, #380]	; (8017a0c <tcp_input+0x4b0>)
 8017890:	69fb      	ldr	r3, [r7, #28]
 8017892:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017894:	69fb      	ldr	r3, [r7, #28]
 8017896:	68db      	ldr	r3, [r3, #12]
 8017898:	69fa      	ldr	r2, [r7, #28]
 801789a:	429a      	cmp	r2, r3
 801789c:	d111      	bne.n	80178c2 <tcp_input+0x366>
 801789e:	4b58      	ldr	r3, [pc, #352]	; (8017a00 <tcp_input+0x4a4>)
 80178a0:	f240 1215 	movw	r2, #277	; 0x115
 80178a4:	495a      	ldr	r1, [pc, #360]	; (8017a10 <tcp_input+0x4b4>)
 80178a6:	4858      	ldr	r0, [pc, #352]	; (8017a08 <tcp_input+0x4ac>)
 80178a8:	f007 fe7a 	bl	801f5a0 <iprintf>
      break;
 80178ac:	e009      	b.n	80178c2 <tcp_input+0x366>
    }
    prev = pcb;
 80178ae:	69fb      	ldr	r3, [r7, #28]
 80178b0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80178b2:	69fb      	ldr	r3, [r7, #28]
 80178b4:	68db      	ldr	r3, [r3, #12]
 80178b6:	61fb      	str	r3, [r7, #28]
 80178b8:	69fb      	ldr	r3, [r7, #28]
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	f47f af5e 	bne.w	801777c <tcp_input+0x220>
 80178c0:	e000      	b.n	80178c4 <tcp_input+0x368>
      break;
 80178c2:	bf00      	nop
  }

  if (pcb == NULL) {
 80178c4:	69fb      	ldr	r3, [r7, #28]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	f040 80aa 	bne.w	8017a20 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80178cc:	4b51      	ldr	r3, [pc, #324]	; (8017a14 <tcp_input+0x4b8>)
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	61fb      	str	r3, [r7, #28]
 80178d2:	e03f      	b.n	8017954 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80178d4:	69fb      	ldr	r3, [r7, #28]
 80178d6:	7d1b      	ldrb	r3, [r3, #20]
 80178d8:	2b0a      	cmp	r3, #10
 80178da:	d006      	beq.n	80178ea <tcp_input+0x38e>
 80178dc:	4b48      	ldr	r3, [pc, #288]	; (8017a00 <tcp_input+0x4a4>)
 80178de:	f240 121f 	movw	r2, #287	; 0x11f
 80178e2:	494d      	ldr	r1, [pc, #308]	; (8017a18 <tcp_input+0x4bc>)
 80178e4:	4848      	ldr	r0, [pc, #288]	; (8017a08 <tcp_input+0x4ac>)
 80178e6:	f007 fe5b 	bl	801f5a0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80178ea:	69fb      	ldr	r3, [r7, #28]
 80178ec:	7a1b      	ldrb	r3, [r3, #8]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d009      	beq.n	8017906 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80178f2:	69fb      	ldr	r3, [r7, #28]
 80178f4:	7a1a      	ldrb	r2, [r3, #8]
 80178f6:	4b41      	ldr	r3, [pc, #260]	; (80179fc <tcp_input+0x4a0>)
 80178f8:	685b      	ldr	r3, [r3, #4]
 80178fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80178fe:	3301      	adds	r3, #1
 8017900:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017902:	429a      	cmp	r2, r3
 8017904:	d122      	bne.n	801794c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8017906:	69fb      	ldr	r3, [r7, #28]
 8017908:	8b1a      	ldrh	r2, [r3, #24]
 801790a:	4b3b      	ldr	r3, [pc, #236]	; (80179f8 <tcp_input+0x49c>)
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	881b      	ldrh	r3, [r3, #0]
 8017910:	b29b      	uxth	r3, r3
 8017912:	429a      	cmp	r2, r3
 8017914:	d11b      	bne.n	801794e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8017916:	69fb      	ldr	r3, [r7, #28]
 8017918:	8ada      	ldrh	r2, [r3, #22]
 801791a:	4b37      	ldr	r3, [pc, #220]	; (80179f8 <tcp_input+0x49c>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	885b      	ldrh	r3, [r3, #2]
 8017920:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017922:	429a      	cmp	r2, r3
 8017924:	d113      	bne.n	801794e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017926:	69fb      	ldr	r3, [r7, #28]
 8017928:	685a      	ldr	r2, [r3, #4]
 801792a:	4b34      	ldr	r3, [pc, #208]	; (80179fc <tcp_input+0x4a0>)
 801792c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801792e:	429a      	cmp	r2, r3
 8017930:	d10d      	bne.n	801794e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017932:	69fb      	ldr	r3, [r7, #28]
 8017934:	681a      	ldr	r2, [r3, #0]
 8017936:	4b31      	ldr	r3, [pc, #196]	; (80179fc <tcp_input+0x4a0>)
 8017938:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801793a:	429a      	cmp	r2, r3
 801793c:	d107      	bne.n	801794e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801793e:	69f8      	ldr	r0, [r7, #28]
 8017940:	f000 fb56 	bl	8017ff0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8017944:	6878      	ldr	r0, [r7, #4]
 8017946:	f7fd fbdb 	bl	8015100 <pbuf_free>
        return;
 801794a:	e1fd      	b.n	8017d48 <tcp_input+0x7ec>
        continue;
 801794c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801794e:	69fb      	ldr	r3, [r7, #28]
 8017950:	68db      	ldr	r3, [r3, #12]
 8017952:	61fb      	str	r3, [r7, #28]
 8017954:	69fb      	ldr	r3, [r7, #28]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d1bc      	bne.n	80178d4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801795a:	2300      	movs	r3, #0
 801795c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801795e:	4b2f      	ldr	r3, [pc, #188]	; (8017a1c <tcp_input+0x4c0>)
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	617b      	str	r3, [r7, #20]
 8017964:	e02a      	b.n	80179bc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017966:	697b      	ldr	r3, [r7, #20]
 8017968:	7a1b      	ldrb	r3, [r3, #8]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d00c      	beq.n	8017988 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801796e:	697b      	ldr	r3, [r7, #20]
 8017970:	7a1a      	ldrb	r2, [r3, #8]
 8017972:	4b22      	ldr	r3, [pc, #136]	; (80179fc <tcp_input+0x4a0>)
 8017974:	685b      	ldr	r3, [r3, #4]
 8017976:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801797a:	3301      	adds	r3, #1
 801797c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801797e:	429a      	cmp	r2, r3
 8017980:	d002      	beq.n	8017988 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8017982:	697b      	ldr	r3, [r7, #20]
 8017984:	61bb      	str	r3, [r7, #24]
        continue;
 8017986:	e016      	b.n	80179b6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8017988:	697b      	ldr	r3, [r7, #20]
 801798a:	8ada      	ldrh	r2, [r3, #22]
 801798c:	4b1a      	ldr	r3, [pc, #104]	; (80179f8 <tcp_input+0x49c>)
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	885b      	ldrh	r3, [r3, #2]
 8017992:	b29b      	uxth	r3, r3
 8017994:	429a      	cmp	r2, r3
 8017996:	d10c      	bne.n	80179b2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017998:	697b      	ldr	r3, [r7, #20]
 801799a:	681a      	ldr	r2, [r3, #0]
 801799c:	4b17      	ldr	r3, [pc, #92]	; (80179fc <tcp_input+0x4a0>)
 801799e:	695b      	ldr	r3, [r3, #20]
 80179a0:	429a      	cmp	r2, r3
 80179a2:	d00f      	beq.n	80179c4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80179a4:	697b      	ldr	r3, [r7, #20]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d00d      	beq.n	80179c6 <tcp_input+0x46a>
 80179aa:	697b      	ldr	r3, [r7, #20]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d009      	beq.n	80179c6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80179b2:	697b      	ldr	r3, [r7, #20]
 80179b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80179b6:	697b      	ldr	r3, [r7, #20]
 80179b8:	68db      	ldr	r3, [r3, #12]
 80179ba:	617b      	str	r3, [r7, #20]
 80179bc:	697b      	ldr	r3, [r7, #20]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d1d1      	bne.n	8017966 <tcp_input+0x40a>
 80179c2:	e000      	b.n	80179c6 <tcp_input+0x46a>
            break;
 80179c4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80179c6:	697b      	ldr	r3, [r7, #20]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d029      	beq.n	8017a20 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80179cc:	69bb      	ldr	r3, [r7, #24]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d00a      	beq.n	80179e8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80179d2:	697b      	ldr	r3, [r7, #20]
 80179d4:	68da      	ldr	r2, [r3, #12]
 80179d6:	69bb      	ldr	r3, [r7, #24]
 80179d8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80179da:	4b10      	ldr	r3, [pc, #64]	; (8017a1c <tcp_input+0x4c0>)
 80179dc:	681a      	ldr	r2, [r3, #0]
 80179de:	697b      	ldr	r3, [r7, #20]
 80179e0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80179e2:	4a0e      	ldr	r2, [pc, #56]	; (8017a1c <tcp_input+0x4c0>)
 80179e4:	697b      	ldr	r3, [r7, #20]
 80179e6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80179e8:	6978      	ldr	r0, [r7, #20]
 80179ea:	f000 fa03 	bl	8017df4 <tcp_listen_input>
      }
      pbuf_free(p);
 80179ee:	6878      	ldr	r0, [r7, #4]
 80179f0:	f7fd fb86 	bl	8015100 <pbuf_free>
      return;
 80179f4:	e1a8      	b.n	8017d48 <tcp_input+0x7ec>
 80179f6:	bf00      	nop
 80179f8:	2000c010 	.word	0x2000c010
 80179fc:	200066d4 	.word	0x200066d4
 8017a00:	080227ec 	.word	0x080227ec
 8017a04:	08022918 	.word	0x08022918
 8017a08:	08022838 	.word	0x08022838
 8017a0c:	2000bff4 	.word	0x2000bff4
 8017a10:	08022944 	.word	0x08022944
 8017a14:	2000bff8 	.word	0x2000bff8
 8017a18:	08022970 	.word	0x08022970
 8017a1c:	2000bff0 	.word	0x2000bff0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8017a20:	69fb      	ldr	r3, [r7, #28]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	f000 8158 	beq.w	8017cd8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017a28:	4b95      	ldr	r3, [pc, #596]	; (8017c80 <tcp_input+0x724>)
 8017a2a:	2200      	movs	r2, #0
 8017a2c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	891a      	ldrh	r2, [r3, #8]
 8017a32:	4b93      	ldr	r3, [pc, #588]	; (8017c80 <tcp_input+0x724>)
 8017a34:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8017a36:	4a92      	ldr	r2, [pc, #584]	; (8017c80 <tcp_input+0x724>)
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8017a3c:	4b91      	ldr	r3, [pc, #580]	; (8017c84 <tcp_input+0x728>)
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	4a8f      	ldr	r2, [pc, #572]	; (8017c80 <tcp_input+0x724>)
 8017a42:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8017a44:	4b90      	ldr	r3, [pc, #576]	; (8017c88 <tcp_input+0x72c>)
 8017a46:	2200      	movs	r2, #0
 8017a48:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8017a4a:	4b90      	ldr	r3, [pc, #576]	; (8017c8c <tcp_input+0x730>)
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8017a50:	4b8f      	ldr	r3, [pc, #572]	; (8017c90 <tcp_input+0x734>)
 8017a52:	2200      	movs	r2, #0
 8017a54:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8017a56:	4b8f      	ldr	r3, [pc, #572]	; (8017c94 <tcp_input+0x738>)
 8017a58:	781b      	ldrb	r3, [r3, #0]
 8017a5a:	f003 0308 	and.w	r3, r3, #8
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d006      	beq.n	8017a70 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	7b5b      	ldrb	r3, [r3, #13]
 8017a66:	f043 0301 	orr.w	r3, r3, #1
 8017a6a:	b2da      	uxtb	r2, r3
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8017a70:	69fb      	ldr	r3, [r7, #28]
 8017a72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d017      	beq.n	8017aa8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017a78:	69f8      	ldr	r0, [r7, #28]
 8017a7a:	f7ff f85b 	bl	8016b34 <tcp_process_refused_data>
 8017a7e:	4603      	mov	r3, r0
 8017a80:	f113 0f0d 	cmn.w	r3, #13
 8017a84:	d007      	beq.n	8017a96 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017a86:	69fb      	ldr	r3, [r7, #28]
 8017a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d00c      	beq.n	8017aa8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017a8e:	4b82      	ldr	r3, [pc, #520]	; (8017c98 <tcp_input+0x73c>)
 8017a90:	881b      	ldrh	r3, [r3, #0]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d008      	beq.n	8017aa8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8017a96:	69fb      	ldr	r3, [r7, #28]
 8017a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	f040 80e3 	bne.w	8017c66 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017aa0:	69f8      	ldr	r0, [r7, #28]
 8017aa2:	f003 fe05 	bl	801b6b0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8017aa6:	e0de      	b.n	8017c66 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8017aa8:	4a7c      	ldr	r2, [pc, #496]	; (8017c9c <tcp_input+0x740>)
 8017aaa:	69fb      	ldr	r3, [r7, #28]
 8017aac:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8017aae:	69f8      	ldr	r0, [r7, #28]
 8017ab0:	f000 fb18 	bl	80180e4 <tcp_process>
 8017ab4:	4603      	mov	r3, r0
 8017ab6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017ab8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017abc:	f113 0f0d 	cmn.w	r3, #13
 8017ac0:	f000 80d3 	beq.w	8017c6a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8017ac4:	4b71      	ldr	r3, [pc, #452]	; (8017c8c <tcp_input+0x730>)
 8017ac6:	781b      	ldrb	r3, [r3, #0]
 8017ac8:	f003 0308 	and.w	r3, r3, #8
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d015      	beq.n	8017afc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017ad0:	69fb      	ldr	r3, [r7, #28]
 8017ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d008      	beq.n	8017aec <tcp_input+0x590>
 8017ada:	69fb      	ldr	r3, [r7, #28]
 8017adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ae0:	69fa      	ldr	r2, [r7, #28]
 8017ae2:	6912      	ldr	r2, [r2, #16]
 8017ae4:	f06f 010d 	mvn.w	r1, #13
 8017ae8:	4610      	mov	r0, r2
 8017aea:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017aec:	69f9      	ldr	r1, [r7, #28]
 8017aee:	486c      	ldr	r0, [pc, #432]	; (8017ca0 <tcp_input+0x744>)
 8017af0:	f7ff fbbc 	bl	801726c <tcp_pcb_remove>
        tcp_free(pcb);
 8017af4:	69f8      	ldr	r0, [r7, #28]
 8017af6:	f7fd fdbf 	bl	8015678 <tcp_free>
 8017afa:	e0da      	b.n	8017cb2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8017afc:	2300      	movs	r3, #0
 8017afe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8017b00:	4b63      	ldr	r3, [pc, #396]	; (8017c90 <tcp_input+0x734>)
 8017b02:	881b      	ldrh	r3, [r3, #0]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d01d      	beq.n	8017b44 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017b08:	4b61      	ldr	r3, [pc, #388]	; (8017c90 <tcp_input+0x734>)
 8017b0a:	881b      	ldrh	r3, [r3, #0]
 8017b0c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8017b0e:	69fb      	ldr	r3, [r7, #28]
 8017b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d00a      	beq.n	8017b2e <tcp_input+0x5d2>
 8017b18:	69fb      	ldr	r3, [r7, #28]
 8017b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017b1e:	69fa      	ldr	r2, [r7, #28]
 8017b20:	6910      	ldr	r0, [r2, #16]
 8017b22:	89fa      	ldrh	r2, [r7, #14]
 8017b24:	69f9      	ldr	r1, [r7, #28]
 8017b26:	4798      	blx	r3
 8017b28:	4603      	mov	r3, r0
 8017b2a:	74fb      	strb	r3, [r7, #19]
 8017b2c:	e001      	b.n	8017b32 <tcp_input+0x5d6>
 8017b2e:	2300      	movs	r3, #0
 8017b30:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017b32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017b36:	f113 0f0d 	cmn.w	r3, #13
 8017b3a:	f000 8098 	beq.w	8017c6e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8017b3e:	4b54      	ldr	r3, [pc, #336]	; (8017c90 <tcp_input+0x734>)
 8017b40:	2200      	movs	r2, #0
 8017b42:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8017b44:	69f8      	ldr	r0, [r7, #28]
 8017b46:	f000 f915 	bl	8017d74 <tcp_input_delayed_close>
 8017b4a:	4603      	mov	r3, r0
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	f040 8090 	bne.w	8017c72 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8017b52:	4b4d      	ldr	r3, [pc, #308]	; (8017c88 <tcp_input+0x72c>)
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d041      	beq.n	8017bde <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8017b5a:	69fb      	ldr	r3, [r7, #28]
 8017b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d006      	beq.n	8017b70 <tcp_input+0x614>
 8017b62:	4b50      	ldr	r3, [pc, #320]	; (8017ca4 <tcp_input+0x748>)
 8017b64:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017b68:	494f      	ldr	r1, [pc, #316]	; (8017ca8 <tcp_input+0x74c>)
 8017b6a:	4850      	ldr	r0, [pc, #320]	; (8017cac <tcp_input+0x750>)
 8017b6c:	f007 fd18 	bl	801f5a0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017b70:	69fb      	ldr	r3, [r7, #28]
 8017b72:	8b5b      	ldrh	r3, [r3, #26]
 8017b74:	f003 0310 	and.w	r3, r3, #16
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d008      	beq.n	8017b8e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017b7c:	4b42      	ldr	r3, [pc, #264]	; (8017c88 <tcp_input+0x72c>)
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	4618      	mov	r0, r3
 8017b82:	f7fd fabd 	bl	8015100 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8017b86:	69f8      	ldr	r0, [r7, #28]
 8017b88:	f7fe f8ba 	bl	8015d00 <tcp_abort>
            goto aborted;
 8017b8c:	e091      	b.n	8017cb2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017b8e:	69fb      	ldr	r3, [r7, #28]
 8017b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d00c      	beq.n	8017bb2 <tcp_input+0x656>
 8017b98:	69fb      	ldr	r3, [r7, #28]
 8017b9a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017b9e:	69fb      	ldr	r3, [r7, #28]
 8017ba0:	6918      	ldr	r0, [r3, #16]
 8017ba2:	4b39      	ldr	r3, [pc, #228]	; (8017c88 <tcp_input+0x72c>)
 8017ba4:	681a      	ldr	r2, [r3, #0]
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	69f9      	ldr	r1, [r7, #28]
 8017baa:	47a0      	blx	r4
 8017bac:	4603      	mov	r3, r0
 8017bae:	74fb      	strb	r3, [r7, #19]
 8017bb0:	e008      	b.n	8017bc4 <tcp_input+0x668>
 8017bb2:	4b35      	ldr	r3, [pc, #212]	; (8017c88 <tcp_input+0x72c>)
 8017bb4:	681a      	ldr	r2, [r3, #0]
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	69f9      	ldr	r1, [r7, #28]
 8017bba:	2000      	movs	r0, #0
 8017bbc:	f7ff f890 	bl	8016ce0 <tcp_recv_null>
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017bc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017bc8:	f113 0f0d 	cmn.w	r3, #13
 8017bcc:	d053      	beq.n	8017c76 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8017bce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d003      	beq.n	8017bde <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8017bd6:	4b2c      	ldr	r3, [pc, #176]	; (8017c88 <tcp_input+0x72c>)
 8017bd8:	681a      	ldr	r2, [r3, #0]
 8017bda:	69fb      	ldr	r3, [r7, #28]
 8017bdc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8017bde:	4b2b      	ldr	r3, [pc, #172]	; (8017c8c <tcp_input+0x730>)
 8017be0:	781b      	ldrb	r3, [r3, #0]
 8017be2:	f003 0320 	and.w	r3, r3, #32
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d030      	beq.n	8017c4c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8017bea:	69fb      	ldr	r3, [r7, #28]
 8017bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d009      	beq.n	8017c06 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8017bf2:	69fb      	ldr	r3, [r7, #28]
 8017bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017bf6:	7b5a      	ldrb	r2, [r3, #13]
 8017bf8:	69fb      	ldr	r3, [r7, #28]
 8017bfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017bfc:	f042 0220 	orr.w	r2, r2, #32
 8017c00:	b2d2      	uxtb	r2, r2
 8017c02:	735a      	strb	r2, [r3, #13]
 8017c04:	e022      	b.n	8017c4c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017c06:	69fb      	ldr	r3, [r7, #28]
 8017c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c0a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017c0e:	d005      	beq.n	8017c1c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8017c10:	69fb      	ldr	r3, [r7, #28]
 8017c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c14:	3301      	adds	r3, #1
 8017c16:	b29a      	uxth	r2, r3
 8017c18:	69fb      	ldr	r3, [r7, #28]
 8017c1a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8017c1c:	69fb      	ldr	r3, [r7, #28]
 8017c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d00b      	beq.n	8017c3e <tcp_input+0x6e2>
 8017c26:	69fb      	ldr	r3, [r7, #28]
 8017c28:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017c2c:	69fb      	ldr	r3, [r7, #28]
 8017c2e:	6918      	ldr	r0, [r3, #16]
 8017c30:	2300      	movs	r3, #0
 8017c32:	2200      	movs	r2, #0
 8017c34:	69f9      	ldr	r1, [r7, #28]
 8017c36:	47a0      	blx	r4
 8017c38:	4603      	mov	r3, r0
 8017c3a:	74fb      	strb	r3, [r7, #19]
 8017c3c:	e001      	b.n	8017c42 <tcp_input+0x6e6>
 8017c3e:	2300      	movs	r3, #0
 8017c40:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017c42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017c46:	f113 0f0d 	cmn.w	r3, #13
 8017c4a:	d016      	beq.n	8017c7a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8017c4c:	4b13      	ldr	r3, [pc, #76]	; (8017c9c <tcp_input+0x740>)
 8017c4e:	2200      	movs	r2, #0
 8017c50:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8017c52:	69f8      	ldr	r0, [r7, #28]
 8017c54:	f000 f88e 	bl	8017d74 <tcp_input_delayed_close>
 8017c58:	4603      	mov	r3, r0
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d128      	bne.n	8017cb0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8017c5e:	69f8      	ldr	r0, [r7, #28]
 8017c60:	f002 ff20 	bl	801aaa4 <tcp_output>
 8017c64:	e025      	b.n	8017cb2 <tcp_input+0x756>
        goto aborted;
 8017c66:	bf00      	nop
 8017c68:	e023      	b.n	8017cb2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8017c6a:	bf00      	nop
 8017c6c:	e021      	b.n	8017cb2 <tcp_input+0x756>
              goto aborted;
 8017c6e:	bf00      	nop
 8017c70:	e01f      	b.n	8017cb2 <tcp_input+0x756>
          goto aborted;
 8017c72:	bf00      	nop
 8017c74:	e01d      	b.n	8017cb2 <tcp_input+0x756>
            goto aborted;
 8017c76:	bf00      	nop
 8017c78:	e01b      	b.n	8017cb2 <tcp_input+0x756>
              goto aborted;
 8017c7a:	bf00      	nop
 8017c7c:	e019      	b.n	8017cb2 <tcp_input+0x756>
 8017c7e:	bf00      	nop
 8017c80:	2000c000 	.word	0x2000c000
 8017c84:	2000c010 	.word	0x2000c010
 8017c88:	2000c030 	.word	0x2000c030
 8017c8c:	2000c02d 	.word	0x2000c02d
 8017c90:	2000c028 	.word	0x2000c028
 8017c94:	2000c02c 	.word	0x2000c02c
 8017c98:	2000c02a 	.word	0x2000c02a
 8017c9c:	2000c034 	.word	0x2000c034
 8017ca0:	2000bff4 	.word	0x2000bff4
 8017ca4:	080227ec 	.word	0x080227ec
 8017ca8:	080229a0 	.word	0x080229a0
 8017cac:	08022838 	.word	0x08022838
          goto aborted;
 8017cb0:	bf00      	nop
    tcp_input_pcb = NULL;
 8017cb2:	4b27      	ldr	r3, [pc, #156]	; (8017d50 <tcp_input+0x7f4>)
 8017cb4:	2200      	movs	r2, #0
 8017cb6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8017cb8:	4b26      	ldr	r3, [pc, #152]	; (8017d54 <tcp_input+0x7f8>)
 8017cba:	2200      	movs	r2, #0
 8017cbc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8017cbe:	4b26      	ldr	r3, [pc, #152]	; (8017d58 <tcp_input+0x7fc>)
 8017cc0:	685b      	ldr	r3, [r3, #4]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d03f      	beq.n	8017d46 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8017cc6:	4b24      	ldr	r3, [pc, #144]	; (8017d58 <tcp_input+0x7fc>)
 8017cc8:	685b      	ldr	r3, [r3, #4]
 8017cca:	4618      	mov	r0, r3
 8017ccc:	f7fd fa18 	bl	8015100 <pbuf_free>
      inseg.p = NULL;
 8017cd0:	4b21      	ldr	r3, [pc, #132]	; (8017d58 <tcp_input+0x7fc>)
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8017cd6:	e036      	b.n	8017d46 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017cd8:	4b20      	ldr	r3, [pc, #128]	; (8017d5c <tcp_input+0x800>)
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	899b      	ldrh	r3, [r3, #12]
 8017cde:	b29b      	uxth	r3, r3
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f7fb fe1b 	bl	801391c <lwip_htons>
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	b2db      	uxtb	r3, r3
 8017cea:	f003 0304 	and.w	r3, r3, #4
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d118      	bne.n	8017d24 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017cf2:	4b1b      	ldr	r3, [pc, #108]	; (8017d60 <tcp_input+0x804>)
 8017cf4:	6819      	ldr	r1, [r3, #0]
 8017cf6:	4b1b      	ldr	r3, [pc, #108]	; (8017d64 <tcp_input+0x808>)
 8017cf8:	881b      	ldrh	r3, [r3, #0]
 8017cfa:	461a      	mov	r2, r3
 8017cfc:	4b1a      	ldr	r3, [pc, #104]	; (8017d68 <tcp_input+0x80c>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017d02:	4b16      	ldr	r3, [pc, #88]	; (8017d5c <tcp_input+0x800>)
 8017d04:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d06:	885b      	ldrh	r3, [r3, #2]
 8017d08:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017d0a:	4a14      	ldr	r2, [pc, #80]	; (8017d5c <tcp_input+0x800>)
 8017d0c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d0e:	8812      	ldrh	r2, [r2, #0]
 8017d10:	b292      	uxth	r2, r2
 8017d12:	9202      	str	r2, [sp, #8]
 8017d14:	9301      	str	r3, [sp, #4]
 8017d16:	4b15      	ldr	r3, [pc, #84]	; (8017d6c <tcp_input+0x810>)
 8017d18:	9300      	str	r3, [sp, #0]
 8017d1a:	4b15      	ldr	r3, [pc, #84]	; (8017d70 <tcp_input+0x814>)
 8017d1c:	4602      	mov	r2, r0
 8017d1e:	2000      	movs	r0, #0
 8017d20:	f003 fc74 	bl	801b60c <tcp_rst>
    pbuf_free(p);
 8017d24:	6878      	ldr	r0, [r7, #4]
 8017d26:	f7fd f9eb 	bl	8015100 <pbuf_free>
  return;
 8017d2a:	e00c      	b.n	8017d46 <tcp_input+0x7ea>
    goto dropped;
 8017d2c:	bf00      	nop
 8017d2e:	e006      	b.n	8017d3e <tcp_input+0x7e2>
    goto dropped;
 8017d30:	bf00      	nop
 8017d32:	e004      	b.n	8017d3e <tcp_input+0x7e2>
    goto dropped;
 8017d34:	bf00      	nop
 8017d36:	e002      	b.n	8017d3e <tcp_input+0x7e2>
      goto dropped;
 8017d38:	bf00      	nop
 8017d3a:	e000      	b.n	8017d3e <tcp_input+0x7e2>
      goto dropped;
 8017d3c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8017d3e:	6878      	ldr	r0, [r7, #4]
 8017d40:	f7fd f9de 	bl	8015100 <pbuf_free>
 8017d44:	e000      	b.n	8017d48 <tcp_input+0x7ec>
  return;
 8017d46:	bf00      	nop
}
 8017d48:	3724      	adds	r7, #36	; 0x24
 8017d4a:	46bd      	mov	sp, r7
 8017d4c:	bd90      	pop	{r4, r7, pc}
 8017d4e:	bf00      	nop
 8017d50:	2000c034 	.word	0x2000c034
 8017d54:	2000c030 	.word	0x2000c030
 8017d58:	2000c000 	.word	0x2000c000
 8017d5c:	2000c010 	.word	0x2000c010
 8017d60:	2000c024 	.word	0x2000c024
 8017d64:	2000c02a 	.word	0x2000c02a
 8017d68:	2000c020 	.word	0x2000c020
 8017d6c:	200066e4 	.word	0x200066e4
 8017d70:	200066e8 	.word	0x200066e8

08017d74 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b082      	sub	sp, #8
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d106      	bne.n	8017d90 <tcp_input_delayed_close+0x1c>
 8017d82:	4b17      	ldr	r3, [pc, #92]	; (8017de0 <tcp_input_delayed_close+0x6c>)
 8017d84:	f240 225a 	movw	r2, #602	; 0x25a
 8017d88:	4916      	ldr	r1, [pc, #88]	; (8017de4 <tcp_input_delayed_close+0x70>)
 8017d8a:	4817      	ldr	r0, [pc, #92]	; (8017de8 <tcp_input_delayed_close+0x74>)
 8017d8c:	f007 fc08 	bl	801f5a0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017d90:	4b16      	ldr	r3, [pc, #88]	; (8017dec <tcp_input_delayed_close+0x78>)
 8017d92:	781b      	ldrb	r3, [r3, #0]
 8017d94:	f003 0310 	and.w	r3, r3, #16
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d01c      	beq.n	8017dd6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	8b5b      	ldrh	r3, [r3, #26]
 8017da0:	f003 0310 	and.w	r3, r3, #16
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d10d      	bne.n	8017dc4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d008      	beq.n	8017dc4 <tcp_input_delayed_close+0x50>
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017db8:	687a      	ldr	r2, [r7, #4]
 8017dba:	6912      	ldr	r2, [r2, #16]
 8017dbc:	f06f 010e 	mvn.w	r1, #14
 8017dc0:	4610      	mov	r0, r2
 8017dc2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017dc4:	6879      	ldr	r1, [r7, #4]
 8017dc6:	480a      	ldr	r0, [pc, #40]	; (8017df0 <tcp_input_delayed_close+0x7c>)
 8017dc8:	f7ff fa50 	bl	801726c <tcp_pcb_remove>
    tcp_free(pcb);
 8017dcc:	6878      	ldr	r0, [r7, #4]
 8017dce:	f7fd fc53 	bl	8015678 <tcp_free>
    return 1;
 8017dd2:	2301      	movs	r3, #1
 8017dd4:	e000      	b.n	8017dd8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8017dd6:	2300      	movs	r3, #0
}
 8017dd8:	4618      	mov	r0, r3
 8017dda:	3708      	adds	r7, #8
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	bd80      	pop	{r7, pc}
 8017de0:	080227ec 	.word	0x080227ec
 8017de4:	080229bc 	.word	0x080229bc
 8017de8:	08022838 	.word	0x08022838
 8017dec:	2000c02d 	.word	0x2000c02d
 8017df0:	2000bff4 	.word	0x2000bff4

08017df4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8017df4:	b590      	push	{r4, r7, lr}
 8017df6:	b08b      	sub	sp, #44	; 0x2c
 8017df8:	af04      	add	r7, sp, #16
 8017dfa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8017dfc:	4b6f      	ldr	r3, [pc, #444]	; (8017fbc <tcp_listen_input+0x1c8>)
 8017dfe:	781b      	ldrb	r3, [r3, #0]
 8017e00:	f003 0304 	and.w	r3, r3, #4
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	f040 80d2 	bne.w	8017fae <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d106      	bne.n	8017e1e <tcp_listen_input+0x2a>
 8017e10:	4b6b      	ldr	r3, [pc, #428]	; (8017fc0 <tcp_listen_input+0x1cc>)
 8017e12:	f240 2281 	movw	r2, #641	; 0x281
 8017e16:	496b      	ldr	r1, [pc, #428]	; (8017fc4 <tcp_listen_input+0x1d0>)
 8017e18:	486b      	ldr	r0, [pc, #428]	; (8017fc8 <tcp_listen_input+0x1d4>)
 8017e1a:	f007 fbc1 	bl	801f5a0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8017e1e:	4b67      	ldr	r3, [pc, #412]	; (8017fbc <tcp_listen_input+0x1c8>)
 8017e20:	781b      	ldrb	r3, [r3, #0]
 8017e22:	f003 0310 	and.w	r3, r3, #16
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d019      	beq.n	8017e5e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e2a:	4b68      	ldr	r3, [pc, #416]	; (8017fcc <tcp_listen_input+0x1d8>)
 8017e2c:	6819      	ldr	r1, [r3, #0]
 8017e2e:	4b68      	ldr	r3, [pc, #416]	; (8017fd0 <tcp_listen_input+0x1dc>)
 8017e30:	881b      	ldrh	r3, [r3, #0]
 8017e32:	461a      	mov	r2, r3
 8017e34:	4b67      	ldr	r3, [pc, #412]	; (8017fd4 <tcp_listen_input+0x1e0>)
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017e3a:	4b67      	ldr	r3, [pc, #412]	; (8017fd8 <tcp_listen_input+0x1e4>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e3e:	885b      	ldrh	r3, [r3, #2]
 8017e40:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017e42:	4a65      	ldr	r2, [pc, #404]	; (8017fd8 <tcp_listen_input+0x1e4>)
 8017e44:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e46:	8812      	ldrh	r2, [r2, #0]
 8017e48:	b292      	uxth	r2, r2
 8017e4a:	9202      	str	r2, [sp, #8]
 8017e4c:	9301      	str	r3, [sp, #4]
 8017e4e:	4b63      	ldr	r3, [pc, #396]	; (8017fdc <tcp_listen_input+0x1e8>)
 8017e50:	9300      	str	r3, [sp, #0]
 8017e52:	4b63      	ldr	r3, [pc, #396]	; (8017fe0 <tcp_listen_input+0x1ec>)
 8017e54:	4602      	mov	r2, r0
 8017e56:	6878      	ldr	r0, [r7, #4]
 8017e58:	f003 fbd8 	bl	801b60c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017e5c:	e0a9      	b.n	8017fb2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8017e5e:	4b57      	ldr	r3, [pc, #348]	; (8017fbc <tcp_listen_input+0x1c8>)
 8017e60:	781b      	ldrb	r3, [r3, #0]
 8017e62:	f003 0302 	and.w	r3, r3, #2
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	f000 80a3 	beq.w	8017fb2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	7d5b      	ldrb	r3, [r3, #21]
 8017e70:	4618      	mov	r0, r3
 8017e72:	f7ff f859 	bl	8016f28 <tcp_alloc>
 8017e76:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8017e78:	697b      	ldr	r3, [r7, #20]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d111      	bne.n	8017ea2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	699b      	ldr	r3, [r3, #24]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d00a      	beq.n	8017e9c <tcp_listen_input+0xa8>
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	699b      	ldr	r3, [r3, #24]
 8017e8a:	687a      	ldr	r2, [r7, #4]
 8017e8c:	6910      	ldr	r0, [r2, #16]
 8017e8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017e92:	2100      	movs	r1, #0
 8017e94:	4798      	blx	r3
 8017e96:	4603      	mov	r3, r0
 8017e98:	73bb      	strb	r3, [r7, #14]
      return;
 8017e9a:	e08b      	b.n	8017fb4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017e9c:	23f0      	movs	r3, #240	; 0xf0
 8017e9e:	73bb      	strb	r3, [r7, #14]
      return;
 8017ea0:	e088      	b.n	8017fb4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8017ea2:	4b50      	ldr	r3, [pc, #320]	; (8017fe4 <tcp_listen_input+0x1f0>)
 8017ea4:	695a      	ldr	r2, [r3, #20]
 8017ea6:	697b      	ldr	r3, [r7, #20]
 8017ea8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8017eaa:	4b4e      	ldr	r3, [pc, #312]	; (8017fe4 <tcp_listen_input+0x1f0>)
 8017eac:	691a      	ldr	r2, [r3, #16]
 8017eae:	697b      	ldr	r3, [r7, #20]
 8017eb0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	8ada      	ldrh	r2, [r3, #22]
 8017eb6:	697b      	ldr	r3, [r7, #20]
 8017eb8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8017eba:	4b47      	ldr	r3, [pc, #284]	; (8017fd8 <tcp_listen_input+0x1e4>)
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	881b      	ldrh	r3, [r3, #0]
 8017ec0:	b29a      	uxth	r2, r3
 8017ec2:	697b      	ldr	r3, [r7, #20]
 8017ec4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8017ec6:	697b      	ldr	r3, [r7, #20]
 8017ec8:	2203      	movs	r2, #3
 8017eca:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017ecc:	4b41      	ldr	r3, [pc, #260]	; (8017fd4 <tcp_listen_input+0x1e0>)
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	1c5a      	adds	r2, r3, #1
 8017ed2:	697b      	ldr	r3, [r7, #20]
 8017ed4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8017ed6:	697b      	ldr	r3, [r7, #20]
 8017ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017eda:	697b      	ldr	r3, [r7, #20]
 8017edc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8017ede:	6978      	ldr	r0, [r7, #20]
 8017ee0:	f7ff fa58 	bl	8017394 <tcp_next_iss>
 8017ee4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8017ee6:	697b      	ldr	r3, [r7, #20]
 8017ee8:	693a      	ldr	r2, [r7, #16]
 8017eea:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8017eec:	697b      	ldr	r3, [r7, #20]
 8017eee:	693a      	ldr	r2, [r7, #16]
 8017ef0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8017ef2:	697b      	ldr	r3, [r7, #20]
 8017ef4:	693a      	ldr	r2, [r7, #16]
 8017ef6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8017ef8:	697b      	ldr	r3, [r7, #20]
 8017efa:	693a      	ldr	r2, [r7, #16]
 8017efc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8017efe:	4b35      	ldr	r3, [pc, #212]	; (8017fd4 <tcp_listen_input+0x1e0>)
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	1e5a      	subs	r2, r3, #1
 8017f04:	697b      	ldr	r3, [r7, #20]
 8017f06:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	691a      	ldr	r2, [r3, #16]
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017f10:	697b      	ldr	r3, [r7, #20]
 8017f12:	687a      	ldr	r2, [r7, #4]
 8017f14:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	7a5b      	ldrb	r3, [r3, #9]
 8017f1a:	f003 030c 	and.w	r3, r3, #12
 8017f1e:	b2da      	uxtb	r2, r3
 8017f20:	697b      	ldr	r3, [r7, #20]
 8017f22:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	7a1a      	ldrb	r2, [r3, #8]
 8017f28:	697b      	ldr	r3, [r7, #20]
 8017f2a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017f2c:	4b2e      	ldr	r3, [pc, #184]	; (8017fe8 <tcp_listen_input+0x1f4>)
 8017f2e:	681a      	ldr	r2, [r3, #0]
 8017f30:	697b      	ldr	r3, [r7, #20]
 8017f32:	60da      	str	r2, [r3, #12]
 8017f34:	4a2c      	ldr	r2, [pc, #176]	; (8017fe8 <tcp_listen_input+0x1f4>)
 8017f36:	697b      	ldr	r3, [r7, #20]
 8017f38:	6013      	str	r3, [r2, #0]
 8017f3a:	f003 fd29 	bl	801b990 <tcp_timer_needed>
 8017f3e:	4b2b      	ldr	r3, [pc, #172]	; (8017fec <tcp_listen_input+0x1f8>)
 8017f40:	2201      	movs	r2, #1
 8017f42:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017f44:	6978      	ldr	r0, [r7, #20]
 8017f46:	f001 fd8f 	bl	8019a68 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8017f4a:	4b23      	ldr	r3, [pc, #140]	; (8017fd8 <tcp_listen_input+0x1e4>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	89db      	ldrh	r3, [r3, #14]
 8017f50:	b29a      	uxth	r2, r3
 8017f52:	697b      	ldr	r3, [r7, #20]
 8017f54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017f58:	697b      	ldr	r3, [r7, #20]
 8017f5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017f5e:	697b      	ldr	r3, [r7, #20]
 8017f60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017f64:	697b      	ldr	r3, [r7, #20]
 8017f66:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017f68:	697b      	ldr	r3, [r7, #20]
 8017f6a:	3304      	adds	r3, #4
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	f005 fcbb 	bl	801d8e8 <ip4_route>
 8017f72:	4601      	mov	r1, r0
 8017f74:	697b      	ldr	r3, [r7, #20]
 8017f76:	3304      	adds	r3, #4
 8017f78:	461a      	mov	r2, r3
 8017f7a:	4620      	mov	r0, r4
 8017f7c:	f7ff fa30 	bl	80173e0 <tcp_eff_send_mss_netif>
 8017f80:	4603      	mov	r3, r0
 8017f82:	461a      	mov	r2, r3
 8017f84:	697b      	ldr	r3, [r7, #20]
 8017f86:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017f88:	2112      	movs	r1, #18
 8017f8a:	6978      	ldr	r0, [r7, #20]
 8017f8c:	f002 fc9c 	bl	801a8c8 <tcp_enqueue_flags>
 8017f90:	4603      	mov	r3, r0
 8017f92:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d004      	beq.n	8017fa6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8017f9c:	2100      	movs	r1, #0
 8017f9e:	6978      	ldr	r0, [r7, #20]
 8017fa0:	f7fd fdf0 	bl	8015b84 <tcp_abandon>
      return;
 8017fa4:	e006      	b.n	8017fb4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8017fa6:	6978      	ldr	r0, [r7, #20]
 8017fa8:	f002 fd7c 	bl	801aaa4 <tcp_output>
  return;
 8017fac:	e001      	b.n	8017fb2 <tcp_listen_input+0x1be>
    return;
 8017fae:	bf00      	nop
 8017fb0:	e000      	b.n	8017fb4 <tcp_listen_input+0x1c0>
  return;
 8017fb2:	bf00      	nop
}
 8017fb4:	371c      	adds	r7, #28
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	bd90      	pop	{r4, r7, pc}
 8017fba:	bf00      	nop
 8017fbc:	2000c02c 	.word	0x2000c02c
 8017fc0:	080227ec 	.word	0x080227ec
 8017fc4:	080229e4 	.word	0x080229e4
 8017fc8:	08022838 	.word	0x08022838
 8017fcc:	2000c024 	.word	0x2000c024
 8017fd0:	2000c02a 	.word	0x2000c02a
 8017fd4:	2000c020 	.word	0x2000c020
 8017fd8:	2000c010 	.word	0x2000c010
 8017fdc:	200066e4 	.word	0x200066e4
 8017fe0:	200066e8 	.word	0x200066e8
 8017fe4:	200066d4 	.word	0x200066d4
 8017fe8:	2000bff4 	.word	0x2000bff4
 8017fec:	2000bffc 	.word	0x2000bffc

08017ff0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b086      	sub	sp, #24
 8017ff4:	af04      	add	r7, sp, #16
 8017ff6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017ff8:	4b2f      	ldr	r3, [pc, #188]	; (80180b8 <tcp_timewait_input+0xc8>)
 8017ffa:	781b      	ldrb	r3, [r3, #0]
 8017ffc:	f003 0304 	and.w	r3, r3, #4
 8018000:	2b00      	cmp	r3, #0
 8018002:	d153      	bne.n	80180ac <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d106      	bne.n	8018018 <tcp_timewait_input+0x28>
 801800a:	4b2c      	ldr	r3, [pc, #176]	; (80180bc <tcp_timewait_input+0xcc>)
 801800c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018010:	492b      	ldr	r1, [pc, #172]	; (80180c0 <tcp_timewait_input+0xd0>)
 8018012:	482c      	ldr	r0, [pc, #176]	; (80180c4 <tcp_timewait_input+0xd4>)
 8018014:	f007 fac4 	bl	801f5a0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018018:	4b27      	ldr	r3, [pc, #156]	; (80180b8 <tcp_timewait_input+0xc8>)
 801801a:	781b      	ldrb	r3, [r3, #0]
 801801c:	f003 0302 	and.w	r3, r3, #2
 8018020:	2b00      	cmp	r3, #0
 8018022:	d02a      	beq.n	801807a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018024:	4b28      	ldr	r3, [pc, #160]	; (80180c8 <tcp_timewait_input+0xd8>)
 8018026:	681a      	ldr	r2, [r3, #0]
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801802c:	1ad3      	subs	r3, r2, r3
 801802e:	2b00      	cmp	r3, #0
 8018030:	db2d      	blt.n	801808e <tcp_timewait_input+0x9e>
 8018032:	4b25      	ldr	r3, [pc, #148]	; (80180c8 <tcp_timewait_input+0xd8>)
 8018034:	681a      	ldr	r2, [r3, #0]
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801803a:	6879      	ldr	r1, [r7, #4]
 801803c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801803e:	440b      	add	r3, r1
 8018040:	1ad3      	subs	r3, r2, r3
 8018042:	2b00      	cmp	r3, #0
 8018044:	dc23      	bgt.n	801808e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018046:	4b21      	ldr	r3, [pc, #132]	; (80180cc <tcp_timewait_input+0xdc>)
 8018048:	6819      	ldr	r1, [r3, #0]
 801804a:	4b21      	ldr	r3, [pc, #132]	; (80180d0 <tcp_timewait_input+0xe0>)
 801804c:	881b      	ldrh	r3, [r3, #0]
 801804e:	461a      	mov	r2, r3
 8018050:	4b1d      	ldr	r3, [pc, #116]	; (80180c8 <tcp_timewait_input+0xd8>)
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018056:	4b1f      	ldr	r3, [pc, #124]	; (80180d4 <tcp_timewait_input+0xe4>)
 8018058:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801805a:	885b      	ldrh	r3, [r3, #2]
 801805c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801805e:	4a1d      	ldr	r2, [pc, #116]	; (80180d4 <tcp_timewait_input+0xe4>)
 8018060:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018062:	8812      	ldrh	r2, [r2, #0]
 8018064:	b292      	uxth	r2, r2
 8018066:	9202      	str	r2, [sp, #8]
 8018068:	9301      	str	r3, [sp, #4]
 801806a:	4b1b      	ldr	r3, [pc, #108]	; (80180d8 <tcp_timewait_input+0xe8>)
 801806c:	9300      	str	r3, [sp, #0]
 801806e:	4b1b      	ldr	r3, [pc, #108]	; (80180dc <tcp_timewait_input+0xec>)
 8018070:	4602      	mov	r2, r0
 8018072:	6878      	ldr	r0, [r7, #4]
 8018074:	f003 faca 	bl	801b60c <tcp_rst>
      return;
 8018078:	e01b      	b.n	80180b2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801807a:	4b0f      	ldr	r3, [pc, #60]	; (80180b8 <tcp_timewait_input+0xc8>)
 801807c:	781b      	ldrb	r3, [r3, #0]
 801807e:	f003 0301 	and.w	r3, r3, #1
 8018082:	2b00      	cmp	r3, #0
 8018084:	d003      	beq.n	801808e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018086:	4b16      	ldr	r3, [pc, #88]	; (80180e0 <tcp_timewait_input+0xf0>)
 8018088:	681a      	ldr	r2, [r3, #0]
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801808e:	4b10      	ldr	r3, [pc, #64]	; (80180d0 <tcp_timewait_input+0xe0>)
 8018090:	881b      	ldrh	r3, [r3, #0]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d00c      	beq.n	80180b0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	8b5b      	ldrh	r3, [r3, #26]
 801809a:	f043 0302 	orr.w	r3, r3, #2
 801809e:	b29a      	uxth	r2, r3
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80180a4:	6878      	ldr	r0, [r7, #4]
 80180a6:	f002 fcfd 	bl	801aaa4 <tcp_output>
  }
  return;
 80180aa:	e001      	b.n	80180b0 <tcp_timewait_input+0xc0>
    return;
 80180ac:	bf00      	nop
 80180ae:	e000      	b.n	80180b2 <tcp_timewait_input+0xc2>
  return;
 80180b0:	bf00      	nop
}
 80180b2:	3708      	adds	r7, #8
 80180b4:	46bd      	mov	sp, r7
 80180b6:	bd80      	pop	{r7, pc}
 80180b8:	2000c02c 	.word	0x2000c02c
 80180bc:	080227ec 	.word	0x080227ec
 80180c0:	08022a04 	.word	0x08022a04
 80180c4:	08022838 	.word	0x08022838
 80180c8:	2000c020 	.word	0x2000c020
 80180cc:	2000c024 	.word	0x2000c024
 80180d0:	2000c02a 	.word	0x2000c02a
 80180d4:	2000c010 	.word	0x2000c010
 80180d8:	200066e4 	.word	0x200066e4
 80180dc:	200066e8 	.word	0x200066e8
 80180e0:	2000bfe8 	.word	0x2000bfe8

080180e4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80180e4:	b590      	push	{r4, r7, lr}
 80180e6:	b08d      	sub	sp, #52	; 0x34
 80180e8:	af04      	add	r7, sp, #16
 80180ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80180ec:	2300      	movs	r3, #0
 80180ee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80180f0:	2300      	movs	r3, #0
 80180f2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d106      	bne.n	8018108 <tcp_process+0x24>
 80180fa:	4b9d      	ldr	r3, [pc, #628]	; (8018370 <tcp_process+0x28c>)
 80180fc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8018100:	499c      	ldr	r1, [pc, #624]	; (8018374 <tcp_process+0x290>)
 8018102:	489d      	ldr	r0, [pc, #628]	; (8018378 <tcp_process+0x294>)
 8018104:	f007 fa4c 	bl	801f5a0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018108:	4b9c      	ldr	r3, [pc, #624]	; (801837c <tcp_process+0x298>)
 801810a:	781b      	ldrb	r3, [r3, #0]
 801810c:	f003 0304 	and.w	r3, r3, #4
 8018110:	2b00      	cmp	r3, #0
 8018112:	d04e      	beq.n	80181b2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	7d1b      	ldrb	r3, [r3, #20]
 8018118:	2b02      	cmp	r3, #2
 801811a:	d108      	bne.n	801812e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018120:	4b97      	ldr	r3, [pc, #604]	; (8018380 <tcp_process+0x29c>)
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	429a      	cmp	r2, r3
 8018126:	d123      	bne.n	8018170 <tcp_process+0x8c>
        acceptable = 1;
 8018128:	2301      	movs	r3, #1
 801812a:	76fb      	strb	r3, [r7, #27]
 801812c:	e020      	b.n	8018170 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018132:	4b94      	ldr	r3, [pc, #592]	; (8018384 <tcp_process+0x2a0>)
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	429a      	cmp	r2, r3
 8018138:	d102      	bne.n	8018140 <tcp_process+0x5c>
        acceptable = 1;
 801813a:	2301      	movs	r3, #1
 801813c:	76fb      	strb	r3, [r7, #27]
 801813e:	e017      	b.n	8018170 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018140:	4b90      	ldr	r3, [pc, #576]	; (8018384 <tcp_process+0x2a0>)
 8018142:	681a      	ldr	r2, [r3, #0]
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018148:	1ad3      	subs	r3, r2, r3
 801814a:	2b00      	cmp	r3, #0
 801814c:	db10      	blt.n	8018170 <tcp_process+0x8c>
 801814e:	4b8d      	ldr	r3, [pc, #564]	; (8018384 <tcp_process+0x2a0>)
 8018150:	681a      	ldr	r2, [r3, #0]
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018156:	6879      	ldr	r1, [r7, #4]
 8018158:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801815a:	440b      	add	r3, r1
 801815c:	1ad3      	subs	r3, r2, r3
 801815e:	2b00      	cmp	r3, #0
 8018160:	dc06      	bgt.n	8018170 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	8b5b      	ldrh	r3, [r3, #26]
 8018166:	f043 0302 	orr.w	r3, r3, #2
 801816a:	b29a      	uxth	r2, r3
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018170:	7efb      	ldrb	r3, [r7, #27]
 8018172:	2b00      	cmp	r3, #0
 8018174:	d01b      	beq.n	80181ae <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	7d1b      	ldrb	r3, [r3, #20]
 801817a:	2b00      	cmp	r3, #0
 801817c:	d106      	bne.n	801818c <tcp_process+0xa8>
 801817e:	4b7c      	ldr	r3, [pc, #496]	; (8018370 <tcp_process+0x28c>)
 8018180:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018184:	4980      	ldr	r1, [pc, #512]	; (8018388 <tcp_process+0x2a4>)
 8018186:	487c      	ldr	r0, [pc, #496]	; (8018378 <tcp_process+0x294>)
 8018188:	f007 fa0a 	bl	801f5a0 <iprintf>
      recv_flags |= TF_RESET;
 801818c:	4b7f      	ldr	r3, [pc, #508]	; (801838c <tcp_process+0x2a8>)
 801818e:	781b      	ldrb	r3, [r3, #0]
 8018190:	f043 0308 	orr.w	r3, r3, #8
 8018194:	b2da      	uxtb	r2, r3
 8018196:	4b7d      	ldr	r3, [pc, #500]	; (801838c <tcp_process+0x2a8>)
 8018198:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	8b5b      	ldrh	r3, [r3, #26]
 801819e:	f023 0301 	bic.w	r3, r3, #1
 80181a2:	b29a      	uxth	r2, r3
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80181a8:	f06f 030d 	mvn.w	r3, #13
 80181ac:	e37a      	b.n	80188a4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80181ae:	2300      	movs	r3, #0
 80181b0:	e378      	b.n	80188a4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80181b2:	4b72      	ldr	r3, [pc, #456]	; (801837c <tcp_process+0x298>)
 80181b4:	781b      	ldrb	r3, [r3, #0]
 80181b6:	f003 0302 	and.w	r3, r3, #2
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d010      	beq.n	80181e0 <tcp_process+0xfc>
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	7d1b      	ldrb	r3, [r3, #20]
 80181c2:	2b02      	cmp	r3, #2
 80181c4:	d00c      	beq.n	80181e0 <tcp_process+0xfc>
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	7d1b      	ldrb	r3, [r3, #20]
 80181ca:	2b03      	cmp	r3, #3
 80181cc:	d008      	beq.n	80181e0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	8b5b      	ldrh	r3, [r3, #26]
 80181d2:	f043 0302 	orr.w	r3, r3, #2
 80181d6:	b29a      	uxth	r2, r3
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80181dc:	2300      	movs	r3, #0
 80181de:	e361      	b.n	80188a4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	8b5b      	ldrh	r3, [r3, #26]
 80181e4:	f003 0310 	and.w	r3, r3, #16
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d103      	bne.n	80181f4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80181ec:	4b68      	ldr	r3, [pc, #416]	; (8018390 <tcp_process+0x2ac>)
 80181ee:	681a      	ldr	r2, [r3, #0]
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	2200      	movs	r2, #0
 80181f8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	2200      	movs	r2, #0
 8018200:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8018204:	6878      	ldr	r0, [r7, #4]
 8018206:	f001 fc2f 	bl	8019a68 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	7d1b      	ldrb	r3, [r3, #20]
 801820e:	3b02      	subs	r3, #2
 8018210:	2b07      	cmp	r3, #7
 8018212:	f200 8337 	bhi.w	8018884 <tcp_process+0x7a0>
 8018216:	a201      	add	r2, pc, #4	; (adr r2, 801821c <tcp_process+0x138>)
 8018218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801821c:	0801823d 	.word	0x0801823d
 8018220:	0801846d 	.word	0x0801846d
 8018224:	080185e5 	.word	0x080185e5
 8018228:	0801860f 	.word	0x0801860f
 801822c:	08018733 	.word	0x08018733
 8018230:	080185e5 	.word	0x080185e5
 8018234:	080187bf 	.word	0x080187bf
 8018238:	0801884f 	.word	0x0801884f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801823c:	4b4f      	ldr	r3, [pc, #316]	; (801837c <tcp_process+0x298>)
 801823e:	781b      	ldrb	r3, [r3, #0]
 8018240:	f003 0310 	and.w	r3, r3, #16
 8018244:	2b00      	cmp	r3, #0
 8018246:	f000 80e4 	beq.w	8018412 <tcp_process+0x32e>
 801824a:	4b4c      	ldr	r3, [pc, #304]	; (801837c <tcp_process+0x298>)
 801824c:	781b      	ldrb	r3, [r3, #0]
 801824e:	f003 0302 	and.w	r3, r3, #2
 8018252:	2b00      	cmp	r3, #0
 8018254:	f000 80dd 	beq.w	8018412 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801825c:	1c5a      	adds	r2, r3, #1
 801825e:	4b48      	ldr	r3, [pc, #288]	; (8018380 <tcp_process+0x29c>)
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	429a      	cmp	r2, r3
 8018264:	f040 80d5 	bne.w	8018412 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018268:	4b46      	ldr	r3, [pc, #280]	; (8018384 <tcp_process+0x2a0>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	1c5a      	adds	r2, r3, #1
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801827a:	4b41      	ldr	r3, [pc, #260]	; (8018380 <tcp_process+0x29c>)
 801827c:	681a      	ldr	r2, [r3, #0]
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018282:	4b44      	ldr	r3, [pc, #272]	; (8018394 <tcp_process+0x2b0>)
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	89db      	ldrh	r3, [r3, #14]
 8018288:	b29a      	uxth	r2, r3
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801829c:	4b39      	ldr	r3, [pc, #228]	; (8018384 <tcp_process+0x2a0>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	1e5a      	subs	r2, r3, #1
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	2204      	movs	r2, #4
 80182aa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	3304      	adds	r3, #4
 80182b4:	4618      	mov	r0, r3
 80182b6:	f005 fb17 	bl	801d8e8 <ip4_route>
 80182ba:	4601      	mov	r1, r0
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	3304      	adds	r3, #4
 80182c0:	461a      	mov	r2, r3
 80182c2:	4620      	mov	r0, r4
 80182c4:	f7ff f88c 	bl	80173e0 <tcp_eff_send_mss_netif>
 80182c8:	4603      	mov	r3, r0
 80182ca:	461a      	mov	r2, r3
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80182d4:	009a      	lsls	r2, r3, #2
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80182da:	005b      	lsls	r3, r3, #1
 80182dc:	f241 111c 	movw	r1, #4380	; 0x111c
 80182e0:	428b      	cmp	r3, r1
 80182e2:	bf38      	it	cc
 80182e4:	460b      	movcc	r3, r1
 80182e6:	429a      	cmp	r2, r3
 80182e8:	d204      	bcs.n	80182f4 <tcp_process+0x210>
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80182ee:	009b      	lsls	r3, r3, #2
 80182f0:	b29b      	uxth	r3, r3
 80182f2:	e00d      	b.n	8018310 <tcp_process+0x22c>
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80182f8:	005b      	lsls	r3, r3, #1
 80182fa:	f241 121c 	movw	r2, #4380	; 0x111c
 80182fe:	4293      	cmp	r3, r2
 8018300:	d904      	bls.n	801830c <tcp_process+0x228>
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018306:	005b      	lsls	r3, r3, #1
 8018308:	b29b      	uxth	r3, r3
 801830a:	e001      	b.n	8018310 <tcp_process+0x22c>
 801830c:	f241 131c 	movw	r3, #4380	; 0x111c
 8018310:	687a      	ldr	r2, [r7, #4]
 8018312:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801831c:	2b00      	cmp	r3, #0
 801831e:	d106      	bne.n	801832e <tcp_process+0x24a>
 8018320:	4b13      	ldr	r3, [pc, #76]	; (8018370 <tcp_process+0x28c>)
 8018322:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018326:	491c      	ldr	r1, [pc, #112]	; (8018398 <tcp_process+0x2b4>)
 8018328:	4813      	ldr	r0, [pc, #76]	; (8018378 <tcp_process+0x294>)
 801832a:	f007 f939 	bl	801f5a0 <iprintf>
        --pcb->snd_queuelen;
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018334:	3b01      	subs	r3, #1
 8018336:	b29a      	uxth	r2, r3
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018342:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018344:	69fb      	ldr	r3, [r7, #28]
 8018346:	2b00      	cmp	r3, #0
 8018348:	d12a      	bne.n	80183a0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801834e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018350:	69fb      	ldr	r3, [r7, #28]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d106      	bne.n	8018364 <tcp_process+0x280>
 8018356:	4b06      	ldr	r3, [pc, #24]	; (8018370 <tcp_process+0x28c>)
 8018358:	f44f 725d 	mov.w	r2, #884	; 0x374
 801835c:	490f      	ldr	r1, [pc, #60]	; (801839c <tcp_process+0x2b8>)
 801835e:	4806      	ldr	r0, [pc, #24]	; (8018378 <tcp_process+0x294>)
 8018360:	f007 f91e 	bl	801f5a0 <iprintf>
          pcb->unsent = rseg->next;
 8018364:	69fb      	ldr	r3, [r7, #28]
 8018366:	681a      	ldr	r2, [r3, #0]
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	66da      	str	r2, [r3, #108]	; 0x6c
 801836c:	e01c      	b.n	80183a8 <tcp_process+0x2c4>
 801836e:	bf00      	nop
 8018370:	080227ec 	.word	0x080227ec
 8018374:	08022a24 	.word	0x08022a24
 8018378:	08022838 	.word	0x08022838
 801837c:	2000c02c 	.word	0x2000c02c
 8018380:	2000c024 	.word	0x2000c024
 8018384:	2000c020 	.word	0x2000c020
 8018388:	08022a40 	.word	0x08022a40
 801838c:	2000c02d 	.word	0x2000c02d
 8018390:	2000bfe8 	.word	0x2000bfe8
 8018394:	2000c010 	.word	0x2000c010
 8018398:	08022a60 	.word	0x08022a60
 801839c:	08022a78 	.word	0x08022a78
        } else {
          pcb->unacked = rseg->next;
 80183a0:	69fb      	ldr	r3, [r7, #28]
 80183a2:	681a      	ldr	r2, [r3, #0]
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80183a8:	69f8      	ldr	r0, [r7, #28]
 80183aa:	f7fe fc54 	bl	8016c56 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d104      	bne.n	80183c0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80183bc:	861a      	strh	r2, [r3, #48]	; 0x30
 80183be:	e006      	b.n	80183ce <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	2200      	movs	r2, #0
 80183c4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	2200      	movs	r2, #0
 80183ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d00a      	beq.n	80183ee <tcp_process+0x30a>
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80183de:	687a      	ldr	r2, [r7, #4]
 80183e0:	6910      	ldr	r0, [r2, #16]
 80183e2:	2200      	movs	r2, #0
 80183e4:	6879      	ldr	r1, [r7, #4]
 80183e6:	4798      	blx	r3
 80183e8:	4603      	mov	r3, r0
 80183ea:	76bb      	strb	r3, [r7, #26]
 80183ec:	e001      	b.n	80183f2 <tcp_process+0x30e>
 80183ee:	2300      	movs	r3, #0
 80183f0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80183f2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80183f6:	f113 0f0d 	cmn.w	r3, #13
 80183fa:	d102      	bne.n	8018402 <tcp_process+0x31e>
          return ERR_ABRT;
 80183fc:	f06f 030c 	mvn.w	r3, #12
 8018400:	e250      	b.n	80188a4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	8b5b      	ldrh	r3, [r3, #26]
 8018406:	f043 0302 	orr.w	r3, r3, #2
 801840a:	b29a      	uxth	r2, r3
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018410:	e23a      	b.n	8018888 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018412:	4b98      	ldr	r3, [pc, #608]	; (8018674 <tcp_process+0x590>)
 8018414:	781b      	ldrb	r3, [r3, #0]
 8018416:	f003 0310 	and.w	r3, r3, #16
 801841a:	2b00      	cmp	r3, #0
 801841c:	f000 8234 	beq.w	8018888 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018420:	4b95      	ldr	r3, [pc, #596]	; (8018678 <tcp_process+0x594>)
 8018422:	6819      	ldr	r1, [r3, #0]
 8018424:	4b95      	ldr	r3, [pc, #596]	; (801867c <tcp_process+0x598>)
 8018426:	881b      	ldrh	r3, [r3, #0]
 8018428:	461a      	mov	r2, r3
 801842a:	4b95      	ldr	r3, [pc, #596]	; (8018680 <tcp_process+0x59c>)
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018430:	4b94      	ldr	r3, [pc, #592]	; (8018684 <tcp_process+0x5a0>)
 8018432:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018434:	885b      	ldrh	r3, [r3, #2]
 8018436:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018438:	4a92      	ldr	r2, [pc, #584]	; (8018684 <tcp_process+0x5a0>)
 801843a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801843c:	8812      	ldrh	r2, [r2, #0]
 801843e:	b292      	uxth	r2, r2
 8018440:	9202      	str	r2, [sp, #8]
 8018442:	9301      	str	r3, [sp, #4]
 8018444:	4b90      	ldr	r3, [pc, #576]	; (8018688 <tcp_process+0x5a4>)
 8018446:	9300      	str	r3, [sp, #0]
 8018448:	4b90      	ldr	r3, [pc, #576]	; (801868c <tcp_process+0x5a8>)
 801844a:	4602      	mov	r2, r0
 801844c:	6878      	ldr	r0, [r7, #4]
 801844e:	f003 f8dd 	bl	801b60c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018458:	2b05      	cmp	r3, #5
 801845a:	f200 8215 	bhi.w	8018888 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	2200      	movs	r2, #0
 8018462:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018464:	6878      	ldr	r0, [r7, #4]
 8018466:	f002 fea7 	bl	801b1b8 <tcp_rexmit_rto>
      break;
 801846a:	e20d      	b.n	8018888 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801846c:	4b81      	ldr	r3, [pc, #516]	; (8018674 <tcp_process+0x590>)
 801846e:	781b      	ldrb	r3, [r3, #0]
 8018470:	f003 0310 	and.w	r3, r3, #16
 8018474:	2b00      	cmp	r3, #0
 8018476:	f000 80a1 	beq.w	80185bc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801847a:	4b7f      	ldr	r3, [pc, #508]	; (8018678 <tcp_process+0x594>)
 801847c:	681a      	ldr	r2, [r3, #0]
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018482:	1ad3      	subs	r3, r2, r3
 8018484:	3b01      	subs	r3, #1
 8018486:	2b00      	cmp	r3, #0
 8018488:	db7e      	blt.n	8018588 <tcp_process+0x4a4>
 801848a:	4b7b      	ldr	r3, [pc, #492]	; (8018678 <tcp_process+0x594>)
 801848c:	681a      	ldr	r2, [r3, #0]
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018492:	1ad3      	subs	r3, r2, r3
 8018494:	2b00      	cmp	r3, #0
 8018496:	dc77      	bgt.n	8018588 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	2204      	movs	r2, #4
 801849c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d102      	bne.n	80184ac <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80184a6:	23fa      	movs	r3, #250	; 0xfa
 80184a8:	76bb      	strb	r3, [r7, #26]
 80184aa:	e01d      	b.n	80184e8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80184b0:	699b      	ldr	r3, [r3, #24]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d106      	bne.n	80184c4 <tcp_process+0x3e0>
 80184b6:	4b76      	ldr	r3, [pc, #472]	; (8018690 <tcp_process+0x5ac>)
 80184b8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80184bc:	4975      	ldr	r1, [pc, #468]	; (8018694 <tcp_process+0x5b0>)
 80184be:	4876      	ldr	r0, [pc, #472]	; (8018698 <tcp_process+0x5b4>)
 80184c0:	f007 f86e 	bl	801f5a0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80184c8:	699b      	ldr	r3, [r3, #24]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d00a      	beq.n	80184e4 <tcp_process+0x400>
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80184d2:	699b      	ldr	r3, [r3, #24]
 80184d4:	687a      	ldr	r2, [r7, #4]
 80184d6:	6910      	ldr	r0, [r2, #16]
 80184d8:	2200      	movs	r2, #0
 80184da:	6879      	ldr	r1, [r7, #4]
 80184dc:	4798      	blx	r3
 80184de:	4603      	mov	r3, r0
 80184e0:	76bb      	strb	r3, [r7, #26]
 80184e2:	e001      	b.n	80184e8 <tcp_process+0x404>
 80184e4:	23f0      	movs	r3, #240	; 0xf0
 80184e6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80184e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d00a      	beq.n	8018506 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80184f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80184f4:	f113 0f0d 	cmn.w	r3, #13
 80184f8:	d002      	beq.n	8018500 <tcp_process+0x41c>
              tcp_abort(pcb);
 80184fa:	6878      	ldr	r0, [r7, #4]
 80184fc:	f7fd fc00 	bl	8015d00 <tcp_abort>
            }
            return ERR_ABRT;
 8018500:	f06f 030c 	mvn.w	r3, #12
 8018504:	e1ce      	b.n	80188a4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8018506:	6878      	ldr	r0, [r7, #4]
 8018508:	f000 fae0 	bl	8018acc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801850c:	4b63      	ldr	r3, [pc, #396]	; (801869c <tcp_process+0x5b8>)
 801850e:	881b      	ldrh	r3, [r3, #0]
 8018510:	2b00      	cmp	r3, #0
 8018512:	d005      	beq.n	8018520 <tcp_process+0x43c>
            recv_acked--;
 8018514:	4b61      	ldr	r3, [pc, #388]	; (801869c <tcp_process+0x5b8>)
 8018516:	881b      	ldrh	r3, [r3, #0]
 8018518:	3b01      	subs	r3, #1
 801851a:	b29a      	uxth	r2, r3
 801851c:	4b5f      	ldr	r3, [pc, #380]	; (801869c <tcp_process+0x5b8>)
 801851e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018524:	009a      	lsls	r2, r3, #2
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801852a:	005b      	lsls	r3, r3, #1
 801852c:	f241 111c 	movw	r1, #4380	; 0x111c
 8018530:	428b      	cmp	r3, r1
 8018532:	bf38      	it	cc
 8018534:	460b      	movcc	r3, r1
 8018536:	429a      	cmp	r2, r3
 8018538:	d204      	bcs.n	8018544 <tcp_process+0x460>
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801853e:	009b      	lsls	r3, r3, #2
 8018540:	b29b      	uxth	r3, r3
 8018542:	e00d      	b.n	8018560 <tcp_process+0x47c>
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018548:	005b      	lsls	r3, r3, #1
 801854a:	f241 121c 	movw	r2, #4380	; 0x111c
 801854e:	4293      	cmp	r3, r2
 8018550:	d904      	bls.n	801855c <tcp_process+0x478>
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018556:	005b      	lsls	r3, r3, #1
 8018558:	b29b      	uxth	r3, r3
 801855a:	e001      	b.n	8018560 <tcp_process+0x47c>
 801855c:	f241 131c 	movw	r3, #4380	; 0x111c
 8018560:	687a      	ldr	r2, [r7, #4]
 8018562:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018566:	4b4e      	ldr	r3, [pc, #312]	; (80186a0 <tcp_process+0x5bc>)
 8018568:	781b      	ldrb	r3, [r3, #0]
 801856a:	f003 0320 	and.w	r3, r3, #32
 801856e:	2b00      	cmp	r3, #0
 8018570:	d037      	beq.n	80185e2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	8b5b      	ldrh	r3, [r3, #26]
 8018576:	f043 0302 	orr.w	r3, r3, #2
 801857a:	b29a      	uxth	r2, r3
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	2207      	movs	r2, #7
 8018584:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8018586:	e02c      	b.n	80185e2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018588:	4b3b      	ldr	r3, [pc, #236]	; (8018678 <tcp_process+0x594>)
 801858a:	6819      	ldr	r1, [r3, #0]
 801858c:	4b3b      	ldr	r3, [pc, #236]	; (801867c <tcp_process+0x598>)
 801858e:	881b      	ldrh	r3, [r3, #0]
 8018590:	461a      	mov	r2, r3
 8018592:	4b3b      	ldr	r3, [pc, #236]	; (8018680 <tcp_process+0x59c>)
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018598:	4b3a      	ldr	r3, [pc, #232]	; (8018684 <tcp_process+0x5a0>)
 801859a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801859c:	885b      	ldrh	r3, [r3, #2]
 801859e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80185a0:	4a38      	ldr	r2, [pc, #224]	; (8018684 <tcp_process+0x5a0>)
 80185a2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80185a4:	8812      	ldrh	r2, [r2, #0]
 80185a6:	b292      	uxth	r2, r2
 80185a8:	9202      	str	r2, [sp, #8]
 80185aa:	9301      	str	r3, [sp, #4]
 80185ac:	4b36      	ldr	r3, [pc, #216]	; (8018688 <tcp_process+0x5a4>)
 80185ae:	9300      	str	r3, [sp, #0]
 80185b0:	4b36      	ldr	r3, [pc, #216]	; (801868c <tcp_process+0x5a8>)
 80185b2:	4602      	mov	r2, r0
 80185b4:	6878      	ldr	r0, [r7, #4]
 80185b6:	f003 f829 	bl	801b60c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80185ba:	e167      	b.n	801888c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80185bc:	4b2d      	ldr	r3, [pc, #180]	; (8018674 <tcp_process+0x590>)
 80185be:	781b      	ldrb	r3, [r3, #0]
 80185c0:	f003 0302 	and.w	r3, r3, #2
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	f000 8161 	beq.w	801888c <tcp_process+0x7a8>
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185ce:	1e5a      	subs	r2, r3, #1
 80185d0:	4b2b      	ldr	r3, [pc, #172]	; (8018680 <tcp_process+0x59c>)
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	429a      	cmp	r2, r3
 80185d6:	f040 8159 	bne.w	801888c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80185da:	6878      	ldr	r0, [r7, #4]
 80185dc:	f002 fe0e 	bl	801b1fc <tcp_rexmit>
      break;
 80185e0:	e154      	b.n	801888c <tcp_process+0x7a8>
 80185e2:	e153      	b.n	801888c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80185e4:	6878      	ldr	r0, [r7, #4]
 80185e6:	f000 fa71 	bl	8018acc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80185ea:	4b2d      	ldr	r3, [pc, #180]	; (80186a0 <tcp_process+0x5bc>)
 80185ec:	781b      	ldrb	r3, [r3, #0]
 80185ee:	f003 0320 	and.w	r3, r3, #32
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	f000 814c 	beq.w	8018890 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	8b5b      	ldrh	r3, [r3, #26]
 80185fc:	f043 0302 	orr.w	r3, r3, #2
 8018600:	b29a      	uxth	r2, r3
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	2207      	movs	r2, #7
 801860a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801860c:	e140      	b.n	8018890 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801860e:	6878      	ldr	r0, [r7, #4]
 8018610:	f000 fa5c 	bl	8018acc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018614:	4b22      	ldr	r3, [pc, #136]	; (80186a0 <tcp_process+0x5bc>)
 8018616:	781b      	ldrb	r3, [r3, #0]
 8018618:	f003 0320 	and.w	r3, r3, #32
 801861c:	2b00      	cmp	r3, #0
 801861e:	d071      	beq.n	8018704 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018620:	4b14      	ldr	r3, [pc, #80]	; (8018674 <tcp_process+0x590>)
 8018622:	781b      	ldrb	r3, [r3, #0]
 8018624:	f003 0310 	and.w	r3, r3, #16
 8018628:	2b00      	cmp	r3, #0
 801862a:	d060      	beq.n	80186ee <tcp_process+0x60a>
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018630:	4b11      	ldr	r3, [pc, #68]	; (8018678 <tcp_process+0x594>)
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	429a      	cmp	r2, r3
 8018636:	d15a      	bne.n	80186ee <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801863c:	2b00      	cmp	r3, #0
 801863e:	d156      	bne.n	80186ee <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	8b5b      	ldrh	r3, [r3, #26]
 8018644:	f043 0302 	orr.w	r3, r3, #2
 8018648:	b29a      	uxth	r2, r3
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801864e:	6878      	ldr	r0, [r7, #4]
 8018650:	f7fe fdbc 	bl	80171cc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018654:	4b13      	ldr	r3, [pc, #76]	; (80186a4 <tcp_process+0x5c0>)
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	687a      	ldr	r2, [r7, #4]
 801865a:	429a      	cmp	r2, r3
 801865c:	d105      	bne.n	801866a <tcp_process+0x586>
 801865e:	4b11      	ldr	r3, [pc, #68]	; (80186a4 <tcp_process+0x5c0>)
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	68db      	ldr	r3, [r3, #12]
 8018664:	4a0f      	ldr	r2, [pc, #60]	; (80186a4 <tcp_process+0x5c0>)
 8018666:	6013      	str	r3, [r2, #0]
 8018668:	e02e      	b.n	80186c8 <tcp_process+0x5e4>
 801866a:	4b0e      	ldr	r3, [pc, #56]	; (80186a4 <tcp_process+0x5c0>)
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	617b      	str	r3, [r7, #20]
 8018670:	e027      	b.n	80186c2 <tcp_process+0x5de>
 8018672:	bf00      	nop
 8018674:	2000c02c 	.word	0x2000c02c
 8018678:	2000c024 	.word	0x2000c024
 801867c:	2000c02a 	.word	0x2000c02a
 8018680:	2000c020 	.word	0x2000c020
 8018684:	2000c010 	.word	0x2000c010
 8018688:	200066e4 	.word	0x200066e4
 801868c:	200066e8 	.word	0x200066e8
 8018690:	080227ec 	.word	0x080227ec
 8018694:	08022a8c 	.word	0x08022a8c
 8018698:	08022838 	.word	0x08022838
 801869c:	2000c028 	.word	0x2000c028
 80186a0:	2000c02d 	.word	0x2000c02d
 80186a4:	2000bff4 	.word	0x2000bff4
 80186a8:	697b      	ldr	r3, [r7, #20]
 80186aa:	68db      	ldr	r3, [r3, #12]
 80186ac:	687a      	ldr	r2, [r7, #4]
 80186ae:	429a      	cmp	r2, r3
 80186b0:	d104      	bne.n	80186bc <tcp_process+0x5d8>
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	68da      	ldr	r2, [r3, #12]
 80186b6:	697b      	ldr	r3, [r7, #20]
 80186b8:	60da      	str	r2, [r3, #12]
 80186ba:	e005      	b.n	80186c8 <tcp_process+0x5e4>
 80186bc:	697b      	ldr	r3, [r7, #20]
 80186be:	68db      	ldr	r3, [r3, #12]
 80186c0:	617b      	str	r3, [r7, #20]
 80186c2:	697b      	ldr	r3, [r7, #20]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d1ef      	bne.n	80186a8 <tcp_process+0x5c4>
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	2200      	movs	r2, #0
 80186cc:	60da      	str	r2, [r3, #12]
 80186ce:	4b77      	ldr	r3, [pc, #476]	; (80188ac <tcp_process+0x7c8>)
 80186d0:	2201      	movs	r2, #1
 80186d2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	220a      	movs	r2, #10
 80186d8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80186da:	4b75      	ldr	r3, [pc, #468]	; (80188b0 <tcp_process+0x7cc>)
 80186dc:	681a      	ldr	r2, [r3, #0]
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	60da      	str	r2, [r3, #12]
 80186e2:	4a73      	ldr	r2, [pc, #460]	; (80188b0 <tcp_process+0x7cc>)
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	6013      	str	r3, [r2, #0]
 80186e8:	f003 f952 	bl	801b990 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80186ec:	e0d2      	b.n	8018894 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	8b5b      	ldrh	r3, [r3, #26]
 80186f2:	f043 0302 	orr.w	r3, r3, #2
 80186f6:	b29a      	uxth	r2, r3
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	2208      	movs	r2, #8
 8018700:	751a      	strb	r2, [r3, #20]
      break;
 8018702:	e0c7      	b.n	8018894 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018704:	4b6b      	ldr	r3, [pc, #428]	; (80188b4 <tcp_process+0x7d0>)
 8018706:	781b      	ldrb	r3, [r3, #0]
 8018708:	f003 0310 	and.w	r3, r3, #16
 801870c:	2b00      	cmp	r3, #0
 801870e:	f000 80c1 	beq.w	8018894 <tcp_process+0x7b0>
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018716:	4b68      	ldr	r3, [pc, #416]	; (80188b8 <tcp_process+0x7d4>)
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	429a      	cmp	r2, r3
 801871c:	f040 80ba 	bne.w	8018894 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018724:	2b00      	cmp	r3, #0
 8018726:	f040 80b5 	bne.w	8018894 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2206      	movs	r2, #6
 801872e:	751a      	strb	r2, [r3, #20]
      break;
 8018730:	e0b0      	b.n	8018894 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018732:	6878      	ldr	r0, [r7, #4]
 8018734:	f000 f9ca 	bl	8018acc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018738:	4b60      	ldr	r3, [pc, #384]	; (80188bc <tcp_process+0x7d8>)
 801873a:	781b      	ldrb	r3, [r3, #0]
 801873c:	f003 0320 	and.w	r3, r3, #32
 8018740:	2b00      	cmp	r3, #0
 8018742:	f000 80a9 	beq.w	8018898 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	8b5b      	ldrh	r3, [r3, #26]
 801874a:	f043 0302 	orr.w	r3, r3, #2
 801874e:	b29a      	uxth	r2, r3
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018754:	6878      	ldr	r0, [r7, #4]
 8018756:	f7fe fd39 	bl	80171cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801875a:	4b59      	ldr	r3, [pc, #356]	; (80188c0 <tcp_process+0x7dc>)
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	687a      	ldr	r2, [r7, #4]
 8018760:	429a      	cmp	r2, r3
 8018762:	d105      	bne.n	8018770 <tcp_process+0x68c>
 8018764:	4b56      	ldr	r3, [pc, #344]	; (80188c0 <tcp_process+0x7dc>)
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	68db      	ldr	r3, [r3, #12]
 801876a:	4a55      	ldr	r2, [pc, #340]	; (80188c0 <tcp_process+0x7dc>)
 801876c:	6013      	str	r3, [r2, #0]
 801876e:	e013      	b.n	8018798 <tcp_process+0x6b4>
 8018770:	4b53      	ldr	r3, [pc, #332]	; (80188c0 <tcp_process+0x7dc>)
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	613b      	str	r3, [r7, #16]
 8018776:	e00c      	b.n	8018792 <tcp_process+0x6ae>
 8018778:	693b      	ldr	r3, [r7, #16]
 801877a:	68db      	ldr	r3, [r3, #12]
 801877c:	687a      	ldr	r2, [r7, #4]
 801877e:	429a      	cmp	r2, r3
 8018780:	d104      	bne.n	801878c <tcp_process+0x6a8>
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	68da      	ldr	r2, [r3, #12]
 8018786:	693b      	ldr	r3, [r7, #16]
 8018788:	60da      	str	r2, [r3, #12]
 801878a:	e005      	b.n	8018798 <tcp_process+0x6b4>
 801878c:	693b      	ldr	r3, [r7, #16]
 801878e:	68db      	ldr	r3, [r3, #12]
 8018790:	613b      	str	r3, [r7, #16]
 8018792:	693b      	ldr	r3, [r7, #16]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d1ef      	bne.n	8018778 <tcp_process+0x694>
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	2200      	movs	r2, #0
 801879c:	60da      	str	r2, [r3, #12]
 801879e:	4b43      	ldr	r3, [pc, #268]	; (80188ac <tcp_process+0x7c8>)
 80187a0:	2201      	movs	r2, #1
 80187a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	220a      	movs	r2, #10
 80187a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80187aa:	4b41      	ldr	r3, [pc, #260]	; (80188b0 <tcp_process+0x7cc>)
 80187ac:	681a      	ldr	r2, [r3, #0]
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	60da      	str	r2, [r3, #12]
 80187b2:	4a3f      	ldr	r2, [pc, #252]	; (80188b0 <tcp_process+0x7cc>)
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	6013      	str	r3, [r2, #0]
 80187b8:	f003 f8ea 	bl	801b990 <tcp_timer_needed>
      }
      break;
 80187bc:	e06c      	b.n	8018898 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80187be:	6878      	ldr	r0, [r7, #4]
 80187c0:	f000 f984 	bl	8018acc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80187c4:	4b3b      	ldr	r3, [pc, #236]	; (80188b4 <tcp_process+0x7d0>)
 80187c6:	781b      	ldrb	r3, [r3, #0]
 80187c8:	f003 0310 	and.w	r3, r3, #16
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d065      	beq.n	801889c <tcp_process+0x7b8>
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80187d4:	4b38      	ldr	r3, [pc, #224]	; (80188b8 <tcp_process+0x7d4>)
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	429a      	cmp	r2, r3
 80187da:	d15f      	bne.n	801889c <tcp_process+0x7b8>
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d15b      	bne.n	801889c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80187e4:	6878      	ldr	r0, [r7, #4]
 80187e6:	f7fe fcf1 	bl	80171cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80187ea:	4b35      	ldr	r3, [pc, #212]	; (80188c0 <tcp_process+0x7dc>)
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	687a      	ldr	r2, [r7, #4]
 80187f0:	429a      	cmp	r2, r3
 80187f2:	d105      	bne.n	8018800 <tcp_process+0x71c>
 80187f4:	4b32      	ldr	r3, [pc, #200]	; (80188c0 <tcp_process+0x7dc>)
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	68db      	ldr	r3, [r3, #12]
 80187fa:	4a31      	ldr	r2, [pc, #196]	; (80188c0 <tcp_process+0x7dc>)
 80187fc:	6013      	str	r3, [r2, #0]
 80187fe:	e013      	b.n	8018828 <tcp_process+0x744>
 8018800:	4b2f      	ldr	r3, [pc, #188]	; (80188c0 <tcp_process+0x7dc>)
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	60fb      	str	r3, [r7, #12]
 8018806:	e00c      	b.n	8018822 <tcp_process+0x73e>
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	68db      	ldr	r3, [r3, #12]
 801880c:	687a      	ldr	r2, [r7, #4]
 801880e:	429a      	cmp	r2, r3
 8018810:	d104      	bne.n	801881c <tcp_process+0x738>
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	68da      	ldr	r2, [r3, #12]
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	60da      	str	r2, [r3, #12]
 801881a:	e005      	b.n	8018828 <tcp_process+0x744>
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	68db      	ldr	r3, [r3, #12]
 8018820:	60fb      	str	r3, [r7, #12]
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d1ef      	bne.n	8018808 <tcp_process+0x724>
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	2200      	movs	r2, #0
 801882c:	60da      	str	r2, [r3, #12]
 801882e:	4b1f      	ldr	r3, [pc, #124]	; (80188ac <tcp_process+0x7c8>)
 8018830:	2201      	movs	r2, #1
 8018832:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	220a      	movs	r2, #10
 8018838:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801883a:	4b1d      	ldr	r3, [pc, #116]	; (80188b0 <tcp_process+0x7cc>)
 801883c:	681a      	ldr	r2, [r3, #0]
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	60da      	str	r2, [r3, #12]
 8018842:	4a1b      	ldr	r2, [pc, #108]	; (80188b0 <tcp_process+0x7cc>)
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	6013      	str	r3, [r2, #0]
 8018848:	f003 f8a2 	bl	801b990 <tcp_timer_needed>
      }
      break;
 801884c:	e026      	b.n	801889c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801884e:	6878      	ldr	r0, [r7, #4]
 8018850:	f000 f93c 	bl	8018acc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018854:	4b17      	ldr	r3, [pc, #92]	; (80188b4 <tcp_process+0x7d0>)
 8018856:	781b      	ldrb	r3, [r3, #0]
 8018858:	f003 0310 	and.w	r3, r3, #16
 801885c:	2b00      	cmp	r3, #0
 801885e:	d01f      	beq.n	80188a0 <tcp_process+0x7bc>
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018864:	4b14      	ldr	r3, [pc, #80]	; (80188b8 <tcp_process+0x7d4>)
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	429a      	cmp	r2, r3
 801886a:	d119      	bne.n	80188a0 <tcp_process+0x7bc>
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018870:	2b00      	cmp	r3, #0
 8018872:	d115      	bne.n	80188a0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8018874:	4b11      	ldr	r3, [pc, #68]	; (80188bc <tcp_process+0x7d8>)
 8018876:	781b      	ldrb	r3, [r3, #0]
 8018878:	f043 0310 	orr.w	r3, r3, #16
 801887c:	b2da      	uxtb	r2, r3
 801887e:	4b0f      	ldr	r3, [pc, #60]	; (80188bc <tcp_process+0x7d8>)
 8018880:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018882:	e00d      	b.n	80188a0 <tcp_process+0x7bc>
    default:
      break;
 8018884:	bf00      	nop
 8018886:	e00c      	b.n	80188a2 <tcp_process+0x7be>
      break;
 8018888:	bf00      	nop
 801888a:	e00a      	b.n	80188a2 <tcp_process+0x7be>
      break;
 801888c:	bf00      	nop
 801888e:	e008      	b.n	80188a2 <tcp_process+0x7be>
      break;
 8018890:	bf00      	nop
 8018892:	e006      	b.n	80188a2 <tcp_process+0x7be>
      break;
 8018894:	bf00      	nop
 8018896:	e004      	b.n	80188a2 <tcp_process+0x7be>
      break;
 8018898:	bf00      	nop
 801889a:	e002      	b.n	80188a2 <tcp_process+0x7be>
      break;
 801889c:	bf00      	nop
 801889e:	e000      	b.n	80188a2 <tcp_process+0x7be>
      break;
 80188a0:	bf00      	nop
  }
  return ERR_OK;
 80188a2:	2300      	movs	r3, #0
}
 80188a4:	4618      	mov	r0, r3
 80188a6:	3724      	adds	r7, #36	; 0x24
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd90      	pop	{r4, r7, pc}
 80188ac:	2000bffc 	.word	0x2000bffc
 80188b0:	2000bff8 	.word	0x2000bff8
 80188b4:	2000c02c 	.word	0x2000c02c
 80188b8:	2000c024 	.word	0x2000c024
 80188bc:	2000c02d 	.word	0x2000c02d
 80188c0:	2000bff4 	.word	0x2000bff4

080188c4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80188c4:	b590      	push	{r4, r7, lr}
 80188c6:	b085      	sub	sp, #20
 80188c8:	af00      	add	r7, sp, #0
 80188ca:	6078      	str	r0, [r7, #4]
 80188cc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d106      	bne.n	80188e2 <tcp_oos_insert_segment+0x1e>
 80188d4:	4b3b      	ldr	r3, [pc, #236]	; (80189c4 <tcp_oos_insert_segment+0x100>)
 80188d6:	f240 421f 	movw	r2, #1055	; 0x41f
 80188da:	493b      	ldr	r1, [pc, #236]	; (80189c8 <tcp_oos_insert_segment+0x104>)
 80188dc:	483b      	ldr	r0, [pc, #236]	; (80189cc <tcp_oos_insert_segment+0x108>)
 80188de:	f006 fe5f 	bl	801f5a0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	68db      	ldr	r3, [r3, #12]
 80188e6:	899b      	ldrh	r3, [r3, #12]
 80188e8:	b29b      	uxth	r3, r3
 80188ea:	4618      	mov	r0, r3
 80188ec:	f7fb f816 	bl	801391c <lwip_htons>
 80188f0:	4603      	mov	r3, r0
 80188f2:	b2db      	uxtb	r3, r3
 80188f4:	f003 0301 	and.w	r3, r3, #1
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d028      	beq.n	801894e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80188fc:	6838      	ldr	r0, [r7, #0]
 80188fe:	f7fe f995 	bl	8016c2c <tcp_segs_free>
    next = NULL;
 8018902:	2300      	movs	r3, #0
 8018904:	603b      	str	r3, [r7, #0]
 8018906:	e056      	b.n	80189b6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018908:	683b      	ldr	r3, [r7, #0]
 801890a:	68db      	ldr	r3, [r3, #12]
 801890c:	899b      	ldrh	r3, [r3, #12]
 801890e:	b29b      	uxth	r3, r3
 8018910:	4618      	mov	r0, r3
 8018912:	f7fb f803 	bl	801391c <lwip_htons>
 8018916:	4603      	mov	r3, r0
 8018918:	b2db      	uxtb	r3, r3
 801891a:	f003 0301 	and.w	r3, r3, #1
 801891e:	2b00      	cmp	r3, #0
 8018920:	d00d      	beq.n	801893e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	68db      	ldr	r3, [r3, #12]
 8018926:	899b      	ldrh	r3, [r3, #12]
 8018928:	b29c      	uxth	r4, r3
 801892a:	2001      	movs	r0, #1
 801892c:	f7fa fff6 	bl	801391c <lwip_htons>
 8018930:	4603      	mov	r3, r0
 8018932:	461a      	mov	r2, r3
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	68db      	ldr	r3, [r3, #12]
 8018938:	4322      	orrs	r2, r4
 801893a:	b292      	uxth	r2, r2
 801893c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801893e:	683b      	ldr	r3, [r7, #0]
 8018940:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8018942:	683b      	ldr	r3, [r7, #0]
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018948:	68f8      	ldr	r0, [r7, #12]
 801894a:	f7fe f984 	bl	8016c56 <tcp_seg_free>
    while (next &&
 801894e:	683b      	ldr	r3, [r7, #0]
 8018950:	2b00      	cmp	r3, #0
 8018952:	d00e      	beq.n	8018972 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	891b      	ldrh	r3, [r3, #8]
 8018958:	461a      	mov	r2, r3
 801895a:	4b1d      	ldr	r3, [pc, #116]	; (80189d0 <tcp_oos_insert_segment+0x10c>)
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	441a      	add	r2, r3
 8018960:	683b      	ldr	r3, [r7, #0]
 8018962:	68db      	ldr	r3, [r3, #12]
 8018964:	685b      	ldr	r3, [r3, #4]
 8018966:	6839      	ldr	r1, [r7, #0]
 8018968:	8909      	ldrh	r1, [r1, #8]
 801896a:	440b      	add	r3, r1
 801896c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801896e:	2b00      	cmp	r3, #0
 8018970:	daca      	bge.n	8018908 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	2b00      	cmp	r3, #0
 8018976:	d01e      	beq.n	80189b6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	891b      	ldrh	r3, [r3, #8]
 801897c:	461a      	mov	r2, r3
 801897e:	4b14      	ldr	r3, [pc, #80]	; (80189d0 <tcp_oos_insert_segment+0x10c>)
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	441a      	add	r2, r3
 8018984:	683b      	ldr	r3, [r7, #0]
 8018986:	68db      	ldr	r3, [r3, #12]
 8018988:	685b      	ldr	r3, [r3, #4]
 801898a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801898c:	2b00      	cmp	r3, #0
 801898e:	dd12      	ble.n	80189b6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018990:	683b      	ldr	r3, [r7, #0]
 8018992:	68db      	ldr	r3, [r3, #12]
 8018994:	685b      	ldr	r3, [r3, #4]
 8018996:	b29a      	uxth	r2, r3
 8018998:	4b0d      	ldr	r3, [pc, #52]	; (80189d0 <tcp_oos_insert_segment+0x10c>)
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	b29b      	uxth	r3, r3
 801899e:	1ad3      	subs	r3, r2, r3
 80189a0:	b29a      	uxth	r2, r3
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	685a      	ldr	r2, [r3, #4]
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	891b      	ldrh	r3, [r3, #8]
 80189ae:	4619      	mov	r1, r3
 80189b0:	4610      	mov	r0, r2
 80189b2:	f7fc fa1f 	bl	8014df4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	683a      	ldr	r2, [r7, #0]
 80189ba:	601a      	str	r2, [r3, #0]
}
 80189bc:	bf00      	nop
 80189be:	3714      	adds	r7, #20
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bd90      	pop	{r4, r7, pc}
 80189c4:	080227ec 	.word	0x080227ec
 80189c8:	08022aac 	.word	0x08022aac
 80189cc:	08022838 	.word	0x08022838
 80189d0:	2000c020 	.word	0x2000c020

080189d4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80189d4:	b5b0      	push	{r4, r5, r7, lr}
 80189d6:	b086      	sub	sp, #24
 80189d8:	af00      	add	r7, sp, #0
 80189da:	60f8      	str	r0, [r7, #12]
 80189dc:	60b9      	str	r1, [r7, #8]
 80189de:	607a      	str	r2, [r7, #4]
 80189e0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80189e2:	e03e      	b.n	8018a62 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80189e4:	68bb      	ldr	r3, [r7, #8]
 80189e6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80189e8:	68bb      	ldr	r3, [r7, #8]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80189ee:	697b      	ldr	r3, [r7, #20]
 80189f0:	685b      	ldr	r3, [r3, #4]
 80189f2:	4618      	mov	r0, r3
 80189f4:	f7fc fc12 	bl	801521c <pbuf_clen>
 80189f8:	4603      	mov	r3, r0
 80189fa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018a02:	8a7a      	ldrh	r2, [r7, #18]
 8018a04:	429a      	cmp	r2, r3
 8018a06:	d906      	bls.n	8018a16 <tcp_free_acked_segments+0x42>
 8018a08:	4b2a      	ldr	r3, [pc, #168]	; (8018ab4 <tcp_free_acked_segments+0xe0>)
 8018a0a:	f240 4257 	movw	r2, #1111	; 0x457
 8018a0e:	492a      	ldr	r1, [pc, #168]	; (8018ab8 <tcp_free_acked_segments+0xe4>)
 8018a10:	482a      	ldr	r0, [pc, #168]	; (8018abc <tcp_free_acked_segments+0xe8>)
 8018a12:	f006 fdc5 	bl	801f5a0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8018a1c:	8a7b      	ldrh	r3, [r7, #18]
 8018a1e:	1ad3      	subs	r3, r2, r3
 8018a20:	b29a      	uxth	r2, r3
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018a28:	697b      	ldr	r3, [r7, #20]
 8018a2a:	891a      	ldrh	r2, [r3, #8]
 8018a2c:	4b24      	ldr	r3, [pc, #144]	; (8018ac0 <tcp_free_acked_segments+0xec>)
 8018a2e:	881b      	ldrh	r3, [r3, #0]
 8018a30:	4413      	add	r3, r2
 8018a32:	b29a      	uxth	r2, r3
 8018a34:	4b22      	ldr	r3, [pc, #136]	; (8018ac0 <tcp_free_acked_segments+0xec>)
 8018a36:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8018a38:	6978      	ldr	r0, [r7, #20]
 8018a3a:	f7fe f90c 	bl	8016c56 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d00c      	beq.n	8018a62 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018a48:	68bb      	ldr	r3, [r7, #8]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d109      	bne.n	8018a62 <tcp_free_acked_segments+0x8e>
 8018a4e:	683b      	ldr	r3, [r7, #0]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d106      	bne.n	8018a62 <tcp_free_acked_segments+0x8e>
 8018a54:	4b17      	ldr	r3, [pc, #92]	; (8018ab4 <tcp_free_acked_segments+0xe0>)
 8018a56:	f240 4261 	movw	r2, #1121	; 0x461
 8018a5a:	491a      	ldr	r1, [pc, #104]	; (8018ac4 <tcp_free_acked_segments+0xf0>)
 8018a5c:	4817      	ldr	r0, [pc, #92]	; (8018abc <tcp_free_acked_segments+0xe8>)
 8018a5e:	f006 fd9f 	bl	801f5a0 <iprintf>
  while (seg_list != NULL &&
 8018a62:	68bb      	ldr	r3, [r7, #8]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d020      	beq.n	8018aaa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018a68:	68bb      	ldr	r3, [r7, #8]
 8018a6a:	68db      	ldr	r3, [r3, #12]
 8018a6c:	685b      	ldr	r3, [r3, #4]
 8018a6e:	4618      	mov	r0, r3
 8018a70:	f7fa ff69 	bl	8013946 <lwip_htonl>
 8018a74:	4604      	mov	r4, r0
 8018a76:	68bb      	ldr	r3, [r7, #8]
 8018a78:	891b      	ldrh	r3, [r3, #8]
 8018a7a:	461d      	mov	r5, r3
 8018a7c:	68bb      	ldr	r3, [r7, #8]
 8018a7e:	68db      	ldr	r3, [r3, #12]
 8018a80:	899b      	ldrh	r3, [r3, #12]
 8018a82:	b29b      	uxth	r3, r3
 8018a84:	4618      	mov	r0, r3
 8018a86:	f7fa ff49 	bl	801391c <lwip_htons>
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	b2db      	uxtb	r3, r3
 8018a8e:	f003 0303 	and.w	r3, r3, #3
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d001      	beq.n	8018a9a <tcp_free_acked_segments+0xc6>
 8018a96:	2301      	movs	r3, #1
 8018a98:	e000      	b.n	8018a9c <tcp_free_acked_segments+0xc8>
 8018a9a:	2300      	movs	r3, #0
 8018a9c:	442b      	add	r3, r5
 8018a9e:	18e2      	adds	r2, r4, r3
 8018aa0:	4b09      	ldr	r3, [pc, #36]	; (8018ac8 <tcp_free_acked_segments+0xf4>)
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	dd9c      	ble.n	80189e4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8018aaa:	68bb      	ldr	r3, [r7, #8]
}
 8018aac:	4618      	mov	r0, r3
 8018aae:	3718      	adds	r7, #24
 8018ab0:	46bd      	mov	sp, r7
 8018ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8018ab4:	080227ec 	.word	0x080227ec
 8018ab8:	08022ad4 	.word	0x08022ad4
 8018abc:	08022838 	.word	0x08022838
 8018ac0:	2000c028 	.word	0x2000c028
 8018ac4:	08022afc 	.word	0x08022afc
 8018ac8:	2000c024 	.word	0x2000c024

08018acc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8018acc:	b5b0      	push	{r4, r5, r7, lr}
 8018ace:	b094      	sub	sp, #80	; 0x50
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8018ad4:	2300      	movs	r3, #0
 8018ad6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d106      	bne.n	8018aec <tcp_receive+0x20>
 8018ade:	4b91      	ldr	r3, [pc, #580]	; (8018d24 <tcp_receive+0x258>)
 8018ae0:	f240 427b 	movw	r2, #1147	; 0x47b
 8018ae4:	4990      	ldr	r1, [pc, #576]	; (8018d28 <tcp_receive+0x25c>)
 8018ae6:	4891      	ldr	r0, [pc, #580]	; (8018d2c <tcp_receive+0x260>)
 8018ae8:	f006 fd5a 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	7d1b      	ldrb	r3, [r3, #20]
 8018af0:	2b03      	cmp	r3, #3
 8018af2:	d806      	bhi.n	8018b02 <tcp_receive+0x36>
 8018af4:	4b8b      	ldr	r3, [pc, #556]	; (8018d24 <tcp_receive+0x258>)
 8018af6:	f240 427c 	movw	r2, #1148	; 0x47c
 8018afa:	498d      	ldr	r1, [pc, #564]	; (8018d30 <tcp_receive+0x264>)
 8018afc:	488b      	ldr	r0, [pc, #556]	; (8018d2c <tcp_receive+0x260>)
 8018afe:	f006 fd4f 	bl	801f5a0 <iprintf>

  if (flags & TCP_ACK) {
 8018b02:	4b8c      	ldr	r3, [pc, #560]	; (8018d34 <tcp_receive+0x268>)
 8018b04:	781b      	ldrb	r3, [r3, #0]
 8018b06:	f003 0310 	and.w	r3, r3, #16
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	f000 8264 	beq.w	8018fd8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018b16:	461a      	mov	r2, r3
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018b1c:	4413      	add	r3, r2
 8018b1e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018b24:	4b84      	ldr	r3, [pc, #528]	; (8018d38 <tcp_receive+0x26c>)
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	1ad3      	subs	r3, r2, r3
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	db1b      	blt.n	8018b66 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018b32:	4b81      	ldr	r3, [pc, #516]	; (8018d38 <tcp_receive+0x26c>)
 8018b34:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018b36:	429a      	cmp	r2, r3
 8018b38:	d106      	bne.n	8018b48 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018b3e:	4b7f      	ldr	r3, [pc, #508]	; (8018d3c <tcp_receive+0x270>)
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	1ad3      	subs	r3, r2, r3
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	db0e      	blt.n	8018b66 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018b4c:	4b7b      	ldr	r3, [pc, #492]	; (8018d3c <tcp_receive+0x270>)
 8018b4e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018b50:	429a      	cmp	r2, r3
 8018b52:	d125      	bne.n	8018ba0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018b54:	4b7a      	ldr	r3, [pc, #488]	; (8018d40 <tcp_receive+0x274>)
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	89db      	ldrh	r3, [r3, #14]
 8018b5a:	b29a      	uxth	r2, r3
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018b62:	429a      	cmp	r2, r3
 8018b64:	d91c      	bls.n	8018ba0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8018b66:	4b76      	ldr	r3, [pc, #472]	; (8018d40 <tcp_receive+0x274>)
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	89db      	ldrh	r3, [r3, #14]
 8018b6c:	b29a      	uxth	r2, r3
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018b80:	429a      	cmp	r2, r3
 8018b82:	d205      	bcs.n	8018b90 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8018b90:	4b69      	ldr	r3, [pc, #420]	; (8018d38 <tcp_receive+0x26c>)
 8018b92:	681a      	ldr	r2, [r3, #0]
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8018b98:	4b68      	ldr	r3, [pc, #416]	; (8018d3c <tcp_receive+0x270>)
 8018b9a:	681a      	ldr	r2, [r3, #0]
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018ba0:	4b66      	ldr	r3, [pc, #408]	; (8018d3c <tcp_receive+0x270>)
 8018ba2:	681a      	ldr	r2, [r3, #0]
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ba8:	1ad3      	subs	r3, r2, r3
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	dc58      	bgt.n	8018c60 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8018bae:	4b65      	ldr	r3, [pc, #404]	; (8018d44 <tcp_receive+0x278>)
 8018bb0:	881b      	ldrh	r3, [r3, #0]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d14b      	bne.n	8018c4e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018bba:	687a      	ldr	r2, [r7, #4]
 8018bbc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8018bc0:	4413      	add	r3, r2
 8018bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018bc4:	429a      	cmp	r2, r3
 8018bc6:	d142      	bne.n	8018c4e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	db3d      	blt.n	8018c4e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018bd6:	4b59      	ldr	r3, [pc, #356]	; (8018d3c <tcp_receive+0x270>)
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	429a      	cmp	r2, r3
 8018bdc:	d137      	bne.n	8018c4e <tcp_receive+0x182>
              found_dupack = 1;
 8018bde:	2301      	movs	r3, #1
 8018be0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018be8:	2bff      	cmp	r3, #255	; 0xff
 8018bea:	d007      	beq.n	8018bfc <tcp_receive+0x130>
                ++pcb->dupacks;
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018bf2:	3301      	adds	r3, #1
 8018bf4:	b2da      	uxtb	r2, r3
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018c02:	2b03      	cmp	r3, #3
 8018c04:	d91b      	bls.n	8018c3e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c10:	4413      	add	r3, r2
 8018c12:	b29a      	uxth	r2, r3
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018c1a:	429a      	cmp	r2, r3
 8018c1c:	d30a      	bcc.n	8018c34 <tcp_receive+0x168>
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c28:	4413      	add	r3, r2
 8018c2a:	b29a      	uxth	r2, r3
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018c32:	e004      	b.n	8018c3e <tcp_receive+0x172>
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018c3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018c44:	2b02      	cmp	r3, #2
 8018c46:	d902      	bls.n	8018c4e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018c48:	6878      	ldr	r0, [r7, #4]
 8018c4a:	f002 fb43 	bl	801b2d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8018c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	f040 8161 	bne.w	8018f18 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	2200      	movs	r2, #0
 8018c5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018c5e:	e15b      	b.n	8018f18 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018c60:	4b36      	ldr	r3, [pc, #216]	; (8018d3c <tcp_receive+0x270>)
 8018c62:	681a      	ldr	r2, [r3, #0]
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c68:	1ad3      	subs	r3, r2, r3
 8018c6a:	3b01      	subs	r3, #1
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	f2c0 814e 	blt.w	8018f0e <tcp_receive+0x442>
 8018c72:	4b32      	ldr	r3, [pc, #200]	; (8018d3c <tcp_receive+0x270>)
 8018c74:	681a      	ldr	r2, [r3, #0]
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c7a:	1ad3      	subs	r3, r2, r3
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	f300 8146 	bgt.w	8018f0e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	8b5b      	ldrh	r3, [r3, #26]
 8018c86:	f003 0304 	and.w	r3, r3, #4
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d010      	beq.n	8018cb0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	8b5b      	ldrh	r3, [r3, #26]
 8018c92:	f023 0304 	bic.w	r3, r3, #4
 8018c96:	b29a      	uxth	r2, r3
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	2200      	movs	r2, #0
 8018cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018cbe:	10db      	asrs	r3, r3, #3
 8018cc0:	b21b      	sxth	r3, r3
 8018cc2:	b29a      	uxth	r2, r3
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018cca:	b29b      	uxth	r3, r3
 8018ccc:	4413      	add	r3, r2
 8018cce:	b29b      	uxth	r3, r3
 8018cd0:	b21a      	sxth	r2, r3
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018cd8:	4b18      	ldr	r3, [pc, #96]	; (8018d3c <tcp_receive+0x270>)
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	b29a      	uxth	r2, r3
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ce2:	b29b      	uxth	r3, r3
 8018ce4:	1ad3      	subs	r3, r2, r3
 8018ce6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	2200      	movs	r2, #0
 8018cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8018cf0:	4b12      	ldr	r3, [pc, #72]	; (8018d3c <tcp_receive+0x270>)
 8018cf2:	681a      	ldr	r2, [r3, #0]
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	7d1b      	ldrb	r3, [r3, #20]
 8018cfc:	2b03      	cmp	r3, #3
 8018cfe:	f240 8097 	bls.w	8018e30 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018d0e:	429a      	cmp	r2, r3
 8018d10:	d245      	bcs.n	8018d9e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	8b5b      	ldrh	r3, [r3, #26]
 8018d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d014      	beq.n	8018d48 <tcp_receive+0x27c>
 8018d1e:	2301      	movs	r3, #1
 8018d20:	e013      	b.n	8018d4a <tcp_receive+0x27e>
 8018d22:	bf00      	nop
 8018d24:	080227ec 	.word	0x080227ec
 8018d28:	08022b1c 	.word	0x08022b1c
 8018d2c:	08022838 	.word	0x08022838
 8018d30:	08022b38 	.word	0x08022b38
 8018d34:	2000c02c 	.word	0x2000c02c
 8018d38:	2000c020 	.word	0x2000c020
 8018d3c:	2000c024 	.word	0x2000c024
 8018d40:	2000c010 	.word	0x2000c010
 8018d44:	2000c02a 	.word	0x2000c02a
 8018d48:	2302      	movs	r3, #2
 8018d4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018d4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8018d52:	b29a      	uxth	r2, r3
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018d58:	fb12 f303 	smulbb	r3, r2, r3
 8018d5c:	b29b      	uxth	r3, r3
 8018d5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018d60:	4293      	cmp	r3, r2
 8018d62:	bf28      	it	cs
 8018d64:	4613      	movcs	r3, r2
 8018d66:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018d6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018d70:	4413      	add	r3, r2
 8018d72:	b29a      	uxth	r2, r3
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018d7a:	429a      	cmp	r2, r3
 8018d7c:	d309      	bcc.n	8018d92 <tcp_receive+0x2c6>
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018d84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018d86:	4413      	add	r3, r2
 8018d88:	b29a      	uxth	r2, r3
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018d90:	e04e      	b.n	8018e30 <tcp_receive+0x364>
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018d9c:	e048      	b.n	8018e30 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018da4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018da6:	4413      	add	r3, r2
 8018da8:	b29a      	uxth	r2, r3
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8018db0:	429a      	cmp	r2, r3
 8018db2:	d309      	bcc.n	8018dc8 <tcp_receive+0x2fc>
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018dba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018dbc:	4413      	add	r3, r2
 8018dbe:	b29a      	uxth	r2, r3
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8018dc6:	e004      	b.n	8018dd2 <tcp_receive+0x306>
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018dce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018dde:	429a      	cmp	r2, r3
 8018de0:	d326      	bcc.n	8018e30 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018dee:	1ad3      	subs	r3, r2, r3
 8018df0:	b29a      	uxth	r2, r3
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e02:	4413      	add	r3, r2
 8018e04:	b29a      	uxth	r2, r3
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018e0c:	429a      	cmp	r2, r3
 8018e0e:	d30a      	bcc.n	8018e26 <tcp_receive+0x35a>
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e1a:	4413      	add	r3, r2
 8018e1c:	b29a      	uxth	r2, r3
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018e24:	e004      	b.n	8018e30 <tcp_receive+0x364>
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018e2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018e38:	4a98      	ldr	r2, [pc, #608]	; (801909c <tcp_receive+0x5d0>)
 8018e3a:	6878      	ldr	r0, [r7, #4]
 8018e3c:	f7ff fdca 	bl	80189d4 <tcp_free_acked_segments>
 8018e40:	4602      	mov	r2, r0
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e4e:	4a94      	ldr	r2, [pc, #592]	; (80190a0 <tcp_receive+0x5d4>)
 8018e50:	6878      	ldr	r0, [r7, #4]
 8018e52:	f7ff fdbf 	bl	80189d4 <tcp_free_acked_segments>
 8018e56:	4602      	mov	r2, r0
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d104      	bne.n	8018e6e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018e6a:	861a      	strh	r2, [r3, #48]	; 0x30
 8018e6c:	e002      	b.n	8018e74 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2200      	movs	r2, #0
 8018e72:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	2200      	movs	r2, #0
 8018e78:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d103      	bne.n	8018e8a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	2200      	movs	r2, #0
 8018e86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8018e90:	4b84      	ldr	r3, [pc, #528]	; (80190a4 <tcp_receive+0x5d8>)
 8018e92:	881b      	ldrh	r3, [r3, #0]
 8018e94:	4413      	add	r3, r2
 8018e96:	b29a      	uxth	r2, r3
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	8b5b      	ldrh	r3, [r3, #26]
 8018ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d035      	beq.n	8018f16 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d118      	bne.n	8018ee4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d00c      	beq.n	8018ed4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018ec2:	68db      	ldr	r3, [r3, #12]
 8018ec4:	685b      	ldr	r3, [r3, #4]
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	f7fa fd3d 	bl	8013946 <lwip_htonl>
 8018ecc:	4603      	mov	r3, r0
 8018ece:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	dc20      	bgt.n	8018f16 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	8b5b      	ldrh	r3, [r3, #26]
 8018ed8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018edc:	b29a      	uxth	r2, r3
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018ee2:	e018      	b.n	8018f16 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018eec:	68db      	ldr	r3, [r3, #12]
 8018eee:	685b      	ldr	r3, [r3, #4]
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	f7fa fd28 	bl	8013946 <lwip_htonl>
 8018ef6:	4603      	mov	r3, r0
 8018ef8:	1ae3      	subs	r3, r4, r3
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	dc0b      	bgt.n	8018f16 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	8b5b      	ldrh	r3, [r3, #26]
 8018f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018f06:	b29a      	uxth	r2, r3
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018f0c:	e003      	b.n	8018f16 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018f0e:	6878      	ldr	r0, [r7, #4]
 8018f10:	f002 fbce 	bl	801b6b0 <tcp_send_empty_ack>
 8018f14:	e000      	b.n	8018f18 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018f16:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d05b      	beq.n	8018fd8 <tcp_receive+0x50c>
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018f24:	4b60      	ldr	r3, [pc, #384]	; (80190a8 <tcp_receive+0x5dc>)
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	1ad3      	subs	r3, r2, r3
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	da54      	bge.n	8018fd8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018f2e:	4b5f      	ldr	r3, [pc, #380]	; (80190ac <tcp_receive+0x5e0>)
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	b29a      	uxth	r2, r3
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f38:	b29b      	uxth	r3, r3
 8018f3a:	1ad3      	subs	r3, r2, r3
 8018f3c:	b29b      	uxth	r3, r3
 8018f3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8018f42:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018f4c:	10db      	asrs	r3, r3, #3
 8018f4e:	b21b      	sxth	r3, r3
 8018f50:	b29b      	uxth	r3, r3
 8018f52:	1ad3      	subs	r3, r2, r3
 8018f54:	b29b      	uxth	r3, r3
 8018f56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018f60:	b29a      	uxth	r2, r3
 8018f62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018f66:	4413      	add	r3, r2
 8018f68:	b29b      	uxth	r3, r3
 8018f6a:	b21a      	sxth	r2, r3
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8018f70:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	da05      	bge.n	8018f84 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8018f78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018f7c:	425b      	negs	r3, r3
 8018f7e:	b29b      	uxth	r3, r3
 8018f80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8018f84:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018f8e:	109b      	asrs	r3, r3, #2
 8018f90:	b21b      	sxth	r3, r3
 8018f92:	b29b      	uxth	r3, r3
 8018f94:	1ad3      	subs	r3, r2, r3
 8018f96:	b29b      	uxth	r3, r3
 8018f98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018fa2:	b29a      	uxth	r2, r3
 8018fa4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018fa8:	4413      	add	r3, r2
 8018faa:	b29b      	uxth	r3, r3
 8018fac:	b21a      	sxth	r2, r3
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018fb8:	10db      	asrs	r3, r3, #3
 8018fba:	b21b      	sxth	r3, r3
 8018fbc:	b29a      	uxth	r2, r3
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018fc4:	b29b      	uxth	r3, r3
 8018fc6:	4413      	add	r3, r2
 8018fc8:	b29b      	uxth	r3, r3
 8018fca:	b21a      	sxth	r2, r3
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018fd8:	4b35      	ldr	r3, [pc, #212]	; (80190b0 <tcp_receive+0x5e4>)
 8018fda:	881b      	ldrh	r3, [r3, #0]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	f000 84e2 	beq.w	80199a6 <tcp_receive+0xeda>
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	7d1b      	ldrb	r3, [r3, #20]
 8018fe6:	2b06      	cmp	r3, #6
 8018fe8:	f200 84dd 	bhi.w	80199a6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018ff0:	4b30      	ldr	r3, [pc, #192]	; (80190b4 <tcp_receive+0x5e8>)
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	1ad3      	subs	r3, r2, r3
 8018ff6:	3b01      	subs	r3, #1
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	f2c0 808f 	blt.w	801911c <tcp_receive+0x650>
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019002:	4b2b      	ldr	r3, [pc, #172]	; (80190b0 <tcp_receive+0x5e4>)
 8019004:	881b      	ldrh	r3, [r3, #0]
 8019006:	4619      	mov	r1, r3
 8019008:	4b2a      	ldr	r3, [pc, #168]	; (80190b4 <tcp_receive+0x5e8>)
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	440b      	add	r3, r1
 801900e:	1ad3      	subs	r3, r2, r3
 8019010:	3301      	adds	r3, #1
 8019012:	2b00      	cmp	r3, #0
 8019014:	f300 8082 	bgt.w	801911c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019018:	4b27      	ldr	r3, [pc, #156]	; (80190b8 <tcp_receive+0x5ec>)
 801901a:	685b      	ldr	r3, [r3, #4]
 801901c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019022:	4b24      	ldr	r3, [pc, #144]	; (80190b4 <tcp_receive+0x5e8>)
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	1ad3      	subs	r3, r2, r3
 8019028:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801902a:	4b23      	ldr	r3, [pc, #140]	; (80190b8 <tcp_receive+0x5ec>)
 801902c:	685b      	ldr	r3, [r3, #4]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d106      	bne.n	8019040 <tcp_receive+0x574>
 8019032:	4b22      	ldr	r3, [pc, #136]	; (80190bc <tcp_receive+0x5f0>)
 8019034:	f240 5294 	movw	r2, #1428	; 0x594
 8019038:	4921      	ldr	r1, [pc, #132]	; (80190c0 <tcp_receive+0x5f4>)
 801903a:	4822      	ldr	r0, [pc, #136]	; (80190c4 <tcp_receive+0x5f8>)
 801903c:	f006 fab0 	bl	801f5a0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019042:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019046:	4293      	cmp	r3, r2
 8019048:	d906      	bls.n	8019058 <tcp_receive+0x58c>
 801904a:	4b1c      	ldr	r3, [pc, #112]	; (80190bc <tcp_receive+0x5f0>)
 801904c:	f240 5295 	movw	r2, #1429	; 0x595
 8019050:	491d      	ldr	r1, [pc, #116]	; (80190c8 <tcp_receive+0x5fc>)
 8019052:	481c      	ldr	r0, [pc, #112]	; (80190c4 <tcp_receive+0x5f8>)
 8019054:	f006 faa4 	bl	801f5a0 <iprintf>
      off = (u16_t)off32;
 8019058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801905a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801905e:	4b16      	ldr	r3, [pc, #88]	; (80190b8 <tcp_receive+0x5ec>)
 8019060:	685b      	ldr	r3, [r3, #4]
 8019062:	891b      	ldrh	r3, [r3, #8]
 8019064:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019068:	429a      	cmp	r2, r3
 801906a:	d906      	bls.n	801907a <tcp_receive+0x5ae>
 801906c:	4b13      	ldr	r3, [pc, #76]	; (80190bc <tcp_receive+0x5f0>)
 801906e:	f240 5297 	movw	r2, #1431	; 0x597
 8019072:	4916      	ldr	r1, [pc, #88]	; (80190cc <tcp_receive+0x600>)
 8019074:	4813      	ldr	r0, [pc, #76]	; (80190c4 <tcp_receive+0x5f8>)
 8019076:	f006 fa93 	bl	801f5a0 <iprintf>
      inseg.len -= off;
 801907a:	4b0f      	ldr	r3, [pc, #60]	; (80190b8 <tcp_receive+0x5ec>)
 801907c:	891a      	ldrh	r2, [r3, #8]
 801907e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019082:	1ad3      	subs	r3, r2, r3
 8019084:	b29a      	uxth	r2, r3
 8019086:	4b0c      	ldr	r3, [pc, #48]	; (80190b8 <tcp_receive+0x5ec>)
 8019088:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801908a:	4b0b      	ldr	r3, [pc, #44]	; (80190b8 <tcp_receive+0x5ec>)
 801908c:	685b      	ldr	r3, [r3, #4]
 801908e:	891a      	ldrh	r2, [r3, #8]
 8019090:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019094:	1ad3      	subs	r3, r2, r3
 8019096:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019098:	e02a      	b.n	80190f0 <tcp_receive+0x624>
 801909a:	bf00      	nop
 801909c:	08022b54 	.word	0x08022b54
 80190a0:	08022b5c 	.word	0x08022b5c
 80190a4:	2000c028 	.word	0x2000c028
 80190a8:	2000c024 	.word	0x2000c024
 80190ac:	2000bfe8 	.word	0x2000bfe8
 80190b0:	2000c02a 	.word	0x2000c02a
 80190b4:	2000c020 	.word	0x2000c020
 80190b8:	2000c000 	.word	0x2000c000
 80190bc:	080227ec 	.word	0x080227ec
 80190c0:	08022b64 	.word	0x08022b64
 80190c4:	08022838 	.word	0x08022838
 80190c8:	08022b74 	.word	0x08022b74
 80190cc:	08022b84 	.word	0x08022b84
        off -= p->len;
 80190d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80190d2:	895b      	ldrh	r3, [r3, #10]
 80190d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80190d8:	1ad3      	subs	r3, r2, r3
 80190da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80190de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80190e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80190e2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80190e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80190e6:	2200      	movs	r2, #0
 80190e8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80190ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80190f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80190f2:	895b      	ldrh	r3, [r3, #10]
 80190f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80190f8:	429a      	cmp	r2, r3
 80190fa:	d8e9      	bhi.n	80190d0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80190fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019100:	4619      	mov	r1, r3
 8019102:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019104:	f7fb ff76 	bl	8014ff4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801910c:	4a91      	ldr	r2, [pc, #580]	; (8019354 <tcp_receive+0x888>)
 801910e:	6013      	str	r3, [r2, #0]
 8019110:	4b91      	ldr	r3, [pc, #580]	; (8019358 <tcp_receive+0x88c>)
 8019112:	68db      	ldr	r3, [r3, #12]
 8019114:	4a8f      	ldr	r2, [pc, #572]	; (8019354 <tcp_receive+0x888>)
 8019116:	6812      	ldr	r2, [r2, #0]
 8019118:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801911a:	e00d      	b.n	8019138 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801911c:	4b8d      	ldr	r3, [pc, #564]	; (8019354 <tcp_receive+0x888>)
 801911e:	681a      	ldr	r2, [r3, #0]
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019124:	1ad3      	subs	r3, r2, r3
 8019126:	2b00      	cmp	r3, #0
 8019128:	da06      	bge.n	8019138 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	8b5b      	ldrh	r3, [r3, #26]
 801912e:	f043 0302 	orr.w	r3, r3, #2
 8019132:	b29a      	uxth	r2, r3
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019138:	4b86      	ldr	r3, [pc, #536]	; (8019354 <tcp_receive+0x888>)
 801913a:	681a      	ldr	r2, [r3, #0]
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019140:	1ad3      	subs	r3, r2, r3
 8019142:	2b00      	cmp	r3, #0
 8019144:	f2c0 842a 	blt.w	801999c <tcp_receive+0xed0>
 8019148:	4b82      	ldr	r3, [pc, #520]	; (8019354 <tcp_receive+0x888>)
 801914a:	681a      	ldr	r2, [r3, #0]
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019150:	6879      	ldr	r1, [r7, #4]
 8019152:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019154:	440b      	add	r3, r1
 8019156:	1ad3      	subs	r3, r2, r3
 8019158:	3301      	adds	r3, #1
 801915a:	2b00      	cmp	r3, #0
 801915c:	f300 841e 	bgt.w	801999c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019164:	4b7b      	ldr	r3, [pc, #492]	; (8019354 <tcp_receive+0x888>)
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	429a      	cmp	r2, r3
 801916a:	f040 829a 	bne.w	80196a2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801916e:	4b7a      	ldr	r3, [pc, #488]	; (8019358 <tcp_receive+0x88c>)
 8019170:	891c      	ldrh	r4, [r3, #8]
 8019172:	4b79      	ldr	r3, [pc, #484]	; (8019358 <tcp_receive+0x88c>)
 8019174:	68db      	ldr	r3, [r3, #12]
 8019176:	899b      	ldrh	r3, [r3, #12]
 8019178:	b29b      	uxth	r3, r3
 801917a:	4618      	mov	r0, r3
 801917c:	f7fa fbce 	bl	801391c <lwip_htons>
 8019180:	4603      	mov	r3, r0
 8019182:	b2db      	uxtb	r3, r3
 8019184:	f003 0303 	and.w	r3, r3, #3
 8019188:	2b00      	cmp	r3, #0
 801918a:	d001      	beq.n	8019190 <tcp_receive+0x6c4>
 801918c:	2301      	movs	r3, #1
 801918e:	e000      	b.n	8019192 <tcp_receive+0x6c6>
 8019190:	2300      	movs	r3, #0
 8019192:	4423      	add	r3, r4
 8019194:	b29a      	uxth	r2, r3
 8019196:	4b71      	ldr	r3, [pc, #452]	; (801935c <tcp_receive+0x890>)
 8019198:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801919e:	4b6f      	ldr	r3, [pc, #444]	; (801935c <tcp_receive+0x890>)
 80191a0:	881b      	ldrh	r3, [r3, #0]
 80191a2:	429a      	cmp	r2, r3
 80191a4:	d275      	bcs.n	8019292 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80191a6:	4b6c      	ldr	r3, [pc, #432]	; (8019358 <tcp_receive+0x88c>)
 80191a8:	68db      	ldr	r3, [r3, #12]
 80191aa:	899b      	ldrh	r3, [r3, #12]
 80191ac:	b29b      	uxth	r3, r3
 80191ae:	4618      	mov	r0, r3
 80191b0:	f7fa fbb4 	bl	801391c <lwip_htons>
 80191b4:	4603      	mov	r3, r0
 80191b6:	b2db      	uxtb	r3, r3
 80191b8:	f003 0301 	and.w	r3, r3, #1
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d01f      	beq.n	8019200 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80191c0:	4b65      	ldr	r3, [pc, #404]	; (8019358 <tcp_receive+0x88c>)
 80191c2:	68db      	ldr	r3, [r3, #12]
 80191c4:	899b      	ldrh	r3, [r3, #12]
 80191c6:	b29b      	uxth	r3, r3
 80191c8:	b21b      	sxth	r3, r3
 80191ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80191ce:	b21c      	sxth	r4, r3
 80191d0:	4b61      	ldr	r3, [pc, #388]	; (8019358 <tcp_receive+0x88c>)
 80191d2:	68db      	ldr	r3, [r3, #12]
 80191d4:	899b      	ldrh	r3, [r3, #12]
 80191d6:	b29b      	uxth	r3, r3
 80191d8:	4618      	mov	r0, r3
 80191da:	f7fa fb9f 	bl	801391c <lwip_htons>
 80191de:	4603      	mov	r3, r0
 80191e0:	b2db      	uxtb	r3, r3
 80191e2:	b29b      	uxth	r3, r3
 80191e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80191e8:	b29b      	uxth	r3, r3
 80191ea:	4618      	mov	r0, r3
 80191ec:	f7fa fb96 	bl	801391c <lwip_htons>
 80191f0:	4603      	mov	r3, r0
 80191f2:	b21b      	sxth	r3, r3
 80191f4:	4323      	orrs	r3, r4
 80191f6:	b21a      	sxth	r2, r3
 80191f8:	4b57      	ldr	r3, [pc, #348]	; (8019358 <tcp_receive+0x88c>)
 80191fa:	68db      	ldr	r3, [r3, #12]
 80191fc:	b292      	uxth	r2, r2
 80191fe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019204:	4b54      	ldr	r3, [pc, #336]	; (8019358 <tcp_receive+0x88c>)
 8019206:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019208:	4b53      	ldr	r3, [pc, #332]	; (8019358 <tcp_receive+0x88c>)
 801920a:	68db      	ldr	r3, [r3, #12]
 801920c:	899b      	ldrh	r3, [r3, #12]
 801920e:	b29b      	uxth	r3, r3
 8019210:	4618      	mov	r0, r3
 8019212:	f7fa fb83 	bl	801391c <lwip_htons>
 8019216:	4603      	mov	r3, r0
 8019218:	b2db      	uxtb	r3, r3
 801921a:	f003 0302 	and.w	r3, r3, #2
 801921e:	2b00      	cmp	r3, #0
 8019220:	d005      	beq.n	801922e <tcp_receive+0x762>
            inseg.len -= 1;
 8019222:	4b4d      	ldr	r3, [pc, #308]	; (8019358 <tcp_receive+0x88c>)
 8019224:	891b      	ldrh	r3, [r3, #8]
 8019226:	3b01      	subs	r3, #1
 8019228:	b29a      	uxth	r2, r3
 801922a:	4b4b      	ldr	r3, [pc, #300]	; (8019358 <tcp_receive+0x88c>)
 801922c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801922e:	4b4a      	ldr	r3, [pc, #296]	; (8019358 <tcp_receive+0x88c>)
 8019230:	685b      	ldr	r3, [r3, #4]
 8019232:	4a49      	ldr	r2, [pc, #292]	; (8019358 <tcp_receive+0x88c>)
 8019234:	8912      	ldrh	r2, [r2, #8]
 8019236:	4611      	mov	r1, r2
 8019238:	4618      	mov	r0, r3
 801923a:	f7fb fddb 	bl	8014df4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801923e:	4b46      	ldr	r3, [pc, #280]	; (8019358 <tcp_receive+0x88c>)
 8019240:	891c      	ldrh	r4, [r3, #8]
 8019242:	4b45      	ldr	r3, [pc, #276]	; (8019358 <tcp_receive+0x88c>)
 8019244:	68db      	ldr	r3, [r3, #12]
 8019246:	899b      	ldrh	r3, [r3, #12]
 8019248:	b29b      	uxth	r3, r3
 801924a:	4618      	mov	r0, r3
 801924c:	f7fa fb66 	bl	801391c <lwip_htons>
 8019250:	4603      	mov	r3, r0
 8019252:	b2db      	uxtb	r3, r3
 8019254:	f003 0303 	and.w	r3, r3, #3
 8019258:	2b00      	cmp	r3, #0
 801925a:	d001      	beq.n	8019260 <tcp_receive+0x794>
 801925c:	2301      	movs	r3, #1
 801925e:	e000      	b.n	8019262 <tcp_receive+0x796>
 8019260:	2300      	movs	r3, #0
 8019262:	4423      	add	r3, r4
 8019264:	b29a      	uxth	r2, r3
 8019266:	4b3d      	ldr	r3, [pc, #244]	; (801935c <tcp_receive+0x890>)
 8019268:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801926a:	4b3c      	ldr	r3, [pc, #240]	; (801935c <tcp_receive+0x890>)
 801926c:	881b      	ldrh	r3, [r3, #0]
 801926e:	461a      	mov	r2, r3
 8019270:	4b38      	ldr	r3, [pc, #224]	; (8019354 <tcp_receive+0x888>)
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	441a      	add	r2, r3
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801927a:	6879      	ldr	r1, [r7, #4]
 801927c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801927e:	440b      	add	r3, r1
 8019280:	429a      	cmp	r2, r3
 8019282:	d006      	beq.n	8019292 <tcp_receive+0x7c6>
 8019284:	4b36      	ldr	r3, [pc, #216]	; (8019360 <tcp_receive+0x894>)
 8019286:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801928a:	4936      	ldr	r1, [pc, #216]	; (8019364 <tcp_receive+0x898>)
 801928c:	4836      	ldr	r0, [pc, #216]	; (8019368 <tcp_receive+0x89c>)
 801928e:	f006 f987 	bl	801f5a0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019296:	2b00      	cmp	r3, #0
 8019298:	f000 80e7 	beq.w	801946a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801929c:	4b2e      	ldr	r3, [pc, #184]	; (8019358 <tcp_receive+0x88c>)
 801929e:	68db      	ldr	r3, [r3, #12]
 80192a0:	899b      	ldrh	r3, [r3, #12]
 80192a2:	b29b      	uxth	r3, r3
 80192a4:	4618      	mov	r0, r3
 80192a6:	f7fa fb39 	bl	801391c <lwip_htons>
 80192aa:	4603      	mov	r3, r0
 80192ac:	b2db      	uxtb	r3, r3
 80192ae:	f003 0301 	and.w	r3, r3, #1
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d010      	beq.n	80192d8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80192b6:	e00a      	b.n	80192ce <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80192bc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80192c2:	681a      	ldr	r2, [r3, #0]
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80192c8:	68f8      	ldr	r0, [r7, #12]
 80192ca:	f7fd fcc4 	bl	8016c56 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d1f0      	bne.n	80192b8 <tcp_receive+0x7ec>
 80192d6:	e0c8      	b.n	801946a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80192dc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80192de:	e052      	b.n	8019386 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80192e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192e2:	68db      	ldr	r3, [r3, #12]
 80192e4:	899b      	ldrh	r3, [r3, #12]
 80192e6:	b29b      	uxth	r3, r3
 80192e8:	4618      	mov	r0, r3
 80192ea:	f7fa fb17 	bl	801391c <lwip_htons>
 80192ee:	4603      	mov	r3, r0
 80192f0:	b2db      	uxtb	r3, r3
 80192f2:	f003 0301 	and.w	r3, r3, #1
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d03d      	beq.n	8019376 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80192fa:	4b17      	ldr	r3, [pc, #92]	; (8019358 <tcp_receive+0x88c>)
 80192fc:	68db      	ldr	r3, [r3, #12]
 80192fe:	899b      	ldrh	r3, [r3, #12]
 8019300:	b29b      	uxth	r3, r3
 8019302:	4618      	mov	r0, r3
 8019304:	f7fa fb0a 	bl	801391c <lwip_htons>
 8019308:	4603      	mov	r3, r0
 801930a:	b2db      	uxtb	r3, r3
 801930c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019310:	2b00      	cmp	r3, #0
 8019312:	d130      	bne.n	8019376 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019314:	4b10      	ldr	r3, [pc, #64]	; (8019358 <tcp_receive+0x88c>)
 8019316:	68db      	ldr	r3, [r3, #12]
 8019318:	899b      	ldrh	r3, [r3, #12]
 801931a:	b29c      	uxth	r4, r3
 801931c:	2001      	movs	r0, #1
 801931e:	f7fa fafd 	bl	801391c <lwip_htons>
 8019322:	4603      	mov	r3, r0
 8019324:	461a      	mov	r2, r3
 8019326:	4b0c      	ldr	r3, [pc, #48]	; (8019358 <tcp_receive+0x88c>)
 8019328:	68db      	ldr	r3, [r3, #12]
 801932a:	4322      	orrs	r2, r4
 801932c:	b292      	uxth	r2, r2
 801932e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019330:	4b09      	ldr	r3, [pc, #36]	; (8019358 <tcp_receive+0x88c>)
 8019332:	891c      	ldrh	r4, [r3, #8]
 8019334:	4b08      	ldr	r3, [pc, #32]	; (8019358 <tcp_receive+0x88c>)
 8019336:	68db      	ldr	r3, [r3, #12]
 8019338:	899b      	ldrh	r3, [r3, #12]
 801933a:	b29b      	uxth	r3, r3
 801933c:	4618      	mov	r0, r3
 801933e:	f7fa faed 	bl	801391c <lwip_htons>
 8019342:	4603      	mov	r3, r0
 8019344:	b2db      	uxtb	r3, r3
 8019346:	f003 0303 	and.w	r3, r3, #3
 801934a:	2b00      	cmp	r3, #0
 801934c:	d00e      	beq.n	801936c <tcp_receive+0x8a0>
 801934e:	2301      	movs	r3, #1
 8019350:	e00d      	b.n	801936e <tcp_receive+0x8a2>
 8019352:	bf00      	nop
 8019354:	2000c020 	.word	0x2000c020
 8019358:	2000c000 	.word	0x2000c000
 801935c:	2000c02a 	.word	0x2000c02a
 8019360:	080227ec 	.word	0x080227ec
 8019364:	08022b94 	.word	0x08022b94
 8019368:	08022838 	.word	0x08022838
 801936c:	2300      	movs	r3, #0
 801936e:	4423      	add	r3, r4
 8019370:	b29a      	uxth	r2, r3
 8019372:	4b98      	ldr	r3, [pc, #608]	; (80195d4 <tcp_receive+0xb08>)
 8019374:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8019376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019378:	613b      	str	r3, [r7, #16]
              next = next->next;
 801937a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8019380:	6938      	ldr	r0, [r7, #16]
 8019382:	f7fd fc68 	bl	8016c56 <tcp_seg_free>
            while (next &&
 8019386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019388:	2b00      	cmp	r3, #0
 801938a:	d00e      	beq.n	80193aa <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801938c:	4b91      	ldr	r3, [pc, #580]	; (80195d4 <tcp_receive+0xb08>)
 801938e:	881b      	ldrh	r3, [r3, #0]
 8019390:	461a      	mov	r2, r3
 8019392:	4b91      	ldr	r3, [pc, #580]	; (80195d8 <tcp_receive+0xb0c>)
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	441a      	add	r2, r3
 8019398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801939a:	68db      	ldr	r3, [r3, #12]
 801939c:	685b      	ldr	r3, [r3, #4]
 801939e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80193a0:	8909      	ldrh	r1, [r1, #8]
 80193a2:	440b      	add	r3, r1
 80193a4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	da9a      	bge.n	80192e0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80193aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d059      	beq.n	8019464 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80193b0:	4b88      	ldr	r3, [pc, #544]	; (80195d4 <tcp_receive+0xb08>)
 80193b2:	881b      	ldrh	r3, [r3, #0]
 80193b4:	461a      	mov	r2, r3
 80193b6:	4b88      	ldr	r3, [pc, #544]	; (80195d8 <tcp_receive+0xb0c>)
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	441a      	add	r2, r3
 80193bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80193be:	68db      	ldr	r3, [r3, #12]
 80193c0:	685b      	ldr	r3, [r3, #4]
 80193c2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	dd4d      	ble.n	8019464 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80193c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80193ca:	68db      	ldr	r3, [r3, #12]
 80193cc:	685b      	ldr	r3, [r3, #4]
 80193ce:	b29a      	uxth	r2, r3
 80193d0:	4b81      	ldr	r3, [pc, #516]	; (80195d8 <tcp_receive+0xb0c>)
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	b29b      	uxth	r3, r3
 80193d6:	1ad3      	subs	r3, r2, r3
 80193d8:	b29a      	uxth	r2, r3
 80193da:	4b80      	ldr	r3, [pc, #512]	; (80195dc <tcp_receive+0xb10>)
 80193dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80193de:	4b7f      	ldr	r3, [pc, #508]	; (80195dc <tcp_receive+0xb10>)
 80193e0:	68db      	ldr	r3, [r3, #12]
 80193e2:	899b      	ldrh	r3, [r3, #12]
 80193e4:	b29b      	uxth	r3, r3
 80193e6:	4618      	mov	r0, r3
 80193e8:	f7fa fa98 	bl	801391c <lwip_htons>
 80193ec:	4603      	mov	r3, r0
 80193ee:	b2db      	uxtb	r3, r3
 80193f0:	f003 0302 	and.w	r3, r3, #2
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d005      	beq.n	8019404 <tcp_receive+0x938>
                inseg.len -= 1;
 80193f8:	4b78      	ldr	r3, [pc, #480]	; (80195dc <tcp_receive+0xb10>)
 80193fa:	891b      	ldrh	r3, [r3, #8]
 80193fc:	3b01      	subs	r3, #1
 80193fe:	b29a      	uxth	r2, r3
 8019400:	4b76      	ldr	r3, [pc, #472]	; (80195dc <tcp_receive+0xb10>)
 8019402:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019404:	4b75      	ldr	r3, [pc, #468]	; (80195dc <tcp_receive+0xb10>)
 8019406:	685b      	ldr	r3, [r3, #4]
 8019408:	4a74      	ldr	r2, [pc, #464]	; (80195dc <tcp_receive+0xb10>)
 801940a:	8912      	ldrh	r2, [r2, #8]
 801940c:	4611      	mov	r1, r2
 801940e:	4618      	mov	r0, r3
 8019410:	f7fb fcf0 	bl	8014df4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019414:	4b71      	ldr	r3, [pc, #452]	; (80195dc <tcp_receive+0xb10>)
 8019416:	891c      	ldrh	r4, [r3, #8]
 8019418:	4b70      	ldr	r3, [pc, #448]	; (80195dc <tcp_receive+0xb10>)
 801941a:	68db      	ldr	r3, [r3, #12]
 801941c:	899b      	ldrh	r3, [r3, #12]
 801941e:	b29b      	uxth	r3, r3
 8019420:	4618      	mov	r0, r3
 8019422:	f7fa fa7b 	bl	801391c <lwip_htons>
 8019426:	4603      	mov	r3, r0
 8019428:	b2db      	uxtb	r3, r3
 801942a:	f003 0303 	and.w	r3, r3, #3
 801942e:	2b00      	cmp	r3, #0
 8019430:	d001      	beq.n	8019436 <tcp_receive+0x96a>
 8019432:	2301      	movs	r3, #1
 8019434:	e000      	b.n	8019438 <tcp_receive+0x96c>
 8019436:	2300      	movs	r3, #0
 8019438:	4423      	add	r3, r4
 801943a:	b29a      	uxth	r2, r3
 801943c:	4b65      	ldr	r3, [pc, #404]	; (80195d4 <tcp_receive+0xb08>)
 801943e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019440:	4b64      	ldr	r3, [pc, #400]	; (80195d4 <tcp_receive+0xb08>)
 8019442:	881b      	ldrh	r3, [r3, #0]
 8019444:	461a      	mov	r2, r3
 8019446:	4b64      	ldr	r3, [pc, #400]	; (80195d8 <tcp_receive+0xb0c>)
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	441a      	add	r2, r3
 801944c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801944e:	68db      	ldr	r3, [r3, #12]
 8019450:	685b      	ldr	r3, [r3, #4]
 8019452:	429a      	cmp	r2, r3
 8019454:	d006      	beq.n	8019464 <tcp_receive+0x998>
 8019456:	4b62      	ldr	r3, [pc, #392]	; (80195e0 <tcp_receive+0xb14>)
 8019458:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801945c:	4961      	ldr	r1, [pc, #388]	; (80195e4 <tcp_receive+0xb18>)
 801945e:	4862      	ldr	r0, [pc, #392]	; (80195e8 <tcp_receive+0xb1c>)
 8019460:	f006 f89e 	bl	801f5a0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019468:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801946a:	4b5a      	ldr	r3, [pc, #360]	; (80195d4 <tcp_receive+0xb08>)
 801946c:	881b      	ldrh	r3, [r3, #0]
 801946e:	461a      	mov	r2, r3
 8019470:	4b59      	ldr	r3, [pc, #356]	; (80195d8 <tcp_receive+0xb0c>)
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	441a      	add	r2, r3
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801947e:	4b55      	ldr	r3, [pc, #340]	; (80195d4 <tcp_receive+0xb08>)
 8019480:	881b      	ldrh	r3, [r3, #0]
 8019482:	429a      	cmp	r2, r3
 8019484:	d206      	bcs.n	8019494 <tcp_receive+0x9c8>
 8019486:	4b56      	ldr	r3, [pc, #344]	; (80195e0 <tcp_receive+0xb14>)
 8019488:	f240 6207 	movw	r2, #1543	; 0x607
 801948c:	4957      	ldr	r1, [pc, #348]	; (80195ec <tcp_receive+0xb20>)
 801948e:	4856      	ldr	r0, [pc, #344]	; (80195e8 <tcp_receive+0xb1c>)
 8019490:	f006 f886 	bl	801f5a0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019498:	4b4e      	ldr	r3, [pc, #312]	; (80195d4 <tcp_receive+0xb08>)
 801949a:	881b      	ldrh	r3, [r3, #0]
 801949c:	1ad3      	subs	r3, r2, r3
 801949e:	b29a      	uxth	r2, r3
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80194a4:	6878      	ldr	r0, [r7, #4]
 80194a6:	f7fc fd99 	bl	8015fdc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80194aa:	4b4c      	ldr	r3, [pc, #304]	; (80195dc <tcp_receive+0xb10>)
 80194ac:	685b      	ldr	r3, [r3, #4]
 80194ae:	891b      	ldrh	r3, [r3, #8]
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d006      	beq.n	80194c2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80194b4:	4b49      	ldr	r3, [pc, #292]	; (80195dc <tcp_receive+0xb10>)
 80194b6:	685b      	ldr	r3, [r3, #4]
 80194b8:	4a4d      	ldr	r2, [pc, #308]	; (80195f0 <tcp_receive+0xb24>)
 80194ba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80194bc:	4b47      	ldr	r3, [pc, #284]	; (80195dc <tcp_receive+0xb10>)
 80194be:	2200      	movs	r2, #0
 80194c0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80194c2:	4b46      	ldr	r3, [pc, #280]	; (80195dc <tcp_receive+0xb10>)
 80194c4:	68db      	ldr	r3, [r3, #12]
 80194c6:	899b      	ldrh	r3, [r3, #12]
 80194c8:	b29b      	uxth	r3, r3
 80194ca:	4618      	mov	r0, r3
 80194cc:	f7fa fa26 	bl	801391c <lwip_htons>
 80194d0:	4603      	mov	r3, r0
 80194d2:	b2db      	uxtb	r3, r3
 80194d4:	f003 0301 	and.w	r3, r3, #1
 80194d8:	2b00      	cmp	r3, #0
 80194da:	f000 80b8 	beq.w	801964e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80194de:	4b45      	ldr	r3, [pc, #276]	; (80195f4 <tcp_receive+0xb28>)
 80194e0:	781b      	ldrb	r3, [r3, #0]
 80194e2:	f043 0320 	orr.w	r3, r3, #32
 80194e6:	b2da      	uxtb	r2, r3
 80194e8:	4b42      	ldr	r3, [pc, #264]	; (80195f4 <tcp_receive+0xb28>)
 80194ea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80194ec:	e0af      	b.n	801964e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80194f2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80194f8:	68db      	ldr	r3, [r3, #12]
 80194fa:	685b      	ldr	r3, [r3, #4]
 80194fc:	4a36      	ldr	r2, [pc, #216]	; (80195d8 <tcp_receive+0xb0c>)
 80194fe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019500:	68bb      	ldr	r3, [r7, #8]
 8019502:	891b      	ldrh	r3, [r3, #8]
 8019504:	461c      	mov	r4, r3
 8019506:	68bb      	ldr	r3, [r7, #8]
 8019508:	68db      	ldr	r3, [r3, #12]
 801950a:	899b      	ldrh	r3, [r3, #12]
 801950c:	b29b      	uxth	r3, r3
 801950e:	4618      	mov	r0, r3
 8019510:	f7fa fa04 	bl	801391c <lwip_htons>
 8019514:	4603      	mov	r3, r0
 8019516:	b2db      	uxtb	r3, r3
 8019518:	f003 0303 	and.w	r3, r3, #3
 801951c:	2b00      	cmp	r3, #0
 801951e:	d001      	beq.n	8019524 <tcp_receive+0xa58>
 8019520:	2301      	movs	r3, #1
 8019522:	e000      	b.n	8019526 <tcp_receive+0xa5a>
 8019524:	2300      	movs	r3, #0
 8019526:	191a      	adds	r2, r3, r4
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801952c:	441a      	add	r2, r3
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019536:	461c      	mov	r4, r3
 8019538:	68bb      	ldr	r3, [r7, #8]
 801953a:	891b      	ldrh	r3, [r3, #8]
 801953c:	461d      	mov	r5, r3
 801953e:	68bb      	ldr	r3, [r7, #8]
 8019540:	68db      	ldr	r3, [r3, #12]
 8019542:	899b      	ldrh	r3, [r3, #12]
 8019544:	b29b      	uxth	r3, r3
 8019546:	4618      	mov	r0, r3
 8019548:	f7fa f9e8 	bl	801391c <lwip_htons>
 801954c:	4603      	mov	r3, r0
 801954e:	b2db      	uxtb	r3, r3
 8019550:	f003 0303 	and.w	r3, r3, #3
 8019554:	2b00      	cmp	r3, #0
 8019556:	d001      	beq.n	801955c <tcp_receive+0xa90>
 8019558:	2301      	movs	r3, #1
 801955a:	e000      	b.n	801955e <tcp_receive+0xa92>
 801955c:	2300      	movs	r3, #0
 801955e:	442b      	add	r3, r5
 8019560:	429c      	cmp	r4, r3
 8019562:	d206      	bcs.n	8019572 <tcp_receive+0xaa6>
 8019564:	4b1e      	ldr	r3, [pc, #120]	; (80195e0 <tcp_receive+0xb14>)
 8019566:	f240 622b 	movw	r2, #1579	; 0x62b
 801956a:	4923      	ldr	r1, [pc, #140]	; (80195f8 <tcp_receive+0xb2c>)
 801956c:	481e      	ldr	r0, [pc, #120]	; (80195e8 <tcp_receive+0xb1c>)
 801956e:	f006 f817 	bl	801f5a0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8019572:	68bb      	ldr	r3, [r7, #8]
 8019574:	891b      	ldrh	r3, [r3, #8]
 8019576:	461c      	mov	r4, r3
 8019578:	68bb      	ldr	r3, [r7, #8]
 801957a:	68db      	ldr	r3, [r3, #12]
 801957c:	899b      	ldrh	r3, [r3, #12]
 801957e:	b29b      	uxth	r3, r3
 8019580:	4618      	mov	r0, r3
 8019582:	f7fa f9cb 	bl	801391c <lwip_htons>
 8019586:	4603      	mov	r3, r0
 8019588:	b2db      	uxtb	r3, r3
 801958a:	f003 0303 	and.w	r3, r3, #3
 801958e:	2b00      	cmp	r3, #0
 8019590:	d001      	beq.n	8019596 <tcp_receive+0xaca>
 8019592:	2301      	movs	r3, #1
 8019594:	e000      	b.n	8019598 <tcp_receive+0xacc>
 8019596:	2300      	movs	r3, #0
 8019598:	1919      	adds	r1, r3, r4
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801959e:	b28b      	uxth	r3, r1
 80195a0:	1ad3      	subs	r3, r2, r3
 80195a2:	b29a      	uxth	r2, r3
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80195a8:	6878      	ldr	r0, [r7, #4]
 80195aa:	f7fc fd17 	bl	8015fdc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80195ae:	68bb      	ldr	r3, [r7, #8]
 80195b0:	685b      	ldr	r3, [r3, #4]
 80195b2:	891b      	ldrh	r3, [r3, #8]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d028      	beq.n	801960a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80195b8:	4b0d      	ldr	r3, [pc, #52]	; (80195f0 <tcp_receive+0xb24>)
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d01d      	beq.n	80195fc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80195c0:	4b0b      	ldr	r3, [pc, #44]	; (80195f0 <tcp_receive+0xb24>)
 80195c2:	681a      	ldr	r2, [r3, #0]
 80195c4:	68bb      	ldr	r3, [r7, #8]
 80195c6:	685b      	ldr	r3, [r3, #4]
 80195c8:	4619      	mov	r1, r3
 80195ca:	4610      	mov	r0, r2
 80195cc:	f7fb fe66 	bl	801529c <pbuf_cat>
 80195d0:	e018      	b.n	8019604 <tcp_receive+0xb38>
 80195d2:	bf00      	nop
 80195d4:	2000c02a 	.word	0x2000c02a
 80195d8:	2000c020 	.word	0x2000c020
 80195dc:	2000c000 	.word	0x2000c000
 80195e0:	080227ec 	.word	0x080227ec
 80195e4:	08022bcc 	.word	0x08022bcc
 80195e8:	08022838 	.word	0x08022838
 80195ec:	08022c08 	.word	0x08022c08
 80195f0:	2000c030 	.word	0x2000c030
 80195f4:	2000c02d 	.word	0x2000c02d
 80195f8:	08022c28 	.word	0x08022c28
            } else {
              recv_data = cseg->p;
 80195fc:	68bb      	ldr	r3, [r7, #8]
 80195fe:	685b      	ldr	r3, [r3, #4]
 8019600:	4a70      	ldr	r2, [pc, #448]	; (80197c4 <tcp_receive+0xcf8>)
 8019602:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8019604:	68bb      	ldr	r3, [r7, #8]
 8019606:	2200      	movs	r2, #0
 8019608:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801960a:	68bb      	ldr	r3, [r7, #8]
 801960c:	68db      	ldr	r3, [r3, #12]
 801960e:	899b      	ldrh	r3, [r3, #12]
 8019610:	b29b      	uxth	r3, r3
 8019612:	4618      	mov	r0, r3
 8019614:	f7fa f982 	bl	801391c <lwip_htons>
 8019618:	4603      	mov	r3, r0
 801961a:	b2db      	uxtb	r3, r3
 801961c:	f003 0301 	and.w	r3, r3, #1
 8019620:	2b00      	cmp	r3, #0
 8019622:	d00d      	beq.n	8019640 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019624:	4b68      	ldr	r3, [pc, #416]	; (80197c8 <tcp_receive+0xcfc>)
 8019626:	781b      	ldrb	r3, [r3, #0]
 8019628:	f043 0320 	orr.w	r3, r3, #32
 801962c:	b2da      	uxtb	r2, r3
 801962e:	4b66      	ldr	r3, [pc, #408]	; (80197c8 <tcp_receive+0xcfc>)
 8019630:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	7d1b      	ldrb	r3, [r3, #20]
 8019636:	2b04      	cmp	r3, #4
 8019638:	d102      	bne.n	8019640 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	2207      	movs	r2, #7
 801963e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019640:	68bb      	ldr	r3, [r7, #8]
 8019642:	681a      	ldr	r2, [r3, #0]
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8019648:	68b8      	ldr	r0, [r7, #8]
 801964a:	f7fd fb04 	bl	8016c56 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019652:	2b00      	cmp	r3, #0
 8019654:	d008      	beq.n	8019668 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801965a:	68db      	ldr	r3, [r3, #12]
 801965c:	685a      	ldr	r2, [r3, #4]
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8019662:	429a      	cmp	r2, r3
 8019664:	f43f af43 	beq.w	80194ee <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	8b5b      	ldrh	r3, [r3, #26]
 801966c:	f003 0301 	and.w	r3, r3, #1
 8019670:	2b00      	cmp	r3, #0
 8019672:	d00e      	beq.n	8019692 <tcp_receive+0xbc6>
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	8b5b      	ldrh	r3, [r3, #26]
 8019678:	f023 0301 	bic.w	r3, r3, #1
 801967c:	b29a      	uxth	r2, r3
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	835a      	strh	r2, [r3, #26]
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	8b5b      	ldrh	r3, [r3, #26]
 8019686:	f043 0302 	orr.w	r3, r3, #2
 801968a:	b29a      	uxth	r2, r3
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019690:	e188      	b.n	80199a4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	8b5b      	ldrh	r3, [r3, #26]
 8019696:	f043 0301 	orr.w	r3, r3, #1
 801969a:	b29a      	uxth	r2, r3
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80196a0:	e180      	b.n	80199a4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d106      	bne.n	80196b8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80196aa:	4848      	ldr	r0, [pc, #288]	; (80197cc <tcp_receive+0xd00>)
 80196ac:	f7fd faec 	bl	8016c88 <tcp_seg_copy>
 80196b0:	4602      	mov	r2, r0
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	675a      	str	r2, [r3, #116]	; 0x74
 80196b6:	e16d      	b.n	8019994 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80196b8:	2300      	movs	r3, #0
 80196ba:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80196c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80196c2:	e157      	b.n	8019974 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80196c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196c6:	68db      	ldr	r3, [r3, #12]
 80196c8:	685a      	ldr	r2, [r3, #4]
 80196ca:	4b41      	ldr	r3, [pc, #260]	; (80197d0 <tcp_receive+0xd04>)
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	429a      	cmp	r2, r3
 80196d0:	d11d      	bne.n	801970e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80196d2:	4b3e      	ldr	r3, [pc, #248]	; (80197cc <tcp_receive+0xd00>)
 80196d4:	891a      	ldrh	r2, [r3, #8]
 80196d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196d8:	891b      	ldrh	r3, [r3, #8]
 80196da:	429a      	cmp	r2, r3
 80196dc:	f240 814f 	bls.w	801997e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80196e0:	483a      	ldr	r0, [pc, #232]	; (80197cc <tcp_receive+0xd00>)
 80196e2:	f7fd fad1 	bl	8016c88 <tcp_seg_copy>
 80196e6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80196e8:	697b      	ldr	r3, [r7, #20]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	f000 8149 	beq.w	8019982 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80196f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d003      	beq.n	80196fe <tcp_receive+0xc32>
                    prev->next = cseg;
 80196f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196f8:	697a      	ldr	r2, [r7, #20]
 80196fa:	601a      	str	r2, [r3, #0]
 80196fc:	e002      	b.n	8019704 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	697a      	ldr	r2, [r7, #20]
 8019702:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019704:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019706:	6978      	ldr	r0, [r7, #20]
 8019708:	f7ff f8dc 	bl	80188c4 <tcp_oos_insert_segment>
                }
                break;
 801970c:	e139      	b.n	8019982 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801970e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019710:	2b00      	cmp	r3, #0
 8019712:	d117      	bne.n	8019744 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019714:	4b2e      	ldr	r3, [pc, #184]	; (80197d0 <tcp_receive+0xd04>)
 8019716:	681a      	ldr	r2, [r3, #0]
 8019718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801971a:	68db      	ldr	r3, [r3, #12]
 801971c:	685b      	ldr	r3, [r3, #4]
 801971e:	1ad3      	subs	r3, r2, r3
 8019720:	2b00      	cmp	r3, #0
 8019722:	da57      	bge.n	80197d4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019724:	4829      	ldr	r0, [pc, #164]	; (80197cc <tcp_receive+0xd00>)
 8019726:	f7fd faaf 	bl	8016c88 <tcp_seg_copy>
 801972a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801972c:	69bb      	ldr	r3, [r7, #24]
 801972e:	2b00      	cmp	r3, #0
 8019730:	f000 8129 	beq.w	8019986 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	69ba      	ldr	r2, [r7, #24]
 8019738:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801973a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801973c:	69b8      	ldr	r0, [r7, #24]
 801973e:	f7ff f8c1 	bl	80188c4 <tcp_oos_insert_segment>
                  }
                  break;
 8019742:	e120      	b.n	8019986 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019744:	4b22      	ldr	r3, [pc, #136]	; (80197d0 <tcp_receive+0xd04>)
 8019746:	681a      	ldr	r2, [r3, #0]
 8019748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801974a:	68db      	ldr	r3, [r3, #12]
 801974c:	685b      	ldr	r3, [r3, #4]
 801974e:	1ad3      	subs	r3, r2, r3
 8019750:	3b01      	subs	r3, #1
 8019752:	2b00      	cmp	r3, #0
 8019754:	db3e      	blt.n	80197d4 <tcp_receive+0xd08>
 8019756:	4b1e      	ldr	r3, [pc, #120]	; (80197d0 <tcp_receive+0xd04>)
 8019758:	681a      	ldr	r2, [r3, #0]
 801975a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801975c:	68db      	ldr	r3, [r3, #12]
 801975e:	685b      	ldr	r3, [r3, #4]
 8019760:	1ad3      	subs	r3, r2, r3
 8019762:	3301      	adds	r3, #1
 8019764:	2b00      	cmp	r3, #0
 8019766:	dc35      	bgt.n	80197d4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019768:	4818      	ldr	r0, [pc, #96]	; (80197cc <tcp_receive+0xd00>)
 801976a:	f7fd fa8d 	bl	8016c88 <tcp_seg_copy>
 801976e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019770:	69fb      	ldr	r3, [r7, #28]
 8019772:	2b00      	cmp	r3, #0
 8019774:	f000 8109 	beq.w	801998a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801977a:	68db      	ldr	r3, [r3, #12]
 801977c:	685b      	ldr	r3, [r3, #4]
 801977e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019780:	8912      	ldrh	r2, [r2, #8]
 8019782:	441a      	add	r2, r3
 8019784:	4b12      	ldr	r3, [pc, #72]	; (80197d0 <tcp_receive+0xd04>)
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	1ad3      	subs	r3, r2, r3
 801978a:	2b00      	cmp	r3, #0
 801978c:	dd12      	ble.n	80197b4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801978e:	4b10      	ldr	r3, [pc, #64]	; (80197d0 <tcp_receive+0xd04>)
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	b29a      	uxth	r2, r3
 8019794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019796:	68db      	ldr	r3, [r3, #12]
 8019798:	685b      	ldr	r3, [r3, #4]
 801979a:	b29b      	uxth	r3, r3
 801979c:	1ad3      	subs	r3, r2, r3
 801979e:	b29a      	uxth	r2, r3
 80197a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197a2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80197a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197a6:	685a      	ldr	r2, [r3, #4]
 80197a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197aa:	891b      	ldrh	r3, [r3, #8]
 80197ac:	4619      	mov	r1, r3
 80197ae:	4610      	mov	r0, r2
 80197b0:	f7fb fb20 	bl	8014df4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80197b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197b6:	69fa      	ldr	r2, [r7, #28]
 80197b8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80197ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80197bc:	69f8      	ldr	r0, [r7, #28]
 80197be:	f7ff f881 	bl	80188c4 <tcp_oos_insert_segment>
                  }
                  break;
 80197c2:	e0e2      	b.n	801998a <tcp_receive+0xebe>
 80197c4:	2000c030 	.word	0x2000c030
 80197c8:	2000c02d 	.word	0x2000c02d
 80197cc:	2000c000 	.word	0x2000c000
 80197d0:	2000c020 	.word	0x2000c020
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80197d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197d6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80197d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	f040 80c6 	bne.w	801996e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80197e2:	4b80      	ldr	r3, [pc, #512]	; (80199e4 <tcp_receive+0xf18>)
 80197e4:	681a      	ldr	r2, [r3, #0]
 80197e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197e8:	68db      	ldr	r3, [r3, #12]
 80197ea:	685b      	ldr	r3, [r3, #4]
 80197ec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	f340 80bd 	ble.w	801996e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80197f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197f6:	68db      	ldr	r3, [r3, #12]
 80197f8:	899b      	ldrh	r3, [r3, #12]
 80197fa:	b29b      	uxth	r3, r3
 80197fc:	4618      	mov	r0, r3
 80197fe:	f7fa f88d 	bl	801391c <lwip_htons>
 8019802:	4603      	mov	r3, r0
 8019804:	b2db      	uxtb	r3, r3
 8019806:	f003 0301 	and.w	r3, r3, #1
 801980a:	2b00      	cmp	r3, #0
 801980c:	f040 80bf 	bne.w	801998e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019810:	4875      	ldr	r0, [pc, #468]	; (80199e8 <tcp_receive+0xf1c>)
 8019812:	f7fd fa39 	bl	8016c88 <tcp_seg_copy>
 8019816:	4602      	mov	r2, r0
 8019818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801981a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801981c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	2b00      	cmp	r3, #0
 8019822:	f000 80b6 	beq.w	8019992 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019828:	68db      	ldr	r3, [r3, #12]
 801982a:	685b      	ldr	r3, [r3, #4]
 801982c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801982e:	8912      	ldrh	r2, [r2, #8]
 8019830:	441a      	add	r2, r3
 8019832:	4b6c      	ldr	r3, [pc, #432]	; (80199e4 <tcp_receive+0xf18>)
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	1ad3      	subs	r3, r2, r3
 8019838:	2b00      	cmp	r3, #0
 801983a:	dd12      	ble.n	8019862 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801983c:	4b69      	ldr	r3, [pc, #420]	; (80199e4 <tcp_receive+0xf18>)
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	b29a      	uxth	r2, r3
 8019842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019844:	68db      	ldr	r3, [r3, #12]
 8019846:	685b      	ldr	r3, [r3, #4]
 8019848:	b29b      	uxth	r3, r3
 801984a:	1ad3      	subs	r3, r2, r3
 801984c:	b29a      	uxth	r2, r3
 801984e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019850:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019854:	685a      	ldr	r2, [r3, #4]
 8019856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019858:	891b      	ldrh	r3, [r3, #8]
 801985a:	4619      	mov	r1, r3
 801985c:	4610      	mov	r0, r2
 801985e:	f7fb fac9 	bl	8014df4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019862:	4b62      	ldr	r3, [pc, #392]	; (80199ec <tcp_receive+0xf20>)
 8019864:	881b      	ldrh	r3, [r3, #0]
 8019866:	461a      	mov	r2, r3
 8019868:	4b5e      	ldr	r3, [pc, #376]	; (80199e4 <tcp_receive+0xf18>)
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	441a      	add	r2, r3
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019872:	6879      	ldr	r1, [r7, #4]
 8019874:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019876:	440b      	add	r3, r1
 8019878:	1ad3      	subs	r3, r2, r3
 801987a:	2b00      	cmp	r3, #0
 801987c:	f340 8089 	ble.w	8019992 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019882:	681b      	ldr	r3, [r3, #0]
 8019884:	68db      	ldr	r3, [r3, #12]
 8019886:	899b      	ldrh	r3, [r3, #12]
 8019888:	b29b      	uxth	r3, r3
 801988a:	4618      	mov	r0, r3
 801988c:	f7fa f846 	bl	801391c <lwip_htons>
 8019890:	4603      	mov	r3, r0
 8019892:	b2db      	uxtb	r3, r3
 8019894:	f003 0301 	and.w	r3, r3, #1
 8019898:	2b00      	cmp	r3, #0
 801989a:	d022      	beq.n	80198e2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	68db      	ldr	r3, [r3, #12]
 80198a2:	899b      	ldrh	r3, [r3, #12]
 80198a4:	b29b      	uxth	r3, r3
 80198a6:	b21b      	sxth	r3, r3
 80198a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80198ac:	b21c      	sxth	r4, r3
 80198ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	68db      	ldr	r3, [r3, #12]
 80198b4:	899b      	ldrh	r3, [r3, #12]
 80198b6:	b29b      	uxth	r3, r3
 80198b8:	4618      	mov	r0, r3
 80198ba:	f7fa f82f 	bl	801391c <lwip_htons>
 80198be:	4603      	mov	r3, r0
 80198c0:	b2db      	uxtb	r3, r3
 80198c2:	b29b      	uxth	r3, r3
 80198c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80198c8:	b29b      	uxth	r3, r3
 80198ca:	4618      	mov	r0, r3
 80198cc:	f7fa f826 	bl	801391c <lwip_htons>
 80198d0:	4603      	mov	r3, r0
 80198d2:	b21b      	sxth	r3, r3
 80198d4:	4323      	orrs	r3, r4
 80198d6:	b21a      	sxth	r2, r3
 80198d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	68db      	ldr	r3, [r3, #12]
 80198de:	b292      	uxth	r2, r2
 80198e0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198e6:	b29a      	uxth	r2, r3
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80198ec:	4413      	add	r3, r2
 80198ee:	b299      	uxth	r1, r3
 80198f0:	4b3c      	ldr	r3, [pc, #240]	; (80199e4 <tcp_receive+0xf18>)
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	b29a      	uxth	r2, r3
 80198f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	1a8a      	subs	r2, r1, r2
 80198fc:	b292      	uxth	r2, r2
 80198fe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	685a      	ldr	r2, [r3, #4]
 8019906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	891b      	ldrh	r3, [r3, #8]
 801990c:	4619      	mov	r1, r3
 801990e:	4610      	mov	r0, r2
 8019910:	f7fb fa70 	bl	8014df4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	891c      	ldrh	r4, [r3, #8]
 801991a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	68db      	ldr	r3, [r3, #12]
 8019920:	899b      	ldrh	r3, [r3, #12]
 8019922:	b29b      	uxth	r3, r3
 8019924:	4618      	mov	r0, r3
 8019926:	f7f9 fff9 	bl	801391c <lwip_htons>
 801992a:	4603      	mov	r3, r0
 801992c:	b2db      	uxtb	r3, r3
 801992e:	f003 0303 	and.w	r3, r3, #3
 8019932:	2b00      	cmp	r3, #0
 8019934:	d001      	beq.n	801993a <tcp_receive+0xe6e>
 8019936:	2301      	movs	r3, #1
 8019938:	e000      	b.n	801993c <tcp_receive+0xe70>
 801993a:	2300      	movs	r3, #0
 801993c:	4423      	add	r3, r4
 801993e:	b29a      	uxth	r2, r3
 8019940:	4b2a      	ldr	r3, [pc, #168]	; (80199ec <tcp_receive+0xf20>)
 8019942:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019944:	4b29      	ldr	r3, [pc, #164]	; (80199ec <tcp_receive+0xf20>)
 8019946:	881b      	ldrh	r3, [r3, #0]
 8019948:	461a      	mov	r2, r3
 801994a:	4b26      	ldr	r3, [pc, #152]	; (80199e4 <tcp_receive+0xf18>)
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	441a      	add	r2, r3
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019954:	6879      	ldr	r1, [r7, #4]
 8019956:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019958:	440b      	add	r3, r1
 801995a:	429a      	cmp	r2, r3
 801995c:	d019      	beq.n	8019992 <tcp_receive+0xec6>
 801995e:	4b24      	ldr	r3, [pc, #144]	; (80199f0 <tcp_receive+0xf24>)
 8019960:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8019964:	4923      	ldr	r1, [pc, #140]	; (80199f4 <tcp_receive+0xf28>)
 8019966:	4824      	ldr	r0, [pc, #144]	; (80199f8 <tcp_receive+0xf2c>)
 8019968:	f005 fe1a 	bl	801f5a0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801996c:	e011      	b.n	8019992 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801996e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	63bb      	str	r3, [r7, #56]	; 0x38
 8019974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019976:	2b00      	cmp	r3, #0
 8019978:	f47f aea4 	bne.w	80196c4 <tcp_receive+0xbf8>
 801997c:	e00a      	b.n	8019994 <tcp_receive+0xec8>
                break;
 801997e:	bf00      	nop
 8019980:	e008      	b.n	8019994 <tcp_receive+0xec8>
                break;
 8019982:	bf00      	nop
 8019984:	e006      	b.n	8019994 <tcp_receive+0xec8>
                  break;
 8019986:	bf00      	nop
 8019988:	e004      	b.n	8019994 <tcp_receive+0xec8>
                  break;
 801998a:	bf00      	nop
 801998c:	e002      	b.n	8019994 <tcp_receive+0xec8>
                  break;
 801998e:	bf00      	nop
 8019990:	e000      	b.n	8019994 <tcp_receive+0xec8>
                break;
 8019992:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8019994:	6878      	ldr	r0, [r7, #4]
 8019996:	f001 fe8b 	bl	801b6b0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801999a:	e003      	b.n	80199a4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801999c:	6878      	ldr	r0, [r7, #4]
 801999e:	f001 fe87 	bl	801b6b0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80199a2:	e01a      	b.n	80199da <tcp_receive+0xf0e>
 80199a4:	e019      	b.n	80199da <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80199a6:	4b0f      	ldr	r3, [pc, #60]	; (80199e4 <tcp_receive+0xf18>)
 80199a8:	681a      	ldr	r2, [r3, #0]
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199ae:	1ad3      	subs	r3, r2, r3
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	db0a      	blt.n	80199ca <tcp_receive+0xefe>
 80199b4:	4b0b      	ldr	r3, [pc, #44]	; (80199e4 <tcp_receive+0xf18>)
 80199b6:	681a      	ldr	r2, [r3, #0]
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199bc:	6879      	ldr	r1, [r7, #4]
 80199be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80199c0:	440b      	add	r3, r1
 80199c2:	1ad3      	subs	r3, r2, r3
 80199c4:	3301      	adds	r3, #1
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	dd07      	ble.n	80199da <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	8b5b      	ldrh	r3, [r3, #26]
 80199ce:	f043 0302 	orr.w	r3, r3, #2
 80199d2:	b29a      	uxth	r2, r3
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80199d8:	e7ff      	b.n	80199da <tcp_receive+0xf0e>
 80199da:	bf00      	nop
 80199dc:	3750      	adds	r7, #80	; 0x50
 80199de:	46bd      	mov	sp, r7
 80199e0:	bdb0      	pop	{r4, r5, r7, pc}
 80199e2:	bf00      	nop
 80199e4:	2000c020 	.word	0x2000c020
 80199e8:	2000c000 	.word	0x2000c000
 80199ec:	2000c02a 	.word	0x2000c02a
 80199f0:	080227ec 	.word	0x080227ec
 80199f4:	08022b94 	.word	0x08022b94
 80199f8:	08022838 	.word	0x08022838

080199fc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80199fc:	b480      	push	{r7}
 80199fe:	b083      	sub	sp, #12
 8019a00:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8019a02:	4b15      	ldr	r3, [pc, #84]	; (8019a58 <tcp_get_next_optbyte+0x5c>)
 8019a04:	881b      	ldrh	r3, [r3, #0]
 8019a06:	1c5a      	adds	r2, r3, #1
 8019a08:	b291      	uxth	r1, r2
 8019a0a:	4a13      	ldr	r2, [pc, #76]	; (8019a58 <tcp_get_next_optbyte+0x5c>)
 8019a0c:	8011      	strh	r1, [r2, #0]
 8019a0e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019a10:	4b12      	ldr	r3, [pc, #72]	; (8019a5c <tcp_get_next_optbyte+0x60>)
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d004      	beq.n	8019a22 <tcp_get_next_optbyte+0x26>
 8019a18:	4b11      	ldr	r3, [pc, #68]	; (8019a60 <tcp_get_next_optbyte+0x64>)
 8019a1a:	881b      	ldrh	r3, [r3, #0]
 8019a1c:	88fa      	ldrh	r2, [r7, #6]
 8019a1e:	429a      	cmp	r2, r3
 8019a20:	d208      	bcs.n	8019a34 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8019a22:	4b10      	ldr	r3, [pc, #64]	; (8019a64 <tcp_get_next_optbyte+0x68>)
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	3314      	adds	r3, #20
 8019a28:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8019a2a:	88fb      	ldrh	r3, [r7, #6]
 8019a2c:	683a      	ldr	r2, [r7, #0]
 8019a2e:	4413      	add	r3, r2
 8019a30:	781b      	ldrb	r3, [r3, #0]
 8019a32:	e00b      	b.n	8019a4c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8019a34:	88fb      	ldrh	r3, [r7, #6]
 8019a36:	b2da      	uxtb	r2, r3
 8019a38:	4b09      	ldr	r3, [pc, #36]	; (8019a60 <tcp_get_next_optbyte+0x64>)
 8019a3a:	881b      	ldrh	r3, [r3, #0]
 8019a3c:	b2db      	uxtb	r3, r3
 8019a3e:	1ad3      	subs	r3, r2, r3
 8019a40:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8019a42:	4b06      	ldr	r3, [pc, #24]	; (8019a5c <tcp_get_next_optbyte+0x60>)
 8019a44:	681a      	ldr	r2, [r3, #0]
 8019a46:	797b      	ldrb	r3, [r7, #5]
 8019a48:	4413      	add	r3, r2
 8019a4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	370c      	adds	r7, #12
 8019a50:	46bd      	mov	sp, r7
 8019a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a56:	4770      	bx	lr
 8019a58:	2000c01c 	.word	0x2000c01c
 8019a5c:	2000c018 	.word	0x2000c018
 8019a60:	2000c016 	.word	0x2000c016
 8019a64:	2000c010 	.word	0x2000c010

08019a68 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b084      	sub	sp, #16
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d106      	bne.n	8019a84 <tcp_parseopt+0x1c>
 8019a76:	4b32      	ldr	r3, [pc, #200]	; (8019b40 <tcp_parseopt+0xd8>)
 8019a78:	f240 727d 	movw	r2, #1917	; 0x77d
 8019a7c:	4931      	ldr	r1, [pc, #196]	; (8019b44 <tcp_parseopt+0xdc>)
 8019a7e:	4832      	ldr	r0, [pc, #200]	; (8019b48 <tcp_parseopt+0xe0>)
 8019a80:	f005 fd8e 	bl	801f5a0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019a84:	4b31      	ldr	r3, [pc, #196]	; (8019b4c <tcp_parseopt+0xe4>)
 8019a86:	881b      	ldrh	r3, [r3, #0]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d055      	beq.n	8019b38 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019a8c:	4b30      	ldr	r3, [pc, #192]	; (8019b50 <tcp_parseopt+0xe8>)
 8019a8e:	2200      	movs	r2, #0
 8019a90:	801a      	strh	r2, [r3, #0]
 8019a92:	e045      	b.n	8019b20 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8019a94:	f7ff ffb2 	bl	80199fc <tcp_get_next_optbyte>
 8019a98:	4603      	mov	r3, r0
 8019a9a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8019a9c:	7bfb      	ldrb	r3, [r7, #15]
 8019a9e:	2b02      	cmp	r3, #2
 8019aa0:	d006      	beq.n	8019ab0 <tcp_parseopt+0x48>
 8019aa2:	2b02      	cmp	r3, #2
 8019aa4:	dc2b      	bgt.n	8019afe <tcp_parseopt+0x96>
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d041      	beq.n	8019b2e <tcp_parseopt+0xc6>
 8019aaa:	2b01      	cmp	r3, #1
 8019aac:	d127      	bne.n	8019afe <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8019aae:	e037      	b.n	8019b20 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019ab0:	f7ff ffa4 	bl	80199fc <tcp_get_next_optbyte>
 8019ab4:	4603      	mov	r3, r0
 8019ab6:	2b04      	cmp	r3, #4
 8019ab8:	d13b      	bne.n	8019b32 <tcp_parseopt+0xca>
 8019aba:	4b25      	ldr	r3, [pc, #148]	; (8019b50 <tcp_parseopt+0xe8>)
 8019abc:	881b      	ldrh	r3, [r3, #0]
 8019abe:	3301      	adds	r3, #1
 8019ac0:	4a22      	ldr	r2, [pc, #136]	; (8019b4c <tcp_parseopt+0xe4>)
 8019ac2:	8812      	ldrh	r2, [r2, #0]
 8019ac4:	4293      	cmp	r3, r2
 8019ac6:	da34      	bge.n	8019b32 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019ac8:	f7ff ff98 	bl	80199fc <tcp_get_next_optbyte>
 8019acc:	4603      	mov	r3, r0
 8019ace:	b29b      	uxth	r3, r3
 8019ad0:	021b      	lsls	r3, r3, #8
 8019ad2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8019ad4:	f7ff ff92 	bl	80199fc <tcp_get_next_optbyte>
 8019ad8:	4603      	mov	r3, r0
 8019ada:	b29a      	uxth	r2, r3
 8019adc:	89bb      	ldrh	r3, [r7, #12]
 8019ade:	4313      	orrs	r3, r2
 8019ae0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019ae2:	89bb      	ldrh	r3, [r7, #12]
 8019ae4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8019ae8:	d804      	bhi.n	8019af4 <tcp_parseopt+0x8c>
 8019aea:	89bb      	ldrh	r3, [r7, #12]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d001      	beq.n	8019af4 <tcp_parseopt+0x8c>
 8019af0:	89ba      	ldrh	r2, [r7, #12]
 8019af2:	e001      	b.n	8019af8 <tcp_parseopt+0x90>
 8019af4:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8019afc:	e010      	b.n	8019b20 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8019afe:	f7ff ff7d 	bl	80199fc <tcp_get_next_optbyte>
 8019b02:	4603      	mov	r3, r0
 8019b04:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8019b06:	7afb      	ldrb	r3, [r7, #11]
 8019b08:	2b01      	cmp	r3, #1
 8019b0a:	d914      	bls.n	8019b36 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8019b0c:	7afb      	ldrb	r3, [r7, #11]
 8019b0e:	b29a      	uxth	r2, r3
 8019b10:	4b0f      	ldr	r3, [pc, #60]	; (8019b50 <tcp_parseopt+0xe8>)
 8019b12:	881b      	ldrh	r3, [r3, #0]
 8019b14:	4413      	add	r3, r2
 8019b16:	b29b      	uxth	r3, r3
 8019b18:	3b02      	subs	r3, #2
 8019b1a:	b29a      	uxth	r2, r3
 8019b1c:	4b0c      	ldr	r3, [pc, #48]	; (8019b50 <tcp_parseopt+0xe8>)
 8019b1e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019b20:	4b0b      	ldr	r3, [pc, #44]	; (8019b50 <tcp_parseopt+0xe8>)
 8019b22:	881a      	ldrh	r2, [r3, #0]
 8019b24:	4b09      	ldr	r3, [pc, #36]	; (8019b4c <tcp_parseopt+0xe4>)
 8019b26:	881b      	ldrh	r3, [r3, #0]
 8019b28:	429a      	cmp	r2, r3
 8019b2a:	d3b3      	bcc.n	8019a94 <tcp_parseopt+0x2c>
 8019b2c:	e004      	b.n	8019b38 <tcp_parseopt+0xd0>
          return;
 8019b2e:	bf00      	nop
 8019b30:	e002      	b.n	8019b38 <tcp_parseopt+0xd0>
            return;
 8019b32:	bf00      	nop
 8019b34:	e000      	b.n	8019b38 <tcp_parseopt+0xd0>
            return;
 8019b36:	bf00      	nop
      }
    }
  }
}
 8019b38:	3710      	adds	r7, #16
 8019b3a:	46bd      	mov	sp, r7
 8019b3c:	bd80      	pop	{r7, pc}
 8019b3e:	bf00      	nop
 8019b40:	080227ec 	.word	0x080227ec
 8019b44:	08022c50 	.word	0x08022c50
 8019b48:	08022838 	.word	0x08022838
 8019b4c:	2000c014 	.word	0x2000c014
 8019b50:	2000c01c 	.word	0x2000c01c

08019b54 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019b54:	b480      	push	{r7}
 8019b56:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019b58:	4b05      	ldr	r3, [pc, #20]	; (8019b70 <tcp_trigger_input_pcb_close+0x1c>)
 8019b5a:	781b      	ldrb	r3, [r3, #0]
 8019b5c:	f043 0310 	orr.w	r3, r3, #16
 8019b60:	b2da      	uxtb	r2, r3
 8019b62:	4b03      	ldr	r3, [pc, #12]	; (8019b70 <tcp_trigger_input_pcb_close+0x1c>)
 8019b64:	701a      	strb	r2, [r3, #0]
}
 8019b66:	bf00      	nop
 8019b68:	46bd      	mov	sp, r7
 8019b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b6e:	4770      	bx	lr
 8019b70:	2000c02d 	.word	0x2000c02d

08019b74 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8019b74:	b580      	push	{r7, lr}
 8019b76:	b084      	sub	sp, #16
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	60f8      	str	r0, [r7, #12]
 8019b7c:	60b9      	str	r1, [r7, #8]
 8019b7e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d00a      	beq.n	8019b9c <tcp_route+0x28>
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	7a1b      	ldrb	r3, [r3, #8]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d006      	beq.n	8019b9c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	7a1b      	ldrb	r3, [r3, #8]
 8019b92:	4618      	mov	r0, r3
 8019b94:	f7fa ff26 	bl	80149e4 <netif_get_by_index>
 8019b98:	4603      	mov	r3, r0
 8019b9a:	e003      	b.n	8019ba4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8019b9c:	6878      	ldr	r0, [r7, #4]
 8019b9e:	f003 fea3 	bl	801d8e8 <ip4_route>
 8019ba2:	4603      	mov	r3, r0
  }
}
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	3710      	adds	r7, #16
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	bd80      	pop	{r7, pc}

08019bac <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8019bac:	b590      	push	{r4, r7, lr}
 8019bae:	b087      	sub	sp, #28
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	60f8      	str	r0, [r7, #12]
 8019bb4:	60b9      	str	r1, [r7, #8]
 8019bb6:	603b      	str	r3, [r7, #0]
 8019bb8:	4613      	mov	r3, r2
 8019bba:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d105      	bne.n	8019bce <tcp_create_segment+0x22>
 8019bc2:	4b44      	ldr	r3, [pc, #272]	; (8019cd4 <tcp_create_segment+0x128>)
 8019bc4:	22a3      	movs	r2, #163	; 0xa3
 8019bc6:	4944      	ldr	r1, [pc, #272]	; (8019cd8 <tcp_create_segment+0x12c>)
 8019bc8:	4844      	ldr	r0, [pc, #272]	; (8019cdc <tcp_create_segment+0x130>)
 8019bca:	f005 fce9 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019bce:	68bb      	ldr	r3, [r7, #8]
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d105      	bne.n	8019be0 <tcp_create_segment+0x34>
 8019bd4:	4b3f      	ldr	r3, [pc, #252]	; (8019cd4 <tcp_create_segment+0x128>)
 8019bd6:	22a4      	movs	r2, #164	; 0xa4
 8019bd8:	4941      	ldr	r1, [pc, #260]	; (8019ce0 <tcp_create_segment+0x134>)
 8019bda:	4840      	ldr	r0, [pc, #256]	; (8019cdc <tcp_create_segment+0x130>)
 8019bdc:	f005 fce0 	bl	801f5a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019be0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019be4:	009b      	lsls	r3, r3, #2
 8019be6:	b2db      	uxtb	r3, r3
 8019be8:	f003 0304 	and.w	r3, r3, #4
 8019bec:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019bee:	2003      	movs	r0, #3
 8019bf0:	f7fa fb6c 	bl	80142cc <memp_malloc>
 8019bf4:	6138      	str	r0, [r7, #16]
 8019bf6:	693b      	ldr	r3, [r7, #16]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d104      	bne.n	8019c06 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8019bfc:	68b8      	ldr	r0, [r7, #8]
 8019bfe:	f7fb fa7f 	bl	8015100 <pbuf_free>
    return NULL;
 8019c02:	2300      	movs	r3, #0
 8019c04:	e061      	b.n	8019cca <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8019c06:	693b      	ldr	r3, [r7, #16]
 8019c08:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019c0c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8019c0e:	693b      	ldr	r3, [r7, #16]
 8019c10:	2200      	movs	r2, #0
 8019c12:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8019c14:	693b      	ldr	r3, [r7, #16]
 8019c16:	68ba      	ldr	r2, [r7, #8]
 8019c18:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019c1a:	68bb      	ldr	r3, [r7, #8]
 8019c1c:	891a      	ldrh	r2, [r3, #8]
 8019c1e:	7dfb      	ldrb	r3, [r7, #23]
 8019c20:	b29b      	uxth	r3, r3
 8019c22:	429a      	cmp	r2, r3
 8019c24:	d205      	bcs.n	8019c32 <tcp_create_segment+0x86>
 8019c26:	4b2b      	ldr	r3, [pc, #172]	; (8019cd4 <tcp_create_segment+0x128>)
 8019c28:	22b0      	movs	r2, #176	; 0xb0
 8019c2a:	492e      	ldr	r1, [pc, #184]	; (8019ce4 <tcp_create_segment+0x138>)
 8019c2c:	482b      	ldr	r0, [pc, #172]	; (8019cdc <tcp_create_segment+0x130>)
 8019c2e:	f005 fcb7 	bl	801f5a0 <iprintf>
  seg->len = p->tot_len - optlen;
 8019c32:	68bb      	ldr	r3, [r7, #8]
 8019c34:	891a      	ldrh	r2, [r3, #8]
 8019c36:	7dfb      	ldrb	r3, [r7, #23]
 8019c38:	b29b      	uxth	r3, r3
 8019c3a:	1ad3      	subs	r3, r2, r3
 8019c3c:	b29a      	uxth	r2, r3
 8019c3e:	693b      	ldr	r3, [r7, #16]
 8019c40:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019c42:	2114      	movs	r1, #20
 8019c44:	68b8      	ldr	r0, [r7, #8]
 8019c46:	f7fb f9c5 	bl	8014fd4 <pbuf_add_header>
 8019c4a:	4603      	mov	r3, r0
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d004      	beq.n	8019c5a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8019c50:	6938      	ldr	r0, [r7, #16]
 8019c52:	f7fd f800 	bl	8016c56 <tcp_seg_free>
    return NULL;
 8019c56:	2300      	movs	r3, #0
 8019c58:	e037      	b.n	8019cca <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019c5a:	693b      	ldr	r3, [r7, #16]
 8019c5c:	685b      	ldr	r3, [r3, #4]
 8019c5e:	685a      	ldr	r2, [r3, #4]
 8019c60:	693b      	ldr	r3, [r7, #16]
 8019c62:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	8ada      	ldrh	r2, [r3, #22]
 8019c68:	693b      	ldr	r3, [r7, #16]
 8019c6a:	68dc      	ldr	r4, [r3, #12]
 8019c6c:	4610      	mov	r0, r2
 8019c6e:	f7f9 fe55 	bl	801391c <lwip_htons>
 8019c72:	4603      	mov	r3, r0
 8019c74:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	8b1a      	ldrh	r2, [r3, #24]
 8019c7a:	693b      	ldr	r3, [r7, #16]
 8019c7c:	68dc      	ldr	r4, [r3, #12]
 8019c7e:	4610      	mov	r0, r2
 8019c80:	f7f9 fe4c 	bl	801391c <lwip_htons>
 8019c84:	4603      	mov	r3, r0
 8019c86:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019c88:	693b      	ldr	r3, [r7, #16]
 8019c8a:	68dc      	ldr	r4, [r3, #12]
 8019c8c:	6838      	ldr	r0, [r7, #0]
 8019c8e:	f7f9 fe5a 	bl	8013946 <lwip_htonl>
 8019c92:	4603      	mov	r3, r0
 8019c94:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019c96:	7dfb      	ldrb	r3, [r7, #23]
 8019c98:	089b      	lsrs	r3, r3, #2
 8019c9a:	b2db      	uxtb	r3, r3
 8019c9c:	b29b      	uxth	r3, r3
 8019c9e:	3305      	adds	r3, #5
 8019ca0:	b29b      	uxth	r3, r3
 8019ca2:	031b      	lsls	r3, r3, #12
 8019ca4:	b29a      	uxth	r2, r3
 8019ca6:	79fb      	ldrb	r3, [r7, #7]
 8019ca8:	b29b      	uxth	r3, r3
 8019caa:	4313      	orrs	r3, r2
 8019cac:	b29a      	uxth	r2, r3
 8019cae:	693b      	ldr	r3, [r7, #16]
 8019cb0:	68dc      	ldr	r4, [r3, #12]
 8019cb2:	4610      	mov	r0, r2
 8019cb4:	f7f9 fe32 	bl	801391c <lwip_htons>
 8019cb8:	4603      	mov	r3, r0
 8019cba:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8019cbc:	693b      	ldr	r3, [r7, #16]
 8019cbe:	68db      	ldr	r3, [r3, #12]
 8019cc0:	2200      	movs	r2, #0
 8019cc2:	749a      	strb	r2, [r3, #18]
 8019cc4:	2200      	movs	r2, #0
 8019cc6:	74da      	strb	r2, [r3, #19]
  return seg;
 8019cc8:	693b      	ldr	r3, [r7, #16]
}
 8019cca:	4618      	mov	r0, r3
 8019ccc:	371c      	adds	r7, #28
 8019cce:	46bd      	mov	sp, r7
 8019cd0:	bd90      	pop	{r4, r7, pc}
 8019cd2:	bf00      	nop
 8019cd4:	08022c6c 	.word	0x08022c6c
 8019cd8:	08022ca0 	.word	0x08022ca0
 8019cdc:	08022cc0 	.word	0x08022cc0
 8019ce0:	08022ce8 	.word	0x08022ce8
 8019ce4:	08022d0c 	.word	0x08022d0c

08019ce8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8019ce8:	b580      	push	{r7, lr}
 8019cea:	b086      	sub	sp, #24
 8019cec:	af00      	add	r7, sp, #0
 8019cee:	607b      	str	r3, [r7, #4]
 8019cf0:	4603      	mov	r3, r0
 8019cf2:	73fb      	strb	r3, [r7, #15]
 8019cf4:	460b      	mov	r3, r1
 8019cf6:	81bb      	strh	r3, [r7, #12]
 8019cf8:	4613      	mov	r3, r2
 8019cfa:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8019cfc:	89bb      	ldrh	r3, [r7, #12]
 8019cfe:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d105      	bne.n	8019d12 <tcp_pbuf_prealloc+0x2a>
 8019d06:	4b30      	ldr	r3, [pc, #192]	; (8019dc8 <tcp_pbuf_prealloc+0xe0>)
 8019d08:	22e8      	movs	r2, #232	; 0xe8
 8019d0a:	4930      	ldr	r1, [pc, #192]	; (8019dcc <tcp_pbuf_prealloc+0xe4>)
 8019d0c:	4830      	ldr	r0, [pc, #192]	; (8019dd0 <tcp_pbuf_prealloc+0xe8>)
 8019d0e:	f005 fc47 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019d12:	6a3b      	ldr	r3, [r7, #32]
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d105      	bne.n	8019d24 <tcp_pbuf_prealloc+0x3c>
 8019d18:	4b2b      	ldr	r3, [pc, #172]	; (8019dc8 <tcp_pbuf_prealloc+0xe0>)
 8019d1a:	22e9      	movs	r2, #233	; 0xe9
 8019d1c:	492d      	ldr	r1, [pc, #180]	; (8019dd4 <tcp_pbuf_prealloc+0xec>)
 8019d1e:	482c      	ldr	r0, [pc, #176]	; (8019dd0 <tcp_pbuf_prealloc+0xe8>)
 8019d20:	f005 fc3e 	bl	801f5a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8019d24:	89ba      	ldrh	r2, [r7, #12]
 8019d26:	897b      	ldrh	r3, [r7, #10]
 8019d28:	429a      	cmp	r2, r3
 8019d2a:	d221      	bcs.n	8019d70 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019d2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019d30:	f003 0302 	and.w	r3, r3, #2
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d111      	bne.n	8019d5c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8019d38:	6a3b      	ldr	r3, [r7, #32]
 8019d3a:	8b5b      	ldrh	r3, [r3, #26]
 8019d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d115      	bne.n	8019d70 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8019d44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d007      	beq.n	8019d5c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8019d4c:	6a3b      	ldr	r3, [r7, #32]
 8019d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d103      	bne.n	8019d5c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8019d54:	6a3b      	ldr	r3, [r7, #32]
 8019d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d009      	beq.n	8019d70 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8019d5c:	89bb      	ldrh	r3, [r7, #12]
 8019d5e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8019d62:	f023 0203 	bic.w	r2, r3, #3
 8019d66:	897b      	ldrh	r3, [r7, #10]
 8019d68:	4293      	cmp	r3, r2
 8019d6a:	bf28      	it	cs
 8019d6c:	4613      	movcs	r3, r2
 8019d6e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019d70:	8af9      	ldrh	r1, [r7, #22]
 8019d72:	7bfb      	ldrb	r3, [r7, #15]
 8019d74:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019d78:	4618      	mov	r0, r3
 8019d7a:	f7fa fedd 	bl	8014b38 <pbuf_alloc>
 8019d7e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019d80:	693b      	ldr	r3, [r7, #16]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d101      	bne.n	8019d8a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8019d86:	2300      	movs	r3, #0
 8019d88:	e019      	b.n	8019dbe <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8019d8a:	693b      	ldr	r3, [r7, #16]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d006      	beq.n	8019da0 <tcp_pbuf_prealloc+0xb8>
 8019d92:	4b0d      	ldr	r3, [pc, #52]	; (8019dc8 <tcp_pbuf_prealloc+0xe0>)
 8019d94:	f240 120b 	movw	r2, #267	; 0x10b
 8019d98:	490f      	ldr	r1, [pc, #60]	; (8019dd8 <tcp_pbuf_prealloc+0xf0>)
 8019d9a:	480d      	ldr	r0, [pc, #52]	; (8019dd0 <tcp_pbuf_prealloc+0xe8>)
 8019d9c:	f005 fc00 	bl	801f5a0 <iprintf>
  *oversize = p->len - length;
 8019da0:	693b      	ldr	r3, [r7, #16]
 8019da2:	895a      	ldrh	r2, [r3, #10]
 8019da4:	89bb      	ldrh	r3, [r7, #12]
 8019da6:	1ad3      	subs	r3, r2, r3
 8019da8:	b29a      	uxth	r2, r3
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8019dae:	693b      	ldr	r3, [r7, #16]
 8019db0:	89ba      	ldrh	r2, [r7, #12]
 8019db2:	811a      	strh	r2, [r3, #8]
 8019db4:	693b      	ldr	r3, [r7, #16]
 8019db6:	891a      	ldrh	r2, [r3, #8]
 8019db8:	693b      	ldr	r3, [r7, #16]
 8019dba:	815a      	strh	r2, [r3, #10]
  return p;
 8019dbc:	693b      	ldr	r3, [r7, #16]
}
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	3718      	adds	r7, #24
 8019dc2:	46bd      	mov	sp, r7
 8019dc4:	bd80      	pop	{r7, pc}
 8019dc6:	bf00      	nop
 8019dc8:	08022c6c 	.word	0x08022c6c
 8019dcc:	08022d24 	.word	0x08022d24
 8019dd0:	08022cc0 	.word	0x08022cc0
 8019dd4:	08022d48 	.word	0x08022d48
 8019dd8:	08022d68 	.word	0x08022d68

08019ddc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	b082      	sub	sp, #8
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
 8019de4:	460b      	mov	r3, r1
 8019de6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d106      	bne.n	8019dfc <tcp_write_checks+0x20>
 8019dee:	4b33      	ldr	r3, [pc, #204]	; (8019ebc <tcp_write_checks+0xe0>)
 8019df0:	f240 1233 	movw	r2, #307	; 0x133
 8019df4:	4932      	ldr	r1, [pc, #200]	; (8019ec0 <tcp_write_checks+0xe4>)
 8019df6:	4833      	ldr	r0, [pc, #204]	; (8019ec4 <tcp_write_checks+0xe8>)
 8019df8:	f005 fbd2 	bl	801f5a0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	7d1b      	ldrb	r3, [r3, #20]
 8019e00:	2b04      	cmp	r3, #4
 8019e02:	d00e      	beq.n	8019e22 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8019e08:	2b07      	cmp	r3, #7
 8019e0a:	d00a      	beq.n	8019e22 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8019e10:	2b02      	cmp	r3, #2
 8019e12:	d006      	beq.n	8019e22 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8019e18:	2b03      	cmp	r3, #3
 8019e1a:	d002      	beq.n	8019e22 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8019e1c:	f06f 030a 	mvn.w	r3, #10
 8019e20:	e048      	b.n	8019eb4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8019e22:	887b      	ldrh	r3, [r7, #2]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d101      	bne.n	8019e2c <tcp_write_checks+0x50>
    return ERR_OK;
 8019e28:	2300      	movs	r3, #0
 8019e2a:	e043      	b.n	8019eb4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019e32:	887a      	ldrh	r2, [r7, #2]
 8019e34:	429a      	cmp	r2, r3
 8019e36:	d909      	bls.n	8019e4c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	8b5b      	ldrh	r3, [r3, #26]
 8019e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019e40:	b29a      	uxth	r2, r3
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e4a:	e033      	b.n	8019eb4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019e52:	2b08      	cmp	r3, #8
 8019e54:	d909      	bls.n	8019e6a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	8b5b      	ldrh	r3, [r3, #26]
 8019e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019e5e:	b29a      	uxth	r2, r3
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e68:	e024      	b.n	8019eb4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d00f      	beq.n	8019e94 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d11a      	bne.n	8019eb2 <tcp_write_checks+0xd6>
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d116      	bne.n	8019eb2 <tcp_write_checks+0xd6>
 8019e84:	4b0d      	ldr	r3, [pc, #52]	; (8019ebc <tcp_write_checks+0xe0>)
 8019e86:	f240 1255 	movw	r2, #341	; 0x155
 8019e8a:	490f      	ldr	r1, [pc, #60]	; (8019ec8 <tcp_write_checks+0xec>)
 8019e8c:	480d      	ldr	r0, [pc, #52]	; (8019ec4 <tcp_write_checks+0xe8>)
 8019e8e:	f005 fb87 	bl	801f5a0 <iprintf>
 8019e92:	e00e      	b.n	8019eb2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d103      	bne.n	8019ea4 <tcp_write_checks+0xc8>
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d006      	beq.n	8019eb2 <tcp_write_checks+0xd6>
 8019ea4:	4b05      	ldr	r3, [pc, #20]	; (8019ebc <tcp_write_checks+0xe0>)
 8019ea6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8019eaa:	4908      	ldr	r1, [pc, #32]	; (8019ecc <tcp_write_checks+0xf0>)
 8019eac:	4805      	ldr	r0, [pc, #20]	; (8019ec4 <tcp_write_checks+0xe8>)
 8019eae:	f005 fb77 	bl	801f5a0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8019eb2:	2300      	movs	r3, #0
}
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	3708      	adds	r7, #8
 8019eb8:	46bd      	mov	sp, r7
 8019eba:	bd80      	pop	{r7, pc}
 8019ebc:	08022c6c 	.word	0x08022c6c
 8019ec0:	08022d7c 	.word	0x08022d7c
 8019ec4:	08022cc0 	.word	0x08022cc0
 8019ec8:	08022d9c 	.word	0x08022d9c
 8019ecc:	08022dd8 	.word	0x08022dd8

08019ed0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8019ed0:	b590      	push	{r4, r7, lr}
 8019ed2:	b09b      	sub	sp, #108	; 0x6c
 8019ed4:	af04      	add	r7, sp, #16
 8019ed6:	60f8      	str	r0, [r7, #12]
 8019ed8:	60b9      	str	r1, [r7, #8]
 8019eda:	4611      	mov	r1, r2
 8019edc:	461a      	mov	r2, r3
 8019ede:	460b      	mov	r3, r1
 8019ee0:	80fb      	strh	r3, [r7, #6]
 8019ee2:	4613      	mov	r3, r2
 8019ee4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8019ee6:	2300      	movs	r3, #0
 8019ee8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8019eea:	2300      	movs	r3, #0
 8019eec:	653b      	str	r3, [r7, #80]	; 0x50
 8019eee:	2300      	movs	r3, #0
 8019ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	64bb      	str	r3, [r7, #72]	; 0x48
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8019efa:	2300      	movs	r3, #0
 8019efc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019f00:	2300      	movs	r3, #0
 8019f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8019f06:	2300      	movs	r3, #0
 8019f08:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8019f0a:	2300      	movs	r3, #0
 8019f0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8019f0e:	2300      	movs	r3, #0
 8019f10:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d109      	bne.n	8019f2c <tcp_write+0x5c>
 8019f18:	4ba4      	ldr	r3, [pc, #656]	; (801a1ac <tcp_write+0x2dc>)
 8019f1a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8019f1e:	49a4      	ldr	r1, [pc, #656]	; (801a1b0 <tcp_write+0x2e0>)
 8019f20:	48a4      	ldr	r0, [pc, #656]	; (801a1b4 <tcp_write+0x2e4>)
 8019f22:	f005 fb3d 	bl	801f5a0 <iprintf>
 8019f26:	f06f 030f 	mvn.w	r3, #15
 8019f2a:	e32a      	b.n	801a582 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019f2c:	68fb      	ldr	r3, [r7, #12]
 8019f2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8019f32:	085b      	lsrs	r3, r3, #1
 8019f34:	b29a      	uxth	r2, r3
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019f3a:	4293      	cmp	r3, r2
 8019f3c:	bf28      	it	cs
 8019f3e:	4613      	movcs	r3, r2
 8019f40:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8019f42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d102      	bne.n	8019f4e <tcp_write+0x7e>
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019f4c:	e000      	b.n	8019f50 <tcp_write+0x80>
 8019f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019f50:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019f52:	68bb      	ldr	r3, [r7, #8]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d109      	bne.n	8019f6c <tcp_write+0x9c>
 8019f58:	4b94      	ldr	r3, [pc, #592]	; (801a1ac <tcp_write+0x2dc>)
 8019f5a:	f240 12ad 	movw	r2, #429	; 0x1ad
 8019f5e:	4996      	ldr	r1, [pc, #600]	; (801a1b8 <tcp_write+0x2e8>)
 8019f60:	4894      	ldr	r0, [pc, #592]	; (801a1b4 <tcp_write+0x2e4>)
 8019f62:	f005 fb1d 	bl	801f5a0 <iprintf>
 8019f66:	f06f 030f 	mvn.w	r3, #15
 8019f6a:	e30a      	b.n	801a582 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019f6c:	88fb      	ldrh	r3, [r7, #6]
 8019f6e:	4619      	mov	r1, r3
 8019f70:	68f8      	ldr	r0, [r7, #12]
 8019f72:	f7ff ff33 	bl	8019ddc <tcp_write_checks>
 8019f76:	4603      	mov	r3, r0
 8019f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8019f7c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d002      	beq.n	8019f8a <tcp_write+0xba>
    return err;
 8019f84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019f88:	e2fb      	b.n	801a582 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019f90:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019f94:	2300      	movs	r3, #0
 8019f96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8019f9a:	68fb      	ldr	r3, [r7, #12]
 8019f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	f000 80f6 	beq.w	801a190 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019fa8:	653b      	str	r3, [r7, #80]	; 0x50
 8019faa:	e002      	b.n	8019fb2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8019fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d1f8      	bne.n	8019fac <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8019fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fbc:	7a9b      	ldrb	r3, [r3, #10]
 8019fbe:	009b      	lsls	r3, r3, #2
 8019fc0:	b29b      	uxth	r3, r3
 8019fc2:	f003 0304 	and.w	r3, r3, #4
 8019fc6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8019fc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fcc:	891b      	ldrh	r3, [r3, #8]
 8019fce:	4619      	mov	r1, r3
 8019fd0:	8c3b      	ldrh	r3, [r7, #32]
 8019fd2:	440b      	add	r3, r1
 8019fd4:	429a      	cmp	r2, r3
 8019fd6:	da06      	bge.n	8019fe6 <tcp_write+0x116>
 8019fd8:	4b74      	ldr	r3, [pc, #464]	; (801a1ac <tcp_write+0x2dc>)
 8019fda:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019fde:	4977      	ldr	r1, [pc, #476]	; (801a1bc <tcp_write+0x2ec>)
 8019fe0:	4874      	ldr	r0, [pc, #464]	; (801a1b4 <tcp_write+0x2e4>)
 8019fe2:	f005 fadd 	bl	801f5a0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8019fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fe8:	891a      	ldrh	r2, [r3, #8]
 8019fea:	8c3b      	ldrh	r3, [r7, #32]
 8019fec:	4413      	add	r3, r2
 8019fee:	b29b      	uxth	r3, r3
 8019ff0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019ff2:	1ad3      	subs	r3, r2, r3
 8019ff4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019ffc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8019ffe:	8a7b      	ldrh	r3, [r7, #18]
 801a000:	2b00      	cmp	r3, #0
 801a002:	d026      	beq.n	801a052 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a004:	8a7b      	ldrh	r3, [r7, #18]
 801a006:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a008:	429a      	cmp	r2, r3
 801a00a:	d206      	bcs.n	801a01a <tcp_write+0x14a>
 801a00c:	4b67      	ldr	r3, [pc, #412]	; (801a1ac <tcp_write+0x2dc>)
 801a00e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801a012:	496b      	ldr	r1, [pc, #428]	; (801a1c0 <tcp_write+0x2f0>)
 801a014:	4867      	ldr	r0, [pc, #412]	; (801a1b4 <tcp_write+0x2e4>)
 801a016:	f005 fac3 	bl	801f5a0 <iprintf>
      seg = last_unsent;
 801a01a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a01c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a01e:	8a7b      	ldrh	r3, [r7, #18]
 801a020:	88fa      	ldrh	r2, [r7, #6]
 801a022:	4293      	cmp	r3, r2
 801a024:	bf28      	it	cs
 801a026:	4613      	movcs	r3, r2
 801a028:	b29b      	uxth	r3, r3
 801a02a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a02c:	4293      	cmp	r3, r2
 801a02e:	bf28      	it	cs
 801a030:	4613      	movcs	r3, r2
 801a032:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801a034:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a038:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a03a:	4413      	add	r3, r2
 801a03c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801a040:	8a7a      	ldrh	r2, [r7, #18]
 801a042:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a044:	1ad3      	subs	r3, r2, r3
 801a046:	b29b      	uxth	r3, r3
 801a048:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801a04a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a04c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a04e:	1ad3      	subs	r3, r2, r3
 801a050:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a052:	8a7b      	ldrh	r3, [r7, #18]
 801a054:	2b00      	cmp	r3, #0
 801a056:	d00b      	beq.n	801a070 <tcp_write+0x1a0>
 801a058:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a05c:	88fb      	ldrh	r3, [r7, #6]
 801a05e:	429a      	cmp	r2, r3
 801a060:	d006      	beq.n	801a070 <tcp_write+0x1a0>
 801a062:	4b52      	ldr	r3, [pc, #328]	; (801a1ac <tcp_write+0x2dc>)
 801a064:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a068:	4956      	ldr	r1, [pc, #344]	; (801a1c4 <tcp_write+0x2f4>)
 801a06a:	4852      	ldr	r0, [pc, #328]	; (801a1b4 <tcp_write+0x2e4>)
 801a06c:	f005 fa98 	bl	801f5a0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a070:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a074:	88fb      	ldrh	r3, [r7, #6]
 801a076:	429a      	cmp	r2, r3
 801a078:	f080 8167 	bcs.w	801a34a <tcp_write+0x47a>
 801a07c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a07e:	2b00      	cmp	r3, #0
 801a080:	f000 8163 	beq.w	801a34a <tcp_write+0x47a>
 801a084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a086:	891b      	ldrh	r3, [r3, #8]
 801a088:	2b00      	cmp	r3, #0
 801a08a:	f000 815e 	beq.w	801a34a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a08e:	88fa      	ldrh	r2, [r7, #6]
 801a090:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a094:	1ad2      	subs	r2, r2, r3
 801a096:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a098:	4293      	cmp	r3, r2
 801a09a:	bfa8      	it	ge
 801a09c:	4613      	movge	r3, r2
 801a09e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801a0a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a0a2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a0a4:	797b      	ldrb	r3, [r7, #5]
 801a0a6:	f003 0301 	and.w	r3, r3, #1
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d027      	beq.n	801a0fe <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a0ae:	f107 0012 	add.w	r0, r7, #18
 801a0b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a0b4:	8bf9      	ldrh	r1, [r7, #30]
 801a0b6:	2301      	movs	r3, #1
 801a0b8:	9302      	str	r3, [sp, #8]
 801a0ba:	797b      	ldrb	r3, [r7, #5]
 801a0bc:	9301      	str	r3, [sp, #4]
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	9300      	str	r3, [sp, #0]
 801a0c2:	4603      	mov	r3, r0
 801a0c4:	2000      	movs	r0, #0
 801a0c6:	f7ff fe0f 	bl	8019ce8 <tcp_pbuf_prealloc>
 801a0ca:	6578      	str	r0, [r7, #84]	; 0x54
 801a0cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	f000 8225 	beq.w	801a51e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a0d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0d6:	6858      	ldr	r0, [r3, #4]
 801a0d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a0dc:	68ba      	ldr	r2, [r7, #8]
 801a0de:	4413      	add	r3, r2
 801a0e0:	8bfa      	ldrh	r2, [r7, #30]
 801a0e2:	4619      	mov	r1, r3
 801a0e4:	f005 f94c 	bl	801f380 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801a0e8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a0ea:	f7fb f897 	bl	801521c <pbuf_clen>
 801a0ee:	4603      	mov	r3, r0
 801a0f0:	461a      	mov	r2, r3
 801a0f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a0f6:	4413      	add	r3, r2
 801a0f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801a0fc:	e041      	b.n	801a182 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a0fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a100:	685b      	ldr	r3, [r3, #4]
 801a102:	637b      	str	r3, [r7, #52]	; 0x34
 801a104:	e002      	b.n	801a10c <tcp_write+0x23c>
 801a106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	637b      	str	r3, [r7, #52]	; 0x34
 801a10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	2b00      	cmp	r3, #0
 801a112:	d1f8      	bne.n	801a106 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a116:	7b1b      	ldrb	r3, [r3, #12]
 801a118:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d115      	bne.n	801a14c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a122:	685b      	ldr	r3, [r3, #4]
 801a124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a126:	8952      	ldrh	r2, [r2, #10]
 801a128:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a12a:	68ba      	ldr	r2, [r7, #8]
 801a12c:	429a      	cmp	r2, r3
 801a12e:	d10d      	bne.n	801a14c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a130:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a134:	2b00      	cmp	r3, #0
 801a136:	d006      	beq.n	801a146 <tcp_write+0x276>
 801a138:	4b1c      	ldr	r3, [pc, #112]	; (801a1ac <tcp_write+0x2dc>)
 801a13a:	f240 2231 	movw	r2, #561	; 0x231
 801a13e:	4922      	ldr	r1, [pc, #136]	; (801a1c8 <tcp_write+0x2f8>)
 801a140:	481c      	ldr	r0, [pc, #112]	; (801a1b4 <tcp_write+0x2e4>)
 801a142:	f005 fa2d 	bl	801f5a0 <iprintf>
          extendlen = seglen;
 801a146:	8bfb      	ldrh	r3, [r7, #30]
 801a148:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801a14a:	e01a      	b.n	801a182 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a14c:	8bfb      	ldrh	r3, [r7, #30]
 801a14e:	2201      	movs	r2, #1
 801a150:	4619      	mov	r1, r3
 801a152:	2000      	movs	r0, #0
 801a154:	f7fa fcf0 	bl	8014b38 <pbuf_alloc>
 801a158:	6578      	str	r0, [r7, #84]	; 0x54
 801a15a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	f000 81e0 	beq.w	801a522 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a162:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a166:	68ba      	ldr	r2, [r7, #8]
 801a168:	441a      	add	r2, r3
 801a16a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a16c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801a16e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a170:	f7fb f854 	bl	801521c <pbuf_clen>
 801a174:	4603      	mov	r3, r0
 801a176:	461a      	mov	r2, r3
 801a178:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a17c:	4413      	add	r3, r2
 801a17e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801a182:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a186:	8bfb      	ldrh	r3, [r7, #30]
 801a188:	4413      	add	r3, r2
 801a18a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801a18e:	e0dc      	b.n	801a34a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a196:	2b00      	cmp	r3, #0
 801a198:	f000 80d7 	beq.w	801a34a <tcp_write+0x47a>
 801a19c:	4b03      	ldr	r3, [pc, #12]	; (801a1ac <tcp_write+0x2dc>)
 801a19e:	f240 224a 	movw	r2, #586	; 0x24a
 801a1a2:	490a      	ldr	r1, [pc, #40]	; (801a1cc <tcp_write+0x2fc>)
 801a1a4:	4803      	ldr	r0, [pc, #12]	; (801a1b4 <tcp_write+0x2e4>)
 801a1a6:	f005 f9fb 	bl	801f5a0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801a1aa:	e0ce      	b.n	801a34a <tcp_write+0x47a>
 801a1ac:	08022c6c 	.word	0x08022c6c
 801a1b0:	08022e0c 	.word	0x08022e0c
 801a1b4:	08022cc0 	.word	0x08022cc0
 801a1b8:	08022e24 	.word	0x08022e24
 801a1bc:	08022e58 	.word	0x08022e58
 801a1c0:	08022e70 	.word	0x08022e70
 801a1c4:	08022e90 	.word	0x08022e90
 801a1c8:	08022eb0 	.word	0x08022eb0
 801a1cc:	08022edc 	.word	0x08022edc
    struct pbuf *p;
    u16_t left = len - pos;
 801a1d0:	88fa      	ldrh	r2, [r7, #6]
 801a1d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a1d6:	1ad3      	subs	r3, r2, r3
 801a1d8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801a1da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a1de:	b29b      	uxth	r3, r3
 801a1e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a1e2:	1ad3      	subs	r3, r2, r3
 801a1e4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a1e6:	8b7a      	ldrh	r2, [r7, #26]
 801a1e8:	8bbb      	ldrh	r3, [r7, #28]
 801a1ea:	4293      	cmp	r3, r2
 801a1ec:	bf28      	it	cs
 801a1ee:	4613      	movcs	r3, r2
 801a1f0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a1f2:	797b      	ldrb	r3, [r7, #5]
 801a1f4:	f003 0301 	and.w	r3, r3, #1
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d036      	beq.n	801a26a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a1fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a200:	b29a      	uxth	r2, r3
 801a202:	8b3b      	ldrh	r3, [r7, #24]
 801a204:	4413      	add	r3, r2
 801a206:	b299      	uxth	r1, r3
 801a208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	bf0c      	ite	eq
 801a20e:	2301      	moveq	r3, #1
 801a210:	2300      	movne	r3, #0
 801a212:	b2db      	uxtb	r3, r3
 801a214:	f107 0012 	add.w	r0, r7, #18
 801a218:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a21a:	9302      	str	r3, [sp, #8]
 801a21c:	797b      	ldrb	r3, [r7, #5]
 801a21e:	9301      	str	r3, [sp, #4]
 801a220:	68fb      	ldr	r3, [r7, #12]
 801a222:	9300      	str	r3, [sp, #0]
 801a224:	4603      	mov	r3, r0
 801a226:	2036      	movs	r0, #54	; 0x36
 801a228:	f7ff fd5e 	bl	8019ce8 <tcp_pbuf_prealloc>
 801a22c:	6338      	str	r0, [r7, #48]	; 0x30
 801a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a230:	2b00      	cmp	r3, #0
 801a232:	f000 8178 	beq.w	801a526 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a238:	895b      	ldrh	r3, [r3, #10]
 801a23a:	8b3a      	ldrh	r2, [r7, #24]
 801a23c:	429a      	cmp	r2, r3
 801a23e:	d906      	bls.n	801a24e <tcp_write+0x37e>
 801a240:	4b8c      	ldr	r3, [pc, #560]	; (801a474 <tcp_write+0x5a4>)
 801a242:	f240 2266 	movw	r2, #614	; 0x266
 801a246:	498c      	ldr	r1, [pc, #560]	; (801a478 <tcp_write+0x5a8>)
 801a248:	488c      	ldr	r0, [pc, #560]	; (801a47c <tcp_write+0x5ac>)
 801a24a:	f005 f9a9 	bl	801f5a0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a250:	685a      	ldr	r2, [r3, #4]
 801a252:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a256:	18d0      	adds	r0, r2, r3
 801a258:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a25c:	68ba      	ldr	r2, [r7, #8]
 801a25e:	4413      	add	r3, r2
 801a260:	8b3a      	ldrh	r2, [r7, #24]
 801a262:	4619      	mov	r1, r3
 801a264:	f005 f88c 	bl	801f380 <memcpy>
 801a268:	e02f      	b.n	801a2ca <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a26a:	8a7b      	ldrh	r3, [r7, #18]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d006      	beq.n	801a27e <tcp_write+0x3ae>
 801a270:	4b80      	ldr	r3, [pc, #512]	; (801a474 <tcp_write+0x5a4>)
 801a272:	f240 2271 	movw	r2, #625	; 0x271
 801a276:	4982      	ldr	r1, [pc, #520]	; (801a480 <tcp_write+0x5b0>)
 801a278:	4880      	ldr	r0, [pc, #512]	; (801a47c <tcp_write+0x5ac>)
 801a27a:	f005 f991 	bl	801f5a0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a27e:	8b3b      	ldrh	r3, [r7, #24]
 801a280:	2201      	movs	r2, #1
 801a282:	4619      	mov	r1, r3
 801a284:	2036      	movs	r0, #54	; 0x36
 801a286:	f7fa fc57 	bl	8014b38 <pbuf_alloc>
 801a28a:	6178      	str	r0, [r7, #20]
 801a28c:	697b      	ldr	r3, [r7, #20]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	f000 814b 	beq.w	801a52a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a294:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a298:	68ba      	ldr	r2, [r7, #8]
 801a29a:	441a      	add	r2, r3
 801a29c:	697b      	ldr	r3, [r7, #20]
 801a29e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a2a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a2a4:	b29b      	uxth	r3, r3
 801a2a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a2aa:	4619      	mov	r1, r3
 801a2ac:	2036      	movs	r0, #54	; 0x36
 801a2ae:	f7fa fc43 	bl	8014b38 <pbuf_alloc>
 801a2b2:	6338      	str	r0, [r7, #48]	; 0x30
 801a2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d103      	bne.n	801a2c2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801a2ba:	6978      	ldr	r0, [r7, #20]
 801a2bc:	f7fa ff20 	bl	8015100 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801a2c0:	e136      	b.n	801a530 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801a2c2:	6979      	ldr	r1, [r7, #20]
 801a2c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a2c6:	f7fa ffe9 	bl	801529c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801a2ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a2cc:	f7fa ffa6 	bl	801521c <pbuf_clen>
 801a2d0:	4603      	mov	r3, r0
 801a2d2:	461a      	mov	r2, r3
 801a2d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a2d8:	4413      	add	r3, r2
 801a2da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a2de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a2e2:	2b09      	cmp	r3, #9
 801a2e4:	d903      	bls.n	801a2ee <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801a2e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a2e8:	f7fa ff0a 	bl	8015100 <pbuf_free>
      goto memerr;
 801a2ec:	e120      	b.n	801a530 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a2f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a2f6:	441a      	add	r2, r3
 801a2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2fc:	9300      	str	r3, [sp, #0]
 801a2fe:	4613      	mov	r3, r2
 801a300:	2200      	movs	r2, #0
 801a302:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a304:	68f8      	ldr	r0, [r7, #12]
 801a306:	f7ff fc51 	bl	8019bac <tcp_create_segment>
 801a30a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a30c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a30e:	2b00      	cmp	r3, #0
 801a310:	f000 810d 	beq.w	801a52e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801a314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a316:	2b00      	cmp	r3, #0
 801a318:	d102      	bne.n	801a320 <tcp_write+0x450>
      queue = seg;
 801a31a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a31c:	647b      	str	r3, [r7, #68]	; 0x44
 801a31e:	e00c      	b.n	801a33a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a322:	2b00      	cmp	r3, #0
 801a324:	d106      	bne.n	801a334 <tcp_write+0x464>
 801a326:	4b53      	ldr	r3, [pc, #332]	; (801a474 <tcp_write+0x5a4>)
 801a328:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a32c:	4955      	ldr	r1, [pc, #340]	; (801a484 <tcp_write+0x5b4>)
 801a32e:	4853      	ldr	r0, [pc, #332]	; (801a47c <tcp_write+0x5ac>)
 801a330:	f005 f936 	bl	801f5a0 <iprintf>
      prev_seg->next = seg;
 801a334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a336:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a338:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801a33a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a33c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801a33e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a342:	8b3b      	ldrh	r3, [r7, #24]
 801a344:	4413      	add	r3, r2
 801a346:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801a34a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a34e:	88fb      	ldrh	r3, [r7, #6]
 801a350:	429a      	cmp	r2, r3
 801a352:	f4ff af3d 	bcc.w	801a1d0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801a356:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a358:	2b00      	cmp	r3, #0
 801a35a:	d02c      	beq.n	801a3b6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801a35c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a35e:	685b      	ldr	r3, [r3, #4]
 801a360:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a362:	e01e      	b.n	801a3a2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a366:	891a      	ldrh	r2, [r3, #8]
 801a368:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a36a:	4413      	add	r3, r2
 801a36c:	b29a      	uxth	r2, r3
 801a36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a370:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801a372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	2b00      	cmp	r3, #0
 801a378:	d110      	bne.n	801a39c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a37c:	685b      	ldr	r3, [r3, #4]
 801a37e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a380:	8952      	ldrh	r2, [r2, #10]
 801a382:	4413      	add	r3, r2
 801a384:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a386:	68b9      	ldr	r1, [r7, #8]
 801a388:	4618      	mov	r0, r3
 801a38a:	f004 fff9 	bl	801f380 <memcpy>
        p->len += oversize_used;
 801a38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a390:	895a      	ldrh	r2, [r3, #10]
 801a392:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a394:	4413      	add	r3, r2
 801a396:	b29a      	uxth	r2, r3
 801a398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a39a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d1dd      	bne.n	801a364 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801a3a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3aa:	891a      	ldrh	r2, [r3, #8]
 801a3ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a3ae:	4413      	add	r3, r2
 801a3b0:	b29a      	uxth	r2, r3
 801a3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3b4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801a3b6:	8a7a      	ldrh	r2, [r7, #18]
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801a3be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d018      	beq.n	801a3f6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a3c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d106      	bne.n	801a3d8 <tcp_write+0x508>
 801a3ca:	4b2a      	ldr	r3, [pc, #168]	; (801a474 <tcp_write+0x5a4>)
 801a3cc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801a3d0:	492d      	ldr	r1, [pc, #180]	; (801a488 <tcp_write+0x5b8>)
 801a3d2:	482a      	ldr	r0, [pc, #168]	; (801a47c <tcp_write+0x5ac>)
 801a3d4:	f005 f8e4 	bl	801f5a0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801a3d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3da:	685b      	ldr	r3, [r3, #4]
 801a3dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a3de:	4618      	mov	r0, r3
 801a3e0:	f7fa ff5c 	bl	801529c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801a3e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3e6:	891a      	ldrh	r2, [r3, #8]
 801a3e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3ea:	891b      	ldrh	r3, [r3, #8]
 801a3ec:	4413      	add	r3, r2
 801a3ee:	b29a      	uxth	r2, r3
 801a3f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3f2:	811a      	strh	r2, [r3, #8]
 801a3f4:	e037      	b.n	801a466 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801a3f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d034      	beq.n	801a466 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a3fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d003      	beq.n	801a40a <tcp_write+0x53a>
 801a402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a404:	685b      	ldr	r3, [r3, #4]
 801a406:	2b00      	cmp	r3, #0
 801a408:	d106      	bne.n	801a418 <tcp_write+0x548>
 801a40a:	4b1a      	ldr	r3, [pc, #104]	; (801a474 <tcp_write+0x5a4>)
 801a40c:	f240 22e6 	movw	r2, #742	; 0x2e6
 801a410:	491e      	ldr	r1, [pc, #120]	; (801a48c <tcp_write+0x5bc>)
 801a412:	481a      	ldr	r0, [pc, #104]	; (801a47c <tcp_write+0x5ac>)
 801a414:	f005 f8c4 	bl	801f5a0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a41a:	685b      	ldr	r3, [r3, #4]
 801a41c:	62bb      	str	r3, [r7, #40]	; 0x28
 801a41e:	e009      	b.n	801a434 <tcp_write+0x564>
      p->tot_len += extendlen;
 801a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a422:	891a      	ldrh	r2, [r3, #8]
 801a424:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a426:	4413      	add	r3, r2
 801a428:	b29a      	uxth	r2, r3
 801a42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a42c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	62bb      	str	r3, [r7, #40]	; 0x28
 801a434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d1f1      	bne.n	801a420 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a43e:	891a      	ldrh	r2, [r3, #8]
 801a440:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a442:	4413      	add	r3, r2
 801a444:	b29a      	uxth	r2, r3
 801a446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a448:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801a44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a44c:	895a      	ldrh	r2, [r3, #10]
 801a44e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a450:	4413      	add	r3, r2
 801a452:	b29a      	uxth	r2, r3
 801a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a456:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801a458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a45a:	891a      	ldrh	r2, [r3, #8]
 801a45c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a45e:	4413      	add	r3, r2
 801a460:	b29a      	uxth	r2, r3
 801a462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a464:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801a466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d111      	bne.n	801a490 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a470:	66da      	str	r2, [r3, #108]	; 0x6c
 801a472:	e010      	b.n	801a496 <tcp_write+0x5c6>
 801a474:	08022c6c 	.word	0x08022c6c
 801a478:	08022f0c 	.word	0x08022f0c
 801a47c:	08022cc0 	.word	0x08022cc0
 801a480:	08022f4c 	.word	0x08022f4c
 801a484:	08022f5c 	.word	0x08022f5c
 801a488:	08022f70 	.word	0x08022f70
 801a48c:	08022fa8 	.word	0x08022fa8
  } else {
    last_unsent->next = queue;
 801a490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a494:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a49a:	88fb      	ldrh	r3, [r7, #6]
 801a49c:	441a      	add	r2, r3
 801a49e:	68fb      	ldr	r3, [r7, #12]
 801a4a0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801a4a2:	68fb      	ldr	r3, [r7, #12]
 801a4a4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801a4a8:	88fb      	ldrh	r3, [r7, #6]
 801a4aa:	1ad3      	subs	r3, r2, r3
 801a4ac:	b29a      	uxth	r2, r3
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a4ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a4be:	68fb      	ldr	r3, [r7, #12]
 801a4c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d00e      	beq.n	801a4e6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d10a      	bne.n	801a4e6 <tcp_write+0x616>
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d106      	bne.n	801a4e6 <tcp_write+0x616>
 801a4d8:	4b2c      	ldr	r3, [pc, #176]	; (801a58c <tcp_write+0x6bc>)
 801a4da:	f240 3212 	movw	r2, #786	; 0x312
 801a4de:	492c      	ldr	r1, [pc, #176]	; (801a590 <tcp_write+0x6c0>)
 801a4e0:	482c      	ldr	r0, [pc, #176]	; (801a594 <tcp_write+0x6c4>)
 801a4e2:	f005 f85d 	bl	801f5a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801a4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d016      	beq.n	801a51a <tcp_write+0x64a>
 801a4ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4ee:	68db      	ldr	r3, [r3, #12]
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d012      	beq.n	801a51a <tcp_write+0x64a>
 801a4f4:	797b      	ldrb	r3, [r7, #5]
 801a4f6:	f003 0302 	and.w	r3, r3, #2
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d10d      	bne.n	801a51a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a4fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a500:	68db      	ldr	r3, [r3, #12]
 801a502:	899b      	ldrh	r3, [r3, #12]
 801a504:	b29c      	uxth	r4, r3
 801a506:	2008      	movs	r0, #8
 801a508:	f7f9 fa08 	bl	801391c <lwip_htons>
 801a50c:	4603      	mov	r3, r0
 801a50e:	461a      	mov	r2, r3
 801a510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a512:	68db      	ldr	r3, [r3, #12]
 801a514:	4322      	orrs	r2, r4
 801a516:	b292      	uxth	r2, r2
 801a518:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801a51a:	2300      	movs	r3, #0
 801a51c:	e031      	b.n	801a582 <tcp_write+0x6b2>
          goto memerr;
 801a51e:	bf00      	nop
 801a520:	e006      	b.n	801a530 <tcp_write+0x660>
            goto memerr;
 801a522:	bf00      	nop
 801a524:	e004      	b.n	801a530 <tcp_write+0x660>
        goto memerr;
 801a526:	bf00      	nop
 801a528:	e002      	b.n	801a530 <tcp_write+0x660>
        goto memerr;
 801a52a:	bf00      	nop
 801a52c:	e000      	b.n	801a530 <tcp_write+0x660>
      goto memerr;
 801a52e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a530:	68fb      	ldr	r3, [r7, #12]
 801a532:	8b5b      	ldrh	r3, [r3, #26]
 801a534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a538:	b29a      	uxth	r2, r3
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801a53e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a540:	2b00      	cmp	r3, #0
 801a542:	d002      	beq.n	801a54a <tcp_write+0x67a>
    pbuf_free(concat_p);
 801a544:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a546:	f7fa fddb 	bl	8015100 <pbuf_free>
  }
  if (queue != NULL) {
 801a54a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d002      	beq.n	801a556 <tcp_write+0x686>
    tcp_segs_free(queue);
 801a550:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a552:	f7fc fb6b 	bl	8016c2c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d00e      	beq.n	801a57e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a564:	2b00      	cmp	r3, #0
 801a566:	d10a      	bne.n	801a57e <tcp_write+0x6ae>
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d106      	bne.n	801a57e <tcp_write+0x6ae>
 801a570:	4b06      	ldr	r3, [pc, #24]	; (801a58c <tcp_write+0x6bc>)
 801a572:	f240 3227 	movw	r2, #807	; 0x327
 801a576:	4906      	ldr	r1, [pc, #24]	; (801a590 <tcp_write+0x6c0>)
 801a578:	4806      	ldr	r0, [pc, #24]	; (801a594 <tcp_write+0x6c4>)
 801a57a:	f005 f811 	bl	801f5a0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801a57e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a582:	4618      	mov	r0, r3
 801a584:	375c      	adds	r7, #92	; 0x5c
 801a586:	46bd      	mov	sp, r7
 801a588:	bd90      	pop	{r4, r7, pc}
 801a58a:	bf00      	nop
 801a58c:	08022c6c 	.word	0x08022c6c
 801a590:	08022fe0 	.word	0x08022fe0
 801a594:	08022cc0 	.word	0x08022cc0

0801a598 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a598:	b590      	push	{r4, r7, lr}
 801a59a:	b08b      	sub	sp, #44	; 0x2c
 801a59c:	af02      	add	r7, sp, #8
 801a59e:	6078      	str	r0, [r7, #4]
 801a5a0:	460b      	mov	r3, r1
 801a5a2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	61fb      	str	r3, [r7, #28]
 801a5a8:	2300      	movs	r3, #0
 801a5aa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a5ac:	2300      	movs	r3, #0
 801a5ae:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d106      	bne.n	801a5c4 <tcp_split_unsent_seg+0x2c>
 801a5b6:	4b95      	ldr	r3, [pc, #596]	; (801a80c <tcp_split_unsent_seg+0x274>)
 801a5b8:	f240 324b 	movw	r2, #843	; 0x34b
 801a5bc:	4994      	ldr	r1, [pc, #592]	; (801a810 <tcp_split_unsent_seg+0x278>)
 801a5be:	4895      	ldr	r0, [pc, #596]	; (801a814 <tcp_split_unsent_seg+0x27c>)
 801a5c0:	f004 ffee 	bl	801f5a0 <iprintf>

  useg = pcb->unsent;
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a5c8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a5ca:	697b      	ldr	r3, [r7, #20]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d102      	bne.n	801a5d6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a5d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a5d4:	e116      	b.n	801a804 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801a5d6:	887b      	ldrh	r3, [r7, #2]
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d109      	bne.n	801a5f0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a5dc:	4b8b      	ldr	r3, [pc, #556]	; (801a80c <tcp_split_unsent_seg+0x274>)
 801a5de:	f240 3253 	movw	r2, #851	; 0x353
 801a5e2:	498d      	ldr	r1, [pc, #564]	; (801a818 <tcp_split_unsent_seg+0x280>)
 801a5e4:	488b      	ldr	r0, [pc, #556]	; (801a814 <tcp_split_unsent_seg+0x27c>)
 801a5e6:	f004 ffdb 	bl	801f5a0 <iprintf>
    return ERR_VAL;
 801a5ea:	f06f 0305 	mvn.w	r3, #5
 801a5ee:	e109      	b.n	801a804 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801a5f0:	697b      	ldr	r3, [r7, #20]
 801a5f2:	891b      	ldrh	r3, [r3, #8]
 801a5f4:	887a      	ldrh	r2, [r7, #2]
 801a5f6:	429a      	cmp	r2, r3
 801a5f8:	d301      	bcc.n	801a5fe <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a5fa:	2300      	movs	r3, #0
 801a5fc:	e102      	b.n	801a804 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a602:	887a      	ldrh	r2, [r7, #2]
 801a604:	429a      	cmp	r2, r3
 801a606:	d906      	bls.n	801a616 <tcp_split_unsent_seg+0x7e>
 801a608:	4b80      	ldr	r3, [pc, #512]	; (801a80c <tcp_split_unsent_seg+0x274>)
 801a60a:	f240 325b 	movw	r2, #859	; 0x35b
 801a60e:	4983      	ldr	r1, [pc, #524]	; (801a81c <tcp_split_unsent_seg+0x284>)
 801a610:	4880      	ldr	r0, [pc, #512]	; (801a814 <tcp_split_unsent_seg+0x27c>)
 801a612:	f004 ffc5 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a616:	697b      	ldr	r3, [r7, #20]
 801a618:	891b      	ldrh	r3, [r3, #8]
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d106      	bne.n	801a62c <tcp_split_unsent_seg+0x94>
 801a61e:	4b7b      	ldr	r3, [pc, #492]	; (801a80c <tcp_split_unsent_seg+0x274>)
 801a620:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801a624:	497e      	ldr	r1, [pc, #504]	; (801a820 <tcp_split_unsent_seg+0x288>)
 801a626:	487b      	ldr	r0, [pc, #492]	; (801a814 <tcp_split_unsent_seg+0x27c>)
 801a628:	f004 ffba 	bl	801f5a0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a62c:	697b      	ldr	r3, [r7, #20]
 801a62e:	7a9b      	ldrb	r3, [r3, #10]
 801a630:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a632:	7bfb      	ldrb	r3, [r7, #15]
 801a634:	009b      	lsls	r3, r3, #2
 801a636:	b2db      	uxtb	r3, r3
 801a638:	f003 0304 	and.w	r3, r3, #4
 801a63c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a63e:	697b      	ldr	r3, [r7, #20]
 801a640:	891a      	ldrh	r2, [r3, #8]
 801a642:	887b      	ldrh	r3, [r7, #2]
 801a644:	1ad3      	subs	r3, r2, r3
 801a646:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a648:	7bbb      	ldrb	r3, [r7, #14]
 801a64a:	b29a      	uxth	r2, r3
 801a64c:	89bb      	ldrh	r3, [r7, #12]
 801a64e:	4413      	add	r3, r2
 801a650:	b29b      	uxth	r3, r3
 801a652:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a656:	4619      	mov	r1, r3
 801a658:	2036      	movs	r0, #54	; 0x36
 801a65a:	f7fa fa6d 	bl	8014b38 <pbuf_alloc>
 801a65e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a660:	693b      	ldr	r3, [r7, #16]
 801a662:	2b00      	cmp	r3, #0
 801a664:	f000 80b7 	beq.w	801a7d6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a668:	697b      	ldr	r3, [r7, #20]
 801a66a:	685b      	ldr	r3, [r3, #4]
 801a66c:	891a      	ldrh	r2, [r3, #8]
 801a66e:	697b      	ldr	r3, [r7, #20]
 801a670:	891b      	ldrh	r3, [r3, #8]
 801a672:	1ad3      	subs	r3, r2, r3
 801a674:	b29a      	uxth	r2, r3
 801a676:	887b      	ldrh	r3, [r7, #2]
 801a678:	4413      	add	r3, r2
 801a67a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a67c:	697b      	ldr	r3, [r7, #20]
 801a67e:	6858      	ldr	r0, [r3, #4]
 801a680:	693b      	ldr	r3, [r7, #16]
 801a682:	685a      	ldr	r2, [r3, #4]
 801a684:	7bbb      	ldrb	r3, [r7, #14]
 801a686:	18d1      	adds	r1, r2, r3
 801a688:	897b      	ldrh	r3, [r7, #10]
 801a68a:	89ba      	ldrh	r2, [r7, #12]
 801a68c:	f7fa ff3e 	bl	801550c <pbuf_copy_partial>
 801a690:	4603      	mov	r3, r0
 801a692:	461a      	mov	r2, r3
 801a694:	89bb      	ldrh	r3, [r7, #12]
 801a696:	4293      	cmp	r3, r2
 801a698:	f040 809f 	bne.w	801a7da <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a69c:	697b      	ldr	r3, [r7, #20]
 801a69e:	68db      	ldr	r3, [r3, #12]
 801a6a0:	899b      	ldrh	r3, [r3, #12]
 801a6a2:	b29b      	uxth	r3, r3
 801a6a4:	4618      	mov	r0, r3
 801a6a6:	f7f9 f939 	bl	801391c <lwip_htons>
 801a6aa:	4603      	mov	r3, r0
 801a6ac:	b2db      	uxtb	r3, r3
 801a6ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a6b2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801a6b8:	7efb      	ldrb	r3, [r7, #27]
 801a6ba:	f003 0308 	and.w	r3, r3, #8
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d007      	beq.n	801a6d2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a6c2:	7efb      	ldrb	r3, [r7, #27]
 801a6c4:	f023 0308 	bic.w	r3, r3, #8
 801a6c8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801a6ca:	7ebb      	ldrb	r3, [r7, #26]
 801a6cc:	f043 0308 	orr.w	r3, r3, #8
 801a6d0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801a6d2:	7efb      	ldrb	r3, [r7, #27]
 801a6d4:	f003 0301 	and.w	r3, r3, #1
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d007      	beq.n	801a6ec <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a6dc:	7efb      	ldrb	r3, [r7, #27]
 801a6de:	f023 0301 	bic.w	r3, r3, #1
 801a6e2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801a6e4:	7ebb      	ldrb	r3, [r7, #26]
 801a6e6:	f043 0301 	orr.w	r3, r3, #1
 801a6ea:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a6ec:	697b      	ldr	r3, [r7, #20]
 801a6ee:	68db      	ldr	r3, [r3, #12]
 801a6f0:	685b      	ldr	r3, [r3, #4]
 801a6f2:	4618      	mov	r0, r3
 801a6f4:	f7f9 f927 	bl	8013946 <lwip_htonl>
 801a6f8:	4602      	mov	r2, r0
 801a6fa:	887b      	ldrh	r3, [r7, #2]
 801a6fc:	18d1      	adds	r1, r2, r3
 801a6fe:	7eba      	ldrb	r2, [r7, #26]
 801a700:	7bfb      	ldrb	r3, [r7, #15]
 801a702:	9300      	str	r3, [sp, #0]
 801a704:	460b      	mov	r3, r1
 801a706:	6939      	ldr	r1, [r7, #16]
 801a708:	6878      	ldr	r0, [r7, #4]
 801a70a:	f7ff fa4f 	bl	8019bac <tcp_create_segment>
 801a70e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801a710:	69fb      	ldr	r3, [r7, #28]
 801a712:	2b00      	cmp	r3, #0
 801a714:	d063      	beq.n	801a7de <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a716:	697b      	ldr	r3, [r7, #20]
 801a718:	685b      	ldr	r3, [r3, #4]
 801a71a:	4618      	mov	r0, r3
 801a71c:	f7fa fd7e 	bl	801521c <pbuf_clen>
 801a720:	4603      	mov	r3, r0
 801a722:	461a      	mov	r2, r3
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a72a:	1a9b      	subs	r3, r3, r2
 801a72c:	b29a      	uxth	r2, r3
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a734:	697b      	ldr	r3, [r7, #20]
 801a736:	6858      	ldr	r0, [r3, #4]
 801a738:	697b      	ldr	r3, [r7, #20]
 801a73a:	685b      	ldr	r3, [r3, #4]
 801a73c:	891a      	ldrh	r2, [r3, #8]
 801a73e:	89bb      	ldrh	r3, [r7, #12]
 801a740:	1ad3      	subs	r3, r2, r3
 801a742:	b29b      	uxth	r3, r3
 801a744:	4619      	mov	r1, r3
 801a746:	f7fa fb55 	bl	8014df4 <pbuf_realloc>
  useg->len -= remainder;
 801a74a:	697b      	ldr	r3, [r7, #20]
 801a74c:	891a      	ldrh	r2, [r3, #8]
 801a74e:	89bb      	ldrh	r3, [r7, #12]
 801a750:	1ad3      	subs	r3, r2, r3
 801a752:	b29a      	uxth	r2, r3
 801a754:	697b      	ldr	r3, [r7, #20]
 801a756:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a758:	697b      	ldr	r3, [r7, #20]
 801a75a:	68db      	ldr	r3, [r3, #12]
 801a75c:	899b      	ldrh	r3, [r3, #12]
 801a75e:	b29c      	uxth	r4, r3
 801a760:	7efb      	ldrb	r3, [r7, #27]
 801a762:	b29b      	uxth	r3, r3
 801a764:	4618      	mov	r0, r3
 801a766:	f7f9 f8d9 	bl	801391c <lwip_htons>
 801a76a:	4603      	mov	r3, r0
 801a76c:	461a      	mov	r2, r3
 801a76e:	697b      	ldr	r3, [r7, #20]
 801a770:	68db      	ldr	r3, [r3, #12]
 801a772:	4322      	orrs	r2, r4
 801a774:	b292      	uxth	r2, r2
 801a776:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a778:	697b      	ldr	r3, [r7, #20]
 801a77a:	685b      	ldr	r3, [r3, #4]
 801a77c:	4618      	mov	r0, r3
 801a77e:	f7fa fd4d 	bl	801521c <pbuf_clen>
 801a782:	4603      	mov	r3, r0
 801a784:	461a      	mov	r2, r3
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a78c:	4413      	add	r3, r2
 801a78e:	b29a      	uxth	r2, r3
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a796:	69fb      	ldr	r3, [r7, #28]
 801a798:	685b      	ldr	r3, [r3, #4]
 801a79a:	4618      	mov	r0, r3
 801a79c:	f7fa fd3e 	bl	801521c <pbuf_clen>
 801a7a0:	4603      	mov	r3, r0
 801a7a2:	461a      	mov	r2, r3
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a7aa:	4413      	add	r3, r2
 801a7ac:	b29a      	uxth	r2, r3
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a7b4:	697b      	ldr	r3, [r7, #20]
 801a7b6:	681a      	ldr	r2, [r3, #0]
 801a7b8:	69fb      	ldr	r3, [r7, #28]
 801a7ba:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a7bc:	697b      	ldr	r3, [r7, #20]
 801a7be:	69fa      	ldr	r2, [r7, #28]
 801a7c0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a7c2:	69fb      	ldr	r3, [r7, #28]
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d103      	bne.n	801a7d2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	2200      	movs	r2, #0
 801a7ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a7d2:	2300      	movs	r3, #0
 801a7d4:	e016      	b.n	801a804 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801a7d6:	bf00      	nop
 801a7d8:	e002      	b.n	801a7e0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a7da:	bf00      	nop
 801a7dc:	e000      	b.n	801a7e0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a7de:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a7e0:	69fb      	ldr	r3, [r7, #28]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d006      	beq.n	801a7f4 <tcp_split_unsent_seg+0x25c>
 801a7e6:	4b09      	ldr	r3, [pc, #36]	; (801a80c <tcp_split_unsent_seg+0x274>)
 801a7e8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801a7ec:	490d      	ldr	r1, [pc, #52]	; (801a824 <tcp_split_unsent_seg+0x28c>)
 801a7ee:	4809      	ldr	r0, [pc, #36]	; (801a814 <tcp_split_unsent_seg+0x27c>)
 801a7f0:	f004 fed6 	bl	801f5a0 <iprintf>
  if (p != NULL) {
 801a7f4:	693b      	ldr	r3, [r7, #16]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d002      	beq.n	801a800 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801a7fa:	6938      	ldr	r0, [r7, #16]
 801a7fc:	f7fa fc80 	bl	8015100 <pbuf_free>
  }

  return ERR_MEM;
 801a800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a804:	4618      	mov	r0, r3
 801a806:	3724      	adds	r7, #36	; 0x24
 801a808:	46bd      	mov	sp, r7
 801a80a:	bd90      	pop	{r4, r7, pc}
 801a80c:	08022c6c 	.word	0x08022c6c
 801a810:	08023000 	.word	0x08023000
 801a814:	08022cc0 	.word	0x08022cc0
 801a818:	08023024 	.word	0x08023024
 801a81c:	08023048 	.word	0x08023048
 801a820:	08023058 	.word	0x08023058
 801a824:	08023068 	.word	0x08023068

0801a828 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a828:	b590      	push	{r4, r7, lr}
 801a82a:	b085      	sub	sp, #20
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	2b00      	cmp	r3, #0
 801a834:	d106      	bne.n	801a844 <tcp_send_fin+0x1c>
 801a836:	4b21      	ldr	r3, [pc, #132]	; (801a8bc <tcp_send_fin+0x94>)
 801a838:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801a83c:	4920      	ldr	r1, [pc, #128]	; (801a8c0 <tcp_send_fin+0x98>)
 801a83e:	4821      	ldr	r0, [pc, #132]	; (801a8c4 <tcp_send_fin+0x9c>)
 801a840:	f004 feae 	bl	801f5a0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d02e      	beq.n	801a8aa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a850:	60fb      	str	r3, [r7, #12]
 801a852:	e002      	b.n	801a85a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d1f8      	bne.n	801a854 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	68db      	ldr	r3, [r3, #12]
 801a866:	899b      	ldrh	r3, [r3, #12]
 801a868:	b29b      	uxth	r3, r3
 801a86a:	4618      	mov	r0, r3
 801a86c:	f7f9 f856 	bl	801391c <lwip_htons>
 801a870:	4603      	mov	r3, r0
 801a872:	b2db      	uxtb	r3, r3
 801a874:	f003 0307 	and.w	r3, r3, #7
 801a878:	2b00      	cmp	r3, #0
 801a87a:	d116      	bne.n	801a8aa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	68db      	ldr	r3, [r3, #12]
 801a880:	899b      	ldrh	r3, [r3, #12]
 801a882:	b29c      	uxth	r4, r3
 801a884:	2001      	movs	r0, #1
 801a886:	f7f9 f849 	bl	801391c <lwip_htons>
 801a88a:	4603      	mov	r3, r0
 801a88c:	461a      	mov	r2, r3
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	68db      	ldr	r3, [r3, #12]
 801a892:	4322      	orrs	r2, r4
 801a894:	b292      	uxth	r2, r2
 801a896:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	8b5b      	ldrh	r3, [r3, #26]
 801a89c:	f043 0320 	orr.w	r3, r3, #32
 801a8a0:	b29a      	uxth	r2, r3
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a8a6:	2300      	movs	r3, #0
 801a8a8:	e004      	b.n	801a8b4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a8aa:	2101      	movs	r1, #1
 801a8ac:	6878      	ldr	r0, [r7, #4]
 801a8ae:	f000 f80b 	bl	801a8c8 <tcp_enqueue_flags>
 801a8b2:	4603      	mov	r3, r0
}
 801a8b4:	4618      	mov	r0, r3
 801a8b6:	3714      	adds	r7, #20
 801a8b8:	46bd      	mov	sp, r7
 801a8ba:	bd90      	pop	{r4, r7, pc}
 801a8bc:	08022c6c 	.word	0x08022c6c
 801a8c0:	08023074 	.word	0x08023074
 801a8c4:	08022cc0 	.word	0x08022cc0

0801a8c8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a8c8:	b580      	push	{r7, lr}
 801a8ca:	b08a      	sub	sp, #40	; 0x28
 801a8cc:	af02      	add	r7, sp, #8
 801a8ce:	6078      	str	r0, [r7, #4]
 801a8d0:	460b      	mov	r3, r1
 801a8d2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801a8d8:	2300      	movs	r3, #0
 801a8da:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a8dc:	78fb      	ldrb	r3, [r7, #3]
 801a8de:	f003 0303 	and.w	r3, r3, #3
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d106      	bne.n	801a8f4 <tcp_enqueue_flags+0x2c>
 801a8e6:	4b67      	ldr	r3, [pc, #412]	; (801aa84 <tcp_enqueue_flags+0x1bc>)
 801a8e8:	f240 4211 	movw	r2, #1041	; 0x411
 801a8ec:	4966      	ldr	r1, [pc, #408]	; (801aa88 <tcp_enqueue_flags+0x1c0>)
 801a8ee:	4867      	ldr	r0, [pc, #412]	; (801aa8c <tcp_enqueue_flags+0x1c4>)
 801a8f0:	f004 fe56 	bl	801f5a0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d106      	bne.n	801a908 <tcp_enqueue_flags+0x40>
 801a8fa:	4b62      	ldr	r3, [pc, #392]	; (801aa84 <tcp_enqueue_flags+0x1bc>)
 801a8fc:	f240 4213 	movw	r2, #1043	; 0x413
 801a900:	4963      	ldr	r1, [pc, #396]	; (801aa90 <tcp_enqueue_flags+0x1c8>)
 801a902:	4862      	ldr	r0, [pc, #392]	; (801aa8c <tcp_enqueue_flags+0x1c4>)
 801a904:	f004 fe4c 	bl	801f5a0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a908:	78fb      	ldrb	r3, [r7, #3]
 801a90a:	f003 0302 	and.w	r3, r3, #2
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d001      	beq.n	801a916 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a912:	2301      	movs	r3, #1
 801a914:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a916:	7ffb      	ldrb	r3, [r7, #31]
 801a918:	009b      	lsls	r3, r3, #2
 801a91a:	b2db      	uxtb	r3, r3
 801a91c:	f003 0304 	and.w	r3, r3, #4
 801a920:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a922:	7dfb      	ldrb	r3, [r7, #23]
 801a924:	b29b      	uxth	r3, r3
 801a926:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a92a:	4619      	mov	r1, r3
 801a92c:	2036      	movs	r0, #54	; 0x36
 801a92e:	f7fa f903 	bl	8014b38 <pbuf_alloc>
 801a932:	6138      	str	r0, [r7, #16]
 801a934:	693b      	ldr	r3, [r7, #16]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d109      	bne.n	801a94e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	8b5b      	ldrh	r3, [r3, #26]
 801a93e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a942:	b29a      	uxth	r2, r3
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a94c:	e095      	b.n	801aa7a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a94e:	693b      	ldr	r3, [r7, #16]
 801a950:	895a      	ldrh	r2, [r3, #10]
 801a952:	7dfb      	ldrb	r3, [r7, #23]
 801a954:	b29b      	uxth	r3, r3
 801a956:	429a      	cmp	r2, r3
 801a958:	d206      	bcs.n	801a968 <tcp_enqueue_flags+0xa0>
 801a95a:	4b4a      	ldr	r3, [pc, #296]	; (801aa84 <tcp_enqueue_flags+0x1bc>)
 801a95c:	f240 4239 	movw	r2, #1081	; 0x439
 801a960:	494c      	ldr	r1, [pc, #304]	; (801aa94 <tcp_enqueue_flags+0x1cc>)
 801a962:	484a      	ldr	r0, [pc, #296]	; (801aa8c <tcp_enqueue_flags+0x1c4>)
 801a964:	f004 fe1c 	bl	801f5a0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801a96c:	78fa      	ldrb	r2, [r7, #3]
 801a96e:	7ffb      	ldrb	r3, [r7, #31]
 801a970:	9300      	str	r3, [sp, #0]
 801a972:	460b      	mov	r3, r1
 801a974:	6939      	ldr	r1, [r7, #16]
 801a976:	6878      	ldr	r0, [r7, #4]
 801a978:	f7ff f918 	bl	8019bac <tcp_create_segment>
 801a97c:	60f8      	str	r0, [r7, #12]
 801a97e:	68fb      	ldr	r3, [r7, #12]
 801a980:	2b00      	cmp	r3, #0
 801a982:	d109      	bne.n	801a998 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	8b5b      	ldrh	r3, [r3, #26]
 801a988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a98c:	b29a      	uxth	r2, r3
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a996:	e070      	b.n	801aa7a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a998:	68fb      	ldr	r3, [r7, #12]
 801a99a:	68db      	ldr	r3, [r3, #12]
 801a99c:	f003 0303 	and.w	r3, r3, #3
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d006      	beq.n	801a9b2 <tcp_enqueue_flags+0xea>
 801a9a4:	4b37      	ldr	r3, [pc, #220]	; (801aa84 <tcp_enqueue_flags+0x1bc>)
 801a9a6:	f240 4242 	movw	r2, #1090	; 0x442
 801a9aa:	493b      	ldr	r1, [pc, #236]	; (801aa98 <tcp_enqueue_flags+0x1d0>)
 801a9ac:	4837      	ldr	r0, [pc, #220]	; (801aa8c <tcp_enqueue_flags+0x1c4>)
 801a9ae:	f004 fdf7 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a9b2:	68fb      	ldr	r3, [r7, #12]
 801a9b4:	891b      	ldrh	r3, [r3, #8]
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d006      	beq.n	801a9c8 <tcp_enqueue_flags+0x100>
 801a9ba:	4b32      	ldr	r3, [pc, #200]	; (801aa84 <tcp_enqueue_flags+0x1bc>)
 801a9bc:	f240 4243 	movw	r2, #1091	; 0x443
 801a9c0:	4936      	ldr	r1, [pc, #216]	; (801aa9c <tcp_enqueue_flags+0x1d4>)
 801a9c2:	4832      	ldr	r0, [pc, #200]	; (801aa8c <tcp_enqueue_flags+0x1c4>)
 801a9c4:	f004 fdec 	bl	801f5a0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d103      	bne.n	801a9d8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	68fa      	ldr	r2, [r7, #12]
 801a9d4:	66da      	str	r2, [r3, #108]	; 0x6c
 801a9d6:	e00d      	b.n	801a9f4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9dc:	61bb      	str	r3, [r7, #24]
 801a9de:	e002      	b.n	801a9e6 <tcp_enqueue_flags+0x11e>
 801a9e0:	69bb      	ldr	r3, [r7, #24]
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	61bb      	str	r3, [r7, #24]
 801a9e6:	69bb      	ldr	r3, [r7, #24]
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d1f8      	bne.n	801a9e0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801a9ee:	69bb      	ldr	r3, [r7, #24]
 801a9f0:	68fa      	ldr	r2, [r7, #12]
 801a9f2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	2200      	movs	r2, #0
 801a9f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a9fc:	78fb      	ldrb	r3, [r7, #3]
 801a9fe:	f003 0302 	and.w	r3, r3, #2
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d104      	bne.n	801aa10 <tcp_enqueue_flags+0x148>
 801aa06:	78fb      	ldrb	r3, [r7, #3]
 801aa08:	f003 0301 	and.w	r3, r3, #1
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d004      	beq.n	801aa1a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa14:	1c5a      	adds	r2, r3, #1
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801aa1a:	78fb      	ldrb	r3, [r7, #3]
 801aa1c:	f003 0301 	and.w	r3, r3, #1
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d006      	beq.n	801aa32 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	8b5b      	ldrh	r3, [r3, #26]
 801aa28:	f043 0320 	orr.w	r3, r3, #32
 801aa2c:	b29a      	uxth	r2, r3
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	685b      	ldr	r3, [r3, #4]
 801aa36:	4618      	mov	r0, r3
 801aa38:	f7fa fbf0 	bl	801521c <pbuf_clen>
 801aa3c:	4603      	mov	r3, r0
 801aa3e:	461a      	mov	r2, r3
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aa46:	4413      	add	r3, r2
 801aa48:	b29a      	uxth	r2, r3
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d00e      	beq.n	801aa78 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	d10a      	bne.n	801aa78 <tcp_enqueue_flags+0x1b0>
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d106      	bne.n	801aa78 <tcp_enqueue_flags+0x1b0>
 801aa6a:	4b06      	ldr	r3, [pc, #24]	; (801aa84 <tcp_enqueue_flags+0x1bc>)
 801aa6c:	f240 4265 	movw	r2, #1125	; 0x465
 801aa70:	490b      	ldr	r1, [pc, #44]	; (801aaa0 <tcp_enqueue_flags+0x1d8>)
 801aa72:	4806      	ldr	r0, [pc, #24]	; (801aa8c <tcp_enqueue_flags+0x1c4>)
 801aa74:	f004 fd94 	bl	801f5a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801aa78:	2300      	movs	r3, #0
}
 801aa7a:	4618      	mov	r0, r3
 801aa7c:	3720      	adds	r7, #32
 801aa7e:	46bd      	mov	sp, r7
 801aa80:	bd80      	pop	{r7, pc}
 801aa82:	bf00      	nop
 801aa84:	08022c6c 	.word	0x08022c6c
 801aa88:	08023090 	.word	0x08023090
 801aa8c:	08022cc0 	.word	0x08022cc0
 801aa90:	080230e8 	.word	0x080230e8
 801aa94:	08023108 	.word	0x08023108
 801aa98:	08023144 	.word	0x08023144
 801aa9c:	0802315c 	.word	0x0802315c
 801aaa0:	08023188 	.word	0x08023188

0801aaa4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801aaa4:	b5b0      	push	{r4, r5, r7, lr}
 801aaa6:	b08a      	sub	sp, #40	; 0x28
 801aaa8:	af00      	add	r7, sp, #0
 801aaaa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d106      	bne.n	801aac0 <tcp_output+0x1c>
 801aab2:	4b8a      	ldr	r3, [pc, #552]	; (801acdc <tcp_output+0x238>)
 801aab4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801aab8:	4989      	ldr	r1, [pc, #548]	; (801ace0 <tcp_output+0x23c>)
 801aaba:	488a      	ldr	r0, [pc, #552]	; (801ace4 <tcp_output+0x240>)
 801aabc:	f004 fd70 	bl	801f5a0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	7d1b      	ldrb	r3, [r3, #20]
 801aac4:	2b01      	cmp	r3, #1
 801aac6:	d106      	bne.n	801aad6 <tcp_output+0x32>
 801aac8:	4b84      	ldr	r3, [pc, #528]	; (801acdc <tcp_output+0x238>)
 801aaca:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801aace:	4986      	ldr	r1, [pc, #536]	; (801ace8 <tcp_output+0x244>)
 801aad0:	4884      	ldr	r0, [pc, #528]	; (801ace4 <tcp_output+0x240>)
 801aad2:	f004 fd65 	bl	801f5a0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801aad6:	4b85      	ldr	r3, [pc, #532]	; (801acec <tcp_output+0x248>)
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	687a      	ldr	r2, [r7, #4]
 801aadc:	429a      	cmp	r2, r3
 801aade:	d101      	bne.n	801aae4 <tcp_output+0x40>
    return ERR_OK;
 801aae0:	2300      	movs	r3, #0
 801aae2:	e1ce      	b.n	801ae82 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801aaf0:	4293      	cmp	r3, r2
 801aaf2:	bf28      	it	cs
 801aaf4:	4613      	movcs	r3, r2
 801aaf6:	b29b      	uxth	r3, r3
 801aaf8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aafe:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d10b      	bne.n	801ab1e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	8b5b      	ldrh	r3, [r3, #26]
 801ab0a:	f003 0302 	and.w	r3, r3, #2
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	f000 81aa 	beq.w	801ae68 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801ab14:	6878      	ldr	r0, [r7, #4]
 801ab16:	f000 fdcb 	bl	801b6b0 <tcp_send_empty_ack>
 801ab1a:	4603      	mov	r3, r0
 801ab1c:	e1b1      	b.n	801ae82 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801ab1e:	6879      	ldr	r1, [r7, #4]
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	3304      	adds	r3, #4
 801ab24:	461a      	mov	r2, r3
 801ab26:	6878      	ldr	r0, [r7, #4]
 801ab28:	f7ff f824 	bl	8019b74 <tcp_route>
 801ab2c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801ab2e:	697b      	ldr	r3, [r7, #20]
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d102      	bne.n	801ab3a <tcp_output+0x96>
    return ERR_RTE;
 801ab34:	f06f 0303 	mvn.w	r3, #3
 801ab38:	e1a3      	b.n	801ae82 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d003      	beq.n	801ab48 <tcp_output+0xa4>
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d111      	bne.n	801ab6c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801ab48:	697b      	ldr	r3, [r7, #20]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d002      	beq.n	801ab54 <tcp_output+0xb0>
 801ab4e:	697b      	ldr	r3, [r7, #20]
 801ab50:	3304      	adds	r3, #4
 801ab52:	e000      	b.n	801ab56 <tcp_output+0xb2>
 801ab54:	2300      	movs	r3, #0
 801ab56:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801ab58:	693b      	ldr	r3, [r7, #16]
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d102      	bne.n	801ab64 <tcp_output+0xc0>
      return ERR_RTE;
 801ab5e:	f06f 0303 	mvn.w	r3, #3
 801ab62:	e18e      	b.n	801ae82 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801ab64:	693b      	ldr	r3, [r7, #16]
 801ab66:	681a      	ldr	r2, [r3, #0]
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab6e:	68db      	ldr	r3, [r3, #12]
 801ab70:	685b      	ldr	r3, [r3, #4]
 801ab72:	4618      	mov	r0, r3
 801ab74:	f7f8 fee7 	bl	8013946 <lwip_htonl>
 801ab78:	4602      	mov	r2, r0
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab7e:	1ad3      	subs	r3, r2, r3
 801ab80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab82:	8912      	ldrh	r2, [r2, #8]
 801ab84:	4413      	add	r3, r2
 801ab86:	69ba      	ldr	r2, [r7, #24]
 801ab88:	429a      	cmp	r2, r3
 801ab8a:	d227      	bcs.n	801abdc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ab92:	461a      	mov	r2, r3
 801ab94:	69bb      	ldr	r3, [r7, #24]
 801ab96:	4293      	cmp	r3, r2
 801ab98:	d114      	bne.n	801abc4 <tcp_output+0x120>
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d110      	bne.n	801abc4 <tcp_output+0x120>
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d10b      	bne.n	801abc4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	2200      	movs	r2, #0
 801abb0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	2201      	movs	r2, #1
 801abb8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	2200      	movs	r2, #0
 801abc0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	8b5b      	ldrh	r3, [r3, #26]
 801abc8:	f003 0302 	and.w	r3, r3, #2
 801abcc:	2b00      	cmp	r3, #0
 801abce:	f000 814d 	beq.w	801ae6c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801abd2:	6878      	ldr	r0, [r7, #4]
 801abd4:	f000 fd6c 	bl	801b6b0 <tcp_send_empty_ack>
 801abd8:	4603      	mov	r3, r0
 801abda:	e152      	b.n	801ae82 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	2200      	movs	r2, #0
 801abe0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801abe8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801abea:	6a3b      	ldr	r3, [r7, #32]
 801abec:	2b00      	cmp	r3, #0
 801abee:	f000 811c 	beq.w	801ae2a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801abf2:	e002      	b.n	801abfa <tcp_output+0x156>
 801abf4:	6a3b      	ldr	r3, [r7, #32]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	623b      	str	r3, [r7, #32]
 801abfa:	6a3b      	ldr	r3, [r7, #32]
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d1f8      	bne.n	801abf4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801ac02:	e112      	b.n	801ae2a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801ac04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac06:	68db      	ldr	r3, [r3, #12]
 801ac08:	899b      	ldrh	r3, [r3, #12]
 801ac0a:	b29b      	uxth	r3, r3
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	f7f8 fe85 	bl	801391c <lwip_htons>
 801ac12:	4603      	mov	r3, r0
 801ac14:	b2db      	uxtb	r3, r3
 801ac16:	f003 0304 	and.w	r3, r3, #4
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d006      	beq.n	801ac2c <tcp_output+0x188>
 801ac1e:	4b2f      	ldr	r3, [pc, #188]	; (801acdc <tcp_output+0x238>)
 801ac20:	f240 5236 	movw	r2, #1334	; 0x536
 801ac24:	4932      	ldr	r1, [pc, #200]	; (801acf0 <tcp_output+0x24c>)
 801ac26:	482f      	ldr	r0, [pc, #188]	; (801ace4 <tcp_output+0x240>)
 801ac28:	f004 fcba 	bl	801f5a0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d01f      	beq.n	801ac74 <tcp_output+0x1d0>
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	8b5b      	ldrh	r3, [r3, #26]
 801ac38:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d119      	bne.n	801ac74 <tcp_output+0x1d0>
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	d00b      	beq.n	801ac60 <tcp_output+0x1bc>
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d110      	bne.n	801ac74 <tcp_output+0x1d0>
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac56:	891a      	ldrh	r2, [r3, #8]
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ac5c:	429a      	cmp	r2, r3
 801ac5e:	d209      	bcs.n	801ac74 <tcp_output+0x1d0>
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d004      	beq.n	801ac74 <tcp_output+0x1d0>
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ac70:	2b08      	cmp	r3, #8
 801ac72:	d901      	bls.n	801ac78 <tcp_output+0x1d4>
 801ac74:	2301      	movs	r3, #1
 801ac76:	e000      	b.n	801ac7a <tcp_output+0x1d6>
 801ac78:	2300      	movs	r3, #0
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d106      	bne.n	801ac8c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	8b5b      	ldrh	r3, [r3, #26]
 801ac82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	f000 80e4 	beq.w	801ae54 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	7d1b      	ldrb	r3, [r3, #20]
 801ac90:	2b02      	cmp	r3, #2
 801ac92:	d00d      	beq.n	801acb0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac96:	68db      	ldr	r3, [r3, #12]
 801ac98:	899b      	ldrh	r3, [r3, #12]
 801ac9a:	b29c      	uxth	r4, r3
 801ac9c:	2010      	movs	r0, #16
 801ac9e:	f7f8 fe3d 	bl	801391c <lwip_htons>
 801aca2:	4603      	mov	r3, r0
 801aca4:	461a      	mov	r2, r3
 801aca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aca8:	68db      	ldr	r3, [r3, #12]
 801acaa:	4322      	orrs	r2, r4
 801acac:	b292      	uxth	r2, r2
 801acae:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801acb0:	697a      	ldr	r2, [r7, #20]
 801acb2:	6879      	ldr	r1, [r7, #4]
 801acb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801acb6:	f000 f909 	bl	801aecc <tcp_output_segment>
 801acba:	4603      	mov	r3, r0
 801acbc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801acbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d016      	beq.n	801acf4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	8b5b      	ldrh	r3, [r3, #26]
 801acca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801acce:	b29a      	uxth	r2, r3
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	835a      	strh	r2, [r3, #26]
      return err;
 801acd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801acd8:	e0d3      	b.n	801ae82 <tcp_output+0x3de>
 801acda:	bf00      	nop
 801acdc:	08022c6c 	.word	0x08022c6c
 801ace0:	080231b0 	.word	0x080231b0
 801ace4:	08022cc0 	.word	0x08022cc0
 801ace8:	080231c8 	.word	0x080231c8
 801acec:	2000c034 	.word	0x2000c034
 801acf0:	080231f0 	.word	0x080231f0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acf6:	681a      	ldr	r2, [r3, #0]
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	7d1b      	ldrb	r3, [r3, #20]
 801ad00:	2b02      	cmp	r3, #2
 801ad02:	d006      	beq.n	801ad12 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	8b5b      	ldrh	r3, [r3, #26]
 801ad08:	f023 0303 	bic.w	r3, r3, #3
 801ad0c:	b29a      	uxth	r2, r3
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad14:	68db      	ldr	r3, [r3, #12]
 801ad16:	685b      	ldr	r3, [r3, #4]
 801ad18:	4618      	mov	r0, r3
 801ad1a:	f7f8 fe14 	bl	8013946 <lwip_htonl>
 801ad1e:	4604      	mov	r4, r0
 801ad20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad22:	891b      	ldrh	r3, [r3, #8]
 801ad24:	461d      	mov	r5, r3
 801ad26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad28:	68db      	ldr	r3, [r3, #12]
 801ad2a:	899b      	ldrh	r3, [r3, #12]
 801ad2c:	b29b      	uxth	r3, r3
 801ad2e:	4618      	mov	r0, r3
 801ad30:	f7f8 fdf4 	bl	801391c <lwip_htons>
 801ad34:	4603      	mov	r3, r0
 801ad36:	b2db      	uxtb	r3, r3
 801ad38:	f003 0303 	and.w	r3, r3, #3
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d001      	beq.n	801ad44 <tcp_output+0x2a0>
 801ad40:	2301      	movs	r3, #1
 801ad42:	e000      	b.n	801ad46 <tcp_output+0x2a2>
 801ad44:	2300      	movs	r3, #0
 801ad46:	442b      	add	r3, r5
 801ad48:	4423      	add	r3, r4
 801ad4a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ad50:	68bb      	ldr	r3, [r7, #8]
 801ad52:	1ad3      	subs	r3, r2, r3
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	da02      	bge.n	801ad5e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	68ba      	ldr	r2, [r7, #8]
 801ad5c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801ad5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad60:	891b      	ldrh	r3, [r3, #8]
 801ad62:	461c      	mov	r4, r3
 801ad64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad66:	68db      	ldr	r3, [r3, #12]
 801ad68:	899b      	ldrh	r3, [r3, #12]
 801ad6a:	b29b      	uxth	r3, r3
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	f7f8 fdd5 	bl	801391c <lwip_htons>
 801ad72:	4603      	mov	r3, r0
 801ad74:	b2db      	uxtb	r3, r3
 801ad76:	f003 0303 	and.w	r3, r3, #3
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d001      	beq.n	801ad82 <tcp_output+0x2de>
 801ad7e:	2301      	movs	r3, #1
 801ad80:	e000      	b.n	801ad84 <tcp_output+0x2e0>
 801ad82:	2300      	movs	r3, #0
 801ad84:	4423      	add	r3, r4
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d049      	beq.n	801ae1e <tcp_output+0x37a>
      seg->next = NULL;
 801ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad8c:	2200      	movs	r2, #0
 801ad8e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	d105      	bne.n	801ada4 <tcp_output+0x300>
        pcb->unacked = seg;
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad9c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ada0:	623b      	str	r3, [r7, #32]
 801ada2:	e03f      	b.n	801ae24 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ada4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ada6:	68db      	ldr	r3, [r3, #12]
 801ada8:	685b      	ldr	r3, [r3, #4]
 801adaa:	4618      	mov	r0, r3
 801adac:	f7f8 fdcb 	bl	8013946 <lwip_htonl>
 801adb0:	4604      	mov	r4, r0
 801adb2:	6a3b      	ldr	r3, [r7, #32]
 801adb4:	68db      	ldr	r3, [r3, #12]
 801adb6:	685b      	ldr	r3, [r3, #4]
 801adb8:	4618      	mov	r0, r3
 801adba:	f7f8 fdc4 	bl	8013946 <lwip_htonl>
 801adbe:	4603      	mov	r3, r0
 801adc0:	1ae3      	subs	r3, r4, r3
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	da24      	bge.n	801ae10 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	3370      	adds	r3, #112	; 0x70
 801adca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801adcc:	e002      	b.n	801add4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801adce:	69fb      	ldr	r3, [r7, #28]
 801add0:	681b      	ldr	r3, [r3, #0]
 801add2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801add4:	69fb      	ldr	r3, [r7, #28]
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	2b00      	cmp	r3, #0
 801adda:	d011      	beq.n	801ae00 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801addc:	69fb      	ldr	r3, [r7, #28]
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	68db      	ldr	r3, [r3, #12]
 801ade2:	685b      	ldr	r3, [r3, #4]
 801ade4:	4618      	mov	r0, r3
 801ade6:	f7f8 fdae 	bl	8013946 <lwip_htonl>
 801adea:	4604      	mov	r4, r0
 801adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adee:	68db      	ldr	r3, [r3, #12]
 801adf0:	685b      	ldr	r3, [r3, #4]
 801adf2:	4618      	mov	r0, r3
 801adf4:	f7f8 fda7 	bl	8013946 <lwip_htonl>
 801adf8:	4603      	mov	r3, r0
 801adfa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	dbe6      	blt.n	801adce <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801ae00:	69fb      	ldr	r3, [r7, #28]
 801ae02:	681a      	ldr	r2, [r3, #0]
 801ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae06:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ae08:	69fb      	ldr	r3, [r7, #28]
 801ae0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ae0c:	601a      	str	r2, [r3, #0]
 801ae0e:	e009      	b.n	801ae24 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ae10:	6a3b      	ldr	r3, [r7, #32]
 801ae12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ae14:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801ae16:	6a3b      	ldr	r3, [r7, #32]
 801ae18:	681b      	ldr	r3, [r3, #0]
 801ae1a:	623b      	str	r3, [r7, #32]
 801ae1c:	e002      	b.n	801ae24 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801ae1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ae20:	f7fb ff19 	bl	8016c56 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ae28:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d012      	beq.n	801ae56 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae32:	68db      	ldr	r3, [r3, #12]
 801ae34:	685b      	ldr	r3, [r3, #4]
 801ae36:	4618      	mov	r0, r3
 801ae38:	f7f8 fd85 	bl	8013946 <lwip_htonl>
 801ae3c:	4602      	mov	r2, r0
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae42:	1ad3      	subs	r3, r2, r3
 801ae44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ae46:	8912      	ldrh	r2, [r2, #8]
 801ae48:	4413      	add	r3, r2
  while (seg != NULL &&
 801ae4a:	69ba      	ldr	r2, [r7, #24]
 801ae4c:	429a      	cmp	r2, r3
 801ae4e:	f4bf aed9 	bcs.w	801ac04 <tcp_output+0x160>
 801ae52:	e000      	b.n	801ae56 <tcp_output+0x3b2>
      break;
 801ae54:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d108      	bne.n	801ae70 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	2200      	movs	r2, #0
 801ae62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801ae66:	e004      	b.n	801ae72 <tcp_output+0x3ce>
    goto output_done;
 801ae68:	bf00      	nop
 801ae6a:	e002      	b.n	801ae72 <tcp_output+0x3ce>
    goto output_done;
 801ae6c:	bf00      	nop
 801ae6e:	e000      	b.n	801ae72 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801ae70:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	8b5b      	ldrh	r3, [r3, #26]
 801ae76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ae7a:	b29a      	uxth	r2, r3
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801ae80:	2300      	movs	r3, #0
}
 801ae82:	4618      	mov	r0, r3
 801ae84:	3728      	adds	r7, #40	; 0x28
 801ae86:	46bd      	mov	sp, r7
 801ae88:	bdb0      	pop	{r4, r5, r7, pc}
 801ae8a:	bf00      	nop

0801ae8c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801ae8c:	b580      	push	{r7, lr}
 801ae8e:	b082      	sub	sp, #8
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d106      	bne.n	801aea8 <tcp_output_segment_busy+0x1c>
 801ae9a:	4b09      	ldr	r3, [pc, #36]	; (801aec0 <tcp_output_segment_busy+0x34>)
 801ae9c:	f240 529a 	movw	r2, #1434	; 0x59a
 801aea0:	4908      	ldr	r1, [pc, #32]	; (801aec4 <tcp_output_segment_busy+0x38>)
 801aea2:	4809      	ldr	r0, [pc, #36]	; (801aec8 <tcp_output_segment_busy+0x3c>)
 801aea4:	f004 fb7c 	bl	801f5a0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	685b      	ldr	r3, [r3, #4]
 801aeac:	7b9b      	ldrb	r3, [r3, #14]
 801aeae:	2b01      	cmp	r3, #1
 801aeb0:	d001      	beq.n	801aeb6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801aeb2:	2301      	movs	r3, #1
 801aeb4:	e000      	b.n	801aeb8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801aeb6:	2300      	movs	r3, #0
}
 801aeb8:	4618      	mov	r0, r3
 801aeba:	3708      	adds	r7, #8
 801aebc:	46bd      	mov	sp, r7
 801aebe:	bd80      	pop	{r7, pc}
 801aec0:	08022c6c 	.word	0x08022c6c
 801aec4:	08023208 	.word	0x08023208
 801aec8:	08022cc0 	.word	0x08022cc0

0801aecc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801aecc:	b5b0      	push	{r4, r5, r7, lr}
 801aece:	b08c      	sub	sp, #48	; 0x30
 801aed0:	af04      	add	r7, sp, #16
 801aed2:	60f8      	str	r0, [r7, #12]
 801aed4:	60b9      	str	r1, [r7, #8]
 801aed6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d106      	bne.n	801aeec <tcp_output_segment+0x20>
 801aede:	4b63      	ldr	r3, [pc, #396]	; (801b06c <tcp_output_segment+0x1a0>)
 801aee0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801aee4:	4962      	ldr	r1, [pc, #392]	; (801b070 <tcp_output_segment+0x1a4>)
 801aee6:	4863      	ldr	r0, [pc, #396]	; (801b074 <tcp_output_segment+0x1a8>)
 801aee8:	f004 fb5a 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801aeec:	68bb      	ldr	r3, [r7, #8]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d106      	bne.n	801af00 <tcp_output_segment+0x34>
 801aef2:	4b5e      	ldr	r3, [pc, #376]	; (801b06c <tcp_output_segment+0x1a0>)
 801aef4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801aef8:	495f      	ldr	r1, [pc, #380]	; (801b078 <tcp_output_segment+0x1ac>)
 801aefa:	485e      	ldr	r0, [pc, #376]	; (801b074 <tcp_output_segment+0x1a8>)
 801aefc:	f004 fb50 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	2b00      	cmp	r3, #0
 801af04:	d106      	bne.n	801af14 <tcp_output_segment+0x48>
 801af06:	4b59      	ldr	r3, [pc, #356]	; (801b06c <tcp_output_segment+0x1a0>)
 801af08:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801af0c:	495b      	ldr	r1, [pc, #364]	; (801b07c <tcp_output_segment+0x1b0>)
 801af0e:	4859      	ldr	r0, [pc, #356]	; (801b074 <tcp_output_segment+0x1a8>)
 801af10:	f004 fb46 	bl	801f5a0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801af14:	68f8      	ldr	r0, [r7, #12]
 801af16:	f7ff ffb9 	bl	801ae8c <tcp_output_segment_busy>
 801af1a:	4603      	mov	r3, r0
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d001      	beq.n	801af24 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801af20:	2300      	movs	r3, #0
 801af22:	e09f      	b.n	801b064 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801af24:	68bb      	ldr	r3, [r7, #8]
 801af26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	68dc      	ldr	r4, [r3, #12]
 801af2c:	4610      	mov	r0, r2
 801af2e:	f7f8 fd0a 	bl	8013946 <lwip_htonl>
 801af32:	4603      	mov	r3, r0
 801af34:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801af36:	68bb      	ldr	r3, [r7, #8]
 801af38:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801af3a:	68fb      	ldr	r3, [r7, #12]
 801af3c:	68dc      	ldr	r4, [r3, #12]
 801af3e:	4610      	mov	r0, r2
 801af40:	f7f8 fcec 	bl	801391c <lwip_htons>
 801af44:	4603      	mov	r3, r0
 801af46:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801af48:	68bb      	ldr	r3, [r7, #8]
 801af4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af4c:	68ba      	ldr	r2, [r7, #8]
 801af4e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801af50:	441a      	add	r2, r3
 801af52:	68bb      	ldr	r3, [r7, #8]
 801af54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	68db      	ldr	r3, [r3, #12]
 801af5a:	3314      	adds	r3, #20
 801af5c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	7a9b      	ldrb	r3, [r3, #10]
 801af62:	f003 0301 	and.w	r3, r3, #1
 801af66:	2b00      	cmp	r3, #0
 801af68:	d015      	beq.n	801af96 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801af6a:	68bb      	ldr	r3, [r7, #8]
 801af6c:	3304      	adds	r3, #4
 801af6e:	461a      	mov	r2, r3
 801af70:	6879      	ldr	r1, [r7, #4]
 801af72:	f44f 7006 	mov.w	r0, #536	; 0x218
 801af76:	f7fc fa33 	bl	80173e0 <tcp_eff_send_mss_netif>
 801af7a:	4603      	mov	r3, r0
 801af7c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801af7e:	8b7b      	ldrh	r3, [r7, #26]
 801af80:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801af84:	4618      	mov	r0, r3
 801af86:	f7f8 fcde 	bl	8013946 <lwip_htonl>
 801af8a:	4602      	mov	r2, r0
 801af8c:	69fb      	ldr	r3, [r7, #28]
 801af8e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801af90:	69fb      	ldr	r3, [r7, #28]
 801af92:	3304      	adds	r3, #4
 801af94:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801af96:	68bb      	ldr	r3, [r7, #8]
 801af98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	da02      	bge.n	801afa6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801afa0:	68bb      	ldr	r3, [r7, #8]
 801afa2:	2200      	movs	r2, #0
 801afa4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801afa6:	68bb      	ldr	r3, [r7, #8]
 801afa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d10c      	bne.n	801afc8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801afae:	4b34      	ldr	r3, [pc, #208]	; (801b080 <tcp_output_segment+0x1b4>)
 801afb0:	681a      	ldr	r2, [r3, #0]
 801afb2:	68bb      	ldr	r3, [r7, #8]
 801afb4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	68db      	ldr	r3, [r3, #12]
 801afba:	685b      	ldr	r3, [r3, #4]
 801afbc:	4618      	mov	r0, r3
 801afbe:	f7f8 fcc2 	bl	8013946 <lwip_htonl>
 801afc2:	4602      	mov	r2, r0
 801afc4:	68bb      	ldr	r3, [r7, #8]
 801afc6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801afc8:	68fb      	ldr	r3, [r7, #12]
 801afca:	68da      	ldr	r2, [r3, #12]
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	685b      	ldr	r3, [r3, #4]
 801afd0:	685b      	ldr	r3, [r3, #4]
 801afd2:	1ad3      	subs	r3, r2, r3
 801afd4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801afd6:	68fb      	ldr	r3, [r7, #12]
 801afd8:	685b      	ldr	r3, [r3, #4]
 801afda:	8959      	ldrh	r1, [r3, #10]
 801afdc:	68fb      	ldr	r3, [r7, #12]
 801afde:	685b      	ldr	r3, [r3, #4]
 801afe0:	8b3a      	ldrh	r2, [r7, #24]
 801afe2:	1a8a      	subs	r2, r1, r2
 801afe4:	b292      	uxth	r2, r2
 801afe6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801afe8:	68fb      	ldr	r3, [r7, #12]
 801afea:	685b      	ldr	r3, [r3, #4]
 801afec:	8919      	ldrh	r1, [r3, #8]
 801afee:	68fb      	ldr	r3, [r7, #12]
 801aff0:	685b      	ldr	r3, [r3, #4]
 801aff2:	8b3a      	ldrh	r2, [r7, #24]
 801aff4:	1a8a      	subs	r2, r1, r2
 801aff6:	b292      	uxth	r2, r2
 801aff8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801affa:	68fb      	ldr	r3, [r7, #12]
 801affc:	685b      	ldr	r3, [r3, #4]
 801affe:	68fa      	ldr	r2, [r7, #12]
 801b000:	68d2      	ldr	r2, [r2, #12]
 801b002:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	68db      	ldr	r3, [r3, #12]
 801b008:	2200      	movs	r2, #0
 801b00a:	741a      	strb	r2, [r3, #16]
 801b00c:	2200      	movs	r2, #0
 801b00e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	68db      	ldr	r3, [r3, #12]
 801b014:	f103 0214 	add.w	r2, r3, #20
 801b018:	68fb      	ldr	r3, [r7, #12]
 801b01a:	7a9b      	ldrb	r3, [r3, #10]
 801b01c:	009b      	lsls	r3, r3, #2
 801b01e:	f003 0304 	and.w	r3, r3, #4
 801b022:	4413      	add	r3, r2
 801b024:	69fa      	ldr	r2, [r7, #28]
 801b026:	429a      	cmp	r2, r3
 801b028:	d006      	beq.n	801b038 <tcp_output_segment+0x16c>
 801b02a:	4b10      	ldr	r3, [pc, #64]	; (801b06c <tcp_output_segment+0x1a0>)
 801b02c:	f240 621c 	movw	r2, #1564	; 0x61c
 801b030:	4914      	ldr	r1, [pc, #80]	; (801b084 <tcp_output_segment+0x1b8>)
 801b032:	4810      	ldr	r0, [pc, #64]	; (801b074 <tcp_output_segment+0x1a8>)
 801b034:	f004 fab4 	bl	801f5a0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b038:	68fb      	ldr	r3, [r7, #12]
 801b03a:	6858      	ldr	r0, [r3, #4]
 801b03c:	68b9      	ldr	r1, [r7, #8]
 801b03e:	68bb      	ldr	r3, [r7, #8]
 801b040:	1d1c      	adds	r4, r3, #4
 801b042:	68bb      	ldr	r3, [r7, #8]
 801b044:	7add      	ldrb	r5, [r3, #11]
 801b046:	68bb      	ldr	r3, [r7, #8]
 801b048:	7a9b      	ldrb	r3, [r3, #10]
 801b04a:	687a      	ldr	r2, [r7, #4]
 801b04c:	9202      	str	r2, [sp, #8]
 801b04e:	2206      	movs	r2, #6
 801b050:	9201      	str	r2, [sp, #4]
 801b052:	9300      	str	r3, [sp, #0]
 801b054:	462b      	mov	r3, r5
 801b056:	4622      	mov	r2, r4
 801b058:	f002 fe04 	bl	801dc64 <ip4_output_if>
 801b05c:	4603      	mov	r3, r0
 801b05e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b060:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b064:	4618      	mov	r0, r3
 801b066:	3720      	adds	r7, #32
 801b068:	46bd      	mov	sp, r7
 801b06a:	bdb0      	pop	{r4, r5, r7, pc}
 801b06c:	08022c6c 	.word	0x08022c6c
 801b070:	08023230 	.word	0x08023230
 801b074:	08022cc0 	.word	0x08022cc0
 801b078:	08023250 	.word	0x08023250
 801b07c:	08023270 	.word	0x08023270
 801b080:	2000bfe8 	.word	0x2000bfe8
 801b084:	08023294 	.word	0x08023294

0801b088 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b088:	b5b0      	push	{r4, r5, r7, lr}
 801b08a:	b084      	sub	sp, #16
 801b08c:	af00      	add	r7, sp, #0
 801b08e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d106      	bne.n	801b0a4 <tcp_rexmit_rto_prepare+0x1c>
 801b096:	4b31      	ldr	r3, [pc, #196]	; (801b15c <tcp_rexmit_rto_prepare+0xd4>)
 801b098:	f240 6263 	movw	r2, #1635	; 0x663
 801b09c:	4930      	ldr	r1, [pc, #192]	; (801b160 <tcp_rexmit_rto_prepare+0xd8>)
 801b09e:	4831      	ldr	r0, [pc, #196]	; (801b164 <tcp_rexmit_rto_prepare+0xdc>)
 801b0a0:	f004 fa7e 	bl	801f5a0 <iprintf>

  if (pcb->unacked == NULL) {
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d102      	bne.n	801b0b2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b0ac:	f06f 0305 	mvn.w	r3, #5
 801b0b0:	e050      	b.n	801b154 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b0b6:	60fb      	str	r3, [r7, #12]
 801b0b8:	e00b      	b.n	801b0d2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b0ba:	68f8      	ldr	r0, [r7, #12]
 801b0bc:	f7ff fee6 	bl	801ae8c <tcp_output_segment_busy>
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d002      	beq.n	801b0cc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b0c6:	f06f 0305 	mvn.w	r3, #5
 801b0ca:	e043      	b.n	801b154 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	681b      	ldr	r3, [r3, #0]
 801b0d0:	60fb      	str	r3, [r7, #12]
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d1ef      	bne.n	801b0ba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b0da:	68f8      	ldr	r0, [r7, #12]
 801b0dc:	f7ff fed6 	bl	801ae8c <tcp_output_segment_busy>
 801b0e0:	4603      	mov	r3, r0
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d002      	beq.n	801b0ec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b0e6:	f06f 0305 	mvn.w	r3, #5
 801b0ea:	e033      	b.n	801b154 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	2200      	movs	r2, #0
 801b100:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	8b5b      	ldrh	r3, [r3, #26]
 801b106:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b10a:	b29a      	uxth	r2, r3
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b110:	68fb      	ldr	r3, [r7, #12]
 801b112:	68db      	ldr	r3, [r3, #12]
 801b114:	685b      	ldr	r3, [r3, #4]
 801b116:	4618      	mov	r0, r3
 801b118:	f7f8 fc15 	bl	8013946 <lwip_htonl>
 801b11c:	4604      	mov	r4, r0
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	891b      	ldrh	r3, [r3, #8]
 801b122:	461d      	mov	r5, r3
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	68db      	ldr	r3, [r3, #12]
 801b128:	899b      	ldrh	r3, [r3, #12]
 801b12a:	b29b      	uxth	r3, r3
 801b12c:	4618      	mov	r0, r3
 801b12e:	f7f8 fbf5 	bl	801391c <lwip_htons>
 801b132:	4603      	mov	r3, r0
 801b134:	b2db      	uxtb	r3, r3
 801b136:	f003 0303 	and.w	r3, r3, #3
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d001      	beq.n	801b142 <tcp_rexmit_rto_prepare+0xba>
 801b13e:	2301      	movs	r3, #1
 801b140:	e000      	b.n	801b144 <tcp_rexmit_rto_prepare+0xbc>
 801b142:	2300      	movs	r3, #0
 801b144:	442b      	add	r3, r5
 801b146:	18e2      	adds	r2, r4, r3
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	2200      	movs	r2, #0
 801b150:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801b152:	2300      	movs	r3, #0
}
 801b154:	4618      	mov	r0, r3
 801b156:	3710      	adds	r7, #16
 801b158:	46bd      	mov	sp, r7
 801b15a:	bdb0      	pop	{r4, r5, r7, pc}
 801b15c:	08022c6c 	.word	0x08022c6c
 801b160:	080232a8 	.word	0x080232a8
 801b164:	08022cc0 	.word	0x08022cc0

0801b168 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b168:	b580      	push	{r7, lr}
 801b16a:	b082      	sub	sp, #8
 801b16c:	af00      	add	r7, sp, #0
 801b16e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	2b00      	cmp	r3, #0
 801b174:	d106      	bne.n	801b184 <tcp_rexmit_rto_commit+0x1c>
 801b176:	4b0d      	ldr	r3, [pc, #52]	; (801b1ac <tcp_rexmit_rto_commit+0x44>)
 801b178:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801b17c:	490c      	ldr	r1, [pc, #48]	; (801b1b0 <tcp_rexmit_rto_commit+0x48>)
 801b17e:	480d      	ldr	r0, [pc, #52]	; (801b1b4 <tcp_rexmit_rto_commit+0x4c>)
 801b180:	f004 fa0e 	bl	801f5a0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b18a:	2bff      	cmp	r3, #255	; 0xff
 801b18c:	d007      	beq.n	801b19e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b194:	3301      	adds	r3, #1
 801b196:	b2da      	uxtb	r2, r3
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b19e:	6878      	ldr	r0, [r7, #4]
 801b1a0:	f7ff fc80 	bl	801aaa4 <tcp_output>
}
 801b1a4:	bf00      	nop
 801b1a6:	3708      	adds	r7, #8
 801b1a8:	46bd      	mov	sp, r7
 801b1aa:	bd80      	pop	{r7, pc}
 801b1ac:	08022c6c 	.word	0x08022c6c
 801b1b0:	080232cc 	.word	0x080232cc
 801b1b4:	08022cc0 	.word	0x08022cc0

0801b1b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b1b8:	b580      	push	{r7, lr}
 801b1ba:	b082      	sub	sp, #8
 801b1bc:	af00      	add	r7, sp, #0
 801b1be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d106      	bne.n	801b1d4 <tcp_rexmit_rto+0x1c>
 801b1c6:	4b0a      	ldr	r3, [pc, #40]	; (801b1f0 <tcp_rexmit_rto+0x38>)
 801b1c8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801b1cc:	4909      	ldr	r1, [pc, #36]	; (801b1f4 <tcp_rexmit_rto+0x3c>)
 801b1ce:	480a      	ldr	r0, [pc, #40]	; (801b1f8 <tcp_rexmit_rto+0x40>)
 801b1d0:	f004 f9e6 	bl	801f5a0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b1d4:	6878      	ldr	r0, [r7, #4]
 801b1d6:	f7ff ff57 	bl	801b088 <tcp_rexmit_rto_prepare>
 801b1da:	4603      	mov	r3, r0
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d102      	bne.n	801b1e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b1e0:	6878      	ldr	r0, [r7, #4]
 801b1e2:	f7ff ffc1 	bl	801b168 <tcp_rexmit_rto_commit>
  }
}
 801b1e6:	bf00      	nop
 801b1e8:	3708      	adds	r7, #8
 801b1ea:	46bd      	mov	sp, r7
 801b1ec:	bd80      	pop	{r7, pc}
 801b1ee:	bf00      	nop
 801b1f0:	08022c6c 	.word	0x08022c6c
 801b1f4:	080232f0 	.word	0x080232f0
 801b1f8:	08022cc0 	.word	0x08022cc0

0801b1fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b1fc:	b590      	push	{r4, r7, lr}
 801b1fe:	b085      	sub	sp, #20
 801b200:	af00      	add	r7, sp, #0
 801b202:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	2b00      	cmp	r3, #0
 801b208:	d106      	bne.n	801b218 <tcp_rexmit+0x1c>
 801b20a:	4b2f      	ldr	r3, [pc, #188]	; (801b2c8 <tcp_rexmit+0xcc>)
 801b20c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801b210:	492e      	ldr	r1, [pc, #184]	; (801b2cc <tcp_rexmit+0xd0>)
 801b212:	482f      	ldr	r0, [pc, #188]	; (801b2d0 <tcp_rexmit+0xd4>)
 801b214:	f004 f9c4 	bl	801f5a0 <iprintf>

  if (pcb->unacked == NULL) {
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d102      	bne.n	801b226 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b220:	f06f 0305 	mvn.w	r3, #5
 801b224:	e04c      	b.n	801b2c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b22a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b22c:	68b8      	ldr	r0, [r7, #8]
 801b22e:	f7ff fe2d 	bl	801ae8c <tcp_output_segment_busy>
 801b232:	4603      	mov	r3, r0
 801b234:	2b00      	cmp	r3, #0
 801b236:	d002      	beq.n	801b23e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b238:	f06f 0305 	mvn.w	r3, #5
 801b23c:	e040      	b.n	801b2c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b23e:	68bb      	ldr	r3, [r7, #8]
 801b240:	681a      	ldr	r2, [r3, #0]
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	336c      	adds	r3, #108	; 0x6c
 801b24a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b24c:	e002      	b.n	801b254 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b24e:	68fb      	ldr	r3, [r7, #12]
 801b250:	681b      	ldr	r3, [r3, #0]
 801b252:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	681b      	ldr	r3, [r3, #0]
 801b258:	2b00      	cmp	r3, #0
 801b25a:	d011      	beq.n	801b280 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	68db      	ldr	r3, [r3, #12]
 801b262:	685b      	ldr	r3, [r3, #4]
 801b264:	4618      	mov	r0, r3
 801b266:	f7f8 fb6e 	bl	8013946 <lwip_htonl>
 801b26a:	4604      	mov	r4, r0
 801b26c:	68bb      	ldr	r3, [r7, #8]
 801b26e:	68db      	ldr	r3, [r3, #12]
 801b270:	685b      	ldr	r3, [r3, #4]
 801b272:	4618      	mov	r0, r3
 801b274:	f7f8 fb67 	bl	8013946 <lwip_htonl>
 801b278:	4603      	mov	r3, r0
 801b27a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	dbe6      	blt.n	801b24e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b280:	68fb      	ldr	r3, [r7, #12]
 801b282:	681a      	ldr	r2, [r3, #0]
 801b284:	68bb      	ldr	r3, [r7, #8]
 801b286:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b288:	68fb      	ldr	r3, [r7, #12]
 801b28a:	68ba      	ldr	r2, [r7, #8]
 801b28c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b28e:	68bb      	ldr	r3, [r7, #8]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	2b00      	cmp	r3, #0
 801b294:	d103      	bne.n	801b29e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	2200      	movs	r2, #0
 801b29a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b2a4:	2bff      	cmp	r3, #255	; 0xff
 801b2a6:	d007      	beq.n	801b2b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b2ae:	3301      	adds	r3, #1
 801b2b0:	b2da      	uxtb	r2, r3
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	2200      	movs	r2, #0
 801b2bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b2be:	2300      	movs	r3, #0
}
 801b2c0:	4618      	mov	r0, r3
 801b2c2:	3714      	adds	r7, #20
 801b2c4:	46bd      	mov	sp, r7
 801b2c6:	bd90      	pop	{r4, r7, pc}
 801b2c8:	08022c6c 	.word	0x08022c6c
 801b2cc:	0802330c 	.word	0x0802330c
 801b2d0:	08022cc0 	.word	0x08022cc0

0801b2d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b2d4:	b580      	push	{r7, lr}
 801b2d6:	b082      	sub	sp, #8
 801b2d8:	af00      	add	r7, sp, #0
 801b2da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d106      	bne.n	801b2f0 <tcp_rexmit_fast+0x1c>
 801b2e2:	4b2a      	ldr	r3, [pc, #168]	; (801b38c <tcp_rexmit_fast+0xb8>)
 801b2e4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801b2e8:	4929      	ldr	r1, [pc, #164]	; (801b390 <tcp_rexmit_fast+0xbc>)
 801b2ea:	482a      	ldr	r0, [pc, #168]	; (801b394 <tcp_rexmit_fast+0xc0>)
 801b2ec:	f004 f958 	bl	801f5a0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d045      	beq.n	801b384 <tcp_rexmit_fast+0xb0>
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	8b5b      	ldrh	r3, [r3, #26]
 801b2fc:	f003 0304 	and.w	r3, r3, #4
 801b300:	2b00      	cmp	r3, #0
 801b302:	d13f      	bne.n	801b384 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b304:	6878      	ldr	r0, [r7, #4]
 801b306:	f7ff ff79 	bl	801b1fc <tcp_rexmit>
 801b30a:	4603      	mov	r3, r0
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d139      	bne.n	801b384 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b31c:	4293      	cmp	r3, r2
 801b31e:	bf28      	it	cs
 801b320:	4613      	movcs	r3, r2
 801b322:	b29b      	uxth	r3, r3
 801b324:	2b00      	cmp	r3, #0
 801b326:	da00      	bge.n	801b32a <tcp_rexmit_fast+0x56>
 801b328:	3301      	adds	r3, #1
 801b32a:	105b      	asrs	r3, r3, #1
 801b32c:	b29a      	uxth	r2, r3
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b33a:	461a      	mov	r2, r3
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b340:	005b      	lsls	r3, r3, #1
 801b342:	429a      	cmp	r2, r3
 801b344:	d206      	bcs.n	801b354 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b34a:	005b      	lsls	r3, r3, #1
 801b34c:	b29a      	uxth	r2, r3
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b35e:	4619      	mov	r1, r3
 801b360:	0049      	lsls	r1, r1, #1
 801b362:	440b      	add	r3, r1
 801b364:	b29b      	uxth	r3, r3
 801b366:	4413      	add	r3, r2
 801b368:	b29a      	uxth	r2, r3
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	8b5b      	ldrh	r3, [r3, #26]
 801b374:	f043 0304 	orr.w	r3, r3, #4
 801b378:	b29a      	uxth	r2, r3
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	2200      	movs	r2, #0
 801b382:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801b384:	bf00      	nop
 801b386:	3708      	adds	r7, #8
 801b388:	46bd      	mov	sp, r7
 801b38a:	bd80      	pop	{r7, pc}
 801b38c:	08022c6c 	.word	0x08022c6c
 801b390:	08023324 	.word	0x08023324
 801b394:	08022cc0 	.word	0x08022cc0

0801b398 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b398:	b580      	push	{r7, lr}
 801b39a:	b086      	sub	sp, #24
 801b39c:	af00      	add	r7, sp, #0
 801b39e:	60f8      	str	r0, [r7, #12]
 801b3a0:	607b      	str	r3, [r7, #4]
 801b3a2:	460b      	mov	r3, r1
 801b3a4:	817b      	strh	r3, [r7, #10]
 801b3a6:	4613      	mov	r3, r2
 801b3a8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b3aa:	897a      	ldrh	r2, [r7, #10]
 801b3ac:	893b      	ldrh	r3, [r7, #8]
 801b3ae:	4413      	add	r3, r2
 801b3b0:	b29b      	uxth	r3, r3
 801b3b2:	3314      	adds	r3, #20
 801b3b4:	b29b      	uxth	r3, r3
 801b3b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b3ba:	4619      	mov	r1, r3
 801b3bc:	2022      	movs	r0, #34	; 0x22
 801b3be:	f7f9 fbbb 	bl	8014b38 <pbuf_alloc>
 801b3c2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b3c4:	697b      	ldr	r3, [r7, #20]
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d04d      	beq.n	801b466 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b3ca:	897b      	ldrh	r3, [r7, #10]
 801b3cc:	3313      	adds	r3, #19
 801b3ce:	697a      	ldr	r2, [r7, #20]
 801b3d0:	8952      	ldrh	r2, [r2, #10]
 801b3d2:	4293      	cmp	r3, r2
 801b3d4:	db06      	blt.n	801b3e4 <tcp_output_alloc_header_common+0x4c>
 801b3d6:	4b26      	ldr	r3, [pc, #152]	; (801b470 <tcp_output_alloc_header_common+0xd8>)
 801b3d8:	f240 7223 	movw	r2, #1827	; 0x723
 801b3dc:	4925      	ldr	r1, [pc, #148]	; (801b474 <tcp_output_alloc_header_common+0xdc>)
 801b3de:	4826      	ldr	r0, [pc, #152]	; (801b478 <tcp_output_alloc_header_common+0xe0>)
 801b3e0:	f004 f8de 	bl	801f5a0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b3e4:	697b      	ldr	r3, [r7, #20]
 801b3e6:	685b      	ldr	r3, [r3, #4]
 801b3e8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b3ea:	8c3b      	ldrh	r3, [r7, #32]
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	f7f8 fa95 	bl	801391c <lwip_htons>
 801b3f2:	4603      	mov	r3, r0
 801b3f4:	461a      	mov	r2, r3
 801b3f6:	693b      	ldr	r3, [r7, #16]
 801b3f8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b3fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b3fc:	4618      	mov	r0, r3
 801b3fe:	f7f8 fa8d 	bl	801391c <lwip_htons>
 801b402:	4603      	mov	r3, r0
 801b404:	461a      	mov	r2, r3
 801b406:	693b      	ldr	r3, [r7, #16]
 801b408:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b40a:	693b      	ldr	r3, [r7, #16]
 801b40c:	687a      	ldr	r2, [r7, #4]
 801b40e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b410:	68f8      	ldr	r0, [r7, #12]
 801b412:	f7f8 fa98 	bl	8013946 <lwip_htonl>
 801b416:	4602      	mov	r2, r0
 801b418:	693b      	ldr	r3, [r7, #16]
 801b41a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b41c:	897b      	ldrh	r3, [r7, #10]
 801b41e:	089b      	lsrs	r3, r3, #2
 801b420:	b29b      	uxth	r3, r3
 801b422:	3305      	adds	r3, #5
 801b424:	b29b      	uxth	r3, r3
 801b426:	031b      	lsls	r3, r3, #12
 801b428:	b29a      	uxth	r2, r3
 801b42a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b42e:	b29b      	uxth	r3, r3
 801b430:	4313      	orrs	r3, r2
 801b432:	b29b      	uxth	r3, r3
 801b434:	4618      	mov	r0, r3
 801b436:	f7f8 fa71 	bl	801391c <lwip_htons>
 801b43a:	4603      	mov	r3, r0
 801b43c:	461a      	mov	r2, r3
 801b43e:	693b      	ldr	r3, [r7, #16]
 801b440:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b442:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b444:	4618      	mov	r0, r3
 801b446:	f7f8 fa69 	bl	801391c <lwip_htons>
 801b44a:	4603      	mov	r3, r0
 801b44c:	461a      	mov	r2, r3
 801b44e:	693b      	ldr	r3, [r7, #16]
 801b450:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b452:	693b      	ldr	r3, [r7, #16]
 801b454:	2200      	movs	r2, #0
 801b456:	741a      	strb	r2, [r3, #16]
 801b458:	2200      	movs	r2, #0
 801b45a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b45c:	693b      	ldr	r3, [r7, #16]
 801b45e:	2200      	movs	r2, #0
 801b460:	749a      	strb	r2, [r3, #18]
 801b462:	2200      	movs	r2, #0
 801b464:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b466:	697b      	ldr	r3, [r7, #20]
}
 801b468:	4618      	mov	r0, r3
 801b46a:	3718      	adds	r7, #24
 801b46c:	46bd      	mov	sp, r7
 801b46e:	bd80      	pop	{r7, pc}
 801b470:	08022c6c 	.word	0x08022c6c
 801b474:	08023344 	.word	0x08023344
 801b478:	08022cc0 	.word	0x08022cc0

0801b47c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b47c:	b5b0      	push	{r4, r5, r7, lr}
 801b47e:	b08a      	sub	sp, #40	; 0x28
 801b480:	af04      	add	r7, sp, #16
 801b482:	60f8      	str	r0, [r7, #12]
 801b484:	607b      	str	r3, [r7, #4]
 801b486:	460b      	mov	r3, r1
 801b488:	817b      	strh	r3, [r7, #10]
 801b48a:	4613      	mov	r3, r2
 801b48c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b48e:	68fb      	ldr	r3, [r7, #12]
 801b490:	2b00      	cmp	r3, #0
 801b492:	d106      	bne.n	801b4a2 <tcp_output_alloc_header+0x26>
 801b494:	4b15      	ldr	r3, [pc, #84]	; (801b4ec <tcp_output_alloc_header+0x70>)
 801b496:	f240 7242 	movw	r2, #1858	; 0x742
 801b49a:	4915      	ldr	r1, [pc, #84]	; (801b4f0 <tcp_output_alloc_header+0x74>)
 801b49c:	4815      	ldr	r0, [pc, #84]	; (801b4f4 <tcp_output_alloc_header+0x78>)
 801b49e:	f004 f87f 	bl	801f5a0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801b4a6:	68fb      	ldr	r3, [r7, #12]
 801b4a8:	8adb      	ldrh	r3, [r3, #22]
 801b4aa:	68fa      	ldr	r2, [r7, #12]
 801b4ac:	8b12      	ldrh	r2, [r2, #24]
 801b4ae:	68f9      	ldr	r1, [r7, #12]
 801b4b0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801b4b2:	893d      	ldrh	r5, [r7, #8]
 801b4b4:	897c      	ldrh	r4, [r7, #10]
 801b4b6:	9103      	str	r1, [sp, #12]
 801b4b8:	2110      	movs	r1, #16
 801b4ba:	9102      	str	r1, [sp, #8]
 801b4bc:	9201      	str	r2, [sp, #4]
 801b4be:	9300      	str	r3, [sp, #0]
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	462a      	mov	r2, r5
 801b4c4:	4621      	mov	r1, r4
 801b4c6:	f7ff ff67 	bl	801b398 <tcp_output_alloc_header_common>
 801b4ca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b4cc:	697b      	ldr	r3, [r7, #20]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d006      	beq.n	801b4e0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4d6:	68fa      	ldr	r2, [r7, #12]
 801b4d8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b4da:	441a      	add	r2, r3
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801b4e0:	697b      	ldr	r3, [r7, #20]
}
 801b4e2:	4618      	mov	r0, r3
 801b4e4:	3718      	adds	r7, #24
 801b4e6:	46bd      	mov	sp, r7
 801b4e8:	bdb0      	pop	{r4, r5, r7, pc}
 801b4ea:	bf00      	nop
 801b4ec:	08022c6c 	.word	0x08022c6c
 801b4f0:	08023374 	.word	0x08023374
 801b4f4:	08022cc0 	.word	0x08022cc0

0801b4f8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b4f8:	b580      	push	{r7, lr}
 801b4fa:	b088      	sub	sp, #32
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	60f8      	str	r0, [r7, #12]
 801b500:	60b9      	str	r1, [r7, #8]
 801b502:	4611      	mov	r1, r2
 801b504:	461a      	mov	r2, r3
 801b506:	460b      	mov	r3, r1
 801b508:	71fb      	strb	r3, [r7, #7]
 801b50a:	4613      	mov	r3, r2
 801b50c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b50e:	2300      	movs	r3, #0
 801b510:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b512:	68bb      	ldr	r3, [r7, #8]
 801b514:	2b00      	cmp	r3, #0
 801b516:	d106      	bne.n	801b526 <tcp_output_fill_options+0x2e>
 801b518:	4b13      	ldr	r3, [pc, #76]	; (801b568 <tcp_output_fill_options+0x70>)
 801b51a:	f240 7256 	movw	r2, #1878	; 0x756
 801b51e:	4913      	ldr	r1, [pc, #76]	; (801b56c <tcp_output_fill_options+0x74>)
 801b520:	4813      	ldr	r0, [pc, #76]	; (801b570 <tcp_output_fill_options+0x78>)
 801b522:	f004 f83d 	bl	801f5a0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b526:	68bb      	ldr	r3, [r7, #8]
 801b528:	685b      	ldr	r3, [r3, #4]
 801b52a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b52c:	69bb      	ldr	r3, [r7, #24]
 801b52e:	3314      	adds	r3, #20
 801b530:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b532:	69bb      	ldr	r3, [r7, #24]
 801b534:	f103 0214 	add.w	r2, r3, #20
 801b538:	8bfb      	ldrh	r3, [r7, #30]
 801b53a:	009b      	lsls	r3, r3, #2
 801b53c:	4619      	mov	r1, r3
 801b53e:	79fb      	ldrb	r3, [r7, #7]
 801b540:	009b      	lsls	r3, r3, #2
 801b542:	f003 0304 	and.w	r3, r3, #4
 801b546:	440b      	add	r3, r1
 801b548:	4413      	add	r3, r2
 801b54a:	697a      	ldr	r2, [r7, #20]
 801b54c:	429a      	cmp	r2, r3
 801b54e:	d006      	beq.n	801b55e <tcp_output_fill_options+0x66>
 801b550:	4b05      	ldr	r3, [pc, #20]	; (801b568 <tcp_output_fill_options+0x70>)
 801b552:	f240 7275 	movw	r2, #1909	; 0x775
 801b556:	4907      	ldr	r1, [pc, #28]	; (801b574 <tcp_output_fill_options+0x7c>)
 801b558:	4805      	ldr	r0, [pc, #20]	; (801b570 <tcp_output_fill_options+0x78>)
 801b55a:	f004 f821 	bl	801f5a0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b55e:	bf00      	nop
 801b560:	3720      	adds	r7, #32
 801b562:	46bd      	mov	sp, r7
 801b564:	bd80      	pop	{r7, pc}
 801b566:	bf00      	nop
 801b568:	08022c6c 	.word	0x08022c6c
 801b56c:	0802339c 	.word	0x0802339c
 801b570:	08022cc0 	.word	0x08022cc0
 801b574:	08023294 	.word	0x08023294

0801b578 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b578:	b580      	push	{r7, lr}
 801b57a:	b08a      	sub	sp, #40	; 0x28
 801b57c:	af04      	add	r7, sp, #16
 801b57e:	60f8      	str	r0, [r7, #12]
 801b580:	60b9      	str	r1, [r7, #8]
 801b582:	607a      	str	r2, [r7, #4]
 801b584:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b586:	68bb      	ldr	r3, [r7, #8]
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d106      	bne.n	801b59a <tcp_output_control_segment+0x22>
 801b58c:	4b1c      	ldr	r3, [pc, #112]	; (801b600 <tcp_output_control_segment+0x88>)
 801b58e:	f240 7287 	movw	r2, #1927	; 0x787
 801b592:	491c      	ldr	r1, [pc, #112]	; (801b604 <tcp_output_control_segment+0x8c>)
 801b594:	481c      	ldr	r0, [pc, #112]	; (801b608 <tcp_output_control_segment+0x90>)
 801b596:	f004 f803 	bl	801f5a0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b59a:	683a      	ldr	r2, [r7, #0]
 801b59c:	6879      	ldr	r1, [r7, #4]
 801b59e:	68f8      	ldr	r0, [r7, #12]
 801b5a0:	f7fe fae8 	bl	8019b74 <tcp_route>
 801b5a4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b5a6:	693b      	ldr	r3, [r7, #16]
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d102      	bne.n	801b5b2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b5ac:	23fc      	movs	r3, #252	; 0xfc
 801b5ae:	75fb      	strb	r3, [r7, #23]
 801b5b0:	e01c      	b.n	801b5ec <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b5b2:	68fb      	ldr	r3, [r7, #12]
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d006      	beq.n	801b5c6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	7adb      	ldrb	r3, [r3, #11]
 801b5bc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	7a9b      	ldrb	r3, [r3, #10]
 801b5c2:	757b      	strb	r3, [r7, #21]
 801b5c4:	e003      	b.n	801b5ce <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b5c6:	23ff      	movs	r3, #255	; 0xff
 801b5c8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b5ca:	2300      	movs	r3, #0
 801b5cc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b5ce:	7dba      	ldrb	r2, [r7, #22]
 801b5d0:	693b      	ldr	r3, [r7, #16]
 801b5d2:	9302      	str	r3, [sp, #8]
 801b5d4:	2306      	movs	r3, #6
 801b5d6:	9301      	str	r3, [sp, #4]
 801b5d8:	7d7b      	ldrb	r3, [r7, #21]
 801b5da:	9300      	str	r3, [sp, #0]
 801b5dc:	4613      	mov	r3, r2
 801b5de:	683a      	ldr	r2, [r7, #0]
 801b5e0:	6879      	ldr	r1, [r7, #4]
 801b5e2:	68b8      	ldr	r0, [r7, #8]
 801b5e4:	f002 fb3e 	bl	801dc64 <ip4_output_if>
 801b5e8:	4603      	mov	r3, r0
 801b5ea:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b5ec:	68b8      	ldr	r0, [r7, #8]
 801b5ee:	f7f9 fd87 	bl	8015100 <pbuf_free>
  return err;
 801b5f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	3718      	adds	r7, #24
 801b5fa:	46bd      	mov	sp, r7
 801b5fc:	bd80      	pop	{r7, pc}
 801b5fe:	bf00      	nop
 801b600:	08022c6c 	.word	0x08022c6c
 801b604:	080233c4 	.word	0x080233c4
 801b608:	08022cc0 	.word	0x08022cc0

0801b60c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b60c:	b590      	push	{r4, r7, lr}
 801b60e:	b08b      	sub	sp, #44	; 0x2c
 801b610:	af04      	add	r7, sp, #16
 801b612:	60f8      	str	r0, [r7, #12]
 801b614:	60b9      	str	r1, [r7, #8]
 801b616:	607a      	str	r2, [r7, #4]
 801b618:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b61a:	683b      	ldr	r3, [r7, #0]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d106      	bne.n	801b62e <tcp_rst+0x22>
 801b620:	4b1f      	ldr	r3, [pc, #124]	; (801b6a0 <tcp_rst+0x94>)
 801b622:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801b626:	491f      	ldr	r1, [pc, #124]	; (801b6a4 <tcp_rst+0x98>)
 801b628:	481f      	ldr	r0, [pc, #124]	; (801b6a8 <tcp_rst+0x9c>)
 801b62a:	f003 ffb9 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b630:	2b00      	cmp	r3, #0
 801b632:	d106      	bne.n	801b642 <tcp_rst+0x36>
 801b634:	4b1a      	ldr	r3, [pc, #104]	; (801b6a0 <tcp_rst+0x94>)
 801b636:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801b63a:	491c      	ldr	r1, [pc, #112]	; (801b6ac <tcp_rst+0xa0>)
 801b63c:	481a      	ldr	r0, [pc, #104]	; (801b6a8 <tcp_rst+0x9c>)
 801b63e:	f003 ffaf 	bl	801f5a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b642:	2300      	movs	r3, #0
 801b644:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b646:	f246 0308 	movw	r3, #24584	; 0x6008
 801b64a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b64c:	7dfb      	ldrb	r3, [r7, #23]
 801b64e:	b29c      	uxth	r4, r3
 801b650:	68b8      	ldr	r0, [r7, #8]
 801b652:	f7f8 f978 	bl	8013946 <lwip_htonl>
 801b656:	4602      	mov	r2, r0
 801b658:	8abb      	ldrh	r3, [r7, #20]
 801b65a:	9303      	str	r3, [sp, #12]
 801b65c:	2314      	movs	r3, #20
 801b65e:	9302      	str	r3, [sp, #8]
 801b660:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801b662:	9301      	str	r3, [sp, #4]
 801b664:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b666:	9300      	str	r3, [sp, #0]
 801b668:	4613      	mov	r3, r2
 801b66a:	2200      	movs	r2, #0
 801b66c:	4621      	mov	r1, r4
 801b66e:	6878      	ldr	r0, [r7, #4]
 801b670:	f7ff fe92 	bl	801b398 <tcp_output_alloc_header_common>
 801b674:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b676:	693b      	ldr	r3, [r7, #16]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d00c      	beq.n	801b696 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b67c:	7dfb      	ldrb	r3, [r7, #23]
 801b67e:	2200      	movs	r2, #0
 801b680:	6939      	ldr	r1, [r7, #16]
 801b682:	68f8      	ldr	r0, [r7, #12]
 801b684:	f7ff ff38 	bl	801b4f8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b68a:	683a      	ldr	r2, [r7, #0]
 801b68c:	6939      	ldr	r1, [r7, #16]
 801b68e:	68f8      	ldr	r0, [r7, #12]
 801b690:	f7ff ff72 	bl	801b578 <tcp_output_control_segment>
 801b694:	e000      	b.n	801b698 <tcp_rst+0x8c>
    return;
 801b696:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b698:	371c      	adds	r7, #28
 801b69a:	46bd      	mov	sp, r7
 801b69c:	bd90      	pop	{r4, r7, pc}
 801b69e:	bf00      	nop
 801b6a0:	08022c6c 	.word	0x08022c6c
 801b6a4:	080233f0 	.word	0x080233f0
 801b6a8:	08022cc0 	.word	0x08022cc0
 801b6ac:	0802340c 	.word	0x0802340c

0801b6b0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b6b0:	b590      	push	{r4, r7, lr}
 801b6b2:	b087      	sub	sp, #28
 801b6b4:	af00      	add	r7, sp, #0
 801b6b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b6b8:	2300      	movs	r3, #0
 801b6ba:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b6bc:	2300      	movs	r3, #0
 801b6be:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d106      	bne.n	801b6d4 <tcp_send_empty_ack+0x24>
 801b6c6:	4b28      	ldr	r3, [pc, #160]	; (801b768 <tcp_send_empty_ack+0xb8>)
 801b6c8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801b6cc:	4927      	ldr	r1, [pc, #156]	; (801b76c <tcp_send_empty_ack+0xbc>)
 801b6ce:	4828      	ldr	r0, [pc, #160]	; (801b770 <tcp_send_empty_ack+0xc0>)
 801b6d0:	f003 ff66 	bl	801f5a0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b6d4:	7dfb      	ldrb	r3, [r7, #23]
 801b6d6:	009b      	lsls	r3, r3, #2
 801b6d8:	b2db      	uxtb	r3, r3
 801b6da:	f003 0304 	and.w	r3, r3, #4
 801b6de:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b6e0:	7d7b      	ldrb	r3, [r7, #21]
 801b6e2:	b29c      	uxth	r4, r3
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b6e8:	4618      	mov	r0, r3
 801b6ea:	f7f8 f92c 	bl	8013946 <lwip_htonl>
 801b6ee:	4603      	mov	r3, r0
 801b6f0:	2200      	movs	r2, #0
 801b6f2:	4621      	mov	r1, r4
 801b6f4:	6878      	ldr	r0, [r7, #4]
 801b6f6:	f7ff fec1 	bl	801b47c <tcp_output_alloc_header>
 801b6fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b6fc:	693b      	ldr	r3, [r7, #16]
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d109      	bne.n	801b716 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	8b5b      	ldrh	r3, [r3, #26]
 801b706:	f043 0303 	orr.w	r3, r3, #3
 801b70a:	b29a      	uxth	r2, r3
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b710:	f06f 0301 	mvn.w	r3, #1
 801b714:	e023      	b.n	801b75e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b716:	7dbb      	ldrb	r3, [r7, #22]
 801b718:	7dfa      	ldrb	r2, [r7, #23]
 801b71a:	6939      	ldr	r1, [r7, #16]
 801b71c:	6878      	ldr	r0, [r7, #4]
 801b71e:	f7ff feeb 	bl	801b4f8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b722:	687a      	ldr	r2, [r7, #4]
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	3304      	adds	r3, #4
 801b728:	6939      	ldr	r1, [r7, #16]
 801b72a:	6878      	ldr	r0, [r7, #4]
 801b72c:	f7ff ff24 	bl	801b578 <tcp_output_control_segment>
 801b730:	4603      	mov	r3, r0
 801b732:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d007      	beq.n	801b74c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	8b5b      	ldrh	r3, [r3, #26]
 801b740:	f043 0303 	orr.w	r3, r3, #3
 801b744:	b29a      	uxth	r2, r3
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	835a      	strh	r2, [r3, #26]
 801b74a:	e006      	b.n	801b75a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	8b5b      	ldrh	r3, [r3, #26]
 801b750:	f023 0303 	bic.w	r3, r3, #3
 801b754:	b29a      	uxth	r2, r3
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b75a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b75e:	4618      	mov	r0, r3
 801b760:	371c      	adds	r7, #28
 801b762:	46bd      	mov	sp, r7
 801b764:	bd90      	pop	{r4, r7, pc}
 801b766:	bf00      	nop
 801b768:	08022c6c 	.word	0x08022c6c
 801b76c:	08023428 	.word	0x08023428
 801b770:	08022cc0 	.word	0x08022cc0

0801b774 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b774:	b590      	push	{r4, r7, lr}
 801b776:	b087      	sub	sp, #28
 801b778:	af00      	add	r7, sp, #0
 801b77a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b77c:	2300      	movs	r3, #0
 801b77e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	2b00      	cmp	r3, #0
 801b784:	d106      	bne.n	801b794 <tcp_keepalive+0x20>
 801b786:	4b18      	ldr	r3, [pc, #96]	; (801b7e8 <tcp_keepalive+0x74>)
 801b788:	f640 0224 	movw	r2, #2084	; 0x824
 801b78c:	4917      	ldr	r1, [pc, #92]	; (801b7ec <tcp_keepalive+0x78>)
 801b78e:	4818      	ldr	r0, [pc, #96]	; (801b7f0 <tcp_keepalive+0x7c>)
 801b790:	f003 ff06 	bl	801f5a0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b794:	7dfb      	ldrb	r3, [r7, #23]
 801b796:	b29c      	uxth	r4, r3
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b79c:	3b01      	subs	r3, #1
 801b79e:	4618      	mov	r0, r3
 801b7a0:	f7f8 f8d1 	bl	8013946 <lwip_htonl>
 801b7a4:	4603      	mov	r3, r0
 801b7a6:	2200      	movs	r2, #0
 801b7a8:	4621      	mov	r1, r4
 801b7aa:	6878      	ldr	r0, [r7, #4]
 801b7ac:	f7ff fe66 	bl	801b47c <tcp_output_alloc_header>
 801b7b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b7b2:	693b      	ldr	r3, [r7, #16]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d102      	bne.n	801b7be <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b7b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b7bc:	e010      	b.n	801b7e0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b7be:	7dfb      	ldrb	r3, [r7, #23]
 801b7c0:	2200      	movs	r2, #0
 801b7c2:	6939      	ldr	r1, [r7, #16]
 801b7c4:	6878      	ldr	r0, [r7, #4]
 801b7c6:	f7ff fe97 	bl	801b4f8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b7ca:	687a      	ldr	r2, [r7, #4]
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	3304      	adds	r3, #4
 801b7d0:	6939      	ldr	r1, [r7, #16]
 801b7d2:	6878      	ldr	r0, [r7, #4]
 801b7d4:	f7ff fed0 	bl	801b578 <tcp_output_control_segment>
 801b7d8:	4603      	mov	r3, r0
 801b7da:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b7dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b7e0:	4618      	mov	r0, r3
 801b7e2:	371c      	adds	r7, #28
 801b7e4:	46bd      	mov	sp, r7
 801b7e6:	bd90      	pop	{r4, r7, pc}
 801b7e8:	08022c6c 	.word	0x08022c6c
 801b7ec:	08023448 	.word	0x08023448
 801b7f0:	08022cc0 	.word	0x08022cc0

0801b7f4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b7f4:	b590      	push	{r4, r7, lr}
 801b7f6:	b08b      	sub	sp, #44	; 0x2c
 801b7f8:	af00      	add	r7, sp, #0
 801b7fa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b7fc:	2300      	movs	r3, #0
 801b7fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	2b00      	cmp	r3, #0
 801b806:	d106      	bne.n	801b816 <tcp_zero_window_probe+0x22>
 801b808:	4b4c      	ldr	r3, [pc, #304]	; (801b93c <tcp_zero_window_probe+0x148>)
 801b80a:	f640 024f 	movw	r2, #2127	; 0x84f
 801b80e:	494c      	ldr	r1, [pc, #304]	; (801b940 <tcp_zero_window_probe+0x14c>)
 801b810:	484c      	ldr	r0, [pc, #304]	; (801b944 <tcp_zero_window_probe+0x150>)
 801b812:	f003 fec5 	bl	801f5a0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b81a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801b81c:	6a3b      	ldr	r3, [r7, #32]
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d101      	bne.n	801b826 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b822:	2300      	movs	r3, #0
 801b824:	e086      	b.n	801b934 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b82c:	2bff      	cmp	r3, #255	; 0xff
 801b82e:	d007      	beq.n	801b840 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b836:	3301      	adds	r3, #1
 801b838:	b2da      	uxtb	r2, r3
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b840:	6a3b      	ldr	r3, [r7, #32]
 801b842:	68db      	ldr	r3, [r3, #12]
 801b844:	899b      	ldrh	r3, [r3, #12]
 801b846:	b29b      	uxth	r3, r3
 801b848:	4618      	mov	r0, r3
 801b84a:	f7f8 f867 	bl	801391c <lwip_htons>
 801b84e:	4603      	mov	r3, r0
 801b850:	b2db      	uxtb	r3, r3
 801b852:	f003 0301 	and.w	r3, r3, #1
 801b856:	2b00      	cmp	r3, #0
 801b858:	d005      	beq.n	801b866 <tcp_zero_window_probe+0x72>
 801b85a:	6a3b      	ldr	r3, [r7, #32]
 801b85c:	891b      	ldrh	r3, [r3, #8]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d101      	bne.n	801b866 <tcp_zero_window_probe+0x72>
 801b862:	2301      	movs	r3, #1
 801b864:	e000      	b.n	801b868 <tcp_zero_window_probe+0x74>
 801b866:	2300      	movs	r3, #0
 801b868:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b86a:	7ffb      	ldrb	r3, [r7, #31]
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	bf0c      	ite	eq
 801b870:	2301      	moveq	r3, #1
 801b872:	2300      	movne	r3, #0
 801b874:	b2db      	uxtb	r3, r3
 801b876:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b87c:	b299      	uxth	r1, r3
 801b87e:	6a3b      	ldr	r3, [r7, #32]
 801b880:	68db      	ldr	r3, [r3, #12]
 801b882:	685b      	ldr	r3, [r3, #4]
 801b884:	8bba      	ldrh	r2, [r7, #28]
 801b886:	6878      	ldr	r0, [r7, #4]
 801b888:	f7ff fdf8 	bl	801b47c <tcp_output_alloc_header>
 801b88c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801b88e:	69bb      	ldr	r3, [r7, #24]
 801b890:	2b00      	cmp	r3, #0
 801b892:	d102      	bne.n	801b89a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b898:	e04c      	b.n	801b934 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b89a:	69bb      	ldr	r3, [r7, #24]
 801b89c:	685b      	ldr	r3, [r3, #4]
 801b89e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801b8a0:	7ffb      	ldrb	r3, [r7, #31]
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d011      	beq.n	801b8ca <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b8a6:	697b      	ldr	r3, [r7, #20]
 801b8a8:	899b      	ldrh	r3, [r3, #12]
 801b8aa:	b29b      	uxth	r3, r3
 801b8ac:	b21b      	sxth	r3, r3
 801b8ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b8b2:	b21c      	sxth	r4, r3
 801b8b4:	2011      	movs	r0, #17
 801b8b6:	f7f8 f831 	bl	801391c <lwip_htons>
 801b8ba:	4603      	mov	r3, r0
 801b8bc:	b21b      	sxth	r3, r3
 801b8be:	4323      	orrs	r3, r4
 801b8c0:	b21b      	sxth	r3, r3
 801b8c2:	b29a      	uxth	r2, r3
 801b8c4:	697b      	ldr	r3, [r7, #20]
 801b8c6:	819a      	strh	r2, [r3, #12]
 801b8c8:	e010      	b.n	801b8ec <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b8ca:	69bb      	ldr	r3, [r7, #24]
 801b8cc:	685b      	ldr	r3, [r3, #4]
 801b8ce:	3314      	adds	r3, #20
 801b8d0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b8d2:	6a3b      	ldr	r3, [r7, #32]
 801b8d4:	6858      	ldr	r0, [r3, #4]
 801b8d6:	6a3b      	ldr	r3, [r7, #32]
 801b8d8:	685b      	ldr	r3, [r3, #4]
 801b8da:	891a      	ldrh	r2, [r3, #8]
 801b8dc:	6a3b      	ldr	r3, [r7, #32]
 801b8de:	891b      	ldrh	r3, [r3, #8]
 801b8e0:	1ad3      	subs	r3, r2, r3
 801b8e2:	b29b      	uxth	r3, r3
 801b8e4:	2201      	movs	r2, #1
 801b8e6:	6939      	ldr	r1, [r7, #16]
 801b8e8:	f7f9 fe10 	bl	801550c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b8ec:	6a3b      	ldr	r3, [r7, #32]
 801b8ee:	68db      	ldr	r3, [r3, #12]
 801b8f0:	685b      	ldr	r3, [r3, #4]
 801b8f2:	4618      	mov	r0, r3
 801b8f4:	f7f8 f827 	bl	8013946 <lwip_htonl>
 801b8f8:	4603      	mov	r3, r0
 801b8fa:	3301      	adds	r3, #1
 801b8fc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	1ad3      	subs	r3, r2, r3
 801b906:	2b00      	cmp	r3, #0
 801b908:	da02      	bge.n	801b910 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	68fa      	ldr	r2, [r7, #12]
 801b90e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b914:	2200      	movs	r2, #0
 801b916:	69b9      	ldr	r1, [r7, #24]
 801b918:	6878      	ldr	r0, [r7, #4]
 801b91a:	f7ff fded 	bl	801b4f8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b91e:	687a      	ldr	r2, [r7, #4]
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	3304      	adds	r3, #4
 801b924:	69b9      	ldr	r1, [r7, #24]
 801b926:	6878      	ldr	r0, [r7, #4]
 801b928:	f7ff fe26 	bl	801b578 <tcp_output_control_segment>
 801b92c:	4603      	mov	r3, r0
 801b92e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b930:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b934:	4618      	mov	r0, r3
 801b936:	372c      	adds	r7, #44	; 0x2c
 801b938:	46bd      	mov	sp, r7
 801b93a:	bd90      	pop	{r4, r7, pc}
 801b93c:	08022c6c 	.word	0x08022c6c
 801b940:	08023464 	.word	0x08023464
 801b944:	08022cc0 	.word	0x08022cc0

0801b948 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b948:	b580      	push	{r7, lr}
 801b94a:	b082      	sub	sp, #8
 801b94c:	af00      	add	r7, sp, #0
 801b94e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b950:	f7f9 feca 	bl	80156e8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b954:	4b0a      	ldr	r3, [pc, #40]	; (801b980 <tcpip_tcp_timer+0x38>)
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d103      	bne.n	801b964 <tcpip_tcp_timer+0x1c>
 801b95c:	4b09      	ldr	r3, [pc, #36]	; (801b984 <tcpip_tcp_timer+0x3c>)
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	2b00      	cmp	r3, #0
 801b962:	d005      	beq.n	801b970 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b964:	2200      	movs	r2, #0
 801b966:	4908      	ldr	r1, [pc, #32]	; (801b988 <tcpip_tcp_timer+0x40>)
 801b968:	20fa      	movs	r0, #250	; 0xfa
 801b96a:	f000 f8f3 	bl	801bb54 <sys_timeout>
 801b96e:	e003      	b.n	801b978 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b970:	4b06      	ldr	r3, [pc, #24]	; (801b98c <tcpip_tcp_timer+0x44>)
 801b972:	2200      	movs	r2, #0
 801b974:	601a      	str	r2, [r3, #0]
  }
}
 801b976:	bf00      	nop
 801b978:	bf00      	nop
 801b97a:	3708      	adds	r7, #8
 801b97c:	46bd      	mov	sp, r7
 801b97e:	bd80      	pop	{r7, pc}
 801b980:	2000bff4 	.word	0x2000bff4
 801b984:	2000bff8 	.word	0x2000bff8
 801b988:	0801b949 	.word	0x0801b949
 801b98c:	2000c040 	.word	0x2000c040

0801b990 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b990:	b580      	push	{r7, lr}
 801b992:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b994:	4b0a      	ldr	r3, [pc, #40]	; (801b9c0 <tcp_timer_needed+0x30>)
 801b996:	681b      	ldr	r3, [r3, #0]
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d10f      	bne.n	801b9bc <tcp_timer_needed+0x2c>
 801b99c:	4b09      	ldr	r3, [pc, #36]	; (801b9c4 <tcp_timer_needed+0x34>)
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d103      	bne.n	801b9ac <tcp_timer_needed+0x1c>
 801b9a4:	4b08      	ldr	r3, [pc, #32]	; (801b9c8 <tcp_timer_needed+0x38>)
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d007      	beq.n	801b9bc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b9ac:	4b04      	ldr	r3, [pc, #16]	; (801b9c0 <tcp_timer_needed+0x30>)
 801b9ae:	2201      	movs	r2, #1
 801b9b0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b9b2:	2200      	movs	r2, #0
 801b9b4:	4905      	ldr	r1, [pc, #20]	; (801b9cc <tcp_timer_needed+0x3c>)
 801b9b6:	20fa      	movs	r0, #250	; 0xfa
 801b9b8:	f000 f8cc 	bl	801bb54 <sys_timeout>
  }
}
 801b9bc:	bf00      	nop
 801b9be:	bd80      	pop	{r7, pc}
 801b9c0:	2000c040 	.word	0x2000c040
 801b9c4:	2000bff4 	.word	0x2000bff4
 801b9c8:	2000bff8 	.word	0x2000bff8
 801b9cc:	0801b949 	.word	0x0801b949

0801b9d0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b086      	sub	sp, #24
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	60f8      	str	r0, [r7, #12]
 801b9d8:	60b9      	str	r1, [r7, #8]
 801b9da:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b9dc:	200a      	movs	r0, #10
 801b9de:	f7f8 fc75 	bl	80142cc <memp_malloc>
 801b9e2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b9e4:	693b      	ldr	r3, [r7, #16]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d109      	bne.n	801b9fe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b9ea:	693b      	ldr	r3, [r7, #16]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d151      	bne.n	801ba94 <sys_timeout_abs+0xc4>
 801b9f0:	4b2a      	ldr	r3, [pc, #168]	; (801ba9c <sys_timeout_abs+0xcc>)
 801b9f2:	22be      	movs	r2, #190	; 0xbe
 801b9f4:	492a      	ldr	r1, [pc, #168]	; (801baa0 <sys_timeout_abs+0xd0>)
 801b9f6:	482b      	ldr	r0, [pc, #172]	; (801baa4 <sys_timeout_abs+0xd4>)
 801b9f8:	f003 fdd2 	bl	801f5a0 <iprintf>
    return;
 801b9fc:	e04a      	b.n	801ba94 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b9fe:	693b      	ldr	r3, [r7, #16]
 801ba00:	2200      	movs	r2, #0
 801ba02:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801ba04:	693b      	ldr	r3, [r7, #16]
 801ba06:	68ba      	ldr	r2, [r7, #8]
 801ba08:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801ba0a:	693b      	ldr	r3, [r7, #16]
 801ba0c:	687a      	ldr	r2, [r7, #4]
 801ba0e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801ba10:	693b      	ldr	r3, [r7, #16]
 801ba12:	68fa      	ldr	r2, [r7, #12]
 801ba14:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801ba16:	4b24      	ldr	r3, [pc, #144]	; (801baa8 <sys_timeout_abs+0xd8>)
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d103      	bne.n	801ba26 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801ba1e:	4a22      	ldr	r2, [pc, #136]	; (801baa8 <sys_timeout_abs+0xd8>)
 801ba20:	693b      	ldr	r3, [r7, #16]
 801ba22:	6013      	str	r3, [r2, #0]
    return;
 801ba24:	e037      	b.n	801ba96 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801ba26:	693b      	ldr	r3, [r7, #16]
 801ba28:	685a      	ldr	r2, [r3, #4]
 801ba2a:	4b1f      	ldr	r3, [pc, #124]	; (801baa8 <sys_timeout_abs+0xd8>)
 801ba2c:	681b      	ldr	r3, [r3, #0]
 801ba2e:	685b      	ldr	r3, [r3, #4]
 801ba30:	1ad3      	subs	r3, r2, r3
 801ba32:	0fdb      	lsrs	r3, r3, #31
 801ba34:	f003 0301 	and.w	r3, r3, #1
 801ba38:	b2db      	uxtb	r3, r3
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d007      	beq.n	801ba4e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801ba3e:	4b1a      	ldr	r3, [pc, #104]	; (801baa8 <sys_timeout_abs+0xd8>)
 801ba40:	681a      	ldr	r2, [r3, #0]
 801ba42:	693b      	ldr	r3, [r7, #16]
 801ba44:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801ba46:	4a18      	ldr	r2, [pc, #96]	; (801baa8 <sys_timeout_abs+0xd8>)
 801ba48:	693b      	ldr	r3, [r7, #16]
 801ba4a:	6013      	str	r3, [r2, #0]
 801ba4c:	e023      	b.n	801ba96 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801ba4e:	4b16      	ldr	r3, [pc, #88]	; (801baa8 <sys_timeout_abs+0xd8>)
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	617b      	str	r3, [r7, #20]
 801ba54:	e01a      	b.n	801ba8c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801ba56:	697b      	ldr	r3, [r7, #20]
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d00b      	beq.n	801ba76 <sys_timeout_abs+0xa6>
 801ba5e:	693b      	ldr	r3, [r7, #16]
 801ba60:	685a      	ldr	r2, [r3, #4]
 801ba62:	697b      	ldr	r3, [r7, #20]
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	685b      	ldr	r3, [r3, #4]
 801ba68:	1ad3      	subs	r3, r2, r3
 801ba6a:	0fdb      	lsrs	r3, r3, #31
 801ba6c:	f003 0301 	and.w	r3, r3, #1
 801ba70:	b2db      	uxtb	r3, r3
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d007      	beq.n	801ba86 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801ba76:	697b      	ldr	r3, [r7, #20]
 801ba78:	681a      	ldr	r2, [r3, #0]
 801ba7a:	693b      	ldr	r3, [r7, #16]
 801ba7c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801ba7e:	697b      	ldr	r3, [r7, #20]
 801ba80:	693a      	ldr	r2, [r7, #16]
 801ba82:	601a      	str	r2, [r3, #0]
        break;
 801ba84:	e007      	b.n	801ba96 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801ba86:	697b      	ldr	r3, [r7, #20]
 801ba88:	681b      	ldr	r3, [r3, #0]
 801ba8a:	617b      	str	r3, [r7, #20]
 801ba8c:	697b      	ldr	r3, [r7, #20]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d1e1      	bne.n	801ba56 <sys_timeout_abs+0x86>
 801ba92:	e000      	b.n	801ba96 <sys_timeout_abs+0xc6>
    return;
 801ba94:	bf00      	nop
      }
    }
  }
}
 801ba96:	3718      	adds	r7, #24
 801ba98:	46bd      	mov	sp, r7
 801ba9a:	bd80      	pop	{r7, pc}
 801ba9c:	08023488 	.word	0x08023488
 801baa0:	080234bc 	.word	0x080234bc
 801baa4:	080234fc 	.word	0x080234fc
 801baa8:	2000c038 	.word	0x2000c038

0801baac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801baac:	b580      	push	{r7, lr}
 801baae:	b086      	sub	sp, #24
 801bab0:	af00      	add	r7, sp, #0
 801bab2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801bab8:	697b      	ldr	r3, [r7, #20]
 801baba:	685b      	ldr	r3, [r3, #4]
 801babc:	4798      	blx	r3

  now = sys_now();
 801babe:	f7f2 f85d 	bl	800db7c <sys_now>
 801bac2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801bac4:	697b      	ldr	r3, [r7, #20]
 801bac6:	681a      	ldr	r2, [r3, #0]
 801bac8:	4b0f      	ldr	r3, [pc, #60]	; (801bb08 <lwip_cyclic_timer+0x5c>)
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	4413      	add	r3, r2
 801bace:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801bad0:	68fa      	ldr	r2, [r7, #12]
 801bad2:	693b      	ldr	r3, [r7, #16]
 801bad4:	1ad3      	subs	r3, r2, r3
 801bad6:	0fdb      	lsrs	r3, r3, #31
 801bad8:	f003 0301 	and.w	r3, r3, #1
 801badc:	b2db      	uxtb	r3, r3
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d009      	beq.n	801baf6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801bae2:	697b      	ldr	r3, [r7, #20]
 801bae4:	681a      	ldr	r2, [r3, #0]
 801bae6:	693b      	ldr	r3, [r7, #16]
 801bae8:	4413      	add	r3, r2
 801baea:	687a      	ldr	r2, [r7, #4]
 801baec:	4907      	ldr	r1, [pc, #28]	; (801bb0c <lwip_cyclic_timer+0x60>)
 801baee:	4618      	mov	r0, r3
 801baf0:	f7ff ff6e 	bl	801b9d0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801baf4:	e004      	b.n	801bb00 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801baf6:	687a      	ldr	r2, [r7, #4]
 801baf8:	4904      	ldr	r1, [pc, #16]	; (801bb0c <lwip_cyclic_timer+0x60>)
 801bafa:	68f8      	ldr	r0, [r7, #12]
 801bafc:	f7ff ff68 	bl	801b9d0 <sys_timeout_abs>
}
 801bb00:	bf00      	nop
 801bb02:	3718      	adds	r7, #24
 801bb04:	46bd      	mov	sp, r7
 801bb06:	bd80      	pop	{r7, pc}
 801bb08:	2000c03c 	.word	0x2000c03c
 801bb0c:	0801baad 	.word	0x0801baad

0801bb10 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801bb10:	b580      	push	{r7, lr}
 801bb12:	b082      	sub	sp, #8
 801bb14:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bb16:	2301      	movs	r3, #1
 801bb18:	607b      	str	r3, [r7, #4]
 801bb1a:	e00e      	b.n	801bb3a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801bb1c:	4a0b      	ldr	r2, [pc, #44]	; (801bb4c <sys_timeouts_init+0x3c>)
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	00db      	lsls	r3, r3, #3
 801bb28:	4a08      	ldr	r2, [pc, #32]	; (801bb4c <sys_timeouts_init+0x3c>)
 801bb2a:	4413      	add	r3, r2
 801bb2c:	461a      	mov	r2, r3
 801bb2e:	4908      	ldr	r1, [pc, #32]	; (801bb50 <sys_timeouts_init+0x40>)
 801bb30:	f000 f810 	bl	801bb54 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	3301      	adds	r3, #1
 801bb38:	607b      	str	r3, [r7, #4]
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	2b02      	cmp	r3, #2
 801bb3e:	d9ed      	bls.n	801bb1c <sys_timeouts_init+0xc>
  }
}
 801bb40:	bf00      	nop
 801bb42:	bf00      	nop
 801bb44:	3708      	adds	r7, #8
 801bb46:	46bd      	mov	sp, r7
 801bb48:	bd80      	pop	{r7, pc}
 801bb4a:	bf00      	nop
 801bb4c:	080240c8 	.word	0x080240c8
 801bb50:	0801baad 	.word	0x0801baad

0801bb54 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801bb54:	b580      	push	{r7, lr}
 801bb56:	b086      	sub	sp, #24
 801bb58:	af00      	add	r7, sp, #0
 801bb5a:	60f8      	str	r0, [r7, #12]
 801bb5c:	60b9      	str	r1, [r7, #8]
 801bb5e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bb66:	d306      	bcc.n	801bb76 <sys_timeout+0x22>
 801bb68:	4b0a      	ldr	r3, [pc, #40]	; (801bb94 <sys_timeout+0x40>)
 801bb6a:	f240 1229 	movw	r2, #297	; 0x129
 801bb6e:	490a      	ldr	r1, [pc, #40]	; (801bb98 <sys_timeout+0x44>)
 801bb70:	480a      	ldr	r0, [pc, #40]	; (801bb9c <sys_timeout+0x48>)
 801bb72:	f003 fd15 	bl	801f5a0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801bb76:	f7f2 f801 	bl	800db7c <sys_now>
 801bb7a:	4602      	mov	r2, r0
 801bb7c:	68fb      	ldr	r3, [r7, #12]
 801bb7e:	4413      	add	r3, r2
 801bb80:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801bb82:	687a      	ldr	r2, [r7, #4]
 801bb84:	68b9      	ldr	r1, [r7, #8]
 801bb86:	6978      	ldr	r0, [r7, #20]
 801bb88:	f7ff ff22 	bl	801b9d0 <sys_timeout_abs>
#endif
}
 801bb8c:	bf00      	nop
 801bb8e:	3718      	adds	r7, #24
 801bb90:	46bd      	mov	sp, r7
 801bb92:	bd80      	pop	{r7, pc}
 801bb94:	08023488 	.word	0x08023488
 801bb98:	08023524 	.word	0x08023524
 801bb9c:	080234fc 	.word	0x080234fc

0801bba0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801bba0:	b580      	push	{r7, lr}
 801bba2:	b084      	sub	sp, #16
 801bba4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801bba6:	f7f1 ffe9 	bl	800db7c <sys_now>
 801bbaa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801bbac:	4b17      	ldr	r3, [pc, #92]	; (801bc0c <sys_check_timeouts+0x6c>)
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801bbb2:	68bb      	ldr	r3, [r7, #8]
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d022      	beq.n	801bbfe <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801bbb8:	68bb      	ldr	r3, [r7, #8]
 801bbba:	685b      	ldr	r3, [r3, #4]
 801bbbc:	68fa      	ldr	r2, [r7, #12]
 801bbbe:	1ad3      	subs	r3, r2, r3
 801bbc0:	0fdb      	lsrs	r3, r3, #31
 801bbc2:	f003 0301 	and.w	r3, r3, #1
 801bbc6:	b2db      	uxtb	r3, r3
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d11a      	bne.n	801bc02 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801bbcc:	68bb      	ldr	r3, [r7, #8]
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	4a0e      	ldr	r2, [pc, #56]	; (801bc0c <sys_check_timeouts+0x6c>)
 801bbd2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801bbd4:	68bb      	ldr	r3, [r7, #8]
 801bbd6:	689b      	ldr	r3, [r3, #8]
 801bbd8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801bbda:	68bb      	ldr	r3, [r7, #8]
 801bbdc:	68db      	ldr	r3, [r3, #12]
 801bbde:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801bbe0:	68bb      	ldr	r3, [r7, #8]
 801bbe2:	685b      	ldr	r3, [r3, #4]
 801bbe4:	4a0a      	ldr	r2, [pc, #40]	; (801bc10 <sys_check_timeouts+0x70>)
 801bbe6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801bbe8:	68b9      	ldr	r1, [r7, #8]
 801bbea:	200a      	movs	r0, #10
 801bbec:	f7f8 fbe4 	bl	80143b8 <memp_free>
    if (handler != NULL) {
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d0da      	beq.n	801bbac <sys_check_timeouts+0xc>
      handler(arg);
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	6838      	ldr	r0, [r7, #0]
 801bbfa:	4798      	blx	r3
  do {
 801bbfc:	e7d6      	b.n	801bbac <sys_check_timeouts+0xc>
      return;
 801bbfe:	bf00      	nop
 801bc00:	e000      	b.n	801bc04 <sys_check_timeouts+0x64>
      return;
 801bc02:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801bc04:	3710      	adds	r7, #16
 801bc06:	46bd      	mov	sp, r7
 801bc08:	bd80      	pop	{r7, pc}
 801bc0a:	bf00      	nop
 801bc0c:	2000c038 	.word	0x2000c038
 801bc10:	2000c03c 	.word	0x2000c03c

0801bc14 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801bc14:	b580      	push	{r7, lr}
 801bc16:	b082      	sub	sp, #8
 801bc18:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801bc1a:	4b16      	ldr	r3, [pc, #88]	; (801bc74 <sys_timeouts_sleeptime+0x60>)
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d102      	bne.n	801bc28 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801bc22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bc26:	e020      	b.n	801bc6a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801bc28:	f7f1 ffa8 	bl	800db7c <sys_now>
 801bc2c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801bc2e:	4b11      	ldr	r3, [pc, #68]	; (801bc74 <sys_timeouts_sleeptime+0x60>)
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	685a      	ldr	r2, [r3, #4]
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	1ad3      	subs	r3, r2, r3
 801bc38:	0fdb      	lsrs	r3, r3, #31
 801bc3a:	f003 0301 	and.w	r3, r3, #1
 801bc3e:	b2db      	uxtb	r3, r3
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d001      	beq.n	801bc48 <sys_timeouts_sleeptime+0x34>
    return 0;
 801bc44:	2300      	movs	r3, #0
 801bc46:	e010      	b.n	801bc6a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801bc48:	4b0a      	ldr	r3, [pc, #40]	; (801bc74 <sys_timeouts_sleeptime+0x60>)
 801bc4a:	681b      	ldr	r3, [r3, #0]
 801bc4c:	685a      	ldr	r2, [r3, #4]
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	1ad3      	subs	r3, r2, r3
 801bc52:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801bc54:	683b      	ldr	r3, [r7, #0]
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	da06      	bge.n	801bc68 <sys_timeouts_sleeptime+0x54>
 801bc5a:	4b07      	ldr	r3, [pc, #28]	; (801bc78 <sys_timeouts_sleeptime+0x64>)
 801bc5c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801bc60:	4906      	ldr	r1, [pc, #24]	; (801bc7c <sys_timeouts_sleeptime+0x68>)
 801bc62:	4807      	ldr	r0, [pc, #28]	; (801bc80 <sys_timeouts_sleeptime+0x6c>)
 801bc64:	f003 fc9c 	bl	801f5a0 <iprintf>
    return ret;
 801bc68:	683b      	ldr	r3, [r7, #0]
  }
}
 801bc6a:	4618      	mov	r0, r3
 801bc6c:	3708      	adds	r7, #8
 801bc6e:	46bd      	mov	sp, r7
 801bc70:	bd80      	pop	{r7, pc}
 801bc72:	bf00      	nop
 801bc74:	2000c038 	.word	0x2000c038
 801bc78:	08023488 	.word	0x08023488
 801bc7c:	0802355c 	.word	0x0802355c
 801bc80:	080234fc 	.word	0x080234fc

0801bc84 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801bc84:	b580      	push	{r7, lr}
 801bc86:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801bc88:	f003 fca2 	bl	801f5d0 <rand>
 801bc8c:	4603      	mov	r3, r0
 801bc8e:	b29b      	uxth	r3, r3
 801bc90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801bc94:	b29b      	uxth	r3, r3
 801bc96:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801bc9a:	b29a      	uxth	r2, r3
 801bc9c:	4b01      	ldr	r3, [pc, #4]	; (801bca4 <udp_init+0x20>)
 801bc9e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801bca0:	bf00      	nop
 801bca2:	bd80      	pop	{r7, pc}
 801bca4:	20000030 	.word	0x20000030

0801bca8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801bca8:	b480      	push	{r7}
 801bcaa:	b083      	sub	sp, #12
 801bcac:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801bcae:	2300      	movs	r3, #0
 801bcb0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801bcb2:	4b17      	ldr	r3, [pc, #92]	; (801bd10 <udp_new_port+0x68>)
 801bcb4:	881b      	ldrh	r3, [r3, #0]
 801bcb6:	1c5a      	adds	r2, r3, #1
 801bcb8:	b291      	uxth	r1, r2
 801bcba:	4a15      	ldr	r2, [pc, #84]	; (801bd10 <udp_new_port+0x68>)
 801bcbc:	8011      	strh	r1, [r2, #0]
 801bcbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bcc2:	4293      	cmp	r3, r2
 801bcc4:	d103      	bne.n	801bcce <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801bcc6:	4b12      	ldr	r3, [pc, #72]	; (801bd10 <udp_new_port+0x68>)
 801bcc8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801bccc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bcce:	4b11      	ldr	r3, [pc, #68]	; (801bd14 <udp_new_port+0x6c>)
 801bcd0:	681b      	ldr	r3, [r3, #0]
 801bcd2:	603b      	str	r3, [r7, #0]
 801bcd4:	e011      	b.n	801bcfa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801bcd6:	683b      	ldr	r3, [r7, #0]
 801bcd8:	8a5a      	ldrh	r2, [r3, #18]
 801bcda:	4b0d      	ldr	r3, [pc, #52]	; (801bd10 <udp_new_port+0x68>)
 801bcdc:	881b      	ldrh	r3, [r3, #0]
 801bcde:	429a      	cmp	r2, r3
 801bce0:	d108      	bne.n	801bcf4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801bce2:	88fb      	ldrh	r3, [r7, #6]
 801bce4:	3301      	adds	r3, #1
 801bce6:	80fb      	strh	r3, [r7, #6]
 801bce8:	88fb      	ldrh	r3, [r7, #6]
 801bcea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801bcee:	d3e0      	bcc.n	801bcb2 <udp_new_port+0xa>
        return 0;
 801bcf0:	2300      	movs	r3, #0
 801bcf2:	e007      	b.n	801bd04 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bcf4:	683b      	ldr	r3, [r7, #0]
 801bcf6:	68db      	ldr	r3, [r3, #12]
 801bcf8:	603b      	str	r3, [r7, #0]
 801bcfa:	683b      	ldr	r3, [r7, #0]
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	d1ea      	bne.n	801bcd6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801bd00:	4b03      	ldr	r3, [pc, #12]	; (801bd10 <udp_new_port+0x68>)
 801bd02:	881b      	ldrh	r3, [r3, #0]
}
 801bd04:	4618      	mov	r0, r3
 801bd06:	370c      	adds	r7, #12
 801bd08:	46bd      	mov	sp, r7
 801bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd0e:	4770      	bx	lr
 801bd10:	20000030 	.word	0x20000030
 801bd14:	2000c044 	.word	0x2000c044

0801bd18 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801bd18:	b580      	push	{r7, lr}
 801bd1a:	b084      	sub	sp, #16
 801bd1c:	af00      	add	r7, sp, #0
 801bd1e:	60f8      	str	r0, [r7, #12]
 801bd20:	60b9      	str	r1, [r7, #8]
 801bd22:	4613      	mov	r3, r2
 801bd24:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801bd26:	68fb      	ldr	r3, [r7, #12]
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d105      	bne.n	801bd38 <udp_input_local_match+0x20>
 801bd2c:	4b27      	ldr	r3, [pc, #156]	; (801bdcc <udp_input_local_match+0xb4>)
 801bd2e:	2287      	movs	r2, #135	; 0x87
 801bd30:	4927      	ldr	r1, [pc, #156]	; (801bdd0 <udp_input_local_match+0xb8>)
 801bd32:	4828      	ldr	r0, [pc, #160]	; (801bdd4 <udp_input_local_match+0xbc>)
 801bd34:	f003 fc34 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801bd38:	68bb      	ldr	r3, [r7, #8]
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d105      	bne.n	801bd4a <udp_input_local_match+0x32>
 801bd3e:	4b23      	ldr	r3, [pc, #140]	; (801bdcc <udp_input_local_match+0xb4>)
 801bd40:	2288      	movs	r2, #136	; 0x88
 801bd42:	4925      	ldr	r1, [pc, #148]	; (801bdd8 <udp_input_local_match+0xc0>)
 801bd44:	4823      	ldr	r0, [pc, #140]	; (801bdd4 <udp_input_local_match+0xbc>)
 801bd46:	f003 fc2b 	bl	801f5a0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	7a1b      	ldrb	r3, [r3, #8]
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d00b      	beq.n	801bd6a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	7a1a      	ldrb	r2, [r3, #8]
 801bd56:	4b21      	ldr	r3, [pc, #132]	; (801bddc <udp_input_local_match+0xc4>)
 801bd58:	685b      	ldr	r3, [r3, #4]
 801bd5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bd5e:	3301      	adds	r3, #1
 801bd60:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bd62:	429a      	cmp	r2, r3
 801bd64:	d001      	beq.n	801bd6a <udp_input_local_match+0x52>
    return 0;
 801bd66:	2300      	movs	r3, #0
 801bd68:	e02b      	b.n	801bdc2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801bd6a:	79fb      	ldrb	r3, [r7, #7]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d018      	beq.n	801bda2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bd70:	68fb      	ldr	r3, [r7, #12]
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d013      	beq.n	801bd9e <udp_input_local_match+0x86>
 801bd76:	68fb      	ldr	r3, [r7, #12]
 801bd78:	681b      	ldr	r3, [r3, #0]
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d00f      	beq.n	801bd9e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801bd7e:	4b17      	ldr	r3, [pc, #92]	; (801bddc <udp_input_local_match+0xc4>)
 801bd80:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bd82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bd86:	d00a      	beq.n	801bd9e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	681a      	ldr	r2, [r3, #0]
 801bd8c:	4b13      	ldr	r3, [pc, #76]	; (801bddc <udp_input_local_match+0xc4>)
 801bd8e:	695b      	ldr	r3, [r3, #20]
 801bd90:	405a      	eors	r2, r3
 801bd92:	68bb      	ldr	r3, [r7, #8]
 801bd94:	3308      	adds	r3, #8
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d110      	bne.n	801bdc0 <udp_input_local_match+0xa8>
          return 1;
 801bd9e:	2301      	movs	r3, #1
 801bda0:	e00f      	b.n	801bdc2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801bda2:	68fb      	ldr	r3, [r7, #12]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d009      	beq.n	801bdbc <udp_input_local_match+0xa4>
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d005      	beq.n	801bdbc <udp_input_local_match+0xa4>
 801bdb0:	68fb      	ldr	r3, [r7, #12]
 801bdb2:	681a      	ldr	r2, [r3, #0]
 801bdb4:	4b09      	ldr	r3, [pc, #36]	; (801bddc <udp_input_local_match+0xc4>)
 801bdb6:	695b      	ldr	r3, [r3, #20]
 801bdb8:	429a      	cmp	r2, r3
 801bdba:	d101      	bne.n	801bdc0 <udp_input_local_match+0xa8>
        return 1;
 801bdbc:	2301      	movs	r3, #1
 801bdbe:	e000      	b.n	801bdc2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801bdc0:	2300      	movs	r3, #0
}
 801bdc2:	4618      	mov	r0, r3
 801bdc4:	3710      	adds	r7, #16
 801bdc6:	46bd      	mov	sp, r7
 801bdc8:	bd80      	pop	{r7, pc}
 801bdca:	bf00      	nop
 801bdcc:	08023570 	.word	0x08023570
 801bdd0:	080235a0 	.word	0x080235a0
 801bdd4:	080235c4 	.word	0x080235c4
 801bdd8:	080235ec 	.word	0x080235ec
 801bddc:	200066d4 	.word	0x200066d4

0801bde0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801bde0:	b590      	push	{r4, r7, lr}
 801bde2:	b08d      	sub	sp, #52	; 0x34
 801bde4:	af02      	add	r7, sp, #8
 801bde6:	6078      	str	r0, [r7, #4]
 801bde8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801bdea:	2300      	movs	r3, #0
 801bdec:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d105      	bne.n	801be00 <udp_input+0x20>
 801bdf4:	4b7c      	ldr	r3, [pc, #496]	; (801bfe8 <udp_input+0x208>)
 801bdf6:	22cf      	movs	r2, #207	; 0xcf
 801bdf8:	497c      	ldr	r1, [pc, #496]	; (801bfec <udp_input+0x20c>)
 801bdfa:	487d      	ldr	r0, [pc, #500]	; (801bff0 <udp_input+0x210>)
 801bdfc:	f003 fbd0 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801be00:	683b      	ldr	r3, [r7, #0]
 801be02:	2b00      	cmp	r3, #0
 801be04:	d105      	bne.n	801be12 <udp_input+0x32>
 801be06:	4b78      	ldr	r3, [pc, #480]	; (801bfe8 <udp_input+0x208>)
 801be08:	22d0      	movs	r2, #208	; 0xd0
 801be0a:	497a      	ldr	r1, [pc, #488]	; (801bff4 <udp_input+0x214>)
 801be0c:	4878      	ldr	r0, [pc, #480]	; (801bff0 <udp_input+0x210>)
 801be0e:	f003 fbc7 	bl	801f5a0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	895b      	ldrh	r3, [r3, #10]
 801be16:	2b07      	cmp	r3, #7
 801be18:	d803      	bhi.n	801be22 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801be1a:	6878      	ldr	r0, [r7, #4]
 801be1c:	f7f9 f970 	bl	8015100 <pbuf_free>
    goto end;
 801be20:	e0de      	b.n	801bfe0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	685b      	ldr	r3, [r3, #4]
 801be26:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801be28:	4b73      	ldr	r3, [pc, #460]	; (801bff8 <udp_input+0x218>)
 801be2a:	695b      	ldr	r3, [r3, #20]
 801be2c:	4a72      	ldr	r2, [pc, #456]	; (801bff8 <udp_input+0x218>)
 801be2e:	6812      	ldr	r2, [r2, #0]
 801be30:	4611      	mov	r1, r2
 801be32:	4618      	mov	r0, r3
 801be34:	f001 ffee 	bl	801de14 <ip4_addr_isbroadcast_u32>
 801be38:	4603      	mov	r3, r0
 801be3a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801be3c:	697b      	ldr	r3, [r7, #20]
 801be3e:	881b      	ldrh	r3, [r3, #0]
 801be40:	b29b      	uxth	r3, r3
 801be42:	4618      	mov	r0, r3
 801be44:	f7f7 fd6a 	bl	801391c <lwip_htons>
 801be48:	4603      	mov	r3, r0
 801be4a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801be4c:	697b      	ldr	r3, [r7, #20]
 801be4e:	885b      	ldrh	r3, [r3, #2]
 801be50:	b29b      	uxth	r3, r3
 801be52:	4618      	mov	r0, r3
 801be54:	f7f7 fd62 	bl	801391c <lwip_htons>
 801be58:	4603      	mov	r3, r0
 801be5a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801be5c:	2300      	movs	r3, #0
 801be5e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801be60:	2300      	movs	r3, #0
 801be62:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801be64:	2300      	movs	r3, #0
 801be66:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801be68:	4b64      	ldr	r3, [pc, #400]	; (801bffc <udp_input+0x21c>)
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	627b      	str	r3, [r7, #36]	; 0x24
 801be6e:	e054      	b.n	801bf1a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801be70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be72:	8a5b      	ldrh	r3, [r3, #18]
 801be74:	89fa      	ldrh	r2, [r7, #14]
 801be76:	429a      	cmp	r2, r3
 801be78:	d14a      	bne.n	801bf10 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801be7a:	7cfb      	ldrb	r3, [r7, #19]
 801be7c:	461a      	mov	r2, r3
 801be7e:	6839      	ldr	r1, [r7, #0]
 801be80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801be82:	f7ff ff49 	bl	801bd18 <udp_input_local_match>
 801be86:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801be88:	2b00      	cmp	r3, #0
 801be8a:	d041      	beq.n	801bf10 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801be8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be8e:	7c1b      	ldrb	r3, [r3, #16]
 801be90:	f003 0304 	and.w	r3, r3, #4
 801be94:	2b00      	cmp	r3, #0
 801be96:	d11d      	bne.n	801bed4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801be98:	69fb      	ldr	r3, [r7, #28]
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d102      	bne.n	801bea4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bea0:	61fb      	str	r3, [r7, #28]
 801bea2:	e017      	b.n	801bed4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801bea4:	7cfb      	ldrb	r3, [r7, #19]
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	d014      	beq.n	801bed4 <udp_input+0xf4>
 801beaa:	4b53      	ldr	r3, [pc, #332]	; (801bff8 <udp_input+0x218>)
 801beac:	695b      	ldr	r3, [r3, #20]
 801beae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801beb2:	d10f      	bne.n	801bed4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801beb4:	69fb      	ldr	r3, [r7, #28]
 801beb6:	681a      	ldr	r2, [r3, #0]
 801beb8:	683b      	ldr	r3, [r7, #0]
 801beba:	3304      	adds	r3, #4
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	429a      	cmp	r2, r3
 801bec0:	d008      	beq.n	801bed4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801bec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bec4:	681a      	ldr	r2, [r3, #0]
 801bec6:	683b      	ldr	r3, [r7, #0]
 801bec8:	3304      	adds	r3, #4
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	429a      	cmp	r2, r3
 801bece:	d101      	bne.n	801bed4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bed2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bed6:	8a9b      	ldrh	r3, [r3, #20]
 801bed8:	8a3a      	ldrh	r2, [r7, #16]
 801beda:	429a      	cmp	r2, r3
 801bedc:	d118      	bne.n	801bf10 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801bede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bee0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d005      	beq.n	801bef2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801bee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bee8:	685a      	ldr	r2, [r3, #4]
 801beea:	4b43      	ldr	r3, [pc, #268]	; (801bff8 <udp_input+0x218>)
 801beec:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801beee:	429a      	cmp	r2, r3
 801bef0:	d10e      	bne.n	801bf10 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801bef2:	6a3b      	ldr	r3, [r7, #32]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d014      	beq.n	801bf22 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801bef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801befa:	68da      	ldr	r2, [r3, #12]
 801befc:	6a3b      	ldr	r3, [r7, #32]
 801befe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801bf00:	4b3e      	ldr	r3, [pc, #248]	; (801bffc <udp_input+0x21c>)
 801bf02:	681a      	ldr	r2, [r3, #0]
 801bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf06:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801bf08:	4a3c      	ldr	r2, [pc, #240]	; (801bffc <udp_input+0x21c>)
 801bf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf0c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801bf0e:	e008      	b.n	801bf22 <udp_input+0x142>
      }
    }

    prev = pcb;
 801bf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf12:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf16:	68db      	ldr	r3, [r3, #12]
 801bf18:	627b      	str	r3, [r7, #36]	; 0x24
 801bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	d1a7      	bne.n	801be70 <udp_input+0x90>
 801bf20:	e000      	b.n	801bf24 <udp_input+0x144>
        break;
 801bf22:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801bf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d101      	bne.n	801bf2e <udp_input+0x14e>
    pcb = uncon_pcb;
 801bf2a:	69fb      	ldr	r3, [r7, #28]
 801bf2c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801bf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d002      	beq.n	801bf3a <udp_input+0x15a>
    for_us = 1;
 801bf34:	2301      	movs	r3, #1
 801bf36:	76fb      	strb	r3, [r7, #27]
 801bf38:	e00a      	b.n	801bf50 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801bf3a:	683b      	ldr	r3, [r7, #0]
 801bf3c:	3304      	adds	r3, #4
 801bf3e:	681a      	ldr	r2, [r3, #0]
 801bf40:	4b2d      	ldr	r3, [pc, #180]	; (801bff8 <udp_input+0x218>)
 801bf42:	695b      	ldr	r3, [r3, #20]
 801bf44:	429a      	cmp	r2, r3
 801bf46:	bf0c      	ite	eq
 801bf48:	2301      	moveq	r3, #1
 801bf4a:	2300      	movne	r3, #0
 801bf4c:	b2db      	uxtb	r3, r3
 801bf4e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801bf50:	7efb      	ldrb	r3, [r7, #27]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d041      	beq.n	801bfda <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801bf56:	2108      	movs	r1, #8
 801bf58:	6878      	ldr	r0, [r7, #4]
 801bf5a:	f7f9 f84b 	bl	8014ff4 <pbuf_remove_header>
 801bf5e:	4603      	mov	r3, r0
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d00a      	beq.n	801bf7a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801bf64:	4b20      	ldr	r3, [pc, #128]	; (801bfe8 <udp_input+0x208>)
 801bf66:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801bf6a:	4925      	ldr	r1, [pc, #148]	; (801c000 <udp_input+0x220>)
 801bf6c:	4820      	ldr	r0, [pc, #128]	; (801bff0 <udp_input+0x210>)
 801bf6e:	f003 fb17 	bl	801f5a0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801bf72:	6878      	ldr	r0, [r7, #4]
 801bf74:	f7f9 f8c4 	bl	8015100 <pbuf_free>
      goto end;
 801bf78:	e032      	b.n	801bfe0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801bf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d012      	beq.n	801bfa6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801bf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf82:	699b      	ldr	r3, [r3, #24]
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	d00a      	beq.n	801bf9e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf8a:	699c      	ldr	r4, [r3, #24]
 801bf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf8e:	69d8      	ldr	r0, [r3, #28]
 801bf90:	8a3b      	ldrh	r3, [r7, #16]
 801bf92:	9300      	str	r3, [sp, #0]
 801bf94:	4b1b      	ldr	r3, [pc, #108]	; (801c004 <udp_input+0x224>)
 801bf96:	687a      	ldr	r2, [r7, #4]
 801bf98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bf9a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801bf9c:	e021      	b.n	801bfe2 <udp_input+0x202>
        pbuf_free(p);
 801bf9e:	6878      	ldr	r0, [r7, #4]
 801bfa0:	f7f9 f8ae 	bl	8015100 <pbuf_free>
        goto end;
 801bfa4:	e01c      	b.n	801bfe0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801bfa6:	7cfb      	ldrb	r3, [r7, #19]
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d112      	bne.n	801bfd2 <udp_input+0x1f2>
 801bfac:	4b12      	ldr	r3, [pc, #72]	; (801bff8 <udp_input+0x218>)
 801bfae:	695b      	ldr	r3, [r3, #20]
 801bfb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bfb4:	2be0      	cmp	r3, #224	; 0xe0
 801bfb6:	d00c      	beq.n	801bfd2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801bfb8:	4b0f      	ldr	r3, [pc, #60]	; (801bff8 <udp_input+0x218>)
 801bfba:	899b      	ldrh	r3, [r3, #12]
 801bfbc:	3308      	adds	r3, #8
 801bfbe:	b29b      	uxth	r3, r3
 801bfc0:	b21b      	sxth	r3, r3
 801bfc2:	4619      	mov	r1, r3
 801bfc4:	6878      	ldr	r0, [r7, #4]
 801bfc6:	f7f9 f888 	bl	80150da <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801bfca:	2103      	movs	r1, #3
 801bfcc:	6878      	ldr	r0, [r7, #4]
 801bfce:	f001 fc01 	bl	801d7d4 <icmp_dest_unreach>
      pbuf_free(p);
 801bfd2:	6878      	ldr	r0, [r7, #4]
 801bfd4:	f7f9 f894 	bl	8015100 <pbuf_free>
  return;
 801bfd8:	e003      	b.n	801bfe2 <udp_input+0x202>
    pbuf_free(p);
 801bfda:	6878      	ldr	r0, [r7, #4]
 801bfdc:	f7f9 f890 	bl	8015100 <pbuf_free>
  return;
 801bfe0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801bfe2:	372c      	adds	r7, #44	; 0x2c
 801bfe4:	46bd      	mov	sp, r7
 801bfe6:	bd90      	pop	{r4, r7, pc}
 801bfe8:	08023570 	.word	0x08023570
 801bfec:	08023614 	.word	0x08023614
 801bff0:	080235c4 	.word	0x080235c4
 801bff4:	0802362c 	.word	0x0802362c
 801bff8:	200066d4 	.word	0x200066d4
 801bffc:	2000c044 	.word	0x2000c044
 801c000:	08023648 	.word	0x08023648
 801c004:	200066e4 	.word	0x200066e4

0801c008 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801c008:	b580      	push	{r7, lr}
 801c00a:	b082      	sub	sp, #8
 801c00c:	af00      	add	r7, sp, #0
 801c00e:	6078      	str	r0, [r7, #4]
 801c010:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	2b00      	cmp	r3, #0
 801c016:	d109      	bne.n	801c02c <udp_send+0x24>
 801c018:	4b11      	ldr	r3, [pc, #68]	; (801c060 <udp_send+0x58>)
 801c01a:	f240 12d5 	movw	r2, #469	; 0x1d5
 801c01e:	4911      	ldr	r1, [pc, #68]	; (801c064 <udp_send+0x5c>)
 801c020:	4811      	ldr	r0, [pc, #68]	; (801c068 <udp_send+0x60>)
 801c022:	f003 fabd 	bl	801f5a0 <iprintf>
 801c026:	f06f 030f 	mvn.w	r3, #15
 801c02a:	e015      	b.n	801c058 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801c02c:	683b      	ldr	r3, [r7, #0]
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d109      	bne.n	801c046 <udp_send+0x3e>
 801c032:	4b0b      	ldr	r3, [pc, #44]	; (801c060 <udp_send+0x58>)
 801c034:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801c038:	490c      	ldr	r1, [pc, #48]	; (801c06c <udp_send+0x64>)
 801c03a:	480b      	ldr	r0, [pc, #44]	; (801c068 <udp_send+0x60>)
 801c03c:	f003 fab0 	bl	801f5a0 <iprintf>
 801c040:	f06f 030f 	mvn.w	r3, #15
 801c044:	e008      	b.n	801c058 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	1d1a      	adds	r2, r3, #4
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	8a9b      	ldrh	r3, [r3, #20]
 801c04e:	6839      	ldr	r1, [r7, #0]
 801c050:	6878      	ldr	r0, [r7, #4]
 801c052:	f000 f80d 	bl	801c070 <udp_sendto>
 801c056:	4603      	mov	r3, r0
}
 801c058:	4618      	mov	r0, r3
 801c05a:	3708      	adds	r7, #8
 801c05c:	46bd      	mov	sp, r7
 801c05e:	bd80      	pop	{r7, pc}
 801c060:	08023570 	.word	0x08023570
 801c064:	08023664 	.word	0x08023664
 801c068:	080235c4 	.word	0x080235c4
 801c06c:	0802367c 	.word	0x0802367c

0801c070 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801c070:	b580      	push	{r7, lr}
 801c072:	b088      	sub	sp, #32
 801c074:	af02      	add	r7, sp, #8
 801c076:	60f8      	str	r0, [r7, #12]
 801c078:	60b9      	str	r1, [r7, #8]
 801c07a:	607a      	str	r2, [r7, #4]
 801c07c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801c07e:	68fb      	ldr	r3, [r7, #12]
 801c080:	2b00      	cmp	r3, #0
 801c082:	d109      	bne.n	801c098 <udp_sendto+0x28>
 801c084:	4b23      	ldr	r3, [pc, #140]	; (801c114 <udp_sendto+0xa4>)
 801c086:	f44f 7206 	mov.w	r2, #536	; 0x218
 801c08a:	4923      	ldr	r1, [pc, #140]	; (801c118 <udp_sendto+0xa8>)
 801c08c:	4823      	ldr	r0, [pc, #140]	; (801c11c <udp_sendto+0xac>)
 801c08e:	f003 fa87 	bl	801f5a0 <iprintf>
 801c092:	f06f 030f 	mvn.w	r3, #15
 801c096:	e038      	b.n	801c10a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801c098:	68bb      	ldr	r3, [r7, #8]
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d109      	bne.n	801c0b2 <udp_sendto+0x42>
 801c09e:	4b1d      	ldr	r3, [pc, #116]	; (801c114 <udp_sendto+0xa4>)
 801c0a0:	f240 2219 	movw	r2, #537	; 0x219
 801c0a4:	491e      	ldr	r1, [pc, #120]	; (801c120 <udp_sendto+0xb0>)
 801c0a6:	481d      	ldr	r0, [pc, #116]	; (801c11c <udp_sendto+0xac>)
 801c0a8:	f003 fa7a 	bl	801f5a0 <iprintf>
 801c0ac:	f06f 030f 	mvn.w	r3, #15
 801c0b0:	e02b      	b.n	801c10a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d109      	bne.n	801c0cc <udp_sendto+0x5c>
 801c0b8:	4b16      	ldr	r3, [pc, #88]	; (801c114 <udp_sendto+0xa4>)
 801c0ba:	f240 221a 	movw	r2, #538	; 0x21a
 801c0be:	4919      	ldr	r1, [pc, #100]	; (801c124 <udp_sendto+0xb4>)
 801c0c0:	4816      	ldr	r0, [pc, #88]	; (801c11c <udp_sendto+0xac>)
 801c0c2:	f003 fa6d 	bl	801f5a0 <iprintf>
 801c0c6:	f06f 030f 	mvn.w	r3, #15
 801c0ca:	e01e      	b.n	801c10a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801c0cc:	68fb      	ldr	r3, [r7, #12]
 801c0ce:	7a1b      	ldrb	r3, [r3, #8]
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	d006      	beq.n	801c0e2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801c0d4:	68fb      	ldr	r3, [r7, #12]
 801c0d6:	7a1b      	ldrb	r3, [r3, #8]
 801c0d8:	4618      	mov	r0, r3
 801c0da:	f7f8 fc83 	bl	80149e4 <netif_get_by_index>
 801c0de:	6178      	str	r0, [r7, #20]
 801c0e0:	e003      	b.n	801c0ea <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801c0e2:	6878      	ldr	r0, [r7, #4]
 801c0e4:	f001 fc00 	bl	801d8e8 <ip4_route>
 801c0e8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801c0ea:	697b      	ldr	r3, [r7, #20]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d102      	bne.n	801c0f6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801c0f0:	f06f 0303 	mvn.w	r3, #3
 801c0f4:	e009      	b.n	801c10a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801c0f6:	887a      	ldrh	r2, [r7, #2]
 801c0f8:	697b      	ldr	r3, [r7, #20]
 801c0fa:	9300      	str	r3, [sp, #0]
 801c0fc:	4613      	mov	r3, r2
 801c0fe:	687a      	ldr	r2, [r7, #4]
 801c100:	68b9      	ldr	r1, [r7, #8]
 801c102:	68f8      	ldr	r0, [r7, #12]
 801c104:	f000 f810 	bl	801c128 <udp_sendto_if>
 801c108:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c10a:	4618      	mov	r0, r3
 801c10c:	3718      	adds	r7, #24
 801c10e:	46bd      	mov	sp, r7
 801c110:	bd80      	pop	{r7, pc}
 801c112:	bf00      	nop
 801c114:	08023570 	.word	0x08023570
 801c118:	08023694 	.word	0x08023694
 801c11c:	080235c4 	.word	0x080235c4
 801c120:	080236ac 	.word	0x080236ac
 801c124:	080236c8 	.word	0x080236c8

0801c128 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801c128:	b580      	push	{r7, lr}
 801c12a:	b088      	sub	sp, #32
 801c12c:	af02      	add	r7, sp, #8
 801c12e:	60f8      	str	r0, [r7, #12]
 801c130:	60b9      	str	r1, [r7, #8]
 801c132:	607a      	str	r2, [r7, #4]
 801c134:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	2b00      	cmp	r3, #0
 801c13a:	d109      	bne.n	801c150 <udp_sendto_if+0x28>
 801c13c:	4b2e      	ldr	r3, [pc, #184]	; (801c1f8 <udp_sendto_if+0xd0>)
 801c13e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c142:	492e      	ldr	r1, [pc, #184]	; (801c1fc <udp_sendto_if+0xd4>)
 801c144:	482e      	ldr	r0, [pc, #184]	; (801c200 <udp_sendto_if+0xd8>)
 801c146:	f003 fa2b 	bl	801f5a0 <iprintf>
 801c14a:	f06f 030f 	mvn.w	r3, #15
 801c14e:	e04f      	b.n	801c1f0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801c150:	68bb      	ldr	r3, [r7, #8]
 801c152:	2b00      	cmp	r3, #0
 801c154:	d109      	bne.n	801c16a <udp_sendto_if+0x42>
 801c156:	4b28      	ldr	r3, [pc, #160]	; (801c1f8 <udp_sendto_if+0xd0>)
 801c158:	f240 2281 	movw	r2, #641	; 0x281
 801c15c:	4929      	ldr	r1, [pc, #164]	; (801c204 <udp_sendto_if+0xdc>)
 801c15e:	4828      	ldr	r0, [pc, #160]	; (801c200 <udp_sendto_if+0xd8>)
 801c160:	f003 fa1e 	bl	801f5a0 <iprintf>
 801c164:	f06f 030f 	mvn.w	r3, #15
 801c168:	e042      	b.n	801c1f0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d109      	bne.n	801c184 <udp_sendto_if+0x5c>
 801c170:	4b21      	ldr	r3, [pc, #132]	; (801c1f8 <udp_sendto_if+0xd0>)
 801c172:	f240 2282 	movw	r2, #642	; 0x282
 801c176:	4924      	ldr	r1, [pc, #144]	; (801c208 <udp_sendto_if+0xe0>)
 801c178:	4821      	ldr	r0, [pc, #132]	; (801c200 <udp_sendto_if+0xd8>)
 801c17a:	f003 fa11 	bl	801f5a0 <iprintf>
 801c17e:	f06f 030f 	mvn.w	r3, #15
 801c182:	e035      	b.n	801c1f0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801c184:	6a3b      	ldr	r3, [r7, #32]
 801c186:	2b00      	cmp	r3, #0
 801c188:	d109      	bne.n	801c19e <udp_sendto_if+0x76>
 801c18a:	4b1b      	ldr	r3, [pc, #108]	; (801c1f8 <udp_sendto_if+0xd0>)
 801c18c:	f240 2283 	movw	r2, #643	; 0x283
 801c190:	491e      	ldr	r1, [pc, #120]	; (801c20c <udp_sendto_if+0xe4>)
 801c192:	481b      	ldr	r0, [pc, #108]	; (801c200 <udp_sendto_if+0xd8>)
 801c194:	f003 fa04 	bl	801f5a0 <iprintf>
 801c198:	f06f 030f 	mvn.w	r3, #15
 801c19c:	e028      	b.n	801c1f0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c19e:	68fb      	ldr	r3, [r7, #12]
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	d009      	beq.n	801c1b8 <udp_sendto_if+0x90>
 801c1a4:	68fb      	ldr	r3, [r7, #12]
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	d005      	beq.n	801c1b8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c1b4:	2be0      	cmp	r3, #224	; 0xe0
 801c1b6:	d103      	bne.n	801c1c0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801c1b8:	6a3b      	ldr	r3, [r7, #32]
 801c1ba:	3304      	adds	r3, #4
 801c1bc:	617b      	str	r3, [r7, #20]
 801c1be:	e00b      	b.n	801c1d8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801c1c0:	68fb      	ldr	r3, [r7, #12]
 801c1c2:	681a      	ldr	r2, [r3, #0]
 801c1c4:	6a3b      	ldr	r3, [r7, #32]
 801c1c6:	3304      	adds	r3, #4
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	429a      	cmp	r2, r3
 801c1cc:	d002      	beq.n	801c1d4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801c1ce:	f06f 0303 	mvn.w	r3, #3
 801c1d2:	e00d      	b.n	801c1f0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801c1d8:	887a      	ldrh	r2, [r7, #2]
 801c1da:	697b      	ldr	r3, [r7, #20]
 801c1dc:	9301      	str	r3, [sp, #4]
 801c1de:	6a3b      	ldr	r3, [r7, #32]
 801c1e0:	9300      	str	r3, [sp, #0]
 801c1e2:	4613      	mov	r3, r2
 801c1e4:	687a      	ldr	r2, [r7, #4]
 801c1e6:	68b9      	ldr	r1, [r7, #8]
 801c1e8:	68f8      	ldr	r0, [r7, #12]
 801c1ea:	f000 f811 	bl	801c210 <udp_sendto_if_src>
 801c1ee:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c1f0:	4618      	mov	r0, r3
 801c1f2:	3718      	adds	r7, #24
 801c1f4:	46bd      	mov	sp, r7
 801c1f6:	bd80      	pop	{r7, pc}
 801c1f8:	08023570 	.word	0x08023570
 801c1fc:	080236e4 	.word	0x080236e4
 801c200:	080235c4 	.word	0x080235c4
 801c204:	08023700 	.word	0x08023700
 801c208:	0802371c 	.word	0x0802371c
 801c20c:	0802373c 	.word	0x0802373c

0801c210 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801c210:	b580      	push	{r7, lr}
 801c212:	b08c      	sub	sp, #48	; 0x30
 801c214:	af04      	add	r7, sp, #16
 801c216:	60f8      	str	r0, [r7, #12]
 801c218:	60b9      	str	r1, [r7, #8]
 801c21a:	607a      	str	r2, [r7, #4]
 801c21c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801c21e:	68fb      	ldr	r3, [r7, #12]
 801c220:	2b00      	cmp	r3, #0
 801c222:	d109      	bne.n	801c238 <udp_sendto_if_src+0x28>
 801c224:	4b65      	ldr	r3, [pc, #404]	; (801c3bc <udp_sendto_if_src+0x1ac>)
 801c226:	f240 22d1 	movw	r2, #721	; 0x2d1
 801c22a:	4965      	ldr	r1, [pc, #404]	; (801c3c0 <udp_sendto_if_src+0x1b0>)
 801c22c:	4865      	ldr	r0, [pc, #404]	; (801c3c4 <udp_sendto_if_src+0x1b4>)
 801c22e:	f003 f9b7 	bl	801f5a0 <iprintf>
 801c232:	f06f 030f 	mvn.w	r3, #15
 801c236:	e0bc      	b.n	801c3b2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801c238:	68bb      	ldr	r3, [r7, #8]
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d109      	bne.n	801c252 <udp_sendto_if_src+0x42>
 801c23e:	4b5f      	ldr	r3, [pc, #380]	; (801c3bc <udp_sendto_if_src+0x1ac>)
 801c240:	f240 22d2 	movw	r2, #722	; 0x2d2
 801c244:	4960      	ldr	r1, [pc, #384]	; (801c3c8 <udp_sendto_if_src+0x1b8>)
 801c246:	485f      	ldr	r0, [pc, #380]	; (801c3c4 <udp_sendto_if_src+0x1b4>)
 801c248:	f003 f9aa 	bl	801f5a0 <iprintf>
 801c24c:	f06f 030f 	mvn.w	r3, #15
 801c250:	e0af      	b.n	801c3b2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	2b00      	cmp	r3, #0
 801c256:	d109      	bne.n	801c26c <udp_sendto_if_src+0x5c>
 801c258:	4b58      	ldr	r3, [pc, #352]	; (801c3bc <udp_sendto_if_src+0x1ac>)
 801c25a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801c25e:	495b      	ldr	r1, [pc, #364]	; (801c3cc <udp_sendto_if_src+0x1bc>)
 801c260:	4858      	ldr	r0, [pc, #352]	; (801c3c4 <udp_sendto_if_src+0x1b4>)
 801c262:	f003 f99d 	bl	801f5a0 <iprintf>
 801c266:	f06f 030f 	mvn.w	r3, #15
 801c26a:	e0a2      	b.n	801c3b2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801c26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c26e:	2b00      	cmp	r3, #0
 801c270:	d109      	bne.n	801c286 <udp_sendto_if_src+0x76>
 801c272:	4b52      	ldr	r3, [pc, #328]	; (801c3bc <udp_sendto_if_src+0x1ac>)
 801c274:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801c278:	4955      	ldr	r1, [pc, #340]	; (801c3d0 <udp_sendto_if_src+0x1c0>)
 801c27a:	4852      	ldr	r0, [pc, #328]	; (801c3c4 <udp_sendto_if_src+0x1b4>)
 801c27c:	f003 f990 	bl	801f5a0 <iprintf>
 801c280:	f06f 030f 	mvn.w	r3, #15
 801c284:	e095      	b.n	801c3b2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801c286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d109      	bne.n	801c2a0 <udp_sendto_if_src+0x90>
 801c28c:	4b4b      	ldr	r3, [pc, #300]	; (801c3bc <udp_sendto_if_src+0x1ac>)
 801c28e:	f240 22d5 	movw	r2, #725	; 0x2d5
 801c292:	4950      	ldr	r1, [pc, #320]	; (801c3d4 <udp_sendto_if_src+0x1c4>)
 801c294:	484b      	ldr	r0, [pc, #300]	; (801c3c4 <udp_sendto_if_src+0x1b4>)
 801c296:	f003 f983 	bl	801f5a0 <iprintf>
 801c29a:	f06f 030f 	mvn.w	r3, #15
 801c29e:	e088      	b.n	801c3b2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801c2a0:	68fb      	ldr	r3, [r7, #12]
 801c2a2:	8a5b      	ldrh	r3, [r3, #18]
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	d10f      	bne.n	801c2c8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c2a8:	68f9      	ldr	r1, [r7, #12]
 801c2aa:	68fb      	ldr	r3, [r7, #12]
 801c2ac:	8a5b      	ldrh	r3, [r3, #18]
 801c2ae:	461a      	mov	r2, r3
 801c2b0:	68f8      	ldr	r0, [r7, #12]
 801c2b2:	f000 f893 	bl	801c3dc <udp_bind>
 801c2b6:	4603      	mov	r3, r0
 801c2b8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801c2ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d002      	beq.n	801c2c8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801c2c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c2c6:	e074      	b.n	801c3b2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801c2c8:	68bb      	ldr	r3, [r7, #8]
 801c2ca:	891b      	ldrh	r3, [r3, #8]
 801c2cc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801c2d0:	4293      	cmp	r3, r2
 801c2d2:	d902      	bls.n	801c2da <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801c2d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c2d8:	e06b      	b.n	801c3b2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801c2da:	2108      	movs	r1, #8
 801c2dc:	68b8      	ldr	r0, [r7, #8]
 801c2de:	f7f8 fe79 	bl	8014fd4 <pbuf_add_header>
 801c2e2:	4603      	mov	r3, r0
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	d015      	beq.n	801c314 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801c2e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c2ec:	2108      	movs	r1, #8
 801c2ee:	2022      	movs	r0, #34	; 0x22
 801c2f0:	f7f8 fc22 	bl	8014b38 <pbuf_alloc>
 801c2f4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801c2f6:	69fb      	ldr	r3, [r7, #28]
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d102      	bne.n	801c302 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801c2fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c300:	e057      	b.n	801c3b2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801c302:	68bb      	ldr	r3, [r7, #8]
 801c304:	891b      	ldrh	r3, [r3, #8]
 801c306:	2b00      	cmp	r3, #0
 801c308:	d006      	beq.n	801c318 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801c30a:	68b9      	ldr	r1, [r7, #8]
 801c30c:	69f8      	ldr	r0, [r7, #28]
 801c30e:	f7f9 f81b 	bl	8015348 <pbuf_chain>
 801c312:	e001      	b.n	801c318 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801c314:	68bb      	ldr	r3, [r7, #8]
 801c316:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c318:	69fb      	ldr	r3, [r7, #28]
 801c31a:	895b      	ldrh	r3, [r3, #10]
 801c31c:	2b07      	cmp	r3, #7
 801c31e:	d806      	bhi.n	801c32e <udp_sendto_if_src+0x11e>
 801c320:	4b26      	ldr	r3, [pc, #152]	; (801c3bc <udp_sendto_if_src+0x1ac>)
 801c322:	f240 320d 	movw	r2, #781	; 0x30d
 801c326:	492c      	ldr	r1, [pc, #176]	; (801c3d8 <udp_sendto_if_src+0x1c8>)
 801c328:	4826      	ldr	r0, [pc, #152]	; (801c3c4 <udp_sendto_if_src+0x1b4>)
 801c32a:	f003 f939 	bl	801f5a0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801c32e:	69fb      	ldr	r3, [r7, #28]
 801c330:	685b      	ldr	r3, [r3, #4]
 801c332:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	8a5b      	ldrh	r3, [r3, #18]
 801c338:	4618      	mov	r0, r3
 801c33a:	f7f7 faef 	bl	801391c <lwip_htons>
 801c33e:	4603      	mov	r3, r0
 801c340:	461a      	mov	r2, r3
 801c342:	697b      	ldr	r3, [r7, #20]
 801c344:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c346:	887b      	ldrh	r3, [r7, #2]
 801c348:	4618      	mov	r0, r3
 801c34a:	f7f7 fae7 	bl	801391c <lwip_htons>
 801c34e:	4603      	mov	r3, r0
 801c350:	461a      	mov	r2, r3
 801c352:	697b      	ldr	r3, [r7, #20]
 801c354:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801c356:	697b      	ldr	r3, [r7, #20]
 801c358:	2200      	movs	r2, #0
 801c35a:	719a      	strb	r2, [r3, #6]
 801c35c:	2200      	movs	r2, #0
 801c35e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801c360:	69fb      	ldr	r3, [r7, #28]
 801c362:	891b      	ldrh	r3, [r3, #8]
 801c364:	4618      	mov	r0, r3
 801c366:	f7f7 fad9 	bl	801391c <lwip_htons>
 801c36a:	4603      	mov	r3, r0
 801c36c:	461a      	mov	r2, r3
 801c36e:	697b      	ldr	r3, [r7, #20]
 801c370:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801c372:	2311      	movs	r3, #17
 801c374:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801c376:	68fb      	ldr	r3, [r7, #12]
 801c378:	7adb      	ldrb	r3, [r3, #11]
 801c37a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c37c:	68fb      	ldr	r3, [r7, #12]
 801c37e:	7a9b      	ldrb	r3, [r3, #10]
 801c380:	7cb9      	ldrb	r1, [r7, #18]
 801c382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c384:	9202      	str	r2, [sp, #8]
 801c386:	7cfa      	ldrb	r2, [r7, #19]
 801c388:	9201      	str	r2, [sp, #4]
 801c38a:	9300      	str	r3, [sp, #0]
 801c38c:	460b      	mov	r3, r1
 801c38e:	687a      	ldr	r2, [r7, #4]
 801c390:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c392:	69f8      	ldr	r0, [r7, #28]
 801c394:	f001 fc90 	bl	801dcb8 <ip4_output_if_src>
 801c398:	4603      	mov	r3, r0
 801c39a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c39c:	69fa      	ldr	r2, [r7, #28]
 801c39e:	68bb      	ldr	r3, [r7, #8]
 801c3a0:	429a      	cmp	r2, r3
 801c3a2:	d004      	beq.n	801c3ae <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801c3a4:	69f8      	ldr	r0, [r7, #28]
 801c3a6:	f7f8 feab 	bl	8015100 <pbuf_free>
    q = NULL;
 801c3aa:	2300      	movs	r3, #0
 801c3ac:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801c3ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c3b2:	4618      	mov	r0, r3
 801c3b4:	3720      	adds	r7, #32
 801c3b6:	46bd      	mov	sp, r7
 801c3b8:	bd80      	pop	{r7, pc}
 801c3ba:	bf00      	nop
 801c3bc:	08023570 	.word	0x08023570
 801c3c0:	0802375c 	.word	0x0802375c
 801c3c4:	080235c4 	.word	0x080235c4
 801c3c8:	0802377c 	.word	0x0802377c
 801c3cc:	0802379c 	.word	0x0802379c
 801c3d0:	080237c0 	.word	0x080237c0
 801c3d4:	080237e4 	.word	0x080237e4
 801c3d8:	08023808 	.word	0x08023808

0801c3dc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c3dc:	b580      	push	{r7, lr}
 801c3de:	b086      	sub	sp, #24
 801c3e0:	af00      	add	r7, sp, #0
 801c3e2:	60f8      	str	r0, [r7, #12]
 801c3e4:	60b9      	str	r1, [r7, #8]
 801c3e6:	4613      	mov	r3, r2
 801c3e8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c3ea:	68bb      	ldr	r3, [r7, #8]
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d101      	bne.n	801c3f4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c3f0:	4b39      	ldr	r3, [pc, #228]	; (801c4d8 <udp_bind+0xfc>)
 801c3f2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c3f4:	68fb      	ldr	r3, [r7, #12]
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d109      	bne.n	801c40e <udp_bind+0x32>
 801c3fa:	4b38      	ldr	r3, [pc, #224]	; (801c4dc <udp_bind+0x100>)
 801c3fc:	f240 32b7 	movw	r2, #951	; 0x3b7
 801c400:	4937      	ldr	r1, [pc, #220]	; (801c4e0 <udp_bind+0x104>)
 801c402:	4838      	ldr	r0, [pc, #224]	; (801c4e4 <udp_bind+0x108>)
 801c404:	f003 f8cc 	bl	801f5a0 <iprintf>
 801c408:	f06f 030f 	mvn.w	r3, #15
 801c40c:	e060      	b.n	801c4d0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801c40e:	2300      	movs	r3, #0
 801c410:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c412:	4b35      	ldr	r3, [pc, #212]	; (801c4e8 <udp_bind+0x10c>)
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	617b      	str	r3, [r7, #20]
 801c418:	e009      	b.n	801c42e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c41a:	68fa      	ldr	r2, [r7, #12]
 801c41c:	697b      	ldr	r3, [r7, #20]
 801c41e:	429a      	cmp	r2, r3
 801c420:	d102      	bne.n	801c428 <udp_bind+0x4c>
      rebind = 1;
 801c422:	2301      	movs	r3, #1
 801c424:	74fb      	strb	r3, [r7, #19]
      break;
 801c426:	e005      	b.n	801c434 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c428:	697b      	ldr	r3, [r7, #20]
 801c42a:	68db      	ldr	r3, [r3, #12]
 801c42c:	617b      	str	r3, [r7, #20]
 801c42e:	697b      	ldr	r3, [r7, #20]
 801c430:	2b00      	cmp	r3, #0
 801c432:	d1f2      	bne.n	801c41a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c434:	88fb      	ldrh	r3, [r7, #6]
 801c436:	2b00      	cmp	r3, #0
 801c438:	d109      	bne.n	801c44e <udp_bind+0x72>
    port = udp_new_port();
 801c43a:	f7ff fc35 	bl	801bca8 <udp_new_port>
 801c43e:	4603      	mov	r3, r0
 801c440:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c442:	88fb      	ldrh	r3, [r7, #6]
 801c444:	2b00      	cmp	r3, #0
 801c446:	d12c      	bne.n	801c4a2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801c448:	f06f 0307 	mvn.w	r3, #7
 801c44c:	e040      	b.n	801c4d0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c44e:	4b26      	ldr	r3, [pc, #152]	; (801c4e8 <udp_bind+0x10c>)
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	617b      	str	r3, [r7, #20]
 801c454:	e022      	b.n	801c49c <udp_bind+0xc0>
      if (pcb != ipcb) {
 801c456:	68fa      	ldr	r2, [r7, #12]
 801c458:	697b      	ldr	r3, [r7, #20]
 801c45a:	429a      	cmp	r2, r3
 801c45c:	d01b      	beq.n	801c496 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c45e:	697b      	ldr	r3, [r7, #20]
 801c460:	8a5b      	ldrh	r3, [r3, #18]
 801c462:	88fa      	ldrh	r2, [r7, #6]
 801c464:	429a      	cmp	r2, r3
 801c466:	d116      	bne.n	801c496 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c468:	697b      	ldr	r3, [r7, #20]
 801c46a:	681a      	ldr	r2, [r3, #0]
 801c46c:	68bb      	ldr	r3, [r7, #8]
 801c46e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c470:	429a      	cmp	r2, r3
 801c472:	d00d      	beq.n	801c490 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c474:	68bb      	ldr	r3, [r7, #8]
 801c476:	2b00      	cmp	r3, #0
 801c478:	d00a      	beq.n	801c490 <udp_bind+0xb4>
 801c47a:	68bb      	ldr	r3, [r7, #8]
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	2b00      	cmp	r3, #0
 801c480:	d006      	beq.n	801c490 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c482:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c484:	2b00      	cmp	r3, #0
 801c486:	d003      	beq.n	801c490 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c488:	697b      	ldr	r3, [r7, #20]
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d102      	bne.n	801c496 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c490:	f06f 0307 	mvn.w	r3, #7
 801c494:	e01c      	b.n	801c4d0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c496:	697b      	ldr	r3, [r7, #20]
 801c498:	68db      	ldr	r3, [r3, #12]
 801c49a:	617b      	str	r3, [r7, #20]
 801c49c:	697b      	ldr	r3, [r7, #20]
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	d1d9      	bne.n	801c456 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c4a2:	68bb      	ldr	r3, [r7, #8]
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	d002      	beq.n	801c4ae <udp_bind+0xd2>
 801c4a8:	68bb      	ldr	r3, [r7, #8]
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	e000      	b.n	801c4b0 <udp_bind+0xd4>
 801c4ae:	2300      	movs	r3, #0
 801c4b0:	68fa      	ldr	r2, [r7, #12]
 801c4b2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c4b4:	68fb      	ldr	r3, [r7, #12]
 801c4b6:	88fa      	ldrh	r2, [r7, #6]
 801c4b8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c4ba:	7cfb      	ldrb	r3, [r7, #19]
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d106      	bne.n	801c4ce <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c4c0:	4b09      	ldr	r3, [pc, #36]	; (801c4e8 <udp_bind+0x10c>)
 801c4c2:	681a      	ldr	r2, [r3, #0]
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c4c8:	4a07      	ldr	r2, [pc, #28]	; (801c4e8 <udp_bind+0x10c>)
 801c4ca:	68fb      	ldr	r3, [r7, #12]
 801c4cc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801c4ce:	2300      	movs	r3, #0
}
 801c4d0:	4618      	mov	r0, r3
 801c4d2:	3718      	adds	r7, #24
 801c4d4:	46bd      	mov	sp, r7
 801c4d6:	bd80      	pop	{r7, pc}
 801c4d8:	080240e0 	.word	0x080240e0
 801c4dc:	08023570 	.word	0x08023570
 801c4e0:	08023838 	.word	0x08023838
 801c4e4:	080235c4 	.word	0x080235c4
 801c4e8:	2000c044 	.word	0x2000c044

0801c4ec <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c4ec:	b580      	push	{r7, lr}
 801c4ee:	b086      	sub	sp, #24
 801c4f0:	af00      	add	r7, sp, #0
 801c4f2:	60f8      	str	r0, [r7, #12]
 801c4f4:	60b9      	str	r1, [r7, #8]
 801c4f6:	4613      	mov	r3, r2
 801c4f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d109      	bne.n	801c514 <udp_connect+0x28>
 801c500:	4b2c      	ldr	r3, [pc, #176]	; (801c5b4 <udp_connect+0xc8>)
 801c502:	f240 4235 	movw	r2, #1077	; 0x435
 801c506:	492c      	ldr	r1, [pc, #176]	; (801c5b8 <udp_connect+0xcc>)
 801c508:	482c      	ldr	r0, [pc, #176]	; (801c5bc <udp_connect+0xd0>)
 801c50a:	f003 f849 	bl	801f5a0 <iprintf>
 801c50e:	f06f 030f 	mvn.w	r3, #15
 801c512:	e04b      	b.n	801c5ac <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801c514:	68bb      	ldr	r3, [r7, #8]
 801c516:	2b00      	cmp	r3, #0
 801c518:	d109      	bne.n	801c52e <udp_connect+0x42>
 801c51a:	4b26      	ldr	r3, [pc, #152]	; (801c5b4 <udp_connect+0xc8>)
 801c51c:	f240 4236 	movw	r2, #1078	; 0x436
 801c520:	4927      	ldr	r1, [pc, #156]	; (801c5c0 <udp_connect+0xd4>)
 801c522:	4826      	ldr	r0, [pc, #152]	; (801c5bc <udp_connect+0xd0>)
 801c524:	f003 f83c 	bl	801f5a0 <iprintf>
 801c528:	f06f 030f 	mvn.w	r3, #15
 801c52c:	e03e      	b.n	801c5ac <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	8a5b      	ldrh	r3, [r3, #18]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d10f      	bne.n	801c556 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c536:	68f9      	ldr	r1, [r7, #12]
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	8a5b      	ldrh	r3, [r3, #18]
 801c53c:	461a      	mov	r2, r3
 801c53e:	68f8      	ldr	r0, [r7, #12]
 801c540:	f7ff ff4c 	bl	801c3dc <udp_bind>
 801c544:	4603      	mov	r3, r0
 801c546:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801c548:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	d002      	beq.n	801c556 <udp_connect+0x6a>
      return err;
 801c550:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c554:	e02a      	b.n	801c5ac <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801c556:	68bb      	ldr	r3, [r7, #8]
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d002      	beq.n	801c562 <udp_connect+0x76>
 801c55c:	68bb      	ldr	r3, [r7, #8]
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	e000      	b.n	801c564 <udp_connect+0x78>
 801c562:	2300      	movs	r3, #0
 801c564:	68fa      	ldr	r2, [r7, #12]
 801c566:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	88fa      	ldrh	r2, [r7, #6]
 801c56c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801c56e:	68fb      	ldr	r3, [r7, #12]
 801c570:	7c1b      	ldrb	r3, [r3, #16]
 801c572:	f043 0304 	orr.w	r3, r3, #4
 801c576:	b2da      	uxtb	r2, r3
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c57c:	4b11      	ldr	r3, [pc, #68]	; (801c5c4 <udp_connect+0xd8>)
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	617b      	str	r3, [r7, #20]
 801c582:	e008      	b.n	801c596 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801c584:	68fa      	ldr	r2, [r7, #12]
 801c586:	697b      	ldr	r3, [r7, #20]
 801c588:	429a      	cmp	r2, r3
 801c58a:	d101      	bne.n	801c590 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801c58c:	2300      	movs	r3, #0
 801c58e:	e00d      	b.n	801c5ac <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c590:	697b      	ldr	r3, [r7, #20]
 801c592:	68db      	ldr	r3, [r3, #12]
 801c594:	617b      	str	r3, [r7, #20]
 801c596:	697b      	ldr	r3, [r7, #20]
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d1f3      	bne.n	801c584 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801c59c:	4b09      	ldr	r3, [pc, #36]	; (801c5c4 <udp_connect+0xd8>)
 801c59e:	681a      	ldr	r2, [r3, #0]
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801c5a4:	4a07      	ldr	r2, [pc, #28]	; (801c5c4 <udp_connect+0xd8>)
 801c5a6:	68fb      	ldr	r3, [r7, #12]
 801c5a8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801c5aa:	2300      	movs	r3, #0
}
 801c5ac:	4618      	mov	r0, r3
 801c5ae:	3718      	adds	r7, #24
 801c5b0:	46bd      	mov	sp, r7
 801c5b2:	bd80      	pop	{r7, pc}
 801c5b4:	08023570 	.word	0x08023570
 801c5b8:	08023850 	.word	0x08023850
 801c5bc:	080235c4 	.word	0x080235c4
 801c5c0:	0802386c 	.word	0x0802386c
 801c5c4:	2000c044 	.word	0x2000c044

0801c5c8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c5c8:	b580      	push	{r7, lr}
 801c5ca:	b084      	sub	sp, #16
 801c5cc:	af00      	add	r7, sp, #0
 801c5ce:	60f8      	str	r0, [r7, #12]
 801c5d0:	60b9      	str	r1, [r7, #8]
 801c5d2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801c5d4:	68fb      	ldr	r3, [r7, #12]
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d107      	bne.n	801c5ea <udp_recv+0x22>
 801c5da:	4b08      	ldr	r3, [pc, #32]	; (801c5fc <udp_recv+0x34>)
 801c5dc:	f240 428a 	movw	r2, #1162	; 0x48a
 801c5e0:	4907      	ldr	r1, [pc, #28]	; (801c600 <udp_recv+0x38>)
 801c5e2:	4808      	ldr	r0, [pc, #32]	; (801c604 <udp_recv+0x3c>)
 801c5e4:	f002 ffdc 	bl	801f5a0 <iprintf>
 801c5e8:	e005      	b.n	801c5f6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	68ba      	ldr	r2, [r7, #8]
 801c5ee:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	687a      	ldr	r2, [r7, #4]
 801c5f4:	61da      	str	r2, [r3, #28]
}
 801c5f6:	3710      	adds	r7, #16
 801c5f8:	46bd      	mov	sp, r7
 801c5fa:	bd80      	pop	{r7, pc}
 801c5fc:	08023570 	.word	0x08023570
 801c600:	080238a4 	.word	0x080238a4
 801c604:	080235c4 	.word	0x080235c4

0801c608 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c608:	b580      	push	{r7, lr}
 801c60a:	b084      	sub	sp, #16
 801c60c:	af00      	add	r7, sp, #0
 801c60e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	2b00      	cmp	r3, #0
 801c614:	d107      	bne.n	801c626 <udp_remove+0x1e>
 801c616:	4b19      	ldr	r3, [pc, #100]	; (801c67c <udp_remove+0x74>)
 801c618:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801c61c:	4918      	ldr	r1, [pc, #96]	; (801c680 <udp_remove+0x78>)
 801c61e:	4819      	ldr	r0, [pc, #100]	; (801c684 <udp_remove+0x7c>)
 801c620:	f002 ffbe 	bl	801f5a0 <iprintf>
 801c624:	e026      	b.n	801c674 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c626:	4b18      	ldr	r3, [pc, #96]	; (801c688 <udp_remove+0x80>)
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	687a      	ldr	r2, [r7, #4]
 801c62c:	429a      	cmp	r2, r3
 801c62e:	d105      	bne.n	801c63c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c630:	4b15      	ldr	r3, [pc, #84]	; (801c688 <udp_remove+0x80>)
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	68db      	ldr	r3, [r3, #12]
 801c636:	4a14      	ldr	r2, [pc, #80]	; (801c688 <udp_remove+0x80>)
 801c638:	6013      	str	r3, [r2, #0]
 801c63a:	e017      	b.n	801c66c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c63c:	4b12      	ldr	r3, [pc, #72]	; (801c688 <udp_remove+0x80>)
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	60fb      	str	r3, [r7, #12]
 801c642:	e010      	b.n	801c666 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	68db      	ldr	r3, [r3, #12]
 801c648:	2b00      	cmp	r3, #0
 801c64a:	d009      	beq.n	801c660 <udp_remove+0x58>
 801c64c:	68fb      	ldr	r3, [r7, #12]
 801c64e:	68db      	ldr	r3, [r3, #12]
 801c650:	687a      	ldr	r2, [r7, #4]
 801c652:	429a      	cmp	r2, r3
 801c654:	d104      	bne.n	801c660 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	68da      	ldr	r2, [r3, #12]
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	60da      	str	r2, [r3, #12]
        break;
 801c65e:	e005      	b.n	801c66c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	68db      	ldr	r3, [r3, #12]
 801c664:	60fb      	str	r3, [r7, #12]
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d1eb      	bne.n	801c644 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c66c:	6879      	ldr	r1, [r7, #4]
 801c66e:	2000      	movs	r0, #0
 801c670:	f7f7 fea2 	bl	80143b8 <memp_free>
}
 801c674:	3710      	adds	r7, #16
 801c676:	46bd      	mov	sp, r7
 801c678:	bd80      	pop	{r7, pc}
 801c67a:	bf00      	nop
 801c67c:	08023570 	.word	0x08023570
 801c680:	080238bc 	.word	0x080238bc
 801c684:	080235c4 	.word	0x080235c4
 801c688:	2000c044 	.word	0x2000c044

0801c68c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c68c:	b580      	push	{r7, lr}
 801c68e:	b082      	sub	sp, #8
 801c690:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c692:	2000      	movs	r0, #0
 801c694:	f7f7 fe1a 	bl	80142cc <memp_malloc>
 801c698:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d007      	beq.n	801c6b0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c6a0:	2220      	movs	r2, #32
 801c6a2:	2100      	movs	r1, #0
 801c6a4:	6878      	ldr	r0, [r7, #4]
 801c6a6:	f002 fe93 	bl	801f3d0 <memset>
    pcb->ttl = UDP_TTL;
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	22ff      	movs	r2, #255	; 0xff
 801c6ae:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c6b0:	687b      	ldr	r3, [r7, #4]
}
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	3708      	adds	r7, #8
 801c6b6:	46bd      	mov	sp, r7
 801c6b8:	bd80      	pop	{r7, pc}

0801c6ba <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801c6ba:	b580      	push	{r7, lr}
 801c6bc:	b084      	sub	sp, #16
 801c6be:	af00      	add	r7, sp, #0
 801c6c0:	4603      	mov	r3, r0
 801c6c2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801c6c4:	f7ff ffe2 	bl	801c68c <udp_new>
 801c6c8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c6ca:	68fb      	ldr	r3, [r7, #12]
}
 801c6cc:	4618      	mov	r0, r3
 801c6ce:	3710      	adds	r7, #16
 801c6d0:	46bd      	mov	sp, r7
 801c6d2:	bd80      	pop	{r7, pc}

0801c6d4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c6d4:	b480      	push	{r7}
 801c6d6:	b085      	sub	sp, #20
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	6078      	str	r0, [r7, #4]
 801c6dc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d01e      	beq.n	801c722 <udp_netif_ip_addr_changed+0x4e>
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d01a      	beq.n	801c722 <udp_netif_ip_addr_changed+0x4e>
 801c6ec:	683b      	ldr	r3, [r7, #0]
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d017      	beq.n	801c722 <udp_netif_ip_addr_changed+0x4e>
 801c6f2:	683b      	ldr	r3, [r7, #0]
 801c6f4:	681b      	ldr	r3, [r3, #0]
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d013      	beq.n	801c722 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c6fa:	4b0d      	ldr	r3, [pc, #52]	; (801c730 <udp_netif_ip_addr_changed+0x5c>)
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	60fb      	str	r3, [r7, #12]
 801c700:	e00c      	b.n	801c71c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	681a      	ldr	r2, [r3, #0]
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	429a      	cmp	r2, r3
 801c70c:	d103      	bne.n	801c716 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c70e:	683b      	ldr	r3, [r7, #0]
 801c710:	681a      	ldr	r2, [r3, #0]
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c716:	68fb      	ldr	r3, [r7, #12]
 801c718:	68db      	ldr	r3, [r3, #12]
 801c71a:	60fb      	str	r3, [r7, #12]
 801c71c:	68fb      	ldr	r3, [r7, #12]
 801c71e:	2b00      	cmp	r3, #0
 801c720:	d1ef      	bne.n	801c702 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c722:	bf00      	nop
 801c724:	3714      	adds	r7, #20
 801c726:	46bd      	mov	sp, r7
 801c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c72c:	4770      	bx	lr
 801c72e:	bf00      	nop
 801c730:	2000c044 	.word	0x2000c044

0801c734 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801c734:	b580      	push	{r7, lr}
 801c736:	b082      	sub	sp, #8
 801c738:	af00      	add	r7, sp, #0
 801c73a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801c73c:	4915      	ldr	r1, [pc, #84]	; (801c794 <etharp_free_entry+0x60>)
 801c73e:	687a      	ldr	r2, [r7, #4]
 801c740:	4613      	mov	r3, r2
 801c742:	005b      	lsls	r3, r3, #1
 801c744:	4413      	add	r3, r2
 801c746:	00db      	lsls	r3, r3, #3
 801c748:	440b      	add	r3, r1
 801c74a:	681b      	ldr	r3, [r3, #0]
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d013      	beq.n	801c778 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801c750:	4910      	ldr	r1, [pc, #64]	; (801c794 <etharp_free_entry+0x60>)
 801c752:	687a      	ldr	r2, [r7, #4]
 801c754:	4613      	mov	r3, r2
 801c756:	005b      	lsls	r3, r3, #1
 801c758:	4413      	add	r3, r2
 801c75a:	00db      	lsls	r3, r3, #3
 801c75c:	440b      	add	r3, r1
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	4618      	mov	r0, r3
 801c762:	f7f8 fccd 	bl	8015100 <pbuf_free>
    arp_table[i].q = NULL;
 801c766:	490b      	ldr	r1, [pc, #44]	; (801c794 <etharp_free_entry+0x60>)
 801c768:	687a      	ldr	r2, [r7, #4]
 801c76a:	4613      	mov	r3, r2
 801c76c:	005b      	lsls	r3, r3, #1
 801c76e:	4413      	add	r3, r2
 801c770:	00db      	lsls	r3, r3, #3
 801c772:	440b      	add	r3, r1
 801c774:	2200      	movs	r2, #0
 801c776:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801c778:	4906      	ldr	r1, [pc, #24]	; (801c794 <etharp_free_entry+0x60>)
 801c77a:	687a      	ldr	r2, [r7, #4]
 801c77c:	4613      	mov	r3, r2
 801c77e:	005b      	lsls	r3, r3, #1
 801c780:	4413      	add	r3, r2
 801c782:	00db      	lsls	r3, r3, #3
 801c784:	440b      	add	r3, r1
 801c786:	3314      	adds	r3, #20
 801c788:	2200      	movs	r2, #0
 801c78a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801c78c:	bf00      	nop
 801c78e:	3708      	adds	r7, #8
 801c790:	46bd      	mov	sp, r7
 801c792:	bd80      	pop	{r7, pc}
 801c794:	2000c048 	.word	0x2000c048

0801c798 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801c798:	b580      	push	{r7, lr}
 801c79a:	b082      	sub	sp, #8
 801c79c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c79e:	2300      	movs	r3, #0
 801c7a0:	607b      	str	r3, [r7, #4]
 801c7a2:	e096      	b.n	801c8d2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801c7a4:	494f      	ldr	r1, [pc, #316]	; (801c8e4 <etharp_tmr+0x14c>)
 801c7a6:	687a      	ldr	r2, [r7, #4]
 801c7a8:	4613      	mov	r3, r2
 801c7aa:	005b      	lsls	r3, r3, #1
 801c7ac:	4413      	add	r3, r2
 801c7ae:	00db      	lsls	r3, r3, #3
 801c7b0:	440b      	add	r3, r1
 801c7b2:	3314      	adds	r3, #20
 801c7b4:	781b      	ldrb	r3, [r3, #0]
 801c7b6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801c7b8:	78fb      	ldrb	r3, [r7, #3]
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	f000 8086 	beq.w	801c8cc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801c7c0:	4948      	ldr	r1, [pc, #288]	; (801c8e4 <etharp_tmr+0x14c>)
 801c7c2:	687a      	ldr	r2, [r7, #4]
 801c7c4:	4613      	mov	r3, r2
 801c7c6:	005b      	lsls	r3, r3, #1
 801c7c8:	4413      	add	r3, r2
 801c7ca:	00db      	lsls	r3, r3, #3
 801c7cc:	440b      	add	r3, r1
 801c7ce:	3312      	adds	r3, #18
 801c7d0:	881b      	ldrh	r3, [r3, #0]
 801c7d2:	3301      	adds	r3, #1
 801c7d4:	b298      	uxth	r0, r3
 801c7d6:	4943      	ldr	r1, [pc, #268]	; (801c8e4 <etharp_tmr+0x14c>)
 801c7d8:	687a      	ldr	r2, [r7, #4]
 801c7da:	4613      	mov	r3, r2
 801c7dc:	005b      	lsls	r3, r3, #1
 801c7de:	4413      	add	r3, r2
 801c7e0:	00db      	lsls	r3, r3, #3
 801c7e2:	440b      	add	r3, r1
 801c7e4:	3312      	adds	r3, #18
 801c7e6:	4602      	mov	r2, r0
 801c7e8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c7ea:	493e      	ldr	r1, [pc, #248]	; (801c8e4 <etharp_tmr+0x14c>)
 801c7ec:	687a      	ldr	r2, [r7, #4]
 801c7ee:	4613      	mov	r3, r2
 801c7f0:	005b      	lsls	r3, r3, #1
 801c7f2:	4413      	add	r3, r2
 801c7f4:	00db      	lsls	r3, r3, #3
 801c7f6:	440b      	add	r3, r1
 801c7f8:	3312      	adds	r3, #18
 801c7fa:	881b      	ldrh	r3, [r3, #0]
 801c7fc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801c800:	d215      	bcs.n	801c82e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c802:	4938      	ldr	r1, [pc, #224]	; (801c8e4 <etharp_tmr+0x14c>)
 801c804:	687a      	ldr	r2, [r7, #4]
 801c806:	4613      	mov	r3, r2
 801c808:	005b      	lsls	r3, r3, #1
 801c80a:	4413      	add	r3, r2
 801c80c:	00db      	lsls	r3, r3, #3
 801c80e:	440b      	add	r3, r1
 801c810:	3314      	adds	r3, #20
 801c812:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c814:	2b01      	cmp	r3, #1
 801c816:	d10e      	bne.n	801c836 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801c818:	4932      	ldr	r1, [pc, #200]	; (801c8e4 <etharp_tmr+0x14c>)
 801c81a:	687a      	ldr	r2, [r7, #4]
 801c81c:	4613      	mov	r3, r2
 801c81e:	005b      	lsls	r3, r3, #1
 801c820:	4413      	add	r3, r2
 801c822:	00db      	lsls	r3, r3, #3
 801c824:	440b      	add	r3, r1
 801c826:	3312      	adds	r3, #18
 801c828:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c82a:	2b04      	cmp	r3, #4
 801c82c:	d903      	bls.n	801c836 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801c82e:	6878      	ldr	r0, [r7, #4]
 801c830:	f7ff ff80 	bl	801c734 <etharp_free_entry>
 801c834:	e04a      	b.n	801c8cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801c836:	492b      	ldr	r1, [pc, #172]	; (801c8e4 <etharp_tmr+0x14c>)
 801c838:	687a      	ldr	r2, [r7, #4]
 801c83a:	4613      	mov	r3, r2
 801c83c:	005b      	lsls	r3, r3, #1
 801c83e:	4413      	add	r3, r2
 801c840:	00db      	lsls	r3, r3, #3
 801c842:	440b      	add	r3, r1
 801c844:	3314      	adds	r3, #20
 801c846:	781b      	ldrb	r3, [r3, #0]
 801c848:	2b03      	cmp	r3, #3
 801c84a:	d10a      	bne.n	801c862 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801c84c:	4925      	ldr	r1, [pc, #148]	; (801c8e4 <etharp_tmr+0x14c>)
 801c84e:	687a      	ldr	r2, [r7, #4]
 801c850:	4613      	mov	r3, r2
 801c852:	005b      	lsls	r3, r3, #1
 801c854:	4413      	add	r3, r2
 801c856:	00db      	lsls	r3, r3, #3
 801c858:	440b      	add	r3, r1
 801c85a:	3314      	adds	r3, #20
 801c85c:	2204      	movs	r2, #4
 801c85e:	701a      	strb	r2, [r3, #0]
 801c860:	e034      	b.n	801c8cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801c862:	4920      	ldr	r1, [pc, #128]	; (801c8e4 <etharp_tmr+0x14c>)
 801c864:	687a      	ldr	r2, [r7, #4]
 801c866:	4613      	mov	r3, r2
 801c868:	005b      	lsls	r3, r3, #1
 801c86a:	4413      	add	r3, r2
 801c86c:	00db      	lsls	r3, r3, #3
 801c86e:	440b      	add	r3, r1
 801c870:	3314      	adds	r3, #20
 801c872:	781b      	ldrb	r3, [r3, #0]
 801c874:	2b04      	cmp	r3, #4
 801c876:	d10a      	bne.n	801c88e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801c878:	491a      	ldr	r1, [pc, #104]	; (801c8e4 <etharp_tmr+0x14c>)
 801c87a:	687a      	ldr	r2, [r7, #4]
 801c87c:	4613      	mov	r3, r2
 801c87e:	005b      	lsls	r3, r3, #1
 801c880:	4413      	add	r3, r2
 801c882:	00db      	lsls	r3, r3, #3
 801c884:	440b      	add	r3, r1
 801c886:	3314      	adds	r3, #20
 801c888:	2202      	movs	r2, #2
 801c88a:	701a      	strb	r2, [r3, #0]
 801c88c:	e01e      	b.n	801c8cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c88e:	4915      	ldr	r1, [pc, #84]	; (801c8e4 <etharp_tmr+0x14c>)
 801c890:	687a      	ldr	r2, [r7, #4]
 801c892:	4613      	mov	r3, r2
 801c894:	005b      	lsls	r3, r3, #1
 801c896:	4413      	add	r3, r2
 801c898:	00db      	lsls	r3, r3, #3
 801c89a:	440b      	add	r3, r1
 801c89c:	3314      	adds	r3, #20
 801c89e:	781b      	ldrb	r3, [r3, #0]
 801c8a0:	2b01      	cmp	r3, #1
 801c8a2:	d113      	bne.n	801c8cc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801c8a4:	490f      	ldr	r1, [pc, #60]	; (801c8e4 <etharp_tmr+0x14c>)
 801c8a6:	687a      	ldr	r2, [r7, #4]
 801c8a8:	4613      	mov	r3, r2
 801c8aa:	005b      	lsls	r3, r3, #1
 801c8ac:	4413      	add	r3, r2
 801c8ae:	00db      	lsls	r3, r3, #3
 801c8b0:	440b      	add	r3, r1
 801c8b2:	3308      	adds	r3, #8
 801c8b4:	6818      	ldr	r0, [r3, #0]
 801c8b6:	687a      	ldr	r2, [r7, #4]
 801c8b8:	4613      	mov	r3, r2
 801c8ba:	005b      	lsls	r3, r3, #1
 801c8bc:	4413      	add	r3, r2
 801c8be:	00db      	lsls	r3, r3, #3
 801c8c0:	4a08      	ldr	r2, [pc, #32]	; (801c8e4 <etharp_tmr+0x14c>)
 801c8c2:	4413      	add	r3, r2
 801c8c4:	3304      	adds	r3, #4
 801c8c6:	4619      	mov	r1, r3
 801c8c8:	f000 fe6e 	bl	801d5a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c8cc:	687b      	ldr	r3, [r7, #4]
 801c8ce:	3301      	adds	r3, #1
 801c8d0:	607b      	str	r3, [r7, #4]
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	2b09      	cmp	r3, #9
 801c8d6:	f77f af65 	ble.w	801c7a4 <etharp_tmr+0xc>
      }
    }
  }
}
 801c8da:	bf00      	nop
 801c8dc:	bf00      	nop
 801c8de:	3708      	adds	r7, #8
 801c8e0:	46bd      	mov	sp, r7
 801c8e2:	bd80      	pop	{r7, pc}
 801c8e4:	2000c048 	.word	0x2000c048

0801c8e8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801c8e8:	b580      	push	{r7, lr}
 801c8ea:	b08a      	sub	sp, #40	; 0x28
 801c8ec:	af00      	add	r7, sp, #0
 801c8ee:	60f8      	str	r0, [r7, #12]
 801c8f0:	460b      	mov	r3, r1
 801c8f2:	607a      	str	r2, [r7, #4]
 801c8f4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801c8f6:	230a      	movs	r3, #10
 801c8f8:	84fb      	strh	r3, [r7, #38]	; 0x26
 801c8fa:	230a      	movs	r3, #10
 801c8fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801c8fe:	230a      	movs	r3, #10
 801c900:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801c902:	2300      	movs	r3, #0
 801c904:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801c906:	230a      	movs	r3, #10
 801c908:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801c90a:	2300      	movs	r3, #0
 801c90c:	83bb      	strh	r3, [r7, #28]
 801c90e:	2300      	movs	r3, #0
 801c910:	837b      	strh	r3, [r7, #26]
 801c912:	2300      	movs	r3, #0
 801c914:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c916:	2300      	movs	r3, #0
 801c918:	843b      	strh	r3, [r7, #32]
 801c91a:	e0ae      	b.n	801ca7a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801c91c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c920:	49a6      	ldr	r1, [pc, #664]	; (801cbbc <etharp_find_entry+0x2d4>)
 801c922:	4613      	mov	r3, r2
 801c924:	005b      	lsls	r3, r3, #1
 801c926:	4413      	add	r3, r2
 801c928:	00db      	lsls	r3, r3, #3
 801c92a:	440b      	add	r3, r1
 801c92c:	3314      	adds	r3, #20
 801c92e:	781b      	ldrb	r3, [r3, #0]
 801c930:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801c932:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c936:	2b0a      	cmp	r3, #10
 801c938:	d105      	bne.n	801c946 <etharp_find_entry+0x5e>
 801c93a:	7dfb      	ldrb	r3, [r7, #23]
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	d102      	bne.n	801c946 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801c940:	8c3b      	ldrh	r3, [r7, #32]
 801c942:	847b      	strh	r3, [r7, #34]	; 0x22
 801c944:	e095      	b.n	801ca72 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801c946:	7dfb      	ldrb	r3, [r7, #23]
 801c948:	2b00      	cmp	r3, #0
 801c94a:	f000 8092 	beq.w	801ca72 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801c94e:	7dfb      	ldrb	r3, [r7, #23]
 801c950:	2b01      	cmp	r3, #1
 801c952:	d009      	beq.n	801c968 <etharp_find_entry+0x80>
 801c954:	7dfb      	ldrb	r3, [r7, #23]
 801c956:	2b01      	cmp	r3, #1
 801c958:	d806      	bhi.n	801c968 <etharp_find_entry+0x80>
 801c95a:	4b99      	ldr	r3, [pc, #612]	; (801cbc0 <etharp_find_entry+0x2d8>)
 801c95c:	f240 1223 	movw	r2, #291	; 0x123
 801c960:	4998      	ldr	r1, [pc, #608]	; (801cbc4 <etharp_find_entry+0x2dc>)
 801c962:	4899      	ldr	r0, [pc, #612]	; (801cbc8 <etharp_find_entry+0x2e0>)
 801c964:	f002 fe1c 	bl	801f5a0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801c968:	68fb      	ldr	r3, [r7, #12]
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	d020      	beq.n	801c9b0 <etharp_find_entry+0xc8>
 801c96e:	68fb      	ldr	r3, [r7, #12]
 801c970:	6819      	ldr	r1, [r3, #0]
 801c972:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c976:	4891      	ldr	r0, [pc, #580]	; (801cbbc <etharp_find_entry+0x2d4>)
 801c978:	4613      	mov	r3, r2
 801c97a:	005b      	lsls	r3, r3, #1
 801c97c:	4413      	add	r3, r2
 801c97e:	00db      	lsls	r3, r3, #3
 801c980:	4403      	add	r3, r0
 801c982:	3304      	adds	r3, #4
 801c984:	681b      	ldr	r3, [r3, #0]
 801c986:	4299      	cmp	r1, r3
 801c988:	d112      	bne.n	801c9b0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	d00c      	beq.n	801c9aa <etharp_find_entry+0xc2>
 801c990:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c994:	4989      	ldr	r1, [pc, #548]	; (801cbbc <etharp_find_entry+0x2d4>)
 801c996:	4613      	mov	r3, r2
 801c998:	005b      	lsls	r3, r3, #1
 801c99a:	4413      	add	r3, r2
 801c99c:	00db      	lsls	r3, r3, #3
 801c99e:	440b      	add	r3, r1
 801c9a0:	3308      	adds	r3, #8
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	687a      	ldr	r2, [r7, #4]
 801c9a6:	429a      	cmp	r2, r3
 801c9a8:	d102      	bne.n	801c9b0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801c9aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c9ae:	e100      	b.n	801cbb2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801c9b0:	7dfb      	ldrb	r3, [r7, #23]
 801c9b2:	2b01      	cmp	r3, #1
 801c9b4:	d140      	bne.n	801ca38 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801c9b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c9ba:	4980      	ldr	r1, [pc, #512]	; (801cbbc <etharp_find_entry+0x2d4>)
 801c9bc:	4613      	mov	r3, r2
 801c9be:	005b      	lsls	r3, r3, #1
 801c9c0:	4413      	add	r3, r2
 801c9c2:	00db      	lsls	r3, r3, #3
 801c9c4:	440b      	add	r3, r1
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	d01a      	beq.n	801ca02 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801c9cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c9d0:	497a      	ldr	r1, [pc, #488]	; (801cbbc <etharp_find_entry+0x2d4>)
 801c9d2:	4613      	mov	r3, r2
 801c9d4:	005b      	lsls	r3, r3, #1
 801c9d6:	4413      	add	r3, r2
 801c9d8:	00db      	lsls	r3, r3, #3
 801c9da:	440b      	add	r3, r1
 801c9dc:	3312      	adds	r3, #18
 801c9de:	881b      	ldrh	r3, [r3, #0]
 801c9e0:	8bba      	ldrh	r2, [r7, #28]
 801c9e2:	429a      	cmp	r2, r3
 801c9e4:	d845      	bhi.n	801ca72 <etharp_find_entry+0x18a>
            old_queue = i;
 801c9e6:	8c3b      	ldrh	r3, [r7, #32]
 801c9e8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801c9ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c9ee:	4973      	ldr	r1, [pc, #460]	; (801cbbc <etharp_find_entry+0x2d4>)
 801c9f0:	4613      	mov	r3, r2
 801c9f2:	005b      	lsls	r3, r3, #1
 801c9f4:	4413      	add	r3, r2
 801c9f6:	00db      	lsls	r3, r3, #3
 801c9f8:	440b      	add	r3, r1
 801c9fa:	3312      	adds	r3, #18
 801c9fc:	881b      	ldrh	r3, [r3, #0]
 801c9fe:	83bb      	strh	r3, [r7, #28]
 801ca00:	e037      	b.n	801ca72 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ca02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ca06:	496d      	ldr	r1, [pc, #436]	; (801cbbc <etharp_find_entry+0x2d4>)
 801ca08:	4613      	mov	r3, r2
 801ca0a:	005b      	lsls	r3, r3, #1
 801ca0c:	4413      	add	r3, r2
 801ca0e:	00db      	lsls	r3, r3, #3
 801ca10:	440b      	add	r3, r1
 801ca12:	3312      	adds	r3, #18
 801ca14:	881b      	ldrh	r3, [r3, #0]
 801ca16:	8b7a      	ldrh	r2, [r7, #26]
 801ca18:	429a      	cmp	r2, r3
 801ca1a:	d82a      	bhi.n	801ca72 <etharp_find_entry+0x18a>
            old_pending = i;
 801ca1c:	8c3b      	ldrh	r3, [r7, #32]
 801ca1e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801ca20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ca24:	4965      	ldr	r1, [pc, #404]	; (801cbbc <etharp_find_entry+0x2d4>)
 801ca26:	4613      	mov	r3, r2
 801ca28:	005b      	lsls	r3, r3, #1
 801ca2a:	4413      	add	r3, r2
 801ca2c:	00db      	lsls	r3, r3, #3
 801ca2e:	440b      	add	r3, r1
 801ca30:	3312      	adds	r3, #18
 801ca32:	881b      	ldrh	r3, [r3, #0]
 801ca34:	837b      	strh	r3, [r7, #26]
 801ca36:	e01c      	b.n	801ca72 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801ca38:	7dfb      	ldrb	r3, [r7, #23]
 801ca3a:	2b01      	cmp	r3, #1
 801ca3c:	d919      	bls.n	801ca72 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ca3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ca42:	495e      	ldr	r1, [pc, #376]	; (801cbbc <etharp_find_entry+0x2d4>)
 801ca44:	4613      	mov	r3, r2
 801ca46:	005b      	lsls	r3, r3, #1
 801ca48:	4413      	add	r3, r2
 801ca4a:	00db      	lsls	r3, r3, #3
 801ca4c:	440b      	add	r3, r1
 801ca4e:	3312      	adds	r3, #18
 801ca50:	881b      	ldrh	r3, [r3, #0]
 801ca52:	8b3a      	ldrh	r2, [r7, #24]
 801ca54:	429a      	cmp	r2, r3
 801ca56:	d80c      	bhi.n	801ca72 <etharp_find_entry+0x18a>
            old_stable = i;
 801ca58:	8c3b      	ldrh	r3, [r7, #32]
 801ca5a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801ca5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ca60:	4956      	ldr	r1, [pc, #344]	; (801cbbc <etharp_find_entry+0x2d4>)
 801ca62:	4613      	mov	r3, r2
 801ca64:	005b      	lsls	r3, r3, #1
 801ca66:	4413      	add	r3, r2
 801ca68:	00db      	lsls	r3, r3, #3
 801ca6a:	440b      	add	r3, r1
 801ca6c:	3312      	adds	r3, #18
 801ca6e:	881b      	ldrh	r3, [r3, #0]
 801ca70:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ca72:	8c3b      	ldrh	r3, [r7, #32]
 801ca74:	3301      	adds	r3, #1
 801ca76:	b29b      	uxth	r3, r3
 801ca78:	843b      	strh	r3, [r7, #32]
 801ca7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ca7e:	2b09      	cmp	r3, #9
 801ca80:	f77f af4c 	ble.w	801c91c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801ca84:	7afb      	ldrb	r3, [r7, #11]
 801ca86:	f003 0302 	and.w	r3, r3, #2
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d108      	bne.n	801caa0 <etharp_find_entry+0x1b8>
 801ca8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ca92:	2b0a      	cmp	r3, #10
 801ca94:	d107      	bne.n	801caa6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801ca96:	7afb      	ldrb	r3, [r7, #11]
 801ca98:	f003 0301 	and.w	r3, r3, #1
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d102      	bne.n	801caa6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801caa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801caa4:	e085      	b.n	801cbb2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801caa6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801caaa:	2b09      	cmp	r3, #9
 801caac:	dc02      	bgt.n	801cab4 <etharp_find_entry+0x1cc>
    i = empty;
 801caae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cab0:	843b      	strh	r3, [r7, #32]
 801cab2:	e039      	b.n	801cb28 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801cab4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801cab8:	2b09      	cmp	r3, #9
 801caba:	dc14      	bgt.n	801cae6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801cabc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801cabe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801cac0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cac4:	493d      	ldr	r1, [pc, #244]	; (801cbbc <etharp_find_entry+0x2d4>)
 801cac6:	4613      	mov	r3, r2
 801cac8:	005b      	lsls	r3, r3, #1
 801caca:	4413      	add	r3, r2
 801cacc:	00db      	lsls	r3, r3, #3
 801cace:	440b      	add	r3, r1
 801cad0:	681b      	ldr	r3, [r3, #0]
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	d018      	beq.n	801cb08 <etharp_find_entry+0x220>
 801cad6:	4b3a      	ldr	r3, [pc, #232]	; (801cbc0 <etharp_find_entry+0x2d8>)
 801cad8:	f240 126d 	movw	r2, #365	; 0x16d
 801cadc:	493b      	ldr	r1, [pc, #236]	; (801cbcc <etharp_find_entry+0x2e4>)
 801cade:	483a      	ldr	r0, [pc, #232]	; (801cbc8 <etharp_find_entry+0x2e0>)
 801cae0:	f002 fd5e 	bl	801f5a0 <iprintf>
 801cae4:	e010      	b.n	801cb08 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801cae6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801caea:	2b09      	cmp	r3, #9
 801caec:	dc02      	bgt.n	801caf4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801caee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801caf0:	843b      	strh	r3, [r7, #32]
 801caf2:	e009      	b.n	801cb08 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801caf4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801caf8:	2b09      	cmp	r3, #9
 801cafa:	dc02      	bgt.n	801cb02 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801cafc:	8bfb      	ldrh	r3, [r7, #30]
 801cafe:	843b      	strh	r3, [r7, #32]
 801cb00:	e002      	b.n	801cb08 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801cb02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb06:	e054      	b.n	801cbb2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801cb08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cb0c:	2b09      	cmp	r3, #9
 801cb0e:	dd06      	ble.n	801cb1e <etharp_find_entry+0x236>
 801cb10:	4b2b      	ldr	r3, [pc, #172]	; (801cbc0 <etharp_find_entry+0x2d8>)
 801cb12:	f240 127f 	movw	r2, #383	; 0x17f
 801cb16:	492e      	ldr	r1, [pc, #184]	; (801cbd0 <etharp_find_entry+0x2e8>)
 801cb18:	482b      	ldr	r0, [pc, #172]	; (801cbc8 <etharp_find_entry+0x2e0>)
 801cb1a:	f002 fd41 	bl	801f5a0 <iprintf>
    etharp_free_entry(i);
 801cb1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cb22:	4618      	mov	r0, r3
 801cb24:	f7ff fe06 	bl	801c734 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801cb28:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cb2c:	2b09      	cmp	r3, #9
 801cb2e:	dd06      	ble.n	801cb3e <etharp_find_entry+0x256>
 801cb30:	4b23      	ldr	r3, [pc, #140]	; (801cbc0 <etharp_find_entry+0x2d8>)
 801cb32:	f240 1283 	movw	r2, #387	; 0x183
 801cb36:	4926      	ldr	r1, [pc, #152]	; (801cbd0 <etharp_find_entry+0x2e8>)
 801cb38:	4823      	ldr	r0, [pc, #140]	; (801cbc8 <etharp_find_entry+0x2e0>)
 801cb3a:	f002 fd31 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801cb3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb42:	491e      	ldr	r1, [pc, #120]	; (801cbbc <etharp_find_entry+0x2d4>)
 801cb44:	4613      	mov	r3, r2
 801cb46:	005b      	lsls	r3, r3, #1
 801cb48:	4413      	add	r3, r2
 801cb4a:	00db      	lsls	r3, r3, #3
 801cb4c:	440b      	add	r3, r1
 801cb4e:	3314      	adds	r3, #20
 801cb50:	781b      	ldrb	r3, [r3, #0]
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	d006      	beq.n	801cb64 <etharp_find_entry+0x27c>
 801cb56:	4b1a      	ldr	r3, [pc, #104]	; (801cbc0 <etharp_find_entry+0x2d8>)
 801cb58:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801cb5c:	491d      	ldr	r1, [pc, #116]	; (801cbd4 <etharp_find_entry+0x2ec>)
 801cb5e:	481a      	ldr	r0, [pc, #104]	; (801cbc8 <etharp_find_entry+0x2e0>)
 801cb60:	f002 fd1e 	bl	801f5a0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	2b00      	cmp	r3, #0
 801cb68:	d00b      	beq.n	801cb82 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801cb6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb6e:	68fb      	ldr	r3, [r7, #12]
 801cb70:	6819      	ldr	r1, [r3, #0]
 801cb72:	4812      	ldr	r0, [pc, #72]	; (801cbbc <etharp_find_entry+0x2d4>)
 801cb74:	4613      	mov	r3, r2
 801cb76:	005b      	lsls	r3, r3, #1
 801cb78:	4413      	add	r3, r2
 801cb7a:	00db      	lsls	r3, r3, #3
 801cb7c:	4403      	add	r3, r0
 801cb7e:	3304      	adds	r3, #4
 801cb80:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801cb82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb86:	490d      	ldr	r1, [pc, #52]	; (801cbbc <etharp_find_entry+0x2d4>)
 801cb88:	4613      	mov	r3, r2
 801cb8a:	005b      	lsls	r3, r3, #1
 801cb8c:	4413      	add	r3, r2
 801cb8e:	00db      	lsls	r3, r3, #3
 801cb90:	440b      	add	r3, r1
 801cb92:	3312      	adds	r3, #18
 801cb94:	2200      	movs	r2, #0
 801cb96:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801cb98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb9c:	4907      	ldr	r1, [pc, #28]	; (801cbbc <etharp_find_entry+0x2d4>)
 801cb9e:	4613      	mov	r3, r2
 801cba0:	005b      	lsls	r3, r3, #1
 801cba2:	4413      	add	r3, r2
 801cba4:	00db      	lsls	r3, r3, #3
 801cba6:	440b      	add	r3, r1
 801cba8:	3308      	adds	r3, #8
 801cbaa:	687a      	ldr	r2, [r7, #4]
 801cbac:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801cbae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801cbb2:	4618      	mov	r0, r3
 801cbb4:	3728      	adds	r7, #40	; 0x28
 801cbb6:	46bd      	mov	sp, r7
 801cbb8:	bd80      	pop	{r7, pc}
 801cbba:	bf00      	nop
 801cbbc:	2000c048 	.word	0x2000c048
 801cbc0:	080238d4 	.word	0x080238d4
 801cbc4:	0802390c 	.word	0x0802390c
 801cbc8:	0802394c 	.word	0x0802394c
 801cbcc:	08023974 	.word	0x08023974
 801cbd0:	0802398c 	.word	0x0802398c
 801cbd4:	080239a0 	.word	0x080239a0

0801cbd8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801cbd8:	b580      	push	{r7, lr}
 801cbda:	b088      	sub	sp, #32
 801cbdc:	af02      	add	r7, sp, #8
 801cbde:	60f8      	str	r0, [r7, #12]
 801cbe0:	60b9      	str	r1, [r7, #8]
 801cbe2:	607a      	str	r2, [r7, #4]
 801cbe4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801cbec:	2b06      	cmp	r3, #6
 801cbee:	d006      	beq.n	801cbfe <etharp_update_arp_entry+0x26>
 801cbf0:	4b48      	ldr	r3, [pc, #288]	; (801cd14 <etharp_update_arp_entry+0x13c>)
 801cbf2:	f240 12a9 	movw	r2, #425	; 0x1a9
 801cbf6:	4948      	ldr	r1, [pc, #288]	; (801cd18 <etharp_update_arp_entry+0x140>)
 801cbf8:	4848      	ldr	r0, [pc, #288]	; (801cd1c <etharp_update_arp_entry+0x144>)
 801cbfa:	f002 fcd1 	bl	801f5a0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801cbfe:	68bb      	ldr	r3, [r7, #8]
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d012      	beq.n	801cc2a <etharp_update_arp_entry+0x52>
 801cc04:	68bb      	ldr	r3, [r7, #8]
 801cc06:	681b      	ldr	r3, [r3, #0]
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	d00e      	beq.n	801cc2a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801cc0c:	68bb      	ldr	r3, [r7, #8]
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	68f9      	ldr	r1, [r7, #12]
 801cc12:	4618      	mov	r0, r3
 801cc14:	f001 f8fe 	bl	801de14 <ip4_addr_isbroadcast_u32>
 801cc18:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	d105      	bne.n	801cc2a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801cc1e:	68bb      	ldr	r3, [r7, #8]
 801cc20:	681b      	ldr	r3, [r3, #0]
 801cc22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801cc26:	2be0      	cmp	r3, #224	; 0xe0
 801cc28:	d102      	bne.n	801cc30 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801cc2a:	f06f 030f 	mvn.w	r3, #15
 801cc2e:	e06c      	b.n	801cd0a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801cc30:	78fb      	ldrb	r3, [r7, #3]
 801cc32:	68fa      	ldr	r2, [r7, #12]
 801cc34:	4619      	mov	r1, r3
 801cc36:	68b8      	ldr	r0, [r7, #8]
 801cc38:	f7ff fe56 	bl	801c8e8 <etharp_find_entry>
 801cc3c:	4603      	mov	r3, r0
 801cc3e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801cc40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	da02      	bge.n	801cc4e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801cc48:	8afb      	ldrh	r3, [r7, #22]
 801cc4a:	b25b      	sxtb	r3, r3
 801cc4c:	e05d      	b.n	801cd0a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801cc4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cc52:	4933      	ldr	r1, [pc, #204]	; (801cd20 <etharp_update_arp_entry+0x148>)
 801cc54:	4613      	mov	r3, r2
 801cc56:	005b      	lsls	r3, r3, #1
 801cc58:	4413      	add	r3, r2
 801cc5a:	00db      	lsls	r3, r3, #3
 801cc5c:	440b      	add	r3, r1
 801cc5e:	3314      	adds	r3, #20
 801cc60:	2202      	movs	r2, #2
 801cc62:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801cc64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cc68:	492d      	ldr	r1, [pc, #180]	; (801cd20 <etharp_update_arp_entry+0x148>)
 801cc6a:	4613      	mov	r3, r2
 801cc6c:	005b      	lsls	r3, r3, #1
 801cc6e:	4413      	add	r3, r2
 801cc70:	00db      	lsls	r3, r3, #3
 801cc72:	440b      	add	r3, r1
 801cc74:	3308      	adds	r3, #8
 801cc76:	68fa      	ldr	r2, [r7, #12]
 801cc78:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801cc7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cc7e:	4613      	mov	r3, r2
 801cc80:	005b      	lsls	r3, r3, #1
 801cc82:	4413      	add	r3, r2
 801cc84:	00db      	lsls	r3, r3, #3
 801cc86:	3308      	adds	r3, #8
 801cc88:	4a25      	ldr	r2, [pc, #148]	; (801cd20 <etharp_update_arp_entry+0x148>)
 801cc8a:	4413      	add	r3, r2
 801cc8c:	3304      	adds	r3, #4
 801cc8e:	2206      	movs	r2, #6
 801cc90:	6879      	ldr	r1, [r7, #4]
 801cc92:	4618      	mov	r0, r3
 801cc94:	f002 fb74 	bl	801f380 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801cc98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cc9c:	4920      	ldr	r1, [pc, #128]	; (801cd20 <etharp_update_arp_entry+0x148>)
 801cc9e:	4613      	mov	r3, r2
 801cca0:	005b      	lsls	r3, r3, #1
 801cca2:	4413      	add	r3, r2
 801cca4:	00db      	lsls	r3, r3, #3
 801cca6:	440b      	add	r3, r1
 801cca8:	3312      	adds	r3, #18
 801ccaa:	2200      	movs	r2, #0
 801ccac:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ccae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ccb2:	491b      	ldr	r1, [pc, #108]	; (801cd20 <etharp_update_arp_entry+0x148>)
 801ccb4:	4613      	mov	r3, r2
 801ccb6:	005b      	lsls	r3, r3, #1
 801ccb8:	4413      	add	r3, r2
 801ccba:	00db      	lsls	r3, r3, #3
 801ccbc:	440b      	add	r3, r1
 801ccbe:	681b      	ldr	r3, [r3, #0]
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d021      	beq.n	801cd08 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801ccc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ccc8:	4915      	ldr	r1, [pc, #84]	; (801cd20 <etharp_update_arp_entry+0x148>)
 801ccca:	4613      	mov	r3, r2
 801cccc:	005b      	lsls	r3, r3, #1
 801ccce:	4413      	add	r3, r2
 801ccd0:	00db      	lsls	r3, r3, #3
 801ccd2:	440b      	add	r3, r1
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801ccd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ccdc:	4910      	ldr	r1, [pc, #64]	; (801cd20 <etharp_update_arp_entry+0x148>)
 801ccde:	4613      	mov	r3, r2
 801cce0:	005b      	lsls	r3, r3, #1
 801cce2:	4413      	add	r3, r2
 801cce4:	00db      	lsls	r3, r3, #3
 801cce6:	440b      	add	r3, r1
 801cce8:	2200      	movs	r2, #0
 801ccea:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801ccec:	68fb      	ldr	r3, [r7, #12]
 801ccee:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801ccf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ccf6:	9300      	str	r3, [sp, #0]
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	6939      	ldr	r1, [r7, #16]
 801ccfc:	68f8      	ldr	r0, [r7, #12]
 801ccfe:	f001 ff97 	bl	801ec30 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801cd02:	6938      	ldr	r0, [r7, #16]
 801cd04:	f7f8 f9fc 	bl	8015100 <pbuf_free>
  }
  return ERR_OK;
 801cd08:	2300      	movs	r3, #0
}
 801cd0a:	4618      	mov	r0, r3
 801cd0c:	3718      	adds	r7, #24
 801cd0e:	46bd      	mov	sp, r7
 801cd10:	bd80      	pop	{r7, pc}
 801cd12:	bf00      	nop
 801cd14:	080238d4 	.word	0x080238d4
 801cd18:	080239cc 	.word	0x080239cc
 801cd1c:	0802394c 	.word	0x0802394c
 801cd20:	2000c048 	.word	0x2000c048

0801cd24 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801cd24:	b580      	push	{r7, lr}
 801cd26:	b084      	sub	sp, #16
 801cd28:	af00      	add	r7, sp, #0
 801cd2a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cd2c:	2300      	movs	r3, #0
 801cd2e:	60fb      	str	r3, [r7, #12]
 801cd30:	e01e      	b.n	801cd70 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801cd32:	4913      	ldr	r1, [pc, #76]	; (801cd80 <etharp_cleanup_netif+0x5c>)
 801cd34:	68fa      	ldr	r2, [r7, #12]
 801cd36:	4613      	mov	r3, r2
 801cd38:	005b      	lsls	r3, r3, #1
 801cd3a:	4413      	add	r3, r2
 801cd3c:	00db      	lsls	r3, r3, #3
 801cd3e:	440b      	add	r3, r1
 801cd40:	3314      	adds	r3, #20
 801cd42:	781b      	ldrb	r3, [r3, #0]
 801cd44:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801cd46:	7afb      	ldrb	r3, [r7, #11]
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d00e      	beq.n	801cd6a <etharp_cleanup_netif+0x46>
 801cd4c:	490c      	ldr	r1, [pc, #48]	; (801cd80 <etharp_cleanup_netif+0x5c>)
 801cd4e:	68fa      	ldr	r2, [r7, #12]
 801cd50:	4613      	mov	r3, r2
 801cd52:	005b      	lsls	r3, r3, #1
 801cd54:	4413      	add	r3, r2
 801cd56:	00db      	lsls	r3, r3, #3
 801cd58:	440b      	add	r3, r1
 801cd5a:	3308      	adds	r3, #8
 801cd5c:	681b      	ldr	r3, [r3, #0]
 801cd5e:	687a      	ldr	r2, [r7, #4]
 801cd60:	429a      	cmp	r2, r3
 801cd62:	d102      	bne.n	801cd6a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801cd64:	68f8      	ldr	r0, [r7, #12]
 801cd66:	f7ff fce5 	bl	801c734 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cd6a:	68fb      	ldr	r3, [r7, #12]
 801cd6c:	3301      	adds	r3, #1
 801cd6e:	60fb      	str	r3, [r7, #12]
 801cd70:	68fb      	ldr	r3, [r7, #12]
 801cd72:	2b09      	cmp	r3, #9
 801cd74:	dddd      	ble.n	801cd32 <etharp_cleanup_netif+0xe>
    }
  }
}
 801cd76:	bf00      	nop
 801cd78:	bf00      	nop
 801cd7a:	3710      	adds	r7, #16
 801cd7c:	46bd      	mov	sp, r7
 801cd7e:	bd80      	pop	{r7, pc}
 801cd80:	2000c048 	.word	0x2000c048

0801cd84 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801cd84:	b5b0      	push	{r4, r5, r7, lr}
 801cd86:	b08a      	sub	sp, #40	; 0x28
 801cd88:	af04      	add	r7, sp, #16
 801cd8a:	6078      	str	r0, [r7, #4]
 801cd8c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801cd8e:	683b      	ldr	r3, [r7, #0]
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	d107      	bne.n	801cda4 <etharp_input+0x20>
 801cd94:	4b3d      	ldr	r3, [pc, #244]	; (801ce8c <etharp_input+0x108>)
 801cd96:	f240 228a 	movw	r2, #650	; 0x28a
 801cd9a:	493d      	ldr	r1, [pc, #244]	; (801ce90 <etharp_input+0x10c>)
 801cd9c:	483d      	ldr	r0, [pc, #244]	; (801ce94 <etharp_input+0x110>)
 801cd9e:	f002 fbff 	bl	801f5a0 <iprintf>
 801cda2:	e06f      	b.n	801ce84 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	685b      	ldr	r3, [r3, #4]
 801cda8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801cdaa:	693b      	ldr	r3, [r7, #16]
 801cdac:	881b      	ldrh	r3, [r3, #0]
 801cdae:	b29b      	uxth	r3, r3
 801cdb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cdb4:	d10c      	bne.n	801cdd0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801cdb6:	693b      	ldr	r3, [r7, #16]
 801cdb8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801cdba:	2b06      	cmp	r3, #6
 801cdbc:	d108      	bne.n	801cdd0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801cdbe:	693b      	ldr	r3, [r7, #16]
 801cdc0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801cdc2:	2b04      	cmp	r3, #4
 801cdc4:	d104      	bne.n	801cdd0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801cdc6:	693b      	ldr	r3, [r7, #16]
 801cdc8:	885b      	ldrh	r3, [r3, #2]
 801cdca:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801cdcc:	2b08      	cmp	r3, #8
 801cdce:	d003      	beq.n	801cdd8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801cdd0:	6878      	ldr	r0, [r7, #4]
 801cdd2:	f7f8 f995 	bl	8015100 <pbuf_free>
    return;
 801cdd6:	e055      	b.n	801ce84 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801cdd8:	693b      	ldr	r3, [r7, #16]
 801cdda:	330e      	adds	r3, #14
 801cddc:	681b      	ldr	r3, [r3, #0]
 801cdde:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801cde0:	693b      	ldr	r3, [r7, #16]
 801cde2:	3318      	adds	r3, #24
 801cde4:	681b      	ldr	r3, [r3, #0]
 801cde6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801cde8:	683b      	ldr	r3, [r7, #0]
 801cdea:	3304      	adds	r3, #4
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	d102      	bne.n	801cdf8 <etharp_input+0x74>
    for_us = 0;
 801cdf2:	2300      	movs	r3, #0
 801cdf4:	75fb      	strb	r3, [r7, #23]
 801cdf6:	e009      	b.n	801ce0c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801cdf8:	68ba      	ldr	r2, [r7, #8]
 801cdfa:	683b      	ldr	r3, [r7, #0]
 801cdfc:	3304      	adds	r3, #4
 801cdfe:	681b      	ldr	r3, [r3, #0]
 801ce00:	429a      	cmp	r2, r3
 801ce02:	bf0c      	ite	eq
 801ce04:	2301      	moveq	r3, #1
 801ce06:	2300      	movne	r3, #0
 801ce08:	b2db      	uxtb	r3, r3
 801ce0a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801ce0c:	693b      	ldr	r3, [r7, #16]
 801ce0e:	f103 0208 	add.w	r2, r3, #8
 801ce12:	7dfb      	ldrb	r3, [r7, #23]
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d001      	beq.n	801ce1c <etharp_input+0x98>
 801ce18:	2301      	movs	r3, #1
 801ce1a:	e000      	b.n	801ce1e <etharp_input+0x9a>
 801ce1c:	2302      	movs	r3, #2
 801ce1e:	f107 010c 	add.w	r1, r7, #12
 801ce22:	6838      	ldr	r0, [r7, #0]
 801ce24:	f7ff fed8 	bl	801cbd8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801ce28:	693b      	ldr	r3, [r7, #16]
 801ce2a:	88db      	ldrh	r3, [r3, #6]
 801ce2c:	b29b      	uxth	r3, r3
 801ce2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ce32:	d003      	beq.n	801ce3c <etharp_input+0xb8>
 801ce34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ce38:	d01e      	beq.n	801ce78 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801ce3a:	e020      	b.n	801ce7e <etharp_input+0xfa>
      if (for_us) {
 801ce3c:	7dfb      	ldrb	r3, [r7, #23]
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d01c      	beq.n	801ce7c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801ce42:	683b      	ldr	r3, [r7, #0]
 801ce44:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801ce48:	693b      	ldr	r3, [r7, #16]
 801ce4a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801ce4e:	683b      	ldr	r3, [r7, #0]
 801ce50:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801ce54:	683b      	ldr	r3, [r7, #0]
 801ce56:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801ce58:	693a      	ldr	r2, [r7, #16]
 801ce5a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801ce5c:	2102      	movs	r1, #2
 801ce5e:	9103      	str	r1, [sp, #12]
 801ce60:	f107 010c 	add.w	r1, r7, #12
 801ce64:	9102      	str	r1, [sp, #8]
 801ce66:	9201      	str	r2, [sp, #4]
 801ce68:	9300      	str	r3, [sp, #0]
 801ce6a:	462b      	mov	r3, r5
 801ce6c:	4622      	mov	r2, r4
 801ce6e:	4601      	mov	r1, r0
 801ce70:	6838      	ldr	r0, [r7, #0]
 801ce72:	f000 faeb 	bl	801d44c <etharp_raw>
      break;
 801ce76:	e001      	b.n	801ce7c <etharp_input+0xf8>
      break;
 801ce78:	bf00      	nop
 801ce7a:	e000      	b.n	801ce7e <etharp_input+0xfa>
      break;
 801ce7c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801ce7e:	6878      	ldr	r0, [r7, #4]
 801ce80:	f7f8 f93e 	bl	8015100 <pbuf_free>
}
 801ce84:	3718      	adds	r7, #24
 801ce86:	46bd      	mov	sp, r7
 801ce88:	bdb0      	pop	{r4, r5, r7, pc}
 801ce8a:	bf00      	nop
 801ce8c:	080238d4 	.word	0x080238d4
 801ce90:	08023a24 	.word	0x08023a24
 801ce94:	0802394c 	.word	0x0802394c

0801ce98 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801ce98:	b580      	push	{r7, lr}
 801ce9a:	b086      	sub	sp, #24
 801ce9c:	af02      	add	r7, sp, #8
 801ce9e:	60f8      	str	r0, [r7, #12]
 801cea0:	60b9      	str	r1, [r7, #8]
 801cea2:	4613      	mov	r3, r2
 801cea4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801cea6:	79fa      	ldrb	r2, [r7, #7]
 801cea8:	4944      	ldr	r1, [pc, #272]	; (801cfbc <etharp_output_to_arp_index+0x124>)
 801ceaa:	4613      	mov	r3, r2
 801ceac:	005b      	lsls	r3, r3, #1
 801ceae:	4413      	add	r3, r2
 801ceb0:	00db      	lsls	r3, r3, #3
 801ceb2:	440b      	add	r3, r1
 801ceb4:	3314      	adds	r3, #20
 801ceb6:	781b      	ldrb	r3, [r3, #0]
 801ceb8:	2b01      	cmp	r3, #1
 801ceba:	d806      	bhi.n	801ceca <etharp_output_to_arp_index+0x32>
 801cebc:	4b40      	ldr	r3, [pc, #256]	; (801cfc0 <etharp_output_to_arp_index+0x128>)
 801cebe:	f240 22ee 	movw	r2, #750	; 0x2ee
 801cec2:	4940      	ldr	r1, [pc, #256]	; (801cfc4 <etharp_output_to_arp_index+0x12c>)
 801cec4:	4840      	ldr	r0, [pc, #256]	; (801cfc8 <etharp_output_to_arp_index+0x130>)
 801cec6:	f002 fb6b 	bl	801f5a0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801ceca:	79fa      	ldrb	r2, [r7, #7]
 801cecc:	493b      	ldr	r1, [pc, #236]	; (801cfbc <etharp_output_to_arp_index+0x124>)
 801cece:	4613      	mov	r3, r2
 801ced0:	005b      	lsls	r3, r3, #1
 801ced2:	4413      	add	r3, r2
 801ced4:	00db      	lsls	r3, r3, #3
 801ced6:	440b      	add	r3, r1
 801ced8:	3314      	adds	r3, #20
 801ceda:	781b      	ldrb	r3, [r3, #0]
 801cedc:	2b02      	cmp	r3, #2
 801cede:	d153      	bne.n	801cf88 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801cee0:	79fa      	ldrb	r2, [r7, #7]
 801cee2:	4936      	ldr	r1, [pc, #216]	; (801cfbc <etharp_output_to_arp_index+0x124>)
 801cee4:	4613      	mov	r3, r2
 801cee6:	005b      	lsls	r3, r3, #1
 801cee8:	4413      	add	r3, r2
 801ceea:	00db      	lsls	r3, r3, #3
 801ceec:	440b      	add	r3, r1
 801ceee:	3312      	adds	r3, #18
 801cef0:	881b      	ldrh	r3, [r3, #0]
 801cef2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801cef6:	d919      	bls.n	801cf2c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801cef8:	79fa      	ldrb	r2, [r7, #7]
 801cefa:	4613      	mov	r3, r2
 801cefc:	005b      	lsls	r3, r3, #1
 801cefe:	4413      	add	r3, r2
 801cf00:	00db      	lsls	r3, r3, #3
 801cf02:	4a2e      	ldr	r2, [pc, #184]	; (801cfbc <etharp_output_to_arp_index+0x124>)
 801cf04:	4413      	add	r3, r2
 801cf06:	3304      	adds	r3, #4
 801cf08:	4619      	mov	r1, r3
 801cf0a:	68f8      	ldr	r0, [r7, #12]
 801cf0c:	f000 fb4c 	bl	801d5a8 <etharp_request>
 801cf10:	4603      	mov	r3, r0
 801cf12:	2b00      	cmp	r3, #0
 801cf14:	d138      	bne.n	801cf88 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801cf16:	79fa      	ldrb	r2, [r7, #7]
 801cf18:	4928      	ldr	r1, [pc, #160]	; (801cfbc <etharp_output_to_arp_index+0x124>)
 801cf1a:	4613      	mov	r3, r2
 801cf1c:	005b      	lsls	r3, r3, #1
 801cf1e:	4413      	add	r3, r2
 801cf20:	00db      	lsls	r3, r3, #3
 801cf22:	440b      	add	r3, r1
 801cf24:	3314      	adds	r3, #20
 801cf26:	2203      	movs	r2, #3
 801cf28:	701a      	strb	r2, [r3, #0]
 801cf2a:	e02d      	b.n	801cf88 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801cf2c:	79fa      	ldrb	r2, [r7, #7]
 801cf2e:	4923      	ldr	r1, [pc, #140]	; (801cfbc <etharp_output_to_arp_index+0x124>)
 801cf30:	4613      	mov	r3, r2
 801cf32:	005b      	lsls	r3, r3, #1
 801cf34:	4413      	add	r3, r2
 801cf36:	00db      	lsls	r3, r3, #3
 801cf38:	440b      	add	r3, r1
 801cf3a:	3312      	adds	r3, #18
 801cf3c:	881b      	ldrh	r3, [r3, #0]
 801cf3e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801cf42:	d321      	bcc.n	801cf88 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801cf44:	79fa      	ldrb	r2, [r7, #7]
 801cf46:	4613      	mov	r3, r2
 801cf48:	005b      	lsls	r3, r3, #1
 801cf4a:	4413      	add	r3, r2
 801cf4c:	00db      	lsls	r3, r3, #3
 801cf4e:	4a1b      	ldr	r2, [pc, #108]	; (801cfbc <etharp_output_to_arp_index+0x124>)
 801cf50:	4413      	add	r3, r2
 801cf52:	1d19      	adds	r1, r3, #4
 801cf54:	79fa      	ldrb	r2, [r7, #7]
 801cf56:	4613      	mov	r3, r2
 801cf58:	005b      	lsls	r3, r3, #1
 801cf5a:	4413      	add	r3, r2
 801cf5c:	00db      	lsls	r3, r3, #3
 801cf5e:	3308      	adds	r3, #8
 801cf60:	4a16      	ldr	r2, [pc, #88]	; (801cfbc <etharp_output_to_arp_index+0x124>)
 801cf62:	4413      	add	r3, r2
 801cf64:	3304      	adds	r3, #4
 801cf66:	461a      	mov	r2, r3
 801cf68:	68f8      	ldr	r0, [r7, #12]
 801cf6a:	f000 fafb 	bl	801d564 <etharp_request_dst>
 801cf6e:	4603      	mov	r3, r0
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	d109      	bne.n	801cf88 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801cf74:	79fa      	ldrb	r2, [r7, #7]
 801cf76:	4911      	ldr	r1, [pc, #68]	; (801cfbc <etharp_output_to_arp_index+0x124>)
 801cf78:	4613      	mov	r3, r2
 801cf7a:	005b      	lsls	r3, r3, #1
 801cf7c:	4413      	add	r3, r2
 801cf7e:	00db      	lsls	r3, r3, #3
 801cf80:	440b      	add	r3, r1
 801cf82:	3314      	adds	r3, #20
 801cf84:	2203      	movs	r2, #3
 801cf86:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801cf88:	68fb      	ldr	r3, [r7, #12]
 801cf8a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801cf8e:	79fa      	ldrb	r2, [r7, #7]
 801cf90:	4613      	mov	r3, r2
 801cf92:	005b      	lsls	r3, r3, #1
 801cf94:	4413      	add	r3, r2
 801cf96:	00db      	lsls	r3, r3, #3
 801cf98:	3308      	adds	r3, #8
 801cf9a:	4a08      	ldr	r2, [pc, #32]	; (801cfbc <etharp_output_to_arp_index+0x124>)
 801cf9c:	4413      	add	r3, r2
 801cf9e:	3304      	adds	r3, #4
 801cfa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801cfa4:	9200      	str	r2, [sp, #0]
 801cfa6:	460a      	mov	r2, r1
 801cfa8:	68b9      	ldr	r1, [r7, #8]
 801cfaa:	68f8      	ldr	r0, [r7, #12]
 801cfac:	f001 fe40 	bl	801ec30 <ethernet_output>
 801cfb0:	4603      	mov	r3, r0
}
 801cfb2:	4618      	mov	r0, r3
 801cfb4:	3710      	adds	r7, #16
 801cfb6:	46bd      	mov	sp, r7
 801cfb8:	bd80      	pop	{r7, pc}
 801cfba:	bf00      	nop
 801cfbc:	2000c048 	.word	0x2000c048
 801cfc0:	080238d4 	.word	0x080238d4
 801cfc4:	08023a44 	.word	0x08023a44
 801cfc8:	0802394c 	.word	0x0802394c

0801cfcc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801cfcc:	b580      	push	{r7, lr}
 801cfce:	b08a      	sub	sp, #40	; 0x28
 801cfd0:	af02      	add	r7, sp, #8
 801cfd2:	60f8      	str	r0, [r7, #12]
 801cfd4:	60b9      	str	r1, [r7, #8]
 801cfd6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801cfdc:	68fb      	ldr	r3, [r7, #12]
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d106      	bne.n	801cff0 <etharp_output+0x24>
 801cfe2:	4b73      	ldr	r3, [pc, #460]	; (801d1b0 <etharp_output+0x1e4>)
 801cfe4:	f240 321e 	movw	r2, #798	; 0x31e
 801cfe8:	4972      	ldr	r1, [pc, #456]	; (801d1b4 <etharp_output+0x1e8>)
 801cfea:	4873      	ldr	r0, [pc, #460]	; (801d1b8 <etharp_output+0x1ec>)
 801cfec:	f002 fad8 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801cff0:	68bb      	ldr	r3, [r7, #8]
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	d106      	bne.n	801d004 <etharp_output+0x38>
 801cff6:	4b6e      	ldr	r3, [pc, #440]	; (801d1b0 <etharp_output+0x1e4>)
 801cff8:	f240 321f 	movw	r2, #799	; 0x31f
 801cffc:	496f      	ldr	r1, [pc, #444]	; (801d1bc <etharp_output+0x1f0>)
 801cffe:	486e      	ldr	r0, [pc, #440]	; (801d1b8 <etharp_output+0x1ec>)
 801d000:	f002 face 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	2b00      	cmp	r3, #0
 801d008:	d106      	bne.n	801d018 <etharp_output+0x4c>
 801d00a:	4b69      	ldr	r3, [pc, #420]	; (801d1b0 <etharp_output+0x1e4>)
 801d00c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801d010:	496b      	ldr	r1, [pc, #428]	; (801d1c0 <etharp_output+0x1f4>)
 801d012:	4869      	ldr	r0, [pc, #420]	; (801d1b8 <etharp_output+0x1ec>)
 801d014:	f002 fac4 	bl	801f5a0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801d018:	687b      	ldr	r3, [r7, #4]
 801d01a:	681b      	ldr	r3, [r3, #0]
 801d01c:	68f9      	ldr	r1, [r7, #12]
 801d01e:	4618      	mov	r0, r3
 801d020:	f000 fef8 	bl	801de14 <ip4_addr_isbroadcast_u32>
 801d024:	4603      	mov	r3, r0
 801d026:	2b00      	cmp	r3, #0
 801d028:	d002      	beq.n	801d030 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801d02a:	4b66      	ldr	r3, [pc, #408]	; (801d1c4 <etharp_output+0x1f8>)
 801d02c:	61fb      	str	r3, [r7, #28]
 801d02e:	e0af      	b.n	801d190 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d038:	2be0      	cmp	r3, #224	; 0xe0
 801d03a:	d118      	bne.n	801d06e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801d03c:	2301      	movs	r3, #1
 801d03e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801d040:	2300      	movs	r3, #0
 801d042:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801d044:	235e      	movs	r3, #94	; 0x5e
 801d046:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	3301      	adds	r3, #1
 801d04c:	781b      	ldrb	r3, [r3, #0]
 801d04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d052:	b2db      	uxtb	r3, r3
 801d054:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	3302      	adds	r3, #2
 801d05a:	781b      	ldrb	r3, [r3, #0]
 801d05c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	3303      	adds	r3, #3
 801d062:	781b      	ldrb	r3, [r3, #0]
 801d064:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801d066:	f107 0310 	add.w	r3, r7, #16
 801d06a:	61fb      	str	r3, [r7, #28]
 801d06c:	e090      	b.n	801d190 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	681a      	ldr	r2, [r3, #0]
 801d072:	68fb      	ldr	r3, [r7, #12]
 801d074:	3304      	adds	r3, #4
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	405a      	eors	r2, r3
 801d07a:	68fb      	ldr	r3, [r7, #12]
 801d07c:	3308      	adds	r3, #8
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	4013      	ands	r3, r2
 801d082:	2b00      	cmp	r3, #0
 801d084:	d012      	beq.n	801d0ac <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d08c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801d090:	4293      	cmp	r3, r2
 801d092:	d00b      	beq.n	801d0ac <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801d094:	68fb      	ldr	r3, [r7, #12]
 801d096:	330c      	adds	r3, #12
 801d098:	681b      	ldr	r3, [r3, #0]
 801d09a:	2b00      	cmp	r3, #0
 801d09c:	d003      	beq.n	801d0a6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801d09e:	68fb      	ldr	r3, [r7, #12]
 801d0a0:	330c      	adds	r3, #12
 801d0a2:	61bb      	str	r3, [r7, #24]
 801d0a4:	e002      	b.n	801d0ac <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801d0a6:	f06f 0303 	mvn.w	r3, #3
 801d0aa:	e07d      	b.n	801d1a8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d0ac:	4b46      	ldr	r3, [pc, #280]	; (801d1c8 <etharp_output+0x1fc>)
 801d0ae:	781b      	ldrb	r3, [r3, #0]
 801d0b0:	4619      	mov	r1, r3
 801d0b2:	4a46      	ldr	r2, [pc, #280]	; (801d1cc <etharp_output+0x200>)
 801d0b4:	460b      	mov	r3, r1
 801d0b6:	005b      	lsls	r3, r3, #1
 801d0b8:	440b      	add	r3, r1
 801d0ba:	00db      	lsls	r3, r3, #3
 801d0bc:	4413      	add	r3, r2
 801d0be:	3314      	adds	r3, #20
 801d0c0:	781b      	ldrb	r3, [r3, #0]
 801d0c2:	2b01      	cmp	r3, #1
 801d0c4:	d925      	bls.n	801d112 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d0c6:	4b40      	ldr	r3, [pc, #256]	; (801d1c8 <etharp_output+0x1fc>)
 801d0c8:	781b      	ldrb	r3, [r3, #0]
 801d0ca:	4619      	mov	r1, r3
 801d0cc:	4a3f      	ldr	r2, [pc, #252]	; (801d1cc <etharp_output+0x200>)
 801d0ce:	460b      	mov	r3, r1
 801d0d0:	005b      	lsls	r3, r3, #1
 801d0d2:	440b      	add	r3, r1
 801d0d4:	00db      	lsls	r3, r3, #3
 801d0d6:	4413      	add	r3, r2
 801d0d8:	3308      	adds	r3, #8
 801d0da:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d0dc:	68fa      	ldr	r2, [r7, #12]
 801d0de:	429a      	cmp	r2, r3
 801d0e0:	d117      	bne.n	801d112 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801d0e2:	69bb      	ldr	r3, [r7, #24]
 801d0e4:	681a      	ldr	r2, [r3, #0]
 801d0e6:	4b38      	ldr	r3, [pc, #224]	; (801d1c8 <etharp_output+0x1fc>)
 801d0e8:	781b      	ldrb	r3, [r3, #0]
 801d0ea:	4618      	mov	r0, r3
 801d0ec:	4937      	ldr	r1, [pc, #220]	; (801d1cc <etharp_output+0x200>)
 801d0ee:	4603      	mov	r3, r0
 801d0f0:	005b      	lsls	r3, r3, #1
 801d0f2:	4403      	add	r3, r0
 801d0f4:	00db      	lsls	r3, r3, #3
 801d0f6:	440b      	add	r3, r1
 801d0f8:	3304      	adds	r3, #4
 801d0fa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d0fc:	429a      	cmp	r2, r3
 801d0fe:	d108      	bne.n	801d112 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801d100:	4b31      	ldr	r3, [pc, #196]	; (801d1c8 <etharp_output+0x1fc>)
 801d102:	781b      	ldrb	r3, [r3, #0]
 801d104:	461a      	mov	r2, r3
 801d106:	68b9      	ldr	r1, [r7, #8]
 801d108:	68f8      	ldr	r0, [r7, #12]
 801d10a:	f7ff fec5 	bl	801ce98 <etharp_output_to_arp_index>
 801d10e:	4603      	mov	r3, r0
 801d110:	e04a      	b.n	801d1a8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d112:	2300      	movs	r3, #0
 801d114:	75fb      	strb	r3, [r7, #23]
 801d116:	e031      	b.n	801d17c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d118:	7dfa      	ldrb	r2, [r7, #23]
 801d11a:	492c      	ldr	r1, [pc, #176]	; (801d1cc <etharp_output+0x200>)
 801d11c:	4613      	mov	r3, r2
 801d11e:	005b      	lsls	r3, r3, #1
 801d120:	4413      	add	r3, r2
 801d122:	00db      	lsls	r3, r3, #3
 801d124:	440b      	add	r3, r1
 801d126:	3314      	adds	r3, #20
 801d128:	781b      	ldrb	r3, [r3, #0]
 801d12a:	2b01      	cmp	r3, #1
 801d12c:	d923      	bls.n	801d176 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801d12e:	7dfa      	ldrb	r2, [r7, #23]
 801d130:	4926      	ldr	r1, [pc, #152]	; (801d1cc <etharp_output+0x200>)
 801d132:	4613      	mov	r3, r2
 801d134:	005b      	lsls	r3, r3, #1
 801d136:	4413      	add	r3, r2
 801d138:	00db      	lsls	r3, r3, #3
 801d13a:	440b      	add	r3, r1
 801d13c:	3308      	adds	r3, #8
 801d13e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d140:	68fa      	ldr	r2, [r7, #12]
 801d142:	429a      	cmp	r2, r3
 801d144:	d117      	bne.n	801d176 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801d146:	69bb      	ldr	r3, [r7, #24]
 801d148:	6819      	ldr	r1, [r3, #0]
 801d14a:	7dfa      	ldrb	r2, [r7, #23]
 801d14c:	481f      	ldr	r0, [pc, #124]	; (801d1cc <etharp_output+0x200>)
 801d14e:	4613      	mov	r3, r2
 801d150:	005b      	lsls	r3, r3, #1
 801d152:	4413      	add	r3, r2
 801d154:	00db      	lsls	r3, r3, #3
 801d156:	4403      	add	r3, r0
 801d158:	3304      	adds	r3, #4
 801d15a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801d15c:	4299      	cmp	r1, r3
 801d15e:	d10a      	bne.n	801d176 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801d160:	4a19      	ldr	r2, [pc, #100]	; (801d1c8 <etharp_output+0x1fc>)
 801d162:	7dfb      	ldrb	r3, [r7, #23]
 801d164:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801d166:	7dfb      	ldrb	r3, [r7, #23]
 801d168:	461a      	mov	r2, r3
 801d16a:	68b9      	ldr	r1, [r7, #8]
 801d16c:	68f8      	ldr	r0, [r7, #12]
 801d16e:	f7ff fe93 	bl	801ce98 <etharp_output_to_arp_index>
 801d172:	4603      	mov	r3, r0
 801d174:	e018      	b.n	801d1a8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d176:	7dfb      	ldrb	r3, [r7, #23]
 801d178:	3301      	adds	r3, #1
 801d17a:	75fb      	strb	r3, [r7, #23]
 801d17c:	7dfb      	ldrb	r3, [r7, #23]
 801d17e:	2b09      	cmp	r3, #9
 801d180:	d9ca      	bls.n	801d118 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801d182:	68ba      	ldr	r2, [r7, #8]
 801d184:	69b9      	ldr	r1, [r7, #24]
 801d186:	68f8      	ldr	r0, [r7, #12]
 801d188:	f000 f822 	bl	801d1d0 <etharp_query>
 801d18c:	4603      	mov	r3, r0
 801d18e:	e00b      	b.n	801d1a8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801d190:	68fb      	ldr	r3, [r7, #12]
 801d192:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801d196:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d19a:	9300      	str	r3, [sp, #0]
 801d19c:	69fb      	ldr	r3, [r7, #28]
 801d19e:	68b9      	ldr	r1, [r7, #8]
 801d1a0:	68f8      	ldr	r0, [r7, #12]
 801d1a2:	f001 fd45 	bl	801ec30 <ethernet_output>
 801d1a6:	4603      	mov	r3, r0
}
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	3720      	adds	r7, #32
 801d1ac:	46bd      	mov	sp, r7
 801d1ae:	bd80      	pop	{r7, pc}
 801d1b0:	080238d4 	.word	0x080238d4
 801d1b4:	08023a24 	.word	0x08023a24
 801d1b8:	0802394c 	.word	0x0802394c
 801d1bc:	08023a74 	.word	0x08023a74
 801d1c0:	08023a14 	.word	0x08023a14
 801d1c4:	080240e4 	.word	0x080240e4
 801d1c8:	2000c138 	.word	0x2000c138
 801d1cc:	2000c048 	.word	0x2000c048

0801d1d0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801d1d0:	b580      	push	{r7, lr}
 801d1d2:	b08c      	sub	sp, #48	; 0x30
 801d1d4:	af02      	add	r7, sp, #8
 801d1d6:	60f8      	str	r0, [r7, #12]
 801d1d8:	60b9      	str	r1, [r7, #8]
 801d1da:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801d1dc:	68fb      	ldr	r3, [r7, #12]
 801d1de:	3326      	adds	r3, #38	; 0x26
 801d1e0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801d1e2:	23ff      	movs	r3, #255	; 0xff
 801d1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801d1e8:	2300      	movs	r3, #0
 801d1ea:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d1ec:	68bb      	ldr	r3, [r7, #8]
 801d1ee:	681b      	ldr	r3, [r3, #0]
 801d1f0:	68f9      	ldr	r1, [r7, #12]
 801d1f2:	4618      	mov	r0, r3
 801d1f4:	f000 fe0e 	bl	801de14 <ip4_addr_isbroadcast_u32>
 801d1f8:	4603      	mov	r3, r0
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	d10c      	bne.n	801d218 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d1fe:	68bb      	ldr	r3, [r7, #8]
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d206:	2be0      	cmp	r3, #224	; 0xe0
 801d208:	d006      	beq.n	801d218 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d20a:	68bb      	ldr	r3, [r7, #8]
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	d003      	beq.n	801d218 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801d210:	68bb      	ldr	r3, [r7, #8]
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	2b00      	cmp	r3, #0
 801d216:	d102      	bne.n	801d21e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d218:	f06f 030f 	mvn.w	r3, #15
 801d21c:	e101      	b.n	801d422 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801d21e:	68fa      	ldr	r2, [r7, #12]
 801d220:	2101      	movs	r1, #1
 801d222:	68b8      	ldr	r0, [r7, #8]
 801d224:	f7ff fb60 	bl	801c8e8 <etharp_find_entry>
 801d228:	4603      	mov	r3, r0
 801d22a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801d22c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d230:	2b00      	cmp	r3, #0
 801d232:	da02      	bge.n	801d23a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801d234:	8a7b      	ldrh	r3, [r7, #18]
 801d236:	b25b      	sxtb	r3, r3
 801d238:	e0f3      	b.n	801d422 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801d23a:	8a7b      	ldrh	r3, [r7, #18]
 801d23c:	2b7e      	cmp	r3, #126	; 0x7e
 801d23e:	d906      	bls.n	801d24e <etharp_query+0x7e>
 801d240:	4b7a      	ldr	r3, [pc, #488]	; (801d42c <etharp_query+0x25c>)
 801d242:	f240 32c1 	movw	r2, #961	; 0x3c1
 801d246:	497a      	ldr	r1, [pc, #488]	; (801d430 <etharp_query+0x260>)
 801d248:	487a      	ldr	r0, [pc, #488]	; (801d434 <etharp_query+0x264>)
 801d24a:	f002 f9a9 	bl	801f5a0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801d24e:	8a7b      	ldrh	r3, [r7, #18]
 801d250:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801d252:	7c7a      	ldrb	r2, [r7, #17]
 801d254:	4978      	ldr	r1, [pc, #480]	; (801d438 <etharp_query+0x268>)
 801d256:	4613      	mov	r3, r2
 801d258:	005b      	lsls	r3, r3, #1
 801d25a:	4413      	add	r3, r2
 801d25c:	00db      	lsls	r3, r3, #3
 801d25e:	440b      	add	r3, r1
 801d260:	3314      	adds	r3, #20
 801d262:	781b      	ldrb	r3, [r3, #0]
 801d264:	2b00      	cmp	r3, #0
 801d266:	d115      	bne.n	801d294 <etharp_query+0xc4>
    is_new_entry = 1;
 801d268:	2301      	movs	r3, #1
 801d26a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801d26c:	7c7a      	ldrb	r2, [r7, #17]
 801d26e:	4972      	ldr	r1, [pc, #456]	; (801d438 <etharp_query+0x268>)
 801d270:	4613      	mov	r3, r2
 801d272:	005b      	lsls	r3, r3, #1
 801d274:	4413      	add	r3, r2
 801d276:	00db      	lsls	r3, r3, #3
 801d278:	440b      	add	r3, r1
 801d27a:	3314      	adds	r3, #20
 801d27c:	2201      	movs	r2, #1
 801d27e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801d280:	7c7a      	ldrb	r2, [r7, #17]
 801d282:	496d      	ldr	r1, [pc, #436]	; (801d438 <etharp_query+0x268>)
 801d284:	4613      	mov	r3, r2
 801d286:	005b      	lsls	r3, r3, #1
 801d288:	4413      	add	r3, r2
 801d28a:	00db      	lsls	r3, r3, #3
 801d28c:	440b      	add	r3, r1
 801d28e:	3308      	adds	r3, #8
 801d290:	68fa      	ldr	r2, [r7, #12]
 801d292:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801d294:	7c7a      	ldrb	r2, [r7, #17]
 801d296:	4968      	ldr	r1, [pc, #416]	; (801d438 <etharp_query+0x268>)
 801d298:	4613      	mov	r3, r2
 801d29a:	005b      	lsls	r3, r3, #1
 801d29c:	4413      	add	r3, r2
 801d29e:	00db      	lsls	r3, r3, #3
 801d2a0:	440b      	add	r3, r1
 801d2a2:	3314      	adds	r3, #20
 801d2a4:	781b      	ldrb	r3, [r3, #0]
 801d2a6:	2b01      	cmp	r3, #1
 801d2a8:	d011      	beq.n	801d2ce <etharp_query+0xfe>
 801d2aa:	7c7a      	ldrb	r2, [r7, #17]
 801d2ac:	4962      	ldr	r1, [pc, #392]	; (801d438 <etharp_query+0x268>)
 801d2ae:	4613      	mov	r3, r2
 801d2b0:	005b      	lsls	r3, r3, #1
 801d2b2:	4413      	add	r3, r2
 801d2b4:	00db      	lsls	r3, r3, #3
 801d2b6:	440b      	add	r3, r1
 801d2b8:	3314      	adds	r3, #20
 801d2ba:	781b      	ldrb	r3, [r3, #0]
 801d2bc:	2b01      	cmp	r3, #1
 801d2be:	d806      	bhi.n	801d2ce <etharp_query+0xfe>
 801d2c0:	4b5a      	ldr	r3, [pc, #360]	; (801d42c <etharp_query+0x25c>)
 801d2c2:	f240 32cd 	movw	r2, #973	; 0x3cd
 801d2c6:	495d      	ldr	r1, [pc, #372]	; (801d43c <etharp_query+0x26c>)
 801d2c8:	485a      	ldr	r0, [pc, #360]	; (801d434 <etharp_query+0x264>)
 801d2ca:	f002 f969 	bl	801f5a0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801d2ce:	6a3b      	ldr	r3, [r7, #32]
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d102      	bne.n	801d2da <etharp_query+0x10a>
 801d2d4:	687b      	ldr	r3, [r7, #4]
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	d10c      	bne.n	801d2f4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801d2da:	68b9      	ldr	r1, [r7, #8]
 801d2dc:	68f8      	ldr	r0, [r7, #12]
 801d2de:	f000 f963 	bl	801d5a8 <etharp_request>
 801d2e2:	4603      	mov	r3, r0
 801d2e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	2b00      	cmp	r3, #0
 801d2ec:	d102      	bne.n	801d2f4 <etharp_query+0x124>
      return result;
 801d2ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801d2f2:	e096      	b.n	801d422 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	d106      	bne.n	801d308 <etharp_query+0x138>
 801d2fa:	4b4c      	ldr	r3, [pc, #304]	; (801d42c <etharp_query+0x25c>)
 801d2fc:	f240 32e1 	movw	r2, #993	; 0x3e1
 801d300:	494f      	ldr	r1, [pc, #316]	; (801d440 <etharp_query+0x270>)
 801d302:	484c      	ldr	r0, [pc, #304]	; (801d434 <etharp_query+0x264>)
 801d304:	f002 f94c 	bl	801f5a0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801d308:	7c7a      	ldrb	r2, [r7, #17]
 801d30a:	494b      	ldr	r1, [pc, #300]	; (801d438 <etharp_query+0x268>)
 801d30c:	4613      	mov	r3, r2
 801d30e:	005b      	lsls	r3, r3, #1
 801d310:	4413      	add	r3, r2
 801d312:	00db      	lsls	r3, r3, #3
 801d314:	440b      	add	r3, r1
 801d316:	3314      	adds	r3, #20
 801d318:	781b      	ldrb	r3, [r3, #0]
 801d31a:	2b01      	cmp	r3, #1
 801d31c:	d917      	bls.n	801d34e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801d31e:	4a49      	ldr	r2, [pc, #292]	; (801d444 <etharp_query+0x274>)
 801d320:	7c7b      	ldrb	r3, [r7, #17]
 801d322:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d324:	7c7a      	ldrb	r2, [r7, #17]
 801d326:	4613      	mov	r3, r2
 801d328:	005b      	lsls	r3, r3, #1
 801d32a:	4413      	add	r3, r2
 801d32c:	00db      	lsls	r3, r3, #3
 801d32e:	3308      	adds	r3, #8
 801d330:	4a41      	ldr	r2, [pc, #260]	; (801d438 <etharp_query+0x268>)
 801d332:	4413      	add	r3, r2
 801d334:	3304      	adds	r3, #4
 801d336:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d33a:	9200      	str	r2, [sp, #0]
 801d33c:	697a      	ldr	r2, [r7, #20]
 801d33e:	6879      	ldr	r1, [r7, #4]
 801d340:	68f8      	ldr	r0, [r7, #12]
 801d342:	f001 fc75 	bl	801ec30 <ethernet_output>
 801d346:	4603      	mov	r3, r0
 801d348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d34c:	e067      	b.n	801d41e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d34e:	7c7a      	ldrb	r2, [r7, #17]
 801d350:	4939      	ldr	r1, [pc, #228]	; (801d438 <etharp_query+0x268>)
 801d352:	4613      	mov	r3, r2
 801d354:	005b      	lsls	r3, r3, #1
 801d356:	4413      	add	r3, r2
 801d358:	00db      	lsls	r3, r3, #3
 801d35a:	440b      	add	r3, r1
 801d35c:	3314      	adds	r3, #20
 801d35e:	781b      	ldrb	r3, [r3, #0]
 801d360:	2b01      	cmp	r3, #1
 801d362:	d15c      	bne.n	801d41e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801d364:	2300      	movs	r3, #0
 801d366:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d36c:	e01c      	b.n	801d3a8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801d36e:	69fb      	ldr	r3, [r7, #28]
 801d370:	895a      	ldrh	r2, [r3, #10]
 801d372:	69fb      	ldr	r3, [r7, #28]
 801d374:	891b      	ldrh	r3, [r3, #8]
 801d376:	429a      	cmp	r2, r3
 801d378:	d10a      	bne.n	801d390 <etharp_query+0x1c0>
 801d37a:	69fb      	ldr	r3, [r7, #28]
 801d37c:	681b      	ldr	r3, [r3, #0]
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d006      	beq.n	801d390 <etharp_query+0x1c0>
 801d382:	4b2a      	ldr	r3, [pc, #168]	; (801d42c <etharp_query+0x25c>)
 801d384:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801d388:	492f      	ldr	r1, [pc, #188]	; (801d448 <etharp_query+0x278>)
 801d38a:	482a      	ldr	r0, [pc, #168]	; (801d434 <etharp_query+0x264>)
 801d38c:	f002 f908 	bl	801f5a0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801d390:	69fb      	ldr	r3, [r7, #28]
 801d392:	7b1b      	ldrb	r3, [r3, #12]
 801d394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d398:	2b00      	cmp	r3, #0
 801d39a:	d002      	beq.n	801d3a2 <etharp_query+0x1d2>
        copy_needed = 1;
 801d39c:	2301      	movs	r3, #1
 801d39e:	61bb      	str	r3, [r7, #24]
        break;
 801d3a0:	e005      	b.n	801d3ae <etharp_query+0x1de>
      }
      p = p->next;
 801d3a2:	69fb      	ldr	r3, [r7, #28]
 801d3a4:	681b      	ldr	r3, [r3, #0]
 801d3a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d3a8:	69fb      	ldr	r3, [r7, #28]
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d1df      	bne.n	801d36e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801d3ae:	69bb      	ldr	r3, [r7, #24]
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d007      	beq.n	801d3c4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801d3b4:	687a      	ldr	r2, [r7, #4]
 801d3b6:	f44f 7120 	mov.w	r1, #640	; 0x280
 801d3ba:	200e      	movs	r0, #14
 801d3bc:	f7f8 f918 	bl	80155f0 <pbuf_clone>
 801d3c0:	61f8      	str	r0, [r7, #28]
 801d3c2:	e004      	b.n	801d3ce <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801d3c8:	69f8      	ldr	r0, [r7, #28]
 801d3ca:	f7f7 ff3f 	bl	801524c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801d3ce:	69fb      	ldr	r3, [r7, #28]
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	d021      	beq.n	801d418 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801d3d4:	7c7a      	ldrb	r2, [r7, #17]
 801d3d6:	4918      	ldr	r1, [pc, #96]	; (801d438 <etharp_query+0x268>)
 801d3d8:	4613      	mov	r3, r2
 801d3da:	005b      	lsls	r3, r3, #1
 801d3dc:	4413      	add	r3, r2
 801d3de:	00db      	lsls	r3, r3, #3
 801d3e0:	440b      	add	r3, r1
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	d00a      	beq.n	801d3fe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801d3e8:	7c7a      	ldrb	r2, [r7, #17]
 801d3ea:	4913      	ldr	r1, [pc, #76]	; (801d438 <etharp_query+0x268>)
 801d3ec:	4613      	mov	r3, r2
 801d3ee:	005b      	lsls	r3, r3, #1
 801d3f0:	4413      	add	r3, r2
 801d3f2:	00db      	lsls	r3, r3, #3
 801d3f4:	440b      	add	r3, r1
 801d3f6:	681b      	ldr	r3, [r3, #0]
 801d3f8:	4618      	mov	r0, r3
 801d3fa:	f7f7 fe81 	bl	8015100 <pbuf_free>
      }
      arp_table[i].q = p;
 801d3fe:	7c7a      	ldrb	r2, [r7, #17]
 801d400:	490d      	ldr	r1, [pc, #52]	; (801d438 <etharp_query+0x268>)
 801d402:	4613      	mov	r3, r2
 801d404:	005b      	lsls	r3, r3, #1
 801d406:	4413      	add	r3, r2
 801d408:	00db      	lsls	r3, r3, #3
 801d40a:	440b      	add	r3, r1
 801d40c:	69fa      	ldr	r2, [r7, #28]
 801d40e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801d410:	2300      	movs	r3, #0
 801d412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d416:	e002      	b.n	801d41e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801d418:	23ff      	movs	r3, #255	; 0xff
 801d41a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801d41e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801d422:	4618      	mov	r0, r3
 801d424:	3728      	adds	r7, #40	; 0x28
 801d426:	46bd      	mov	sp, r7
 801d428:	bd80      	pop	{r7, pc}
 801d42a:	bf00      	nop
 801d42c:	080238d4 	.word	0x080238d4
 801d430:	08023a80 	.word	0x08023a80
 801d434:	0802394c 	.word	0x0802394c
 801d438:	2000c048 	.word	0x2000c048
 801d43c:	08023a90 	.word	0x08023a90
 801d440:	08023a74 	.word	0x08023a74
 801d444:	2000c138 	.word	0x2000c138
 801d448:	08023ab8 	.word	0x08023ab8

0801d44c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d44c:	b580      	push	{r7, lr}
 801d44e:	b08a      	sub	sp, #40	; 0x28
 801d450:	af02      	add	r7, sp, #8
 801d452:	60f8      	str	r0, [r7, #12]
 801d454:	60b9      	str	r1, [r7, #8]
 801d456:	607a      	str	r2, [r7, #4]
 801d458:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801d45a:	2300      	movs	r3, #0
 801d45c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d45e:	68fb      	ldr	r3, [r7, #12]
 801d460:	2b00      	cmp	r3, #0
 801d462:	d106      	bne.n	801d472 <etharp_raw+0x26>
 801d464:	4b3a      	ldr	r3, [pc, #232]	; (801d550 <etharp_raw+0x104>)
 801d466:	f240 4257 	movw	r2, #1111	; 0x457
 801d46a:	493a      	ldr	r1, [pc, #232]	; (801d554 <etharp_raw+0x108>)
 801d46c:	483a      	ldr	r0, [pc, #232]	; (801d558 <etharp_raw+0x10c>)
 801d46e:	f002 f897 	bl	801f5a0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d472:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d476:	211c      	movs	r1, #28
 801d478:	200e      	movs	r0, #14
 801d47a:	f7f7 fb5d 	bl	8014b38 <pbuf_alloc>
 801d47e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d480:	69bb      	ldr	r3, [r7, #24]
 801d482:	2b00      	cmp	r3, #0
 801d484:	d102      	bne.n	801d48c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801d486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d48a:	e05d      	b.n	801d548 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d48c:	69bb      	ldr	r3, [r7, #24]
 801d48e:	895b      	ldrh	r3, [r3, #10]
 801d490:	2b1b      	cmp	r3, #27
 801d492:	d806      	bhi.n	801d4a2 <etharp_raw+0x56>
 801d494:	4b2e      	ldr	r3, [pc, #184]	; (801d550 <etharp_raw+0x104>)
 801d496:	f240 4262 	movw	r2, #1122	; 0x462
 801d49a:	4930      	ldr	r1, [pc, #192]	; (801d55c <etharp_raw+0x110>)
 801d49c:	482e      	ldr	r0, [pc, #184]	; (801d558 <etharp_raw+0x10c>)
 801d49e:	f002 f87f 	bl	801f5a0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d4a2:	69bb      	ldr	r3, [r7, #24]
 801d4a4:	685b      	ldr	r3, [r3, #4]
 801d4a6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d4a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801d4aa:	4618      	mov	r0, r3
 801d4ac:	f7f6 fa36 	bl	801391c <lwip_htons>
 801d4b0:	4603      	mov	r3, r0
 801d4b2:	461a      	mov	r2, r3
 801d4b4:	697b      	ldr	r3, [r7, #20]
 801d4b6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d4be:	2b06      	cmp	r3, #6
 801d4c0:	d006      	beq.n	801d4d0 <etharp_raw+0x84>
 801d4c2:	4b23      	ldr	r3, [pc, #140]	; (801d550 <etharp_raw+0x104>)
 801d4c4:	f240 4269 	movw	r2, #1129	; 0x469
 801d4c8:	4925      	ldr	r1, [pc, #148]	; (801d560 <etharp_raw+0x114>)
 801d4ca:	4823      	ldr	r0, [pc, #140]	; (801d558 <etharp_raw+0x10c>)
 801d4cc:	f002 f868 	bl	801f5a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d4d0:	697b      	ldr	r3, [r7, #20]
 801d4d2:	3308      	adds	r3, #8
 801d4d4:	2206      	movs	r2, #6
 801d4d6:	6839      	ldr	r1, [r7, #0]
 801d4d8:	4618      	mov	r0, r3
 801d4da:	f001 ff51 	bl	801f380 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d4de:	697b      	ldr	r3, [r7, #20]
 801d4e0:	3312      	adds	r3, #18
 801d4e2:	2206      	movs	r2, #6
 801d4e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d4e6:	4618      	mov	r0, r3
 801d4e8:	f001 ff4a 	bl	801f380 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801d4ec:	697b      	ldr	r3, [r7, #20]
 801d4ee:	330e      	adds	r3, #14
 801d4f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d4f2:	6812      	ldr	r2, [r2, #0]
 801d4f4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d4f6:	697b      	ldr	r3, [r7, #20]
 801d4f8:	3318      	adds	r3, #24
 801d4fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d4fc:	6812      	ldr	r2, [r2, #0]
 801d4fe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d500:	697b      	ldr	r3, [r7, #20]
 801d502:	2200      	movs	r2, #0
 801d504:	701a      	strb	r2, [r3, #0]
 801d506:	2200      	movs	r2, #0
 801d508:	f042 0201 	orr.w	r2, r2, #1
 801d50c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d50e:	697b      	ldr	r3, [r7, #20]
 801d510:	2200      	movs	r2, #0
 801d512:	f042 0208 	orr.w	r2, r2, #8
 801d516:	709a      	strb	r2, [r3, #2]
 801d518:	2200      	movs	r2, #0
 801d51a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801d51c:	697b      	ldr	r3, [r7, #20]
 801d51e:	2206      	movs	r2, #6
 801d520:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801d522:	697b      	ldr	r3, [r7, #20]
 801d524:	2204      	movs	r2, #4
 801d526:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d528:	f640 0306 	movw	r3, #2054	; 0x806
 801d52c:	9300      	str	r3, [sp, #0]
 801d52e:	687b      	ldr	r3, [r7, #4]
 801d530:	68ba      	ldr	r2, [r7, #8]
 801d532:	69b9      	ldr	r1, [r7, #24]
 801d534:	68f8      	ldr	r0, [r7, #12]
 801d536:	f001 fb7b 	bl	801ec30 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801d53a:	69b8      	ldr	r0, [r7, #24]
 801d53c:	f7f7 fde0 	bl	8015100 <pbuf_free>
  p = NULL;
 801d540:	2300      	movs	r3, #0
 801d542:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801d544:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d548:	4618      	mov	r0, r3
 801d54a:	3720      	adds	r7, #32
 801d54c:	46bd      	mov	sp, r7
 801d54e:	bd80      	pop	{r7, pc}
 801d550:	080238d4 	.word	0x080238d4
 801d554:	08023a24 	.word	0x08023a24
 801d558:	0802394c 	.word	0x0802394c
 801d55c:	08023ad4 	.word	0x08023ad4
 801d560:	08023b08 	.word	0x08023b08

0801d564 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801d564:	b580      	push	{r7, lr}
 801d566:	b088      	sub	sp, #32
 801d568:	af04      	add	r7, sp, #16
 801d56a:	60f8      	str	r0, [r7, #12]
 801d56c:	60b9      	str	r1, [r7, #8]
 801d56e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d570:	68fb      	ldr	r3, [r7, #12]
 801d572:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d576:	68fb      	ldr	r3, [r7, #12]
 801d578:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801d57c:	68fb      	ldr	r3, [r7, #12]
 801d57e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d580:	2201      	movs	r2, #1
 801d582:	9203      	str	r2, [sp, #12]
 801d584:	68ba      	ldr	r2, [r7, #8]
 801d586:	9202      	str	r2, [sp, #8]
 801d588:	4a06      	ldr	r2, [pc, #24]	; (801d5a4 <etharp_request_dst+0x40>)
 801d58a:	9201      	str	r2, [sp, #4]
 801d58c:	9300      	str	r3, [sp, #0]
 801d58e:	4603      	mov	r3, r0
 801d590:	687a      	ldr	r2, [r7, #4]
 801d592:	68f8      	ldr	r0, [r7, #12]
 801d594:	f7ff ff5a 	bl	801d44c <etharp_raw>
 801d598:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801d59a:	4618      	mov	r0, r3
 801d59c:	3710      	adds	r7, #16
 801d59e:	46bd      	mov	sp, r7
 801d5a0:	bd80      	pop	{r7, pc}
 801d5a2:	bf00      	nop
 801d5a4:	080240ec 	.word	0x080240ec

0801d5a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801d5a8:	b580      	push	{r7, lr}
 801d5aa:	b082      	sub	sp, #8
 801d5ac:	af00      	add	r7, sp, #0
 801d5ae:	6078      	str	r0, [r7, #4]
 801d5b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801d5b2:	4a05      	ldr	r2, [pc, #20]	; (801d5c8 <etharp_request+0x20>)
 801d5b4:	6839      	ldr	r1, [r7, #0]
 801d5b6:	6878      	ldr	r0, [r7, #4]
 801d5b8:	f7ff ffd4 	bl	801d564 <etharp_request_dst>
 801d5bc:	4603      	mov	r3, r0
}
 801d5be:	4618      	mov	r0, r3
 801d5c0:	3708      	adds	r7, #8
 801d5c2:	46bd      	mov	sp, r7
 801d5c4:	bd80      	pop	{r7, pc}
 801d5c6:	bf00      	nop
 801d5c8:	080240e4 	.word	0x080240e4

0801d5cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801d5cc:	b580      	push	{r7, lr}
 801d5ce:	b08e      	sub	sp, #56	; 0x38
 801d5d0:	af04      	add	r7, sp, #16
 801d5d2:	6078      	str	r0, [r7, #4]
 801d5d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801d5d6:	4b79      	ldr	r3, [pc, #484]	; (801d7bc <icmp_input+0x1f0>)
 801d5d8:	689b      	ldr	r3, [r3, #8]
 801d5da:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5de:	781b      	ldrb	r3, [r3, #0]
 801d5e0:	f003 030f 	and.w	r3, r3, #15
 801d5e4:	b2db      	uxtb	r3, r3
 801d5e6:	009b      	lsls	r3, r3, #2
 801d5e8:	b2db      	uxtb	r3, r3
 801d5ea:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801d5ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d5ee:	2b13      	cmp	r3, #19
 801d5f0:	f240 80cd 	bls.w	801d78e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801d5f4:	687b      	ldr	r3, [r7, #4]
 801d5f6:	895b      	ldrh	r3, [r3, #10]
 801d5f8:	2b03      	cmp	r3, #3
 801d5fa:	f240 80ca 	bls.w	801d792 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801d5fe:	687b      	ldr	r3, [r7, #4]
 801d600:	685b      	ldr	r3, [r3, #4]
 801d602:	781b      	ldrb	r3, [r3, #0]
 801d604:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801d608:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	f000 80b7 	beq.w	801d780 <icmp_input+0x1b4>
 801d612:	2b08      	cmp	r3, #8
 801d614:	f040 80b7 	bne.w	801d786 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801d618:	4b69      	ldr	r3, [pc, #420]	; (801d7c0 <icmp_input+0x1f4>)
 801d61a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d61c:	4b67      	ldr	r3, [pc, #412]	; (801d7bc <icmp_input+0x1f0>)
 801d61e:	695b      	ldr	r3, [r3, #20]
 801d620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d624:	2be0      	cmp	r3, #224	; 0xe0
 801d626:	f000 80bb 	beq.w	801d7a0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801d62a:	4b64      	ldr	r3, [pc, #400]	; (801d7bc <icmp_input+0x1f0>)
 801d62c:	695b      	ldr	r3, [r3, #20]
 801d62e:	4a63      	ldr	r2, [pc, #396]	; (801d7bc <icmp_input+0x1f0>)
 801d630:	6812      	ldr	r2, [r2, #0]
 801d632:	4611      	mov	r1, r2
 801d634:	4618      	mov	r0, r3
 801d636:	f000 fbed 	bl	801de14 <ip4_addr_isbroadcast_u32>
 801d63a:	4603      	mov	r3, r0
 801d63c:	2b00      	cmp	r3, #0
 801d63e:	f040 80b1 	bne.w	801d7a4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	891b      	ldrh	r3, [r3, #8]
 801d646:	2b07      	cmp	r3, #7
 801d648:	f240 80a5 	bls.w	801d796 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d64c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d64e:	330e      	adds	r3, #14
 801d650:	4619      	mov	r1, r3
 801d652:	6878      	ldr	r0, [r7, #4]
 801d654:	f7f7 fcbe 	bl	8014fd4 <pbuf_add_header>
 801d658:	4603      	mov	r3, r0
 801d65a:	2b00      	cmp	r3, #0
 801d65c:	d04b      	beq.n	801d6f6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	891a      	ldrh	r2, [r3, #8]
 801d662:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d664:	4413      	add	r3, r2
 801d666:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	891b      	ldrh	r3, [r3, #8]
 801d66c:	8b7a      	ldrh	r2, [r7, #26]
 801d66e:	429a      	cmp	r2, r3
 801d670:	f0c0 809a 	bcc.w	801d7a8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801d674:	8b7b      	ldrh	r3, [r7, #26]
 801d676:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d67a:	4619      	mov	r1, r3
 801d67c:	200e      	movs	r0, #14
 801d67e:	f7f7 fa5b 	bl	8014b38 <pbuf_alloc>
 801d682:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801d684:	697b      	ldr	r3, [r7, #20]
 801d686:	2b00      	cmp	r3, #0
 801d688:	f000 8090 	beq.w	801d7ac <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801d68c:	697b      	ldr	r3, [r7, #20]
 801d68e:	895b      	ldrh	r3, [r3, #10]
 801d690:	461a      	mov	r2, r3
 801d692:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d694:	3308      	adds	r3, #8
 801d696:	429a      	cmp	r2, r3
 801d698:	d203      	bcs.n	801d6a2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801d69a:	6978      	ldr	r0, [r7, #20]
 801d69c:	f7f7 fd30 	bl	8015100 <pbuf_free>
          goto icmperr;
 801d6a0:	e085      	b.n	801d7ae <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801d6a2:	697b      	ldr	r3, [r7, #20]
 801d6a4:	685b      	ldr	r3, [r3, #4]
 801d6a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801d6a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d6aa:	4618      	mov	r0, r3
 801d6ac:	f001 fe68 	bl	801f380 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801d6b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d6b2:	4619      	mov	r1, r3
 801d6b4:	6978      	ldr	r0, [r7, #20]
 801d6b6:	f7f7 fc9d 	bl	8014ff4 <pbuf_remove_header>
 801d6ba:	4603      	mov	r3, r0
 801d6bc:	2b00      	cmp	r3, #0
 801d6be:	d009      	beq.n	801d6d4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801d6c0:	4b40      	ldr	r3, [pc, #256]	; (801d7c4 <icmp_input+0x1f8>)
 801d6c2:	22b6      	movs	r2, #182	; 0xb6
 801d6c4:	4940      	ldr	r1, [pc, #256]	; (801d7c8 <icmp_input+0x1fc>)
 801d6c6:	4841      	ldr	r0, [pc, #260]	; (801d7cc <icmp_input+0x200>)
 801d6c8:	f001 ff6a 	bl	801f5a0 <iprintf>
          pbuf_free(r);
 801d6cc:	6978      	ldr	r0, [r7, #20]
 801d6ce:	f7f7 fd17 	bl	8015100 <pbuf_free>
          goto icmperr;
 801d6d2:	e06c      	b.n	801d7ae <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801d6d4:	6879      	ldr	r1, [r7, #4]
 801d6d6:	6978      	ldr	r0, [r7, #20]
 801d6d8:	f7f7 fe46 	bl	8015368 <pbuf_copy>
 801d6dc:	4603      	mov	r3, r0
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d003      	beq.n	801d6ea <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801d6e2:	6978      	ldr	r0, [r7, #20]
 801d6e4:	f7f7 fd0c 	bl	8015100 <pbuf_free>
          goto icmperr;
 801d6e8:	e061      	b.n	801d7ae <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801d6ea:	6878      	ldr	r0, [r7, #4]
 801d6ec:	f7f7 fd08 	bl	8015100 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801d6f0:	697b      	ldr	r3, [r7, #20]
 801d6f2:	607b      	str	r3, [r7, #4]
 801d6f4:	e00f      	b.n	801d716 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d6f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d6f8:	330e      	adds	r3, #14
 801d6fa:	4619      	mov	r1, r3
 801d6fc:	6878      	ldr	r0, [r7, #4]
 801d6fe:	f7f7 fc79 	bl	8014ff4 <pbuf_remove_header>
 801d702:	4603      	mov	r3, r0
 801d704:	2b00      	cmp	r3, #0
 801d706:	d006      	beq.n	801d716 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801d708:	4b2e      	ldr	r3, [pc, #184]	; (801d7c4 <icmp_input+0x1f8>)
 801d70a:	22c7      	movs	r2, #199	; 0xc7
 801d70c:	4930      	ldr	r1, [pc, #192]	; (801d7d0 <icmp_input+0x204>)
 801d70e:	482f      	ldr	r0, [pc, #188]	; (801d7cc <icmp_input+0x200>)
 801d710:	f001 ff46 	bl	801f5a0 <iprintf>
          goto icmperr;
 801d714:	e04b      	b.n	801d7ae <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	685b      	ldr	r3, [r3, #4]
 801d71a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801d71c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d71e:	4619      	mov	r1, r3
 801d720:	6878      	ldr	r0, [r7, #4]
 801d722:	f7f7 fc57 	bl	8014fd4 <pbuf_add_header>
 801d726:	4603      	mov	r3, r0
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d12b      	bne.n	801d784 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	685b      	ldr	r3, [r3, #4]
 801d730:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801d732:	69fb      	ldr	r3, [r7, #28]
 801d734:	681a      	ldr	r2, [r3, #0]
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801d73a:	4b20      	ldr	r3, [pc, #128]	; (801d7bc <icmp_input+0x1f0>)
 801d73c:	691a      	ldr	r2, [r3, #16]
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801d742:	693b      	ldr	r3, [r7, #16]
 801d744:	2200      	movs	r2, #0
 801d746:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801d748:	693b      	ldr	r3, [r7, #16]
 801d74a:	2200      	movs	r2, #0
 801d74c:	709a      	strb	r2, [r3, #2]
 801d74e:	2200      	movs	r2, #0
 801d750:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801d752:	68fb      	ldr	r3, [r7, #12]
 801d754:	22ff      	movs	r2, #255	; 0xff
 801d756:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801d758:	68fb      	ldr	r3, [r7, #12]
 801d75a:	2200      	movs	r2, #0
 801d75c:	729a      	strb	r2, [r3, #10]
 801d75e:	2200      	movs	r2, #0
 801d760:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801d762:	683b      	ldr	r3, [r7, #0]
 801d764:	9302      	str	r3, [sp, #8]
 801d766:	2301      	movs	r3, #1
 801d768:	9301      	str	r3, [sp, #4]
 801d76a:	2300      	movs	r3, #0
 801d76c:	9300      	str	r3, [sp, #0]
 801d76e:	23ff      	movs	r3, #255	; 0xff
 801d770:	2200      	movs	r2, #0
 801d772:	69f9      	ldr	r1, [r7, #28]
 801d774:	6878      	ldr	r0, [r7, #4]
 801d776:	f000 fa75 	bl	801dc64 <ip4_output_if>
 801d77a:	4603      	mov	r3, r0
 801d77c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801d77e:	e001      	b.n	801d784 <icmp_input+0x1b8>
      break;
 801d780:	bf00      	nop
 801d782:	e000      	b.n	801d786 <icmp_input+0x1ba>
      break;
 801d784:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801d786:	6878      	ldr	r0, [r7, #4]
 801d788:	f7f7 fcba 	bl	8015100 <pbuf_free>
  return;
 801d78c:	e013      	b.n	801d7b6 <icmp_input+0x1ea>
    goto lenerr;
 801d78e:	bf00      	nop
 801d790:	e002      	b.n	801d798 <icmp_input+0x1cc>
    goto lenerr;
 801d792:	bf00      	nop
 801d794:	e000      	b.n	801d798 <icmp_input+0x1cc>
        goto lenerr;
 801d796:	bf00      	nop
lenerr:
  pbuf_free(p);
 801d798:	6878      	ldr	r0, [r7, #4]
 801d79a:	f7f7 fcb1 	bl	8015100 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d79e:	e00a      	b.n	801d7b6 <icmp_input+0x1ea>
        goto icmperr;
 801d7a0:	bf00      	nop
 801d7a2:	e004      	b.n	801d7ae <icmp_input+0x1e2>
        goto icmperr;
 801d7a4:	bf00      	nop
 801d7a6:	e002      	b.n	801d7ae <icmp_input+0x1e2>
          goto icmperr;
 801d7a8:	bf00      	nop
 801d7aa:	e000      	b.n	801d7ae <icmp_input+0x1e2>
          goto icmperr;
 801d7ac:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801d7ae:	6878      	ldr	r0, [r7, #4]
 801d7b0:	f7f7 fca6 	bl	8015100 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d7b4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801d7b6:	3728      	adds	r7, #40	; 0x28
 801d7b8:	46bd      	mov	sp, r7
 801d7ba:	bd80      	pop	{r7, pc}
 801d7bc:	200066d4 	.word	0x200066d4
 801d7c0:	200066e8 	.word	0x200066e8
 801d7c4:	08023b4c 	.word	0x08023b4c
 801d7c8:	08023b84 	.word	0x08023b84
 801d7cc:	08023bbc 	.word	0x08023bbc
 801d7d0:	08023be4 	.word	0x08023be4

0801d7d4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801d7d4:	b580      	push	{r7, lr}
 801d7d6:	b082      	sub	sp, #8
 801d7d8:	af00      	add	r7, sp, #0
 801d7da:	6078      	str	r0, [r7, #4]
 801d7dc:	460b      	mov	r3, r1
 801d7de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801d7e0:	78fb      	ldrb	r3, [r7, #3]
 801d7e2:	461a      	mov	r2, r3
 801d7e4:	2103      	movs	r1, #3
 801d7e6:	6878      	ldr	r0, [r7, #4]
 801d7e8:	f000 f814 	bl	801d814 <icmp_send_response>
}
 801d7ec:	bf00      	nop
 801d7ee:	3708      	adds	r7, #8
 801d7f0:	46bd      	mov	sp, r7
 801d7f2:	bd80      	pop	{r7, pc}

0801d7f4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801d7f4:	b580      	push	{r7, lr}
 801d7f6:	b082      	sub	sp, #8
 801d7f8:	af00      	add	r7, sp, #0
 801d7fa:	6078      	str	r0, [r7, #4]
 801d7fc:	460b      	mov	r3, r1
 801d7fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801d800:	78fb      	ldrb	r3, [r7, #3]
 801d802:	461a      	mov	r2, r3
 801d804:	210b      	movs	r1, #11
 801d806:	6878      	ldr	r0, [r7, #4]
 801d808:	f000 f804 	bl	801d814 <icmp_send_response>
}
 801d80c:	bf00      	nop
 801d80e:	3708      	adds	r7, #8
 801d810:	46bd      	mov	sp, r7
 801d812:	bd80      	pop	{r7, pc}

0801d814 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801d814:	b580      	push	{r7, lr}
 801d816:	b08c      	sub	sp, #48	; 0x30
 801d818:	af04      	add	r7, sp, #16
 801d81a:	6078      	str	r0, [r7, #4]
 801d81c:	460b      	mov	r3, r1
 801d81e:	70fb      	strb	r3, [r7, #3]
 801d820:	4613      	mov	r3, r2
 801d822:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801d824:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d828:	2124      	movs	r1, #36	; 0x24
 801d82a:	2022      	movs	r0, #34	; 0x22
 801d82c:	f7f7 f984 	bl	8014b38 <pbuf_alloc>
 801d830:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801d832:	69fb      	ldr	r3, [r7, #28]
 801d834:	2b00      	cmp	r3, #0
 801d836:	d04c      	beq.n	801d8d2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801d838:	69fb      	ldr	r3, [r7, #28]
 801d83a:	895b      	ldrh	r3, [r3, #10]
 801d83c:	2b23      	cmp	r3, #35	; 0x23
 801d83e:	d806      	bhi.n	801d84e <icmp_send_response+0x3a>
 801d840:	4b26      	ldr	r3, [pc, #152]	; (801d8dc <icmp_send_response+0xc8>)
 801d842:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801d846:	4926      	ldr	r1, [pc, #152]	; (801d8e0 <icmp_send_response+0xcc>)
 801d848:	4826      	ldr	r0, [pc, #152]	; (801d8e4 <icmp_send_response+0xd0>)
 801d84a:	f001 fea9 	bl	801f5a0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	685b      	ldr	r3, [r3, #4]
 801d852:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801d854:	69fb      	ldr	r3, [r7, #28]
 801d856:	685b      	ldr	r3, [r3, #4]
 801d858:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801d85a:	697b      	ldr	r3, [r7, #20]
 801d85c:	78fa      	ldrb	r2, [r7, #3]
 801d85e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801d860:	697b      	ldr	r3, [r7, #20]
 801d862:	78ba      	ldrb	r2, [r7, #2]
 801d864:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801d866:	697b      	ldr	r3, [r7, #20]
 801d868:	2200      	movs	r2, #0
 801d86a:	711a      	strb	r2, [r3, #4]
 801d86c:	2200      	movs	r2, #0
 801d86e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801d870:	697b      	ldr	r3, [r7, #20]
 801d872:	2200      	movs	r2, #0
 801d874:	719a      	strb	r2, [r3, #6]
 801d876:	2200      	movs	r2, #0
 801d878:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801d87a:	69fb      	ldr	r3, [r7, #28]
 801d87c:	685b      	ldr	r3, [r3, #4]
 801d87e:	f103 0008 	add.w	r0, r3, #8
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	685b      	ldr	r3, [r3, #4]
 801d886:	221c      	movs	r2, #28
 801d888:	4619      	mov	r1, r3
 801d88a:	f001 fd79 	bl	801f380 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801d88e:	69bb      	ldr	r3, [r7, #24]
 801d890:	68db      	ldr	r3, [r3, #12]
 801d892:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801d894:	f107 030c 	add.w	r3, r7, #12
 801d898:	4618      	mov	r0, r3
 801d89a:	f000 f825 	bl	801d8e8 <ip4_route>
 801d89e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801d8a0:	693b      	ldr	r3, [r7, #16]
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d011      	beq.n	801d8ca <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801d8a6:	697b      	ldr	r3, [r7, #20]
 801d8a8:	2200      	movs	r2, #0
 801d8aa:	709a      	strb	r2, [r3, #2]
 801d8ac:	2200      	movs	r2, #0
 801d8ae:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801d8b0:	f107 020c 	add.w	r2, r7, #12
 801d8b4:	693b      	ldr	r3, [r7, #16]
 801d8b6:	9302      	str	r3, [sp, #8]
 801d8b8:	2301      	movs	r3, #1
 801d8ba:	9301      	str	r3, [sp, #4]
 801d8bc:	2300      	movs	r3, #0
 801d8be:	9300      	str	r3, [sp, #0]
 801d8c0:	23ff      	movs	r3, #255	; 0xff
 801d8c2:	2100      	movs	r1, #0
 801d8c4:	69f8      	ldr	r0, [r7, #28]
 801d8c6:	f000 f9cd 	bl	801dc64 <ip4_output_if>
  }
  pbuf_free(q);
 801d8ca:	69f8      	ldr	r0, [r7, #28]
 801d8cc:	f7f7 fc18 	bl	8015100 <pbuf_free>
 801d8d0:	e000      	b.n	801d8d4 <icmp_send_response+0xc0>
    return;
 801d8d2:	bf00      	nop
}
 801d8d4:	3720      	adds	r7, #32
 801d8d6:	46bd      	mov	sp, r7
 801d8d8:	bd80      	pop	{r7, pc}
 801d8da:	bf00      	nop
 801d8dc:	08023b4c 	.word	0x08023b4c
 801d8e0:	08023c18 	.word	0x08023c18
 801d8e4:	08023bbc 	.word	0x08023bbc

0801d8e8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801d8e8:	b480      	push	{r7}
 801d8ea:	b085      	sub	sp, #20
 801d8ec:	af00      	add	r7, sp, #0
 801d8ee:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801d8f0:	4b33      	ldr	r3, [pc, #204]	; (801d9c0 <ip4_route+0xd8>)
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	60fb      	str	r3, [r7, #12]
 801d8f6:	e036      	b.n	801d966 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d8f8:	68fb      	ldr	r3, [r7, #12]
 801d8fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d8fe:	f003 0301 	and.w	r3, r3, #1
 801d902:	b2db      	uxtb	r3, r3
 801d904:	2b00      	cmp	r3, #0
 801d906:	d02b      	beq.n	801d960 <ip4_route+0x78>
 801d908:	68fb      	ldr	r3, [r7, #12]
 801d90a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d90e:	089b      	lsrs	r3, r3, #2
 801d910:	f003 0301 	and.w	r3, r3, #1
 801d914:	b2db      	uxtb	r3, r3
 801d916:	2b00      	cmp	r3, #0
 801d918:	d022      	beq.n	801d960 <ip4_route+0x78>
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	3304      	adds	r3, #4
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	2b00      	cmp	r3, #0
 801d922:	d01d      	beq.n	801d960 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	681a      	ldr	r2, [r3, #0]
 801d928:	68fb      	ldr	r3, [r7, #12]
 801d92a:	3304      	adds	r3, #4
 801d92c:	681b      	ldr	r3, [r3, #0]
 801d92e:	405a      	eors	r2, r3
 801d930:	68fb      	ldr	r3, [r7, #12]
 801d932:	3308      	adds	r3, #8
 801d934:	681b      	ldr	r3, [r3, #0]
 801d936:	4013      	ands	r3, r2
 801d938:	2b00      	cmp	r3, #0
 801d93a:	d101      	bne.n	801d940 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801d93c:	68fb      	ldr	r3, [r7, #12]
 801d93e:	e038      	b.n	801d9b2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801d940:	68fb      	ldr	r3, [r7, #12]
 801d942:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d946:	f003 0302 	and.w	r3, r3, #2
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	d108      	bne.n	801d960 <ip4_route+0x78>
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	681a      	ldr	r2, [r3, #0]
 801d952:	68fb      	ldr	r3, [r7, #12]
 801d954:	330c      	adds	r3, #12
 801d956:	681b      	ldr	r3, [r3, #0]
 801d958:	429a      	cmp	r2, r3
 801d95a:	d101      	bne.n	801d960 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801d95c:	68fb      	ldr	r3, [r7, #12]
 801d95e:	e028      	b.n	801d9b2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801d960:	68fb      	ldr	r3, [r7, #12]
 801d962:	681b      	ldr	r3, [r3, #0]
 801d964:	60fb      	str	r3, [r7, #12]
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d1c5      	bne.n	801d8f8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d96c:	4b15      	ldr	r3, [pc, #84]	; (801d9c4 <ip4_route+0xdc>)
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	2b00      	cmp	r3, #0
 801d972:	d01a      	beq.n	801d9aa <ip4_route+0xc2>
 801d974:	4b13      	ldr	r3, [pc, #76]	; (801d9c4 <ip4_route+0xdc>)
 801d976:	681b      	ldr	r3, [r3, #0]
 801d978:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d97c:	f003 0301 	and.w	r3, r3, #1
 801d980:	2b00      	cmp	r3, #0
 801d982:	d012      	beq.n	801d9aa <ip4_route+0xc2>
 801d984:	4b0f      	ldr	r3, [pc, #60]	; (801d9c4 <ip4_route+0xdc>)
 801d986:	681b      	ldr	r3, [r3, #0]
 801d988:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d98c:	f003 0304 	and.w	r3, r3, #4
 801d990:	2b00      	cmp	r3, #0
 801d992:	d00a      	beq.n	801d9aa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d994:	4b0b      	ldr	r3, [pc, #44]	; (801d9c4 <ip4_route+0xdc>)
 801d996:	681b      	ldr	r3, [r3, #0]
 801d998:	3304      	adds	r3, #4
 801d99a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	d004      	beq.n	801d9aa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d9a0:	687b      	ldr	r3, [r7, #4]
 801d9a2:	681b      	ldr	r3, [r3, #0]
 801d9a4:	b2db      	uxtb	r3, r3
 801d9a6:	2b7f      	cmp	r3, #127	; 0x7f
 801d9a8:	d101      	bne.n	801d9ae <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d9aa:	2300      	movs	r3, #0
 801d9ac:	e001      	b.n	801d9b2 <ip4_route+0xca>
  }

  return netif_default;
 801d9ae:	4b05      	ldr	r3, [pc, #20]	; (801d9c4 <ip4_route+0xdc>)
 801d9b0:	681b      	ldr	r3, [r3, #0]
}
 801d9b2:	4618      	mov	r0, r3
 801d9b4:	3714      	adds	r7, #20
 801d9b6:	46bd      	mov	sp, r7
 801d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9bc:	4770      	bx	lr
 801d9be:	bf00      	nop
 801d9c0:	2000bfdc 	.word	0x2000bfdc
 801d9c4:	2000bfe0 	.word	0x2000bfe0

0801d9c8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801d9c8:	b580      	push	{r7, lr}
 801d9ca:	b082      	sub	sp, #8
 801d9cc:	af00      	add	r7, sp, #0
 801d9ce:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d9d6:	f003 0301 	and.w	r3, r3, #1
 801d9da:	b2db      	uxtb	r3, r3
 801d9dc:	2b00      	cmp	r3, #0
 801d9de:	d016      	beq.n	801da0e <ip4_input_accept+0x46>
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	3304      	adds	r3, #4
 801d9e4:	681b      	ldr	r3, [r3, #0]
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	d011      	beq.n	801da0e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d9ea:	4b0b      	ldr	r3, [pc, #44]	; (801da18 <ip4_input_accept+0x50>)
 801d9ec:	695a      	ldr	r2, [r3, #20]
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	3304      	adds	r3, #4
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	429a      	cmp	r2, r3
 801d9f6:	d008      	beq.n	801da0a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801d9f8:	4b07      	ldr	r3, [pc, #28]	; (801da18 <ip4_input_accept+0x50>)
 801d9fa:	695b      	ldr	r3, [r3, #20]
 801d9fc:	6879      	ldr	r1, [r7, #4]
 801d9fe:	4618      	mov	r0, r3
 801da00:	f000 fa08 	bl	801de14 <ip4_addr_isbroadcast_u32>
 801da04:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801da06:	2b00      	cmp	r3, #0
 801da08:	d001      	beq.n	801da0e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801da0a:	2301      	movs	r3, #1
 801da0c:	e000      	b.n	801da10 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801da0e:	2300      	movs	r3, #0
}
 801da10:	4618      	mov	r0, r3
 801da12:	3708      	adds	r7, #8
 801da14:	46bd      	mov	sp, r7
 801da16:	bd80      	pop	{r7, pc}
 801da18:	200066d4 	.word	0x200066d4

0801da1c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801da1c:	b580      	push	{r7, lr}
 801da1e:	b086      	sub	sp, #24
 801da20:	af00      	add	r7, sp, #0
 801da22:	6078      	str	r0, [r7, #4]
 801da24:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	685b      	ldr	r3, [r3, #4]
 801da2a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801da2c:	697b      	ldr	r3, [r7, #20]
 801da2e:	781b      	ldrb	r3, [r3, #0]
 801da30:	091b      	lsrs	r3, r3, #4
 801da32:	b2db      	uxtb	r3, r3
 801da34:	2b04      	cmp	r3, #4
 801da36:	d004      	beq.n	801da42 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801da38:	6878      	ldr	r0, [r7, #4]
 801da3a:	f7f7 fb61 	bl	8015100 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801da3e:	2300      	movs	r3, #0
 801da40:	e107      	b.n	801dc52 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801da42:	697b      	ldr	r3, [r7, #20]
 801da44:	781b      	ldrb	r3, [r3, #0]
 801da46:	f003 030f 	and.w	r3, r3, #15
 801da4a:	b2db      	uxtb	r3, r3
 801da4c:	009b      	lsls	r3, r3, #2
 801da4e:	b2db      	uxtb	r3, r3
 801da50:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801da52:	697b      	ldr	r3, [r7, #20]
 801da54:	885b      	ldrh	r3, [r3, #2]
 801da56:	b29b      	uxth	r3, r3
 801da58:	4618      	mov	r0, r3
 801da5a:	f7f5 ff5f 	bl	801391c <lwip_htons>
 801da5e:	4603      	mov	r3, r0
 801da60:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	891b      	ldrh	r3, [r3, #8]
 801da66:	89ba      	ldrh	r2, [r7, #12]
 801da68:	429a      	cmp	r2, r3
 801da6a:	d204      	bcs.n	801da76 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801da6c:	89bb      	ldrh	r3, [r7, #12]
 801da6e:	4619      	mov	r1, r3
 801da70:	6878      	ldr	r0, [r7, #4]
 801da72:	f7f7 f9bf 	bl	8014df4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	895b      	ldrh	r3, [r3, #10]
 801da7a:	89fa      	ldrh	r2, [r7, #14]
 801da7c:	429a      	cmp	r2, r3
 801da7e:	d807      	bhi.n	801da90 <ip4_input+0x74>
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	891b      	ldrh	r3, [r3, #8]
 801da84:	89ba      	ldrh	r2, [r7, #12]
 801da86:	429a      	cmp	r2, r3
 801da88:	d802      	bhi.n	801da90 <ip4_input+0x74>
 801da8a:	89fb      	ldrh	r3, [r7, #14]
 801da8c:	2b13      	cmp	r3, #19
 801da8e:	d804      	bhi.n	801da9a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801da90:	6878      	ldr	r0, [r7, #4]
 801da92:	f7f7 fb35 	bl	8015100 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801da96:	2300      	movs	r3, #0
 801da98:	e0db      	b.n	801dc52 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801da9a:	697b      	ldr	r3, [r7, #20]
 801da9c:	691b      	ldr	r3, [r3, #16]
 801da9e:	4a6f      	ldr	r2, [pc, #444]	; (801dc5c <ip4_input+0x240>)
 801daa0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801daa2:	697b      	ldr	r3, [r7, #20]
 801daa4:	68db      	ldr	r3, [r3, #12]
 801daa6:	4a6d      	ldr	r2, [pc, #436]	; (801dc5c <ip4_input+0x240>)
 801daa8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801daaa:	4b6c      	ldr	r3, [pc, #432]	; (801dc5c <ip4_input+0x240>)
 801daac:	695b      	ldr	r3, [r3, #20]
 801daae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801dab2:	2be0      	cmp	r3, #224	; 0xe0
 801dab4:	d112      	bne.n	801dadc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801dab6:	683b      	ldr	r3, [r7, #0]
 801dab8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dabc:	f003 0301 	and.w	r3, r3, #1
 801dac0:	b2db      	uxtb	r3, r3
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	d007      	beq.n	801dad6 <ip4_input+0xba>
 801dac6:	683b      	ldr	r3, [r7, #0]
 801dac8:	3304      	adds	r3, #4
 801daca:	681b      	ldr	r3, [r3, #0]
 801dacc:	2b00      	cmp	r3, #0
 801dace:	d002      	beq.n	801dad6 <ip4_input+0xba>
      netif = inp;
 801dad0:	683b      	ldr	r3, [r7, #0]
 801dad2:	613b      	str	r3, [r7, #16]
 801dad4:	e02a      	b.n	801db2c <ip4_input+0x110>
    } else {
      netif = NULL;
 801dad6:	2300      	movs	r3, #0
 801dad8:	613b      	str	r3, [r7, #16]
 801dada:	e027      	b.n	801db2c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801dadc:	6838      	ldr	r0, [r7, #0]
 801dade:	f7ff ff73 	bl	801d9c8 <ip4_input_accept>
 801dae2:	4603      	mov	r3, r0
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d002      	beq.n	801daee <ip4_input+0xd2>
      netif = inp;
 801dae8:	683b      	ldr	r3, [r7, #0]
 801daea:	613b      	str	r3, [r7, #16]
 801daec:	e01e      	b.n	801db2c <ip4_input+0x110>
    } else {
      netif = NULL;
 801daee:	2300      	movs	r3, #0
 801daf0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801daf2:	4b5a      	ldr	r3, [pc, #360]	; (801dc5c <ip4_input+0x240>)
 801daf4:	695b      	ldr	r3, [r3, #20]
 801daf6:	b2db      	uxtb	r3, r3
 801daf8:	2b7f      	cmp	r3, #127	; 0x7f
 801dafa:	d017      	beq.n	801db2c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801dafc:	4b58      	ldr	r3, [pc, #352]	; (801dc60 <ip4_input+0x244>)
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	613b      	str	r3, [r7, #16]
 801db02:	e00e      	b.n	801db22 <ip4_input+0x106>
          if (netif == inp) {
 801db04:	693a      	ldr	r2, [r7, #16]
 801db06:	683b      	ldr	r3, [r7, #0]
 801db08:	429a      	cmp	r2, r3
 801db0a:	d006      	beq.n	801db1a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801db0c:	6938      	ldr	r0, [r7, #16]
 801db0e:	f7ff ff5b 	bl	801d9c8 <ip4_input_accept>
 801db12:	4603      	mov	r3, r0
 801db14:	2b00      	cmp	r3, #0
 801db16:	d108      	bne.n	801db2a <ip4_input+0x10e>
 801db18:	e000      	b.n	801db1c <ip4_input+0x100>
            continue;
 801db1a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801db1c:	693b      	ldr	r3, [r7, #16]
 801db1e:	681b      	ldr	r3, [r3, #0]
 801db20:	613b      	str	r3, [r7, #16]
 801db22:	693b      	ldr	r3, [r7, #16]
 801db24:	2b00      	cmp	r3, #0
 801db26:	d1ed      	bne.n	801db04 <ip4_input+0xe8>
 801db28:	e000      	b.n	801db2c <ip4_input+0x110>
            break;
 801db2a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801db2c:	4b4b      	ldr	r3, [pc, #300]	; (801dc5c <ip4_input+0x240>)
 801db2e:	691b      	ldr	r3, [r3, #16]
 801db30:	6839      	ldr	r1, [r7, #0]
 801db32:	4618      	mov	r0, r3
 801db34:	f000 f96e 	bl	801de14 <ip4_addr_isbroadcast_u32>
 801db38:	4603      	mov	r3, r0
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	d105      	bne.n	801db4a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801db3e:	4b47      	ldr	r3, [pc, #284]	; (801dc5c <ip4_input+0x240>)
 801db40:	691b      	ldr	r3, [r3, #16]
 801db42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801db46:	2be0      	cmp	r3, #224	; 0xe0
 801db48:	d104      	bne.n	801db54 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801db4a:	6878      	ldr	r0, [r7, #4]
 801db4c:	f7f7 fad8 	bl	8015100 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801db50:	2300      	movs	r3, #0
 801db52:	e07e      	b.n	801dc52 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801db54:	693b      	ldr	r3, [r7, #16]
 801db56:	2b00      	cmp	r3, #0
 801db58:	d104      	bne.n	801db64 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801db5a:	6878      	ldr	r0, [r7, #4]
 801db5c:	f7f7 fad0 	bl	8015100 <pbuf_free>
    return ERR_OK;
 801db60:	2300      	movs	r3, #0
 801db62:	e076      	b.n	801dc52 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801db64:	697b      	ldr	r3, [r7, #20]
 801db66:	88db      	ldrh	r3, [r3, #6]
 801db68:	b29b      	uxth	r3, r3
 801db6a:	461a      	mov	r2, r3
 801db6c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801db70:	4013      	ands	r3, r2
 801db72:	2b00      	cmp	r3, #0
 801db74:	d00b      	beq.n	801db8e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801db76:	6878      	ldr	r0, [r7, #4]
 801db78:	f000 fc92 	bl	801e4a0 <ip4_reass>
 801db7c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	2b00      	cmp	r3, #0
 801db82:	d101      	bne.n	801db88 <ip4_input+0x16c>
      return ERR_OK;
 801db84:	2300      	movs	r3, #0
 801db86:	e064      	b.n	801dc52 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801db88:	687b      	ldr	r3, [r7, #4]
 801db8a:	685b      	ldr	r3, [r3, #4]
 801db8c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801db8e:	4a33      	ldr	r2, [pc, #204]	; (801dc5c <ip4_input+0x240>)
 801db90:	693b      	ldr	r3, [r7, #16]
 801db92:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801db94:	4a31      	ldr	r2, [pc, #196]	; (801dc5c <ip4_input+0x240>)
 801db96:	683b      	ldr	r3, [r7, #0]
 801db98:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801db9a:	4a30      	ldr	r2, [pc, #192]	; (801dc5c <ip4_input+0x240>)
 801db9c:	697b      	ldr	r3, [r7, #20]
 801db9e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801dba0:	697b      	ldr	r3, [r7, #20]
 801dba2:	781b      	ldrb	r3, [r3, #0]
 801dba4:	f003 030f 	and.w	r3, r3, #15
 801dba8:	b2db      	uxtb	r3, r3
 801dbaa:	009b      	lsls	r3, r3, #2
 801dbac:	b2db      	uxtb	r3, r3
 801dbae:	b29a      	uxth	r2, r3
 801dbb0:	4b2a      	ldr	r3, [pc, #168]	; (801dc5c <ip4_input+0x240>)
 801dbb2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801dbb4:	89fb      	ldrh	r3, [r7, #14]
 801dbb6:	4619      	mov	r1, r3
 801dbb8:	6878      	ldr	r0, [r7, #4]
 801dbba:	f7f7 fa1b 	bl	8014ff4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801dbbe:	697b      	ldr	r3, [r7, #20]
 801dbc0:	7a5b      	ldrb	r3, [r3, #9]
 801dbc2:	2b11      	cmp	r3, #17
 801dbc4:	d006      	beq.n	801dbd4 <ip4_input+0x1b8>
 801dbc6:	2b11      	cmp	r3, #17
 801dbc8:	dc13      	bgt.n	801dbf2 <ip4_input+0x1d6>
 801dbca:	2b01      	cmp	r3, #1
 801dbcc:	d00c      	beq.n	801dbe8 <ip4_input+0x1cc>
 801dbce:	2b06      	cmp	r3, #6
 801dbd0:	d005      	beq.n	801dbde <ip4_input+0x1c2>
 801dbd2:	e00e      	b.n	801dbf2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801dbd4:	6839      	ldr	r1, [r7, #0]
 801dbd6:	6878      	ldr	r0, [r7, #4]
 801dbd8:	f7fe f902 	bl	801bde0 <udp_input>
        break;
 801dbdc:	e026      	b.n	801dc2c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801dbde:	6839      	ldr	r1, [r7, #0]
 801dbe0:	6878      	ldr	r0, [r7, #4]
 801dbe2:	f7f9 fcbb 	bl	801755c <tcp_input>
        break;
 801dbe6:	e021      	b.n	801dc2c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801dbe8:	6839      	ldr	r1, [r7, #0]
 801dbea:	6878      	ldr	r0, [r7, #4]
 801dbec:	f7ff fcee 	bl	801d5cc <icmp_input>
        break;
 801dbf0:	e01c      	b.n	801dc2c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801dbf2:	4b1a      	ldr	r3, [pc, #104]	; (801dc5c <ip4_input+0x240>)
 801dbf4:	695b      	ldr	r3, [r3, #20]
 801dbf6:	6939      	ldr	r1, [r7, #16]
 801dbf8:	4618      	mov	r0, r3
 801dbfa:	f000 f90b 	bl	801de14 <ip4_addr_isbroadcast_u32>
 801dbfe:	4603      	mov	r3, r0
 801dc00:	2b00      	cmp	r3, #0
 801dc02:	d10f      	bne.n	801dc24 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801dc04:	4b15      	ldr	r3, [pc, #84]	; (801dc5c <ip4_input+0x240>)
 801dc06:	695b      	ldr	r3, [r3, #20]
 801dc08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801dc0c:	2be0      	cmp	r3, #224	; 0xe0
 801dc0e:	d009      	beq.n	801dc24 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801dc10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801dc14:	4619      	mov	r1, r3
 801dc16:	6878      	ldr	r0, [r7, #4]
 801dc18:	f7f7 fa5f 	bl	80150da <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801dc1c:	2102      	movs	r1, #2
 801dc1e:	6878      	ldr	r0, [r7, #4]
 801dc20:	f7ff fdd8 	bl	801d7d4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801dc24:	6878      	ldr	r0, [r7, #4]
 801dc26:	f7f7 fa6b 	bl	8015100 <pbuf_free>
        break;
 801dc2a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801dc2c:	4b0b      	ldr	r3, [pc, #44]	; (801dc5c <ip4_input+0x240>)
 801dc2e:	2200      	movs	r2, #0
 801dc30:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801dc32:	4b0a      	ldr	r3, [pc, #40]	; (801dc5c <ip4_input+0x240>)
 801dc34:	2200      	movs	r2, #0
 801dc36:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801dc38:	4b08      	ldr	r3, [pc, #32]	; (801dc5c <ip4_input+0x240>)
 801dc3a:	2200      	movs	r2, #0
 801dc3c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801dc3e:	4b07      	ldr	r3, [pc, #28]	; (801dc5c <ip4_input+0x240>)
 801dc40:	2200      	movs	r2, #0
 801dc42:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801dc44:	4b05      	ldr	r3, [pc, #20]	; (801dc5c <ip4_input+0x240>)
 801dc46:	2200      	movs	r2, #0
 801dc48:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801dc4a:	4b04      	ldr	r3, [pc, #16]	; (801dc5c <ip4_input+0x240>)
 801dc4c:	2200      	movs	r2, #0
 801dc4e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801dc50:	2300      	movs	r3, #0
}
 801dc52:	4618      	mov	r0, r3
 801dc54:	3718      	adds	r7, #24
 801dc56:	46bd      	mov	sp, r7
 801dc58:	bd80      	pop	{r7, pc}
 801dc5a:	bf00      	nop
 801dc5c:	200066d4 	.word	0x200066d4
 801dc60:	2000bfdc 	.word	0x2000bfdc

0801dc64 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801dc64:	b580      	push	{r7, lr}
 801dc66:	b08a      	sub	sp, #40	; 0x28
 801dc68:	af04      	add	r7, sp, #16
 801dc6a:	60f8      	str	r0, [r7, #12]
 801dc6c:	60b9      	str	r1, [r7, #8]
 801dc6e:	607a      	str	r2, [r7, #4]
 801dc70:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801dc72:	68bb      	ldr	r3, [r7, #8]
 801dc74:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d009      	beq.n	801dc90 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801dc7c:	68bb      	ldr	r3, [r7, #8]
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d003      	beq.n	801dc8a <ip4_output_if+0x26>
 801dc82:	68bb      	ldr	r3, [r7, #8]
 801dc84:	681b      	ldr	r3, [r3, #0]
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	d102      	bne.n	801dc90 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801dc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc8c:	3304      	adds	r3, #4
 801dc8e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801dc90:	78fa      	ldrb	r2, [r7, #3]
 801dc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc94:	9302      	str	r3, [sp, #8]
 801dc96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dc9a:	9301      	str	r3, [sp, #4]
 801dc9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dca0:	9300      	str	r3, [sp, #0]
 801dca2:	4613      	mov	r3, r2
 801dca4:	687a      	ldr	r2, [r7, #4]
 801dca6:	6979      	ldr	r1, [r7, #20]
 801dca8:	68f8      	ldr	r0, [r7, #12]
 801dcaa:	f000 f805 	bl	801dcb8 <ip4_output_if_src>
 801dcae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801dcb0:	4618      	mov	r0, r3
 801dcb2:	3718      	adds	r7, #24
 801dcb4:	46bd      	mov	sp, r7
 801dcb6:	bd80      	pop	{r7, pc}

0801dcb8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801dcb8:	b580      	push	{r7, lr}
 801dcba:	b088      	sub	sp, #32
 801dcbc:	af00      	add	r7, sp, #0
 801dcbe:	60f8      	str	r0, [r7, #12]
 801dcc0:	60b9      	str	r1, [r7, #8]
 801dcc2:	607a      	str	r2, [r7, #4]
 801dcc4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801dcc6:	68fb      	ldr	r3, [r7, #12]
 801dcc8:	7b9b      	ldrb	r3, [r3, #14]
 801dcca:	2b01      	cmp	r3, #1
 801dccc:	d006      	beq.n	801dcdc <ip4_output_if_src+0x24>
 801dcce:	4b4b      	ldr	r3, [pc, #300]	; (801ddfc <ip4_output_if_src+0x144>)
 801dcd0:	f44f 7255 	mov.w	r2, #852	; 0x354
 801dcd4:	494a      	ldr	r1, [pc, #296]	; (801de00 <ip4_output_if_src+0x148>)
 801dcd6:	484b      	ldr	r0, [pc, #300]	; (801de04 <ip4_output_if_src+0x14c>)
 801dcd8:	f001 fc62 	bl	801f5a0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	d060      	beq.n	801dda4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801dce2:	2314      	movs	r3, #20
 801dce4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801dce6:	2114      	movs	r1, #20
 801dce8:	68f8      	ldr	r0, [r7, #12]
 801dcea:	f7f7 f973 	bl	8014fd4 <pbuf_add_header>
 801dcee:	4603      	mov	r3, r0
 801dcf0:	2b00      	cmp	r3, #0
 801dcf2:	d002      	beq.n	801dcfa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801dcf4:	f06f 0301 	mvn.w	r3, #1
 801dcf8:	e07c      	b.n	801ddf4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801dcfa:	68fb      	ldr	r3, [r7, #12]
 801dcfc:	685b      	ldr	r3, [r3, #4]
 801dcfe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801dd00:	68fb      	ldr	r3, [r7, #12]
 801dd02:	895b      	ldrh	r3, [r3, #10]
 801dd04:	2b13      	cmp	r3, #19
 801dd06:	d806      	bhi.n	801dd16 <ip4_output_if_src+0x5e>
 801dd08:	4b3c      	ldr	r3, [pc, #240]	; (801ddfc <ip4_output_if_src+0x144>)
 801dd0a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801dd0e:	493e      	ldr	r1, [pc, #248]	; (801de08 <ip4_output_if_src+0x150>)
 801dd10:	483c      	ldr	r0, [pc, #240]	; (801de04 <ip4_output_if_src+0x14c>)
 801dd12:	f001 fc45 	bl	801f5a0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801dd16:	69fb      	ldr	r3, [r7, #28]
 801dd18:	78fa      	ldrb	r2, [r7, #3]
 801dd1a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801dd1c:	69fb      	ldr	r3, [r7, #28]
 801dd1e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801dd22:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	681a      	ldr	r2, [r3, #0]
 801dd28:	69fb      	ldr	r3, [r7, #28]
 801dd2a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801dd2c:	8b7b      	ldrh	r3, [r7, #26]
 801dd2e:	089b      	lsrs	r3, r3, #2
 801dd30:	b29b      	uxth	r3, r3
 801dd32:	b2db      	uxtb	r3, r3
 801dd34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dd38:	b2da      	uxtb	r2, r3
 801dd3a:	69fb      	ldr	r3, [r7, #28]
 801dd3c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801dd3e:	69fb      	ldr	r3, [r7, #28]
 801dd40:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801dd44:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801dd46:	68fb      	ldr	r3, [r7, #12]
 801dd48:	891b      	ldrh	r3, [r3, #8]
 801dd4a:	4618      	mov	r0, r3
 801dd4c:	f7f5 fde6 	bl	801391c <lwip_htons>
 801dd50:	4603      	mov	r3, r0
 801dd52:	461a      	mov	r2, r3
 801dd54:	69fb      	ldr	r3, [r7, #28]
 801dd56:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801dd58:	69fb      	ldr	r3, [r7, #28]
 801dd5a:	2200      	movs	r2, #0
 801dd5c:	719a      	strb	r2, [r3, #6]
 801dd5e:	2200      	movs	r2, #0
 801dd60:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801dd62:	4b2a      	ldr	r3, [pc, #168]	; (801de0c <ip4_output_if_src+0x154>)
 801dd64:	881b      	ldrh	r3, [r3, #0]
 801dd66:	4618      	mov	r0, r3
 801dd68:	f7f5 fdd8 	bl	801391c <lwip_htons>
 801dd6c:	4603      	mov	r3, r0
 801dd6e:	461a      	mov	r2, r3
 801dd70:	69fb      	ldr	r3, [r7, #28]
 801dd72:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801dd74:	4b25      	ldr	r3, [pc, #148]	; (801de0c <ip4_output_if_src+0x154>)
 801dd76:	881b      	ldrh	r3, [r3, #0]
 801dd78:	3301      	adds	r3, #1
 801dd7a:	b29a      	uxth	r2, r3
 801dd7c:	4b23      	ldr	r3, [pc, #140]	; (801de0c <ip4_output_if_src+0x154>)
 801dd7e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801dd80:	68bb      	ldr	r3, [r7, #8]
 801dd82:	2b00      	cmp	r3, #0
 801dd84:	d104      	bne.n	801dd90 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801dd86:	4b22      	ldr	r3, [pc, #136]	; (801de10 <ip4_output_if_src+0x158>)
 801dd88:	681a      	ldr	r2, [r3, #0]
 801dd8a:	69fb      	ldr	r3, [r7, #28]
 801dd8c:	60da      	str	r2, [r3, #12]
 801dd8e:	e003      	b.n	801dd98 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801dd90:	68bb      	ldr	r3, [r7, #8]
 801dd92:	681a      	ldr	r2, [r3, #0]
 801dd94:	69fb      	ldr	r3, [r7, #28]
 801dd96:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801dd98:	69fb      	ldr	r3, [r7, #28]
 801dd9a:	2200      	movs	r2, #0
 801dd9c:	729a      	strb	r2, [r3, #10]
 801dd9e:	2200      	movs	r2, #0
 801dda0:	72da      	strb	r2, [r3, #11]
 801dda2:	e00f      	b.n	801ddc4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	895b      	ldrh	r3, [r3, #10]
 801dda8:	2b13      	cmp	r3, #19
 801ddaa:	d802      	bhi.n	801ddb2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ddac:	f06f 0301 	mvn.w	r3, #1
 801ddb0:	e020      	b.n	801ddf4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	685b      	ldr	r3, [r3, #4]
 801ddb6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801ddb8:	69fb      	ldr	r3, [r7, #28]
 801ddba:	691b      	ldr	r3, [r3, #16]
 801ddbc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801ddbe:	f107 0314 	add.w	r3, r7, #20
 801ddc2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801ddc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ddc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d00c      	beq.n	801dde6 <ip4_output_if_src+0x12e>
 801ddcc:	68fb      	ldr	r3, [r7, #12]
 801ddce:	891a      	ldrh	r2, [r3, #8]
 801ddd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ddd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ddd4:	429a      	cmp	r2, r3
 801ddd6:	d906      	bls.n	801dde6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801ddd8:	687a      	ldr	r2, [r7, #4]
 801ddda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dddc:	68f8      	ldr	r0, [r7, #12]
 801ddde:	f000 fd53 	bl	801e888 <ip4_frag>
 801dde2:	4603      	mov	r3, r0
 801dde4:	e006      	b.n	801ddf4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801dde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dde8:	695b      	ldr	r3, [r3, #20]
 801ddea:	687a      	ldr	r2, [r7, #4]
 801ddec:	68f9      	ldr	r1, [r7, #12]
 801ddee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ddf0:	4798      	blx	r3
 801ddf2:	4603      	mov	r3, r0
}
 801ddf4:	4618      	mov	r0, r3
 801ddf6:	3720      	adds	r7, #32
 801ddf8:	46bd      	mov	sp, r7
 801ddfa:	bd80      	pop	{r7, pc}
 801ddfc:	08023c44 	.word	0x08023c44
 801de00:	08023c78 	.word	0x08023c78
 801de04:	08023c84 	.word	0x08023c84
 801de08:	08023cac 	.word	0x08023cac
 801de0c:	2000c13a 	.word	0x2000c13a
 801de10:	080240e0 	.word	0x080240e0

0801de14 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801de14:	b480      	push	{r7}
 801de16:	b085      	sub	sp, #20
 801de18:	af00      	add	r7, sp, #0
 801de1a:	6078      	str	r0, [r7, #4]
 801de1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801de28:	d002      	beq.n	801de30 <ip4_addr_isbroadcast_u32+0x1c>
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	d101      	bne.n	801de34 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801de30:	2301      	movs	r3, #1
 801de32:	e02a      	b.n	801de8a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801de34:	683b      	ldr	r3, [r7, #0]
 801de36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801de3a:	f003 0302 	and.w	r3, r3, #2
 801de3e:	2b00      	cmp	r3, #0
 801de40:	d101      	bne.n	801de46 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801de42:	2300      	movs	r3, #0
 801de44:	e021      	b.n	801de8a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801de46:	683b      	ldr	r3, [r7, #0]
 801de48:	3304      	adds	r3, #4
 801de4a:	681b      	ldr	r3, [r3, #0]
 801de4c:	687a      	ldr	r2, [r7, #4]
 801de4e:	429a      	cmp	r2, r3
 801de50:	d101      	bne.n	801de56 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801de52:	2300      	movs	r3, #0
 801de54:	e019      	b.n	801de8a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801de56:	68fa      	ldr	r2, [r7, #12]
 801de58:	683b      	ldr	r3, [r7, #0]
 801de5a:	3304      	adds	r3, #4
 801de5c:	681b      	ldr	r3, [r3, #0]
 801de5e:	405a      	eors	r2, r3
 801de60:	683b      	ldr	r3, [r7, #0]
 801de62:	3308      	adds	r3, #8
 801de64:	681b      	ldr	r3, [r3, #0]
 801de66:	4013      	ands	r3, r2
 801de68:	2b00      	cmp	r3, #0
 801de6a:	d10d      	bne.n	801de88 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801de6c:	683b      	ldr	r3, [r7, #0]
 801de6e:	3308      	adds	r3, #8
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	43da      	mvns	r2, r3
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801de78:	683b      	ldr	r3, [r7, #0]
 801de7a:	3308      	adds	r3, #8
 801de7c:	681b      	ldr	r3, [r3, #0]
 801de7e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801de80:	429a      	cmp	r2, r3
 801de82:	d101      	bne.n	801de88 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801de84:	2301      	movs	r3, #1
 801de86:	e000      	b.n	801de8a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801de88:	2300      	movs	r3, #0
  }
}
 801de8a:	4618      	mov	r0, r3
 801de8c:	3714      	adds	r7, #20
 801de8e:	46bd      	mov	sp, r7
 801de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de94:	4770      	bx	lr
	...

0801de98 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801de98:	b580      	push	{r7, lr}
 801de9a:	b084      	sub	sp, #16
 801de9c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801de9e:	2300      	movs	r3, #0
 801dea0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801dea2:	4b12      	ldr	r3, [pc, #72]	; (801deec <ip_reass_tmr+0x54>)
 801dea4:	681b      	ldr	r3, [r3, #0]
 801dea6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801dea8:	e018      	b.n	801dedc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801deaa:	68fb      	ldr	r3, [r7, #12]
 801deac:	7fdb      	ldrb	r3, [r3, #31]
 801deae:	2b00      	cmp	r3, #0
 801deb0:	d00b      	beq.n	801deca <ip_reass_tmr+0x32>
      r->timer--;
 801deb2:	68fb      	ldr	r3, [r7, #12]
 801deb4:	7fdb      	ldrb	r3, [r3, #31]
 801deb6:	3b01      	subs	r3, #1
 801deb8:	b2da      	uxtb	r2, r3
 801deba:	68fb      	ldr	r3, [r7, #12]
 801debc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801debe:	68fb      	ldr	r3, [r7, #12]
 801dec0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801dec2:	68fb      	ldr	r3, [r7, #12]
 801dec4:	681b      	ldr	r3, [r3, #0]
 801dec6:	60fb      	str	r3, [r7, #12]
 801dec8:	e008      	b.n	801dedc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ded4:	68b9      	ldr	r1, [r7, #8]
 801ded6:	6878      	ldr	r0, [r7, #4]
 801ded8:	f000 f80a 	bl	801def0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801dedc:	68fb      	ldr	r3, [r7, #12]
 801dede:	2b00      	cmp	r3, #0
 801dee0:	d1e3      	bne.n	801deaa <ip_reass_tmr+0x12>
    }
  }
}
 801dee2:	bf00      	nop
 801dee4:	bf00      	nop
 801dee6:	3710      	adds	r7, #16
 801dee8:	46bd      	mov	sp, r7
 801deea:	bd80      	pop	{r7, pc}
 801deec:	2000c13c 	.word	0x2000c13c

0801def0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801def0:	b580      	push	{r7, lr}
 801def2:	b088      	sub	sp, #32
 801def4:	af00      	add	r7, sp, #0
 801def6:	6078      	str	r0, [r7, #4]
 801def8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801defa:	2300      	movs	r3, #0
 801defc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801defe:	683a      	ldr	r2, [r7, #0]
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	429a      	cmp	r2, r3
 801df04:	d105      	bne.n	801df12 <ip_reass_free_complete_datagram+0x22>
 801df06:	4b45      	ldr	r3, [pc, #276]	; (801e01c <ip_reass_free_complete_datagram+0x12c>)
 801df08:	22ab      	movs	r2, #171	; 0xab
 801df0a:	4945      	ldr	r1, [pc, #276]	; (801e020 <ip_reass_free_complete_datagram+0x130>)
 801df0c:	4845      	ldr	r0, [pc, #276]	; (801e024 <ip_reass_free_complete_datagram+0x134>)
 801df0e:	f001 fb47 	bl	801f5a0 <iprintf>
  if (prev != NULL) {
 801df12:	683b      	ldr	r3, [r7, #0]
 801df14:	2b00      	cmp	r3, #0
 801df16:	d00a      	beq.n	801df2e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801df18:	683b      	ldr	r3, [r7, #0]
 801df1a:	681b      	ldr	r3, [r3, #0]
 801df1c:	687a      	ldr	r2, [r7, #4]
 801df1e:	429a      	cmp	r2, r3
 801df20:	d005      	beq.n	801df2e <ip_reass_free_complete_datagram+0x3e>
 801df22:	4b3e      	ldr	r3, [pc, #248]	; (801e01c <ip_reass_free_complete_datagram+0x12c>)
 801df24:	22ad      	movs	r2, #173	; 0xad
 801df26:	4940      	ldr	r1, [pc, #256]	; (801e028 <ip_reass_free_complete_datagram+0x138>)
 801df28:	483e      	ldr	r0, [pc, #248]	; (801e024 <ip_reass_free_complete_datagram+0x134>)
 801df2a:	f001 fb39 	bl	801f5a0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801df2e:	687b      	ldr	r3, [r7, #4]
 801df30:	685b      	ldr	r3, [r3, #4]
 801df32:	685b      	ldr	r3, [r3, #4]
 801df34:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801df36:	697b      	ldr	r3, [r7, #20]
 801df38:	889b      	ldrh	r3, [r3, #4]
 801df3a:	b29b      	uxth	r3, r3
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	d12a      	bne.n	801df96 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801df40:	687b      	ldr	r3, [r7, #4]
 801df42:	685b      	ldr	r3, [r3, #4]
 801df44:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801df46:	697b      	ldr	r3, [r7, #20]
 801df48:	681a      	ldr	r2, [r3, #0]
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801df4e:	69bb      	ldr	r3, [r7, #24]
 801df50:	6858      	ldr	r0, [r3, #4]
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	3308      	adds	r3, #8
 801df56:	2214      	movs	r2, #20
 801df58:	4619      	mov	r1, r3
 801df5a:	f001 fa11 	bl	801f380 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801df5e:	2101      	movs	r1, #1
 801df60:	69b8      	ldr	r0, [r7, #24]
 801df62:	f7ff fc47 	bl	801d7f4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801df66:	69b8      	ldr	r0, [r7, #24]
 801df68:	f7f7 f958 	bl	801521c <pbuf_clen>
 801df6c:	4603      	mov	r3, r0
 801df6e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801df70:	8bfa      	ldrh	r2, [r7, #30]
 801df72:	8a7b      	ldrh	r3, [r7, #18]
 801df74:	4413      	add	r3, r2
 801df76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801df7a:	db05      	blt.n	801df88 <ip_reass_free_complete_datagram+0x98>
 801df7c:	4b27      	ldr	r3, [pc, #156]	; (801e01c <ip_reass_free_complete_datagram+0x12c>)
 801df7e:	22bc      	movs	r2, #188	; 0xbc
 801df80:	492a      	ldr	r1, [pc, #168]	; (801e02c <ip_reass_free_complete_datagram+0x13c>)
 801df82:	4828      	ldr	r0, [pc, #160]	; (801e024 <ip_reass_free_complete_datagram+0x134>)
 801df84:	f001 fb0c 	bl	801f5a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801df88:	8bfa      	ldrh	r2, [r7, #30]
 801df8a:	8a7b      	ldrh	r3, [r7, #18]
 801df8c:	4413      	add	r3, r2
 801df8e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801df90:	69b8      	ldr	r0, [r7, #24]
 801df92:	f7f7 f8b5 	bl	8015100 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801df96:	687b      	ldr	r3, [r7, #4]
 801df98:	685b      	ldr	r3, [r3, #4]
 801df9a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801df9c:	e01f      	b.n	801dfde <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801df9e:	69bb      	ldr	r3, [r7, #24]
 801dfa0:	685b      	ldr	r3, [r3, #4]
 801dfa2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801dfa4:	69bb      	ldr	r3, [r7, #24]
 801dfa6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801dfa8:	697b      	ldr	r3, [r7, #20]
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801dfae:	68f8      	ldr	r0, [r7, #12]
 801dfb0:	f7f7 f934 	bl	801521c <pbuf_clen>
 801dfb4:	4603      	mov	r3, r0
 801dfb6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801dfb8:	8bfa      	ldrh	r2, [r7, #30]
 801dfba:	8a7b      	ldrh	r3, [r7, #18]
 801dfbc:	4413      	add	r3, r2
 801dfbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801dfc2:	db05      	blt.n	801dfd0 <ip_reass_free_complete_datagram+0xe0>
 801dfc4:	4b15      	ldr	r3, [pc, #84]	; (801e01c <ip_reass_free_complete_datagram+0x12c>)
 801dfc6:	22cc      	movs	r2, #204	; 0xcc
 801dfc8:	4918      	ldr	r1, [pc, #96]	; (801e02c <ip_reass_free_complete_datagram+0x13c>)
 801dfca:	4816      	ldr	r0, [pc, #88]	; (801e024 <ip_reass_free_complete_datagram+0x134>)
 801dfcc:	f001 fae8 	bl	801f5a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801dfd0:	8bfa      	ldrh	r2, [r7, #30]
 801dfd2:	8a7b      	ldrh	r3, [r7, #18]
 801dfd4:	4413      	add	r3, r2
 801dfd6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801dfd8:	68f8      	ldr	r0, [r7, #12]
 801dfda:	f7f7 f891 	bl	8015100 <pbuf_free>
  while (p != NULL) {
 801dfde:	69bb      	ldr	r3, [r7, #24]
 801dfe0:	2b00      	cmp	r3, #0
 801dfe2:	d1dc      	bne.n	801df9e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801dfe4:	6839      	ldr	r1, [r7, #0]
 801dfe6:	6878      	ldr	r0, [r7, #4]
 801dfe8:	f000 f8c2 	bl	801e170 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801dfec:	4b10      	ldr	r3, [pc, #64]	; (801e030 <ip_reass_free_complete_datagram+0x140>)
 801dfee:	881b      	ldrh	r3, [r3, #0]
 801dff0:	8bfa      	ldrh	r2, [r7, #30]
 801dff2:	429a      	cmp	r2, r3
 801dff4:	d905      	bls.n	801e002 <ip_reass_free_complete_datagram+0x112>
 801dff6:	4b09      	ldr	r3, [pc, #36]	; (801e01c <ip_reass_free_complete_datagram+0x12c>)
 801dff8:	22d2      	movs	r2, #210	; 0xd2
 801dffa:	490e      	ldr	r1, [pc, #56]	; (801e034 <ip_reass_free_complete_datagram+0x144>)
 801dffc:	4809      	ldr	r0, [pc, #36]	; (801e024 <ip_reass_free_complete_datagram+0x134>)
 801dffe:	f001 facf 	bl	801f5a0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e002:	4b0b      	ldr	r3, [pc, #44]	; (801e030 <ip_reass_free_complete_datagram+0x140>)
 801e004:	881a      	ldrh	r2, [r3, #0]
 801e006:	8bfb      	ldrh	r3, [r7, #30]
 801e008:	1ad3      	subs	r3, r2, r3
 801e00a:	b29a      	uxth	r2, r3
 801e00c:	4b08      	ldr	r3, [pc, #32]	; (801e030 <ip_reass_free_complete_datagram+0x140>)
 801e00e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801e010:	8bfb      	ldrh	r3, [r7, #30]
}
 801e012:	4618      	mov	r0, r3
 801e014:	3720      	adds	r7, #32
 801e016:	46bd      	mov	sp, r7
 801e018:	bd80      	pop	{r7, pc}
 801e01a:	bf00      	nop
 801e01c:	08023cdc 	.word	0x08023cdc
 801e020:	08023d18 	.word	0x08023d18
 801e024:	08023d24 	.word	0x08023d24
 801e028:	08023d4c 	.word	0x08023d4c
 801e02c:	08023d60 	.word	0x08023d60
 801e030:	2000c140 	.word	0x2000c140
 801e034:	08023d80 	.word	0x08023d80

0801e038 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801e038:	b580      	push	{r7, lr}
 801e03a:	b08a      	sub	sp, #40	; 0x28
 801e03c:	af00      	add	r7, sp, #0
 801e03e:	6078      	str	r0, [r7, #4]
 801e040:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801e042:	2300      	movs	r3, #0
 801e044:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801e046:	2300      	movs	r3, #0
 801e048:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801e04a:	2300      	movs	r3, #0
 801e04c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801e04e:	2300      	movs	r3, #0
 801e050:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801e052:	2300      	movs	r3, #0
 801e054:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801e056:	4b28      	ldr	r3, [pc, #160]	; (801e0f8 <ip_reass_remove_oldest_datagram+0xc0>)
 801e058:	681b      	ldr	r3, [r3, #0]
 801e05a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801e05c:	e030      	b.n	801e0c0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e060:	695a      	ldr	r2, [r3, #20]
 801e062:	687b      	ldr	r3, [r7, #4]
 801e064:	68db      	ldr	r3, [r3, #12]
 801e066:	429a      	cmp	r2, r3
 801e068:	d10c      	bne.n	801e084 <ip_reass_remove_oldest_datagram+0x4c>
 801e06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e06c:	699a      	ldr	r2, [r3, #24]
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	691b      	ldr	r3, [r3, #16]
 801e072:	429a      	cmp	r2, r3
 801e074:	d106      	bne.n	801e084 <ip_reass_remove_oldest_datagram+0x4c>
 801e076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e078:	899a      	ldrh	r2, [r3, #12]
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	889b      	ldrh	r3, [r3, #4]
 801e07e:	b29b      	uxth	r3, r3
 801e080:	429a      	cmp	r2, r3
 801e082:	d014      	beq.n	801e0ae <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801e084:	693b      	ldr	r3, [r7, #16]
 801e086:	3301      	adds	r3, #1
 801e088:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801e08a:	6a3b      	ldr	r3, [r7, #32]
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	d104      	bne.n	801e09a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801e090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e092:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e094:	69fb      	ldr	r3, [r7, #28]
 801e096:	61bb      	str	r3, [r7, #24]
 801e098:	e009      	b.n	801e0ae <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801e09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e09c:	7fda      	ldrb	r2, [r3, #31]
 801e09e:	6a3b      	ldr	r3, [r7, #32]
 801e0a0:	7fdb      	ldrb	r3, [r3, #31]
 801e0a2:	429a      	cmp	r2, r3
 801e0a4:	d803      	bhi.n	801e0ae <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801e0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0a8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e0aa:	69fb      	ldr	r3, [r7, #28]
 801e0ac:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801e0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	d001      	beq.n	801e0ba <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801e0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0b8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801e0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0bc:	681b      	ldr	r3, [r3, #0]
 801e0be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801e0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0c2:	2b00      	cmp	r3, #0
 801e0c4:	d1cb      	bne.n	801e05e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801e0c6:	6a3b      	ldr	r3, [r7, #32]
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d008      	beq.n	801e0de <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801e0cc:	69b9      	ldr	r1, [r7, #24]
 801e0ce:	6a38      	ldr	r0, [r7, #32]
 801e0d0:	f7ff ff0e 	bl	801def0 <ip_reass_free_complete_datagram>
 801e0d4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801e0d6:	697a      	ldr	r2, [r7, #20]
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	4413      	add	r3, r2
 801e0dc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801e0de:	697a      	ldr	r2, [r7, #20]
 801e0e0:	683b      	ldr	r3, [r7, #0]
 801e0e2:	429a      	cmp	r2, r3
 801e0e4:	da02      	bge.n	801e0ec <ip_reass_remove_oldest_datagram+0xb4>
 801e0e6:	693b      	ldr	r3, [r7, #16]
 801e0e8:	2b01      	cmp	r3, #1
 801e0ea:	dcac      	bgt.n	801e046 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801e0ec:	697b      	ldr	r3, [r7, #20]
}
 801e0ee:	4618      	mov	r0, r3
 801e0f0:	3728      	adds	r7, #40	; 0x28
 801e0f2:	46bd      	mov	sp, r7
 801e0f4:	bd80      	pop	{r7, pc}
 801e0f6:	bf00      	nop
 801e0f8:	2000c13c 	.word	0x2000c13c

0801e0fc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801e0fc:	b580      	push	{r7, lr}
 801e0fe:	b084      	sub	sp, #16
 801e100:	af00      	add	r7, sp, #0
 801e102:	6078      	str	r0, [r7, #4]
 801e104:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e106:	2004      	movs	r0, #4
 801e108:	f7f6 f8e0 	bl	80142cc <memp_malloc>
 801e10c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801e10e:	68fb      	ldr	r3, [r7, #12]
 801e110:	2b00      	cmp	r3, #0
 801e112:	d110      	bne.n	801e136 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801e114:	6839      	ldr	r1, [r7, #0]
 801e116:	6878      	ldr	r0, [r7, #4]
 801e118:	f7ff ff8e 	bl	801e038 <ip_reass_remove_oldest_datagram>
 801e11c:	4602      	mov	r2, r0
 801e11e:	683b      	ldr	r3, [r7, #0]
 801e120:	4293      	cmp	r3, r2
 801e122:	dc03      	bgt.n	801e12c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e124:	2004      	movs	r0, #4
 801e126:	f7f6 f8d1 	bl	80142cc <memp_malloc>
 801e12a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801e12c:	68fb      	ldr	r3, [r7, #12]
 801e12e:	2b00      	cmp	r3, #0
 801e130:	d101      	bne.n	801e136 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801e132:	2300      	movs	r3, #0
 801e134:	e016      	b.n	801e164 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801e136:	2220      	movs	r2, #32
 801e138:	2100      	movs	r1, #0
 801e13a:	68f8      	ldr	r0, [r7, #12]
 801e13c:	f001 f948 	bl	801f3d0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801e140:	68fb      	ldr	r3, [r7, #12]
 801e142:	220f      	movs	r2, #15
 801e144:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801e146:	4b09      	ldr	r3, [pc, #36]	; (801e16c <ip_reass_enqueue_new_datagram+0x70>)
 801e148:	681a      	ldr	r2, [r3, #0]
 801e14a:	68fb      	ldr	r3, [r7, #12]
 801e14c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801e14e:	4a07      	ldr	r2, [pc, #28]	; (801e16c <ip_reass_enqueue_new_datagram+0x70>)
 801e150:	68fb      	ldr	r3, [r7, #12]
 801e152:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801e154:	68fb      	ldr	r3, [r7, #12]
 801e156:	3308      	adds	r3, #8
 801e158:	2214      	movs	r2, #20
 801e15a:	6879      	ldr	r1, [r7, #4]
 801e15c:	4618      	mov	r0, r3
 801e15e:	f001 f90f 	bl	801f380 <memcpy>
  return ipr;
 801e162:	68fb      	ldr	r3, [r7, #12]
}
 801e164:	4618      	mov	r0, r3
 801e166:	3710      	adds	r7, #16
 801e168:	46bd      	mov	sp, r7
 801e16a:	bd80      	pop	{r7, pc}
 801e16c:	2000c13c 	.word	0x2000c13c

0801e170 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e170:	b580      	push	{r7, lr}
 801e172:	b082      	sub	sp, #8
 801e174:	af00      	add	r7, sp, #0
 801e176:	6078      	str	r0, [r7, #4]
 801e178:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801e17a:	4b10      	ldr	r3, [pc, #64]	; (801e1bc <ip_reass_dequeue_datagram+0x4c>)
 801e17c:	681b      	ldr	r3, [r3, #0]
 801e17e:	687a      	ldr	r2, [r7, #4]
 801e180:	429a      	cmp	r2, r3
 801e182:	d104      	bne.n	801e18e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	681b      	ldr	r3, [r3, #0]
 801e188:	4a0c      	ldr	r2, [pc, #48]	; (801e1bc <ip_reass_dequeue_datagram+0x4c>)
 801e18a:	6013      	str	r3, [r2, #0]
 801e18c:	e00d      	b.n	801e1aa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e18e:	683b      	ldr	r3, [r7, #0]
 801e190:	2b00      	cmp	r3, #0
 801e192:	d106      	bne.n	801e1a2 <ip_reass_dequeue_datagram+0x32>
 801e194:	4b0a      	ldr	r3, [pc, #40]	; (801e1c0 <ip_reass_dequeue_datagram+0x50>)
 801e196:	f240 1245 	movw	r2, #325	; 0x145
 801e19a:	490a      	ldr	r1, [pc, #40]	; (801e1c4 <ip_reass_dequeue_datagram+0x54>)
 801e19c:	480a      	ldr	r0, [pc, #40]	; (801e1c8 <ip_reass_dequeue_datagram+0x58>)
 801e19e:	f001 f9ff 	bl	801f5a0 <iprintf>
    prev->next = ipr->next;
 801e1a2:	687b      	ldr	r3, [r7, #4]
 801e1a4:	681a      	ldr	r2, [r3, #0]
 801e1a6:	683b      	ldr	r3, [r7, #0]
 801e1a8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801e1aa:	6879      	ldr	r1, [r7, #4]
 801e1ac:	2004      	movs	r0, #4
 801e1ae:	f7f6 f903 	bl	80143b8 <memp_free>
}
 801e1b2:	bf00      	nop
 801e1b4:	3708      	adds	r7, #8
 801e1b6:	46bd      	mov	sp, r7
 801e1b8:	bd80      	pop	{r7, pc}
 801e1ba:	bf00      	nop
 801e1bc:	2000c13c 	.word	0x2000c13c
 801e1c0:	08023cdc 	.word	0x08023cdc
 801e1c4:	08023da4 	.word	0x08023da4
 801e1c8:	08023d24 	.word	0x08023d24

0801e1cc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801e1cc:	b580      	push	{r7, lr}
 801e1ce:	b08c      	sub	sp, #48	; 0x30
 801e1d0:	af00      	add	r7, sp, #0
 801e1d2:	60f8      	str	r0, [r7, #12]
 801e1d4:	60b9      	str	r1, [r7, #8]
 801e1d6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801e1d8:	2300      	movs	r3, #0
 801e1da:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801e1dc:	2301      	movs	r3, #1
 801e1de:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801e1e0:	68bb      	ldr	r3, [r7, #8]
 801e1e2:	685b      	ldr	r3, [r3, #4]
 801e1e4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e1e6:	69fb      	ldr	r3, [r7, #28]
 801e1e8:	885b      	ldrh	r3, [r3, #2]
 801e1ea:	b29b      	uxth	r3, r3
 801e1ec:	4618      	mov	r0, r3
 801e1ee:	f7f5 fb95 	bl	801391c <lwip_htons>
 801e1f2:	4603      	mov	r3, r0
 801e1f4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801e1f6:	69fb      	ldr	r3, [r7, #28]
 801e1f8:	781b      	ldrb	r3, [r3, #0]
 801e1fa:	f003 030f 	and.w	r3, r3, #15
 801e1fe:	b2db      	uxtb	r3, r3
 801e200:	009b      	lsls	r3, r3, #2
 801e202:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801e204:	7e7b      	ldrb	r3, [r7, #25]
 801e206:	b29b      	uxth	r3, r3
 801e208:	8b7a      	ldrh	r2, [r7, #26]
 801e20a:	429a      	cmp	r2, r3
 801e20c:	d202      	bcs.n	801e214 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e20e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e212:	e135      	b.n	801e480 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801e214:	7e7b      	ldrb	r3, [r7, #25]
 801e216:	b29b      	uxth	r3, r3
 801e218:	8b7a      	ldrh	r2, [r7, #26]
 801e21a:	1ad3      	subs	r3, r2, r3
 801e21c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e21e:	69fb      	ldr	r3, [r7, #28]
 801e220:	88db      	ldrh	r3, [r3, #6]
 801e222:	b29b      	uxth	r3, r3
 801e224:	4618      	mov	r0, r3
 801e226:	f7f5 fb79 	bl	801391c <lwip_htons>
 801e22a:	4603      	mov	r3, r0
 801e22c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e230:	b29b      	uxth	r3, r3
 801e232:	00db      	lsls	r3, r3, #3
 801e234:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801e236:	68bb      	ldr	r3, [r7, #8]
 801e238:	685b      	ldr	r3, [r3, #4]
 801e23a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801e23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e23e:	2200      	movs	r2, #0
 801e240:	701a      	strb	r2, [r3, #0]
 801e242:	2200      	movs	r2, #0
 801e244:	705a      	strb	r2, [r3, #1]
 801e246:	2200      	movs	r2, #0
 801e248:	709a      	strb	r2, [r3, #2]
 801e24a:	2200      	movs	r2, #0
 801e24c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801e24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e250:	8afa      	ldrh	r2, [r7, #22]
 801e252:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801e254:	8afa      	ldrh	r2, [r7, #22]
 801e256:	8b7b      	ldrh	r3, [r7, #26]
 801e258:	4413      	add	r3, r2
 801e25a:	b29a      	uxth	r2, r3
 801e25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e25e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801e260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e262:	88db      	ldrh	r3, [r3, #6]
 801e264:	b29b      	uxth	r3, r3
 801e266:	8afa      	ldrh	r2, [r7, #22]
 801e268:	429a      	cmp	r2, r3
 801e26a:	d902      	bls.n	801e272 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e26c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e270:	e106      	b.n	801e480 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801e272:	68fb      	ldr	r3, [r7, #12]
 801e274:	685b      	ldr	r3, [r3, #4]
 801e276:	627b      	str	r3, [r7, #36]	; 0x24
 801e278:	e068      	b.n	801e34c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801e27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e27c:	685b      	ldr	r3, [r3, #4]
 801e27e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801e280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e282:	889b      	ldrh	r3, [r3, #4]
 801e284:	b29a      	uxth	r2, r3
 801e286:	693b      	ldr	r3, [r7, #16]
 801e288:	889b      	ldrh	r3, [r3, #4]
 801e28a:	b29b      	uxth	r3, r3
 801e28c:	429a      	cmp	r2, r3
 801e28e:	d235      	bcs.n	801e2fc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801e290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e294:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801e296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e298:	2b00      	cmp	r3, #0
 801e29a:	d020      	beq.n	801e2de <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801e29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e29e:	889b      	ldrh	r3, [r3, #4]
 801e2a0:	b29a      	uxth	r2, r3
 801e2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2a4:	88db      	ldrh	r3, [r3, #6]
 801e2a6:	b29b      	uxth	r3, r3
 801e2a8:	429a      	cmp	r2, r3
 801e2aa:	d307      	bcc.n	801e2bc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801e2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2ae:	88db      	ldrh	r3, [r3, #6]
 801e2b0:	b29a      	uxth	r2, r3
 801e2b2:	693b      	ldr	r3, [r7, #16]
 801e2b4:	889b      	ldrh	r3, [r3, #4]
 801e2b6:	b29b      	uxth	r3, r3
 801e2b8:	429a      	cmp	r2, r3
 801e2ba:	d902      	bls.n	801e2c2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e2bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e2c0:	e0de      	b.n	801e480 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801e2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2c4:	68ba      	ldr	r2, [r7, #8]
 801e2c6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801e2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2ca:	88db      	ldrh	r3, [r3, #6]
 801e2cc:	b29a      	uxth	r2, r3
 801e2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2d0:	889b      	ldrh	r3, [r3, #4]
 801e2d2:	b29b      	uxth	r3, r3
 801e2d4:	429a      	cmp	r2, r3
 801e2d6:	d03d      	beq.n	801e354 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e2d8:	2300      	movs	r3, #0
 801e2da:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801e2dc:	e03a      	b.n	801e354 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801e2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2e0:	88db      	ldrh	r3, [r3, #6]
 801e2e2:	b29a      	uxth	r2, r3
 801e2e4:	693b      	ldr	r3, [r7, #16]
 801e2e6:	889b      	ldrh	r3, [r3, #4]
 801e2e8:	b29b      	uxth	r3, r3
 801e2ea:	429a      	cmp	r2, r3
 801e2ec:	d902      	bls.n	801e2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e2ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e2f2:	e0c5      	b.n	801e480 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801e2f4:	68fb      	ldr	r3, [r7, #12]
 801e2f6:	68ba      	ldr	r2, [r7, #8]
 801e2f8:	605a      	str	r2, [r3, #4]
      break;
 801e2fa:	e02b      	b.n	801e354 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2fe:	889b      	ldrh	r3, [r3, #4]
 801e300:	b29a      	uxth	r2, r3
 801e302:	693b      	ldr	r3, [r7, #16]
 801e304:	889b      	ldrh	r3, [r3, #4]
 801e306:	b29b      	uxth	r3, r3
 801e308:	429a      	cmp	r2, r3
 801e30a:	d102      	bne.n	801e312 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e30c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e310:	e0b6      	b.n	801e480 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801e312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e314:	889b      	ldrh	r3, [r3, #4]
 801e316:	b29a      	uxth	r2, r3
 801e318:	693b      	ldr	r3, [r7, #16]
 801e31a:	88db      	ldrh	r3, [r3, #6]
 801e31c:	b29b      	uxth	r3, r3
 801e31e:	429a      	cmp	r2, r3
 801e320:	d202      	bcs.n	801e328 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e326:	e0ab      	b.n	801e480 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801e328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e32a:	2b00      	cmp	r3, #0
 801e32c:	d009      	beq.n	801e342 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801e32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e330:	88db      	ldrh	r3, [r3, #6]
 801e332:	b29a      	uxth	r2, r3
 801e334:	693b      	ldr	r3, [r7, #16]
 801e336:	889b      	ldrh	r3, [r3, #4]
 801e338:	b29b      	uxth	r3, r3
 801e33a:	429a      	cmp	r2, r3
 801e33c:	d001      	beq.n	801e342 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e33e:	2300      	movs	r3, #0
 801e340:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801e342:	693b      	ldr	r3, [r7, #16]
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801e348:	693b      	ldr	r3, [r7, #16]
 801e34a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801e34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e34e:	2b00      	cmp	r3, #0
 801e350:	d193      	bne.n	801e27a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801e352:	e000      	b.n	801e356 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801e354:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801e356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e358:	2b00      	cmp	r3, #0
 801e35a:	d12d      	bne.n	801e3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801e35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e35e:	2b00      	cmp	r3, #0
 801e360:	d01c      	beq.n	801e39c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801e362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e364:	88db      	ldrh	r3, [r3, #6]
 801e366:	b29a      	uxth	r2, r3
 801e368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e36a:	889b      	ldrh	r3, [r3, #4]
 801e36c:	b29b      	uxth	r3, r3
 801e36e:	429a      	cmp	r2, r3
 801e370:	d906      	bls.n	801e380 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801e372:	4b45      	ldr	r3, [pc, #276]	; (801e488 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e374:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801e378:	4944      	ldr	r1, [pc, #272]	; (801e48c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801e37a:	4845      	ldr	r0, [pc, #276]	; (801e490 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e37c:	f001 f910 	bl	801f5a0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801e380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e382:	68ba      	ldr	r2, [r7, #8]
 801e384:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801e386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e388:	88db      	ldrh	r3, [r3, #6]
 801e38a:	b29a      	uxth	r2, r3
 801e38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e38e:	889b      	ldrh	r3, [r3, #4]
 801e390:	b29b      	uxth	r3, r3
 801e392:	429a      	cmp	r2, r3
 801e394:	d010      	beq.n	801e3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801e396:	2300      	movs	r3, #0
 801e398:	623b      	str	r3, [r7, #32]
 801e39a:	e00d      	b.n	801e3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801e39c:	68fb      	ldr	r3, [r7, #12]
 801e39e:	685b      	ldr	r3, [r3, #4]
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	d006      	beq.n	801e3b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801e3a4:	4b38      	ldr	r3, [pc, #224]	; (801e488 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e3a6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801e3aa:	493a      	ldr	r1, [pc, #232]	; (801e494 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801e3ac:	4838      	ldr	r0, [pc, #224]	; (801e490 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e3ae:	f001 f8f7 	bl	801f5a0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801e3b2:	68fb      	ldr	r3, [r7, #12]
 801e3b4:	68ba      	ldr	r2, [r7, #8]
 801e3b6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e3b8:	687b      	ldr	r3, [r7, #4]
 801e3ba:	2b00      	cmp	r3, #0
 801e3bc:	d105      	bne.n	801e3ca <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801e3be:	68fb      	ldr	r3, [r7, #12]
 801e3c0:	7f9b      	ldrb	r3, [r3, #30]
 801e3c2:	f003 0301 	and.w	r3, r3, #1
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	d059      	beq.n	801e47e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801e3ca:	6a3b      	ldr	r3, [r7, #32]
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	d04f      	beq.n	801e470 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801e3d0:	68fb      	ldr	r3, [r7, #12]
 801e3d2:	685b      	ldr	r3, [r3, #4]
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	d006      	beq.n	801e3e6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801e3d8:	68fb      	ldr	r3, [r7, #12]
 801e3da:	685b      	ldr	r3, [r3, #4]
 801e3dc:	685b      	ldr	r3, [r3, #4]
 801e3de:	889b      	ldrh	r3, [r3, #4]
 801e3e0:	b29b      	uxth	r3, r3
 801e3e2:	2b00      	cmp	r3, #0
 801e3e4:	d002      	beq.n	801e3ec <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801e3e6:	2300      	movs	r3, #0
 801e3e8:	623b      	str	r3, [r7, #32]
 801e3ea:	e041      	b.n	801e470 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801e3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e3ee:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801e3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e3f2:	681b      	ldr	r3, [r3, #0]
 801e3f4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e3f6:	e012      	b.n	801e41e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801e3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3fa:	685b      	ldr	r3, [r3, #4]
 801e3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801e3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e400:	88db      	ldrh	r3, [r3, #6]
 801e402:	b29a      	uxth	r2, r3
 801e404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e406:	889b      	ldrh	r3, [r3, #4]
 801e408:	b29b      	uxth	r3, r3
 801e40a:	429a      	cmp	r2, r3
 801e40c:	d002      	beq.n	801e414 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801e40e:	2300      	movs	r3, #0
 801e410:	623b      	str	r3, [r7, #32]
            break;
 801e412:	e007      	b.n	801e424 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801e414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e416:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801e418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e41a:	681b      	ldr	r3, [r3, #0]
 801e41c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e420:	2b00      	cmp	r3, #0
 801e422:	d1e9      	bne.n	801e3f8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801e424:	6a3b      	ldr	r3, [r7, #32]
 801e426:	2b00      	cmp	r3, #0
 801e428:	d022      	beq.n	801e470 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801e42a:	68fb      	ldr	r3, [r7, #12]
 801e42c:	685b      	ldr	r3, [r3, #4]
 801e42e:	2b00      	cmp	r3, #0
 801e430:	d106      	bne.n	801e440 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801e432:	4b15      	ldr	r3, [pc, #84]	; (801e488 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e434:	f240 12df 	movw	r2, #479	; 0x1df
 801e438:	4917      	ldr	r1, [pc, #92]	; (801e498 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e43a:	4815      	ldr	r0, [pc, #84]	; (801e490 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e43c:	f001 f8b0 	bl	801f5a0 <iprintf>
          LWIP_ASSERT("sanity check",
 801e440:	68fb      	ldr	r3, [r7, #12]
 801e442:	685b      	ldr	r3, [r3, #4]
 801e444:	685b      	ldr	r3, [r3, #4]
 801e446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e448:	429a      	cmp	r2, r3
 801e44a:	d106      	bne.n	801e45a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801e44c:	4b0e      	ldr	r3, [pc, #56]	; (801e488 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e44e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801e452:	4911      	ldr	r1, [pc, #68]	; (801e498 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e454:	480e      	ldr	r0, [pc, #56]	; (801e490 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e456:	f001 f8a3 	bl	801f5a0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801e45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e45c:	681b      	ldr	r3, [r3, #0]
 801e45e:	2b00      	cmp	r3, #0
 801e460:	d006      	beq.n	801e470 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801e462:	4b09      	ldr	r3, [pc, #36]	; (801e488 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e464:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801e468:	490c      	ldr	r1, [pc, #48]	; (801e49c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801e46a:	4809      	ldr	r0, [pc, #36]	; (801e490 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e46c:	f001 f898 	bl	801f5a0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801e470:	6a3b      	ldr	r3, [r7, #32]
 801e472:	2b00      	cmp	r3, #0
 801e474:	bf14      	ite	ne
 801e476:	2301      	movne	r3, #1
 801e478:	2300      	moveq	r3, #0
 801e47a:	b2db      	uxtb	r3, r3
 801e47c:	e000      	b.n	801e480 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801e47e:	2300      	movs	r3, #0
}
 801e480:	4618      	mov	r0, r3
 801e482:	3730      	adds	r7, #48	; 0x30
 801e484:	46bd      	mov	sp, r7
 801e486:	bd80      	pop	{r7, pc}
 801e488:	08023cdc 	.word	0x08023cdc
 801e48c:	08023dc0 	.word	0x08023dc0
 801e490:	08023d24 	.word	0x08023d24
 801e494:	08023de0 	.word	0x08023de0
 801e498:	08023e18 	.word	0x08023e18
 801e49c:	08023e28 	.word	0x08023e28

0801e4a0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801e4a0:	b580      	push	{r7, lr}
 801e4a2:	b08e      	sub	sp, #56	; 0x38
 801e4a4:	af00      	add	r7, sp, #0
 801e4a6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	685b      	ldr	r3, [r3, #4]
 801e4ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4b0:	781b      	ldrb	r3, [r3, #0]
 801e4b2:	f003 030f 	and.w	r3, r3, #15
 801e4b6:	b2db      	uxtb	r3, r3
 801e4b8:	009b      	lsls	r3, r3, #2
 801e4ba:	b2db      	uxtb	r3, r3
 801e4bc:	2b14      	cmp	r3, #20
 801e4be:	f040 8171 	bne.w	801e7a4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801e4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4c4:	88db      	ldrh	r3, [r3, #6]
 801e4c6:	b29b      	uxth	r3, r3
 801e4c8:	4618      	mov	r0, r3
 801e4ca:	f7f5 fa27 	bl	801391c <lwip_htons>
 801e4ce:	4603      	mov	r3, r0
 801e4d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e4d4:	b29b      	uxth	r3, r3
 801e4d6:	00db      	lsls	r3, r3, #3
 801e4d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4dc:	885b      	ldrh	r3, [r3, #2]
 801e4de:	b29b      	uxth	r3, r3
 801e4e0:	4618      	mov	r0, r3
 801e4e2:	f7f5 fa1b 	bl	801391c <lwip_htons>
 801e4e6:	4603      	mov	r3, r0
 801e4e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801e4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4ec:	781b      	ldrb	r3, [r3, #0]
 801e4ee:	f003 030f 	and.w	r3, r3, #15
 801e4f2:	b2db      	uxtb	r3, r3
 801e4f4:	009b      	lsls	r3, r3, #2
 801e4f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801e4fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e4fe:	b29b      	uxth	r3, r3
 801e500:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e502:	429a      	cmp	r2, r3
 801e504:	f0c0 8150 	bcc.w	801e7a8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801e508:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e50c:	b29b      	uxth	r3, r3
 801e50e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e510:	1ad3      	subs	r3, r2, r3
 801e512:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801e514:	6878      	ldr	r0, [r7, #4]
 801e516:	f7f6 fe81 	bl	801521c <pbuf_clen>
 801e51a:	4603      	mov	r3, r0
 801e51c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e51e:	4b8c      	ldr	r3, [pc, #560]	; (801e750 <ip4_reass+0x2b0>)
 801e520:	881b      	ldrh	r3, [r3, #0]
 801e522:	461a      	mov	r2, r3
 801e524:	8c3b      	ldrh	r3, [r7, #32]
 801e526:	4413      	add	r3, r2
 801e528:	2b0a      	cmp	r3, #10
 801e52a:	dd10      	ble.n	801e54e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e52c:	8c3b      	ldrh	r3, [r7, #32]
 801e52e:	4619      	mov	r1, r3
 801e530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e532:	f7ff fd81 	bl	801e038 <ip_reass_remove_oldest_datagram>
 801e536:	4603      	mov	r3, r0
 801e538:	2b00      	cmp	r3, #0
 801e53a:	f000 8137 	beq.w	801e7ac <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801e53e:	4b84      	ldr	r3, [pc, #528]	; (801e750 <ip4_reass+0x2b0>)
 801e540:	881b      	ldrh	r3, [r3, #0]
 801e542:	461a      	mov	r2, r3
 801e544:	8c3b      	ldrh	r3, [r7, #32]
 801e546:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e548:	2b0a      	cmp	r3, #10
 801e54a:	f300 812f 	bgt.w	801e7ac <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e54e:	4b81      	ldr	r3, [pc, #516]	; (801e754 <ip4_reass+0x2b4>)
 801e550:	681b      	ldr	r3, [r3, #0]
 801e552:	633b      	str	r3, [r7, #48]	; 0x30
 801e554:	e015      	b.n	801e582 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e558:	695a      	ldr	r2, [r3, #20]
 801e55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e55c:	68db      	ldr	r3, [r3, #12]
 801e55e:	429a      	cmp	r2, r3
 801e560:	d10c      	bne.n	801e57c <ip4_reass+0xdc>
 801e562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e564:	699a      	ldr	r2, [r3, #24]
 801e566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e568:	691b      	ldr	r3, [r3, #16]
 801e56a:	429a      	cmp	r2, r3
 801e56c:	d106      	bne.n	801e57c <ip4_reass+0xdc>
 801e56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e570:	899a      	ldrh	r2, [r3, #12]
 801e572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e574:	889b      	ldrh	r3, [r3, #4]
 801e576:	b29b      	uxth	r3, r3
 801e578:	429a      	cmp	r2, r3
 801e57a:	d006      	beq.n	801e58a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e57e:	681b      	ldr	r3, [r3, #0]
 801e580:	633b      	str	r3, [r7, #48]	; 0x30
 801e582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e584:	2b00      	cmp	r3, #0
 801e586:	d1e6      	bne.n	801e556 <ip4_reass+0xb6>
 801e588:	e000      	b.n	801e58c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801e58a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801e58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d109      	bne.n	801e5a6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801e592:	8c3b      	ldrh	r3, [r7, #32]
 801e594:	4619      	mov	r1, r3
 801e596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e598:	f7ff fdb0 	bl	801e0fc <ip_reass_enqueue_new_datagram>
 801e59c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801e59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	d11c      	bne.n	801e5de <ip4_reass+0x13e>
      goto nullreturn;
 801e5a4:	e105      	b.n	801e7b2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5a8:	88db      	ldrh	r3, [r3, #6]
 801e5aa:	b29b      	uxth	r3, r3
 801e5ac:	4618      	mov	r0, r3
 801e5ae:	f7f5 f9b5 	bl	801391c <lwip_htons>
 801e5b2:	4603      	mov	r3, r0
 801e5b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	d110      	bne.n	801e5de <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801e5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e5be:	89db      	ldrh	r3, [r3, #14]
 801e5c0:	4618      	mov	r0, r3
 801e5c2:	f7f5 f9ab 	bl	801391c <lwip_htons>
 801e5c6:	4603      	mov	r3, r0
 801e5c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d006      	beq.n	801e5de <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801e5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e5d2:	3308      	adds	r3, #8
 801e5d4:	2214      	movs	r2, #20
 801e5d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e5d8:	4618      	mov	r0, r3
 801e5da:	f000 fed1 	bl	801f380 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801e5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5e0:	88db      	ldrh	r3, [r3, #6]
 801e5e2:	b29b      	uxth	r3, r3
 801e5e4:	f003 0320 	and.w	r3, r3, #32
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	bf0c      	ite	eq
 801e5ec:	2301      	moveq	r3, #1
 801e5ee:	2300      	movne	r3, #0
 801e5f0:	b2db      	uxtb	r3, r3
 801e5f2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801e5f4:	69fb      	ldr	r3, [r7, #28]
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d00e      	beq.n	801e618 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801e5fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801e5fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e5fe:	4413      	add	r3, r2
 801e600:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801e602:	8b7a      	ldrh	r2, [r7, #26]
 801e604:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e606:	429a      	cmp	r2, r3
 801e608:	f0c0 80a0 	bcc.w	801e74c <ip4_reass+0x2ac>
 801e60c:	8b7b      	ldrh	r3, [r7, #26]
 801e60e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801e612:	4293      	cmp	r3, r2
 801e614:	f200 809a 	bhi.w	801e74c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801e618:	69fa      	ldr	r2, [r7, #28]
 801e61a:	6879      	ldr	r1, [r7, #4]
 801e61c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e61e:	f7ff fdd5 	bl	801e1cc <ip_reass_chain_frag_into_datagram_and_validate>
 801e622:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801e624:	697b      	ldr	r3, [r7, #20]
 801e626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e62a:	f000 809b 	beq.w	801e764 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e62e:	4b48      	ldr	r3, [pc, #288]	; (801e750 <ip4_reass+0x2b0>)
 801e630:	881a      	ldrh	r2, [r3, #0]
 801e632:	8c3b      	ldrh	r3, [r7, #32]
 801e634:	4413      	add	r3, r2
 801e636:	b29a      	uxth	r2, r3
 801e638:	4b45      	ldr	r3, [pc, #276]	; (801e750 <ip4_reass+0x2b0>)
 801e63a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801e63c:	69fb      	ldr	r3, [r7, #28]
 801e63e:	2b00      	cmp	r3, #0
 801e640:	d00d      	beq.n	801e65e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801e642:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801e644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e646:	4413      	add	r3, r2
 801e648:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801e64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e64c:	8a7a      	ldrh	r2, [r7, #18]
 801e64e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e652:	7f9b      	ldrb	r3, [r3, #30]
 801e654:	f043 0301 	orr.w	r3, r3, #1
 801e658:	b2da      	uxtb	r2, r3
 801e65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e65c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801e65e:	697b      	ldr	r3, [r7, #20]
 801e660:	2b01      	cmp	r3, #1
 801e662:	d171      	bne.n	801e748 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801e664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e666:	8b9b      	ldrh	r3, [r3, #28]
 801e668:	3314      	adds	r3, #20
 801e66a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e66e:	685b      	ldr	r3, [r3, #4]
 801e670:	685b      	ldr	r3, [r3, #4]
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801e676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e678:	685b      	ldr	r3, [r3, #4]
 801e67a:	685b      	ldr	r3, [r3, #4]
 801e67c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e680:	3308      	adds	r3, #8
 801e682:	2214      	movs	r2, #20
 801e684:	4619      	mov	r1, r3
 801e686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e688:	f000 fe7a 	bl	801f380 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e68c:	8a3b      	ldrh	r3, [r7, #16]
 801e68e:	4618      	mov	r0, r3
 801e690:	f7f5 f944 	bl	801391c <lwip_htons>
 801e694:	4603      	mov	r3, r0
 801e696:	461a      	mov	r2, r3
 801e698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e69a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801e69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e69e:	2200      	movs	r2, #0
 801e6a0:	719a      	strb	r2, [r3, #6]
 801e6a2:	2200      	movs	r2, #0
 801e6a4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801e6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6a8:	2200      	movs	r2, #0
 801e6aa:	729a      	strb	r2, [r3, #10]
 801e6ac:	2200      	movs	r2, #0
 801e6ae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801e6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6b2:	685b      	ldr	r3, [r3, #4]
 801e6b4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801e6b6:	e00d      	b.n	801e6d4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801e6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e6ba:	685b      	ldr	r3, [r3, #4]
 801e6bc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801e6be:	2114      	movs	r1, #20
 801e6c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801e6c2:	f7f6 fc97 	bl	8014ff4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801e6c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e6c8:	6878      	ldr	r0, [r7, #4]
 801e6ca:	f7f6 fde7 	bl	801529c <pbuf_cat>
      r = iprh->next_pbuf;
 801e6ce:	68fb      	ldr	r3, [r7, #12]
 801e6d0:	681b      	ldr	r3, [r3, #0]
 801e6d2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801e6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e6d6:	2b00      	cmp	r3, #0
 801e6d8:	d1ee      	bne.n	801e6b8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801e6da:	4b1e      	ldr	r3, [pc, #120]	; (801e754 <ip4_reass+0x2b4>)
 801e6dc:	681b      	ldr	r3, [r3, #0]
 801e6de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e6e0:	429a      	cmp	r2, r3
 801e6e2:	d102      	bne.n	801e6ea <ip4_reass+0x24a>
      ipr_prev = NULL;
 801e6e4:	2300      	movs	r3, #0
 801e6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e6e8:	e010      	b.n	801e70c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e6ea:	4b1a      	ldr	r3, [pc, #104]	; (801e754 <ip4_reass+0x2b4>)
 801e6ec:	681b      	ldr	r3, [r3, #0]
 801e6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e6f0:	e007      	b.n	801e702 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801e6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6f4:	681b      	ldr	r3, [r3, #0]
 801e6f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e6f8:	429a      	cmp	r2, r3
 801e6fa:	d006      	beq.n	801e70a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6fe:	681b      	ldr	r3, [r3, #0]
 801e700:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e704:	2b00      	cmp	r3, #0
 801e706:	d1f4      	bne.n	801e6f2 <ip4_reass+0x252>
 801e708:	e000      	b.n	801e70c <ip4_reass+0x26c>
          break;
 801e70a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801e70c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e70e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e710:	f7ff fd2e 	bl	801e170 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801e714:	6878      	ldr	r0, [r7, #4]
 801e716:	f7f6 fd81 	bl	801521c <pbuf_clen>
 801e71a:	4603      	mov	r3, r0
 801e71c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801e71e:	4b0c      	ldr	r3, [pc, #48]	; (801e750 <ip4_reass+0x2b0>)
 801e720:	881b      	ldrh	r3, [r3, #0]
 801e722:	8c3a      	ldrh	r2, [r7, #32]
 801e724:	429a      	cmp	r2, r3
 801e726:	d906      	bls.n	801e736 <ip4_reass+0x296>
 801e728:	4b0b      	ldr	r3, [pc, #44]	; (801e758 <ip4_reass+0x2b8>)
 801e72a:	f240 229b 	movw	r2, #667	; 0x29b
 801e72e:	490b      	ldr	r1, [pc, #44]	; (801e75c <ip4_reass+0x2bc>)
 801e730:	480b      	ldr	r0, [pc, #44]	; (801e760 <ip4_reass+0x2c0>)
 801e732:	f000 ff35 	bl	801f5a0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801e736:	4b06      	ldr	r3, [pc, #24]	; (801e750 <ip4_reass+0x2b0>)
 801e738:	881a      	ldrh	r2, [r3, #0]
 801e73a:	8c3b      	ldrh	r3, [r7, #32]
 801e73c:	1ad3      	subs	r3, r2, r3
 801e73e:	b29a      	uxth	r2, r3
 801e740:	4b03      	ldr	r3, [pc, #12]	; (801e750 <ip4_reass+0x2b0>)
 801e742:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	e038      	b.n	801e7ba <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801e748:	2300      	movs	r3, #0
 801e74a:	e036      	b.n	801e7ba <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801e74c:	bf00      	nop
 801e74e:	e00a      	b.n	801e766 <ip4_reass+0x2c6>
 801e750:	2000c140 	.word	0x2000c140
 801e754:	2000c13c 	.word	0x2000c13c
 801e758:	08023cdc 	.word	0x08023cdc
 801e75c:	08023e4c 	.word	0x08023e4c
 801e760:	08023d24 	.word	0x08023d24
    goto nullreturn_ipr;
 801e764:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801e766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d106      	bne.n	801e77a <ip4_reass+0x2da>
 801e76c:	4b15      	ldr	r3, [pc, #84]	; (801e7c4 <ip4_reass+0x324>)
 801e76e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801e772:	4915      	ldr	r1, [pc, #84]	; (801e7c8 <ip4_reass+0x328>)
 801e774:	4815      	ldr	r0, [pc, #84]	; (801e7cc <ip4_reass+0x32c>)
 801e776:	f000 ff13 	bl	801f5a0 <iprintf>
  if (ipr->p == NULL) {
 801e77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e77c:	685b      	ldr	r3, [r3, #4]
 801e77e:	2b00      	cmp	r3, #0
 801e780:	d116      	bne.n	801e7b0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801e782:	4b13      	ldr	r3, [pc, #76]	; (801e7d0 <ip4_reass+0x330>)
 801e784:	681b      	ldr	r3, [r3, #0]
 801e786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e788:	429a      	cmp	r2, r3
 801e78a:	d006      	beq.n	801e79a <ip4_reass+0x2fa>
 801e78c:	4b0d      	ldr	r3, [pc, #52]	; (801e7c4 <ip4_reass+0x324>)
 801e78e:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e792:	4910      	ldr	r1, [pc, #64]	; (801e7d4 <ip4_reass+0x334>)
 801e794:	480d      	ldr	r0, [pc, #52]	; (801e7cc <ip4_reass+0x32c>)
 801e796:	f000 ff03 	bl	801f5a0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801e79a:	2100      	movs	r1, #0
 801e79c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e79e:	f7ff fce7 	bl	801e170 <ip_reass_dequeue_datagram>
 801e7a2:	e006      	b.n	801e7b2 <ip4_reass+0x312>
    goto nullreturn;
 801e7a4:	bf00      	nop
 801e7a6:	e004      	b.n	801e7b2 <ip4_reass+0x312>
    goto nullreturn;
 801e7a8:	bf00      	nop
 801e7aa:	e002      	b.n	801e7b2 <ip4_reass+0x312>
      goto nullreturn;
 801e7ac:	bf00      	nop
 801e7ae:	e000      	b.n	801e7b2 <ip4_reass+0x312>
  }

nullreturn:
 801e7b0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801e7b2:	6878      	ldr	r0, [r7, #4]
 801e7b4:	f7f6 fca4 	bl	8015100 <pbuf_free>
  return NULL;
 801e7b8:	2300      	movs	r3, #0
}
 801e7ba:	4618      	mov	r0, r3
 801e7bc:	3738      	adds	r7, #56	; 0x38
 801e7be:	46bd      	mov	sp, r7
 801e7c0:	bd80      	pop	{r7, pc}
 801e7c2:	bf00      	nop
 801e7c4:	08023cdc 	.word	0x08023cdc
 801e7c8:	08023e68 	.word	0x08023e68
 801e7cc:	08023d24 	.word	0x08023d24
 801e7d0:	2000c13c 	.word	0x2000c13c
 801e7d4:	08023e74 	.word	0x08023e74

0801e7d8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801e7d8:	b580      	push	{r7, lr}
 801e7da:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801e7dc:	2005      	movs	r0, #5
 801e7de:	f7f5 fd75 	bl	80142cc <memp_malloc>
 801e7e2:	4603      	mov	r3, r0
}
 801e7e4:	4618      	mov	r0, r3
 801e7e6:	bd80      	pop	{r7, pc}

0801e7e8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e7e8:	b580      	push	{r7, lr}
 801e7ea:	b082      	sub	sp, #8
 801e7ec:	af00      	add	r7, sp, #0
 801e7ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801e7f0:	687b      	ldr	r3, [r7, #4]
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d106      	bne.n	801e804 <ip_frag_free_pbuf_custom_ref+0x1c>
 801e7f6:	4b07      	ldr	r3, [pc, #28]	; (801e814 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e7f8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801e7fc:	4906      	ldr	r1, [pc, #24]	; (801e818 <ip_frag_free_pbuf_custom_ref+0x30>)
 801e7fe:	4807      	ldr	r0, [pc, #28]	; (801e81c <ip_frag_free_pbuf_custom_ref+0x34>)
 801e800:	f000 fece 	bl	801f5a0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e804:	6879      	ldr	r1, [r7, #4]
 801e806:	2005      	movs	r0, #5
 801e808:	f7f5 fdd6 	bl	80143b8 <memp_free>
}
 801e80c:	bf00      	nop
 801e80e:	3708      	adds	r7, #8
 801e810:	46bd      	mov	sp, r7
 801e812:	bd80      	pop	{r7, pc}
 801e814:	08023cdc 	.word	0x08023cdc
 801e818:	08023e94 	.word	0x08023e94
 801e81c:	08023d24 	.word	0x08023d24

0801e820 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e820:	b580      	push	{r7, lr}
 801e822:	b084      	sub	sp, #16
 801e824:	af00      	add	r7, sp, #0
 801e826:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e82c:	68fb      	ldr	r3, [r7, #12]
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d106      	bne.n	801e840 <ipfrag_free_pbuf_custom+0x20>
 801e832:	4b11      	ldr	r3, [pc, #68]	; (801e878 <ipfrag_free_pbuf_custom+0x58>)
 801e834:	f240 22ce 	movw	r2, #718	; 0x2ce
 801e838:	4910      	ldr	r1, [pc, #64]	; (801e87c <ipfrag_free_pbuf_custom+0x5c>)
 801e83a:	4811      	ldr	r0, [pc, #68]	; (801e880 <ipfrag_free_pbuf_custom+0x60>)
 801e83c:	f000 feb0 	bl	801f5a0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801e840:	68fa      	ldr	r2, [r7, #12]
 801e842:	687b      	ldr	r3, [r7, #4]
 801e844:	429a      	cmp	r2, r3
 801e846:	d006      	beq.n	801e856 <ipfrag_free_pbuf_custom+0x36>
 801e848:	4b0b      	ldr	r3, [pc, #44]	; (801e878 <ipfrag_free_pbuf_custom+0x58>)
 801e84a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801e84e:	490d      	ldr	r1, [pc, #52]	; (801e884 <ipfrag_free_pbuf_custom+0x64>)
 801e850:	480b      	ldr	r0, [pc, #44]	; (801e880 <ipfrag_free_pbuf_custom+0x60>)
 801e852:	f000 fea5 	bl	801f5a0 <iprintf>
  if (pcr->original != NULL) {
 801e856:	68fb      	ldr	r3, [r7, #12]
 801e858:	695b      	ldr	r3, [r3, #20]
 801e85a:	2b00      	cmp	r3, #0
 801e85c:	d004      	beq.n	801e868 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801e85e:	68fb      	ldr	r3, [r7, #12]
 801e860:	695b      	ldr	r3, [r3, #20]
 801e862:	4618      	mov	r0, r3
 801e864:	f7f6 fc4c 	bl	8015100 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e868:	68f8      	ldr	r0, [r7, #12]
 801e86a:	f7ff ffbd 	bl	801e7e8 <ip_frag_free_pbuf_custom_ref>
}
 801e86e:	bf00      	nop
 801e870:	3710      	adds	r7, #16
 801e872:	46bd      	mov	sp, r7
 801e874:	bd80      	pop	{r7, pc}
 801e876:	bf00      	nop
 801e878:	08023cdc 	.word	0x08023cdc
 801e87c:	08023ea0 	.word	0x08023ea0
 801e880:	08023d24 	.word	0x08023d24
 801e884:	08023eac 	.word	0x08023eac

0801e888 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801e888:	b580      	push	{r7, lr}
 801e88a:	b094      	sub	sp, #80	; 0x50
 801e88c:	af02      	add	r7, sp, #8
 801e88e:	60f8      	str	r0, [r7, #12]
 801e890:	60b9      	str	r1, [r7, #8]
 801e892:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801e894:	2300      	movs	r3, #0
 801e896:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e89a:	68bb      	ldr	r3, [r7, #8]
 801e89c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e89e:	3b14      	subs	r3, #20
 801e8a0:	2b00      	cmp	r3, #0
 801e8a2:	da00      	bge.n	801e8a6 <ip4_frag+0x1e>
 801e8a4:	3307      	adds	r3, #7
 801e8a6:	10db      	asrs	r3, r3, #3
 801e8a8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801e8aa:	2314      	movs	r3, #20
 801e8ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801e8ae:	68fb      	ldr	r3, [r7, #12]
 801e8b0:	685b      	ldr	r3, [r3, #4]
 801e8b2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801e8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e8b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8ba:	781b      	ldrb	r3, [r3, #0]
 801e8bc:	f003 030f 	and.w	r3, r3, #15
 801e8c0:	b2db      	uxtb	r3, r3
 801e8c2:	009b      	lsls	r3, r3, #2
 801e8c4:	b2db      	uxtb	r3, r3
 801e8c6:	2b14      	cmp	r3, #20
 801e8c8:	d002      	beq.n	801e8d0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801e8ca:	f06f 0305 	mvn.w	r3, #5
 801e8ce:	e110      	b.n	801eaf2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801e8d0:	68fb      	ldr	r3, [r7, #12]
 801e8d2:	895b      	ldrh	r3, [r3, #10]
 801e8d4:	2b13      	cmp	r3, #19
 801e8d6:	d809      	bhi.n	801e8ec <ip4_frag+0x64>
 801e8d8:	4b88      	ldr	r3, [pc, #544]	; (801eafc <ip4_frag+0x274>)
 801e8da:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801e8de:	4988      	ldr	r1, [pc, #544]	; (801eb00 <ip4_frag+0x278>)
 801e8e0:	4888      	ldr	r0, [pc, #544]	; (801eb04 <ip4_frag+0x27c>)
 801e8e2:	f000 fe5d 	bl	801f5a0 <iprintf>
 801e8e6:	f06f 0305 	mvn.w	r3, #5
 801e8ea:	e102      	b.n	801eaf2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801e8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8ee:	88db      	ldrh	r3, [r3, #6]
 801e8f0:	b29b      	uxth	r3, r3
 801e8f2:	4618      	mov	r0, r3
 801e8f4:	f7f5 f812 	bl	801391c <lwip_htons>
 801e8f8:	4603      	mov	r3, r0
 801e8fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801e8fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e8fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e902:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801e906:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801e90c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801e90e:	68fb      	ldr	r3, [r7, #12]
 801e910:	891b      	ldrh	r3, [r3, #8]
 801e912:	3b14      	subs	r3, #20
 801e914:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801e918:	e0e1      	b.n	801eade <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801e91a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e91c:	00db      	lsls	r3, r3, #3
 801e91e:	b29b      	uxth	r3, r3
 801e920:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e924:	4293      	cmp	r3, r2
 801e926:	bf28      	it	cs
 801e928:	4613      	movcs	r3, r2
 801e92a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801e92c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e930:	2114      	movs	r1, #20
 801e932:	200e      	movs	r0, #14
 801e934:	f7f6 f900 	bl	8014b38 <pbuf_alloc>
 801e938:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801e93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	f000 80d5 	beq.w	801eaec <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801e942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e944:	895b      	ldrh	r3, [r3, #10]
 801e946:	2b13      	cmp	r3, #19
 801e948:	d806      	bhi.n	801e958 <ip4_frag+0xd0>
 801e94a:	4b6c      	ldr	r3, [pc, #432]	; (801eafc <ip4_frag+0x274>)
 801e94c:	f44f 7249 	mov.w	r2, #804	; 0x324
 801e950:	496d      	ldr	r1, [pc, #436]	; (801eb08 <ip4_frag+0x280>)
 801e952:	486c      	ldr	r0, [pc, #432]	; (801eb04 <ip4_frag+0x27c>)
 801e954:	f000 fe24 	bl	801f5a0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801e958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e95a:	685b      	ldr	r3, [r3, #4]
 801e95c:	2214      	movs	r2, #20
 801e95e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e960:	4618      	mov	r0, r3
 801e962:	f000 fd0d 	bl	801f380 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801e966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e968:	685b      	ldr	r3, [r3, #4]
 801e96a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801e96c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e96e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801e972:	e064      	b.n	801ea3e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801e974:	68fb      	ldr	r3, [r7, #12]
 801e976:	895a      	ldrh	r2, [r3, #10]
 801e978:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e97a:	1ad3      	subs	r3, r2, r3
 801e97c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801e97e:	68fb      	ldr	r3, [r7, #12]
 801e980:	895b      	ldrh	r3, [r3, #10]
 801e982:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e984:	429a      	cmp	r2, r3
 801e986:	d906      	bls.n	801e996 <ip4_frag+0x10e>
 801e988:	4b5c      	ldr	r3, [pc, #368]	; (801eafc <ip4_frag+0x274>)
 801e98a:	f240 322d 	movw	r2, #813	; 0x32d
 801e98e:	495f      	ldr	r1, [pc, #380]	; (801eb0c <ip4_frag+0x284>)
 801e990:	485c      	ldr	r0, [pc, #368]	; (801eb04 <ip4_frag+0x27c>)
 801e992:	f000 fe05 	bl	801f5a0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801e996:	8bfa      	ldrh	r2, [r7, #30]
 801e998:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e99c:	4293      	cmp	r3, r2
 801e99e:	bf28      	it	cs
 801e9a0:	4613      	movcs	r3, r2
 801e9a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801e9a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	d105      	bne.n	801e9ba <ip4_frag+0x132>
        poff = 0;
 801e9ae:	2300      	movs	r3, #0
 801e9b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801e9b2:	68fb      	ldr	r3, [r7, #12]
 801e9b4:	681b      	ldr	r3, [r3, #0]
 801e9b6:	60fb      	str	r3, [r7, #12]
        continue;
 801e9b8:	e041      	b.n	801ea3e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801e9ba:	f7ff ff0d 	bl	801e7d8 <ip_frag_alloc_pbuf_custom_ref>
 801e9be:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801e9c0:	69bb      	ldr	r3, [r7, #24]
 801e9c2:	2b00      	cmp	r3, #0
 801e9c4:	d103      	bne.n	801e9ce <ip4_frag+0x146>
        pbuf_free(rambuf);
 801e9c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e9c8:	f7f6 fb9a 	bl	8015100 <pbuf_free>
        goto memerr;
 801e9cc:	e08f      	b.n	801eaee <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e9ce:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801e9d0:	68fb      	ldr	r3, [r7, #12]
 801e9d2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e9d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e9d6:	4413      	add	r3, r2
 801e9d8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801e9dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801e9e0:	9201      	str	r2, [sp, #4]
 801e9e2:	9300      	str	r3, [sp, #0]
 801e9e4:	4603      	mov	r3, r0
 801e9e6:	2241      	movs	r2, #65	; 0x41
 801e9e8:	2000      	movs	r0, #0
 801e9ea:	f7f6 f9cf 	bl	8014d8c <pbuf_alloced_custom>
 801e9ee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801e9f0:	697b      	ldr	r3, [r7, #20]
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	d106      	bne.n	801ea04 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801e9f6:	69b8      	ldr	r0, [r7, #24]
 801e9f8:	f7ff fef6 	bl	801e7e8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801e9fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e9fe:	f7f6 fb7f 	bl	8015100 <pbuf_free>
        goto memerr;
 801ea02:	e074      	b.n	801eaee <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801ea04:	68f8      	ldr	r0, [r7, #12]
 801ea06:	f7f6 fc21 	bl	801524c <pbuf_ref>
      pcr->original = p;
 801ea0a:	69bb      	ldr	r3, [r7, #24]
 801ea0c:	68fa      	ldr	r2, [r7, #12]
 801ea0e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ea10:	69bb      	ldr	r3, [r7, #24]
 801ea12:	4a3f      	ldr	r2, [pc, #252]	; (801eb10 <ip4_frag+0x288>)
 801ea14:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ea16:	6979      	ldr	r1, [r7, #20]
 801ea18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ea1a:	f7f6 fc3f 	bl	801529c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ea1e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801ea22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ea26:	1ad3      	subs	r3, r2, r3
 801ea28:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801ea2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ea30:	2b00      	cmp	r3, #0
 801ea32:	d004      	beq.n	801ea3e <ip4_frag+0x1b6>
        poff = 0;
 801ea34:	2300      	movs	r3, #0
 801ea36:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ea38:	68fb      	ldr	r3, [r7, #12]
 801ea3a:	681b      	ldr	r3, [r3, #0]
 801ea3c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ea3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ea42:	2b00      	cmp	r3, #0
 801ea44:	d196      	bne.n	801e974 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ea46:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ea48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ea4c:	4413      	add	r3, r2
 801ea4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ea50:	68bb      	ldr	r3, [r7, #8]
 801ea52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ea54:	f1a3 0213 	sub.w	r2, r3, #19
 801ea58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ea5c:	429a      	cmp	r2, r3
 801ea5e:	bfcc      	ite	gt
 801ea60:	2301      	movgt	r3, #1
 801ea62:	2300      	movle	r3, #0
 801ea64:	b2db      	uxtb	r3, r3
 801ea66:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ea68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ea6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ea70:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801ea72:	6a3b      	ldr	r3, [r7, #32]
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	d002      	beq.n	801ea7e <ip4_frag+0x1f6>
 801ea78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ea7a:	2b00      	cmp	r3, #0
 801ea7c:	d003      	beq.n	801ea86 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ea7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ea80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ea84:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ea86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ea88:	4618      	mov	r0, r3
 801ea8a:	f7f4 ff47 	bl	801391c <lwip_htons>
 801ea8e:	4603      	mov	r3, r0
 801ea90:	461a      	mov	r2, r3
 801ea92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea94:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ea96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ea98:	3314      	adds	r3, #20
 801ea9a:	b29b      	uxth	r3, r3
 801ea9c:	4618      	mov	r0, r3
 801ea9e:	f7f4 ff3d 	bl	801391c <lwip_htons>
 801eaa2:	4603      	mov	r3, r0
 801eaa4:	461a      	mov	r2, r3
 801eaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eaa8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801eaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eaac:	2200      	movs	r2, #0
 801eaae:	729a      	strb	r2, [r3, #10]
 801eab0:	2200      	movs	r2, #0
 801eab2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801eab4:	68bb      	ldr	r3, [r7, #8]
 801eab6:	695b      	ldr	r3, [r3, #20]
 801eab8:	687a      	ldr	r2, [r7, #4]
 801eaba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801eabc:	68b8      	ldr	r0, [r7, #8]
 801eabe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801eac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eac2:	f7f6 fb1d 	bl	8015100 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801eac6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801eaca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801eacc:	1ad3      	subs	r3, r2, r3
 801eace:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801ead2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801ead6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ead8:	4413      	add	r3, r2
 801eada:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801eade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	f47f af19 	bne.w	801e91a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801eae8:	2300      	movs	r3, #0
 801eaea:	e002      	b.n	801eaf2 <ip4_frag+0x26a>
      goto memerr;
 801eaec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801eaee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801eaf2:	4618      	mov	r0, r3
 801eaf4:	3748      	adds	r7, #72	; 0x48
 801eaf6:	46bd      	mov	sp, r7
 801eaf8:	bd80      	pop	{r7, pc}
 801eafa:	bf00      	nop
 801eafc:	08023cdc 	.word	0x08023cdc
 801eb00:	08023eb8 	.word	0x08023eb8
 801eb04:	08023d24 	.word	0x08023d24
 801eb08:	08023ed4 	.word	0x08023ed4
 801eb0c:	08023ef4 	.word	0x08023ef4
 801eb10:	0801e821 	.word	0x0801e821

0801eb14 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801eb14:	b580      	push	{r7, lr}
 801eb16:	b086      	sub	sp, #24
 801eb18:	af00      	add	r7, sp, #0
 801eb1a:	6078      	str	r0, [r7, #4]
 801eb1c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801eb1e:	230e      	movs	r3, #14
 801eb20:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801eb22:	687b      	ldr	r3, [r7, #4]
 801eb24:	895b      	ldrh	r3, [r3, #10]
 801eb26:	2b0e      	cmp	r3, #14
 801eb28:	d96e      	bls.n	801ec08 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801eb2a:	687b      	ldr	r3, [r7, #4]
 801eb2c:	7bdb      	ldrb	r3, [r3, #15]
 801eb2e:	2b00      	cmp	r3, #0
 801eb30:	d106      	bne.n	801eb40 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801eb32:	683b      	ldr	r3, [r7, #0]
 801eb34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801eb38:	3301      	adds	r3, #1
 801eb3a:	b2da      	uxtb	r2, r3
 801eb3c:	687b      	ldr	r3, [r7, #4]
 801eb3e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	685b      	ldr	r3, [r3, #4]
 801eb44:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801eb46:	693b      	ldr	r3, [r7, #16]
 801eb48:	7b1a      	ldrb	r2, [r3, #12]
 801eb4a:	7b5b      	ldrb	r3, [r3, #13]
 801eb4c:	021b      	lsls	r3, r3, #8
 801eb4e:	4313      	orrs	r3, r2
 801eb50:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801eb52:	693b      	ldr	r3, [r7, #16]
 801eb54:	781b      	ldrb	r3, [r3, #0]
 801eb56:	f003 0301 	and.w	r3, r3, #1
 801eb5a:	2b00      	cmp	r3, #0
 801eb5c:	d023      	beq.n	801eba6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801eb5e:	693b      	ldr	r3, [r7, #16]
 801eb60:	781b      	ldrb	r3, [r3, #0]
 801eb62:	2b01      	cmp	r3, #1
 801eb64:	d10f      	bne.n	801eb86 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801eb66:	693b      	ldr	r3, [r7, #16]
 801eb68:	785b      	ldrb	r3, [r3, #1]
 801eb6a:	2b00      	cmp	r3, #0
 801eb6c:	d11b      	bne.n	801eba6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801eb6e:	693b      	ldr	r3, [r7, #16]
 801eb70:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801eb72:	2b5e      	cmp	r3, #94	; 0x5e
 801eb74:	d117      	bne.n	801eba6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	7b5b      	ldrb	r3, [r3, #13]
 801eb7a:	f043 0310 	orr.w	r3, r3, #16
 801eb7e:	b2da      	uxtb	r2, r3
 801eb80:	687b      	ldr	r3, [r7, #4]
 801eb82:	735a      	strb	r2, [r3, #13]
 801eb84:	e00f      	b.n	801eba6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801eb86:	693b      	ldr	r3, [r7, #16]
 801eb88:	2206      	movs	r2, #6
 801eb8a:	4928      	ldr	r1, [pc, #160]	; (801ec2c <ethernet_input+0x118>)
 801eb8c:	4618      	mov	r0, r3
 801eb8e:	f000 fbe7 	bl	801f360 <memcmp>
 801eb92:	4603      	mov	r3, r0
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	d106      	bne.n	801eba6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801eb98:	687b      	ldr	r3, [r7, #4]
 801eb9a:	7b5b      	ldrb	r3, [r3, #13]
 801eb9c:	f043 0308 	orr.w	r3, r3, #8
 801eba0:	b2da      	uxtb	r2, r3
 801eba2:	687b      	ldr	r3, [r7, #4]
 801eba4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801eba6:	89fb      	ldrh	r3, [r7, #14]
 801eba8:	2b08      	cmp	r3, #8
 801ebaa:	d003      	beq.n	801ebb4 <ethernet_input+0xa0>
 801ebac:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801ebb0:	d014      	beq.n	801ebdc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801ebb2:	e032      	b.n	801ec1a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ebb4:	683b      	ldr	r3, [r7, #0]
 801ebb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ebba:	f003 0308 	and.w	r3, r3, #8
 801ebbe:	2b00      	cmp	r3, #0
 801ebc0:	d024      	beq.n	801ec0c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ebc2:	8afb      	ldrh	r3, [r7, #22]
 801ebc4:	4619      	mov	r1, r3
 801ebc6:	6878      	ldr	r0, [r7, #4]
 801ebc8:	f7f6 fa14 	bl	8014ff4 <pbuf_remove_header>
 801ebcc:	4603      	mov	r3, r0
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	d11e      	bne.n	801ec10 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801ebd2:	6839      	ldr	r1, [r7, #0]
 801ebd4:	6878      	ldr	r0, [r7, #4]
 801ebd6:	f7fe ff21 	bl	801da1c <ip4_input>
      break;
 801ebda:	e013      	b.n	801ec04 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ebdc:	683b      	ldr	r3, [r7, #0]
 801ebde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ebe2:	f003 0308 	and.w	r3, r3, #8
 801ebe6:	2b00      	cmp	r3, #0
 801ebe8:	d014      	beq.n	801ec14 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ebea:	8afb      	ldrh	r3, [r7, #22]
 801ebec:	4619      	mov	r1, r3
 801ebee:	6878      	ldr	r0, [r7, #4]
 801ebf0:	f7f6 fa00 	bl	8014ff4 <pbuf_remove_header>
 801ebf4:	4603      	mov	r3, r0
 801ebf6:	2b00      	cmp	r3, #0
 801ebf8:	d10e      	bne.n	801ec18 <ethernet_input+0x104>
        etharp_input(p, netif);
 801ebfa:	6839      	ldr	r1, [r7, #0]
 801ebfc:	6878      	ldr	r0, [r7, #4]
 801ebfe:	f7fe f8c1 	bl	801cd84 <etharp_input>
      break;
 801ec02:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801ec04:	2300      	movs	r3, #0
 801ec06:	e00c      	b.n	801ec22 <ethernet_input+0x10e>
    goto free_and_return;
 801ec08:	bf00      	nop
 801ec0a:	e006      	b.n	801ec1a <ethernet_input+0x106>
        goto free_and_return;
 801ec0c:	bf00      	nop
 801ec0e:	e004      	b.n	801ec1a <ethernet_input+0x106>
        goto free_and_return;
 801ec10:	bf00      	nop
 801ec12:	e002      	b.n	801ec1a <ethernet_input+0x106>
        goto free_and_return;
 801ec14:	bf00      	nop
 801ec16:	e000      	b.n	801ec1a <ethernet_input+0x106>
        goto free_and_return;
 801ec18:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801ec1a:	6878      	ldr	r0, [r7, #4]
 801ec1c:	f7f6 fa70 	bl	8015100 <pbuf_free>
  return ERR_OK;
 801ec20:	2300      	movs	r3, #0
}
 801ec22:	4618      	mov	r0, r3
 801ec24:	3718      	adds	r7, #24
 801ec26:	46bd      	mov	sp, r7
 801ec28:	bd80      	pop	{r7, pc}
 801ec2a:	bf00      	nop
 801ec2c:	080240e4 	.word	0x080240e4

0801ec30 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ec30:	b580      	push	{r7, lr}
 801ec32:	b086      	sub	sp, #24
 801ec34:	af00      	add	r7, sp, #0
 801ec36:	60f8      	str	r0, [r7, #12]
 801ec38:	60b9      	str	r1, [r7, #8]
 801ec3a:	607a      	str	r2, [r7, #4]
 801ec3c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ec3e:	8c3b      	ldrh	r3, [r7, #32]
 801ec40:	4618      	mov	r0, r3
 801ec42:	f7f4 fe6b 	bl	801391c <lwip_htons>
 801ec46:	4603      	mov	r3, r0
 801ec48:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ec4a:	210e      	movs	r1, #14
 801ec4c:	68b8      	ldr	r0, [r7, #8]
 801ec4e:	f7f6 f9c1 	bl	8014fd4 <pbuf_add_header>
 801ec52:	4603      	mov	r3, r0
 801ec54:	2b00      	cmp	r3, #0
 801ec56:	d125      	bne.n	801eca4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ec58:	68bb      	ldr	r3, [r7, #8]
 801ec5a:	685b      	ldr	r3, [r3, #4]
 801ec5c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ec5e:	693b      	ldr	r3, [r7, #16]
 801ec60:	8afa      	ldrh	r2, [r7, #22]
 801ec62:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ec64:	693b      	ldr	r3, [r7, #16]
 801ec66:	2206      	movs	r2, #6
 801ec68:	6839      	ldr	r1, [r7, #0]
 801ec6a:	4618      	mov	r0, r3
 801ec6c:	f000 fb88 	bl	801f380 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ec70:	693b      	ldr	r3, [r7, #16]
 801ec72:	3306      	adds	r3, #6
 801ec74:	2206      	movs	r2, #6
 801ec76:	6879      	ldr	r1, [r7, #4]
 801ec78:	4618      	mov	r0, r3
 801ec7a:	f000 fb81 	bl	801f380 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ec7e:	68fb      	ldr	r3, [r7, #12]
 801ec80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ec84:	2b06      	cmp	r3, #6
 801ec86:	d006      	beq.n	801ec96 <ethernet_output+0x66>
 801ec88:	4b0a      	ldr	r3, [pc, #40]	; (801ecb4 <ethernet_output+0x84>)
 801ec8a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801ec8e:	490a      	ldr	r1, [pc, #40]	; (801ecb8 <ethernet_output+0x88>)
 801ec90:	480a      	ldr	r0, [pc, #40]	; (801ecbc <ethernet_output+0x8c>)
 801ec92:	f000 fc85 	bl	801f5a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ec96:	68fb      	ldr	r3, [r7, #12]
 801ec98:	699b      	ldr	r3, [r3, #24]
 801ec9a:	68b9      	ldr	r1, [r7, #8]
 801ec9c:	68f8      	ldr	r0, [r7, #12]
 801ec9e:	4798      	blx	r3
 801eca0:	4603      	mov	r3, r0
 801eca2:	e002      	b.n	801ecaa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801eca4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801eca6:	f06f 0301 	mvn.w	r3, #1
}
 801ecaa:	4618      	mov	r0, r3
 801ecac:	3718      	adds	r7, #24
 801ecae:	46bd      	mov	sp, r7
 801ecb0:	bd80      	pop	{r7, pc}
 801ecb2:	bf00      	nop
 801ecb4:	08023f04 	.word	0x08023f04
 801ecb8:	08023f3c 	.word	0x08023f3c
 801ecbc:	08023f70 	.word	0x08023f70

0801ecc0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ecc0:	b580      	push	{r7, lr}
 801ecc2:	b086      	sub	sp, #24
 801ecc4:	af00      	add	r7, sp, #0
 801ecc6:	6078      	str	r0, [r7, #4]
 801ecc8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801ecca:	683b      	ldr	r3, [r7, #0]
 801eccc:	60bb      	str	r3, [r7, #8]
 801ecce:	2304      	movs	r3, #4
 801ecd0:	60fb      	str	r3, [r7, #12]
 801ecd2:	2300      	movs	r3, #0
 801ecd4:	613b      	str	r3, [r7, #16]
 801ecd6:	2300      	movs	r3, #0
 801ecd8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801ecda:	f107 0308 	add.w	r3, r7, #8
 801ecde:	2100      	movs	r1, #0
 801ece0:	4618      	mov	r0, r3
 801ece2:	f7ef fb72 	bl	800e3ca <osMessageCreate>
 801ece6:	4602      	mov	r2, r0
 801ece8:	687b      	ldr	r3, [r7, #4]
 801ecea:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ecec:	687b      	ldr	r3, [r7, #4]
 801ecee:	681b      	ldr	r3, [r3, #0]
 801ecf0:	2b00      	cmp	r3, #0
 801ecf2:	d102      	bne.n	801ecfa <sys_mbox_new+0x3a>
    return ERR_MEM;
 801ecf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ecf8:	e000      	b.n	801ecfc <sys_mbox_new+0x3c>

  return ERR_OK;
 801ecfa:	2300      	movs	r3, #0
}
 801ecfc:	4618      	mov	r0, r3
 801ecfe:	3718      	adds	r7, #24
 801ed00:	46bd      	mov	sp, r7
 801ed02:	bd80      	pop	{r7, pc}

0801ed04 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801ed04:	b580      	push	{r7, lr}
 801ed06:	b082      	sub	sp, #8
 801ed08:	af00      	add	r7, sp, #0
 801ed0a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801ed0c:	687b      	ldr	r3, [r7, #4]
 801ed0e:	681b      	ldr	r3, [r3, #0]
 801ed10:	4618      	mov	r0, r3
 801ed12:	f7ef fc37 	bl	800e584 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801ed16:	687b      	ldr	r3, [r7, #4]
 801ed18:	681b      	ldr	r3, [r3, #0]
 801ed1a:	4618      	mov	r0, r3
 801ed1c:	f7ef fc48 	bl	800e5b0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801ed20:	bf00      	nop
 801ed22:	3708      	adds	r7, #8
 801ed24:	46bd      	mov	sp, r7
 801ed26:	bd80      	pop	{r7, pc}

0801ed28 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ed28:	b580      	push	{r7, lr}
 801ed2a:	b084      	sub	sp, #16
 801ed2c:	af00      	add	r7, sp, #0
 801ed2e:	6078      	str	r0, [r7, #4]
 801ed30:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	681b      	ldr	r3, [r3, #0]
 801ed36:	6839      	ldr	r1, [r7, #0]
 801ed38:	2200      	movs	r2, #0
 801ed3a:	4618      	mov	r0, r3
 801ed3c:	f7ef fb6e 	bl	800e41c <osMessagePut>
 801ed40:	4603      	mov	r3, r0
 801ed42:	2b00      	cmp	r3, #0
 801ed44:	d102      	bne.n	801ed4c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801ed46:	2300      	movs	r3, #0
 801ed48:	73fb      	strb	r3, [r7, #15]
 801ed4a:	e001      	b.n	801ed50 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ed4c:	23ff      	movs	r3, #255	; 0xff
 801ed4e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ed50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ed54:	4618      	mov	r0, r3
 801ed56:	3710      	adds	r7, #16
 801ed58:	46bd      	mov	sp, r7
 801ed5a:	bd80      	pop	{r7, pc}

0801ed5c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ed5c:	b580      	push	{r7, lr}
 801ed5e:	b08c      	sub	sp, #48	; 0x30
 801ed60:	af00      	add	r7, sp, #0
 801ed62:	61f8      	str	r0, [r7, #28]
 801ed64:	61b9      	str	r1, [r7, #24]
 801ed66:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801ed68:	f7ef f95a 	bl	800e020 <osKernelSysTick>
 801ed6c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801ed6e:	697b      	ldr	r3, [r7, #20]
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	d017      	beq.n	801eda4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801ed74:	69fb      	ldr	r3, [r7, #28]
 801ed76:	6819      	ldr	r1, [r3, #0]
 801ed78:	f107 0320 	add.w	r3, r7, #32
 801ed7c:	697a      	ldr	r2, [r7, #20]
 801ed7e:	4618      	mov	r0, r3
 801ed80:	f7ef fb8c 	bl	800e49c <osMessageGet>

    if(event.status == osEventMessage)
 801ed84:	6a3b      	ldr	r3, [r7, #32]
 801ed86:	2b10      	cmp	r3, #16
 801ed88:	d109      	bne.n	801ed9e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801ed8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed8c:	461a      	mov	r2, r3
 801ed8e:	69bb      	ldr	r3, [r7, #24]
 801ed90:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801ed92:	f7ef f945 	bl	800e020 <osKernelSysTick>
 801ed96:	4602      	mov	r2, r0
 801ed98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed9a:	1ad3      	subs	r3, r2, r3
 801ed9c:	e019      	b.n	801edd2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ed9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801eda2:	e016      	b.n	801edd2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801eda4:	69fb      	ldr	r3, [r7, #28]
 801eda6:	6819      	ldr	r1, [r3, #0]
 801eda8:	463b      	mov	r3, r7
 801edaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801edae:	4618      	mov	r0, r3
 801edb0:	f7ef fb74 	bl	800e49c <osMessageGet>
 801edb4:	f107 0320 	add.w	r3, r7, #32
 801edb8:	463a      	mov	r2, r7
 801edba:	ca07      	ldmia	r2, {r0, r1, r2}
 801edbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801edc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edc2:	461a      	mov	r2, r3
 801edc4:	69bb      	ldr	r3, [r7, #24]
 801edc6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801edc8:	f7ef f92a 	bl	800e020 <osKernelSysTick>
 801edcc:	4602      	mov	r2, r0
 801edce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801edd0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801edd2:	4618      	mov	r0, r3
 801edd4:	3730      	adds	r7, #48	; 0x30
 801edd6:	46bd      	mov	sp, r7
 801edd8:	bd80      	pop	{r7, pc}

0801edda <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801edda:	b580      	push	{r7, lr}
 801eddc:	b086      	sub	sp, #24
 801edde:	af00      	add	r7, sp, #0
 801ede0:	6078      	str	r0, [r7, #4]
 801ede2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	6819      	ldr	r1, [r3, #0]
 801ede8:	f107 030c 	add.w	r3, r7, #12
 801edec:	2200      	movs	r2, #0
 801edee:	4618      	mov	r0, r3
 801edf0:	f7ef fb54 	bl	800e49c <osMessageGet>

  if(event.status == osEventMessage)
 801edf4:	68fb      	ldr	r3, [r7, #12]
 801edf6:	2b10      	cmp	r3, #16
 801edf8:	d105      	bne.n	801ee06 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801edfa:	693b      	ldr	r3, [r7, #16]
 801edfc:	461a      	mov	r2, r3
 801edfe:	683b      	ldr	r3, [r7, #0]
 801ee00:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801ee02:	2300      	movs	r3, #0
 801ee04:	e001      	b.n	801ee0a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801ee06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801ee0a:	4618      	mov	r0, r3
 801ee0c:	3718      	adds	r7, #24
 801ee0e:	46bd      	mov	sp, r7
 801ee10:	bd80      	pop	{r7, pc}

0801ee12 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801ee12:	b480      	push	{r7}
 801ee14:	b083      	sub	sp, #12
 801ee16:	af00      	add	r7, sp, #0
 801ee18:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	681b      	ldr	r3, [r3, #0]
 801ee1e:	2b00      	cmp	r3, #0
 801ee20:	d101      	bne.n	801ee26 <sys_mbox_valid+0x14>
    return 0;
 801ee22:	2300      	movs	r3, #0
 801ee24:	e000      	b.n	801ee28 <sys_mbox_valid+0x16>
  else
    return 1;
 801ee26:	2301      	movs	r3, #1
}
 801ee28:	4618      	mov	r0, r3
 801ee2a:	370c      	adds	r7, #12
 801ee2c:	46bd      	mov	sp, r7
 801ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee32:	4770      	bx	lr

0801ee34 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801ee34:	b480      	push	{r7}
 801ee36:	b083      	sub	sp, #12
 801ee38:	af00      	add	r7, sp, #0
 801ee3a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	2200      	movs	r2, #0
 801ee40:	601a      	str	r2, [r3, #0]
}
 801ee42:	bf00      	nop
 801ee44:	370c      	adds	r7, #12
 801ee46:	46bd      	mov	sp, r7
 801ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee4c:	4770      	bx	lr

0801ee4e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801ee4e:	b580      	push	{r7, lr}
 801ee50:	b084      	sub	sp, #16
 801ee52:	af00      	add	r7, sp, #0
 801ee54:	6078      	str	r0, [r7, #4]
 801ee56:	460b      	mov	r3, r1
 801ee58:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801ee5a:	2300      	movs	r3, #0
 801ee5c:	60bb      	str	r3, [r7, #8]
 801ee5e:	2300      	movs	r3, #0
 801ee60:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801ee62:	f107 0308 	add.w	r3, r7, #8
 801ee66:	2101      	movs	r1, #1
 801ee68:	4618      	mov	r0, r3
 801ee6a:	f7ef f9e5 	bl	800e238 <osSemaphoreCreate>
 801ee6e:	4602      	mov	r2, r0
 801ee70:	687b      	ldr	r3, [r7, #4]
 801ee72:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	681b      	ldr	r3, [r3, #0]
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	d102      	bne.n	801ee82 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801ee7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ee80:	e009      	b.n	801ee96 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801ee82:	78fb      	ldrb	r3, [r7, #3]
 801ee84:	2b00      	cmp	r3, #0
 801ee86:	d105      	bne.n	801ee94 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801ee88:	687b      	ldr	r3, [r7, #4]
 801ee8a:	681b      	ldr	r3, [r3, #0]
 801ee8c:	2100      	movs	r1, #0
 801ee8e:	4618      	mov	r0, r3
 801ee90:	f7ef fa04 	bl	800e29c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801ee94:	2300      	movs	r3, #0
}
 801ee96:	4618      	mov	r0, r3
 801ee98:	3710      	adds	r7, #16
 801ee9a:	46bd      	mov	sp, r7
 801ee9c:	bd80      	pop	{r7, pc}

0801ee9e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801ee9e:	b580      	push	{r7, lr}
 801eea0:	b084      	sub	sp, #16
 801eea2:	af00      	add	r7, sp, #0
 801eea4:	6078      	str	r0, [r7, #4]
 801eea6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801eea8:	f7ef f8ba 	bl	800e020 <osKernelSysTick>
 801eeac:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801eeae:	683b      	ldr	r3, [r7, #0]
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	d011      	beq.n	801eed8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801eeb4:	687b      	ldr	r3, [r7, #4]
 801eeb6:	681b      	ldr	r3, [r3, #0]
 801eeb8:	6839      	ldr	r1, [r7, #0]
 801eeba:	4618      	mov	r0, r3
 801eebc:	f7ef f9ee 	bl	800e29c <osSemaphoreWait>
 801eec0:	4603      	mov	r3, r0
 801eec2:	2b00      	cmp	r3, #0
 801eec4:	d105      	bne.n	801eed2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801eec6:	f7ef f8ab 	bl	800e020 <osKernelSysTick>
 801eeca:	4602      	mov	r2, r0
 801eecc:	68fb      	ldr	r3, [r7, #12]
 801eece:	1ad3      	subs	r3, r2, r3
 801eed0:	e012      	b.n	801eef8 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801eed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801eed6:	e00f      	b.n	801eef8 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801eed8:	bf00      	nop
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	681b      	ldr	r3, [r3, #0]
 801eede:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801eee2:	4618      	mov	r0, r3
 801eee4:	f7ef f9da 	bl	800e29c <osSemaphoreWait>
 801eee8:	4603      	mov	r3, r0
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d1f5      	bne.n	801eeda <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801eeee:	f7ef f897 	bl	800e020 <osKernelSysTick>
 801eef2:	4602      	mov	r2, r0
 801eef4:	68fb      	ldr	r3, [r7, #12]
 801eef6:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801eef8:	4618      	mov	r0, r3
 801eefa:	3710      	adds	r7, #16
 801eefc:	46bd      	mov	sp, r7
 801eefe:	bd80      	pop	{r7, pc}

0801ef00 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801ef00:	b580      	push	{r7, lr}
 801ef02:	b082      	sub	sp, #8
 801ef04:	af00      	add	r7, sp, #0
 801ef06:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801ef08:	687b      	ldr	r3, [r7, #4]
 801ef0a:	681b      	ldr	r3, [r3, #0]
 801ef0c:	4618      	mov	r0, r3
 801ef0e:	f7ef fa13 	bl	800e338 <osSemaphoreRelease>
}
 801ef12:	bf00      	nop
 801ef14:	3708      	adds	r7, #8
 801ef16:	46bd      	mov	sp, r7
 801ef18:	bd80      	pop	{r7, pc}

0801ef1a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801ef1a:	b580      	push	{r7, lr}
 801ef1c:	b082      	sub	sp, #8
 801ef1e:	af00      	add	r7, sp, #0
 801ef20:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	681b      	ldr	r3, [r3, #0]
 801ef26:	4618      	mov	r0, r3
 801ef28:	f7ef fa3c 	bl	800e3a4 <osSemaphoreDelete>
}
 801ef2c:	bf00      	nop
 801ef2e:	3708      	adds	r7, #8
 801ef30:	46bd      	mov	sp, r7
 801ef32:	bd80      	pop	{r7, pc}

0801ef34 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801ef34:	b480      	push	{r7}
 801ef36:	b083      	sub	sp, #12
 801ef38:	af00      	add	r7, sp, #0
 801ef3a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	681b      	ldr	r3, [r3, #0]
 801ef40:	2b00      	cmp	r3, #0
 801ef42:	d101      	bne.n	801ef48 <sys_sem_valid+0x14>
    return 0;
 801ef44:	2300      	movs	r3, #0
 801ef46:	e000      	b.n	801ef4a <sys_sem_valid+0x16>
  else
    return 1;
 801ef48:	2301      	movs	r3, #1
}
 801ef4a:	4618      	mov	r0, r3
 801ef4c:	370c      	adds	r7, #12
 801ef4e:	46bd      	mov	sp, r7
 801ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef54:	4770      	bx	lr

0801ef56 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801ef56:	b480      	push	{r7}
 801ef58:	b083      	sub	sp, #12
 801ef5a:	af00      	add	r7, sp, #0
 801ef5c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	2200      	movs	r2, #0
 801ef62:	601a      	str	r2, [r3, #0]
}
 801ef64:	bf00      	nop
 801ef66:	370c      	adds	r7, #12
 801ef68:	46bd      	mov	sp, r7
 801ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef6e:	4770      	bx	lr

0801ef70 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ef70:	b580      	push	{r7, lr}
 801ef72:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801ef74:	4803      	ldr	r0, [pc, #12]	; (801ef84 <sys_init+0x14>)
 801ef76:	f7ef f8c3 	bl	800e100 <osMutexCreate>
 801ef7a:	4603      	mov	r3, r0
 801ef7c:	4a02      	ldr	r2, [pc, #8]	; (801ef88 <sys_init+0x18>)
 801ef7e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801ef80:	bf00      	nop
 801ef82:	bd80      	pop	{r7, pc}
 801ef84:	080240f4 	.word	0x080240f4
 801ef88:	2000c144 	.word	0x2000c144

0801ef8c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ef8c:	b580      	push	{r7, lr}
 801ef8e:	b084      	sub	sp, #16
 801ef90:	af00      	add	r7, sp, #0
 801ef92:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801ef94:	2300      	movs	r3, #0
 801ef96:	60bb      	str	r3, [r7, #8]
 801ef98:	2300      	movs	r3, #0
 801ef9a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801ef9c:	f107 0308 	add.w	r3, r7, #8
 801efa0:	4618      	mov	r0, r3
 801efa2:	f7ef f8ad 	bl	800e100 <osMutexCreate>
 801efa6:	4602      	mov	r2, r0
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801efac:	687b      	ldr	r3, [r7, #4]
 801efae:	681b      	ldr	r3, [r3, #0]
 801efb0:	2b00      	cmp	r3, #0
 801efb2:	d102      	bne.n	801efba <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801efb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801efb8:	e000      	b.n	801efbc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801efba:	2300      	movs	r3, #0
}
 801efbc:	4618      	mov	r0, r3
 801efbe:	3710      	adds	r7, #16
 801efc0:	46bd      	mov	sp, r7
 801efc2:	bd80      	pop	{r7, pc}

0801efc4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801efc4:	b580      	push	{r7, lr}
 801efc6:	b082      	sub	sp, #8
 801efc8:	af00      	add	r7, sp, #0
 801efca:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801efcc:	687b      	ldr	r3, [r7, #4]
 801efce:	681b      	ldr	r3, [r3, #0]
 801efd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801efd4:	4618      	mov	r0, r3
 801efd6:	f7ef f8ab 	bl	800e130 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801efda:	bf00      	nop
 801efdc:	3708      	adds	r7, #8
 801efde:	46bd      	mov	sp, r7
 801efe0:	bd80      	pop	{r7, pc}

0801efe2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801efe2:	b580      	push	{r7, lr}
 801efe4:	b082      	sub	sp, #8
 801efe6:	af00      	add	r7, sp, #0
 801efe8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801efea:	687b      	ldr	r3, [r7, #4]
 801efec:	681b      	ldr	r3, [r3, #0]
 801efee:	4618      	mov	r0, r3
 801eff0:	f7ef f8ec 	bl	800e1cc <osMutexRelease>
}
 801eff4:	bf00      	nop
 801eff6:	3708      	adds	r7, #8
 801eff8:	46bd      	mov	sp, r7
 801effa:	bd80      	pop	{r7, pc}

0801effc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801effc:	b580      	push	{r7, lr}
 801effe:	b08c      	sub	sp, #48	; 0x30
 801f000:	af00      	add	r7, sp, #0
 801f002:	60f8      	str	r0, [r7, #12]
 801f004:	60b9      	str	r1, [r7, #8]
 801f006:	607a      	str	r2, [r7, #4]
 801f008:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801f00a:	f107 0314 	add.w	r3, r7, #20
 801f00e:	2200      	movs	r2, #0
 801f010:	601a      	str	r2, [r3, #0]
 801f012:	605a      	str	r2, [r3, #4]
 801f014:	609a      	str	r2, [r3, #8]
 801f016:	60da      	str	r2, [r3, #12]
 801f018:	611a      	str	r2, [r3, #16]
 801f01a:	615a      	str	r2, [r3, #20]
 801f01c:	619a      	str	r2, [r3, #24]
 801f01e:	68fb      	ldr	r3, [r7, #12]
 801f020:	617b      	str	r3, [r7, #20]
 801f022:	68bb      	ldr	r3, [r7, #8]
 801f024:	61bb      	str	r3, [r7, #24]
 801f026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f028:	b21b      	sxth	r3, r3
 801f02a:	83bb      	strh	r3, [r7, #28]
 801f02c:	683b      	ldr	r3, [r7, #0]
 801f02e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801f030:	f107 0314 	add.w	r3, r7, #20
 801f034:	6879      	ldr	r1, [r7, #4]
 801f036:	4618      	mov	r0, r3
 801f038:	f7ef f802 	bl	800e040 <osThreadCreate>
 801f03c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801f03e:	4618      	mov	r0, r3
 801f040:	3730      	adds	r7, #48	; 0x30
 801f042:	46bd      	mov	sp, r7
 801f044:	bd80      	pop	{r7, pc}
	...

0801f048 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801f048:	b580      	push	{r7, lr}
 801f04a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801f04c:	4b04      	ldr	r3, [pc, #16]	; (801f060 <sys_arch_protect+0x18>)
 801f04e:	681b      	ldr	r3, [r3, #0]
 801f050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801f054:	4618      	mov	r0, r3
 801f056:	f7ef f86b 	bl	800e130 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801f05a:	2301      	movs	r3, #1
}
 801f05c:	4618      	mov	r0, r3
 801f05e:	bd80      	pop	{r7, pc}
 801f060:	2000c144 	.word	0x2000c144

0801f064 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801f064:	b580      	push	{r7, lr}
 801f066:	b082      	sub	sp, #8
 801f068:	af00      	add	r7, sp, #0
 801f06a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801f06c:	4b04      	ldr	r3, [pc, #16]	; (801f080 <sys_arch_unprotect+0x1c>)
 801f06e:	681b      	ldr	r3, [r3, #0]
 801f070:	4618      	mov	r0, r3
 801f072:	f7ef f8ab 	bl	800e1cc <osMutexRelease>
}
 801f076:	bf00      	nop
 801f078:	3708      	adds	r7, #8
 801f07a:	46bd      	mov	sp, r7
 801f07c:	bd80      	pop	{r7, pc}
 801f07e:	bf00      	nop
 801f080:	2000c144 	.word	0x2000c144

0801f084 <_ZdlPvj>:
 801f084:	f000 b826 	b.w	801f0d4 <_ZdlPv>

0801f088 <__cxa_guard_acquire>:
 801f088:	6803      	ldr	r3, [r0, #0]
 801f08a:	07db      	lsls	r3, r3, #31
 801f08c:	d406      	bmi.n	801f09c <__cxa_guard_acquire+0x14>
 801f08e:	7843      	ldrb	r3, [r0, #1]
 801f090:	b103      	cbz	r3, 801f094 <__cxa_guard_acquire+0xc>
 801f092:	deff      	udf	#255	; 0xff
 801f094:	2301      	movs	r3, #1
 801f096:	7043      	strb	r3, [r0, #1]
 801f098:	4618      	mov	r0, r3
 801f09a:	4770      	bx	lr
 801f09c:	2000      	movs	r0, #0
 801f09e:	4770      	bx	lr

0801f0a0 <__cxa_guard_release>:
 801f0a0:	2301      	movs	r3, #1
 801f0a2:	6003      	str	r3, [r0, #0]
 801f0a4:	4770      	bx	lr

0801f0a6 <_Znwj>:
 801f0a6:	2801      	cmp	r0, #1
 801f0a8:	bf38      	it	cc
 801f0aa:	2001      	movcc	r0, #1
 801f0ac:	b510      	push	{r4, lr}
 801f0ae:	4604      	mov	r4, r0
 801f0b0:	4620      	mov	r0, r4
 801f0b2:	f000 f945 	bl	801f340 <malloc>
 801f0b6:	b930      	cbnz	r0, 801f0c6 <_Znwj+0x20>
 801f0b8:	f000 f80e 	bl	801f0d8 <_ZSt15get_new_handlerv>
 801f0bc:	b908      	cbnz	r0, 801f0c2 <_Znwj+0x1c>
 801f0be:	f000 f813 	bl	801f0e8 <abort>
 801f0c2:	4780      	blx	r0
 801f0c4:	e7f4      	b.n	801f0b0 <_Znwj+0xa>
 801f0c6:	bd10      	pop	{r4, pc}

0801f0c8 <_ZSt17__throw_bad_allocv>:
 801f0c8:	b508      	push	{r3, lr}
 801f0ca:	f000 f80d 	bl	801f0e8 <abort>

0801f0ce <_ZSt20__throw_length_errorPKc>:
 801f0ce:	b508      	push	{r3, lr}
 801f0d0:	f000 f80a 	bl	801f0e8 <abort>

0801f0d4 <_ZdlPv>:
 801f0d4:	f000 b93c 	b.w	801f350 <free>

0801f0d8 <_ZSt15get_new_handlerv>:
 801f0d8:	4b02      	ldr	r3, [pc, #8]	; (801f0e4 <_ZSt15get_new_handlerv+0xc>)
 801f0da:	6818      	ldr	r0, [r3, #0]
 801f0dc:	f3bf 8f5b 	dmb	ish
 801f0e0:	4770      	bx	lr
 801f0e2:	bf00      	nop
 801f0e4:	2000c148 	.word	0x2000c148

0801f0e8 <abort>:
 801f0e8:	b508      	push	{r3, lr}
 801f0ea:	2006      	movs	r0, #6
 801f0ec:	f000 fb40 	bl	801f770 <raise>
 801f0f0:	2001      	movs	r0, #1
 801f0f2:	f7e7 ffe9 	bl	80070c8 <_exit>

0801f0f6 <atexit>:
 801f0f6:	2300      	movs	r3, #0
 801f0f8:	4601      	mov	r1, r0
 801f0fa:	461a      	mov	r2, r3
 801f0fc:	4618      	mov	r0, r3
 801f0fe:	f000 bbfb 	b.w	801f8f8 <__register_exitproc>
	...

0801f104 <std>:
 801f104:	2300      	movs	r3, #0
 801f106:	b510      	push	{r4, lr}
 801f108:	4604      	mov	r4, r0
 801f10a:	e9c0 3300 	strd	r3, r3, [r0]
 801f10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f112:	6083      	str	r3, [r0, #8]
 801f114:	8181      	strh	r1, [r0, #12]
 801f116:	6643      	str	r3, [r0, #100]	; 0x64
 801f118:	81c2      	strh	r2, [r0, #14]
 801f11a:	6183      	str	r3, [r0, #24]
 801f11c:	4619      	mov	r1, r3
 801f11e:	2208      	movs	r2, #8
 801f120:	305c      	adds	r0, #92	; 0x5c
 801f122:	f000 f955 	bl	801f3d0 <memset>
 801f126:	4b05      	ldr	r3, [pc, #20]	; (801f13c <std+0x38>)
 801f128:	6263      	str	r3, [r4, #36]	; 0x24
 801f12a:	4b05      	ldr	r3, [pc, #20]	; (801f140 <std+0x3c>)
 801f12c:	62a3      	str	r3, [r4, #40]	; 0x28
 801f12e:	4b05      	ldr	r3, [pc, #20]	; (801f144 <std+0x40>)
 801f130:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f132:	4b05      	ldr	r3, [pc, #20]	; (801f148 <std+0x44>)
 801f134:	6224      	str	r4, [r4, #32]
 801f136:	6323      	str	r3, [r4, #48]	; 0x30
 801f138:	bd10      	pop	{r4, pc}
 801f13a:	bf00      	nop
 801f13c:	0801f7e9 	.word	0x0801f7e9
 801f140:	0801f80b 	.word	0x0801f80b
 801f144:	0801f843 	.word	0x0801f843
 801f148:	0801f867 	.word	0x0801f867

0801f14c <_cleanup_r>:
 801f14c:	4901      	ldr	r1, [pc, #4]	; (801f154 <_cleanup_r+0x8>)
 801f14e:	f000 b8af 	b.w	801f2b0 <_fwalk_reent>
 801f152:	bf00      	nop
 801f154:	0801fb25 	.word	0x0801fb25

0801f158 <__sfmoreglue>:
 801f158:	b570      	push	{r4, r5, r6, lr}
 801f15a:	2268      	movs	r2, #104	; 0x68
 801f15c:	1e4d      	subs	r5, r1, #1
 801f15e:	4355      	muls	r5, r2
 801f160:	460e      	mov	r6, r1
 801f162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f166:	f000 f9a7 	bl	801f4b8 <_malloc_r>
 801f16a:	4604      	mov	r4, r0
 801f16c:	b140      	cbz	r0, 801f180 <__sfmoreglue+0x28>
 801f16e:	2100      	movs	r1, #0
 801f170:	e9c0 1600 	strd	r1, r6, [r0]
 801f174:	300c      	adds	r0, #12
 801f176:	60a0      	str	r0, [r4, #8]
 801f178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f17c:	f000 f928 	bl	801f3d0 <memset>
 801f180:	4620      	mov	r0, r4
 801f182:	bd70      	pop	{r4, r5, r6, pc}

0801f184 <__sfp_lock_acquire>:
 801f184:	4801      	ldr	r0, [pc, #4]	; (801f18c <__sfp_lock_acquire+0x8>)
 801f186:	f000 b8d8 	b.w	801f33a <__retarget_lock_acquire_recursive>
 801f18a:	bf00      	nop
 801f18c:	2000c14d 	.word	0x2000c14d

0801f190 <__sfp_lock_release>:
 801f190:	4801      	ldr	r0, [pc, #4]	; (801f198 <__sfp_lock_release+0x8>)
 801f192:	f000 b8d4 	b.w	801f33e <__retarget_lock_release_recursive>
 801f196:	bf00      	nop
 801f198:	2000c14d 	.word	0x2000c14d

0801f19c <__sinit_lock_acquire>:
 801f19c:	4801      	ldr	r0, [pc, #4]	; (801f1a4 <__sinit_lock_acquire+0x8>)
 801f19e:	f000 b8cc 	b.w	801f33a <__retarget_lock_acquire_recursive>
 801f1a2:	bf00      	nop
 801f1a4:	2000c14e 	.word	0x2000c14e

0801f1a8 <__sinit_lock_release>:
 801f1a8:	4801      	ldr	r0, [pc, #4]	; (801f1b0 <__sinit_lock_release+0x8>)
 801f1aa:	f000 b8c8 	b.w	801f33e <__retarget_lock_release_recursive>
 801f1ae:	bf00      	nop
 801f1b0:	2000c14e 	.word	0x2000c14e

0801f1b4 <__sinit>:
 801f1b4:	b510      	push	{r4, lr}
 801f1b6:	4604      	mov	r4, r0
 801f1b8:	f7ff fff0 	bl	801f19c <__sinit_lock_acquire>
 801f1bc:	69a3      	ldr	r3, [r4, #24]
 801f1be:	b11b      	cbz	r3, 801f1c8 <__sinit+0x14>
 801f1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1c4:	f7ff bff0 	b.w	801f1a8 <__sinit_lock_release>
 801f1c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f1cc:	6523      	str	r3, [r4, #80]	; 0x50
 801f1ce:	4b13      	ldr	r3, [pc, #76]	; (801f21c <__sinit+0x68>)
 801f1d0:	4a13      	ldr	r2, [pc, #76]	; (801f220 <__sinit+0x6c>)
 801f1d2:	681b      	ldr	r3, [r3, #0]
 801f1d4:	62a2      	str	r2, [r4, #40]	; 0x28
 801f1d6:	42a3      	cmp	r3, r4
 801f1d8:	bf04      	itt	eq
 801f1da:	2301      	moveq	r3, #1
 801f1dc:	61a3      	streq	r3, [r4, #24]
 801f1de:	4620      	mov	r0, r4
 801f1e0:	f000 f820 	bl	801f224 <__sfp>
 801f1e4:	6060      	str	r0, [r4, #4]
 801f1e6:	4620      	mov	r0, r4
 801f1e8:	f000 f81c 	bl	801f224 <__sfp>
 801f1ec:	60a0      	str	r0, [r4, #8]
 801f1ee:	4620      	mov	r0, r4
 801f1f0:	f000 f818 	bl	801f224 <__sfp>
 801f1f4:	2200      	movs	r2, #0
 801f1f6:	60e0      	str	r0, [r4, #12]
 801f1f8:	2104      	movs	r1, #4
 801f1fa:	6860      	ldr	r0, [r4, #4]
 801f1fc:	f7ff ff82 	bl	801f104 <std>
 801f200:	68a0      	ldr	r0, [r4, #8]
 801f202:	2201      	movs	r2, #1
 801f204:	2109      	movs	r1, #9
 801f206:	f7ff ff7d 	bl	801f104 <std>
 801f20a:	68e0      	ldr	r0, [r4, #12]
 801f20c:	2202      	movs	r2, #2
 801f20e:	2112      	movs	r1, #18
 801f210:	f7ff ff78 	bl	801f104 <std>
 801f214:	2301      	movs	r3, #1
 801f216:	61a3      	str	r3, [r4, #24]
 801f218:	e7d2      	b.n	801f1c0 <__sinit+0xc>
 801f21a:	bf00      	nop
 801f21c:	0802415c 	.word	0x0802415c
 801f220:	0801f14d 	.word	0x0801f14d

0801f224 <__sfp>:
 801f224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f226:	4607      	mov	r7, r0
 801f228:	f7ff ffac 	bl	801f184 <__sfp_lock_acquire>
 801f22c:	4b1e      	ldr	r3, [pc, #120]	; (801f2a8 <__sfp+0x84>)
 801f22e:	681e      	ldr	r6, [r3, #0]
 801f230:	69b3      	ldr	r3, [r6, #24]
 801f232:	b913      	cbnz	r3, 801f23a <__sfp+0x16>
 801f234:	4630      	mov	r0, r6
 801f236:	f7ff ffbd 	bl	801f1b4 <__sinit>
 801f23a:	3648      	adds	r6, #72	; 0x48
 801f23c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f240:	3b01      	subs	r3, #1
 801f242:	d503      	bpl.n	801f24c <__sfp+0x28>
 801f244:	6833      	ldr	r3, [r6, #0]
 801f246:	b30b      	cbz	r3, 801f28c <__sfp+0x68>
 801f248:	6836      	ldr	r6, [r6, #0]
 801f24a:	e7f7      	b.n	801f23c <__sfp+0x18>
 801f24c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f250:	b9d5      	cbnz	r5, 801f288 <__sfp+0x64>
 801f252:	4b16      	ldr	r3, [pc, #88]	; (801f2ac <__sfp+0x88>)
 801f254:	60e3      	str	r3, [r4, #12]
 801f256:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f25a:	6665      	str	r5, [r4, #100]	; 0x64
 801f25c:	f000 f86c 	bl	801f338 <__retarget_lock_init_recursive>
 801f260:	f7ff ff96 	bl	801f190 <__sfp_lock_release>
 801f264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f26c:	6025      	str	r5, [r4, #0]
 801f26e:	61a5      	str	r5, [r4, #24]
 801f270:	2208      	movs	r2, #8
 801f272:	4629      	mov	r1, r5
 801f274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f278:	f000 f8aa 	bl	801f3d0 <memset>
 801f27c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f284:	4620      	mov	r0, r4
 801f286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f288:	3468      	adds	r4, #104	; 0x68
 801f28a:	e7d9      	b.n	801f240 <__sfp+0x1c>
 801f28c:	2104      	movs	r1, #4
 801f28e:	4638      	mov	r0, r7
 801f290:	f7ff ff62 	bl	801f158 <__sfmoreglue>
 801f294:	4604      	mov	r4, r0
 801f296:	6030      	str	r0, [r6, #0]
 801f298:	2800      	cmp	r0, #0
 801f29a:	d1d5      	bne.n	801f248 <__sfp+0x24>
 801f29c:	f7ff ff78 	bl	801f190 <__sfp_lock_release>
 801f2a0:	230c      	movs	r3, #12
 801f2a2:	603b      	str	r3, [r7, #0]
 801f2a4:	e7ee      	b.n	801f284 <__sfp+0x60>
 801f2a6:	bf00      	nop
 801f2a8:	0802415c 	.word	0x0802415c
 801f2ac:	ffff0001 	.word	0xffff0001

0801f2b0 <_fwalk_reent>:
 801f2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f2b4:	4606      	mov	r6, r0
 801f2b6:	4688      	mov	r8, r1
 801f2b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f2bc:	2700      	movs	r7, #0
 801f2be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f2c2:	f1b9 0901 	subs.w	r9, r9, #1
 801f2c6:	d505      	bpl.n	801f2d4 <_fwalk_reent+0x24>
 801f2c8:	6824      	ldr	r4, [r4, #0]
 801f2ca:	2c00      	cmp	r4, #0
 801f2cc:	d1f7      	bne.n	801f2be <_fwalk_reent+0xe>
 801f2ce:	4638      	mov	r0, r7
 801f2d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f2d4:	89ab      	ldrh	r3, [r5, #12]
 801f2d6:	2b01      	cmp	r3, #1
 801f2d8:	d907      	bls.n	801f2ea <_fwalk_reent+0x3a>
 801f2da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f2de:	3301      	adds	r3, #1
 801f2e0:	d003      	beq.n	801f2ea <_fwalk_reent+0x3a>
 801f2e2:	4629      	mov	r1, r5
 801f2e4:	4630      	mov	r0, r6
 801f2e6:	47c0      	blx	r8
 801f2e8:	4307      	orrs	r7, r0
 801f2ea:	3568      	adds	r5, #104	; 0x68
 801f2ec:	e7e9      	b.n	801f2c2 <_fwalk_reent+0x12>
	...

0801f2f0 <__libc_init_array>:
 801f2f0:	b570      	push	{r4, r5, r6, lr}
 801f2f2:	4d0d      	ldr	r5, [pc, #52]	; (801f328 <__libc_init_array+0x38>)
 801f2f4:	4c0d      	ldr	r4, [pc, #52]	; (801f32c <__libc_init_array+0x3c>)
 801f2f6:	1b64      	subs	r4, r4, r5
 801f2f8:	10a4      	asrs	r4, r4, #2
 801f2fa:	2600      	movs	r6, #0
 801f2fc:	42a6      	cmp	r6, r4
 801f2fe:	d109      	bne.n	801f314 <__libc_init_array+0x24>
 801f300:	4d0b      	ldr	r5, [pc, #44]	; (801f330 <__libc_init_array+0x40>)
 801f302:	4c0c      	ldr	r4, [pc, #48]	; (801f334 <__libc_init_array+0x44>)
 801f304:	f001 fa4a 	bl	802079c <_init>
 801f308:	1b64      	subs	r4, r4, r5
 801f30a:	10a4      	asrs	r4, r4, #2
 801f30c:	2600      	movs	r6, #0
 801f30e:	42a6      	cmp	r6, r4
 801f310:	d105      	bne.n	801f31e <__libc_init_array+0x2e>
 801f312:	bd70      	pop	{r4, r5, r6, pc}
 801f314:	f855 3b04 	ldr.w	r3, [r5], #4
 801f318:	4798      	blx	r3
 801f31a:	3601      	adds	r6, #1
 801f31c:	e7ee      	b.n	801f2fc <__libc_init_array+0xc>
 801f31e:	f855 3b04 	ldr.w	r3, [r5], #4
 801f322:	4798      	blx	r3
 801f324:	3601      	adds	r6, #1
 801f326:	e7f2      	b.n	801f30e <__libc_init_array+0x1e>
 801f328:	0802424c 	.word	0x0802424c
 801f32c:	0802424c 	.word	0x0802424c
 801f330:	0802424c 	.word	0x0802424c
 801f334:	08024254 	.word	0x08024254

0801f338 <__retarget_lock_init_recursive>:
 801f338:	4770      	bx	lr

0801f33a <__retarget_lock_acquire_recursive>:
 801f33a:	4770      	bx	lr

0801f33c <__retarget_lock_release>:
 801f33c:	4770      	bx	lr

0801f33e <__retarget_lock_release_recursive>:
 801f33e:	4770      	bx	lr

0801f340 <malloc>:
 801f340:	4b02      	ldr	r3, [pc, #8]	; (801f34c <malloc+0xc>)
 801f342:	4601      	mov	r1, r0
 801f344:	6818      	ldr	r0, [r3, #0]
 801f346:	f000 b8b7 	b.w	801f4b8 <_malloc_r>
 801f34a:	bf00      	nop
 801f34c:	20000034 	.word	0x20000034

0801f350 <free>:
 801f350:	4b02      	ldr	r3, [pc, #8]	; (801f35c <free+0xc>)
 801f352:	4601      	mov	r1, r0
 801f354:	6818      	ldr	r0, [r3, #0]
 801f356:	f000 b843 	b.w	801f3e0 <_free_r>
 801f35a:	bf00      	nop
 801f35c:	20000034 	.word	0x20000034

0801f360 <memcmp>:
 801f360:	b510      	push	{r4, lr}
 801f362:	3901      	subs	r1, #1
 801f364:	4402      	add	r2, r0
 801f366:	4290      	cmp	r0, r2
 801f368:	d101      	bne.n	801f36e <memcmp+0xe>
 801f36a:	2000      	movs	r0, #0
 801f36c:	e005      	b.n	801f37a <memcmp+0x1a>
 801f36e:	7803      	ldrb	r3, [r0, #0]
 801f370:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f374:	42a3      	cmp	r3, r4
 801f376:	d001      	beq.n	801f37c <memcmp+0x1c>
 801f378:	1b18      	subs	r0, r3, r4
 801f37a:	bd10      	pop	{r4, pc}
 801f37c:	3001      	adds	r0, #1
 801f37e:	e7f2      	b.n	801f366 <memcmp+0x6>

0801f380 <memcpy>:
 801f380:	440a      	add	r2, r1
 801f382:	4291      	cmp	r1, r2
 801f384:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801f388:	d100      	bne.n	801f38c <memcpy+0xc>
 801f38a:	4770      	bx	lr
 801f38c:	b510      	push	{r4, lr}
 801f38e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f392:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f396:	4291      	cmp	r1, r2
 801f398:	d1f9      	bne.n	801f38e <memcpy+0xe>
 801f39a:	bd10      	pop	{r4, pc}

0801f39c <memmove>:
 801f39c:	4288      	cmp	r0, r1
 801f39e:	b510      	push	{r4, lr}
 801f3a0:	eb01 0402 	add.w	r4, r1, r2
 801f3a4:	d902      	bls.n	801f3ac <memmove+0x10>
 801f3a6:	4284      	cmp	r4, r0
 801f3a8:	4623      	mov	r3, r4
 801f3aa:	d807      	bhi.n	801f3bc <memmove+0x20>
 801f3ac:	1e43      	subs	r3, r0, #1
 801f3ae:	42a1      	cmp	r1, r4
 801f3b0:	d008      	beq.n	801f3c4 <memmove+0x28>
 801f3b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f3b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f3ba:	e7f8      	b.n	801f3ae <memmove+0x12>
 801f3bc:	4402      	add	r2, r0
 801f3be:	4601      	mov	r1, r0
 801f3c0:	428a      	cmp	r2, r1
 801f3c2:	d100      	bne.n	801f3c6 <memmove+0x2a>
 801f3c4:	bd10      	pop	{r4, pc}
 801f3c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f3ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f3ce:	e7f7      	b.n	801f3c0 <memmove+0x24>

0801f3d0 <memset>:
 801f3d0:	4402      	add	r2, r0
 801f3d2:	4603      	mov	r3, r0
 801f3d4:	4293      	cmp	r3, r2
 801f3d6:	d100      	bne.n	801f3da <memset+0xa>
 801f3d8:	4770      	bx	lr
 801f3da:	f803 1b01 	strb.w	r1, [r3], #1
 801f3de:	e7f9      	b.n	801f3d4 <memset+0x4>

0801f3e0 <_free_r>:
 801f3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f3e2:	2900      	cmp	r1, #0
 801f3e4:	d044      	beq.n	801f470 <_free_r+0x90>
 801f3e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f3ea:	9001      	str	r0, [sp, #4]
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	f1a1 0404 	sub.w	r4, r1, #4
 801f3f2:	bfb8      	it	lt
 801f3f4:	18e4      	addlt	r4, r4, r3
 801f3f6:	f7e1 fb51 	bl	8000a9c <__malloc_lock>
 801f3fa:	4a1e      	ldr	r2, [pc, #120]	; (801f474 <_free_r+0x94>)
 801f3fc:	9801      	ldr	r0, [sp, #4]
 801f3fe:	6813      	ldr	r3, [r2, #0]
 801f400:	b933      	cbnz	r3, 801f410 <_free_r+0x30>
 801f402:	6063      	str	r3, [r4, #4]
 801f404:	6014      	str	r4, [r2, #0]
 801f406:	b003      	add	sp, #12
 801f408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f40c:	f7e1 bb71 	b.w	8000af2 <__malloc_unlock>
 801f410:	42a3      	cmp	r3, r4
 801f412:	d908      	bls.n	801f426 <_free_r+0x46>
 801f414:	6825      	ldr	r5, [r4, #0]
 801f416:	1961      	adds	r1, r4, r5
 801f418:	428b      	cmp	r3, r1
 801f41a:	bf01      	itttt	eq
 801f41c:	6819      	ldreq	r1, [r3, #0]
 801f41e:	685b      	ldreq	r3, [r3, #4]
 801f420:	1949      	addeq	r1, r1, r5
 801f422:	6021      	streq	r1, [r4, #0]
 801f424:	e7ed      	b.n	801f402 <_free_r+0x22>
 801f426:	461a      	mov	r2, r3
 801f428:	685b      	ldr	r3, [r3, #4]
 801f42a:	b10b      	cbz	r3, 801f430 <_free_r+0x50>
 801f42c:	42a3      	cmp	r3, r4
 801f42e:	d9fa      	bls.n	801f426 <_free_r+0x46>
 801f430:	6811      	ldr	r1, [r2, #0]
 801f432:	1855      	adds	r5, r2, r1
 801f434:	42a5      	cmp	r5, r4
 801f436:	d10b      	bne.n	801f450 <_free_r+0x70>
 801f438:	6824      	ldr	r4, [r4, #0]
 801f43a:	4421      	add	r1, r4
 801f43c:	1854      	adds	r4, r2, r1
 801f43e:	42a3      	cmp	r3, r4
 801f440:	6011      	str	r1, [r2, #0]
 801f442:	d1e0      	bne.n	801f406 <_free_r+0x26>
 801f444:	681c      	ldr	r4, [r3, #0]
 801f446:	685b      	ldr	r3, [r3, #4]
 801f448:	6053      	str	r3, [r2, #4]
 801f44a:	4421      	add	r1, r4
 801f44c:	6011      	str	r1, [r2, #0]
 801f44e:	e7da      	b.n	801f406 <_free_r+0x26>
 801f450:	d902      	bls.n	801f458 <_free_r+0x78>
 801f452:	230c      	movs	r3, #12
 801f454:	6003      	str	r3, [r0, #0]
 801f456:	e7d6      	b.n	801f406 <_free_r+0x26>
 801f458:	6825      	ldr	r5, [r4, #0]
 801f45a:	1961      	adds	r1, r4, r5
 801f45c:	428b      	cmp	r3, r1
 801f45e:	bf04      	itt	eq
 801f460:	6819      	ldreq	r1, [r3, #0]
 801f462:	685b      	ldreq	r3, [r3, #4]
 801f464:	6063      	str	r3, [r4, #4]
 801f466:	bf04      	itt	eq
 801f468:	1949      	addeq	r1, r1, r5
 801f46a:	6021      	streq	r1, [r4, #0]
 801f46c:	6054      	str	r4, [r2, #4]
 801f46e:	e7ca      	b.n	801f406 <_free_r+0x26>
 801f470:	b003      	add	sp, #12
 801f472:	bd30      	pop	{r4, r5, pc}
 801f474:	2000c150 	.word	0x2000c150

0801f478 <sbrk_aligned>:
 801f478:	b570      	push	{r4, r5, r6, lr}
 801f47a:	4e0e      	ldr	r6, [pc, #56]	; (801f4b4 <sbrk_aligned+0x3c>)
 801f47c:	460c      	mov	r4, r1
 801f47e:	6831      	ldr	r1, [r6, #0]
 801f480:	4605      	mov	r5, r0
 801f482:	b911      	cbnz	r1, 801f48a <sbrk_aligned+0x12>
 801f484:	f7e1 faae 	bl	80009e4 <_sbrk_r>
 801f488:	6030      	str	r0, [r6, #0]
 801f48a:	4621      	mov	r1, r4
 801f48c:	4628      	mov	r0, r5
 801f48e:	f7e1 faa9 	bl	80009e4 <_sbrk_r>
 801f492:	1c43      	adds	r3, r0, #1
 801f494:	d00a      	beq.n	801f4ac <sbrk_aligned+0x34>
 801f496:	1cc4      	adds	r4, r0, #3
 801f498:	f024 0403 	bic.w	r4, r4, #3
 801f49c:	42a0      	cmp	r0, r4
 801f49e:	d007      	beq.n	801f4b0 <sbrk_aligned+0x38>
 801f4a0:	1a21      	subs	r1, r4, r0
 801f4a2:	4628      	mov	r0, r5
 801f4a4:	f7e1 fa9e 	bl	80009e4 <_sbrk_r>
 801f4a8:	3001      	adds	r0, #1
 801f4aa:	d101      	bne.n	801f4b0 <sbrk_aligned+0x38>
 801f4ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f4b0:	4620      	mov	r0, r4
 801f4b2:	bd70      	pop	{r4, r5, r6, pc}
 801f4b4:	2000c154 	.word	0x2000c154

0801f4b8 <_malloc_r>:
 801f4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f4bc:	1ccd      	adds	r5, r1, #3
 801f4be:	f025 0503 	bic.w	r5, r5, #3
 801f4c2:	3508      	adds	r5, #8
 801f4c4:	2d0c      	cmp	r5, #12
 801f4c6:	bf38      	it	cc
 801f4c8:	250c      	movcc	r5, #12
 801f4ca:	2d00      	cmp	r5, #0
 801f4cc:	4607      	mov	r7, r0
 801f4ce:	db01      	blt.n	801f4d4 <_malloc_r+0x1c>
 801f4d0:	42a9      	cmp	r1, r5
 801f4d2:	d905      	bls.n	801f4e0 <_malloc_r+0x28>
 801f4d4:	230c      	movs	r3, #12
 801f4d6:	603b      	str	r3, [r7, #0]
 801f4d8:	2600      	movs	r6, #0
 801f4da:	4630      	mov	r0, r6
 801f4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f4e0:	4e2e      	ldr	r6, [pc, #184]	; (801f59c <_malloc_r+0xe4>)
 801f4e2:	f7e1 fadb 	bl	8000a9c <__malloc_lock>
 801f4e6:	6833      	ldr	r3, [r6, #0]
 801f4e8:	461c      	mov	r4, r3
 801f4ea:	bb34      	cbnz	r4, 801f53a <_malloc_r+0x82>
 801f4ec:	4629      	mov	r1, r5
 801f4ee:	4638      	mov	r0, r7
 801f4f0:	f7ff ffc2 	bl	801f478 <sbrk_aligned>
 801f4f4:	1c43      	adds	r3, r0, #1
 801f4f6:	4604      	mov	r4, r0
 801f4f8:	d14d      	bne.n	801f596 <_malloc_r+0xde>
 801f4fa:	6834      	ldr	r4, [r6, #0]
 801f4fc:	4626      	mov	r6, r4
 801f4fe:	2e00      	cmp	r6, #0
 801f500:	d140      	bne.n	801f584 <_malloc_r+0xcc>
 801f502:	6823      	ldr	r3, [r4, #0]
 801f504:	4631      	mov	r1, r6
 801f506:	4638      	mov	r0, r7
 801f508:	eb04 0803 	add.w	r8, r4, r3
 801f50c:	f7e1 fa6a 	bl	80009e4 <_sbrk_r>
 801f510:	4580      	cmp	r8, r0
 801f512:	d13a      	bne.n	801f58a <_malloc_r+0xd2>
 801f514:	6821      	ldr	r1, [r4, #0]
 801f516:	3503      	adds	r5, #3
 801f518:	1a6d      	subs	r5, r5, r1
 801f51a:	f025 0503 	bic.w	r5, r5, #3
 801f51e:	3508      	adds	r5, #8
 801f520:	2d0c      	cmp	r5, #12
 801f522:	bf38      	it	cc
 801f524:	250c      	movcc	r5, #12
 801f526:	4629      	mov	r1, r5
 801f528:	4638      	mov	r0, r7
 801f52a:	f7ff ffa5 	bl	801f478 <sbrk_aligned>
 801f52e:	3001      	adds	r0, #1
 801f530:	d02b      	beq.n	801f58a <_malloc_r+0xd2>
 801f532:	6823      	ldr	r3, [r4, #0]
 801f534:	442b      	add	r3, r5
 801f536:	6023      	str	r3, [r4, #0]
 801f538:	e00e      	b.n	801f558 <_malloc_r+0xa0>
 801f53a:	6822      	ldr	r2, [r4, #0]
 801f53c:	1b52      	subs	r2, r2, r5
 801f53e:	d41e      	bmi.n	801f57e <_malloc_r+0xc6>
 801f540:	2a0b      	cmp	r2, #11
 801f542:	d916      	bls.n	801f572 <_malloc_r+0xba>
 801f544:	1961      	adds	r1, r4, r5
 801f546:	42a3      	cmp	r3, r4
 801f548:	6025      	str	r5, [r4, #0]
 801f54a:	bf18      	it	ne
 801f54c:	6059      	strne	r1, [r3, #4]
 801f54e:	6863      	ldr	r3, [r4, #4]
 801f550:	bf08      	it	eq
 801f552:	6031      	streq	r1, [r6, #0]
 801f554:	5162      	str	r2, [r4, r5]
 801f556:	604b      	str	r3, [r1, #4]
 801f558:	4638      	mov	r0, r7
 801f55a:	f104 060b 	add.w	r6, r4, #11
 801f55e:	f7e1 fac8 	bl	8000af2 <__malloc_unlock>
 801f562:	f026 0607 	bic.w	r6, r6, #7
 801f566:	1d23      	adds	r3, r4, #4
 801f568:	1af2      	subs	r2, r6, r3
 801f56a:	d0b6      	beq.n	801f4da <_malloc_r+0x22>
 801f56c:	1b9b      	subs	r3, r3, r6
 801f56e:	50a3      	str	r3, [r4, r2]
 801f570:	e7b3      	b.n	801f4da <_malloc_r+0x22>
 801f572:	6862      	ldr	r2, [r4, #4]
 801f574:	42a3      	cmp	r3, r4
 801f576:	bf0c      	ite	eq
 801f578:	6032      	streq	r2, [r6, #0]
 801f57a:	605a      	strne	r2, [r3, #4]
 801f57c:	e7ec      	b.n	801f558 <_malloc_r+0xa0>
 801f57e:	4623      	mov	r3, r4
 801f580:	6864      	ldr	r4, [r4, #4]
 801f582:	e7b2      	b.n	801f4ea <_malloc_r+0x32>
 801f584:	4634      	mov	r4, r6
 801f586:	6876      	ldr	r6, [r6, #4]
 801f588:	e7b9      	b.n	801f4fe <_malloc_r+0x46>
 801f58a:	230c      	movs	r3, #12
 801f58c:	603b      	str	r3, [r7, #0]
 801f58e:	4638      	mov	r0, r7
 801f590:	f7e1 faaf 	bl	8000af2 <__malloc_unlock>
 801f594:	e7a1      	b.n	801f4da <_malloc_r+0x22>
 801f596:	6025      	str	r5, [r4, #0]
 801f598:	e7de      	b.n	801f558 <_malloc_r+0xa0>
 801f59a:	bf00      	nop
 801f59c:	2000c150 	.word	0x2000c150

0801f5a0 <iprintf>:
 801f5a0:	b40f      	push	{r0, r1, r2, r3}
 801f5a2:	4b0a      	ldr	r3, [pc, #40]	; (801f5cc <iprintf+0x2c>)
 801f5a4:	b513      	push	{r0, r1, r4, lr}
 801f5a6:	681c      	ldr	r4, [r3, #0]
 801f5a8:	b124      	cbz	r4, 801f5b4 <iprintf+0x14>
 801f5aa:	69a3      	ldr	r3, [r4, #24]
 801f5ac:	b913      	cbnz	r3, 801f5b4 <iprintf+0x14>
 801f5ae:	4620      	mov	r0, r4
 801f5b0:	f7ff fe00 	bl	801f1b4 <__sinit>
 801f5b4:	ab05      	add	r3, sp, #20
 801f5b6:	9a04      	ldr	r2, [sp, #16]
 801f5b8:	68a1      	ldr	r1, [r4, #8]
 801f5ba:	9301      	str	r3, [sp, #4]
 801f5bc:	4620      	mov	r0, r4
 801f5be:	f000 fc97 	bl	801fef0 <_vfiprintf_r>
 801f5c2:	b002      	add	sp, #8
 801f5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f5c8:	b004      	add	sp, #16
 801f5ca:	4770      	bx	lr
 801f5cc:	20000034 	.word	0x20000034

0801f5d0 <rand>:
 801f5d0:	4b16      	ldr	r3, [pc, #88]	; (801f62c <rand+0x5c>)
 801f5d2:	b510      	push	{r4, lr}
 801f5d4:	681c      	ldr	r4, [r3, #0]
 801f5d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f5d8:	b9b3      	cbnz	r3, 801f608 <rand+0x38>
 801f5da:	2018      	movs	r0, #24
 801f5dc:	f7ff feb0 	bl	801f340 <malloc>
 801f5e0:	63a0      	str	r0, [r4, #56]	; 0x38
 801f5e2:	b928      	cbnz	r0, 801f5f0 <rand+0x20>
 801f5e4:	4602      	mov	r2, r0
 801f5e6:	4b12      	ldr	r3, [pc, #72]	; (801f630 <rand+0x60>)
 801f5e8:	4812      	ldr	r0, [pc, #72]	; (801f634 <rand+0x64>)
 801f5ea:	214e      	movs	r1, #78	; 0x4e
 801f5ec:	f000 f9e6 	bl	801f9bc <__assert_func>
 801f5f0:	4a11      	ldr	r2, [pc, #68]	; (801f638 <rand+0x68>)
 801f5f2:	4b12      	ldr	r3, [pc, #72]	; (801f63c <rand+0x6c>)
 801f5f4:	e9c0 2300 	strd	r2, r3, [r0]
 801f5f8:	4b11      	ldr	r3, [pc, #68]	; (801f640 <rand+0x70>)
 801f5fa:	6083      	str	r3, [r0, #8]
 801f5fc:	230b      	movs	r3, #11
 801f5fe:	8183      	strh	r3, [r0, #12]
 801f600:	2201      	movs	r2, #1
 801f602:	2300      	movs	r3, #0
 801f604:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801f608:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801f60a:	4a0e      	ldr	r2, [pc, #56]	; (801f644 <rand+0x74>)
 801f60c:	6920      	ldr	r0, [r4, #16]
 801f60e:	6963      	ldr	r3, [r4, #20]
 801f610:	490d      	ldr	r1, [pc, #52]	; (801f648 <rand+0x78>)
 801f612:	4342      	muls	r2, r0
 801f614:	fb01 2203 	mla	r2, r1, r3, r2
 801f618:	fba0 0101 	umull	r0, r1, r0, r1
 801f61c:	1c43      	adds	r3, r0, #1
 801f61e:	eb42 0001 	adc.w	r0, r2, r1
 801f622:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801f626:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f62a:	bd10      	pop	{r4, pc}
 801f62c:	20000034 	.word	0x20000034
 801f630:	08024160 	.word	0x08024160
 801f634:	08024177 	.word	0x08024177
 801f638:	abcd330e 	.word	0xabcd330e
 801f63c:	e66d1234 	.word	0xe66d1234
 801f640:	0005deec 	.word	0x0005deec
 801f644:	5851f42d 	.word	0x5851f42d
 801f648:	4c957f2d 	.word	0x4c957f2d

0801f64c <cleanup_glue>:
 801f64c:	b538      	push	{r3, r4, r5, lr}
 801f64e:	460c      	mov	r4, r1
 801f650:	6809      	ldr	r1, [r1, #0]
 801f652:	4605      	mov	r5, r0
 801f654:	b109      	cbz	r1, 801f65a <cleanup_glue+0xe>
 801f656:	f7ff fff9 	bl	801f64c <cleanup_glue>
 801f65a:	4621      	mov	r1, r4
 801f65c:	4628      	mov	r0, r5
 801f65e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f662:	f7ff bebd 	b.w	801f3e0 <_free_r>
	...

0801f668 <_reclaim_reent>:
 801f668:	4b2c      	ldr	r3, [pc, #176]	; (801f71c <_reclaim_reent+0xb4>)
 801f66a:	681b      	ldr	r3, [r3, #0]
 801f66c:	4283      	cmp	r3, r0
 801f66e:	b570      	push	{r4, r5, r6, lr}
 801f670:	4604      	mov	r4, r0
 801f672:	d051      	beq.n	801f718 <_reclaim_reent+0xb0>
 801f674:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801f676:	b143      	cbz	r3, 801f68a <_reclaim_reent+0x22>
 801f678:	68db      	ldr	r3, [r3, #12]
 801f67a:	2b00      	cmp	r3, #0
 801f67c:	d14a      	bne.n	801f714 <_reclaim_reent+0xac>
 801f67e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f680:	6819      	ldr	r1, [r3, #0]
 801f682:	b111      	cbz	r1, 801f68a <_reclaim_reent+0x22>
 801f684:	4620      	mov	r0, r4
 801f686:	f7ff feab 	bl	801f3e0 <_free_r>
 801f68a:	6961      	ldr	r1, [r4, #20]
 801f68c:	b111      	cbz	r1, 801f694 <_reclaim_reent+0x2c>
 801f68e:	4620      	mov	r0, r4
 801f690:	f7ff fea6 	bl	801f3e0 <_free_r>
 801f694:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f696:	b111      	cbz	r1, 801f69e <_reclaim_reent+0x36>
 801f698:	4620      	mov	r0, r4
 801f69a:	f7ff fea1 	bl	801f3e0 <_free_r>
 801f69e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f6a0:	b111      	cbz	r1, 801f6a8 <_reclaim_reent+0x40>
 801f6a2:	4620      	mov	r0, r4
 801f6a4:	f7ff fe9c 	bl	801f3e0 <_free_r>
 801f6a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801f6aa:	b111      	cbz	r1, 801f6b2 <_reclaim_reent+0x4a>
 801f6ac:	4620      	mov	r0, r4
 801f6ae:	f7ff fe97 	bl	801f3e0 <_free_r>
 801f6b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f6b4:	b111      	cbz	r1, 801f6bc <_reclaim_reent+0x54>
 801f6b6:	4620      	mov	r0, r4
 801f6b8:	f7ff fe92 	bl	801f3e0 <_free_r>
 801f6bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801f6be:	b111      	cbz	r1, 801f6c6 <_reclaim_reent+0x5e>
 801f6c0:	4620      	mov	r0, r4
 801f6c2:	f7ff fe8d 	bl	801f3e0 <_free_r>
 801f6c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801f6c8:	b111      	cbz	r1, 801f6d0 <_reclaim_reent+0x68>
 801f6ca:	4620      	mov	r0, r4
 801f6cc:	f7ff fe88 	bl	801f3e0 <_free_r>
 801f6d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f6d2:	b111      	cbz	r1, 801f6da <_reclaim_reent+0x72>
 801f6d4:	4620      	mov	r0, r4
 801f6d6:	f7ff fe83 	bl	801f3e0 <_free_r>
 801f6da:	69a3      	ldr	r3, [r4, #24]
 801f6dc:	b1e3      	cbz	r3, 801f718 <_reclaim_reent+0xb0>
 801f6de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f6e0:	4620      	mov	r0, r4
 801f6e2:	4798      	blx	r3
 801f6e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f6e6:	b1b9      	cbz	r1, 801f718 <_reclaim_reent+0xb0>
 801f6e8:	4620      	mov	r0, r4
 801f6ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f6ee:	f7ff bfad 	b.w	801f64c <cleanup_glue>
 801f6f2:	5949      	ldr	r1, [r1, r5]
 801f6f4:	b941      	cbnz	r1, 801f708 <_reclaim_reent+0xa0>
 801f6f6:	3504      	adds	r5, #4
 801f6f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f6fa:	2d80      	cmp	r5, #128	; 0x80
 801f6fc:	68d9      	ldr	r1, [r3, #12]
 801f6fe:	d1f8      	bne.n	801f6f2 <_reclaim_reent+0x8a>
 801f700:	4620      	mov	r0, r4
 801f702:	f7ff fe6d 	bl	801f3e0 <_free_r>
 801f706:	e7ba      	b.n	801f67e <_reclaim_reent+0x16>
 801f708:	680e      	ldr	r6, [r1, #0]
 801f70a:	4620      	mov	r0, r4
 801f70c:	f7ff fe68 	bl	801f3e0 <_free_r>
 801f710:	4631      	mov	r1, r6
 801f712:	e7ef      	b.n	801f6f4 <_reclaim_reent+0x8c>
 801f714:	2500      	movs	r5, #0
 801f716:	e7ef      	b.n	801f6f8 <_reclaim_reent+0x90>
 801f718:	bd70      	pop	{r4, r5, r6, pc}
 801f71a:	bf00      	nop
 801f71c:	20000034 	.word	0x20000034

0801f720 <_raise_r>:
 801f720:	291f      	cmp	r1, #31
 801f722:	b538      	push	{r3, r4, r5, lr}
 801f724:	4604      	mov	r4, r0
 801f726:	460d      	mov	r5, r1
 801f728:	d904      	bls.n	801f734 <_raise_r+0x14>
 801f72a:	2316      	movs	r3, #22
 801f72c:	6003      	str	r3, [r0, #0]
 801f72e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f732:	bd38      	pop	{r3, r4, r5, pc}
 801f734:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f736:	b112      	cbz	r2, 801f73e <_raise_r+0x1e>
 801f738:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f73c:	b94b      	cbnz	r3, 801f752 <_raise_r+0x32>
 801f73e:	4620      	mov	r0, r4
 801f740:	f000 f830 	bl	801f7a4 <_getpid_r>
 801f744:	462a      	mov	r2, r5
 801f746:	4601      	mov	r1, r0
 801f748:	4620      	mov	r0, r4
 801f74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f74e:	f000 b817 	b.w	801f780 <_kill_r>
 801f752:	2b01      	cmp	r3, #1
 801f754:	d00a      	beq.n	801f76c <_raise_r+0x4c>
 801f756:	1c59      	adds	r1, r3, #1
 801f758:	d103      	bne.n	801f762 <_raise_r+0x42>
 801f75a:	2316      	movs	r3, #22
 801f75c:	6003      	str	r3, [r0, #0]
 801f75e:	2001      	movs	r0, #1
 801f760:	e7e7      	b.n	801f732 <_raise_r+0x12>
 801f762:	2400      	movs	r4, #0
 801f764:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f768:	4628      	mov	r0, r5
 801f76a:	4798      	blx	r3
 801f76c:	2000      	movs	r0, #0
 801f76e:	e7e0      	b.n	801f732 <_raise_r+0x12>

0801f770 <raise>:
 801f770:	4b02      	ldr	r3, [pc, #8]	; (801f77c <raise+0xc>)
 801f772:	4601      	mov	r1, r0
 801f774:	6818      	ldr	r0, [r3, #0]
 801f776:	f7ff bfd3 	b.w	801f720 <_raise_r>
 801f77a:	bf00      	nop
 801f77c:	20000034 	.word	0x20000034

0801f780 <_kill_r>:
 801f780:	b538      	push	{r3, r4, r5, lr}
 801f782:	4d07      	ldr	r5, [pc, #28]	; (801f7a0 <_kill_r+0x20>)
 801f784:	2300      	movs	r3, #0
 801f786:	4604      	mov	r4, r0
 801f788:	4608      	mov	r0, r1
 801f78a:	4611      	mov	r1, r2
 801f78c:	602b      	str	r3, [r5, #0]
 801f78e:	f7e7 fc89 	bl	80070a4 <_kill>
 801f792:	1c43      	adds	r3, r0, #1
 801f794:	d102      	bne.n	801f79c <_kill_r+0x1c>
 801f796:	682b      	ldr	r3, [r5, #0]
 801f798:	b103      	cbz	r3, 801f79c <_kill_r+0x1c>
 801f79a:	6023      	str	r3, [r4, #0]
 801f79c:	bd38      	pop	{r3, r4, r5, pc}
 801f79e:	bf00      	nop
 801f7a0:	2000c158 	.word	0x2000c158

0801f7a4 <_getpid_r>:
 801f7a4:	f7e7 bc76 	b.w	8007094 <_getpid>

0801f7a8 <siprintf>:
 801f7a8:	b40e      	push	{r1, r2, r3}
 801f7aa:	b500      	push	{lr}
 801f7ac:	b09c      	sub	sp, #112	; 0x70
 801f7ae:	ab1d      	add	r3, sp, #116	; 0x74
 801f7b0:	9002      	str	r0, [sp, #8]
 801f7b2:	9006      	str	r0, [sp, #24]
 801f7b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f7b8:	4809      	ldr	r0, [pc, #36]	; (801f7e0 <siprintf+0x38>)
 801f7ba:	9107      	str	r1, [sp, #28]
 801f7bc:	9104      	str	r1, [sp, #16]
 801f7be:	4909      	ldr	r1, [pc, #36]	; (801f7e4 <siprintf+0x3c>)
 801f7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 801f7c4:	9105      	str	r1, [sp, #20]
 801f7c6:	6800      	ldr	r0, [r0, #0]
 801f7c8:	9301      	str	r3, [sp, #4]
 801f7ca:	a902      	add	r1, sp, #8
 801f7cc:	f000 fa66 	bl	801fc9c <_svfiprintf_r>
 801f7d0:	9b02      	ldr	r3, [sp, #8]
 801f7d2:	2200      	movs	r2, #0
 801f7d4:	701a      	strb	r2, [r3, #0]
 801f7d6:	b01c      	add	sp, #112	; 0x70
 801f7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 801f7dc:	b003      	add	sp, #12
 801f7de:	4770      	bx	lr
 801f7e0:	20000034 	.word	0x20000034
 801f7e4:	ffff0208 	.word	0xffff0208

0801f7e8 <__sread>:
 801f7e8:	b510      	push	{r4, lr}
 801f7ea:	460c      	mov	r4, r1
 801f7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f7f0:	f000 fe42 	bl	8020478 <_read_r>
 801f7f4:	2800      	cmp	r0, #0
 801f7f6:	bfab      	itete	ge
 801f7f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f7fa:	89a3      	ldrhlt	r3, [r4, #12]
 801f7fc:	181b      	addge	r3, r3, r0
 801f7fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f802:	bfac      	ite	ge
 801f804:	6563      	strge	r3, [r4, #84]	; 0x54
 801f806:	81a3      	strhlt	r3, [r4, #12]
 801f808:	bd10      	pop	{r4, pc}

0801f80a <__swrite>:
 801f80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f80e:	461f      	mov	r7, r3
 801f810:	898b      	ldrh	r3, [r1, #12]
 801f812:	05db      	lsls	r3, r3, #23
 801f814:	4605      	mov	r5, r0
 801f816:	460c      	mov	r4, r1
 801f818:	4616      	mov	r6, r2
 801f81a:	d505      	bpl.n	801f828 <__swrite+0x1e>
 801f81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f820:	2302      	movs	r3, #2
 801f822:	2200      	movs	r2, #0
 801f824:	f000 f9cc 	bl	801fbc0 <_lseek_r>
 801f828:	89a3      	ldrh	r3, [r4, #12]
 801f82a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f82e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f832:	81a3      	strh	r3, [r4, #12]
 801f834:	4632      	mov	r2, r6
 801f836:	463b      	mov	r3, r7
 801f838:	4628      	mov	r0, r5
 801f83a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f83e:	f000 b849 	b.w	801f8d4 <_write_r>

0801f842 <__sseek>:
 801f842:	b510      	push	{r4, lr}
 801f844:	460c      	mov	r4, r1
 801f846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f84a:	f000 f9b9 	bl	801fbc0 <_lseek_r>
 801f84e:	1c43      	adds	r3, r0, #1
 801f850:	89a3      	ldrh	r3, [r4, #12]
 801f852:	bf15      	itete	ne
 801f854:	6560      	strne	r0, [r4, #84]	; 0x54
 801f856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f85a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f85e:	81a3      	strheq	r3, [r4, #12]
 801f860:	bf18      	it	ne
 801f862:	81a3      	strhne	r3, [r4, #12]
 801f864:	bd10      	pop	{r4, pc}

0801f866 <__sclose>:
 801f866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f86a:	f000 b8c5 	b.w	801f9f8 <_close_r>

0801f86e <strncpy>:
 801f86e:	b510      	push	{r4, lr}
 801f870:	3901      	subs	r1, #1
 801f872:	4603      	mov	r3, r0
 801f874:	b132      	cbz	r2, 801f884 <strncpy+0x16>
 801f876:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f87a:	f803 4b01 	strb.w	r4, [r3], #1
 801f87e:	3a01      	subs	r2, #1
 801f880:	2c00      	cmp	r4, #0
 801f882:	d1f7      	bne.n	801f874 <strncpy+0x6>
 801f884:	441a      	add	r2, r3
 801f886:	2100      	movs	r1, #0
 801f888:	4293      	cmp	r3, r2
 801f88a:	d100      	bne.n	801f88e <strncpy+0x20>
 801f88c:	bd10      	pop	{r4, pc}
 801f88e:	f803 1b01 	strb.w	r1, [r3], #1
 801f892:	e7f9      	b.n	801f888 <strncpy+0x1a>

0801f894 <_vsiprintf_r>:
 801f894:	b500      	push	{lr}
 801f896:	b09b      	sub	sp, #108	; 0x6c
 801f898:	9100      	str	r1, [sp, #0]
 801f89a:	9104      	str	r1, [sp, #16]
 801f89c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f8a0:	9105      	str	r1, [sp, #20]
 801f8a2:	9102      	str	r1, [sp, #8]
 801f8a4:	4905      	ldr	r1, [pc, #20]	; (801f8bc <_vsiprintf_r+0x28>)
 801f8a6:	9103      	str	r1, [sp, #12]
 801f8a8:	4669      	mov	r1, sp
 801f8aa:	f000 f9f7 	bl	801fc9c <_svfiprintf_r>
 801f8ae:	9b00      	ldr	r3, [sp, #0]
 801f8b0:	2200      	movs	r2, #0
 801f8b2:	701a      	strb	r2, [r3, #0]
 801f8b4:	b01b      	add	sp, #108	; 0x6c
 801f8b6:	f85d fb04 	ldr.w	pc, [sp], #4
 801f8ba:	bf00      	nop
 801f8bc:	ffff0208 	.word	0xffff0208

0801f8c0 <vsiprintf>:
 801f8c0:	4613      	mov	r3, r2
 801f8c2:	460a      	mov	r2, r1
 801f8c4:	4601      	mov	r1, r0
 801f8c6:	4802      	ldr	r0, [pc, #8]	; (801f8d0 <vsiprintf+0x10>)
 801f8c8:	6800      	ldr	r0, [r0, #0]
 801f8ca:	f7ff bfe3 	b.w	801f894 <_vsiprintf_r>
 801f8ce:	bf00      	nop
 801f8d0:	20000034 	.word	0x20000034

0801f8d4 <_write_r>:
 801f8d4:	b538      	push	{r3, r4, r5, lr}
 801f8d6:	4d07      	ldr	r5, [pc, #28]	; (801f8f4 <_write_r+0x20>)
 801f8d8:	4604      	mov	r4, r0
 801f8da:	4608      	mov	r0, r1
 801f8dc:	4611      	mov	r1, r2
 801f8de:	2200      	movs	r2, #0
 801f8e0:	602a      	str	r2, [r5, #0]
 801f8e2:	461a      	mov	r2, r3
 801f8e4:	f7e7 fc17 	bl	8007116 <_write>
 801f8e8:	1c43      	adds	r3, r0, #1
 801f8ea:	d102      	bne.n	801f8f2 <_write_r+0x1e>
 801f8ec:	682b      	ldr	r3, [r5, #0]
 801f8ee:	b103      	cbz	r3, 801f8f2 <_write_r+0x1e>
 801f8f0:	6023      	str	r3, [r4, #0]
 801f8f2:	bd38      	pop	{r3, r4, r5, pc}
 801f8f4:	2000c158 	.word	0x2000c158

0801f8f8 <__register_exitproc>:
 801f8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f8fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801f9b8 <__register_exitproc+0xc0>
 801f900:	4606      	mov	r6, r0
 801f902:	f8d8 0000 	ldr.w	r0, [r8]
 801f906:	461f      	mov	r7, r3
 801f908:	460d      	mov	r5, r1
 801f90a:	4691      	mov	r9, r2
 801f90c:	f7ff fd15 	bl	801f33a <__retarget_lock_acquire_recursive>
 801f910:	4b25      	ldr	r3, [pc, #148]	; (801f9a8 <__register_exitproc+0xb0>)
 801f912:	681c      	ldr	r4, [r3, #0]
 801f914:	b934      	cbnz	r4, 801f924 <__register_exitproc+0x2c>
 801f916:	4c25      	ldr	r4, [pc, #148]	; (801f9ac <__register_exitproc+0xb4>)
 801f918:	601c      	str	r4, [r3, #0]
 801f91a:	4b25      	ldr	r3, [pc, #148]	; (801f9b0 <__register_exitproc+0xb8>)
 801f91c:	b113      	cbz	r3, 801f924 <__register_exitproc+0x2c>
 801f91e:	681b      	ldr	r3, [r3, #0]
 801f920:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801f924:	6863      	ldr	r3, [r4, #4]
 801f926:	2b1f      	cmp	r3, #31
 801f928:	dd07      	ble.n	801f93a <__register_exitproc+0x42>
 801f92a:	f8d8 0000 	ldr.w	r0, [r8]
 801f92e:	f7ff fd06 	bl	801f33e <__retarget_lock_release_recursive>
 801f932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f93a:	b34e      	cbz	r6, 801f990 <__register_exitproc+0x98>
 801f93c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801f940:	b988      	cbnz	r0, 801f966 <__register_exitproc+0x6e>
 801f942:	4b1c      	ldr	r3, [pc, #112]	; (801f9b4 <__register_exitproc+0xbc>)
 801f944:	b923      	cbnz	r3, 801f950 <__register_exitproc+0x58>
 801f946:	f8d8 0000 	ldr.w	r0, [r8]
 801f94a:	f7ff fcf7 	bl	801f33c <__retarget_lock_release>
 801f94e:	e7f0      	b.n	801f932 <__register_exitproc+0x3a>
 801f950:	f44f 7084 	mov.w	r0, #264	; 0x108
 801f954:	f7ff fcf4 	bl	801f340 <malloc>
 801f958:	2800      	cmp	r0, #0
 801f95a:	d0f4      	beq.n	801f946 <__register_exitproc+0x4e>
 801f95c:	2300      	movs	r3, #0
 801f95e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801f962:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801f966:	6863      	ldr	r3, [r4, #4]
 801f968:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801f96c:	2201      	movs	r2, #1
 801f96e:	409a      	lsls	r2, r3
 801f970:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801f974:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801f978:	4313      	orrs	r3, r2
 801f97a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801f97e:	2e02      	cmp	r6, #2
 801f980:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801f984:	bf02      	ittt	eq
 801f986:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801f98a:	4313      	orreq	r3, r2
 801f98c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801f990:	6863      	ldr	r3, [r4, #4]
 801f992:	f8d8 0000 	ldr.w	r0, [r8]
 801f996:	1c5a      	adds	r2, r3, #1
 801f998:	3302      	adds	r3, #2
 801f99a:	6062      	str	r2, [r4, #4]
 801f99c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801f9a0:	f7ff fccd 	bl	801f33e <__retarget_lock_release_recursive>
 801f9a4:	2000      	movs	r0, #0
 801f9a6:	e7c6      	b.n	801f936 <__register_exitproc+0x3e>
 801f9a8:	2000c1e8 	.word	0x2000c1e8
 801f9ac:	2000c15c 	.word	0x2000c15c
 801f9b0:	00000000 	.word	0x00000000
 801f9b4:	0801f341 	.word	0x0801f341
 801f9b8:	20000098 	.word	0x20000098

0801f9bc <__assert_func>:
 801f9bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f9be:	4614      	mov	r4, r2
 801f9c0:	461a      	mov	r2, r3
 801f9c2:	4b09      	ldr	r3, [pc, #36]	; (801f9e8 <__assert_func+0x2c>)
 801f9c4:	681b      	ldr	r3, [r3, #0]
 801f9c6:	4605      	mov	r5, r0
 801f9c8:	68d8      	ldr	r0, [r3, #12]
 801f9ca:	b14c      	cbz	r4, 801f9e0 <__assert_func+0x24>
 801f9cc:	4b07      	ldr	r3, [pc, #28]	; (801f9ec <__assert_func+0x30>)
 801f9ce:	9100      	str	r1, [sp, #0]
 801f9d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f9d4:	4906      	ldr	r1, [pc, #24]	; (801f9f0 <__assert_func+0x34>)
 801f9d6:	462b      	mov	r3, r5
 801f9d8:	f000 f8e0 	bl	801fb9c <fiprintf>
 801f9dc:	f7ff fb84 	bl	801f0e8 <abort>
 801f9e0:	4b04      	ldr	r3, [pc, #16]	; (801f9f4 <__assert_func+0x38>)
 801f9e2:	461c      	mov	r4, r3
 801f9e4:	e7f3      	b.n	801f9ce <__assert_func+0x12>
 801f9e6:	bf00      	nop
 801f9e8:	20000034 	.word	0x20000034
 801f9ec:	080241d2 	.word	0x080241d2
 801f9f0:	080241df 	.word	0x080241df
 801f9f4:	0802420d 	.word	0x0802420d

0801f9f8 <_close_r>:
 801f9f8:	b538      	push	{r3, r4, r5, lr}
 801f9fa:	4d06      	ldr	r5, [pc, #24]	; (801fa14 <_close_r+0x1c>)
 801f9fc:	2300      	movs	r3, #0
 801f9fe:	4604      	mov	r4, r0
 801fa00:	4608      	mov	r0, r1
 801fa02:	602b      	str	r3, [r5, #0]
 801fa04:	f7e7 fba3 	bl	800714e <_close>
 801fa08:	1c43      	adds	r3, r0, #1
 801fa0a:	d102      	bne.n	801fa12 <_close_r+0x1a>
 801fa0c:	682b      	ldr	r3, [r5, #0]
 801fa0e:	b103      	cbz	r3, 801fa12 <_close_r+0x1a>
 801fa10:	6023      	str	r3, [r4, #0]
 801fa12:	bd38      	pop	{r3, r4, r5, pc}
 801fa14:	2000c158 	.word	0x2000c158

0801fa18 <__sflush_r>:
 801fa18:	898a      	ldrh	r2, [r1, #12]
 801fa1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa1e:	4605      	mov	r5, r0
 801fa20:	0710      	lsls	r0, r2, #28
 801fa22:	460c      	mov	r4, r1
 801fa24:	d458      	bmi.n	801fad8 <__sflush_r+0xc0>
 801fa26:	684b      	ldr	r3, [r1, #4]
 801fa28:	2b00      	cmp	r3, #0
 801fa2a:	dc05      	bgt.n	801fa38 <__sflush_r+0x20>
 801fa2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	dc02      	bgt.n	801fa38 <__sflush_r+0x20>
 801fa32:	2000      	movs	r0, #0
 801fa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fa3a:	2e00      	cmp	r6, #0
 801fa3c:	d0f9      	beq.n	801fa32 <__sflush_r+0x1a>
 801fa3e:	2300      	movs	r3, #0
 801fa40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fa44:	682f      	ldr	r7, [r5, #0]
 801fa46:	602b      	str	r3, [r5, #0]
 801fa48:	d032      	beq.n	801fab0 <__sflush_r+0x98>
 801fa4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fa4c:	89a3      	ldrh	r3, [r4, #12]
 801fa4e:	075a      	lsls	r2, r3, #29
 801fa50:	d505      	bpl.n	801fa5e <__sflush_r+0x46>
 801fa52:	6863      	ldr	r3, [r4, #4]
 801fa54:	1ac0      	subs	r0, r0, r3
 801fa56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fa58:	b10b      	cbz	r3, 801fa5e <__sflush_r+0x46>
 801fa5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fa5c:	1ac0      	subs	r0, r0, r3
 801fa5e:	2300      	movs	r3, #0
 801fa60:	4602      	mov	r2, r0
 801fa62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fa64:	6a21      	ldr	r1, [r4, #32]
 801fa66:	4628      	mov	r0, r5
 801fa68:	47b0      	blx	r6
 801fa6a:	1c43      	adds	r3, r0, #1
 801fa6c:	89a3      	ldrh	r3, [r4, #12]
 801fa6e:	d106      	bne.n	801fa7e <__sflush_r+0x66>
 801fa70:	6829      	ldr	r1, [r5, #0]
 801fa72:	291d      	cmp	r1, #29
 801fa74:	d82c      	bhi.n	801fad0 <__sflush_r+0xb8>
 801fa76:	4a2a      	ldr	r2, [pc, #168]	; (801fb20 <__sflush_r+0x108>)
 801fa78:	40ca      	lsrs	r2, r1
 801fa7a:	07d6      	lsls	r6, r2, #31
 801fa7c:	d528      	bpl.n	801fad0 <__sflush_r+0xb8>
 801fa7e:	2200      	movs	r2, #0
 801fa80:	6062      	str	r2, [r4, #4]
 801fa82:	04d9      	lsls	r1, r3, #19
 801fa84:	6922      	ldr	r2, [r4, #16]
 801fa86:	6022      	str	r2, [r4, #0]
 801fa88:	d504      	bpl.n	801fa94 <__sflush_r+0x7c>
 801fa8a:	1c42      	adds	r2, r0, #1
 801fa8c:	d101      	bne.n	801fa92 <__sflush_r+0x7a>
 801fa8e:	682b      	ldr	r3, [r5, #0]
 801fa90:	b903      	cbnz	r3, 801fa94 <__sflush_r+0x7c>
 801fa92:	6560      	str	r0, [r4, #84]	; 0x54
 801fa94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fa96:	602f      	str	r7, [r5, #0]
 801fa98:	2900      	cmp	r1, #0
 801fa9a:	d0ca      	beq.n	801fa32 <__sflush_r+0x1a>
 801fa9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801faa0:	4299      	cmp	r1, r3
 801faa2:	d002      	beq.n	801faaa <__sflush_r+0x92>
 801faa4:	4628      	mov	r0, r5
 801faa6:	f7ff fc9b 	bl	801f3e0 <_free_r>
 801faaa:	2000      	movs	r0, #0
 801faac:	6360      	str	r0, [r4, #52]	; 0x34
 801faae:	e7c1      	b.n	801fa34 <__sflush_r+0x1c>
 801fab0:	6a21      	ldr	r1, [r4, #32]
 801fab2:	2301      	movs	r3, #1
 801fab4:	4628      	mov	r0, r5
 801fab6:	47b0      	blx	r6
 801fab8:	1c41      	adds	r1, r0, #1
 801faba:	d1c7      	bne.n	801fa4c <__sflush_r+0x34>
 801fabc:	682b      	ldr	r3, [r5, #0]
 801fabe:	2b00      	cmp	r3, #0
 801fac0:	d0c4      	beq.n	801fa4c <__sflush_r+0x34>
 801fac2:	2b1d      	cmp	r3, #29
 801fac4:	d001      	beq.n	801faca <__sflush_r+0xb2>
 801fac6:	2b16      	cmp	r3, #22
 801fac8:	d101      	bne.n	801face <__sflush_r+0xb6>
 801faca:	602f      	str	r7, [r5, #0]
 801facc:	e7b1      	b.n	801fa32 <__sflush_r+0x1a>
 801face:	89a3      	ldrh	r3, [r4, #12]
 801fad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fad4:	81a3      	strh	r3, [r4, #12]
 801fad6:	e7ad      	b.n	801fa34 <__sflush_r+0x1c>
 801fad8:	690f      	ldr	r7, [r1, #16]
 801fada:	2f00      	cmp	r7, #0
 801fadc:	d0a9      	beq.n	801fa32 <__sflush_r+0x1a>
 801fade:	0793      	lsls	r3, r2, #30
 801fae0:	680e      	ldr	r6, [r1, #0]
 801fae2:	bf08      	it	eq
 801fae4:	694b      	ldreq	r3, [r1, #20]
 801fae6:	600f      	str	r7, [r1, #0]
 801fae8:	bf18      	it	ne
 801faea:	2300      	movne	r3, #0
 801faec:	eba6 0807 	sub.w	r8, r6, r7
 801faf0:	608b      	str	r3, [r1, #8]
 801faf2:	f1b8 0f00 	cmp.w	r8, #0
 801faf6:	dd9c      	ble.n	801fa32 <__sflush_r+0x1a>
 801faf8:	6a21      	ldr	r1, [r4, #32]
 801fafa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fafc:	4643      	mov	r3, r8
 801fafe:	463a      	mov	r2, r7
 801fb00:	4628      	mov	r0, r5
 801fb02:	47b0      	blx	r6
 801fb04:	2800      	cmp	r0, #0
 801fb06:	dc06      	bgt.n	801fb16 <__sflush_r+0xfe>
 801fb08:	89a3      	ldrh	r3, [r4, #12]
 801fb0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fb0e:	81a3      	strh	r3, [r4, #12]
 801fb10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fb14:	e78e      	b.n	801fa34 <__sflush_r+0x1c>
 801fb16:	4407      	add	r7, r0
 801fb18:	eba8 0800 	sub.w	r8, r8, r0
 801fb1c:	e7e9      	b.n	801faf2 <__sflush_r+0xda>
 801fb1e:	bf00      	nop
 801fb20:	20400001 	.word	0x20400001

0801fb24 <_fflush_r>:
 801fb24:	b538      	push	{r3, r4, r5, lr}
 801fb26:	690b      	ldr	r3, [r1, #16]
 801fb28:	4605      	mov	r5, r0
 801fb2a:	460c      	mov	r4, r1
 801fb2c:	b913      	cbnz	r3, 801fb34 <_fflush_r+0x10>
 801fb2e:	2500      	movs	r5, #0
 801fb30:	4628      	mov	r0, r5
 801fb32:	bd38      	pop	{r3, r4, r5, pc}
 801fb34:	b118      	cbz	r0, 801fb3e <_fflush_r+0x1a>
 801fb36:	6983      	ldr	r3, [r0, #24]
 801fb38:	b90b      	cbnz	r3, 801fb3e <_fflush_r+0x1a>
 801fb3a:	f7ff fb3b 	bl	801f1b4 <__sinit>
 801fb3e:	4b14      	ldr	r3, [pc, #80]	; (801fb90 <_fflush_r+0x6c>)
 801fb40:	429c      	cmp	r4, r3
 801fb42:	d11b      	bne.n	801fb7c <_fflush_r+0x58>
 801fb44:	686c      	ldr	r4, [r5, #4]
 801fb46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	d0ef      	beq.n	801fb2e <_fflush_r+0xa>
 801fb4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801fb50:	07d0      	lsls	r0, r2, #31
 801fb52:	d404      	bmi.n	801fb5e <_fflush_r+0x3a>
 801fb54:	0599      	lsls	r1, r3, #22
 801fb56:	d402      	bmi.n	801fb5e <_fflush_r+0x3a>
 801fb58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb5a:	f7ff fbee 	bl	801f33a <__retarget_lock_acquire_recursive>
 801fb5e:	4628      	mov	r0, r5
 801fb60:	4621      	mov	r1, r4
 801fb62:	f7ff ff59 	bl	801fa18 <__sflush_r>
 801fb66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fb68:	07da      	lsls	r2, r3, #31
 801fb6a:	4605      	mov	r5, r0
 801fb6c:	d4e0      	bmi.n	801fb30 <_fflush_r+0xc>
 801fb6e:	89a3      	ldrh	r3, [r4, #12]
 801fb70:	059b      	lsls	r3, r3, #22
 801fb72:	d4dd      	bmi.n	801fb30 <_fflush_r+0xc>
 801fb74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb76:	f7ff fbe2 	bl	801f33e <__retarget_lock_release_recursive>
 801fb7a:	e7d9      	b.n	801fb30 <_fflush_r+0xc>
 801fb7c:	4b05      	ldr	r3, [pc, #20]	; (801fb94 <_fflush_r+0x70>)
 801fb7e:	429c      	cmp	r4, r3
 801fb80:	d101      	bne.n	801fb86 <_fflush_r+0x62>
 801fb82:	68ac      	ldr	r4, [r5, #8]
 801fb84:	e7df      	b.n	801fb46 <_fflush_r+0x22>
 801fb86:	4b04      	ldr	r3, [pc, #16]	; (801fb98 <_fflush_r+0x74>)
 801fb88:	429c      	cmp	r4, r3
 801fb8a:	bf08      	it	eq
 801fb8c:	68ec      	ldreq	r4, [r5, #12]
 801fb8e:	e7da      	b.n	801fb46 <_fflush_r+0x22>
 801fb90:	0802411c 	.word	0x0802411c
 801fb94:	0802413c 	.word	0x0802413c
 801fb98:	080240fc 	.word	0x080240fc

0801fb9c <fiprintf>:
 801fb9c:	b40e      	push	{r1, r2, r3}
 801fb9e:	b503      	push	{r0, r1, lr}
 801fba0:	4601      	mov	r1, r0
 801fba2:	ab03      	add	r3, sp, #12
 801fba4:	4805      	ldr	r0, [pc, #20]	; (801fbbc <fiprintf+0x20>)
 801fba6:	f853 2b04 	ldr.w	r2, [r3], #4
 801fbaa:	6800      	ldr	r0, [r0, #0]
 801fbac:	9301      	str	r3, [sp, #4]
 801fbae:	f000 f99f 	bl	801fef0 <_vfiprintf_r>
 801fbb2:	b002      	add	sp, #8
 801fbb4:	f85d eb04 	ldr.w	lr, [sp], #4
 801fbb8:	b003      	add	sp, #12
 801fbba:	4770      	bx	lr
 801fbbc:	20000034 	.word	0x20000034

0801fbc0 <_lseek_r>:
 801fbc0:	b538      	push	{r3, r4, r5, lr}
 801fbc2:	4d07      	ldr	r5, [pc, #28]	; (801fbe0 <_lseek_r+0x20>)
 801fbc4:	4604      	mov	r4, r0
 801fbc6:	4608      	mov	r0, r1
 801fbc8:	4611      	mov	r1, r2
 801fbca:	2200      	movs	r2, #0
 801fbcc:	602a      	str	r2, [r5, #0]
 801fbce:	461a      	mov	r2, r3
 801fbd0:	f7e7 fae4 	bl	800719c <_lseek>
 801fbd4:	1c43      	adds	r3, r0, #1
 801fbd6:	d102      	bne.n	801fbde <_lseek_r+0x1e>
 801fbd8:	682b      	ldr	r3, [r5, #0]
 801fbda:	b103      	cbz	r3, 801fbde <_lseek_r+0x1e>
 801fbdc:	6023      	str	r3, [r4, #0]
 801fbde:	bd38      	pop	{r3, r4, r5, pc}
 801fbe0:	2000c158 	.word	0x2000c158

0801fbe4 <__ssputs_r>:
 801fbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fbe8:	688e      	ldr	r6, [r1, #8]
 801fbea:	429e      	cmp	r6, r3
 801fbec:	4682      	mov	sl, r0
 801fbee:	460c      	mov	r4, r1
 801fbf0:	4690      	mov	r8, r2
 801fbf2:	461f      	mov	r7, r3
 801fbf4:	d838      	bhi.n	801fc68 <__ssputs_r+0x84>
 801fbf6:	898a      	ldrh	r2, [r1, #12]
 801fbf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801fbfc:	d032      	beq.n	801fc64 <__ssputs_r+0x80>
 801fbfe:	6825      	ldr	r5, [r4, #0]
 801fc00:	6909      	ldr	r1, [r1, #16]
 801fc02:	eba5 0901 	sub.w	r9, r5, r1
 801fc06:	6965      	ldr	r5, [r4, #20]
 801fc08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fc0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801fc10:	3301      	adds	r3, #1
 801fc12:	444b      	add	r3, r9
 801fc14:	106d      	asrs	r5, r5, #1
 801fc16:	429d      	cmp	r5, r3
 801fc18:	bf38      	it	cc
 801fc1a:	461d      	movcc	r5, r3
 801fc1c:	0553      	lsls	r3, r2, #21
 801fc1e:	d531      	bpl.n	801fc84 <__ssputs_r+0xa0>
 801fc20:	4629      	mov	r1, r5
 801fc22:	f7ff fc49 	bl	801f4b8 <_malloc_r>
 801fc26:	4606      	mov	r6, r0
 801fc28:	b950      	cbnz	r0, 801fc40 <__ssputs_r+0x5c>
 801fc2a:	230c      	movs	r3, #12
 801fc2c:	f8ca 3000 	str.w	r3, [sl]
 801fc30:	89a3      	ldrh	r3, [r4, #12]
 801fc32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fc36:	81a3      	strh	r3, [r4, #12]
 801fc38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fc3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fc40:	6921      	ldr	r1, [r4, #16]
 801fc42:	464a      	mov	r2, r9
 801fc44:	f7ff fb9c 	bl	801f380 <memcpy>
 801fc48:	89a3      	ldrh	r3, [r4, #12]
 801fc4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fc4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fc52:	81a3      	strh	r3, [r4, #12]
 801fc54:	6126      	str	r6, [r4, #16]
 801fc56:	6165      	str	r5, [r4, #20]
 801fc58:	444e      	add	r6, r9
 801fc5a:	eba5 0509 	sub.w	r5, r5, r9
 801fc5e:	6026      	str	r6, [r4, #0]
 801fc60:	60a5      	str	r5, [r4, #8]
 801fc62:	463e      	mov	r6, r7
 801fc64:	42be      	cmp	r6, r7
 801fc66:	d900      	bls.n	801fc6a <__ssputs_r+0x86>
 801fc68:	463e      	mov	r6, r7
 801fc6a:	6820      	ldr	r0, [r4, #0]
 801fc6c:	4632      	mov	r2, r6
 801fc6e:	4641      	mov	r1, r8
 801fc70:	f7ff fb94 	bl	801f39c <memmove>
 801fc74:	68a3      	ldr	r3, [r4, #8]
 801fc76:	1b9b      	subs	r3, r3, r6
 801fc78:	60a3      	str	r3, [r4, #8]
 801fc7a:	6823      	ldr	r3, [r4, #0]
 801fc7c:	4433      	add	r3, r6
 801fc7e:	6023      	str	r3, [r4, #0]
 801fc80:	2000      	movs	r0, #0
 801fc82:	e7db      	b.n	801fc3c <__ssputs_r+0x58>
 801fc84:	462a      	mov	r2, r5
 801fc86:	f000 fd2f 	bl	80206e8 <_realloc_r>
 801fc8a:	4606      	mov	r6, r0
 801fc8c:	2800      	cmp	r0, #0
 801fc8e:	d1e1      	bne.n	801fc54 <__ssputs_r+0x70>
 801fc90:	6921      	ldr	r1, [r4, #16]
 801fc92:	4650      	mov	r0, sl
 801fc94:	f7ff fba4 	bl	801f3e0 <_free_r>
 801fc98:	e7c7      	b.n	801fc2a <__ssputs_r+0x46>
	...

0801fc9c <_svfiprintf_r>:
 801fc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fca0:	4698      	mov	r8, r3
 801fca2:	898b      	ldrh	r3, [r1, #12]
 801fca4:	061b      	lsls	r3, r3, #24
 801fca6:	b09d      	sub	sp, #116	; 0x74
 801fca8:	4607      	mov	r7, r0
 801fcaa:	460d      	mov	r5, r1
 801fcac:	4614      	mov	r4, r2
 801fcae:	d50e      	bpl.n	801fcce <_svfiprintf_r+0x32>
 801fcb0:	690b      	ldr	r3, [r1, #16]
 801fcb2:	b963      	cbnz	r3, 801fcce <_svfiprintf_r+0x32>
 801fcb4:	2140      	movs	r1, #64	; 0x40
 801fcb6:	f7ff fbff 	bl	801f4b8 <_malloc_r>
 801fcba:	6028      	str	r0, [r5, #0]
 801fcbc:	6128      	str	r0, [r5, #16]
 801fcbe:	b920      	cbnz	r0, 801fcca <_svfiprintf_r+0x2e>
 801fcc0:	230c      	movs	r3, #12
 801fcc2:	603b      	str	r3, [r7, #0]
 801fcc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fcc8:	e0d1      	b.n	801fe6e <_svfiprintf_r+0x1d2>
 801fcca:	2340      	movs	r3, #64	; 0x40
 801fccc:	616b      	str	r3, [r5, #20]
 801fcce:	2300      	movs	r3, #0
 801fcd0:	9309      	str	r3, [sp, #36]	; 0x24
 801fcd2:	2320      	movs	r3, #32
 801fcd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fcd8:	f8cd 800c 	str.w	r8, [sp, #12]
 801fcdc:	2330      	movs	r3, #48	; 0x30
 801fcde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801fe88 <_svfiprintf_r+0x1ec>
 801fce2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fce6:	f04f 0901 	mov.w	r9, #1
 801fcea:	4623      	mov	r3, r4
 801fcec:	469a      	mov	sl, r3
 801fcee:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fcf2:	b10a      	cbz	r2, 801fcf8 <_svfiprintf_r+0x5c>
 801fcf4:	2a25      	cmp	r2, #37	; 0x25
 801fcf6:	d1f9      	bne.n	801fcec <_svfiprintf_r+0x50>
 801fcf8:	ebba 0b04 	subs.w	fp, sl, r4
 801fcfc:	d00b      	beq.n	801fd16 <_svfiprintf_r+0x7a>
 801fcfe:	465b      	mov	r3, fp
 801fd00:	4622      	mov	r2, r4
 801fd02:	4629      	mov	r1, r5
 801fd04:	4638      	mov	r0, r7
 801fd06:	f7ff ff6d 	bl	801fbe4 <__ssputs_r>
 801fd0a:	3001      	adds	r0, #1
 801fd0c:	f000 80aa 	beq.w	801fe64 <_svfiprintf_r+0x1c8>
 801fd10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fd12:	445a      	add	r2, fp
 801fd14:	9209      	str	r2, [sp, #36]	; 0x24
 801fd16:	f89a 3000 	ldrb.w	r3, [sl]
 801fd1a:	2b00      	cmp	r3, #0
 801fd1c:	f000 80a2 	beq.w	801fe64 <_svfiprintf_r+0x1c8>
 801fd20:	2300      	movs	r3, #0
 801fd22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fd26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fd2a:	f10a 0a01 	add.w	sl, sl, #1
 801fd2e:	9304      	str	r3, [sp, #16]
 801fd30:	9307      	str	r3, [sp, #28]
 801fd32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fd36:	931a      	str	r3, [sp, #104]	; 0x68
 801fd38:	4654      	mov	r4, sl
 801fd3a:	2205      	movs	r2, #5
 801fd3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd40:	4851      	ldr	r0, [pc, #324]	; (801fe88 <_svfiprintf_r+0x1ec>)
 801fd42:	f7e0 fa6d 	bl	8000220 <memchr>
 801fd46:	9a04      	ldr	r2, [sp, #16]
 801fd48:	b9d8      	cbnz	r0, 801fd82 <_svfiprintf_r+0xe6>
 801fd4a:	06d0      	lsls	r0, r2, #27
 801fd4c:	bf44      	itt	mi
 801fd4e:	2320      	movmi	r3, #32
 801fd50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fd54:	0711      	lsls	r1, r2, #28
 801fd56:	bf44      	itt	mi
 801fd58:	232b      	movmi	r3, #43	; 0x2b
 801fd5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fd5e:	f89a 3000 	ldrb.w	r3, [sl]
 801fd62:	2b2a      	cmp	r3, #42	; 0x2a
 801fd64:	d015      	beq.n	801fd92 <_svfiprintf_r+0xf6>
 801fd66:	9a07      	ldr	r2, [sp, #28]
 801fd68:	4654      	mov	r4, sl
 801fd6a:	2000      	movs	r0, #0
 801fd6c:	f04f 0c0a 	mov.w	ip, #10
 801fd70:	4621      	mov	r1, r4
 801fd72:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fd76:	3b30      	subs	r3, #48	; 0x30
 801fd78:	2b09      	cmp	r3, #9
 801fd7a:	d94e      	bls.n	801fe1a <_svfiprintf_r+0x17e>
 801fd7c:	b1b0      	cbz	r0, 801fdac <_svfiprintf_r+0x110>
 801fd7e:	9207      	str	r2, [sp, #28]
 801fd80:	e014      	b.n	801fdac <_svfiprintf_r+0x110>
 801fd82:	eba0 0308 	sub.w	r3, r0, r8
 801fd86:	fa09 f303 	lsl.w	r3, r9, r3
 801fd8a:	4313      	orrs	r3, r2
 801fd8c:	9304      	str	r3, [sp, #16]
 801fd8e:	46a2      	mov	sl, r4
 801fd90:	e7d2      	b.n	801fd38 <_svfiprintf_r+0x9c>
 801fd92:	9b03      	ldr	r3, [sp, #12]
 801fd94:	1d19      	adds	r1, r3, #4
 801fd96:	681b      	ldr	r3, [r3, #0]
 801fd98:	9103      	str	r1, [sp, #12]
 801fd9a:	2b00      	cmp	r3, #0
 801fd9c:	bfbb      	ittet	lt
 801fd9e:	425b      	neglt	r3, r3
 801fda0:	f042 0202 	orrlt.w	r2, r2, #2
 801fda4:	9307      	strge	r3, [sp, #28]
 801fda6:	9307      	strlt	r3, [sp, #28]
 801fda8:	bfb8      	it	lt
 801fdaa:	9204      	strlt	r2, [sp, #16]
 801fdac:	7823      	ldrb	r3, [r4, #0]
 801fdae:	2b2e      	cmp	r3, #46	; 0x2e
 801fdb0:	d10c      	bne.n	801fdcc <_svfiprintf_r+0x130>
 801fdb2:	7863      	ldrb	r3, [r4, #1]
 801fdb4:	2b2a      	cmp	r3, #42	; 0x2a
 801fdb6:	d135      	bne.n	801fe24 <_svfiprintf_r+0x188>
 801fdb8:	9b03      	ldr	r3, [sp, #12]
 801fdba:	1d1a      	adds	r2, r3, #4
 801fdbc:	681b      	ldr	r3, [r3, #0]
 801fdbe:	9203      	str	r2, [sp, #12]
 801fdc0:	2b00      	cmp	r3, #0
 801fdc2:	bfb8      	it	lt
 801fdc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801fdc8:	3402      	adds	r4, #2
 801fdca:	9305      	str	r3, [sp, #20]
 801fdcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801fe98 <_svfiprintf_r+0x1fc>
 801fdd0:	7821      	ldrb	r1, [r4, #0]
 801fdd2:	2203      	movs	r2, #3
 801fdd4:	4650      	mov	r0, sl
 801fdd6:	f7e0 fa23 	bl	8000220 <memchr>
 801fdda:	b140      	cbz	r0, 801fdee <_svfiprintf_r+0x152>
 801fddc:	2340      	movs	r3, #64	; 0x40
 801fdde:	eba0 000a 	sub.w	r0, r0, sl
 801fde2:	fa03 f000 	lsl.w	r0, r3, r0
 801fde6:	9b04      	ldr	r3, [sp, #16]
 801fde8:	4303      	orrs	r3, r0
 801fdea:	3401      	adds	r4, #1
 801fdec:	9304      	str	r3, [sp, #16]
 801fdee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fdf2:	4826      	ldr	r0, [pc, #152]	; (801fe8c <_svfiprintf_r+0x1f0>)
 801fdf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fdf8:	2206      	movs	r2, #6
 801fdfa:	f7e0 fa11 	bl	8000220 <memchr>
 801fdfe:	2800      	cmp	r0, #0
 801fe00:	d038      	beq.n	801fe74 <_svfiprintf_r+0x1d8>
 801fe02:	4b23      	ldr	r3, [pc, #140]	; (801fe90 <_svfiprintf_r+0x1f4>)
 801fe04:	bb1b      	cbnz	r3, 801fe4e <_svfiprintf_r+0x1b2>
 801fe06:	9b03      	ldr	r3, [sp, #12]
 801fe08:	3307      	adds	r3, #7
 801fe0a:	f023 0307 	bic.w	r3, r3, #7
 801fe0e:	3308      	adds	r3, #8
 801fe10:	9303      	str	r3, [sp, #12]
 801fe12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe14:	4433      	add	r3, r6
 801fe16:	9309      	str	r3, [sp, #36]	; 0x24
 801fe18:	e767      	b.n	801fcea <_svfiprintf_r+0x4e>
 801fe1a:	fb0c 3202 	mla	r2, ip, r2, r3
 801fe1e:	460c      	mov	r4, r1
 801fe20:	2001      	movs	r0, #1
 801fe22:	e7a5      	b.n	801fd70 <_svfiprintf_r+0xd4>
 801fe24:	2300      	movs	r3, #0
 801fe26:	3401      	adds	r4, #1
 801fe28:	9305      	str	r3, [sp, #20]
 801fe2a:	4619      	mov	r1, r3
 801fe2c:	f04f 0c0a 	mov.w	ip, #10
 801fe30:	4620      	mov	r0, r4
 801fe32:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fe36:	3a30      	subs	r2, #48	; 0x30
 801fe38:	2a09      	cmp	r2, #9
 801fe3a:	d903      	bls.n	801fe44 <_svfiprintf_r+0x1a8>
 801fe3c:	2b00      	cmp	r3, #0
 801fe3e:	d0c5      	beq.n	801fdcc <_svfiprintf_r+0x130>
 801fe40:	9105      	str	r1, [sp, #20]
 801fe42:	e7c3      	b.n	801fdcc <_svfiprintf_r+0x130>
 801fe44:	fb0c 2101 	mla	r1, ip, r1, r2
 801fe48:	4604      	mov	r4, r0
 801fe4a:	2301      	movs	r3, #1
 801fe4c:	e7f0      	b.n	801fe30 <_svfiprintf_r+0x194>
 801fe4e:	ab03      	add	r3, sp, #12
 801fe50:	9300      	str	r3, [sp, #0]
 801fe52:	462a      	mov	r2, r5
 801fe54:	4b0f      	ldr	r3, [pc, #60]	; (801fe94 <_svfiprintf_r+0x1f8>)
 801fe56:	a904      	add	r1, sp, #16
 801fe58:	4638      	mov	r0, r7
 801fe5a:	f3af 8000 	nop.w
 801fe5e:	1c42      	adds	r2, r0, #1
 801fe60:	4606      	mov	r6, r0
 801fe62:	d1d6      	bne.n	801fe12 <_svfiprintf_r+0x176>
 801fe64:	89ab      	ldrh	r3, [r5, #12]
 801fe66:	065b      	lsls	r3, r3, #25
 801fe68:	f53f af2c 	bmi.w	801fcc4 <_svfiprintf_r+0x28>
 801fe6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fe6e:	b01d      	add	sp, #116	; 0x74
 801fe70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe74:	ab03      	add	r3, sp, #12
 801fe76:	9300      	str	r3, [sp, #0]
 801fe78:	462a      	mov	r2, r5
 801fe7a:	4b06      	ldr	r3, [pc, #24]	; (801fe94 <_svfiprintf_r+0x1f8>)
 801fe7c:	a904      	add	r1, sp, #16
 801fe7e:	4638      	mov	r0, r7
 801fe80:	f000 f9d4 	bl	802022c <_printf_i>
 801fe84:	e7eb      	b.n	801fe5e <_svfiprintf_r+0x1c2>
 801fe86:	bf00      	nop
 801fe88:	0802420e 	.word	0x0802420e
 801fe8c:	08024218 	.word	0x08024218
 801fe90:	00000000 	.word	0x00000000
 801fe94:	0801fbe5 	.word	0x0801fbe5
 801fe98:	08024214 	.word	0x08024214

0801fe9c <__sfputc_r>:
 801fe9c:	6893      	ldr	r3, [r2, #8]
 801fe9e:	3b01      	subs	r3, #1
 801fea0:	2b00      	cmp	r3, #0
 801fea2:	b410      	push	{r4}
 801fea4:	6093      	str	r3, [r2, #8]
 801fea6:	da08      	bge.n	801feba <__sfputc_r+0x1e>
 801fea8:	6994      	ldr	r4, [r2, #24]
 801feaa:	42a3      	cmp	r3, r4
 801feac:	db01      	blt.n	801feb2 <__sfputc_r+0x16>
 801feae:	290a      	cmp	r1, #10
 801feb0:	d103      	bne.n	801feba <__sfputc_r+0x1e>
 801feb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801feb6:	f000 baf1 	b.w	802049c <__swbuf_r>
 801feba:	6813      	ldr	r3, [r2, #0]
 801febc:	1c58      	adds	r0, r3, #1
 801febe:	6010      	str	r0, [r2, #0]
 801fec0:	7019      	strb	r1, [r3, #0]
 801fec2:	4608      	mov	r0, r1
 801fec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fec8:	4770      	bx	lr

0801feca <__sfputs_r>:
 801feca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fecc:	4606      	mov	r6, r0
 801fece:	460f      	mov	r7, r1
 801fed0:	4614      	mov	r4, r2
 801fed2:	18d5      	adds	r5, r2, r3
 801fed4:	42ac      	cmp	r4, r5
 801fed6:	d101      	bne.n	801fedc <__sfputs_r+0x12>
 801fed8:	2000      	movs	r0, #0
 801feda:	e007      	b.n	801feec <__sfputs_r+0x22>
 801fedc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fee0:	463a      	mov	r2, r7
 801fee2:	4630      	mov	r0, r6
 801fee4:	f7ff ffda 	bl	801fe9c <__sfputc_r>
 801fee8:	1c43      	adds	r3, r0, #1
 801feea:	d1f3      	bne.n	801fed4 <__sfputs_r+0xa>
 801feec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fef0 <_vfiprintf_r>:
 801fef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fef4:	460d      	mov	r5, r1
 801fef6:	b09d      	sub	sp, #116	; 0x74
 801fef8:	4614      	mov	r4, r2
 801fefa:	4698      	mov	r8, r3
 801fefc:	4606      	mov	r6, r0
 801fefe:	b118      	cbz	r0, 801ff08 <_vfiprintf_r+0x18>
 801ff00:	6983      	ldr	r3, [r0, #24]
 801ff02:	b90b      	cbnz	r3, 801ff08 <_vfiprintf_r+0x18>
 801ff04:	f7ff f956 	bl	801f1b4 <__sinit>
 801ff08:	4b89      	ldr	r3, [pc, #548]	; (8020130 <_vfiprintf_r+0x240>)
 801ff0a:	429d      	cmp	r5, r3
 801ff0c:	d11b      	bne.n	801ff46 <_vfiprintf_r+0x56>
 801ff0e:	6875      	ldr	r5, [r6, #4]
 801ff10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ff12:	07d9      	lsls	r1, r3, #31
 801ff14:	d405      	bmi.n	801ff22 <_vfiprintf_r+0x32>
 801ff16:	89ab      	ldrh	r3, [r5, #12]
 801ff18:	059a      	lsls	r2, r3, #22
 801ff1a:	d402      	bmi.n	801ff22 <_vfiprintf_r+0x32>
 801ff1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ff1e:	f7ff fa0c 	bl	801f33a <__retarget_lock_acquire_recursive>
 801ff22:	89ab      	ldrh	r3, [r5, #12]
 801ff24:	071b      	lsls	r3, r3, #28
 801ff26:	d501      	bpl.n	801ff2c <_vfiprintf_r+0x3c>
 801ff28:	692b      	ldr	r3, [r5, #16]
 801ff2a:	b9eb      	cbnz	r3, 801ff68 <_vfiprintf_r+0x78>
 801ff2c:	4629      	mov	r1, r5
 801ff2e:	4630      	mov	r0, r6
 801ff30:	f000 fb06 	bl	8020540 <__swsetup_r>
 801ff34:	b1c0      	cbz	r0, 801ff68 <_vfiprintf_r+0x78>
 801ff36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ff38:	07dc      	lsls	r4, r3, #31
 801ff3a:	d50e      	bpl.n	801ff5a <_vfiprintf_r+0x6a>
 801ff3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ff40:	b01d      	add	sp, #116	; 0x74
 801ff42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff46:	4b7b      	ldr	r3, [pc, #492]	; (8020134 <_vfiprintf_r+0x244>)
 801ff48:	429d      	cmp	r5, r3
 801ff4a:	d101      	bne.n	801ff50 <_vfiprintf_r+0x60>
 801ff4c:	68b5      	ldr	r5, [r6, #8]
 801ff4e:	e7df      	b.n	801ff10 <_vfiprintf_r+0x20>
 801ff50:	4b79      	ldr	r3, [pc, #484]	; (8020138 <_vfiprintf_r+0x248>)
 801ff52:	429d      	cmp	r5, r3
 801ff54:	bf08      	it	eq
 801ff56:	68f5      	ldreq	r5, [r6, #12]
 801ff58:	e7da      	b.n	801ff10 <_vfiprintf_r+0x20>
 801ff5a:	89ab      	ldrh	r3, [r5, #12]
 801ff5c:	0598      	lsls	r0, r3, #22
 801ff5e:	d4ed      	bmi.n	801ff3c <_vfiprintf_r+0x4c>
 801ff60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ff62:	f7ff f9ec 	bl	801f33e <__retarget_lock_release_recursive>
 801ff66:	e7e9      	b.n	801ff3c <_vfiprintf_r+0x4c>
 801ff68:	2300      	movs	r3, #0
 801ff6a:	9309      	str	r3, [sp, #36]	; 0x24
 801ff6c:	2320      	movs	r3, #32
 801ff6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ff72:	f8cd 800c 	str.w	r8, [sp, #12]
 801ff76:	2330      	movs	r3, #48	; 0x30
 801ff78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802013c <_vfiprintf_r+0x24c>
 801ff7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ff80:	f04f 0901 	mov.w	r9, #1
 801ff84:	4623      	mov	r3, r4
 801ff86:	469a      	mov	sl, r3
 801ff88:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ff8c:	b10a      	cbz	r2, 801ff92 <_vfiprintf_r+0xa2>
 801ff8e:	2a25      	cmp	r2, #37	; 0x25
 801ff90:	d1f9      	bne.n	801ff86 <_vfiprintf_r+0x96>
 801ff92:	ebba 0b04 	subs.w	fp, sl, r4
 801ff96:	d00b      	beq.n	801ffb0 <_vfiprintf_r+0xc0>
 801ff98:	465b      	mov	r3, fp
 801ff9a:	4622      	mov	r2, r4
 801ff9c:	4629      	mov	r1, r5
 801ff9e:	4630      	mov	r0, r6
 801ffa0:	f7ff ff93 	bl	801feca <__sfputs_r>
 801ffa4:	3001      	adds	r0, #1
 801ffa6:	f000 80aa 	beq.w	80200fe <_vfiprintf_r+0x20e>
 801ffaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ffac:	445a      	add	r2, fp
 801ffae:	9209      	str	r2, [sp, #36]	; 0x24
 801ffb0:	f89a 3000 	ldrb.w	r3, [sl]
 801ffb4:	2b00      	cmp	r3, #0
 801ffb6:	f000 80a2 	beq.w	80200fe <_vfiprintf_r+0x20e>
 801ffba:	2300      	movs	r3, #0
 801ffbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ffc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ffc4:	f10a 0a01 	add.w	sl, sl, #1
 801ffc8:	9304      	str	r3, [sp, #16]
 801ffca:	9307      	str	r3, [sp, #28]
 801ffcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ffd0:	931a      	str	r3, [sp, #104]	; 0x68
 801ffd2:	4654      	mov	r4, sl
 801ffd4:	2205      	movs	r2, #5
 801ffd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ffda:	4858      	ldr	r0, [pc, #352]	; (802013c <_vfiprintf_r+0x24c>)
 801ffdc:	f7e0 f920 	bl	8000220 <memchr>
 801ffe0:	9a04      	ldr	r2, [sp, #16]
 801ffe2:	b9d8      	cbnz	r0, 802001c <_vfiprintf_r+0x12c>
 801ffe4:	06d1      	lsls	r1, r2, #27
 801ffe6:	bf44      	itt	mi
 801ffe8:	2320      	movmi	r3, #32
 801ffea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ffee:	0713      	lsls	r3, r2, #28
 801fff0:	bf44      	itt	mi
 801fff2:	232b      	movmi	r3, #43	; 0x2b
 801fff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fff8:	f89a 3000 	ldrb.w	r3, [sl]
 801fffc:	2b2a      	cmp	r3, #42	; 0x2a
 801fffe:	d015      	beq.n	802002c <_vfiprintf_r+0x13c>
 8020000:	9a07      	ldr	r2, [sp, #28]
 8020002:	4654      	mov	r4, sl
 8020004:	2000      	movs	r0, #0
 8020006:	f04f 0c0a 	mov.w	ip, #10
 802000a:	4621      	mov	r1, r4
 802000c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020010:	3b30      	subs	r3, #48	; 0x30
 8020012:	2b09      	cmp	r3, #9
 8020014:	d94e      	bls.n	80200b4 <_vfiprintf_r+0x1c4>
 8020016:	b1b0      	cbz	r0, 8020046 <_vfiprintf_r+0x156>
 8020018:	9207      	str	r2, [sp, #28]
 802001a:	e014      	b.n	8020046 <_vfiprintf_r+0x156>
 802001c:	eba0 0308 	sub.w	r3, r0, r8
 8020020:	fa09 f303 	lsl.w	r3, r9, r3
 8020024:	4313      	orrs	r3, r2
 8020026:	9304      	str	r3, [sp, #16]
 8020028:	46a2      	mov	sl, r4
 802002a:	e7d2      	b.n	801ffd2 <_vfiprintf_r+0xe2>
 802002c:	9b03      	ldr	r3, [sp, #12]
 802002e:	1d19      	adds	r1, r3, #4
 8020030:	681b      	ldr	r3, [r3, #0]
 8020032:	9103      	str	r1, [sp, #12]
 8020034:	2b00      	cmp	r3, #0
 8020036:	bfbb      	ittet	lt
 8020038:	425b      	neglt	r3, r3
 802003a:	f042 0202 	orrlt.w	r2, r2, #2
 802003e:	9307      	strge	r3, [sp, #28]
 8020040:	9307      	strlt	r3, [sp, #28]
 8020042:	bfb8      	it	lt
 8020044:	9204      	strlt	r2, [sp, #16]
 8020046:	7823      	ldrb	r3, [r4, #0]
 8020048:	2b2e      	cmp	r3, #46	; 0x2e
 802004a:	d10c      	bne.n	8020066 <_vfiprintf_r+0x176>
 802004c:	7863      	ldrb	r3, [r4, #1]
 802004e:	2b2a      	cmp	r3, #42	; 0x2a
 8020050:	d135      	bne.n	80200be <_vfiprintf_r+0x1ce>
 8020052:	9b03      	ldr	r3, [sp, #12]
 8020054:	1d1a      	adds	r2, r3, #4
 8020056:	681b      	ldr	r3, [r3, #0]
 8020058:	9203      	str	r2, [sp, #12]
 802005a:	2b00      	cmp	r3, #0
 802005c:	bfb8      	it	lt
 802005e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8020062:	3402      	adds	r4, #2
 8020064:	9305      	str	r3, [sp, #20]
 8020066:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802014c <_vfiprintf_r+0x25c>
 802006a:	7821      	ldrb	r1, [r4, #0]
 802006c:	2203      	movs	r2, #3
 802006e:	4650      	mov	r0, sl
 8020070:	f7e0 f8d6 	bl	8000220 <memchr>
 8020074:	b140      	cbz	r0, 8020088 <_vfiprintf_r+0x198>
 8020076:	2340      	movs	r3, #64	; 0x40
 8020078:	eba0 000a 	sub.w	r0, r0, sl
 802007c:	fa03 f000 	lsl.w	r0, r3, r0
 8020080:	9b04      	ldr	r3, [sp, #16]
 8020082:	4303      	orrs	r3, r0
 8020084:	3401      	adds	r4, #1
 8020086:	9304      	str	r3, [sp, #16]
 8020088:	f814 1b01 	ldrb.w	r1, [r4], #1
 802008c:	482c      	ldr	r0, [pc, #176]	; (8020140 <_vfiprintf_r+0x250>)
 802008e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020092:	2206      	movs	r2, #6
 8020094:	f7e0 f8c4 	bl	8000220 <memchr>
 8020098:	2800      	cmp	r0, #0
 802009a:	d03f      	beq.n	802011c <_vfiprintf_r+0x22c>
 802009c:	4b29      	ldr	r3, [pc, #164]	; (8020144 <_vfiprintf_r+0x254>)
 802009e:	bb1b      	cbnz	r3, 80200e8 <_vfiprintf_r+0x1f8>
 80200a0:	9b03      	ldr	r3, [sp, #12]
 80200a2:	3307      	adds	r3, #7
 80200a4:	f023 0307 	bic.w	r3, r3, #7
 80200a8:	3308      	adds	r3, #8
 80200aa:	9303      	str	r3, [sp, #12]
 80200ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200ae:	443b      	add	r3, r7
 80200b0:	9309      	str	r3, [sp, #36]	; 0x24
 80200b2:	e767      	b.n	801ff84 <_vfiprintf_r+0x94>
 80200b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80200b8:	460c      	mov	r4, r1
 80200ba:	2001      	movs	r0, #1
 80200bc:	e7a5      	b.n	802000a <_vfiprintf_r+0x11a>
 80200be:	2300      	movs	r3, #0
 80200c0:	3401      	adds	r4, #1
 80200c2:	9305      	str	r3, [sp, #20]
 80200c4:	4619      	mov	r1, r3
 80200c6:	f04f 0c0a 	mov.w	ip, #10
 80200ca:	4620      	mov	r0, r4
 80200cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80200d0:	3a30      	subs	r2, #48	; 0x30
 80200d2:	2a09      	cmp	r2, #9
 80200d4:	d903      	bls.n	80200de <_vfiprintf_r+0x1ee>
 80200d6:	2b00      	cmp	r3, #0
 80200d8:	d0c5      	beq.n	8020066 <_vfiprintf_r+0x176>
 80200da:	9105      	str	r1, [sp, #20]
 80200dc:	e7c3      	b.n	8020066 <_vfiprintf_r+0x176>
 80200de:	fb0c 2101 	mla	r1, ip, r1, r2
 80200e2:	4604      	mov	r4, r0
 80200e4:	2301      	movs	r3, #1
 80200e6:	e7f0      	b.n	80200ca <_vfiprintf_r+0x1da>
 80200e8:	ab03      	add	r3, sp, #12
 80200ea:	9300      	str	r3, [sp, #0]
 80200ec:	462a      	mov	r2, r5
 80200ee:	4b16      	ldr	r3, [pc, #88]	; (8020148 <_vfiprintf_r+0x258>)
 80200f0:	a904      	add	r1, sp, #16
 80200f2:	4630      	mov	r0, r6
 80200f4:	f3af 8000 	nop.w
 80200f8:	4607      	mov	r7, r0
 80200fa:	1c78      	adds	r0, r7, #1
 80200fc:	d1d6      	bne.n	80200ac <_vfiprintf_r+0x1bc>
 80200fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020100:	07d9      	lsls	r1, r3, #31
 8020102:	d405      	bmi.n	8020110 <_vfiprintf_r+0x220>
 8020104:	89ab      	ldrh	r3, [r5, #12]
 8020106:	059a      	lsls	r2, r3, #22
 8020108:	d402      	bmi.n	8020110 <_vfiprintf_r+0x220>
 802010a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802010c:	f7ff f917 	bl	801f33e <__retarget_lock_release_recursive>
 8020110:	89ab      	ldrh	r3, [r5, #12]
 8020112:	065b      	lsls	r3, r3, #25
 8020114:	f53f af12 	bmi.w	801ff3c <_vfiprintf_r+0x4c>
 8020118:	9809      	ldr	r0, [sp, #36]	; 0x24
 802011a:	e711      	b.n	801ff40 <_vfiprintf_r+0x50>
 802011c:	ab03      	add	r3, sp, #12
 802011e:	9300      	str	r3, [sp, #0]
 8020120:	462a      	mov	r2, r5
 8020122:	4b09      	ldr	r3, [pc, #36]	; (8020148 <_vfiprintf_r+0x258>)
 8020124:	a904      	add	r1, sp, #16
 8020126:	4630      	mov	r0, r6
 8020128:	f000 f880 	bl	802022c <_printf_i>
 802012c:	e7e4      	b.n	80200f8 <_vfiprintf_r+0x208>
 802012e:	bf00      	nop
 8020130:	0802411c 	.word	0x0802411c
 8020134:	0802413c 	.word	0x0802413c
 8020138:	080240fc 	.word	0x080240fc
 802013c:	0802420e 	.word	0x0802420e
 8020140:	08024218 	.word	0x08024218
 8020144:	00000000 	.word	0x00000000
 8020148:	0801fecb 	.word	0x0801fecb
 802014c:	08024214 	.word	0x08024214

08020150 <_printf_common>:
 8020150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020154:	4616      	mov	r6, r2
 8020156:	4699      	mov	r9, r3
 8020158:	688a      	ldr	r2, [r1, #8]
 802015a:	690b      	ldr	r3, [r1, #16]
 802015c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020160:	4293      	cmp	r3, r2
 8020162:	bfb8      	it	lt
 8020164:	4613      	movlt	r3, r2
 8020166:	6033      	str	r3, [r6, #0]
 8020168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802016c:	4607      	mov	r7, r0
 802016e:	460c      	mov	r4, r1
 8020170:	b10a      	cbz	r2, 8020176 <_printf_common+0x26>
 8020172:	3301      	adds	r3, #1
 8020174:	6033      	str	r3, [r6, #0]
 8020176:	6823      	ldr	r3, [r4, #0]
 8020178:	0699      	lsls	r1, r3, #26
 802017a:	bf42      	ittt	mi
 802017c:	6833      	ldrmi	r3, [r6, #0]
 802017e:	3302      	addmi	r3, #2
 8020180:	6033      	strmi	r3, [r6, #0]
 8020182:	6825      	ldr	r5, [r4, #0]
 8020184:	f015 0506 	ands.w	r5, r5, #6
 8020188:	d106      	bne.n	8020198 <_printf_common+0x48>
 802018a:	f104 0a19 	add.w	sl, r4, #25
 802018e:	68e3      	ldr	r3, [r4, #12]
 8020190:	6832      	ldr	r2, [r6, #0]
 8020192:	1a9b      	subs	r3, r3, r2
 8020194:	42ab      	cmp	r3, r5
 8020196:	dc26      	bgt.n	80201e6 <_printf_common+0x96>
 8020198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802019c:	1e13      	subs	r3, r2, #0
 802019e:	6822      	ldr	r2, [r4, #0]
 80201a0:	bf18      	it	ne
 80201a2:	2301      	movne	r3, #1
 80201a4:	0692      	lsls	r2, r2, #26
 80201a6:	d42b      	bmi.n	8020200 <_printf_common+0xb0>
 80201a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80201ac:	4649      	mov	r1, r9
 80201ae:	4638      	mov	r0, r7
 80201b0:	47c0      	blx	r8
 80201b2:	3001      	adds	r0, #1
 80201b4:	d01e      	beq.n	80201f4 <_printf_common+0xa4>
 80201b6:	6823      	ldr	r3, [r4, #0]
 80201b8:	68e5      	ldr	r5, [r4, #12]
 80201ba:	6832      	ldr	r2, [r6, #0]
 80201bc:	f003 0306 	and.w	r3, r3, #6
 80201c0:	2b04      	cmp	r3, #4
 80201c2:	bf08      	it	eq
 80201c4:	1aad      	subeq	r5, r5, r2
 80201c6:	68a3      	ldr	r3, [r4, #8]
 80201c8:	6922      	ldr	r2, [r4, #16]
 80201ca:	bf0c      	ite	eq
 80201cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80201d0:	2500      	movne	r5, #0
 80201d2:	4293      	cmp	r3, r2
 80201d4:	bfc4      	itt	gt
 80201d6:	1a9b      	subgt	r3, r3, r2
 80201d8:	18ed      	addgt	r5, r5, r3
 80201da:	2600      	movs	r6, #0
 80201dc:	341a      	adds	r4, #26
 80201de:	42b5      	cmp	r5, r6
 80201e0:	d11a      	bne.n	8020218 <_printf_common+0xc8>
 80201e2:	2000      	movs	r0, #0
 80201e4:	e008      	b.n	80201f8 <_printf_common+0xa8>
 80201e6:	2301      	movs	r3, #1
 80201e8:	4652      	mov	r2, sl
 80201ea:	4649      	mov	r1, r9
 80201ec:	4638      	mov	r0, r7
 80201ee:	47c0      	blx	r8
 80201f0:	3001      	adds	r0, #1
 80201f2:	d103      	bne.n	80201fc <_printf_common+0xac>
 80201f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80201f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80201fc:	3501      	adds	r5, #1
 80201fe:	e7c6      	b.n	802018e <_printf_common+0x3e>
 8020200:	18e1      	adds	r1, r4, r3
 8020202:	1c5a      	adds	r2, r3, #1
 8020204:	2030      	movs	r0, #48	; 0x30
 8020206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802020a:	4422      	add	r2, r4
 802020c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020214:	3302      	adds	r3, #2
 8020216:	e7c7      	b.n	80201a8 <_printf_common+0x58>
 8020218:	2301      	movs	r3, #1
 802021a:	4622      	mov	r2, r4
 802021c:	4649      	mov	r1, r9
 802021e:	4638      	mov	r0, r7
 8020220:	47c0      	blx	r8
 8020222:	3001      	adds	r0, #1
 8020224:	d0e6      	beq.n	80201f4 <_printf_common+0xa4>
 8020226:	3601      	adds	r6, #1
 8020228:	e7d9      	b.n	80201de <_printf_common+0x8e>
	...

0802022c <_printf_i>:
 802022c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020230:	7e0f      	ldrb	r7, [r1, #24]
 8020232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020234:	2f78      	cmp	r7, #120	; 0x78
 8020236:	4691      	mov	r9, r2
 8020238:	4680      	mov	r8, r0
 802023a:	460c      	mov	r4, r1
 802023c:	469a      	mov	sl, r3
 802023e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8020242:	d807      	bhi.n	8020254 <_printf_i+0x28>
 8020244:	2f62      	cmp	r7, #98	; 0x62
 8020246:	d80a      	bhi.n	802025e <_printf_i+0x32>
 8020248:	2f00      	cmp	r7, #0
 802024a:	f000 80d8 	beq.w	80203fe <_printf_i+0x1d2>
 802024e:	2f58      	cmp	r7, #88	; 0x58
 8020250:	f000 80a3 	beq.w	802039a <_printf_i+0x16e>
 8020254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802025c:	e03a      	b.n	80202d4 <_printf_i+0xa8>
 802025e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020262:	2b15      	cmp	r3, #21
 8020264:	d8f6      	bhi.n	8020254 <_printf_i+0x28>
 8020266:	a101      	add	r1, pc, #4	; (adr r1, 802026c <_printf_i+0x40>)
 8020268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802026c:	080202c5 	.word	0x080202c5
 8020270:	080202d9 	.word	0x080202d9
 8020274:	08020255 	.word	0x08020255
 8020278:	08020255 	.word	0x08020255
 802027c:	08020255 	.word	0x08020255
 8020280:	08020255 	.word	0x08020255
 8020284:	080202d9 	.word	0x080202d9
 8020288:	08020255 	.word	0x08020255
 802028c:	08020255 	.word	0x08020255
 8020290:	08020255 	.word	0x08020255
 8020294:	08020255 	.word	0x08020255
 8020298:	080203e5 	.word	0x080203e5
 802029c:	08020309 	.word	0x08020309
 80202a0:	080203c7 	.word	0x080203c7
 80202a4:	08020255 	.word	0x08020255
 80202a8:	08020255 	.word	0x08020255
 80202ac:	08020407 	.word	0x08020407
 80202b0:	08020255 	.word	0x08020255
 80202b4:	08020309 	.word	0x08020309
 80202b8:	08020255 	.word	0x08020255
 80202bc:	08020255 	.word	0x08020255
 80202c0:	080203cf 	.word	0x080203cf
 80202c4:	682b      	ldr	r3, [r5, #0]
 80202c6:	1d1a      	adds	r2, r3, #4
 80202c8:	681b      	ldr	r3, [r3, #0]
 80202ca:	602a      	str	r2, [r5, #0]
 80202cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80202d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80202d4:	2301      	movs	r3, #1
 80202d6:	e0a3      	b.n	8020420 <_printf_i+0x1f4>
 80202d8:	6820      	ldr	r0, [r4, #0]
 80202da:	6829      	ldr	r1, [r5, #0]
 80202dc:	0606      	lsls	r6, r0, #24
 80202de:	f101 0304 	add.w	r3, r1, #4
 80202e2:	d50a      	bpl.n	80202fa <_printf_i+0xce>
 80202e4:	680e      	ldr	r6, [r1, #0]
 80202e6:	602b      	str	r3, [r5, #0]
 80202e8:	2e00      	cmp	r6, #0
 80202ea:	da03      	bge.n	80202f4 <_printf_i+0xc8>
 80202ec:	232d      	movs	r3, #45	; 0x2d
 80202ee:	4276      	negs	r6, r6
 80202f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80202f4:	485e      	ldr	r0, [pc, #376]	; (8020470 <_printf_i+0x244>)
 80202f6:	230a      	movs	r3, #10
 80202f8:	e019      	b.n	802032e <_printf_i+0x102>
 80202fa:	680e      	ldr	r6, [r1, #0]
 80202fc:	602b      	str	r3, [r5, #0]
 80202fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020302:	bf18      	it	ne
 8020304:	b236      	sxthne	r6, r6
 8020306:	e7ef      	b.n	80202e8 <_printf_i+0xbc>
 8020308:	682b      	ldr	r3, [r5, #0]
 802030a:	6820      	ldr	r0, [r4, #0]
 802030c:	1d19      	adds	r1, r3, #4
 802030e:	6029      	str	r1, [r5, #0]
 8020310:	0601      	lsls	r1, r0, #24
 8020312:	d501      	bpl.n	8020318 <_printf_i+0xec>
 8020314:	681e      	ldr	r6, [r3, #0]
 8020316:	e002      	b.n	802031e <_printf_i+0xf2>
 8020318:	0646      	lsls	r6, r0, #25
 802031a:	d5fb      	bpl.n	8020314 <_printf_i+0xe8>
 802031c:	881e      	ldrh	r6, [r3, #0]
 802031e:	4854      	ldr	r0, [pc, #336]	; (8020470 <_printf_i+0x244>)
 8020320:	2f6f      	cmp	r7, #111	; 0x6f
 8020322:	bf0c      	ite	eq
 8020324:	2308      	moveq	r3, #8
 8020326:	230a      	movne	r3, #10
 8020328:	2100      	movs	r1, #0
 802032a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802032e:	6865      	ldr	r5, [r4, #4]
 8020330:	60a5      	str	r5, [r4, #8]
 8020332:	2d00      	cmp	r5, #0
 8020334:	bfa2      	ittt	ge
 8020336:	6821      	ldrge	r1, [r4, #0]
 8020338:	f021 0104 	bicge.w	r1, r1, #4
 802033c:	6021      	strge	r1, [r4, #0]
 802033e:	b90e      	cbnz	r6, 8020344 <_printf_i+0x118>
 8020340:	2d00      	cmp	r5, #0
 8020342:	d04d      	beq.n	80203e0 <_printf_i+0x1b4>
 8020344:	4615      	mov	r5, r2
 8020346:	fbb6 f1f3 	udiv	r1, r6, r3
 802034a:	fb03 6711 	mls	r7, r3, r1, r6
 802034e:	5dc7      	ldrb	r7, [r0, r7]
 8020350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020354:	4637      	mov	r7, r6
 8020356:	42bb      	cmp	r3, r7
 8020358:	460e      	mov	r6, r1
 802035a:	d9f4      	bls.n	8020346 <_printf_i+0x11a>
 802035c:	2b08      	cmp	r3, #8
 802035e:	d10b      	bne.n	8020378 <_printf_i+0x14c>
 8020360:	6823      	ldr	r3, [r4, #0]
 8020362:	07de      	lsls	r6, r3, #31
 8020364:	d508      	bpl.n	8020378 <_printf_i+0x14c>
 8020366:	6923      	ldr	r3, [r4, #16]
 8020368:	6861      	ldr	r1, [r4, #4]
 802036a:	4299      	cmp	r1, r3
 802036c:	bfde      	ittt	le
 802036e:	2330      	movle	r3, #48	; 0x30
 8020370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020374:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8020378:	1b52      	subs	r2, r2, r5
 802037a:	6122      	str	r2, [r4, #16]
 802037c:	f8cd a000 	str.w	sl, [sp]
 8020380:	464b      	mov	r3, r9
 8020382:	aa03      	add	r2, sp, #12
 8020384:	4621      	mov	r1, r4
 8020386:	4640      	mov	r0, r8
 8020388:	f7ff fee2 	bl	8020150 <_printf_common>
 802038c:	3001      	adds	r0, #1
 802038e:	d14c      	bne.n	802042a <_printf_i+0x1fe>
 8020390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020394:	b004      	add	sp, #16
 8020396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802039a:	4835      	ldr	r0, [pc, #212]	; (8020470 <_printf_i+0x244>)
 802039c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80203a0:	6829      	ldr	r1, [r5, #0]
 80203a2:	6823      	ldr	r3, [r4, #0]
 80203a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80203a8:	6029      	str	r1, [r5, #0]
 80203aa:	061d      	lsls	r5, r3, #24
 80203ac:	d514      	bpl.n	80203d8 <_printf_i+0x1ac>
 80203ae:	07df      	lsls	r7, r3, #31
 80203b0:	bf44      	itt	mi
 80203b2:	f043 0320 	orrmi.w	r3, r3, #32
 80203b6:	6023      	strmi	r3, [r4, #0]
 80203b8:	b91e      	cbnz	r6, 80203c2 <_printf_i+0x196>
 80203ba:	6823      	ldr	r3, [r4, #0]
 80203bc:	f023 0320 	bic.w	r3, r3, #32
 80203c0:	6023      	str	r3, [r4, #0]
 80203c2:	2310      	movs	r3, #16
 80203c4:	e7b0      	b.n	8020328 <_printf_i+0xfc>
 80203c6:	6823      	ldr	r3, [r4, #0]
 80203c8:	f043 0320 	orr.w	r3, r3, #32
 80203cc:	6023      	str	r3, [r4, #0]
 80203ce:	2378      	movs	r3, #120	; 0x78
 80203d0:	4828      	ldr	r0, [pc, #160]	; (8020474 <_printf_i+0x248>)
 80203d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80203d6:	e7e3      	b.n	80203a0 <_printf_i+0x174>
 80203d8:	0659      	lsls	r1, r3, #25
 80203da:	bf48      	it	mi
 80203dc:	b2b6      	uxthmi	r6, r6
 80203de:	e7e6      	b.n	80203ae <_printf_i+0x182>
 80203e0:	4615      	mov	r5, r2
 80203e2:	e7bb      	b.n	802035c <_printf_i+0x130>
 80203e4:	682b      	ldr	r3, [r5, #0]
 80203e6:	6826      	ldr	r6, [r4, #0]
 80203e8:	6961      	ldr	r1, [r4, #20]
 80203ea:	1d18      	adds	r0, r3, #4
 80203ec:	6028      	str	r0, [r5, #0]
 80203ee:	0635      	lsls	r5, r6, #24
 80203f0:	681b      	ldr	r3, [r3, #0]
 80203f2:	d501      	bpl.n	80203f8 <_printf_i+0x1cc>
 80203f4:	6019      	str	r1, [r3, #0]
 80203f6:	e002      	b.n	80203fe <_printf_i+0x1d2>
 80203f8:	0670      	lsls	r0, r6, #25
 80203fa:	d5fb      	bpl.n	80203f4 <_printf_i+0x1c8>
 80203fc:	8019      	strh	r1, [r3, #0]
 80203fe:	2300      	movs	r3, #0
 8020400:	6123      	str	r3, [r4, #16]
 8020402:	4615      	mov	r5, r2
 8020404:	e7ba      	b.n	802037c <_printf_i+0x150>
 8020406:	682b      	ldr	r3, [r5, #0]
 8020408:	1d1a      	adds	r2, r3, #4
 802040a:	602a      	str	r2, [r5, #0]
 802040c:	681d      	ldr	r5, [r3, #0]
 802040e:	6862      	ldr	r2, [r4, #4]
 8020410:	2100      	movs	r1, #0
 8020412:	4628      	mov	r0, r5
 8020414:	f7df ff04 	bl	8000220 <memchr>
 8020418:	b108      	cbz	r0, 802041e <_printf_i+0x1f2>
 802041a:	1b40      	subs	r0, r0, r5
 802041c:	6060      	str	r0, [r4, #4]
 802041e:	6863      	ldr	r3, [r4, #4]
 8020420:	6123      	str	r3, [r4, #16]
 8020422:	2300      	movs	r3, #0
 8020424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020428:	e7a8      	b.n	802037c <_printf_i+0x150>
 802042a:	6923      	ldr	r3, [r4, #16]
 802042c:	462a      	mov	r2, r5
 802042e:	4649      	mov	r1, r9
 8020430:	4640      	mov	r0, r8
 8020432:	47d0      	blx	sl
 8020434:	3001      	adds	r0, #1
 8020436:	d0ab      	beq.n	8020390 <_printf_i+0x164>
 8020438:	6823      	ldr	r3, [r4, #0]
 802043a:	079b      	lsls	r3, r3, #30
 802043c:	d413      	bmi.n	8020466 <_printf_i+0x23a>
 802043e:	68e0      	ldr	r0, [r4, #12]
 8020440:	9b03      	ldr	r3, [sp, #12]
 8020442:	4298      	cmp	r0, r3
 8020444:	bfb8      	it	lt
 8020446:	4618      	movlt	r0, r3
 8020448:	e7a4      	b.n	8020394 <_printf_i+0x168>
 802044a:	2301      	movs	r3, #1
 802044c:	4632      	mov	r2, r6
 802044e:	4649      	mov	r1, r9
 8020450:	4640      	mov	r0, r8
 8020452:	47d0      	blx	sl
 8020454:	3001      	adds	r0, #1
 8020456:	d09b      	beq.n	8020390 <_printf_i+0x164>
 8020458:	3501      	adds	r5, #1
 802045a:	68e3      	ldr	r3, [r4, #12]
 802045c:	9903      	ldr	r1, [sp, #12]
 802045e:	1a5b      	subs	r3, r3, r1
 8020460:	42ab      	cmp	r3, r5
 8020462:	dcf2      	bgt.n	802044a <_printf_i+0x21e>
 8020464:	e7eb      	b.n	802043e <_printf_i+0x212>
 8020466:	2500      	movs	r5, #0
 8020468:	f104 0619 	add.w	r6, r4, #25
 802046c:	e7f5      	b.n	802045a <_printf_i+0x22e>
 802046e:	bf00      	nop
 8020470:	0802421f 	.word	0x0802421f
 8020474:	08024230 	.word	0x08024230

08020478 <_read_r>:
 8020478:	b538      	push	{r3, r4, r5, lr}
 802047a:	4d07      	ldr	r5, [pc, #28]	; (8020498 <_read_r+0x20>)
 802047c:	4604      	mov	r4, r0
 802047e:	4608      	mov	r0, r1
 8020480:	4611      	mov	r1, r2
 8020482:	2200      	movs	r2, #0
 8020484:	602a      	str	r2, [r5, #0]
 8020486:	461a      	mov	r2, r3
 8020488:	f7e6 fe28 	bl	80070dc <_read>
 802048c:	1c43      	adds	r3, r0, #1
 802048e:	d102      	bne.n	8020496 <_read_r+0x1e>
 8020490:	682b      	ldr	r3, [r5, #0]
 8020492:	b103      	cbz	r3, 8020496 <_read_r+0x1e>
 8020494:	6023      	str	r3, [r4, #0]
 8020496:	bd38      	pop	{r3, r4, r5, pc}
 8020498:	2000c158 	.word	0x2000c158

0802049c <__swbuf_r>:
 802049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802049e:	460e      	mov	r6, r1
 80204a0:	4614      	mov	r4, r2
 80204a2:	4605      	mov	r5, r0
 80204a4:	b118      	cbz	r0, 80204ae <__swbuf_r+0x12>
 80204a6:	6983      	ldr	r3, [r0, #24]
 80204a8:	b90b      	cbnz	r3, 80204ae <__swbuf_r+0x12>
 80204aa:	f7fe fe83 	bl	801f1b4 <__sinit>
 80204ae:	4b21      	ldr	r3, [pc, #132]	; (8020534 <__swbuf_r+0x98>)
 80204b0:	429c      	cmp	r4, r3
 80204b2:	d12b      	bne.n	802050c <__swbuf_r+0x70>
 80204b4:	686c      	ldr	r4, [r5, #4]
 80204b6:	69a3      	ldr	r3, [r4, #24]
 80204b8:	60a3      	str	r3, [r4, #8]
 80204ba:	89a3      	ldrh	r3, [r4, #12]
 80204bc:	071a      	lsls	r2, r3, #28
 80204be:	d52f      	bpl.n	8020520 <__swbuf_r+0x84>
 80204c0:	6923      	ldr	r3, [r4, #16]
 80204c2:	b36b      	cbz	r3, 8020520 <__swbuf_r+0x84>
 80204c4:	6923      	ldr	r3, [r4, #16]
 80204c6:	6820      	ldr	r0, [r4, #0]
 80204c8:	1ac0      	subs	r0, r0, r3
 80204ca:	6963      	ldr	r3, [r4, #20]
 80204cc:	b2f6      	uxtb	r6, r6
 80204ce:	4283      	cmp	r3, r0
 80204d0:	4637      	mov	r7, r6
 80204d2:	dc04      	bgt.n	80204de <__swbuf_r+0x42>
 80204d4:	4621      	mov	r1, r4
 80204d6:	4628      	mov	r0, r5
 80204d8:	f7ff fb24 	bl	801fb24 <_fflush_r>
 80204dc:	bb30      	cbnz	r0, 802052c <__swbuf_r+0x90>
 80204de:	68a3      	ldr	r3, [r4, #8]
 80204e0:	3b01      	subs	r3, #1
 80204e2:	60a3      	str	r3, [r4, #8]
 80204e4:	6823      	ldr	r3, [r4, #0]
 80204e6:	1c5a      	adds	r2, r3, #1
 80204e8:	6022      	str	r2, [r4, #0]
 80204ea:	701e      	strb	r6, [r3, #0]
 80204ec:	6963      	ldr	r3, [r4, #20]
 80204ee:	3001      	adds	r0, #1
 80204f0:	4283      	cmp	r3, r0
 80204f2:	d004      	beq.n	80204fe <__swbuf_r+0x62>
 80204f4:	89a3      	ldrh	r3, [r4, #12]
 80204f6:	07db      	lsls	r3, r3, #31
 80204f8:	d506      	bpl.n	8020508 <__swbuf_r+0x6c>
 80204fa:	2e0a      	cmp	r6, #10
 80204fc:	d104      	bne.n	8020508 <__swbuf_r+0x6c>
 80204fe:	4621      	mov	r1, r4
 8020500:	4628      	mov	r0, r5
 8020502:	f7ff fb0f 	bl	801fb24 <_fflush_r>
 8020506:	b988      	cbnz	r0, 802052c <__swbuf_r+0x90>
 8020508:	4638      	mov	r0, r7
 802050a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802050c:	4b0a      	ldr	r3, [pc, #40]	; (8020538 <__swbuf_r+0x9c>)
 802050e:	429c      	cmp	r4, r3
 8020510:	d101      	bne.n	8020516 <__swbuf_r+0x7a>
 8020512:	68ac      	ldr	r4, [r5, #8]
 8020514:	e7cf      	b.n	80204b6 <__swbuf_r+0x1a>
 8020516:	4b09      	ldr	r3, [pc, #36]	; (802053c <__swbuf_r+0xa0>)
 8020518:	429c      	cmp	r4, r3
 802051a:	bf08      	it	eq
 802051c:	68ec      	ldreq	r4, [r5, #12]
 802051e:	e7ca      	b.n	80204b6 <__swbuf_r+0x1a>
 8020520:	4621      	mov	r1, r4
 8020522:	4628      	mov	r0, r5
 8020524:	f000 f80c 	bl	8020540 <__swsetup_r>
 8020528:	2800      	cmp	r0, #0
 802052a:	d0cb      	beq.n	80204c4 <__swbuf_r+0x28>
 802052c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8020530:	e7ea      	b.n	8020508 <__swbuf_r+0x6c>
 8020532:	bf00      	nop
 8020534:	0802411c 	.word	0x0802411c
 8020538:	0802413c 	.word	0x0802413c
 802053c:	080240fc 	.word	0x080240fc

08020540 <__swsetup_r>:
 8020540:	4b32      	ldr	r3, [pc, #200]	; (802060c <__swsetup_r+0xcc>)
 8020542:	b570      	push	{r4, r5, r6, lr}
 8020544:	681d      	ldr	r5, [r3, #0]
 8020546:	4606      	mov	r6, r0
 8020548:	460c      	mov	r4, r1
 802054a:	b125      	cbz	r5, 8020556 <__swsetup_r+0x16>
 802054c:	69ab      	ldr	r3, [r5, #24]
 802054e:	b913      	cbnz	r3, 8020556 <__swsetup_r+0x16>
 8020550:	4628      	mov	r0, r5
 8020552:	f7fe fe2f 	bl	801f1b4 <__sinit>
 8020556:	4b2e      	ldr	r3, [pc, #184]	; (8020610 <__swsetup_r+0xd0>)
 8020558:	429c      	cmp	r4, r3
 802055a:	d10f      	bne.n	802057c <__swsetup_r+0x3c>
 802055c:	686c      	ldr	r4, [r5, #4]
 802055e:	89a3      	ldrh	r3, [r4, #12]
 8020560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020564:	0719      	lsls	r1, r3, #28
 8020566:	d42c      	bmi.n	80205c2 <__swsetup_r+0x82>
 8020568:	06dd      	lsls	r5, r3, #27
 802056a:	d411      	bmi.n	8020590 <__swsetup_r+0x50>
 802056c:	2309      	movs	r3, #9
 802056e:	6033      	str	r3, [r6, #0]
 8020570:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020574:	81a3      	strh	r3, [r4, #12]
 8020576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802057a:	e03e      	b.n	80205fa <__swsetup_r+0xba>
 802057c:	4b25      	ldr	r3, [pc, #148]	; (8020614 <__swsetup_r+0xd4>)
 802057e:	429c      	cmp	r4, r3
 8020580:	d101      	bne.n	8020586 <__swsetup_r+0x46>
 8020582:	68ac      	ldr	r4, [r5, #8]
 8020584:	e7eb      	b.n	802055e <__swsetup_r+0x1e>
 8020586:	4b24      	ldr	r3, [pc, #144]	; (8020618 <__swsetup_r+0xd8>)
 8020588:	429c      	cmp	r4, r3
 802058a:	bf08      	it	eq
 802058c:	68ec      	ldreq	r4, [r5, #12]
 802058e:	e7e6      	b.n	802055e <__swsetup_r+0x1e>
 8020590:	0758      	lsls	r0, r3, #29
 8020592:	d512      	bpl.n	80205ba <__swsetup_r+0x7a>
 8020594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020596:	b141      	cbz	r1, 80205aa <__swsetup_r+0x6a>
 8020598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802059c:	4299      	cmp	r1, r3
 802059e:	d002      	beq.n	80205a6 <__swsetup_r+0x66>
 80205a0:	4630      	mov	r0, r6
 80205a2:	f7fe ff1d 	bl	801f3e0 <_free_r>
 80205a6:	2300      	movs	r3, #0
 80205a8:	6363      	str	r3, [r4, #52]	; 0x34
 80205aa:	89a3      	ldrh	r3, [r4, #12]
 80205ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80205b0:	81a3      	strh	r3, [r4, #12]
 80205b2:	2300      	movs	r3, #0
 80205b4:	6063      	str	r3, [r4, #4]
 80205b6:	6923      	ldr	r3, [r4, #16]
 80205b8:	6023      	str	r3, [r4, #0]
 80205ba:	89a3      	ldrh	r3, [r4, #12]
 80205bc:	f043 0308 	orr.w	r3, r3, #8
 80205c0:	81a3      	strh	r3, [r4, #12]
 80205c2:	6923      	ldr	r3, [r4, #16]
 80205c4:	b94b      	cbnz	r3, 80205da <__swsetup_r+0x9a>
 80205c6:	89a3      	ldrh	r3, [r4, #12]
 80205c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80205cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80205d0:	d003      	beq.n	80205da <__swsetup_r+0x9a>
 80205d2:	4621      	mov	r1, r4
 80205d4:	4630      	mov	r0, r6
 80205d6:	f000 f847 	bl	8020668 <__smakebuf_r>
 80205da:	89a0      	ldrh	r0, [r4, #12]
 80205dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80205e0:	f010 0301 	ands.w	r3, r0, #1
 80205e4:	d00a      	beq.n	80205fc <__swsetup_r+0xbc>
 80205e6:	2300      	movs	r3, #0
 80205e8:	60a3      	str	r3, [r4, #8]
 80205ea:	6963      	ldr	r3, [r4, #20]
 80205ec:	425b      	negs	r3, r3
 80205ee:	61a3      	str	r3, [r4, #24]
 80205f0:	6923      	ldr	r3, [r4, #16]
 80205f2:	b943      	cbnz	r3, 8020606 <__swsetup_r+0xc6>
 80205f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80205f8:	d1ba      	bne.n	8020570 <__swsetup_r+0x30>
 80205fa:	bd70      	pop	{r4, r5, r6, pc}
 80205fc:	0781      	lsls	r1, r0, #30
 80205fe:	bf58      	it	pl
 8020600:	6963      	ldrpl	r3, [r4, #20]
 8020602:	60a3      	str	r3, [r4, #8]
 8020604:	e7f4      	b.n	80205f0 <__swsetup_r+0xb0>
 8020606:	2000      	movs	r0, #0
 8020608:	e7f7      	b.n	80205fa <__swsetup_r+0xba>
 802060a:	bf00      	nop
 802060c:	20000034 	.word	0x20000034
 8020610:	0802411c 	.word	0x0802411c
 8020614:	0802413c 	.word	0x0802413c
 8020618:	080240fc 	.word	0x080240fc

0802061c <__swhatbuf_r>:
 802061c:	b570      	push	{r4, r5, r6, lr}
 802061e:	460e      	mov	r6, r1
 8020620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020624:	2900      	cmp	r1, #0
 8020626:	b096      	sub	sp, #88	; 0x58
 8020628:	4614      	mov	r4, r2
 802062a:	461d      	mov	r5, r3
 802062c:	da08      	bge.n	8020640 <__swhatbuf_r+0x24>
 802062e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8020632:	2200      	movs	r2, #0
 8020634:	602a      	str	r2, [r5, #0]
 8020636:	061a      	lsls	r2, r3, #24
 8020638:	d410      	bmi.n	802065c <__swhatbuf_r+0x40>
 802063a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802063e:	e00e      	b.n	802065e <__swhatbuf_r+0x42>
 8020640:	466a      	mov	r2, sp
 8020642:	f000 f881 	bl	8020748 <_fstat_r>
 8020646:	2800      	cmp	r0, #0
 8020648:	dbf1      	blt.n	802062e <__swhatbuf_r+0x12>
 802064a:	9a01      	ldr	r2, [sp, #4]
 802064c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020650:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020654:	425a      	negs	r2, r3
 8020656:	415a      	adcs	r2, r3
 8020658:	602a      	str	r2, [r5, #0]
 802065a:	e7ee      	b.n	802063a <__swhatbuf_r+0x1e>
 802065c:	2340      	movs	r3, #64	; 0x40
 802065e:	2000      	movs	r0, #0
 8020660:	6023      	str	r3, [r4, #0]
 8020662:	b016      	add	sp, #88	; 0x58
 8020664:	bd70      	pop	{r4, r5, r6, pc}
	...

08020668 <__smakebuf_r>:
 8020668:	898b      	ldrh	r3, [r1, #12]
 802066a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802066c:	079d      	lsls	r5, r3, #30
 802066e:	4606      	mov	r6, r0
 8020670:	460c      	mov	r4, r1
 8020672:	d507      	bpl.n	8020684 <__smakebuf_r+0x1c>
 8020674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020678:	6023      	str	r3, [r4, #0]
 802067a:	6123      	str	r3, [r4, #16]
 802067c:	2301      	movs	r3, #1
 802067e:	6163      	str	r3, [r4, #20]
 8020680:	b002      	add	sp, #8
 8020682:	bd70      	pop	{r4, r5, r6, pc}
 8020684:	ab01      	add	r3, sp, #4
 8020686:	466a      	mov	r2, sp
 8020688:	f7ff ffc8 	bl	802061c <__swhatbuf_r>
 802068c:	9900      	ldr	r1, [sp, #0]
 802068e:	4605      	mov	r5, r0
 8020690:	4630      	mov	r0, r6
 8020692:	f7fe ff11 	bl	801f4b8 <_malloc_r>
 8020696:	b948      	cbnz	r0, 80206ac <__smakebuf_r+0x44>
 8020698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802069c:	059a      	lsls	r2, r3, #22
 802069e:	d4ef      	bmi.n	8020680 <__smakebuf_r+0x18>
 80206a0:	f023 0303 	bic.w	r3, r3, #3
 80206a4:	f043 0302 	orr.w	r3, r3, #2
 80206a8:	81a3      	strh	r3, [r4, #12]
 80206aa:	e7e3      	b.n	8020674 <__smakebuf_r+0xc>
 80206ac:	4b0d      	ldr	r3, [pc, #52]	; (80206e4 <__smakebuf_r+0x7c>)
 80206ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80206b0:	89a3      	ldrh	r3, [r4, #12]
 80206b2:	6020      	str	r0, [r4, #0]
 80206b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80206b8:	81a3      	strh	r3, [r4, #12]
 80206ba:	9b00      	ldr	r3, [sp, #0]
 80206bc:	6163      	str	r3, [r4, #20]
 80206be:	9b01      	ldr	r3, [sp, #4]
 80206c0:	6120      	str	r0, [r4, #16]
 80206c2:	b15b      	cbz	r3, 80206dc <__smakebuf_r+0x74>
 80206c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80206c8:	4630      	mov	r0, r6
 80206ca:	f000 f84f 	bl	802076c <_isatty_r>
 80206ce:	b128      	cbz	r0, 80206dc <__smakebuf_r+0x74>
 80206d0:	89a3      	ldrh	r3, [r4, #12]
 80206d2:	f023 0303 	bic.w	r3, r3, #3
 80206d6:	f043 0301 	orr.w	r3, r3, #1
 80206da:	81a3      	strh	r3, [r4, #12]
 80206dc:	89a0      	ldrh	r0, [r4, #12]
 80206de:	4305      	orrs	r5, r0
 80206e0:	81a5      	strh	r5, [r4, #12]
 80206e2:	e7cd      	b.n	8020680 <__smakebuf_r+0x18>
 80206e4:	0801f14d 	.word	0x0801f14d

080206e8 <_realloc_r>:
 80206e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80206ec:	4680      	mov	r8, r0
 80206ee:	4614      	mov	r4, r2
 80206f0:	460e      	mov	r6, r1
 80206f2:	b921      	cbnz	r1, 80206fe <_realloc_r+0x16>
 80206f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80206f8:	4611      	mov	r1, r2
 80206fa:	f7fe bedd 	b.w	801f4b8 <_malloc_r>
 80206fe:	b92a      	cbnz	r2, 802070c <_realloc_r+0x24>
 8020700:	f7fe fe6e 	bl	801f3e0 <_free_r>
 8020704:	4625      	mov	r5, r4
 8020706:	4628      	mov	r0, r5
 8020708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802070c:	f000 f83e 	bl	802078c <_malloc_usable_size_r>
 8020710:	4284      	cmp	r4, r0
 8020712:	4607      	mov	r7, r0
 8020714:	d802      	bhi.n	802071c <_realloc_r+0x34>
 8020716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802071a:	d812      	bhi.n	8020742 <_realloc_r+0x5a>
 802071c:	4621      	mov	r1, r4
 802071e:	4640      	mov	r0, r8
 8020720:	f7fe feca 	bl	801f4b8 <_malloc_r>
 8020724:	4605      	mov	r5, r0
 8020726:	2800      	cmp	r0, #0
 8020728:	d0ed      	beq.n	8020706 <_realloc_r+0x1e>
 802072a:	42bc      	cmp	r4, r7
 802072c:	4622      	mov	r2, r4
 802072e:	4631      	mov	r1, r6
 8020730:	bf28      	it	cs
 8020732:	463a      	movcs	r2, r7
 8020734:	f7fe fe24 	bl	801f380 <memcpy>
 8020738:	4631      	mov	r1, r6
 802073a:	4640      	mov	r0, r8
 802073c:	f7fe fe50 	bl	801f3e0 <_free_r>
 8020740:	e7e1      	b.n	8020706 <_realloc_r+0x1e>
 8020742:	4635      	mov	r5, r6
 8020744:	e7df      	b.n	8020706 <_realloc_r+0x1e>
	...

08020748 <_fstat_r>:
 8020748:	b538      	push	{r3, r4, r5, lr}
 802074a:	4d07      	ldr	r5, [pc, #28]	; (8020768 <_fstat_r+0x20>)
 802074c:	2300      	movs	r3, #0
 802074e:	4604      	mov	r4, r0
 8020750:	4608      	mov	r0, r1
 8020752:	4611      	mov	r1, r2
 8020754:	602b      	str	r3, [r5, #0]
 8020756:	f7e6 fd06 	bl	8007166 <_fstat>
 802075a:	1c43      	adds	r3, r0, #1
 802075c:	d102      	bne.n	8020764 <_fstat_r+0x1c>
 802075e:	682b      	ldr	r3, [r5, #0]
 8020760:	b103      	cbz	r3, 8020764 <_fstat_r+0x1c>
 8020762:	6023      	str	r3, [r4, #0]
 8020764:	bd38      	pop	{r3, r4, r5, pc}
 8020766:	bf00      	nop
 8020768:	2000c158 	.word	0x2000c158

0802076c <_isatty_r>:
 802076c:	b538      	push	{r3, r4, r5, lr}
 802076e:	4d06      	ldr	r5, [pc, #24]	; (8020788 <_isatty_r+0x1c>)
 8020770:	2300      	movs	r3, #0
 8020772:	4604      	mov	r4, r0
 8020774:	4608      	mov	r0, r1
 8020776:	602b      	str	r3, [r5, #0]
 8020778:	f7e6 fd05 	bl	8007186 <_isatty>
 802077c:	1c43      	adds	r3, r0, #1
 802077e:	d102      	bne.n	8020786 <_isatty_r+0x1a>
 8020780:	682b      	ldr	r3, [r5, #0]
 8020782:	b103      	cbz	r3, 8020786 <_isatty_r+0x1a>
 8020784:	6023      	str	r3, [r4, #0]
 8020786:	bd38      	pop	{r3, r4, r5, pc}
 8020788:	2000c158 	.word	0x2000c158

0802078c <_malloc_usable_size_r>:
 802078c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020790:	1f18      	subs	r0, r3, #4
 8020792:	2b00      	cmp	r3, #0
 8020794:	bfbc      	itt	lt
 8020796:	580b      	ldrlt	r3, [r1, r0]
 8020798:	18c0      	addlt	r0, r0, r3
 802079a:	4770      	bx	lr

0802079c <_init>:
 802079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802079e:	bf00      	nop
 80207a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80207a2:	bc08      	pop	{r3}
 80207a4:	469e      	mov	lr, r3
 80207a6:	4770      	bx	lr

080207a8 <_fini>:
 80207a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80207aa:	bf00      	nop
 80207ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80207ae:	bc08      	pop	{r3}
 80207b0:	469e      	mov	lr, r3
 80207b2:	4770      	bx	lr
